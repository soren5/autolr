[{"genotype": [[0], [1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [5, 2, 2, 1, 2, 6, 2, 9, 2, 5, 5, 5, 0, 5, 4, 3, 2, 3, 6, 6, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 2, 0, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 1, 2, 0, 2, 2], [70, 83, 89, 75, 49, 58, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7834285497665405, "mapping_values": [1, 44, 44, 27, 17, 3, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.square(grad))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.divide_no_nan(tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(grad, tf.math.square(grad))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))))), alpha))))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))), tf.math.add(alpha, grad))))))))), alpha)), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.2843195561325986, 2.2334322468983485, 2.1504844710055657, 2.0222064836575386, 1.823376403319727, 1.6049456915063722, 1.4223558659944646, 1.2939303804303615, 1.1800521134448452, 1.1119763671509453, 1.0559440921908907, 1.0107490813900624, 0.9797283180118033, 0.9460283589873253, 0.9131089851384181, 0.9000722736557162, 0.8863687983924026, 0.8585160750014482, 0.8472043927146333, 0.8324977190203875, 0.8248694567805693, 0.803470823554126, 0.7992870150193752, 0.792089595692017, 0.7789184256095014, 0.763315547010162, 0.7597343645878692, 0.7525445192544499, 0.7478344784893333, 0.736011984892777, 0.7347810526549808, 0.7275742542757854, 0.7192959176739839, 0.7276346734045298, 0.7058963471510155, 0.7043868641906238, 0.706351031882022, 0.7002024242843635, 0.6865309359469607, 0.6823730031890702, 0.6780954911535316, 0.6742494784609485, 0.6733496213129341, 0.6744758018397415, 0.6698329665043319, 0.6623011925405972, 0.6660793124802785, 0.6501068554109098, 0.6554531648709805, 0.653036361357256, 0.6467255696550006, 0.6450068656684322, 0.6446980206391059], "accuracy": [0.14198917150497437, 0.2616563141345978, 0.3531897962093353, 0.40087175369262695, 0.44168537855148315, 0.4913485646247864, 0.5262184739112854, 0.5552766919136047, 0.589750349521637, 0.6123365759849548, 0.6258090138435364, 0.6429798007011414, 0.6546030640602112, 0.6682076454162598, 0.6733588576316833, 0.6777176260948181, 0.6837934255599976, 0.6951525807380676, 0.6927750706672668, 0.7005679607391357, 0.7087571024894714, 0.7053229212760925, 0.7037379741668701, 0.7125874757766724, 0.7190595865249634, 0.7283053994178772, 0.7232862114906311, 0.7231541275978088, 0.7281733155250549, 0.7290979027748108, 0.7360982894897461, 0.7367587089538574, 0.7397965788841248, 0.7329282760620117, 0.7430986762046814, 0.7423061728477478, 0.7437590956687927, 0.7440232634544373, 0.750231146812439, 0.7500990629196167, 0.7465327978134155, 0.7518161535263062, 0.750231146812439, 0.7524765729904175, 0.7490423917770386, 0.7588165402412415, 0.7559106945991516, 0.7617223858833313, 0.7609298825263977, 0.7594769597053528, 0.7638356685638428, 0.7618544697761536, 0.7627789974212646], "val_loss": [1.9267775671822684, 1.867985793522426, 1.7655226843697684, 1.5999549797603063, 1.3760389259883337, 1.1603334631238664, 1.002204520361764, 0.8930094242095947, 0.818878173828125, 0.7657378741673061, 0.7249319042478289, 0.6991810117449079, 0.6737865890775409, 0.6548524413790021, 0.6386823994772775, 0.6296693767820086, 0.614431517464774, 0.6048932245799473, 0.5946742977414813, 0.5868902376719883, 0.5792923484529767, 0.5722724199295044, 0.5639275312423706, 0.56117011819567, 0.5560097183500018, 0.554165244102478, 0.5450692858014788, 0.5411747012819562, 0.5378554889133998, 0.5331823825836182, 0.5297215495790754, 0.524628758430481, 0.518385784966605, 0.5217358214514596, 0.5133405753544399, 0.5103986774172101, 0.5044070993150983, 0.5049288783754621, 0.49925884178706575, 0.49940856865474154, 0.49581386361803326, 0.49632344927106586, 0.4943174123764038, 0.4927844660622733, 0.485802241734096, 0.4832934481757028, 0.48721740927015034, 0.4779996020453317, 0.47776149000440327, 0.4794811691556658, 0.474313531603132, 0.47726896830967497, 0.4737417187009539], "val_accuracy": [0.3646666705608368, 0.44066667556762695, 0.5103333592414856, 0.5653333067893982, 0.5883333086967468, 0.6433333158493042, 0.6579999923706055, 0.6846666932106018, 0.7049999833106995, 0.7076666951179504, 0.7143333554267883, 0.7196666598320007, 0.7213333249092102, 0.7353333234786987, 0.7300000190734863, 0.7369999885559082, 0.7369999885559082, 0.750333309173584, 0.7563333511352539, 0.7546666860580444, 0.7509999871253967, 0.7563333511352539, 0.7590000033378601, 0.7506666779518127, 0.7639999985694885, 0.7580000162124634, 0.7683333158493042, 0.7726666927337646, 0.7733333110809326, 0.7710000276565552, 0.7720000147819519, 0.7689999938011169, 0.7773333191871643, 0.7770000100135803, 0.7773333191871643, 0.778333306312561, 0.781333327293396, 0.7756666541099548, 0.7803333401679993, 0.7760000228881836, 0.784333348274231, 0.7726666927337646, 0.7846666574478149, 0.7876666784286499, 0.7846666574478149, 0.7889999747276306, 0.7893333435058594, 0.7940000295639038, 0.7926666736602783, 0.7863333225250244, 0.7889999747276306, 0.7873333096504211, 0.7896666526794434]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 6, 2, 1, 2, 6, 5, 4, 2, 5, 5, 5, 7, 8, 4, 0, 2, 3, 9, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 0, 0, 2, 1, 1, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1], [70, 83, 93, 75, 78, 83, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7828571200370789, "mapping_values": [1, 17, 17, 9, 8, 3, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), tf.math.square(tf.math.pow(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, alpha))))))), alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.2843195561325986, 2.2334316800598297, 2.1504832607423467, 2.022217699423631, 1.8233894914951558, 1.60495134205189, 1.4223799151578174, 1.293967767477256, 1.1800493541221735, 1.1119828178520137, 1.055948116492444, 1.0108022151637654, 0.9797611149184661, 0.9460952770456489, 0.9131077961867528, 0.9001177247363217, 0.8863203743146222, 0.8584728854175855, 0.8472050188743774, 0.8324583821749533, 0.8248573844742387, 0.8034444373627979, 0.7993442701421094, 0.7920889403873258, 0.7788816417575182, 0.7631748124844898, 0.7597097835567854, 0.7525135397422961, 0.7476851170041919, 0.7361744606200462, 0.7348073254471142, 0.7276861082214832, 0.7194412129115214, 0.7276312985188453, 0.705749810127739, 0.7043602713158007, 0.7064428346236746, 0.7005731582547129, 0.6865074256344746, 0.6822714604060443, 0.678119120391888, 0.6742466605098539, 0.6735289668709359, 0.6745989217482318, 0.6698064299354685, 0.6621548374961034, 0.6659803132276494, 0.6501465772499168, 0.6554033932054771, 0.6531640884426244, 0.6470985871579401, 0.6451618156853826, 0.6447342182934607], "accuracy": [0.14198917150497437, 0.2616563141345978, 0.3531897962093353, 0.4010038375854492, 0.4419495463371277, 0.4913485646247864, 0.5260863900184631, 0.555408775806427, 0.5898824334144592, 0.6124686598777771, 0.6262052655220032, 0.6427156329154968, 0.6548672318458557, 0.6682076454162598, 0.6734909415245056, 0.677189290523529, 0.6836613416671753, 0.6946242451667786, 0.6931713223457336, 0.700171709060669, 0.7082287669181824, 0.7053229212760925, 0.7038700580596924, 0.7124554514884949, 0.7189275026321411, 0.7281733155250549, 0.7230220437049866, 0.7232862114906311, 0.7281733155250549, 0.7290979027748108, 0.7359662055969238, 0.7376832365989685, 0.7392682433128357, 0.7327961921691895, 0.7425703406333923, 0.7420420050621033, 0.7433628439903259, 0.7433628439903259, 0.750759482383728, 0.7500990629196167, 0.7477215528488159, 0.7526086568832397, 0.750231146812439, 0.7518161535263062, 0.7497028112411499, 0.7589486241340637, 0.7561748623847961, 0.7621186375617981, 0.7609298825263977, 0.7600052952766418, 0.763439416885376, 0.761590301990509, 0.7602694630622864], "val_loss": [1.9267773628234863, 1.8679859978812081, 1.7655231612069267, 1.5999842371259416, 1.3760672637394495, 1.160393578665597, 1.0022835390908378, 0.8929884774344308, 0.8187960045678275, 0.7656829697745187, 0.7249938590185983, 0.6991795982633319, 0.6738004684448242, 0.6548388344900948, 0.6385062762669155, 0.6295369522912162, 0.6143564326422555, 0.6049572229385376, 0.5947913612638202, 0.586945789200919, 0.5794836793627057, 0.5724869285311017, 0.5639400652476719, 0.5614884921482631, 0.5561537572315761, 0.5545101846967425, 0.5450039080211094, 0.5412803207124982, 0.5380972964423043, 0.5336259944098336, 0.5299039738518851, 0.5245952776500157, 0.5183875901358468, 0.5221372161592756, 0.5134649617331368, 0.5104102918079921, 0.5044269050870623, 0.5051106555121285, 0.4992989982877459, 0.4994950294494629, 0.4958841119493757, 0.4962083952767508, 0.4942712443215506, 0.4932518345969064, 0.48579250063214985, 0.4832181079047067, 0.48742081437792095, 0.4779965707233974, 0.4780122552599226, 0.47949247700827463, 0.47444874899727957, 0.47690021991729736, 0.4732214553015573], "val_accuracy": [0.3646666705608368, 0.44066667556762695, 0.5103333592414856, 0.5646666884422302, 0.5883333086967468, 0.6433333158493042, 0.6579999923706055, 0.6853333115577698, 0.7039999961853027, 0.7073333263397217, 0.7143333554267883, 0.7193333506584167, 0.7206666469573975, 0.7350000143051147, 0.7300000190734863, 0.737333357334137, 0.7369999885559082, 0.7506666779518127, 0.7563333511352539, 0.7526666522026062, 0.7509999871253967, 0.7566666603088379, 0.7599999904632568, 0.750333309173584, 0.7636666893959045, 0.7570000290870667, 0.7683333158493042, 0.7730000019073486, 0.7733333110809326, 0.7703333497047424, 0.7720000147819519, 0.7689999938011169, 0.7773333191871643, 0.7756666541099548, 0.7773333191871643, 0.7773333191871643, 0.7826666831970215, 0.7743333578109741, 0.781333327293396, 0.7760000228881836, 0.784333348274231, 0.7726666927337646, 0.7836666703224182, 0.7873333096504211, 0.7853333353996277, 0.7903333306312561, 0.7893333435058594, 0.793666660785675, 0.7923333048820496, 0.7863333225250244, 0.7886666655540466, 0.7876666784286499, 0.7896666526794434]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [4, 5, 0, 1, 2, 4, 2, 5, 2, 6, 6, 2, 1, 6, 2, 4, 2, 3, 3, 0, 6, 4, 9, 4, 0, 4, 5, 4, 1, 4], [2, 0, 2, 2, 0, 0, 2, 1, 2, 1, 2, 2, 1, 0, 2, 1, 2, 1, 2, 1, 0], [70, 78, 23, 75, 51, 80, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7822856903076172, "mapping_values": [1, 49, 49, 28, 21, 6, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 52, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.square(tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), tf.math.pow(tf.math.add(tf.math.square(grad), tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), grad)), tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.multiply(tf.math.multiply(grad, tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))), grad))), tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32))))), grad)))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.pow(tf.math.square(grad), tf.math.pow(alpha, grad)))))), alpha)), tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.284319493150541, 2.233431761117738, 2.150480058262172, 2.0222100932852247, 1.8233750928677996, 1.6049401127289094, 1.4223649539117407, 1.2939461519563549, 1.1800805638101295, 1.1119835736839416, 1.0559865824849677, 1.0107916563477704, 0.9798120377070364, 0.9460580742527639, 0.9131362584950099, 0.9000303699765239, 0.8864000752743414, 0.8585172342570734, 0.847142725667272, 0.8325566165262382, 0.8250083549383876, 0.803415774110286, 0.7993972120567194, 0.7919669334820123, 0.7788898344950638, 0.763141896218955, 0.7598558290287205, 0.7525580089719871, 0.7477453658451981, 0.7361152978180233, 0.7348454179875272, 0.7276055923920297, 0.7192718945773302, 0.7275220546755793, 0.7057194990677809, 0.7043828322839869, 0.7064979704474068, 0.700403094228705, 0.686339986865956, 0.6826566260693301, 0.6781002334899056, 0.6743286787290552, 0.6734541743312765, 0.6745077528343886, 0.669749748642261, 0.6624449154074481, 0.6659370202429936, 0.6503330540694833, 0.6554600399136622, 0.653036465568943, 0.6468546257011485, 0.6450930741232903, 0.6450684009022197], "accuracy": [0.14198917150497437, 0.2616563141345978, 0.3531897962093353, 0.4010038375854492, 0.4418174624443054, 0.4913485646247864, 0.5260863900184631, 0.5552766919136047, 0.5893540978431702, 0.6127327680587769, 0.6263373494148254, 0.6424514651298523, 0.6547351479530334, 0.6688680648803711, 0.672698438167572, 0.6775855422019958, 0.6840575933456421, 0.6951525807380676, 0.6923788189888, 0.7003037929534912, 0.7080966830253601, 0.7058512568473816, 0.7034738063812256, 0.7129837274551392, 0.7195879220962524, 0.7280412316322327, 0.7236824631690979, 0.7231541275978088, 0.7281733155250549, 0.7283053994178772, 0.7357020378112793, 0.7372870445251465, 0.7390040755271912, 0.7326641082763672, 0.7423061728477478, 0.7429665923118591, 0.743891179561615, 0.7427024245262146, 0.7504953145980835, 0.7503632307052612, 0.7471932172775269, 0.7519482374191284, 0.7504953145980835, 0.7535332441329956, 0.7493065595626831, 0.7580240368843079, 0.7567031979560852, 0.7611940503120422, 0.7609298825263977, 0.7598732113838196, 0.7629110813140869, 0.7611940503120422, 0.7601373791694641], "val_loss": [1.9267775671822684, 1.8679855891636439, 1.76551696232387, 1.5999653679983956, 1.3760526861463274, 1.1603685787745885, 1.0022378308432442, 0.892991168158395, 0.818827612059457, 0.7656935453414917, 0.7250347478049142, 0.6992279802049909, 0.6738499573298863, 0.6548347302845546, 0.6384869473321098, 0.6294354370662144, 0.6143312113625663, 0.6049041066850934, 0.5946305309023175, 0.586997355733599, 0.5793218442371914, 0.5723246846880231, 0.5638683353151593, 0.5613786493028913, 0.5562586954661778, 0.5544984851564679, 0.5448389223643711, 0.541264499936785, 0.537954568862915, 0.5335971117019653, 0.5296611104692731, 0.52458313533238, 0.5185024227414813, 0.5218320914677211, 0.513323153768267, 0.5105404342923846, 0.5046079329081944, 0.5052978992462158, 0.49917725154331755, 0.499551670891898, 0.4960101331983294, 0.49625071457454134, 0.49450887952532085, 0.4925933565412249, 0.48592409065791536, 0.4832542283194406, 0.48739865847996305, 0.47820249625614714, 0.47780704498291016, 0.479439309665135, 0.47427548680986675, 0.4767721039908273, 0.47349417209625244], "val_accuracy": [0.3646666705608368, 0.44066667556762695, 0.5103333592414856, 0.565666675567627, 0.5879999995231628, 0.6433333158493042, 0.6579999923706055, 0.6853333115577698, 0.7043333053588867, 0.7073333263397217, 0.7139999866485596, 0.7200000286102295, 0.7206666469573975, 0.7353333234786987, 0.7300000190734863, 0.737333357334137, 0.7369999885559082, 0.75, 0.7559999823570251, 0.7543333172798157, 0.7513333559036255, 0.7570000290870667, 0.7593333125114441, 0.749666690826416, 0.7630000114440918, 0.7580000162124634, 0.7673333287239075, 0.7733333110809326, 0.7730000019073486, 0.7713333368301392, 0.7723333239555359, 0.7696666717529297, 0.7776666879653931, 0.7766666412353516, 0.777999997138977, 0.7776666879653931, 0.7806666493415833, 0.7736666798591614, 0.7803333401679993, 0.7760000228881836, 0.7820000052452087, 0.7720000147819519, 0.7836666703224182, 0.7879999876022339, 0.7839999794960022, 0.7900000214576721, 0.7903333306312561, 0.7950000166893005, 0.7929999828338623, 0.7873333096504211, 0.7889999747276306, 0.7886666655540466, 0.7893333435058594]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 8, 1, 2, 6, 2, 4, 0, 5, 5, 5, 7, 5, 4, 0, 2, 3, 6, 6, 3, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 2, 0, 0, 2, 1, 0, 1, 2, 2, 1, 0, 2, 1, 2, 0, 2, 1], [70, 83, 69, 75, 78, 83, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [28], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7742857336997986, "mapping_values": [1, 16, 16, 9, 7, 3, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.sqrt(grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(tf.math.pow(grad, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.2927048172004123, 2.266414170850301, 2.233672456025857, 2.198266513532478, 2.147586611614346, 2.078794041676308, 1.9894458412447027, 1.8800172536380382, 1.7476480477332692, 1.6243733411388879, 1.5119807816861786, 1.4118832265381265, 1.3360192250455958, 1.2706916224388098, 1.2100445682094585, 1.1684953200739956, 1.1413747864691588, 1.0886693830424612, 1.0584990638452767, 1.031065198306347, 1.0100463724029283, 0.9844117798683681, 0.9696760909070177, 0.9516309243403626, 0.9345455158183509, 0.9115829287014933, 0.9070009899066975, 0.8958314637529411, 0.8811099096264712, 0.8678124420725675, 0.8643411792359096, 0.8521844448509186, 0.8424029418065201, 0.8467061711481896, 0.8224407814560218, 0.8207912675425235, 0.820133582397207, 0.8134006359605206, 0.7987130333592847, 0.7910593636535682, 0.7848572977592821, 0.7797913355850005, 0.7799337530148704, 0.775946024551903, 0.7746818523916508, 0.7634483284686362, 0.7651299312996149, 0.7498779720744247, 0.7564799499518017, 0.7507804188557021, 0.7441258402375214, 0.7407855465899936, 0.7420480173608143, 0.734319012784813, 0.7300178735814531, 0.7264036505198073, 0.7248117589065664, 0.7149247315187873, 0.732746951725851, 0.7136831628159919, 0.7278697005257929, 0.7092772111633214, 0.7051954419621387, 0.7012714566240977, 0.7035917110840532, 0.7034224095896896, 0.694955612902691, 0.6868931297864802, 0.6883445675457158, 0.6958774204865706], "accuracy": [0.11715757846832275, 0.18835029006004333, 0.26178839802742004, 0.30418702960014343, 0.3455289900302887, 0.387399286031723, 0.41170254349708557, 0.4395720660686493, 0.47047945857048035, 0.4881785809993744, 0.5122177004814148, 0.5378417372703552, 0.5544841885566711, 0.5654470920562744, 0.5791836977005005, 0.5905428528785706, 0.5958262085914612, 0.6243560910224915, 0.6227710843086243, 0.6342623233795166, 0.6473385095596313, 0.6449610590934753, 0.6561880707740784, 0.6626601219177246, 0.6672830581665039, 0.6795667409896851, 0.6742834448814392, 0.6754721999168396, 0.6816800832748413, 0.6877558827400208, 0.6939638257026672, 0.6940959095954895, 0.6999075412750244, 0.6985867023468018, 0.7087571024894714, 0.7046625018119812, 0.7008321285247803, 0.7042662501335144, 0.7161537408828735, 0.7173424959182739, 0.7141724824905396, 0.7157574892044067, 0.7164179086685181, 0.7176066637039185, 0.7143045663833618, 0.7268524765968323, 0.7239466309547424, 0.724739134311676, 0.7240787148475647, 0.7288337349891663, 0.7283053994178772, 0.7277770638465881, 0.7279091477394104, 0.7294940948486328, 0.7341170310974121, 0.733060359954834, 0.7325320243835449, 0.7388719916343689, 0.7316074371337891, 0.7391361594200134, 0.7368907928466797, 0.7395324110984802, 0.743891179561615, 0.7494386434555054, 0.7395324110984802, 0.7417778372764587, 0.7478536367416382, 0.748778223991394, 0.752740740776062, 0.7411174178123474], "val_loss": [1.9466546603611536, 1.9210574967520577, 1.8887144497462682, 1.846651826586042, 1.7884556906563895, 1.7107786791665214, 1.6108845983232771, 1.4915430886404855, 1.361999239240374, 1.2370367050170898, 1.124462400163923, 1.033200468335833, 0.9615141323634556, 0.903494153703962, 0.8553916045597622, 0.8184609924043927, 0.7873760632106236, 0.7612716129847935, 0.7375949621200562, 0.718996524810791, 0.7025146314076015, 0.6882349082401821, 0.6743578059332711, 0.6643083606447492, 0.6535447325025286, 0.6461201565606254, 0.6368667738778251, 0.6286765507289341, 0.6212752716881889, 0.6148297105516706, 0.608993377004351, 0.6030747209276471, 0.5962695564542498, 0.5956317867551532, 0.5865045445305961, 0.5834043877465385, 0.5772585187639508, 0.57433363369533, 0.5690664904458183, 0.5676820278167725, 0.5625243697847638, 0.5598936251231602, 0.5564501115253994, 0.5542808941432408, 0.5505853550774711, 0.547482064792088, 0.5471572365079608, 0.5409387690680367, 0.538686718259539, 0.5385181903839111, 0.5363164458956037, 0.5323583909443447, 0.5315261568341937, 0.5294881377901349, 0.5275623457772392, 0.5266710860388619, 0.522498369216919, 0.5197519915444511, 0.5182141576494489, 0.5152706759316581, 0.5145928519112724, 0.5125246388571603, 0.5097663743155343, 0.5086588518960136, 0.5084715570722308, 0.5052597011838641, 0.5055508613586426, 0.5023272037506104, 0.4996904134750366, 0.4998023509979248], "val_accuracy": [0.2513333261013031, 0.3736666738986969, 0.4243333339691162, 0.4623333215713501, 0.4896666705608368, 0.5350000262260437, 0.559333324432373, 0.5796666741371155, 0.5993333458900452, 0.6106666922569275, 0.6543333530426025, 0.6669999957084656, 0.6776666641235352, 0.6866666674613953, 0.6930000185966492, 0.6983333230018616, 0.70333331823349, 0.7106666564941406, 0.7149999737739563, 0.7183333039283752, 0.7210000157356262, 0.7239999771118164, 0.7273333072662354, 0.7239999771118164, 0.7326666712760925, 0.7283333539962769, 0.7413333058357239, 0.7419999837875366, 0.7423333525657654, 0.7413333058357239, 0.7456666827201843, 0.7436666488647461, 0.7526666522026062, 0.75, 0.7543333172798157, 0.750333309173584, 0.7556666731834412, 0.7523333430290222, 0.7540000081062317, 0.7546666860580444, 0.7606666684150696, 0.7526666522026062, 0.7596666812896729, 0.7646666765213013, 0.7666666507720947, 0.7646666765213013, 0.765333354473114, 0.768666684627533, 0.7720000147819519, 0.7646666765213013, 0.7676666378974915, 0.7683333158493042, 0.7710000276565552, 0.7733333110809326, 0.7749999761581421, 0.7663333415985107, 0.7746666669845581, 0.7746666669845581, 0.7743333578109741, 0.7770000100135803, 0.7743333578109741, 0.7760000228881836, 0.7760000228881836, 0.777999997138977, 0.7816666960716248, 0.7763333320617676, 0.7803333401679993, 0.7760000228881836, 0.7773333191871643, 0.7793333530426025]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 3, 1, 5, 6, 6, 4, 2, 5, 4, 5, 7, 0, 4, 0, 9, 3, 6, 1, 6, 8, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 1, 1, 0, 0, 2, 1, 0, 1, 1, 2, 1, 2, 2, 2, 2, 0, 2, 1], [70, 80, 70, 75, 73, 58, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [28], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7648571133613586, "mapping_values": [1, 27, 27, 17, 10, 5, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(alpha, alpha)))))), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), alpha)))))), tf.math.add(alpha, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.math.add(alpha, alpha), tf.math.negative(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.2927048172004123, 2.2664133657821495, 2.2336671931191585, 2.198259986229482, 2.1475816995806905, 2.078788526841379, 1.989451880483989, 1.8800149706801592, 1.7476716249563187, 1.6243958224583894, 1.5119807574538318, 1.4118799767899177, 1.3360032922225527, 1.270635903472079, 1.2100160106487121, 1.1684609432230537, 1.1413320572841374, 1.0886381631199207, 1.05844549484981, 1.031024299277574, 1.0100285573059842, 0.9843743743992217, 0.9696616017901902, 0.951656159888862, 0.9345498085573065, 0.9115558474559227, 0.9069536347367807, 0.8958097428079483, 0.8811581906877441, 0.8678782463246931, 0.8643691260438979, 0.8521920914552971, 0.8423732352562238, 0.8467492972225199, 0.8224206651915114, 0.8207371095231086, 0.82016022669688, 0.8133862256342472, 0.7987114510216875, 0.7909789474381117, 0.7848259337652849, 0.7798315243178733, 0.7798938713588923, 0.7758674987507787, 0.7746588544618216, 0.7633866376534209, 0.7651101624677524, 0.7498112996461259, 0.756499421807517, 0.7506740389010689, 0.7439847678918377, 0.7406858197528893, 0.7419982652512398, 0.7341741532571501], "accuracy": [0.11715757846832275, 0.18835029006004333, 0.26178839802742004, 0.30418702960014343, 0.34526482224464417, 0.38766345381736755, 0.41170254349708557, 0.4395720660686493, 0.47047945857048035, 0.4884427487850189, 0.5119535326957703, 0.5378417372703552, 0.5546162724494934, 0.5654470920562744, 0.5793157815933228, 0.5904107689857483, 0.5959582328796387, 0.6243560910224915, 0.6229031682014465, 0.6343944072723389, 0.6472064256668091, 0.6448289752006531, 0.6561880707740784, 0.6629242897033691, 0.6668868064880371, 0.6799629926681519, 0.6742834448814392, 0.6754721999168396, 0.6816800832748413, 0.687887966632843, 0.693831741809845, 0.6940959095954895, 0.6999075412750244, 0.6988508701324463, 0.7091533541679382, 0.7051908373832703, 0.7012283802032471, 0.7043983340263367, 0.7161537408828735, 0.7174745798110962, 0.7147008180618286, 0.7154933214187622, 0.7168141603469849, 0.7181349992752075, 0.7141724824905396, 0.7263241410255432, 0.7243428826332092, 0.7244749665260315, 0.7238145470619202, 0.7285695672035217, 0.7283053994178772, 0.7281733155250549, 0.7276449799537659, 0.7297582626342773], "val_loss": [1.9466547284807478, 1.9210540226527624, 1.888709272657122, 1.8466461045401437, 1.7884502410888672, 1.7107771805354528, 1.610891614641462, 1.491570132119315, 1.3620382377079554, 1.237043755395072, 1.1244407721928187, 1.0331720624651228, 0.9614675385611398, 0.9034460612705776, 0.8553560631615775, 0.8184292316436768, 0.7873286008834839, 0.7612168618610927, 0.7375796181815011, 0.7189561639513288, 0.7024753093719482, 0.6882230894906181, 0.6743216003690448, 0.6642481258937291, 0.6535192387444633, 0.6460569756371635, 0.6368482283183506, 0.6286190918513707, 0.6212746586118426, 0.614800146647862, 0.6089246443339756, 0.6030500616346087, 0.5962579250335693, 0.5956393820898873, 0.5864818947655814, 0.5833457027162824, 0.5771580934524536, 0.5743032012666974, 0.5690518277032035, 0.567644647189549, 0.5624384369168963, 0.5598529066358294, 0.5563721486500331, 0.5542797361101423, 0.5506353548594883, 0.5475086484636579, 0.547174232346671, 0.5409983907427106, 0.5386853899274554, 0.5384962899344308, 0.5361250809260777, 0.5322667360305786, 0.5314614432198661, 0.5294498886380877], "val_accuracy": [0.2513333261013031, 0.3736666738986969, 0.4243333339691162, 0.46266666054725647, 0.4896666705608368, 0.5350000262260437, 0.559333324432373, 0.5796666741371155, 0.5993333458900452, 0.6106666922569275, 0.6539999842643738, 0.6666666865348816, 0.6776666641235352, 0.6866666674613953, 0.6930000185966492, 0.6983333230018616, 0.70333331823349, 0.7106666564941406, 0.7153333425521851, 0.7183333039283752, 0.7210000157356262, 0.7236666679382324, 0.7273333072662354, 0.7243333458900452, 0.7323333621025085, 0.7283333539962769, 0.7409999966621399, 0.7423333525657654, 0.7426666617393494, 0.7413333058357239, 0.746666669845581, 0.7436666488647461, 0.753000020980835, 0.7506666779518127, 0.7543333172798157, 0.750333309173584, 0.7563333511352539, 0.7536666393280029, 0.7540000081062317, 0.7540000081062317, 0.7606666684150696, 0.753000020980835, 0.7599999904632568, 0.7646666765213013, 0.7666666507720947, 0.7646666765213013, 0.7646666765213013, 0.7696666717529297, 0.7723333239555359, 0.765333354473114, 0.7673333287239075, 0.7689999938011169, 0.7703333497047424, 0.7723333239555359]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 3, 2, 4, 2, 6, 5, 4, 2, 5, 5, 5, 7, 8, 4, 5, 5, 2, 9, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 2, 2, 0, 2, 1, 0, 1, 2, 2, 1, 0, 2, 1, 2, 0, 2, 1], [70, 83, 42, 75, 51, 83, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [22], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7428571581840515, "mapping_values": [1, 22, 22, 13, 9, 3, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(alpha, grad), grad), tf.math.add(alpha, grad))))), tf.math.square(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.square(tf.math.add(grad, alpha))))), tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3000770824743757, 2.2916488729652524, 2.2812371285773225, 2.275474359519635, 2.2680209326375635, 2.259058964392607, 2.249407298592308, 2.2416346567244876, 2.2298354959884703, 2.219049843279378, 2.207629761817417, 2.1955492244877157, 2.181121748640962, 2.1646555649401287, 2.1482066112722875, 2.130563240639522, 2.1112032470733357, 2.0841328585388763, 2.058904967398109, 2.0305834291098126, 2.0040149173370017, 1.9732192359847982, 1.9416864306903738, 1.9047470062069685, 1.8711619468302758, 1.826777756820344, 1.7977393225845077, 1.7573984541582504, 1.7101123231103816, 1.670545505132689, 1.6382776956674114, 1.599886600036883, 1.5614050491185882, 1.538331325972762, 1.4932896926843606, 1.4614958882316103, 1.4424670898147531, 1.4148681151348885, 1.3853254436801028, 1.353798741362807, 1.328336482145027, 1.3105441850678103, 1.292956100022237, 1.2689190918286684, 1.2579215204773988, 1.2365429989177759, 1.2225226689134496, 1.2027101996489458, 1.201523431020406, 1.1827443892913896, 1.1648470948574141, 1.1504541783993507, 1.1438005156819973, 1.1296518307477885, 1.1198162513087218, 1.1000584219078646, 1.1023237813717308, 1.0776855966056327, 1.0905539820679522, 1.0739053176331435, 1.0627748938662391, 1.050361131758911, 1.0383185326163449, 1.0288610161728533, 1.0340971384916355, 1.0254177857761637, 1.0177720109186057, 0.9983929533291455, 0.9966643964294839, 1.0055589415000146, 0.9869763064126233, 0.9815547619954297, 0.9771324648297836, 0.9705615374453395, 0.9695953547820723, 0.9593553543327002, 0.9525111712217174, 0.9525693092584263, 0.9340470555577816, 0.9351664086563429, 0.9310078438656315, 0.9330051841123025, 0.9256367567366204, 0.9227873922228861, 0.9275337950334006, 0.9224713222304387, 0.9080640867149762, 0.9153724175796313, 0.907696894375309, 0.9060207388782388, 0.8994011381645213, 0.8830911195304935, 0.8804303123147622, 0.88239500815795, 0.8716141463916347, 0.8790781670998525, 0.8774976840722736, 0.8697083809309317, 0.8633601579053952, 0.863954238100547], "accuracy": [0.09866596013307571, 0.11861048638820648, 0.14357416331768036, 0.15889579057693481, 0.18584071099758148, 0.2028794139623642, 0.22586184740066528, 0.23920221626758575, 0.25584468245506287, 0.2793554365634918, 0.30207371711730957, 0.31541407108306885, 0.3257165551185608, 0.33720776438713074, 0.3490952253341675, 0.3590014576911926, 0.36349228024482727, 0.3847576379776001, 0.3932109475135803, 0.40681546926498413, 0.413419634103775, 0.4251750111579895, 0.42742040753364563, 0.43891164660453796, 0.4367983043193817, 0.45727115869522095, 0.4525161683559418, 0.46968695521354675, 0.47589486837387085, 0.48751816153526306, 0.4846123456954956, 0.49848103523254395, 0.5091797709465027, 0.5062739253044128, 0.5177651643753052, 0.5307092666625977, 0.5301809310913086, 0.5408796668052673, 0.5373134613037109, 0.5509179830551147, 0.5532954931259155, 0.5568616986274719, 0.5655791759490967, 0.5692775249481201, 0.5666358470916748, 0.5768062472343445, 0.572579562664032, 0.5844670534133911, 0.5824857950210571, 0.5908070206642151, 0.5971469879150391, 0.5931845307350159, 0.5992603302001953, 0.6012415885925293, 0.6136573553085327, 0.614317774772644, 0.6118082404136658, 0.6279223561286926, 0.6107515692710876, 0.616299033164978, 0.63096022605896, 0.6299035549163818, 0.6328094005584717, 0.6357152462005615, 0.6388852000236511, 0.6328094005584717, 0.640338122844696, 0.6498481035232544, 0.6462818384170532, 0.6501122713088989, 0.6523576974868774, 0.6501122713088989, 0.6598864197731018, 0.6551313996315002, 0.659490168094635, 0.658961832523346, 0.6612072587013245, 0.6580372452735901, 0.6675472259521484, 0.661471426486969, 0.6692643165588379, 0.6656980514526367, 0.6660943031311035, 0.6758684515953064, 0.6745476126670837, 0.6724342703819275, 0.672170102596283, 0.6711134314537048, 0.6736230254173279, 0.6707172393798828, 0.6749438643455505, 0.687491774559021, 0.6839255094528198, 0.6839255094528198, 0.687887966632843, 0.685510516166687, 0.6833971738815308, 0.6866992712020874, 0.6872276067733765, 0.6860388517379761], "val_loss": [1.963510377066476, 1.9561933789934431, 1.9487363951546806, 1.9412335668291365, 1.9334242684500558, 1.9252673557826452, 1.916647297995431, 1.9073893002101354, 1.8972326687404089, 1.8863139833722795, 1.8743792942592077, 1.8613566671098982, 1.8470330919538225, 1.8311828885759627, 1.8137153897966658, 1.7947610446384974, 1.7741084098815918, 1.7512867110116142, 1.7264345714024134, 1.6991580895015173, 1.669975927897862, 1.6386543682643346, 1.6055687155042375, 1.5703395434788294, 1.5338547570364816, 1.4954869065965926, 1.456935235432216, 1.417499235698155, 1.3773470265524728, 1.3372674669538225, 1.2986303056989397, 1.2604365348815918, 1.2234556674957275, 1.1887616430010115, 1.1550521850585938, 1.1233230999537878, 1.0935859339577811, 1.0658535616738456, 1.0394857951572962, 1.0147756849016463, 0.9915454728262765, 0.9703159332275391, 0.9507272924695697, 0.9322926316942487, 0.9151641641344342, 0.8988799708230155, 0.8841921601976667, 0.8701413699558803, 0.8574495996747699, 0.8448299169540405, 0.8329485825129918, 0.8214763232639858, 0.8116378443581718, 0.8020538432257516, 0.7925502402441842, 0.7832533291407994, 0.7752227783203125, 0.7670376471110752, 0.7600141593388149, 0.7528714793069022, 0.7459401743752616, 0.7397715875080654, 0.7331230470112392, 0.7271432025091988, 0.7223319837025234, 0.7168381214141846, 0.7117955684661865, 0.7066233328410557, 0.7017227751868111, 0.6976273230143956, 0.6931476252419608, 0.6891463143484933, 0.6854778187615531, 0.6815671750477382, 0.6778208868844169, 0.6735192026410785, 0.6702897718974522, 0.6666967187608991, 0.6631700651986259, 0.6600339412689209, 0.6571171624319894, 0.6543170043400356, 0.6515180894306728, 0.64857017993927, 0.6460666145597186, 0.6442985704966954, 0.6412636382239205, 0.6385097503662109, 0.6365624495915004, 0.6338868141174316, 0.631429638181414, 0.6289362396512713, 0.6265836954116821, 0.6246136086327689, 0.6215189525059291, 0.6195785318102155, 0.6168973956789289, 0.6151010138647897, 0.6132583618164062, 0.6114950690950666], "val_accuracy": [0.09066666662693024, 0.15933333337306976, 0.23066666722297668, 0.28866666555404663, 0.33033332228660583, 0.3630000054836273, 0.37933334708213806, 0.39633333683013916, 0.4116666615009308, 0.41866666078567505, 0.43433332443237305, 0.4463333189487457, 0.4569999873638153, 0.46700000762939453, 0.47999998927116394, 0.49533334374427795, 0.5009999871253967, 0.5170000195503235, 0.527999997138977, 0.5373333096504211, 0.5473333597183228, 0.5556666851043701, 0.5586666464805603, 0.5640000104904175, 0.5706666707992554, 0.5786666870117188, 0.5836666822433472, 0.5870000123977661, 0.593999981880188, 0.5976666808128357, 0.6013333201408386, 0.6079999804496765, 0.6143333315849304, 0.6196666955947876, 0.6320000290870667, 0.6433333158493042, 0.6513333320617676, 0.656333327293396, 0.6613333225250244, 0.6669999957084656, 0.6683333516120911, 0.6753333210945129, 0.6766666769981384, 0.6786666512489319, 0.6819999814033508, 0.6880000233650208, 0.6896666884422302, 0.6916666626930237, 0.6936666369438171, 0.6973333358764648, 0.6966666579246521, 0.6990000009536743, 0.6990000009536743, 0.7013333439826965, 0.7023333311080933, 0.6996666789054871, 0.7043333053588867, 0.7059999704360962, 0.7083333134651184, 0.7080000042915344, 0.7096666693687439, 0.7126666903495789, 0.7146666646003723, 0.7149999737739563, 0.7179999947547913, 0.7170000076293945, 0.718666672706604, 0.7183333039283752, 0.7200000286102295, 0.7213333249092102, 0.7206666469573975, 0.7253333330154419, 0.7250000238418579, 0.7273333072662354, 0.7263333201408386, 0.7273333072662354, 0.7283333539962769, 0.7283333539962769, 0.7293333411216736, 0.7323333621025085, 0.731333315372467, 0.7319999933242798, 0.7323333621025085, 0.7353333234786987, 0.734000027179718, 0.734333336353302, 0.7333333492279053, 0.7350000143051147, 0.7356666922569275, 0.7360000014305115, 0.7366666793823242, 0.7360000014305115, 0.7369999885559082, 0.7369999885559082, 0.737666666507721, 0.737333357334137, 0.7400000095367432, 0.7400000095367432, 0.7423333525657654, 0.7450000047683716]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 2, 1, 2, 6, 2, 4, 0, 5, 5, 5, 7, 5, 4, 0, 2, 3, 6, 6, 3, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 2, 0, 0, 1, 1, 0, 1, 2, 2, 1, 0, 2, 1, 2, 0, 2, 1], [70, 83, 42, 11, 68, 83, 99, 44], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7257142663002014, "mapping_values": [1, 32, 32, 19, 13, 4, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.divide_no_nan(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, grad)), tf.math.square(tf.math.add(alpha, grad)))), tf.math.square(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.square(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), alpha))))), tf.math.add(alpha, alpha))))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.multiply(alpha, grad), tf.math.divide_no_nan(tf.math.add(alpha, grad), alpha)))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.250872832216276, 1.7423025521745834, 1.2728462359609543, 0.9552800572149946, 0.8646771890643786, 0.7993566396292788, 0.7888981116887144, 0.7422327684011473, 0.7048865219054362, 0.6417903590510944, 0.6185366516934567, 0.6027787358312716, 0.5811715639420095, 0.5768860285355509, 0.5660470497527883, 0.5431769260751131, 0.5308186429886219, 0.5146264564942187, 0.5030174796544424, 0.4910480696739947, 0.49296692987600604, 0.46873928398866194, 0.4628540244061225, 0.45308380532557574, 0.4493998890272016, 0.4497937246470199, 0.4504822569595053, 0.430128305709562, 0.43068609260816804, 0.43891821849489443], "accuracy": [0.2056531459093094, 0.44802534580230713, 0.5798441171646118, 0.6572447419166565, 0.6812838315963745, 0.6975300312042236, 0.7116629481315613, 0.7147008180618286, 0.7342491149902344, 0.7614582180976868, 0.7630431652069092, 0.7753269076347351, 0.7810064554214478, 0.7820631265640259, 0.791969358921051, 0.7902522683143616, 0.8013472557067871, 0.8087438941001892, 0.8113855719566345, 0.8131026029586792, 0.8168009519577026, 0.8264430165290833, 0.8235371708869934, 0.8289526104927063, 0.8232730031013489, 0.8302733898162842, 0.8264430165290833, 0.8408400416374207, 0.8315942287445068, 0.830669641494751], "val_loss": [1.7690010070800781, 0.868756822177342, 0.684476511819022, 0.6339923994881767, 0.5926989487239293, 0.5803615025111607, 0.542430077280317, 0.5028184141431536, 0.4930113043103899, 0.46934938430786133, 0.45746333258492605, 0.4445845229285104, 0.4343125564711435, 0.4244487541062491, 0.42211174964904785, 0.41200692313058035, 0.4148574641772679, 0.404109639780862, 0.4068468723978315, 0.3922682915415083, 0.3949150698525565, 0.4080931970051357, 0.3829060452325003, 0.3810842888695853, 0.3835036243711199, 0.37862774303981234, 0.3721284440585545, 0.3885035685130528, 0.380058263029371, 0.39461497749601093], "val_accuracy": [0.4779999852180481, 0.6703333258628845, 0.7229999899864197, 0.7293333411216736, 0.7310000061988831, 0.75, 0.7549999952316284, 0.7739999890327454, 0.7786666750907898, 0.7870000004768372, 0.7973333597183228, 0.8003333210945129, 0.8190000057220459, 0.8096666932106018, 0.8180000185966492, 0.8220000267028809, 0.8259999752044678, 0.8303333520889282, 0.8303333520889282, 0.8363333344459534, 0.8330000042915344, 0.8333333134651184, 0.8443333506584167, 0.8496666550636292, 0.8529999852180481, 0.8429999947547913, 0.8473333120346069, 0.8519999980926514, 0.847000002861023, 0.8496666550636292]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [5, 2, 2, 1, 2, 6, 2, 0, 2, 5, 5, 5, 0, 5, 4, 0, 2, 3, 6, 6, 5, 2, 5, 5, 8, 4, 5, 4, 1, 4], [2, 1, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 0, 2, 1, 2, 1], [36, 83, 42, 75, 51, 58, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 25, 25, 16, 9, 2, 15, 15, 8, 7, 1, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.add(tf.math.square(tf.math.add(alpha, tf.math.square(alpha))), tf.math.square(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))), grad)), tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.pow(grad, grad)))))), tf.math.add(alpha, grad))))), tf.math.negative(tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(tf.math.add(beta, tf.math.subtract(grad, beta)), tf.math.pow(grad, tf.math.negative(grad)))), tf.math.pow(tf.math.pow(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 3, 1, 2, 6, 6, 4, 2, 5, 5, 5, 3, 5, 4, 0, 2, 3, 8, 1, 6, 8, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 2, 0, 2, 0, 1, 0, 2, 2, 2, 1, 0, 2, 1, 2, 0, 2, 1], [70, 83, 42, 18, 51, 83, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1, 1, 1], [0, 1, 0, 0], [3, 4, 7], [4, 0, 1, 5, 3, 4], [28], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 50, 50, 30, 20, 6, 1, 1, 0, 1, 0, 7, 4, 3, 1, 0, 1, 0, 1, 0], "tree_depth": 65, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.subtract(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(grad))))), tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.pow(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.subtract(tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))), grad))))), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.sqrt(grad))))))))), tf.math.add(alpha, alpha))))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.pow(tf.math.subtract(grad, tf.math.pow(alpha, grad)), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, grad))))))), alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.add(sigma, sigma)), sigma)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08942015469074249, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [3, 0, 0, 1, 2, 6, 6, 4, 2, 5, 5, 5, 7, 8, 4, 0, 2, 3, 9, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 0, 0, 2, 0, 1, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1], [70, 83, 93, 75, 78, 83, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 0, 1, 0], [0, 4, 0], [4, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 5, 4, 2, 1, 1, 0, 1, 0, 5, 4, 3, 1, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.negative(grad))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, grad), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, grad), tf.math.add(sigma, tf.math.negative(sigma)))))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3024057385597434, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 2, 1, 2, 6, 2, 1, 2, 5, 5, 5, 0, 5, 4, 0, 2, 3, 6, 6, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 0, 0, 1, 2, 1, 2, 1], [90, 83, 93, 75, 78, 83, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 1, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 15, 15, 8, 7, 1, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(tf.math.add(beta, tf.math.subtract(grad, beta)), tf.math.pow(grad, tf.math.negative(grad)))), tf.math.pow(tf.math.pow(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [9, 2, 3, 1, 2, 6, 8, 4, 3, 5, 5, 5, 7, 5, 4, 0, 2, 3, 6, 1, 6, 8, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 0, 1, 2, 1, 2, 1], [70, 83, 93, 75, 78, 83, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [84], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [162131545087685.0, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.15281997621059418, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 2, 1, 2, 6, 2, 1, 2, 5, 5, 5, 0, 5, 4, 0, 6, 3, 6, 6, 6, 2, 3, 5, 8, 4, 8, 4, 6, 4], [0, 0, 2, 0, 0, 2, 1, 1, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 0], [70, 41, 93, 46, 15, 83, 99, 44], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [0, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 2, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07726852595806122, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [1, 6, 2, 1, 2, 6, 5, 4, 2, 5, 5, 5, 7, 5, 4, 0, 2, 3, 9, 5, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 0, 0, 1, 2, 1, 2, 1], [36, 83, 42, 75, 16, 58, 28, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 31, 31, 19, 12, 6, 15, 15, 8, 7, 1, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32), grad)), tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.math.pow(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(alpha, alpha)))))))))))))), tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(grad, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(tf.math.add(beta, tf.math.subtract(grad, beta)), tf.math.pow(grad, tf.math.negative(grad)))), tf.math.pow(tf.math.pow(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 6, 2, 1, 2, 6, 5, 4, 2, 5, 5, 5, 7, 8, 4, 0, 2, 3, 8, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 0, 0, 0, 1, 1, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1], [70, 83, 42, 75, 51, 83, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [0, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [74], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 28, 28, 17, 11, 5, 1, 1, 0, 1, 1, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(alpha, grad), tf.math.square(tf.math.square(tf.math.square(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.pow(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32), tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, alpha)))))))), tf.math.negative(tf.math.add(alpha, tf.math.add(alpha, grad)))))), alpha), grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3024057385597434, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [3, 2, 3, 1, 2, 6, 6, 4, 2, 5, 5, 5, 7, 5, 4, 0, 2, 3, 6, 1, 6, 8, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 0, 0, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 1, 2, 1, 2, 1], [70, 18, 70, 75, 73, 58, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [1, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 48, 48, 28, 20, 6, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 59, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(grad, tf.math.add(alpha, tf.math.add(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))), grad), grad)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.math.multiply(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha)))))))))))))))), tf.math.add(alpha, tf.math.pow(tf.math.square(grad), tf.math.pow(alpha, grad))))), alpha))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3033448135722128, 2.3027622775945837, 2.300334720721161, 2.302463219197608, 2.302945163665336, 2.302350353555373], "accuracy": [0.09034473448991776, 0.08928807079792023, 0.09628847241401672, 0.09008057415485382, 0.08809932321310043, 0.09391097724437714], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 3, 1, 2, 6, 2, 4, 0, 5, 5, 5, 7, 5, 4, 0, 2, 3, 6, 6, 3, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 2, 0, 0, 2, 1, 2, 1, 1, 2, 1, 0, 2, 2, 2, 0, 2, 1], [70, 83, 76, 55, 51, 83, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [1, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1, 1, 0], [0, 1, 0, 0, 1], [3, 4, 3], [4, 0, 1, 5, 3, 4], [28], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 47, 47, 28, 19, 5, 1, 1, 0, 1, 0, 7, 5, 3, 2, 1, 1, 0, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(tf.math.multiply(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.divide_no_nan(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.square(tf.math.add(alpha, grad)))), tf.math.square(tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.square(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), grad))))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(tf.math.multiply(alpha, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(alpha, alpha), grad), tf.math.multiply(tf.math.add(alpha, tf.math.add(alpha, tf.math.multiply(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.pow(grad, tf.math.square(grad))))))))), tf.math.pow(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32), grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.multiply(sigma, sigma)), tf.math.add(sigma, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3033448135722128, 2.3027622775945837, 2.300334720721161, 2.302463219197608, 2.302945163665336, 2.302350353555373], "accuracy": [0.09034473448991776, 0.08928807079792023, 0.09628847241401672, 0.09008057415485382, 0.08809932321310043, 0.09391097724437714], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 8, 2, 1, 2, 6, 5, 4, 2, 1, 5, 5, 2, 8, 4, 0, 2, 3, 9, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [1, 0, 2, 0, 0, 2, 1, 2, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1], [70, 83, 42, 17, 51, 83, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [1, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 30, 30, 19, 11, 4, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 50, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(alpha), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.square(tf.math.add(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.add(alpha, grad))), alpha)))), tf.math.add(alpha, tf.math.add(grad, tf.math.multiply(grad, alpha))))), grad), tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3033448135722128, 2.3027622775945837, 2.300334720721161, 2.302463219197608, 2.302945163665336, 2.302350353555373], "accuracy": [0.09034473448991776, 0.08928807079792023, 0.09628847241401672, 0.09008057415485382, 0.08809932321310043, 0.09391097724437714], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 5, 1, 8, 0, 6, 4, 2, 5, 5, 5, 7, 6, 4, 0, 2, 3, 6, 1, 6, 8, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 0, 0, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 0, 2, 1, 2, 1], [70, 80, 70, 75, 73, 58, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 0, 1, 0, 0], [3, 4, 7, 2], [4, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 8, 8, 5, 3, 1, 1, 1, 0, 1, 0, 9, 5, 4, 1, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.subtract(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, grad), tf.math.add(sigma, tf.math.add(sigma, sigma)))), tf.math.add(sigma, tf.math.add(sigma, sigma)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3033448135722128, 2.3027622775945837, 2.300334720721161, 2.302463219197608, 2.302945163665336, 2.302350353555373], "accuracy": [0.09034473448991776, 0.08928807079792023, 0.09628847241401672, 0.09008057415485382, 0.08809932321310043, 0.09391097724437714], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [9, 2, 2, 1, 2, 6, 6, 4, 6, 6, 1, 5, 3, 2, 4, 0, 2, 3, 6, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 0, 0, 2, 2, 1, 2, 0, 2, 2, 2, 0, 0, 1, 2, 1, 2, 1], [92, 83, 93, 75, 84, 83, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [5, 4], [4, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.02914285659790039, "mapping_values": [1, 1, 1, 1, 0, 1, 15, 15, 8, 7, 1, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(tf.math.add(beta, tf.math.subtract(grad, beta)), tf.math.pow(grad, tf.math.negative(grad)))), tf.math.pow(tf.math.pow(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3037922959270385, 2.304689448255479, 2.3037725143649275, 2.30819772228573, 2.311293567192159, 2.3137044946294907], "accuracy": [0.08849557489156723, 0.08545766770839691, 0.09034473448991776, 0.0820235088467598, 0.07766477018594742, 0.07832518965005875], "val_loss": [1.9719441958836146, 1.9733125822884696, 1.9747517449515206, 1.9766017368861608, 1.9788313593183244, 1.9811827114650182], "val_accuracy": [0.03166666626930237, 0.02433333359658718, 0.02133333310484886, 0.02033333294093609, 0.02199999988079071, 0.029999999329447746]}}]