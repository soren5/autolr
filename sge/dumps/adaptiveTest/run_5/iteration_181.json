[{"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 6, 1, 2, 6, 5, 8, 2, 5, 3, 5, 7, 8, 2, 1, 2, 3, 9, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 0, 0, 0, 2, 1, 2, 1, 2, 2, 1, 0, 2, 1, 2, 1, 2, 1], [70, 83, 42, 75, 51, 83, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7891428470611572, "mapping_values": [1, 31, 31, 20, 11, 6, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(grad), tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.square(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))))))))), grad)), tf.math.multiply(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.283362644758868, 2.2294258043168007, 2.15362580936378, 2.0222888086072333, 1.8229123346715193, 1.6027386497276617, 1.4042079133159842, 1.2844914487954129, 1.1848231562691405, 1.112009056602345, 1.0542929300369446, 1.0001827922511046, 0.969630000897056, 0.9394637717940568, 0.9207418685607497, 0.898983266052553, 0.8747253593216325, 0.8581743788142892, 0.8575800988715417, 0.8386328443953737, 0.8207337200334595, 0.8093229982720989, 0.7903818996464965, 0.793110605566934, 0.7777766914588743, 0.7787251722197003, 0.7599264515814543, 0.7562919633106044, 0.7454537827781855, 0.7430287498871034, 0.7514788976608093, 0.729837415854787, 0.7148674051397276, 0.7114792854605475, 0.7111820921197528, 0.7080020448865829, 0.706236214158148, 0.6934227259435265, 0.6903861086555303, 0.6830528022086915, 0.6840833423081296, 0.6838845316334927, 0.6767708739710364, 0.6730559073371847, 0.666655120580676, 0.6631818584258357, 0.6604682617199467, 0.6610915602127385, 0.6527237618257656, 0.6477615523804385, 0.6373685201114084, 0.6510512604768234, 0.6412740128151477, 0.6404566048883003], "accuracy": [0.13789460062980652, 0.25782591104507446, 0.3369435966014862, 0.3895126283168793, 0.4525161683559418, 0.49768856167793274, 0.5408796668052673, 0.5622771382331848, 0.5845991373062134, 0.6172236204147339, 0.62660151720047, 0.6452252268791199, 0.6583014130592346, 0.6646413803100586, 0.6711134314537048, 0.6811517477035522, 0.6865671873092651, 0.6892088055610657, 0.6888125538825989, 0.6976621150970459, 0.7043983340263367, 0.705058753490448, 0.7124554514884949, 0.7157574892044067, 0.7162858247756958, 0.7199841737747192, 0.7199841737747192, 0.7255316376686096, 0.7304186820983887, 0.7298903465270996, 0.7272487282752991, 0.7353057861328125, 0.7403249144554138, 0.7397965788841248, 0.7392682433128357, 0.7415136694908142, 0.7382115721702576, 0.7465327978134155, 0.7421740889549255, 0.7498348951339722, 0.7506273984909058, 0.7547219395637512, 0.7474573850631714, 0.7493065595626831, 0.7557786107063293, 0.7597411274909973, 0.7589486241340637, 0.7555144429206848, 0.7589486241340637, 0.7635715007781982, 0.7638356685638428, 0.763439416885376, 0.7574957013130188, 0.7638356685638428], "val_loss": [1.9262195995875768, 1.8650895527430944, 1.7633210590907507, 1.5978529453277588, 1.375269787652152, 1.1578637872423445, 0.9944228104182652, 0.8896364825112479, 0.8154352562768119, 0.7610087735312325, 0.7281269686562675, 0.6959025519234794, 0.672904508454459, 0.656446099281311, 0.6420048986162458, 0.6261889083044869, 0.615676862852914, 0.6093462194715228, 0.5974216120583671, 0.5861877202987671, 0.5780857801437378, 0.5713728325707572, 0.5656187023435321, 0.5601756061826434, 0.5566891431808472, 0.5528181280408587, 0.5452421392713275, 0.5396277563912528, 0.5367788757596698, 0.5290854828698295, 0.5263316290719169, 0.5247846160616193, 0.5193896123341152, 0.5185174260820661, 0.5158511229923793, 0.5095709562301636, 0.5123446498598371, 0.5039691414151873, 0.5031602212360927, 0.4986025094985962, 0.496375458581107, 0.4974172966820853, 0.49355930941445486, 0.4892359290804182, 0.48494487149374826, 0.4852551051548549, 0.4838943140847342, 0.48247289657592773, 0.47908333369663786, 0.4756420850753784, 0.47871712275913786, 0.4742114543914795, 0.4692599092211042, 0.4699814660208566], "val_accuracy": [0.3476666808128357, 0.43166667222976685, 0.5053333044052124, 0.5680000185966492, 0.590666651725769, 0.625333309173584, 0.6660000085830688, 0.6823333501815796, 0.6990000009536743, 0.7089999914169312, 0.7136666774749756, 0.7263333201408386, 0.7160000205039978, 0.7279999852180481, 0.7356666922569275, 0.7360000014305115, 0.7403333187103271, 0.7433333396911621, 0.749666690826416, 0.7523333430290222, 0.7519999742507935, 0.7556666731834412, 0.7576666474342346, 0.7546666860580444, 0.765666663646698, 0.765999972820282, 0.7639999985694885, 0.7703333497047424, 0.7726666927337646, 0.7753333449363708, 0.7713333368301392, 0.778333306312561, 0.7716666460037231, 0.7683333158493042, 0.7806666493415833, 0.7746666669845581, 0.768666684627533, 0.781000018119812, 0.7786666750907898, 0.7793333530426025, 0.7833333611488342, 0.7816666960716248, 0.7820000052452087, 0.7826666831970215, 0.7879999876022339, 0.7820000052452087, 0.7853333353996277, 0.7853333353996277, 0.7986666560173035, 0.7979999780654907, 0.796999990940094, 0.7903333306312561, 0.7929999828338623, 0.7913333177566528]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 6, 1, 2, 9, 5, 8, 2, 5, 3, 5, 7, 3, 2, 1, 2, 3, 9, 2, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 0, 0, 2, 0, 1, 2, 2, 2, 2, 2, 0, 2, 1, 2, 3, 1, 1], [70, 83, 18, 92, 41, 58, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7731428742408752, "mapping_values": [1, 32, 32, 20, 12, 6, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.square(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(grad, tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.subtract(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)), grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), alpha))))))), grad)))), tf.math.multiply(grad, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.2833626627402457, 2.229425822298178, 2.15363140535109, 2.022297335543322, 1.8229263263560558, 1.6027453289118898, 1.4042069546660854, 1.2844955308357675, 1.1848075476619846, 1.111970399994624, 1.0542592012713756, 1.000163181338879, 0.9696437039269495, 0.9394164280868745, 0.920594575618945, 0.8991577253837973, 0.8747489045025603, 0.8581454630824538, 0.8576681455128606, 0.8386359856727337, 0.8207724762158135, 0.809305875017312, 0.7903542570969558, 0.7930567733300848, 0.777670159528536, 0.7789393022485208, 0.7599541200008753, 0.7562245085900408, 0.7455480315146461, 0.7428478033330699, 0.751271142140513, 0.7298646230644726, 0.7146329948411185, 0.7114475143505299, 0.7111532692707069, 0.7078878397340741, 0.7063849230074627, 0.693501768047941, 0.6903350843241375, 0.6832446916511802], "accuracy": [0.13789460062980652, 0.25782591104507446, 0.33681151270866394, 0.38964468240737915, 0.4525161683559418, 0.497820645570755, 0.5407475829124451, 0.5624092221260071, 0.5843349695205688, 0.6180161237716675, 0.6269977688789368, 0.6450931429862976, 0.6588297486305237, 0.6650376319885254, 0.6709813475608826, 0.6814159154891968, 0.6861709356307983, 0.6886804699897766, 0.6885483860969543, 0.6980583667755127, 0.7041342258453369, 0.7053229212760925, 0.7127195596694946, 0.7149649858474731, 0.7164179086685181, 0.7194558382034302, 0.720380425453186, 0.726192057132721, 0.7302865982055664, 0.7294940948486328, 0.7273808121681213, 0.7359662055969238, 0.7400607466697693, 0.741909921169281, 0.7395324110984802, 0.7415136694908142, 0.737947404384613, 0.7456082701683044, 0.7429665923118591, 0.7500990629196167], "val_loss": [1.9262197358267648, 1.865091187613351, 1.763326644897461, 1.5978568962642126, 1.3752805846078056, 1.1578665460859026, 0.9944184167044503, 0.8896214280809674, 0.8154750040599278, 0.7610219376427787, 0.7280999592372349, 0.6959335803985596, 0.6729365927832467, 0.6564910582133702, 0.6418657984052386, 0.6262908492769513, 0.615778020450047, 0.6095220531736102, 0.5976177283695766, 0.5862281663077218, 0.5780468497957502, 0.5712910549981254, 0.565634914806911, 0.5601262705666679, 0.5566937071936471, 0.5527872698647636, 0.5453216007777623, 0.5397837502615792, 0.5368366752352033, 0.5290742261069161, 0.5261360236576625, 0.524753212928772, 0.5193238088062831, 0.5183252096176147, 0.5160096713474819, 0.509625962802342, 0.5127778053283691, 0.5038243021283831, 0.5031357492719378, 0.49863174983433317], "val_accuracy": [0.3476666808128357, 0.43166667222976685, 0.5053333044052124, 0.5680000185966492, 0.590666651725769, 0.625333309173584, 0.6660000085830688, 0.6826666593551636, 0.6990000009536743, 0.7083333134651184, 0.7133333086967468, 0.7263333201408386, 0.7163333296775818, 0.7276666760444641, 0.7356666922569275, 0.7366666793823242, 0.7406666874885559, 0.7429999709129333, 0.749666690826416, 0.753333330154419, 0.7509999871253967, 0.7566666603088379, 0.7580000162124634, 0.7543333172798157, 0.765999972820282, 0.7663333415985107, 0.7646666765213013, 0.7706666588783264, 0.7703333497047424, 0.7753333449363708, 0.7703333497047424, 0.777999997138977, 0.7720000147819519, 0.7689999938011169, 0.781000018119812, 0.7743333578109741, 0.7683333158493042, 0.7806666493415833, 0.778333306312561, 0.7789999842643738]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 6, 1, 2, 6, 5, 3, 2, 2, 3, 4, 7, 0, 2, 1, 5, 3, 9, 6, 6, 2, 3, 5, 8, 4, 5, 4, 6, 4], [2, 0, 2, 0, 0, 0, 2, 0, 2, 2, 2, 2, 1, 2, 2, 0, 2, 1, 1, 1], [70, 83, 18, 92, 41, 57, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7725714445114136, "mapping_values": [1, 48, 48, 28, 20, 7, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(grad), tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))), tf.math.multiply(tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))))), tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), grad)), grad))))), tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))), grad), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.square(tf.math.sqrt(tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.pow(tf.math.square(grad), tf.math.add(alpha, tf.math.pow(alpha, alpha)))))), tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.2833626987030007, 2.2294252376672286, 2.153622453900187, 2.0222828166044904, 1.8229057580378267, 1.602711498776699, 1.4041893919303732, 1.2844938011280282, 1.1848362436887847, 1.1120099548839417, 1.0543091181735038, 1.000181173966498, 0.9696737205064245, 0.9394180016542202, 0.9205420259250988, 0.8992411618250992, 0.8746688220526454, 0.8580596479190544, 0.8575133124850823, 0.8386266284363066, 0.8207211114821449, 0.8093928874223901, 0.7902205603674749, 0.7931450760170863, 0.777698315618029, 0.7788252789803216, 0.7598547435723213, 0.7562610937651233, 0.7454591501091355, 0.7427645805505257, 0.7514287506694791, 0.7297551920070404, 0.7148548620740074, 0.7113867791699475, 0.7112198140894842, 0.7079056813228463, 0.706138186159702, 0.6933577211620219, 0.6901645470115849, 0.6830930399337323], "accuracy": [0.13789460062980652, 0.25782591104507446, 0.33681151270866394, 0.3897767663002014, 0.4525161683559418, 0.49808478355407715, 0.5411438345909119, 0.5622771382331848, 0.5842028856277466, 0.617751955986023, 0.6269977688789368, 0.6452252268791199, 0.6586976647377014, 0.6650376319885254, 0.6712455153465271, 0.6808875799179077, 0.6860388517379761, 0.6890767216682434, 0.6892088055610657, 0.698190450668335, 0.7038700580596924, 0.7053229212760925, 0.7131158113479614, 0.7156254053115845, 0.7161537408828735, 0.7195879220962524, 0.720380425453186, 0.7260599732398987, 0.7308149337768555, 0.7296261787414551, 0.7275128960609436, 0.7349095344543457, 0.7401928305625916, 0.7403249144554138, 0.7396644949913025, 0.7425703406333923, 0.7390040755271912, 0.7460044622421265, 0.743891179561615, 0.7497028112411499], "val_loss": [1.9262195995875768, 1.865086214882987, 1.7633169037955148, 1.5978491306304932, 1.3752333096095495, 1.1578426701681954, 0.9943996838160923, 0.8896686690194267, 0.8154416935784476, 0.761001638003758, 0.7281084401266915, 0.6959355899265834, 0.6730146408081055, 0.6564168078558785, 0.6418552228382656, 0.6264524459838867, 0.6158900771822248, 0.6094222068786621, 0.5974699429103306, 0.5863036428179059, 0.5780862740107945, 0.5714680467333112, 0.5655830076762608, 0.5602067368371146, 0.5566157613481794, 0.5527023928506034, 0.5452589818409511, 0.5397573028291974, 0.5369653020586286, 0.5289630208696637, 0.5262309653418404, 0.5247849566595895, 0.5193476847239903, 0.5183671542576381, 0.5158193452017648, 0.509507587977818, 0.5126205682754517, 0.5039565563201904, 0.5032252413885934, 0.49867556776319233], "val_accuracy": [0.3476666808128357, 0.43166667222976685, 0.5049999952316284, 0.5680000185966492, 0.5910000205039978, 0.625333309173584, 0.6663333177566528, 0.6823333501815796, 0.6990000009536743, 0.7083333134651184, 0.7136666774749756, 0.7263333201408386, 0.7160000205039978, 0.7279999852180481, 0.7356666922569275, 0.7353333234786987, 0.7413333058357239, 0.7433333396911621, 0.749666690826416, 0.7519999742507935, 0.7513333559036255, 0.7566666603088379, 0.7583333253860474, 0.7540000081062317, 0.765333354473114, 0.765999972820282, 0.7633333206176758, 0.7696666717529297, 0.7716666460037231, 0.7756666541099548, 0.7713333368301392, 0.7786666750907898, 0.7720000147819519, 0.7689999938011169, 0.7820000052452087, 0.7736666798591614, 0.7680000066757202, 0.7806666493415833, 0.7786666750907898, 0.778333306312561]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 6, 1, 2, 6, 5, 8, 2, 5, 3, 5, 7, 8, 2, 1, 2, 3, 9, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 0, 0, 0, 2, 0, 2, 1, 2, 2, 1, 0, 2, 1, 2, 1, 2, 1], [70, 83, 18, 92, 41, 58, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7720000147819519, "mapping_values": [1, 38, 38, 24, 14, 8, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 50, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(grad), tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(grad, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)), grad)))))))), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)))))), tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))), grad)), tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(alpha)))), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.2833626627402457, 2.2294258852802358, 2.1536297815161896, 2.022281821881618, 1.8229047653146344, 1.6027354194251633, 1.4042178148354805, 1.2845065745348787, 1.1848457570970963, 1.112018093031789, 1.0542982946596662, 1.0001927815360983, 0.9695932991815486, 0.9394185958033335, 0.9206694064438224, 0.8990358263431303, 0.8746701372675908, 0.8581536554814707, 0.8575931769540959, 0.8385666831530726, 0.8207793597846912, 0.8093615764435398, 0.7903717918371433, 0.7930993432807192, 0.7776090436922702, 0.7789286948812322, 0.7597480506834621, 0.7562319101705968, 0.7454452715088836, 0.7429129070672598, 0.7513859274994822, 0.7298251421239634, 0.7147630637489715, 0.7113632807846886, 0.7109478643431466, 0.7079639141711702, 0.7061713647455068, 0.6935282466024566, 0.6901963206330122, 0.6832718944363764], "accuracy": [0.13789460062980652, 0.25782591104507446, 0.3369435966014862, 0.39004093408584595, 0.4525161683559418, 0.49768856167793274, 0.5411438345909119, 0.5625412464141846, 0.5843349695205688, 0.6176198720932007, 0.62660151720047, 0.6444327235221863, 0.6584334969520569, 0.6649055480957031, 0.6712455153465271, 0.6814159154891968, 0.6859067678451538, 0.6892088055610657, 0.6886804699897766, 0.698190450668335, 0.7040021419525146, 0.7051908373832703, 0.7127195596694946, 0.7152291536331177, 0.7170783281326294, 0.7201162576675415, 0.719852089881897, 0.7253995537757874, 0.7304186820983887, 0.7304186820983887, 0.7273808121681213, 0.7349095344543457, 0.7401928305625916, 0.7404569983482361, 0.739400327205658, 0.7409853339195251, 0.7383436560630798, 0.7465327978134155, 0.7436270117759705, 0.7493065595626831], "val_loss": [1.9262199401855469, 1.8650905064174108, 1.7633120673043388, 1.597837039402553, 1.375270128250122, 1.1578822817121233, 0.9944357531411308, 0.8896562371935163, 0.8155029841831752, 0.7610434293746948, 0.7280986649649483, 0.6959071499960763, 0.6729788439614433, 0.6564815214702061, 0.6419687952314105, 0.6262220995766776, 0.6157569714954921, 0.609486630984715, 0.5974619388580322, 0.5862168414252145, 0.5779422351292202, 0.5713137558528355, 0.5655394111360822, 0.5603029557636806, 0.556594899722508, 0.5526459217071533, 0.5453658955437797, 0.5396455696650914, 0.5369165795189994, 0.5292270524161202, 0.526250992502485, 0.5249520540237427, 0.5193308080945697, 0.5183390889848981, 0.5159348930631366, 0.5095676183700562, 0.5124379055840629, 0.5039434092385429, 0.5032361405236381, 0.49833972113473074], "val_accuracy": [0.3476666808128357, 0.43166667222976685, 0.5046666860580444, 0.5680000185966492, 0.590666651725769, 0.625, 0.6669999957084656, 0.6823333501815796, 0.6986666917800903, 0.7086666822433472, 0.7133333086967468, 0.7266666889190674, 0.715666651725769, 0.7273333072662354, 0.7356666922569275, 0.7366666793823242, 0.7400000095367432, 0.7429999709129333, 0.75, 0.753000020980835, 0.7513333559036255, 0.7573333382606506, 0.7583333253860474, 0.7543333172798157, 0.765666663646698, 0.7666666507720947, 0.7636666893959045, 0.7706666588783264, 0.7716666460037231, 0.7743333578109741, 0.7706666588783264, 0.778333306312561, 0.7710000276565552, 0.7703333497047424, 0.781000018119812, 0.7743333578109741, 0.768666684627533, 0.7803333401679993, 0.7789999842643738, 0.778333306312561]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 6, 9, 2, 6, 5, 8, 2, 5, 3, 5, 7, 8, 2, 1, 2, 9, 9, 9, 6, 2, 3, 8, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 0, 2, 1, 3, 2, 2, 2, 2, 1, 0, 2, 1, 2, 3, 1, 1], [70, 67, 18, 92, 41, 40, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [1, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.3271428644657135, "mapping_values": [1, 25, 25, 16, 9, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(grad), tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.sqrt(alpha)))))), tf.math.add(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), grad)))))), alpha)))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [3.1960262010881944, 2.368029808717838, 2.2975666804509536, 2.30004429826647, 2.258086432208947, 2.2895410879019495], "accuracy": [0.18755778670310974, 0.14397041499614716, 0.13961167633533478, 0.11411966383457184, 0.15242372453212738, 0.16219785809516907], "val_loss": [1.8154517582484655, 1.9738732065473283, 1.9746458871023995, 1.9198802539280482, 1.9717124530247279, 1.9748099190848214], "val_accuracy": [0.31200000643730164, 0.09799999743700027, 0.09833333641290665, 0.2613333463668823, 0.10100000351667404, 0.10433333367109299]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1], [1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [5, 2, 6, 1, 2, 6, 5, 3, 2, 9, 3, 4, 7, 0, 2, 1, 2, 3, 9, 5, 6, 2, 3, 5, 8, 4, 5, 4, 6, 4], [2, 0, 2, 0, 0, 2, 1, 3, 2, 1, 2, 2, 1, 0, 2, 1, 2, 3, 1, 1], [70, 83, 18, 92, 41, 36, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [1, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 15, 15, 8, 7, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(tf.math.add(beta, tf.math.subtract(grad, beta)), tf.math.pow(grad, tf.math.negative(grad)))), tf.math.pow(tf.math.pow(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 6, 6, 1, 2, 6, 6, 3, 2, 9, 8, 4, 7, 0, 2, 1, 2, 3, 9, 5, 1, 2, 3, 5, 8, 2, 5, 4, 2, 4], [2, 0, 2, 0, 0, 2, 1, 1, 2, 1, 2, 2, 1, 0, 2, 1, 2, 3, 1, 1], [70, 74, 18, 92, 41, 36, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 1, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 48, 48, 29, 19, 6, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.add(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), grad)), alpha)), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), grad)))))))))), grad)))), tf.math.add(alpha, tf.math.add(alpha, tf.math.multiply(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.pow(alpha, tf.math.add(grad, grad)))), tf.math.add(alpha, alpha))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [3, 8, 6, 0, 2, 6, 5, 8, 2, 5, 3, 5, 7, 8, 2, 1, 2, 3, 9, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 1, 0, 2, 1, 3, 2, 1, 2, 2, 2, 1, 0, 1, 0, 3, 1, 1, 3], [70, 83, 18, 92, 41, 36, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [1, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 32, 32, 21, 11, 5, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.subtract(grad, alpha), tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))))))), grad))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), grad))))))), tf.math.add(alpha, tf.math.multiply(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), grad))))), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07317395508289337, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1], [5, 2, 1, 2, 2, 6, 1, 3, 2, 4, 3, 4, 7, 2, 2, 1, 2, 3, 9, 5, 6, 6, 3, 3, 6, 4, 5], [2, 0, 2, 0, 0, 2, 1, 3, 2, 0, 2, 2, 2, 0, 2, 1, 2, 2, 0, 1, 0, 0, 1], [71, 54, 18, 92, 8, 54, 41, 44, 87], [0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 2, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [1, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 50, 50, 27, 23, 9, 10, 10, 5, 5, 1, 3, 3, 1, 2, 1, 1, 0, 1, 1], "tree_depth": 52, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), grad)))), alpha), tf.math.add(alpha, tf.math.pow(tf.math.multiply(tf.math.pow(grad, tf.math.add(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(grad, tf.math.multiply(tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(alpha, grad)))), grad), tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))))))), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, grad), grad), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.square(alpha), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))))))))), alpha)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(tf.math.add(beta, tf.math.subtract(grad, beta)), tf.math.pow(grad, grad))), tf.math.add(beta, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, alpha), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3025513530769492, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1], [5, 2, 6, 1, 2, 6, 5, 3, 2, 9, 9, 4, 7, 0, 2, 1, 0, 3, 9, 5, 6, 2, 3, 5, 8, 4, 5, 4, 2, 4, 1, 2], [2, 0, 2, 0, 0, 2, 1, 3, 2, 1, 2, 2, 1, 0, 2, 2, 2, 0, 1, 1], [70, 83, 18, 92, 41, 36, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 51, 51, 32, 19, 8, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 1], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.pow(tf.math.add(grad, tf.math.negative(tf.math.add(tf.math.subtract(tf.math.negative(tf.math.add(alpha, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32), grad))))), tf.math.square(tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))), tf.math.add(alpha, grad)), grad), tf.math.sqrt(tf.math.add(alpha, alpha))))))), tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.pow(tf.math.subtract(alpha, tf.math.add(alpha, tf.math.add(tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32), grad))), tf.math.add(alpha, grad))))), tf.math.add(alpha, grad)))))))), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3025513530769492, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 4, 6, 1, 2, 2, 5, 3, 2, 9, 3, 2, 7, 0, 2, 1, 2, 3, 9, 5, 6, 3, 3, 5, 3, 4, 5, 4, 6, 4], [2, 0, 2, 0, 0, 0, 2, 0, 2, 1, 2, 2, 1, 0, 2, 2, 2, 1, 2, 1], [70, 83, 18, 92, 41, 36, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 1, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 47, 47, 28, 19, 8, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.square(grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(grad, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))))), tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32))), tf.math.square(tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32))))), tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)))))), tf.math.add(alpha, grad))), grad), tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.pow(tf.math.square(grad), tf.math.pow(alpha, grad))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3026222363281654, 2.3015467239141056, 2.303669108092399, 2.303745947556804, 2.302004677602848, 2.3037581976299917], "accuracy": [0.08928807079792023, 0.09430722147226334, 0.08440100401639938, 0.08809932321310043, 0.0874389111995697, 0.0878351628780365], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1], [5, 2, 6, 1, 2, 5, 5, 3, 2, 9, 3, 4, 7, 6, 2, 1, 2, 3, 9, 5, 6, 2, 3, 0, 6, 4, 5, 8, 6, 4], [2, 0, 2, 0, 0, 2, 1, 3, 1, 1, 0, 2, 2, 0, 2, 1, 2, 3, 1, 1, 2, 2, 3, 2, 0, 1], [70, 83, 18, 92, 41, 36, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1, 0], [0, 1, 0, 0, 1], [3, 4, 8], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 33, 33, 20, 13, 6, 1, 1, 0, 1, 0, 6, 5, 3, 2, 1, 1, 0, 1, 0], "tree_depth": 50, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.subtract(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)), grad), tf.math.add(alpha, alpha)))), tf.math.add(alpha, grad)))))), alpha)))), tf.math.add(tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, grad))), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.sqrt(sigma)), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3026222363281654, 2.3015467239141056, 2.303669108092399, 2.303745947556804, 2.302004677602848, 2.3037581976299917], "accuracy": [0.08928807079792023, 0.09430722147226334, 0.08440100401639938, 0.08809932321310043, 0.0874389111995697, 0.0878351628780365], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0], [0, 6, 3, 2, 0, 6, 6, 9, 2, 4, 3, 4, 7, 2, 2, 1, 2, 4, 0, 5, 6, 6, 2, 9, 2, 4, 5, 1, 4, 9, 1, 5, 5, 5], [2, 2, 2, 2, 1, 2, 1, 3, 2, 1, 0, 2, 1, 0, 2, 1, 2, 3, 0, 1, 3, 2, 3, 1, 2, 0, 0, 1], [70, 41, 18, 92, 41, 36, 99, 44], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [5, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 3, 1, 5, 3, 4], [31], [1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 50, 50, 30, 20, 6, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 0, 1, 0], "tree_depth": 55, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.pow(tf.math.negative(tf.math.square(grad)), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)))), alpha)))), tf.math.add(alpha, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.square(tf.math.subtract(alpha, tf.math.pow(grad, grad)))))), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32))), alpha))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, sigma))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3026222363281654, 2.3015467239141056, 2.303669108092399, 2.303745947556804, 2.302004677602848, 2.3037581976299917], "accuracy": [0.08928807079792023, 0.09430722147226334, 0.08440100401639938, 0.08809932321310043, 0.0874389111995697, 0.0878351628780365], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 6, 1, 2, 6, 5, 9, 2, 5, 3, 0, 7, 8, 2, 1, 2, 3, 9, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 0, 0, 0, 2, 0, 2, 1, 2, 0, 1, 0, 2, 1, 2, 1, 2, 1], [70, 83, 18, 92, 41, 58, 30, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1, 1, 0, 1], [0, 0, 0, 0, 0], [3, 4, 4, 8, 9], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 32, 32, 21, 11, 8, 1, 1, 0, 1, 0, 8, 5, 5, 0, 1, 1, 0, 1, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(grad), tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.square(tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(tf.math.add(alpha, grad), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))))))), tf.math.multiply(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), grad)), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.sqrt(sigma)), sigma)), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), sigma)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3026222363281654, 2.3015467239141056, 2.303669108092399, 2.303745947556804, 2.302004677602848, 2.3037581976299917], "accuracy": [0.08928807079792023, 0.09430722147226334, 0.08440100401639938, 0.08809932321310043, 0.0874389111995697, 0.0878351628780365], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1], [1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [5, 2, 6, 1, 2, 6, 5, 8, 2, 5, 3, 5, 7, 8, 2, 1, 2, 3, 9, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 0, 0, 0, 2, 0, 2, 1, 2, 2, 1, 0, 2, 1, 2, 1, 2, 1], [70, 83, 18, 92, 41, 36, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [1, 0, 0, 0, 1], [1, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 1, 1, 0, 1, 0, 15, 15, 8, 7, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(tf.math.add(beta, tf.math.subtract(grad, beta)), tf.math.pow(grad, tf.math.negative(grad)))), tf.math.pow(tf.math.pow(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3026222363281654, 2.3015467239141056, 2.303669108092399, 2.303745947556804, 2.302004677602848, 2.3037581976299917], "accuracy": [0.08928807079792023, 0.09430722147226334, 0.08440100401639938, 0.08809932321310043, 0.0874389111995697, 0.0878351628780365], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1], [5, 2, 3, 2, 2, 6, 1, 3, 2, 4, 3, 4, 7, 2, 2, 1, 2, 3, 9, 5, 6, 6, 3, 5, 8, 4, 5], [2, 0, 2, 1, 0, 2, 1, 3, 2, 1, 2, 2, 2, 1, 0, 1, 0, 3, 1, 1, 3], [70, 83, 18, 92, 41, 58, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 1, 0, 0, 1], [0, 1, 0, 0], [3, 4], [2, 0, 1, 5, 3, 4], [38], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3026222363281654, 2.3015467239141056, 2.303669108092399, 2.303745947556804, 2.302004677602848, 2.3037581976299917], "accuracy": [0.08928807079792023, 0.09430722147226334, 0.08440100401639938, 0.08809932321310043, 0.0874389111995697, 0.0878351628780365], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1], [2, 4, 3, 1, 2, 9, 5, 8, 2, 4, 3, 9, 7, 2, 3, 6, 3, 2, 6, 5, 5, 6, 3, 5, 8, 6, 5, 7, 8, 3, 2, 9], [2, 2, 1, 0, 2, 2, 1, 3, 1, 1, 2, 2, 2, 0, 2, 2, 2, 3, 2], [70, 83, 58, 92, 41, 36, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 8, 1, 4, 9, 4, 9, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [5, 2, 3, 5, 0, 3, 1, 3], [36], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [6, 3, 1, 5, 3, 4], [38], [0, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 5, 3, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), tf.math.add(sigma, sigma))), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.square(sigma), tf.math.square(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3026222363281654, 2.3015467239141056, 2.303669108092399, 2.303745947556804, 2.302004677602848, 2.3037581976299917], "accuracy": [0.08928807079792023, 0.09430722147226334, 0.08440100401639938, 0.08809932321310043, 0.0874389111995697, 0.0878351628780365], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1], [5, 2, 3, 2, 2, 6, 1, 3, 2, 4, 3, 4, 7, 2, 2, 1, 2, 3, 9, 5, 6, 6, 3, 5, 8, 4, 5], [2, 0, 2, 1, 0, 2, 1, 3, 2, 1, 2, 2, 2, 1, 0, 1, 0, 3, 1, 1, 3], [70, 83, 18, 92, 41, 36, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [1, 0, 0, 0, 1], [1, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [38], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 1, 1, 0, 1, 0, 15, 15, 8, 7, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(tf.math.add(beta, tf.math.subtract(grad, beta)), tf.math.pow(grad, tf.math.negative(grad)))), tf.math.pow(tf.math.pow(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3026222363281654, 2.3015467239141056, 2.303669108092399, 2.303745947556804, 2.302004677602848, 2.3037581976299917], "accuracy": [0.08928807079792023, 0.09430722147226334, 0.08440100401639938, 0.08809932321310043, 0.0874389111995697, 0.0878351628780365], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1], [5, 2, 3, 2, 2, 6, 1, 3, 2, 4, 3, 4, 7, 2, 2, 1, 2, 3, 9, 5, 6, 6, 3, 5, 8, 4, 5], [2, 0, 2, 1, 0, 2, 1, 3, 2, 1, 2, 2, 2, 1, 0, 1, 0, 3, 1, 1, 3], [70, 83, 18, 92, 41, 36, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [1, 0, 0, 0, 1], [1, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [38], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3026222363281654, 2.3015467239141056, 2.303669108092399, 2.303745947556804, 2.302004677602848, 2.3037581976299917], "accuracy": [0.08928807079792023, 0.09430722147226334, 0.08440100401639938, 0.08809932321310043, 0.0874389111995697, 0.0878351628780365], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1], [4, 2, 1, 8, 2, 6, 5, 3, 4, 0, 3, 4, 7, 0, 2, 1, 4, 4, 8, 5, 3, 2, 9, 5, 8, 6, 5, 4, 0, 9, 5, 0, 6, 4, 6, 5, 9, 8, 7, 0, 1, 7, 6, 9, 0], [2, 0, 2, 2, 0, 2, 1, 3, 2, 0, 2, 2, 0, 0, 2, 1, 2, 3, 1, 1], [70, 54, 18, 92, 41, 36, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 1, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 43, 43, 26, 17, 6, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 53, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), grad)))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.negative(grad), tf.math.add(alpha, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.pow(tf.math.pow(tf.math.sqrt(grad), tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), grad)), tf.math.add(alpha, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))))))), tf.math.divide_no_nan(tf.math.add(alpha, alpha), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), sigma)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3026222363281654, 2.3015467239141056, 2.303669108092399, 2.303745947556804, 2.302004677602848, 2.3037581976299917], "accuracy": [0.08928807079792023, 0.09430722147226334, 0.08440100401639938, 0.08809932321310043, 0.0874389111995697, 0.0878351628780365], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}]