[{"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [6, 3, 1, 9, 2, 9, 5, 3, 2, 3, 9, 4, 3, 1, 0, 0, 0, 3, 7, 8, 1, 6, 1, 8, 2, 8, 9, 9, 0, 0, 3, 0, 2, 9], [1, 3, 1, 3, 0, 0, 3, 0, 3, 3, 3, 2, 0, 2, 1, 3, 3, 1, 1, 2], [21, 2, 78, 38, 8, 47], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7777143120765686, "mapping_values": [1, 4, 4, 2, 2, 1, 34, 34, 22, 12, 6, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.subtract(alpha, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))), tf.math.add(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, alpha), grad), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))))))), tf.math.pow(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.negative(tf.math.add(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.negative(tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.subtract(tf.math.add(beta, grad), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)), tf.math.add(beta, grad)))))), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, beta))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2871816504695994, 2.244798613073268, 2.1878181720028747, 2.100733857664371, 1.9635597788630978, 1.7853487963374768, 1.596522772316888, 1.4297376287580246, 1.3096834450759405, 1.2224279804756266, 1.162898221791869, 1.0922722327096697, 1.0552238799231068, 1.0106106934341472, 0.9831913229087403, 0.9584413754894371, 0.934971101579098, 0.9184628511227795, 0.8956806663398682, 0.8790698370692941, 0.8543516989586265, 0.847173567303829, 0.8367116272394384, 0.8243035796673983, 0.8148862142698907, 0.8097149709023347, 0.8002187335306958, 0.788893486128948, 0.7812825865859542, 0.7785846050452279, 0.7581021485154213, 0.7537555103965833, 0.7562361344480558, 0.7339218738623551, 0.7372059859320661, 0.7374837195805555, 0.7332987360761559, 0.7308605663560054, 0.714721656147956, 0.7233206457969551, 0.7167891442515926, 0.708716789170216, 0.7062793677320192, 0.7057102275026976, 0.7011310836784183, 0.6940534237652659, 0.6844242291049935, 0.6837191522286757, 0.686301041642956, 0.6728922598523518, 0.6755977823608005, 0.6738924007012056], "accuracy": [0.12930920720100403, 0.23497556149959564, 0.3213578164577484, 0.3778893053531647, 0.41804254055023193, 0.4589882493019104, 0.4975564777851105, 0.5342755317687988, 0.5596354603767395, 0.5754854083061218, 0.5980715751647949, 0.6188086271286011, 0.6267336010932922, 0.6427156329154968, 0.6534143686294556, 0.6561880707740784, 0.6695284843444824, 0.6754721999168396, 0.6807554960250854, 0.6795667409896851, 0.6926429867744446, 0.6950204968452454, 0.7046625018119812, 0.7078325152397156, 0.7053229212760925, 0.7065116763114929, 0.7088891863822937, 0.7091533541679382, 0.715889573097229, 0.7131158113479614, 0.7256637215614319, 0.7301545143127441, 0.72672039270401, 0.7349095344543457, 0.7321357727050781, 0.7297582626342773, 0.7277770638465881, 0.7337207794189453, 0.7384757399559021, 0.7351737022399902, 0.7364945411682129, 0.7390040755271912, 0.7408532500267029, 0.7384757399559021, 0.7433628439903259, 0.7470611333847046, 0.7464007139205933, 0.7458723783493042, 0.7479857206344604, 0.7530049085617065, 0.7518161535263062, 0.7511557340621948], "val_loss": [1.9342363221304757, 1.8890118598937988, 1.819430146898542, 1.7089692183903284, 1.5480425698416573, 1.3552088737487793, 1.1686580862317766, 1.0233943121773856, 0.9222682544163295, 0.8512063537325177, 0.8003597259521484, 0.7587368147713798, 0.7306962864739555, 0.7010271208626884, 0.6802928618022374, 0.6656474215643746, 0.6513163362230573, 0.6388036353247506, 0.625531724521092, 0.6183231047221592, 0.6042440107890538, 0.5959630864007133, 0.590263945715768, 0.5859891516821725, 0.5778583117893764, 0.570573057447161, 0.5647680929728917, 0.5621862241200039, 0.5573440279279437, 0.55015800680433, 0.5463158403124128, 0.5428177969796317, 0.5400592429297311, 0.5331872531345913, 0.5317944458552769, 0.5284826244626727, 0.5250147410801479, 0.5258132559912545, 0.5195807048252651, 0.5150560310908726, 0.5122586829321725, 0.5136629002434867, 0.50887473991939, 0.5052507945469448, 0.5033898864473615, 0.5029652118682861, 0.4978407791682652, 0.4945850031716483, 0.49259630271366667, 0.495388388633728, 0.48922111306871685, 0.4868636982781546], "val_accuracy": [0.32600000500679016, 0.42133334279060364, 0.4790000021457672, 0.5323333144187927, 0.565666675567627, 0.5886666774749756, 0.6269999742507935, 0.6503333449363708, 0.6813333630561829, 0.6903333067893982, 0.6940000057220459, 0.7179999947547913, 0.7129999995231628, 0.7163333296775818, 0.7326666712760925, 0.7170000076293945, 0.737333357334137, 0.7300000190734863, 0.7393333315849304, 0.7329999804496765, 0.7473333477973938, 0.75, 0.7516666650772095, 0.7403333187103271, 0.7549999952316284, 0.7599999904632568, 0.7576666474342346, 0.7633333206176758, 0.7526666522026062, 0.768666684627533, 0.7649999856948853, 0.7593333125114441, 0.7689999938011169, 0.7696666717529297, 0.7670000195503235, 0.7680000066757202, 0.7730000019073486, 0.7680000066757202, 0.7670000195503235, 0.781000018119812, 0.7803333401679993, 0.7786666750907898, 0.7776666879653931, 0.7736666798591614, 0.7816666960716248, 0.781333327293396, 0.7903333306312561, 0.7829999923706055, 0.7893333435058594, 0.7883333563804626, 0.7870000004768372, 0.7870000004768372]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 2, 3, 0, 2, 6, 2, 3, 8, 3, 4, 4, 8, 1, 3, 6, 2, 0, 7, 8, 2, 9, 2, 8, 2, 8, 9, 6, 0, 0, 5, 0, 2, 9], [2, 3, 1, 3, 0, 0, 3, 0, 3, 3, 3, 2, 4, 4, 5, 3, 3, 1, 1, 3, 4, 0], [21, 2, 73, 68, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [4, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7731428742408752, "mapping_values": [1, 4, 4, 2, 2, 1, 47, 47, 29, 18, 5, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.add(beta, beta), tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.multiply(grad, alpha)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.pow(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), grad))), tf.math.pow(tf.math.sqrt(tf.math.subtract(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.add(grad, tf.math.add(beta, grad)), tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))))))), tf.math.add(beta, grad)))))), grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.sqrt(tf.math.add(tf.math.sqrt(tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(alpha)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2871830351301363, 2.2448753037740525, 2.188191323720579, 2.1019832554778026, 1.9667054353184183, 1.791011339826764, 1.6040715452954282, 1.4373230953037683, 1.3161719853710174, 1.227800289086536, 1.1674822154314037, 1.0961659198675835, 1.0586939732380642, 1.0136066480099233, 0.9857249164452185, 0.960821084822835, 0.9369628877057816, 0.9203977108615784, 0.8971027532163597, 0.8805461236199588, 0.8556110368601918, 0.8484604231291885, 0.8380066742435375, 0.8253228270051786, 0.8160337481469117, 0.8106440390105796, 0.8011740523086264, 0.7896719100909573, 0.7821336976446732, 0.7793186067700338, 0.758823666905116, 0.7544668318888043, 0.7568644864479501, 0.7345605201299842, 0.7377319520789839, 0.7382029355194244, 0.7341072044635824, 0.7314777199807279, 0.7149206600436728, 0.7238738150990887, 0.7172726126410596, 0.7090306722917861, 0.7064645238965651, 0.7058959477109333, 0.7010673816571571], "accuracy": [0.1294412910938263, 0.23497556149959564, 0.32043322920799255, 0.37828555703163147, 0.41804254055023193, 0.4585919976234436, 0.49610355496406555, 0.5328226089477539, 0.5591071248054504, 0.575089156627655, 0.5967507362365723, 0.617751955986023, 0.6255448460578918, 0.6409985423088074, 0.6528860330581665, 0.654999315738678, 0.6691322326660156, 0.6745476126670837, 0.6793025732040405, 0.6793025732040405, 0.6922467350959778, 0.6947563290596008, 0.7045304179191589, 0.707568347454071, 0.7053229212760925, 0.7066437602043152, 0.707568347454071, 0.7088891863822937, 0.7161537408828735, 0.7136441469192505, 0.7251353859901428, 0.7290979027748108, 0.7264562249183655, 0.7341170310974121, 0.7309470176696777, 0.7290979027748108, 0.7283053994178772, 0.7334566116333008, 0.7372870445251465, 0.7362303733825684, 0.7367587089538574, 0.7384757399559021, 0.739928662776947, 0.7386078238487244, 0.7441553473472595], "val_loss": [1.9342596871512276, 1.8891995293753487, 1.8201709474836076, 1.711172648838588, 1.5528963974543981, 1.3628326143537248, 1.1777962957109724, 1.0315661089760917, 0.9288081441606794, 0.8563909019742694, 0.8042682579585484, 0.7616524015154157, 0.7331431593213763, 0.7030279125486102, 0.6819766589573452, 0.6669117041996547, 0.6527017525264195, 0.6398918628692627, 0.6266591548919678, 0.6190882069723946, 0.6051661627633231, 0.596715910094125, 0.5910776172365461, 0.5864220687321254, 0.5784128734043666, 0.5713854346956525, 0.5652672052383423, 0.5629799365997314, 0.5577199459075928, 0.5508204868861607, 0.5468825953347343, 0.5432168756212506, 0.5403034176145282, 0.5335969414029803, 0.5322830336434501, 0.5287819589887347, 0.5253751788820539, 0.525873235293797, 0.5197592973709106, 0.515390123639788, 0.512592111315046, 0.5135829278400966, 0.5088885000773838, 0.5056224550519671, 0.5038336685725621], "val_accuracy": [0.3269999921321869, 0.42100000381469727, 0.4793333411216736, 0.531333327293396, 0.5649999976158142, 0.5886666774749756, 0.6236666440963745, 0.6493333578109741, 0.6803333163261414, 0.687333345413208, 0.6936666369438171, 0.7149999737739563, 0.7126666903495789, 0.7166666388511658, 0.7326666712760925, 0.7163333296775818, 0.737333357334137, 0.731333315372467, 0.7390000224113464, 0.7329999804496765, 0.7459999918937683, 0.7490000128746033, 0.750333309173584, 0.7393333315849304, 0.7546666860580444, 0.7596666812896729, 0.7573333382606506, 0.7620000243186951, 0.7519999742507935, 0.7680000066757202, 0.7643333077430725, 0.7596666812896729, 0.768666684627533, 0.7683333158493042, 0.7673333287239075, 0.7689999938011169, 0.7723333239555359, 0.7689999938011169, 0.7673333287239075, 0.7826666831970215, 0.7799999713897705, 0.7803333401679993, 0.7799999713897705, 0.7723333239555359, 0.7826666831970215]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 8, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 9, 2, 9, 5, 3, 2, 3, 3, 4, 3, 1, 0, 6, 0, 3, 7, 8, 1, 6, 1, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [2, 3, 0, 1, 1, 3, 3, 0, 2, 2, 3, 3, 3, 4, 3, 2, 3, 1, 1, 2, 4], [68, 86, 89, 38, 8], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7725714445114136, "mapping_values": [1, 4, 4, 2, 2, 1, 6, 6, 3, 3, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.multiply(tf.math.add(beta, grad), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2871816504695994, 2.2447983342202082, 2.187819314623364, 2.100726566389016, 1.9635436226741876, 1.785328888575068, 1.5964852463158288, 1.4296749678616667, 1.3096224176035014, 1.2223861588148188, 1.1628519199023928, 1.092227116299973, 1.0551902411903893, 1.0106555690476924, 0.98326362784607, 0.9584238398753735, 0.9348972709644047, 0.9185514711684964, 0.8956895865831613, 0.8791563234718452, 0.8543625121197885, 0.847114948658911, 0.836682855279895, 0.8242092023373216, 0.8148626533119575, 0.8095640809686192, 0.800167738383614, 0.7889250822590642, 0.7812114238518576, 0.7786341221687454, 0.7579304664646078, 0.7536724989503335, 0.7562223507381465, 0.733881313417251, 0.7370728158113145, 0.7375147878737922, 0.73335377125456, 0.7306945357088399, 0.7144174239087838, 0.7232393926286804, 0.7169620529881967, 0.7085003582415028, 0.7060787749958076, 0.7057087314426466, 0.7009014561821552], "accuracy": [0.12930920720100403, 0.23497556149959564, 0.32162198424339294, 0.37802138924598694, 0.4181746244430542, 0.4593845009803772, 0.4971602261066437, 0.5341434478759766, 0.5595033764839172, 0.5754854083061218, 0.598599910736084, 0.6184123754501343, 0.6269977688789368, 0.6425835490226746, 0.6534143686294556, 0.6563201546669006, 0.669792652130127, 0.6758684515953064, 0.6799629926681519, 0.6799629926681519, 0.6926429867744446, 0.6955488324165344, 0.7047945857048035, 0.7077004313468933, 0.705058753490448, 0.7069079279899597, 0.7078325152397156, 0.709021270275116, 0.7153612375259399, 0.7131158113479614, 0.7268524765968323, 0.7290979027748108, 0.7260599732398987, 0.7349095344543457, 0.7312111854553223, 0.7296261787414551, 0.7277770638465881, 0.7339849472045898, 0.7374191284179688, 0.7357020378112793, 0.7368907928466797, 0.7400607466697693, 0.7396644949913025, 0.7382115721702576, 0.7436270117759705], "val_loss": [1.9342361858912878, 1.8890116555350167, 1.819427149636405, 1.708953925541469, 1.5480294908796037, 1.3551715442112513, 1.1685724599020821, 1.0233255454472132, 0.92221086365836, 0.8512214933122907, 0.8003355775560651, 0.7587225096566337, 0.7307646785463605, 0.7010559354509626, 0.6803063665117536, 0.6656966890607562, 0.6514146327972412, 0.6388443878718785, 0.6255605391093663, 0.6184378862380981, 0.6043930394308907, 0.5960378476551601, 0.5903032677514213, 0.5858502047402518, 0.5778673035757882, 0.5706377029418945, 0.5648140566689628, 0.5623181888035366, 0.5573995794568744, 0.5503369229180473, 0.5464961869376046, 0.5428987911769322, 0.5402124779564994, 0.5333214827946254, 0.5317837851388114, 0.5283269711903164, 0.5251763037272862, 0.5258876766477313, 0.5193897826331002, 0.515268223626273, 0.5124212503433228, 0.5138086421149117, 0.5086816379002163, 0.5052122218268258, 0.5041232790265765], "val_accuracy": [0.32600000500679016, 0.42133334279060364, 0.47866666316986084, 0.5323333144187927, 0.565666675567627, 0.5886666774749756, 0.6273333430290222, 0.6503333449363708, 0.6813333630561829, 0.6899999976158142, 0.6943333148956299, 0.7179999947547913, 0.7126666903495789, 0.7163333296775818, 0.7323333621025085, 0.7170000076293945, 0.737333357334137, 0.731333315372467, 0.7400000095367432, 0.7329999804496765, 0.7476666569709778, 0.7493333220481873, 0.7509999871253967, 0.7396666407585144, 0.7546666860580444, 0.7593333125114441, 0.7573333382606506, 0.762666642665863, 0.753000020980835, 0.7683333158493042, 0.7649999856948853, 0.7596666812896729, 0.7693333625793457, 0.7693333625793457, 0.7676666378974915, 0.7680000066757202, 0.7720000147819519, 0.7680000066757202, 0.7683333158493042, 0.7816666960716248, 0.7799999713897705, 0.7793333530426025, 0.778333306312561, 0.7730000019073486, 0.7816666960716248]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 8, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [6, 2, 1, 9, 2, 9, 5, 3, 2, 3, 3, 4, 3, 1, 0, 6, 0, 3, 7, 8, 1, 6, 1, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [2, 3, 0, 1, 1, 3, 3, 0, 2, 2, 3, 3, 3, 4, 3, 2, 3, 1, 1, 2, 4], [68, 86, 89, 38, 8], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7722856998443604, "mapping_values": [1, 4, 4, 2, 2, 1, 7, 7, 4, 3, 2, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, beta), tf.math.subtract(grad, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2871816639792506, 2.244798712018081, 2.1878198681411773, 2.100723165452378, 1.9635293337773212, 1.7853146329327283, 1.59646151790435, 1.4296559696861342, 1.3096029298684349, 1.2223592543756296, 1.162838742040514, 1.0922204920046081, 1.0551536364278868, 1.010605778865464, 0.9832232569927049, 0.9584519362342576, 0.9349563788303279, 0.918556427423429, 0.8956673063574969, 0.8790693193489078, 0.8543778322140113, 0.847100382845683, 0.8366305969410475, 0.8241510963033707, 0.8147929147438933, 0.8095886629365612, 0.8002103544843511, 0.7888746758840025, 0.7810923497926573, 0.7784255653749667, 0.757914841025497, 0.753437341944322, 0.7560363758383426, 0.7337354034197219, 0.7369307491127778, 0.7374276342393228, 0.7332139424581129, 0.7307249374078517, 0.7145646146307091, 0.7232554487391013, 0.7167252411286215, 0.7086727420856389, 0.7059945242043736, 0.705705098613945, 0.7008577898241163], "accuracy": [0.12930920720100403, 0.23497556149959564, 0.3214899003505707, 0.37841764092445374, 0.4181746244430542, 0.45912033319473267, 0.4975564777851105, 0.5341434478759766, 0.5595033764839172, 0.5760137438774109, 0.5983357429504395, 0.6186765432357788, 0.62660151720047, 0.6425835490226746, 0.6540747880935669, 0.6557918190956116, 0.6692643165588379, 0.6758684515953064, 0.6804913282394409, 0.6798309087753296, 0.6923788189888, 0.6954167485237122, 0.7043983340263367, 0.7079645991325378, 0.7051908373832703, 0.707040011882782, 0.7079645991325378, 0.709021270275116, 0.7152291536331177, 0.7135120630264282, 0.7257958054542542, 0.7293620109558105, 0.7263241410255432, 0.7345132827758789, 0.7309470176696777, 0.7296261787414551, 0.7276449799537659, 0.7329282760620117, 0.7380794882774353, 0.7358341217041016, 0.7362303733825684, 0.739928662776947, 0.739928662776947, 0.7380794882774353, 0.7440232634544373], "val_loss": [1.9342362540108817, 1.889012268611363, 1.8194244248526437, 1.7089453424726213, 1.548008918762207, 1.3551721232278007, 1.1685946328299386, 1.0233186653682165, 0.9221913473946708, 0.8512011936732701, 0.8003190755844116, 0.758749144417899, 0.7307595866067069, 0.7010510308401925, 0.6802833250590733, 0.6656719275883266, 0.6512233189174107, 0.6387810025896344, 0.6255260365349906, 0.6183383975710187, 0.604304313659668, 0.5960206304277692, 0.5901785067149571, 0.5860261576516288, 0.5778549909591675, 0.5706673690250942, 0.5646780048097882, 0.5621119226728167, 0.5572488648550851, 0.5501669815608433, 0.5463603224073138, 0.5427814722061157, 0.5400704145431519, 0.533244286264692, 0.5317392519542149, 0.5283943584987095, 0.525092533656529, 0.5257814271109444, 0.5195762089320591, 0.5150867189679827, 0.5123667546680996, 0.5136844090053013, 0.5088180303573608, 0.5051652533667428, 0.5040409735270909], "val_accuracy": [0.32600000500679016, 0.42133334279060364, 0.47866666316986084, 0.5323333144187927, 0.565666675567627, 0.5886666774749756, 0.6266666650772095, 0.6506666541099548, 0.6819999814033508, 0.6899999976158142, 0.6946666836738586, 0.7179999947547913, 0.7129999995231628, 0.7163333296775818, 0.7323333621025085, 0.7170000076293945, 0.7369999885559082, 0.7306666374206543, 0.7403333187103271, 0.7326666712760925, 0.746999979019165, 0.75, 0.7516666650772095, 0.7393333315849304, 0.7549999952316284, 0.7599999904632568, 0.7576666474342346, 0.7630000114440918, 0.753000020980835, 0.7683333158493042, 0.7646666765213013, 0.7590000033378601, 0.7683333158493042, 0.7689999938011169, 0.7670000195503235, 0.7680000066757202, 0.7713333368301392, 0.768666684627533, 0.7680000066757202, 0.7820000052452087, 0.7806666493415833, 0.7786666750907898, 0.778333306312561, 0.7736666798591614, 0.7816666960716248]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 2, 2, 0, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 2, 3, 0, 2, 6, 5, 3, 3, 3, 3, 2, 8, 1, 3, 6, 0, 3, 7, 8, 2, 6, 2, 8, 2, 2, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 3, 1, 2, 1, 3, 3, 0, 2, 3, 3, 3, 4, 3, 2, 3, 1, 1, 2, 4], [68, 86, 68, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10457143187522888, "mapping_values": [1, 4, 4, 2, 2, 0, 31, 31, 17, 14, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(grad)), grad)), tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.math.multiply(grad, alpha)), beta), tf.math.add(beta, alpha))), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(grad)))))), tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(beta)), tf.math.add(beta, grad)))), tf.math.add(beta, grad))), tf.math.add(beta, grad))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3021548706637147, 2.2991148871579394, 2.3005344808818076, 2.301889741047577, 2.302298534248704, 2.3027625066918183, 2.3031434048247172], "accuracy": [0.09232597798109055, 0.10447761416435242, 0.09377889335155487, 0.08281600475311279, 0.1080438494682312, 0.10791176557540894, 0.09998679161071777], "val_loss": [1.9691647802080428, 1.9704282624380929, 1.9722228731427873, 1.9732470512390137, 1.9738661221095495, 1.9742769513811385, 1.9747193881443568], "val_accuracy": [0.08766666799783707, 0.1080000028014183, 0.06366666406393051, 0.10566666722297668, 0.10166666656732559, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 1, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 2, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [1, 2, 3, 0, 2, 5, 2, 3, 2, 6, 3, 2, 8, 5, 0, 2, 0, 2, 0, 8, 0, 6, 2, 1, 4, 8, 9, 6, 0, 0, 3, 0, 2, 9], [1, 3, 3, 3, 3, 0, 3, 0, 0, 3, 3, 2, 3, 4, 0, 3, 3, 1, 2, 2, 1, 4], [54, 86, 9, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [4, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 5, 3, 1, 29, 29, 17, 12, 3, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), grad)), tf.math.sqrt(tf.math.add(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.add(beta, alpha), grad), tf.math.add(beta, tf.math.negative(grad))), tf.math.add(tf.math.add(beta, tf.math.square(grad)), tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))))), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), tf.math.square(grad))), tf.math.negative(tf.math.add(tf.math.negative(grad), beta)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09602430462837219, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [2, 0, 8, 8, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 2, 1, 8, 2, 6, 2, 3, 8, 3, 4, 4, 8, 1, 0, 6, 0, 0, 7, 8, 2, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [2, 3, 3, 3, 0, 0, 3, 0, 3, 3, 3, 2, 4, 4, 5, 3, 3, 1, 1, 2], [21, 2, 78, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 29, 29, 16, 13, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(beta, tf.math.subtract(grad, grad))), tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.math.pow(grad, tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))))), grad), tf.math.sqrt(tf.math.subtract(grad, tf.math.negative(tf.math.divide_no_nan(grad, beta)))))), grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07951393723487854, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 1, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 93, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 2, 3, 4, 2, 5, 2, 3, 8, 4, 3, 2, 8, 5, 0, 2, 0, 2, 6, 8, 0, 6, 2, 1, 4, 8, 9, 6, 0, 0, 3, 0, 2, 9], [2, 3, 3, 3, 1, 3, 3, 0, 0, 3, 3, 2, 4, 4, 0, 2, 3, 1, 3, 2], [54, 86, 13, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [4, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 5, 3, 2, 9, 9, 4, 5, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.add(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.pow(beta, grad)), grad), tf.math.add(beta, grad)), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302678387887159, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 1, 8, 7, 2, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 5, 5, 3, 0, 6, 2, 6, 8, 3, 2, 8, 2, 1, 3, 1, 6, 2, 7, 8, 9, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [1, 3, 3, 3, 3, 0, 3, 0, 0, 3, 3, 2, 3, 4, 0, 3, 3, 1, 2, 2, 1, 4], [54, 86, 9, 38, 8], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [4, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 8, 8, 5, 3, 0, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.square(tf.math.square(tf.math.multiply(alpha, grad))), tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3204408765799647, 2.3738306007365098, 2.489212431376715, 3.389856885626111, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.057456083595752716, 0.020208690315485, 0.012812046334147453, 0.029058247804641724, 0.10328886657953262, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.0128540311540877, 2.080247129712786, 2.2573581423078264, 10.77385003226144, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.004333333112299442, 0.003000000026077032, 0.006000000052154064, 0.09966666996479034, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 4, 8, 3, 2, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 2, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [17, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 2, 1, 0, 2, 6, 2, 3, 8, 3, 4, 4, 8, 1, 0, 6, 0, 0, 7, 8, 2, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 0, 1, 1, 1, 3, 0, 0, 2, 3, 3, 3, 4, 3, 2, 3, 1, 1, 2, 4], [21, 2, 78, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [65, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 18, 10, 8, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(grad)), tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))))), tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))))))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [0, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 2, 3, 0, 3, 6, 2, 4, 8, 8, 5, 4, 8, 1, 0, 6, 0, 3, 7, 8, 2, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [2, 3, 1, 3, 0, 0, 3, 3, 3, 3, 3, 2, 4, 4, 5, 3, 3, 1, 1, 2], [21, 2, 78, 38, 8], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 33, 33, 20, 13, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(beta, grad)), tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.multiply(alpha, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(grad)))), tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))))), tf.math.pow(grad, tf.math.add(beta, tf.math.sqrt(grad)))))))), tf.math.add(beta, tf.math.subtract(tf.math.negative(tf.math.divide_no_nan(tf.math.negative(tf.math.multiply(tf.math.add(grad, tf.math.add(beta, grad)), grad)), tf.math.add(beta, beta))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [366690.4937483352, 52586886.62052569, 920728348.2002378, 6507301756.534143, 28929202793.56492, 95624095965.0033], "accuracy": [0.09721305221319199, 0.10487385839223862, 0.10170386731624603, 0.09668471664190292, 0.1002509593963623, 0.09602430462837219], "val_loss": [3040350.4285714286, 163058518.85714287, 1748440905.142857, 9528674889.142857, 35686329782.85714, 105254750500.57143], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [5, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [3, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [17, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 2, 3, 0, 2, 6, 5, 3, 4, 3, 3, 2, 8, 1, 0, 6, 0, 3, 7, 8, 2, 6, 2, 8, 2, 2, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 1, 3, 1, 0, 3, 0, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [68, 86, 89, 38, 8], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [65, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 0, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, sigma))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3036431207821875, 2.303896143798264, 2.3064106562512032, 2.3101067770395014, 2.311797111986367, 2.3149019583514527, 2.3201974956760347, 2.3233279152443034, 2.3320515727354407, 2.3440180209649473, 2.3805058310454186, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08572183549404144, 0.09047681838274002, 0.08611807972192764, 0.08070268481969833, 0.08096684515476227, 0.07607977837324142, 0.07092854380607605, 0.07515519857406616, 0.07357019931077957, 0.08136309683322906, 0.07991018146276474, 0.09549596905708313, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9720637457711356, 1.9735983439854212, 1.9751293318612235, 1.977268900190081, 1.979567050933838, 1.982105050768171, 1.9853149822780065, 1.989311354500907, 1.9957215445382255, 2.0096300670078824, 2.0804097993033275, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.03166666626930237, 0.02566666714847088, 0.023666666820645332, 0.021666666492819786, 0.03033333271741867, 0.045666664838790894, 0.05966666713356972, 0.07199999690055847, 0.08766666799783707, 0.0989999994635582, 0.09966666996479034, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [0, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [11, 26, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 2, 3, 0, 2, 2, 2, 3, 8, 3, 5, 4, 8, 1, 0, 6, 0, 3, 7, 8, 2, 6, 5, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 0, 3, 0, 3, 3, 0, 3, 3, 3, 2, 4, 4, 5, 3, 1, 1, 1, 2], [68, 86, 78, 15, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 8, 5, 3, 43, 43, 27, 16, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 56, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.add(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.negative(tf.math.add(tf.math.add(tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.multiply(tf.math.add(beta, tf.math.square(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.sqrt(tf.math.add(beta, grad)), tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(grad, tf.math.add(tf.math.add(beta, tf.math.sqrt(grad)), tf.math.add(beta, tf.math.add(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))))))))), tf.math.add(beta, grad)))))))), tf.math.add(beta, grad)), beta), tf.math.add(beta, grad))))), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.302678387887159, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 8, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 2, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [6, 2, 1, 9, 2, 9, 5, 3, 2, 3, 3, 2, 3, 1, 4, 6, 0, 3, 7, 8, 1, 6, 1, 8, 3, 8, 9, 6, 0, 0, 3, 0, 2, 9], [2, 3, 1, 3, 0, 0, 3, 1, 3, 3, 3, 2, 4, 4, 5, 3, 3, 1, 1, 2], [68, 86, 89, 38, 8, 14], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [47], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.06285714358091354, "mapping_values": [1, 4, 4, 2, 2, 0, 10, 10, 7, 3, 2, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.subtract(beta, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.square(alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.302652657354796, 2.3005054389103106, 2.300451386354351, 2.301067044155205, 2.30012177517228, 2.3003548405599035, 2.3005892656041866, 2.298776968610978, 2.299623993645727, 2.2991715561145365, 2.299910448640172, 2.298603878832449, 2.2999053555331006, 2.3002730617591216], "accuracy": [0.08994849026203156, 0.09840179979801178, 0.10051512718200684, 0.09668471664190292, 0.09417514503002167, 0.09430722147226334, 0.09998679161071777, 0.10976093262434006, 0.10368511080741882, 0.10421344637870789, 0.09747721254825592, 0.109232597053051, 0.10289261490106583, 0.09509972482919693], "val_loss": [1.9701696804591589, 1.9696352141244071, 1.9693384851728166, 1.969176973615374, 1.9692366463797433, 1.9692064693995885, 1.9691993849618095, 1.969198431287493, 1.969215256827218, 1.9692539487566267, 1.9693563325064523, 1.9695852824619837, 1.9698333740234375, 1.9700610297066825], "val_accuracy": [0.04899999871850014, 0.05533333495259285, 0.060333333909511566, 0.06499999761581421, 0.07000000029802322, 0.07733333110809326, 0.0833333358168602, 0.08633333444595337, 0.09133332967758179, 0.08966666460037231, 0.08533333241939545, 0.08399999886751175, 0.0806666687130928, 0.07866666465997696]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 2, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [3, 1, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [6, 2, 1, 9, 2, 9, 5, 3, 2, 3, 3, 4, 3, 1, 0, 6, 0, 3, 7, 8, 1, 6, 1, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [2, 3, 0, 1, 1, 3, 3, 0, 2, 2, 3, 3, 3, 4, 3, 2, 3, 1, 1, 2, 4], [61, 72, 89, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 3, 3, 1, 2, 0, 7, 7, 3, 4, 1, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(grad, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), alpha))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [2.3031097854117455, 2.3018393240364206, 2.302374798403503, 2.303610857120988, 2.3026395997256652, 2.3028979587391176], "accuracy": [0.08809932321310043, 0.09417514503002167, 0.0944393053650856, 0.09047681838274002, 0.0878351628780365, 0.08730682730674744], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 4, 8, 3, 6, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [1, 0, 2, 0, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 5, 5, 3, 0, 6, 2, 6, 8, 3, 2, 8, 2, 1, 3, 1, 6, 2, 7, 8, 9, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 1, 3, 1, 0, 3, 0, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [68, 86, 89, 38, 8], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [65, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0, 0, 3, 2, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [2.3031097854117455, 2.3018393240364206, 2.302374798403503, 2.303610857120988, 2.3026395997256652, 2.3028979587391176], "accuracy": [0.08809932321310043, 0.09417514503002167, 0.0944393053650856, 0.09047681838274002, 0.0878351628780365, 0.08730682730674744], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 2, 3, 0, 2, 6, 5, 3, 4, 3, 3, 0, 8, 1, 0, 6, 0, 3, 7, 8, 2, 6, 2, 8, 2, 2, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 1, 3, 1, 0, 3, 0, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [54, 86, 9, 38, 8], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1], [6, 3, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [29, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 4, 4, 2, 2, 1, 29, 29, 17, 12, 3, 1, 1, 0, 1, 0, 11, 7, 4, 2], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(grad, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.pow(tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), grad)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha)))), tf.math.sqrt(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))))))))), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.negative(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, grad)), grad)))), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(tf.math.subtract(alpha, tf.math.subtract(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))))), beta), sigma)", "other_info": {"loss": [2.3031097854117455, 2.3018393240364206, 2.302374798403503, 2.303610857120988, 2.3026395997256652, 2.3028979587391176], "accuracy": [0.08809932321310043, 0.09417514503002167, 0.0944393053650856, 0.09047681838274002, 0.0878351628780365, 0.08730682730674744], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 8, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [1, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [73, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 5, 2, 0, 2, 6, 4, 9, 8, 8, 6, 4, 8, 1, 0, 6, 6, 3, 7, 8, 2, 6, 3, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 1, 3, 1, 0, 3, 0, 0, 3, 3, 2, 4, 4, 3, 1, 3, 1, 1, 2], [68, 34, 89, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 3, 3, 1, 2, 1, 14, 14, 9, 5, 1, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.square(tf.math.add(beta, grad)), tf.math.add(tf.math.negative(grad), tf.math.add(alpha, tf.math.add(beta, tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), grad), tf.math.add(beta, tf.math.sqrt(alpha)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [2.3031097854117455, 2.3018393240364206, 2.302374798403503, 2.303610857120988, 2.3026395997256652, 2.3028979587391176], "accuracy": [0.08809932321310043, 0.09417514503002167, 0.0944393053650856, 0.09047681838274002, 0.0878351628780365, 0.08730682730674744], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 4, 8, 3, 6, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [1, 0, 2, 0, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [73, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 5, 3, 4, 6, 6, 2, 2, 8, 3, 3, 4, 0, 2, 0, 1, 1, 2, 6, 8, 2, 6, 2, 8, 4, 8, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 0, 1, 1, 1, 3, 0, 0, 2, 3, 3, 3, 4, 3, 2, 3, 1, 1, 2, 4], [68, 86, 89, 38, 8], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [46], [0, 0, 1, 1, 1, 0, 1, 0, 1, 0], [6, 4, 8, 1, 4, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [65, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 13, 13, 7, 6, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 5, 2, 3, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.pow(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.pow(alpha, tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.3031097854117455, 2.3018393240364206, 2.302374798403503, 2.303610857120988, 2.3026395997256652, 2.3028979587391176], "accuracy": [0.08809932321310043, 0.09417514503002167, 0.0944393053650856, 0.09047681838274002, 0.0878351628780365, 0.08730682730674744], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 3, 8, 8, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [0, 3, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 4, 3, 4, 8, 6, 2, 2, 8, 3, 3, 4, 6, 2, 0, 1, 1, 2, 6, 8, 2, 6, 2, 8, 4, 8, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 3, 3, 1, 0, 3, 0, 3, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [54, 86, 9, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.009714285843074322, "mapping_values": [1, 7, 7, 5, 2, 2, 30, 30, 16, 14, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.sqrt(tf.math.sqrt(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.pow(tf.math.multiply(tf.math.add(beta, grad), grad), grad), tf.math.pow(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.math.pow(alpha, tf.math.divide_no_nan(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)))), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.negative(tf.math.add(beta, grad)), grad))))), tf.math.subtract(tf.math.add(beta, grad), beta)), grad), tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3085018817884984, 2.3199222263265136, 2.334889752060872, 2.3525025976206475, 2.3710340740910265, 2.3952265652399714], "accuracy": [0.07687227427959442, 0.05943732708692551, 0.04411570355296135, 0.027737418189644814, 0.02417117916047573, 0.016774535179138184], "val_loss": [1.9829247338431222, 1.9953055381774902, 2.009283883231027, 2.0256271362304688, 2.0449509620666504, 2.0686069216047014], "val_accuracy": [0.011666666716337204, 0.007000000216066837, 0.004333333112299442, 0.003666666569188237, 0.0033333334140479565, 0.003666666569188237]}}]