[{"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 2, 1, 2, 6, 5, 4, 2, 5, 5, 5, 7, 8, 4, 0, 2, 3, 6, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 0, 0, 0, 2, 1, 2, 1, 2, 2, 1, 0, 2, 1, 2, 1, 2, 1], [70, 83, 42, 75, 51, 83, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7768571376800537, "mapping_values": [1, 38, 38, 23, 15, 6, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(tf.math.pow(tf.math.add(tf.math.add(alpha, grad), tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.square(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.pow(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad))))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.multiply(tf.math.divide_no_nan(grad, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), grad))))))))), grad))), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.multiply(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.283199100005644, 2.2327151128786302, 2.1523320006656608, 2.0177980601244347, 1.8225404740387596, 1.5976202370326564, 1.4135194411131022, 1.2809069882357487, 1.1993952901875733, 1.1190727245317962, 1.058314055751548, 1.017436027833893, 0.9706831389194025, 0.9411102432018069, 0.920014747468283, 0.9045188278963601, 0.8665720459539751, 0.8510640925577587, 0.8419990896422865, 0.8323516709268243, 0.820012073979134, 0.810391137494765, 0.8040870290863169, 0.7879643311290819, 0.7786073945438101, 0.7750897896823599, 0.7580488434935038, 0.7554568374445095, 0.7506836704086114, 0.7392972452277442, 0.7304437690407231, 0.7277815708505038, 0.7231621538029214, 0.7126455690016473, 0.7167594184445321, 0.7106001973309616, 0.7031973409000846, 0.697194517438186, 0.6918796175947405, 0.6883892790044004, 0.6852971942921388, 0.6774516215555546, 0.6724087397624883, 0.6684207581903767, 0.67303545087509, 0.6668965108264565], "accuracy": [0.13934750854969025, 0.2595430016517639, 0.3477744162082672, 0.4076079726219177, 0.4445911943912506, 0.49385812878608704, 0.5285959839820862, 0.5635979175567627, 0.5801082849502563, 0.6149781942367554, 0.6218464970588684, 0.6367719173431396, 0.6573768258094788, 0.6695284843444824, 0.6749438643455505, 0.6770572066307068, 0.689869225025177, 0.6952846646308899, 0.698190450668335, 0.698718786239624, 0.7025492191314697, 0.7104741930961609, 0.7043983340263367, 0.7125874757766724, 0.7116629481315613, 0.7176066637039185, 0.7273808121681213, 0.7253995537757874, 0.7255316376686096, 0.7264562249183655, 0.735569953918457, 0.7351737022399902, 0.733588695526123, 0.7375511527061462, 0.7363624572753906, 0.7371549606323242, 0.7415136694908142, 0.7403249144554138, 0.7453441023826599, 0.7478536367416382, 0.7473253011703491, 0.7499669790267944, 0.7537974119186401, 0.7532690763473511, 0.7557786107063293, 0.7524765729904175], "val_loss": [1.926612309047154, 1.8675109999520438, 1.7633963993617467, 1.595414672579084, 1.3736010960170202, 1.1547324316842216, 0.9958154473985944, 0.8905957766941616, 0.8191439424242292, 0.766160249710083, 0.7280349901744297, 0.6975053208214896, 0.673654385975429, 0.6591907909938267, 0.6411805323192051, 0.6272284303392682, 0.6123360395431519, 0.6060601302555629, 0.5948102985109601, 0.5841519321714129, 0.5774448428835187, 0.5717829295567104, 0.5661411966596331, 0.560255936213902, 0.5547538314546857, 0.5517623765127999, 0.5428951127188546, 0.5389831747327533, 0.5370997531073434, 0.5305733510426113, 0.5263829060963222, 0.526337810925075, 0.5200210809707642, 0.5230921166283744, 0.5111539023263114, 0.51068001134055, 0.5063236951828003, 0.5032674585069928, 0.5012501648494175, 0.5004664829799107, 0.4952113628387451, 0.49317409311022076, 0.4897890261241368, 0.4930764947618757, 0.4865336758749826, 0.4831491027559553], "val_accuracy": [0.3476666808128357, 0.4606666564941406, 0.5086666941642761, 0.5600000023841858, 0.597000002861023, 0.6150000095367432, 0.6726666688919067, 0.6883333325386047, 0.6983333230018616, 0.7036666870117188, 0.7143333554267883, 0.718999981880188, 0.7250000238418579, 0.7226666808128357, 0.7326666712760925, 0.7366666793823242, 0.7459999918937683, 0.7459999918937683, 0.7543333172798157, 0.75, 0.7576666474342346, 0.7526666522026062, 0.7580000162124634, 0.7583333253860474, 0.7630000114440918, 0.7590000033378601, 0.7689999938011169, 0.7630000114440918, 0.7643333077430725, 0.7693333625793457, 0.7670000195503235, 0.7616666555404663, 0.7649999856948853, 0.7696666717529297, 0.777999997138977, 0.7696666717529297, 0.7829999923706055, 0.7753333449363708, 0.7760000228881836, 0.7796666622161865, 0.7860000133514404, 0.781000018119812, 0.781333327293396, 0.7796666622161865, 0.7823333144187927, 0.7853333353996277]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 6, 1, 2, 6, 5, 8, 2, 5, 3, 5, 7, 8, 2, 6, 2, 3, 9, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 0, 0, 0, 1, 1, 2, 1, 2, 2, 1, 0, 2, 1, 2, 1, 2, 1], [70, 83, 18, 92, 41, 36, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7765714526176453, "mapping_values": [1, 25, 25, 15, 10, 4, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(grad), tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.square(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), grad))))), tf.math.add(alpha, tf.math.multiply(tf.math.square(tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, alpha)), alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.283199131496673, 2.232714820515919, 2.152330520870726, 2.0177982648633583, 1.822548193151232, 1.5976543203399733, 1.413519707952335, 1.2809512113079402, 1.1994447158139065, 1.1191109016886036, 1.0583510609854638, 1.0174311007317802, 0.97064724819236, 0.9410506058693436, 0.9199496061967868, 0.9045149469340971, 0.866538601457923, 0.8510271724755848, 0.8419913345591865, 0.832396104366961, 0.8198148019482919, 0.8104720799804221, 0.804079843904238, 0.7881284878868327, 0.7786857902318762, 0.7751393642297684, 0.7582122287446671, 0.7553821105478997, 0.7507677423624929, 0.739393995454078, 0.7302807840641542, 0.7278180950983184, 0.7230780246849499, 0.7126459861475605, 0.7167055008748676, 0.7105438199576732, 0.703058024722477, 0.6972109622423753, 0.6918479141038344, 0.68831972367476, 0.6852236944041027, 0.6775004197310116, 0.6725946364149583, 0.6681988905717228, 0.673030367553856, 0.6669874955099083], "accuracy": [0.13934750854969025, 0.2595430016517639, 0.3477744162082672, 0.4073438048362732, 0.4447232782840729, 0.4939902126789093, 0.5288601517677307, 0.5634658336639404, 0.5802403688430786, 0.6147140264511108, 0.6217144131660461, 0.6369040012359619, 0.6568484902381897, 0.6690001487731934, 0.6742834448814392, 0.677189290523529, 0.6902654767036438, 0.6946242451667786, 0.6973979473114014, 0.6993792057037354, 0.7024171352386475, 0.7107383608818054, 0.7055870890617371, 0.7131158113479614, 0.7112666964530945, 0.7173424959182739, 0.7268524765968323, 0.7255316376686096, 0.7260599732398987, 0.7264562249183655, 0.7347774505615234, 0.735569953918457, 0.7337207794189453, 0.7374191284179688, 0.7359662055969238, 0.7359662055969238, 0.7411174178123474, 0.7401928305625916, 0.7458723783493042, 0.7483819723129272, 0.7464007139205933, 0.7497028112411499, 0.7543256878852844, 0.7530049085617065, 0.7549861073493958, 0.7523444890975952], "val_loss": [1.92661224092756, 1.8675109318324499, 1.7633952413286482, 1.595421893256051, 1.3736390386308943, 1.1547657081059046, 0.9957972254071917, 0.8906424386160714, 0.8191511971609933, 0.7662148475646973, 0.7279704809188843, 0.6975305421011788, 0.6735130207879203, 0.6590425968170166, 0.6413701602390834, 0.6271672759737287, 0.6122384582247052, 0.6060853685651507, 0.5947713681629726, 0.5842342887605939, 0.5775717496871948, 0.5720041990280151, 0.5665069648197719, 0.5604702915464129, 0.5547384875161308, 0.5518557344164167, 0.5431113924298968, 0.5391550234385899, 0.5372980662754604, 0.5306290217808315, 0.5264711720602853, 0.5264726025717599, 0.5202370711735317, 0.5229146310261318, 0.5111993380955288, 0.510666012763977, 0.5064042125429425, 0.5032807077680316, 0.5015168019703456, 0.5005608115877423, 0.495172347341265, 0.49315857887268066, 0.48981266362326487, 0.49335639817374094, 0.48663181918007986, 0.48314339773995535], "val_accuracy": [0.3476666808128357, 0.4606666564941406, 0.5086666941642761, 0.5603333115577698, 0.597000002861023, 0.6153333187103271, 0.6723333597183228, 0.6883333325386047, 0.6986666917800903, 0.7036666870117188, 0.7139999866485596, 0.718999981880188, 0.7246666550636292, 0.7233333587646484, 0.7319999933242798, 0.737333357334137, 0.7463333606719971, 0.7459999918937683, 0.7540000081062317, 0.7506666779518127, 0.7576666474342346, 0.753333330154419, 0.7556666731834412, 0.7593333125114441, 0.762333333492279, 0.7596666812896729, 0.768666684627533, 0.7609999775886536, 0.7643333077430725, 0.7693333625793457, 0.7663333415985107, 0.762333333492279, 0.762333333492279, 0.7699999809265137, 0.7773333191871643, 0.7693333625793457, 0.784333348274231, 0.7760000228881836, 0.7760000228881836, 0.7793333530426025, 0.7866666913032532, 0.7803333401679993, 0.781333327293396, 0.7793333530426025, 0.7826666831970215, 0.784333348274231]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1], [5, 2, 1, 1, 2, 9, 5, 3, 2, 9, 9, 5, 7, 8, 1, 1, 5, 3, 9, 5, 5, 2, 3, 5, 8, 4, 6, 4, 2, 4, 1, 2], [2, 0, 2, 0, 2, 0, 2, 1, 2, 1, 2, 1, 2, 0, 2, 0, 2, 1, 2, 1], [70, 6, 18, 3, 41, 36, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7628571391105652, "mapping_values": [1, 32, 32, 23, 9, 7, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)), tf.math.subtract(grad, tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32))))), tf.math.square(grad))))))))), tf.math.square(tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.multiply(tf.math.add(alpha, grad), alpha), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.283199131496673, 2.232715018405544, 2.1523307504403264, 2.017796544177799, 1.822544362802925, 1.5976488113151393, 1.4135241947468828, 1.280964758984716, 1.1994390411934974, 1.1191255109909424, 1.0583759485108584, 1.0174738426864138, 0.9706854078952647, 0.9411106386740195, 0.9199694198718743, 0.9044983654194788, 0.8666204187958515, 0.8510327820827649, 0.8420726277053222, 0.8324351109502306, 0.8199965330619444, 0.8104398525181605, 0.8042397996957638, 0.7879056311585821, 0.7788167415892112, 0.7751300648895977, 0.7582721680839694, 0.755613825568717, 0.7507782589726365, 0.7393903097440664, 0.7302456176780108, 0.7277400328530108], "accuracy": [0.13934750854969025, 0.2595430016517639, 0.34764233231544495, 0.4073438048362732, 0.4447232782840729, 0.49385812878608704, 0.5285959839820862, 0.5635979175567627, 0.5802403688430786, 0.6151102781295776, 0.6215823292732239, 0.6367719173431396, 0.6572447419166565, 0.6692643165588379, 0.6745476126670837, 0.6774534583091736, 0.6900013089179993, 0.6960771083831787, 0.6977941989898682, 0.6989829540252686, 0.7029454708099365, 0.7107383608818054, 0.7054550051689148, 0.7131158113479614, 0.7112666964530945, 0.7176066637039185, 0.7269845604896545, 0.7251353859901428, 0.7248712182044983, 0.7264562249183655, 0.735041618347168, 0.7363624572753906], "val_loss": [1.92661224092756, 1.867511408669608, 1.7633935383387975, 1.5954199518476213, 1.3736303193228585, 1.1547841344560896, 0.9957971232278007, 0.8906276907239642, 0.8191190958023071, 0.7661877529961723, 0.7280666487557548, 0.697594165802002, 0.6735122374125889, 0.6590755326407296, 0.6413422312055316, 0.6272147383008685, 0.612281220299857, 0.6062995535986764, 0.594848666872297, 0.5841905219214303, 0.5776103564671108, 0.5717534508023944, 0.5663001367024013, 0.5604735612869263, 0.5547778265816825, 0.5516922644206456, 0.5431407860347203, 0.5390082427433559, 0.5372686045510429, 0.5305400746209281, 0.526317868913923, 0.5263534103121076], "val_accuracy": [0.3476666808128357, 0.4606666564941406, 0.5086666941642761, 0.5600000023841858, 0.597000002861023, 0.6153333187103271, 0.6723333597183228, 0.6883333325386047, 0.6983333230018616, 0.70333331823349, 0.7139999866485596, 0.718999981880188, 0.7246666550636292, 0.7233333587646484, 0.7326666712760925, 0.7369999885559082, 0.7463333606719971, 0.7463333606719971, 0.7543333172798157, 0.750333309173584, 0.7570000290870667, 0.753000020980835, 0.7573333382606506, 0.7590000033378601, 0.7630000114440918, 0.7593333125114441, 0.7703333497047424, 0.7616666555404663, 0.7643333077430725, 0.768666684627533, 0.765666663646698, 0.7620000243186951]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 9, 6, 1, 2, 9, 5, 5, 2, 5, 2, 5, 2, 3, 2, 1, 2, 3, 9, 2, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 2, 2, 0, 0, 0, 2, 0, 2, 2, 2, 2, 1, 2, 2, 0, 2, 1, 1, 1], [70, 32, 28, 91, 51, 83, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7622857093811035, "mapping_values": [1, 2, 2, 2, 0, 1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.283199100005644, 2.2327151083124313, 2.152332073063536, 2.0178084512192105, 1.8225641712583744, 1.597673520168309, 1.4135577532562047, 1.2809683316734253, 1.1994691266674706, 1.1191400322286194, 1.0583874931141464, 1.017496710920441, 0.9706391802222706, 0.9410592167526425, 0.9200420947028284, 0.9047749841674569, 0.8666563702690886, 0.8510878478940672, 0.8420501617534427, 0.8323880419865292, 0.8200045474736666, 0.8104858451578612, 0.8041537709838253, 0.7880992913652389, 0.7788857694834829, 0.7751330970977796, 0.7583446491191321, 0.7556370942111753, 0.7509915755252009, 0.7394128697360307, 0.7304638392653495, 0.727959408169299], "accuracy": [0.13934750854969025, 0.2595430016517639, 0.3477744162082672, 0.4073438048362732, 0.4447232782840729, 0.49412229657173157, 0.5285959839820862, 0.5634658336639404, 0.5797120332717896, 0.6151102781295776, 0.6215823292732239, 0.6371681690216064, 0.6573768258094788, 0.6686038970947266, 0.6748117804527283, 0.6767930388450623, 0.6902654767036438, 0.6951525807380676, 0.6979262828826904, 0.6984546184539795, 0.7028133869171143, 0.7104741930961609, 0.7047945857048035, 0.7136441469192505, 0.7117950320243835, 0.7168141603469849, 0.7269845604896545, 0.7252674698829651, 0.7257958054542542, 0.7268524765968323, 0.7354378700256348, 0.735569953918457], "val_loss": [1.92661224092756, 1.867511544908796, 1.7634060723440987, 1.5954270022256034, 1.3736530372074671, 1.1547985076904297, 0.9958422183990479, 0.8906252724783761, 0.8191763843808856, 0.7662637744631086, 0.7280051537922451, 0.6975358724594116, 0.6734237841197422, 0.6589621475764683, 0.6413405793053764, 0.6273264544350761, 0.6123523371560233, 0.6061634165900094, 0.5949141127722604, 0.5841255187988281, 0.5774849312646049, 0.5718295063291278, 0.5663537297930036, 0.5606622014726911, 0.5550530297415597, 0.5518679618835449, 0.543339695249285, 0.5392597573144096, 0.5371897050312587, 0.5306167602539062, 0.5264572926930019, 0.5265352725982666], "val_accuracy": [0.3476666808128357, 0.4606666564941406, 0.5090000033378601, 0.5596666932106018, 0.597000002861023, 0.6150000095367432, 0.6723333597183228, 0.6883333325386047, 0.6980000138282776, 0.7039999961853027, 0.7133333086967468, 0.718999981880188, 0.7250000238418579, 0.7233333587646484, 0.7333333492279053, 0.7383333444595337, 0.7456666827201843, 0.746666669845581, 0.7546666860580444, 0.750333309173584, 0.7573333382606506, 0.7526666522026062, 0.7570000290870667, 0.7586666941642761, 0.762666642665863, 0.7593333125114441, 0.7706666588783264, 0.762333333492279, 0.7646666765213013, 0.7680000066757202, 0.765666663646698, 0.762666642665863]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 0, 1, 2, 6, 5, 4, 2, 1, 5, 5, 7, 8, 2, 1, 2, 3, 6, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 0, 1, 0, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 1], [70, 83, 42, 75, 51, 83, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7622857093811035, "mapping_values": [1, 33, 33, 20, 13, 4, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.negative(grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(tf.math.pow(tf.math.add(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.add(tf.math.sqrt(alpha), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))), grad)))), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(grad, alpha)), tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.add(alpha, grad))), tf.math.add(alpha, alpha))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.283199100005644, 2.232715031915195, 2.152331249541642, 2.0178014046921313, 1.8225560915578767, 1.59766064457307, 1.4135531959217522, 1.2809755258147018, 1.1994583484377324, 1.1191191728073198, 1.0583285181876014, 1.017481050297978, 0.9706840851618361, 0.9410864766546921, 0.9200323235798096, 0.9046444721965742, 0.866693948631856, 0.8510915764869873, 0.8420941495797764, 0.8324489663652126, 0.820031812768555, 0.810489545125436, 0.8041873801071032, 0.7878824066980372, 0.7785725759603344, 0.7750332773227765, 0.7581478350072127, 0.7554817117987811, 0.7508445759302023, 0.7393144493672386, 0.7303378237961242, 0.7278022836417003], "accuracy": [0.13934750854969025, 0.2595430016517639, 0.34764233231544495, 0.40747588872909546, 0.4445911943912506, 0.4939902126789093, 0.5288601517677307, 0.5634658336639404, 0.5803724527359009, 0.6155065298080444, 0.6218464970588684, 0.6370360851287842, 0.6567164063453674, 0.6690001487731934, 0.6748117804527283, 0.6769251227378845, 0.6894729733467102, 0.6950204968452454, 0.6984546184539795, 0.6984546184539795, 0.7025492191314697, 0.7107383608818054, 0.7049266695976257, 0.7125874757766724, 0.711530864238739, 0.7174745798110962, 0.7272487282752991, 0.7252674698829651, 0.7251353859901428, 0.7260599732398987, 0.7351737022399902, 0.7354378700256348], "val_loss": [1.926612377166748, 1.86751127243042, 1.763399532863072, 1.5954265594482422, 1.3736508914402552, 1.1548171724591936, 0.9958025727953229, 0.8906287806374686, 0.8191724504743304, 0.7662470851625715, 0.7280217238834926, 0.6975101913724627, 0.6735505206244332, 0.6591636964253017, 0.641251768384661, 0.6272280727113996, 0.6123798404421125, 0.6060656309127808, 0.5949000290461949, 0.5841708183288574, 0.5775302307946342, 0.5717614889144897, 0.5663390670503888, 0.560436453138079, 0.554845792906625, 0.5516859122685024, 0.5431527750832694, 0.5391644069126674, 0.5374297073909214, 0.5307094029017857, 0.526332174028669, 0.5262370961053031], "val_accuracy": [0.3476666808128357, 0.4606666564941406, 0.5086666941642761, 0.5600000023841858, 0.597000002861023, 0.6153333187103271, 0.6726666688919067, 0.6883333325386047, 0.6983333230018616, 0.70333331823349, 0.7136666774749756, 0.718666672706604, 0.7246666550636292, 0.7229999899864197, 0.7326666712760925, 0.7369999885559082, 0.7456666827201843, 0.7459999918937683, 0.7543333172798157, 0.7506666779518127, 0.7576666474342346, 0.7523333430290222, 0.7570000290870667, 0.7590000033378601, 0.762333333492279, 0.7599999904632568, 0.7693333625793457, 0.7616666555404663, 0.7646666765213013, 0.7693333625793457, 0.7670000195503235, 0.7620000243186951]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 3, 1, 2, 6, 5, 4, 2, 5, 5, 5, 7, 8, 2, 1, 2, 3, 6, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 0, 0, 0, 2, 1, 2, 1, 2, 2, 1, 0, 2, 1, 2, 1, 2, 1], [70, 83, 42, 75, 51, 83, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7620000243186951, "mapping_values": [1, 33, 33, 19, 14, 5, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.multiply(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(tf.math.pow(tf.math.add(tf.math.add(alpha, grad), tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))))), alpha))), tf.math.add(grad, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.283199131496673, 2.232715490676503, 2.152339157600287, 2.017820559378077, 1.8225751837971125, 1.5976819715731652, 1.4135789354448038, 1.2809737945953932, 1.1994954872880834, 1.11913019902891, 1.0583854501415253, 1.0174790815969483, 0.9706510126378164, 0.9411291694282116, 0.9200477058451961, 0.9046405755281606, 0.8666773506080658, 0.8510678933832262, 0.8419934788227018, 0.8323263417476235, 0.8199539454054792, 0.8103738414801942, 0.8042194365258419, 0.7879612439218183, 0.7787395044324766, 0.7750804233056616, 0.7583850978261932, 0.7555283869986584, 0.7506758719938558, 0.7394178304233257, 0.7303152452795623, 0.7278208564836525], "accuracy": [0.13934750854969025, 0.2595430016517639, 0.34764233231544495, 0.4073438048362732, 0.4449874460697174, 0.49412229657173157, 0.5287280678749084, 0.5634658336639404, 0.5801082849502563, 0.6153744459152222, 0.6215823292732239, 0.6367719173431396, 0.657508909702301, 0.6688680648803711, 0.6748117804527283, 0.6774534583091736, 0.689869225025177, 0.6951525807380676, 0.6972658634185791, 0.698718786239624, 0.7022850513458252, 0.7104741930961609, 0.7047945857048035, 0.7131158113479614, 0.7121912837028503, 0.7173424959182739, 0.7269845604896545, 0.7257958054542542, 0.7256637215614319, 0.7271166443824768, 0.7354378700256348, 0.7358341217041016], "val_loss": [1.926612377166748, 1.8675148827689034, 1.763418401990618, 1.595430953162057, 1.373650414603097, 1.1548194204057967, 0.9957810470036098, 0.8906898157937186, 0.8191666432789394, 0.7662557874407087, 0.7281078611101423, 0.697566202708653, 0.6735700709479195, 0.6590804372514997, 0.6413338014057705, 0.6273747171674456, 0.612323454448155, 0.6059951441628593, 0.5948487520217896, 0.5841811214174543, 0.5775267056056431, 0.5717411381857735, 0.5662048714501517, 0.560496483530317, 0.5549441065107074, 0.5517715385981968, 0.5432754073824201, 0.5390477180480957, 0.5372323649270194, 0.530467118535723, 0.5263452019010272, 0.5263505152293614], "val_accuracy": [0.3476666808128357, 0.4606666564941406, 0.5086666941642761, 0.5596666932106018, 0.597000002861023, 0.6153333187103271, 0.6726666688919067, 0.6883333325386047, 0.6986666917800903, 0.70333331823349, 0.7136666774749756, 0.718666672706604, 0.7250000238418579, 0.7229999899864197, 0.7326666712760925, 0.7366666793823242, 0.7459999918937683, 0.746999979019165, 0.7540000081062317, 0.7506666779518127, 0.7573333382606506, 0.7523333430290222, 0.7573333382606506, 0.7586666941642761, 0.7633333206176758, 0.7599999904632568, 0.7689999938011169, 0.7613333463668823, 0.7643333077430725, 0.7689999938011169, 0.7663333415985107, 0.7616666555404663]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1], [5, 2, 6, 1, 1, 6, 5, 6, 6, 2, 3, 0, 7, 0, 2, 1, 5, 3, 9, 1, 6, 2, 1, 5, 8, 4, 5, 4, 6, 4], [2, 0, 2, 0, 0, 0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1], [0, 83, 42, 15, 51, 83, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7617142796516418, "mapping_values": [1, 24, 24, 13, 11, 4, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, alpha)))), grad)))), alpha)), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.283199095533918, 2.232714703589729, 2.1523316723401944, 2.0178067987904558, 1.8225633232207141, 1.5976571247577982, 1.413579826026844, 1.2809530855122653, 1.1994402416787522, 1.119115386231543, 1.058362345795637, 1.0174722420446562, 0.970728246228192, 0.941200903204879, 0.9200863094535155, 0.9046530544151641, 0.8667308482999705, 0.8511847261944152, 0.8420647046726929, 0.8324021054706112, 0.819957431241931, 0.810405334736992, 0.8040473417693503, 0.7879785019109719, 0.778788919714007, 0.7750941991743048, 0.7582595427558092, 0.7555697204776649, 0.7506954713016375, 0.7392372475276927, 0.7301930288565613, 0.7278664955184633], "accuracy": [0.13934750854969025, 0.2595430016517639, 0.34764233231544495, 0.4076079726219177, 0.4447232782840729, 0.49372607469558716, 0.5284639000892639, 0.5635979175567627, 0.5802403688430786, 0.6148461103439331, 0.6215823292732239, 0.6369040012359619, 0.6571126580238342, 0.6688680648803711, 0.6742834448814392, 0.6770572066307068, 0.689869225025177, 0.6951525807380676, 0.6971337795257568, 0.6980583667755127, 0.702681303024292, 0.7108704447746277, 0.705058753490448, 0.7129837274551392, 0.7112666964530945, 0.7170783281326294, 0.7276449799537659, 0.7256637215614319, 0.7250033020973206, 0.7260599732398987, 0.7349095344543457, 0.735569953918457], "val_loss": [1.926612309047154, 1.8675085476466589, 1.7634053911481584, 1.595430850982666, 1.3736278670174735, 1.1548022542681013, 0.9958243370056152, 0.8906111376626151, 0.8191394124712262, 0.7662242650985718, 0.7280588150024414, 0.6975951024464199, 0.6735117605754307, 0.6591514008385795, 0.6413041864122663, 0.6273124047688076, 0.6123432261603219, 0.6063717603683472, 0.5947943074362618, 0.584164023399353, 0.5774825811386108, 0.5718075547899518, 0.5662381649017334, 0.5605520009994507, 0.5550579002925328, 0.551902038710458, 0.5431620734078544, 0.5390007836478097, 0.5371860776628766, 0.5307209662028721, 0.5262310675212315, 0.5263281209128243], "val_accuracy": [0.3476666808128357, 0.4606666564941406, 0.5086666941642761, 0.559333324432373, 0.597000002861023, 0.6153333187103271, 0.6726666688919067, 0.6883333325386047, 0.6983333230018616, 0.7036666870117188, 0.7139999866485596, 0.718999981880188, 0.7250000238418579, 0.7229999899864197, 0.7326666712760925, 0.7369999885559082, 0.7459999918937683, 0.7453333139419556, 0.7543333172798157, 0.750333309173584, 0.7576666474342346, 0.753000020980835, 0.7570000290870667, 0.7590000033378601, 0.7636666893959045, 0.7593333125114441, 0.7693333625793457, 0.762333333492279, 0.7646666765213013, 0.7693333625793457, 0.7663333415985107, 0.7616666555404663]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [9, 2, 1, 1, 2, 6, 5, 0, 2, 5, 9, 5, 7, 8, 2, 1, 2, 3, 6, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 0, 2, 0, 2, 1, 2, 1, 2, 2, 1, 0, 2, 1, 2, 1, 2, 1], [70, 83, 19, 75, 51, 83, 99, 44], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.6380000114440918, "mapping_values": [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.2492063068175248, 1.7390180075441006, 1.2501999785666766, 0.9591282268462321, 0.8560210878523727, 0.8008454532167301, 0.7726548500206524, 0.7175525647301826, 0.6850926328360397, 0.65015940928519, 0.6178914673056632, 0.5986166920848983, 0.5731150344724684, 0.574058987272099, 0.548356470281044, 0.5474482879993261, 0.5116848091502247, 0.5289180121244205, 0.5166999387026242, 0.5135757813065075, 0.4906345792710112, 0.46734694896231177, 0.47214554882619547, 0.4569220684420526, 0.443837121815934, 0.4385250865657332, 0.42884529186057185, 0.4420108632514852, 0.42320657816813084, 0.418481073095625, 0.4056146544842373, 0.40697388727478206, 0.4045721713963784, 0.4150573652315889, 0.40264182696331763], "accuracy": [0.21318188309669495, 0.44525161385536194, 0.5761458277702332, 0.6494518518447876, 0.6870955228805542, 0.7020208835601807, 0.7079645991325378, 0.7293620109558105, 0.741909921169281, 0.7520803213119507, 0.763967752456665, 0.7718927264213562, 0.7837802171707153, 0.772288978099823, 0.7917051911354065, 0.793422281742096, 0.8029322624206543, 0.7951393723487854, 0.8064984679222107, 0.8034605979919434, 0.8075551390647888, 0.8231409192085266, 0.8212917447090149, 0.8253863453865051, 0.8301413059234619, 0.8335754871368408, 0.8341038227081299, 0.835160493850708, 0.8329150676727295, 0.8404437899589539, 0.8416325449943542, 0.848368763923645, 0.8417646288871765, 0.8411042094230652, 0.8416325449943542], "val_loss": [1.7618951797485352, 0.8639064686638969, 0.6775296585900443, 0.6338308709008353, 0.6140956708363124, 0.5759214673723493, 0.539159996168954, 0.49558028153010775, 0.4726701634270804, 0.470569235937936, 0.457773106438773, 0.45394839559282574, 0.45429023674556185, 0.4492486034120832, 0.4308912328311375, 0.42634809017181396, 0.42752776827131, 0.4076189569064549, 0.41670872483934673, 0.4095487764903477, 0.3972663879394531, 0.3796749711036682, 0.37958256687436787, 0.37447893619537354, 0.3706439563206264, 0.37478658982685636, 0.3690113936151777, 0.3797125390597752, 0.37489977053233553, 0.3818020054272243, 0.3852490016392299, 0.3867658887590681, 0.3801351615360805, 0.39116889238357544, 0.4001252310616629], "val_accuracy": [0.4580000042915344, 0.6726666688919067, 0.7076666951179504, 0.7250000238418579, 0.734666645526886, 0.7526666522026062, 0.7570000290870667, 0.7753333449363708, 0.7860000133514404, 0.7896666526794434, 0.793666660785675, 0.8046666383743286, 0.8069999814033508, 0.8006666898727417, 0.8100000023841858, 0.8163333535194397, 0.8149999976158142, 0.8186666369438171, 0.8263333439826965, 0.828000009059906, 0.8326666951179504, 0.8399999737739563, 0.8429999947547913, 0.843666672706604, 0.8483333587646484, 0.8483333587646484, 0.8536666631698608, 0.8510000109672546, 0.8519999980926514, 0.8573333621025085, 0.8566666841506958, 0.8519999980926514, 0.8523333072662354, 0.8553333282470703, 0.8543333411216736]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 6, 1, 2, 6, 5, 8, 2, 8, 3, 9, 7, 8, 2, 1, 2, 3, 9, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 2, 2, 0, 0, 0, 2, 0, 2, 2, 2, 2, 1, 2, 2, 0, 2, 1, 1, 1], [70, 32, 28, 91, 51, 83, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 21, 21, 13, 8, 5, 15, 15, 8, 7, 1, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.sqrt(tf.math.add(grad, tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.add(alpha, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32))))))), tf.math.multiply(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(tf.math.add(beta, tf.math.subtract(grad, beta)), tf.math.pow(grad, tf.math.negative(grad)))), tf.math.pow(tf.math.pow(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10077928751707077, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1], [5, 0, 0, 4, 2, 6, 3, 3, 2, 2, 3, 4, 7, 0, 2, 1, 5, 3, 9, 6, 6, 2, 3, 5, 8, 4, 5, 4, 6, 4], [2, 0, 2, 0, 1, 2, 1, 3, 2, 0, 2, 2, 2, 0, 2, 1, 2, 2, 0, 0, 0, 0, 1], [70, 83, 42, 15, 51, 83, 99, 44], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 8, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [14], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [1, 0, 1, 5, 3, 4], [31], [0, 0, 0, 0, 1, 0, 1, 0, 1], [5, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 25, 25, 14, 11, 3, 10, 10, 5, 5, 1, 3, 3, 1, 2, 1, 9, 6, 3, 2], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.multiply(tf.math.add(alpha, grad), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.negative(grad), alpha), grad))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))))), grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(tf.math.subtract(grad, beta), tf.math.add(beta, tf.math.pow(grad, grad)))), tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, alpha), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.square(tf.math.square(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.square(beta))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10077928751707077, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 3, 1, 2, 6, 5, 4, 2, 5, 5, 5, 7, 8, 4, 1, 2, 3, 2, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [1, 0, 2, 0, 0, 0, 2, 1, 2, 1, 2, 2, 2, 1, 2, 1, 2, 1, 2, 1], [70, 83, 42, 75, 51, 83, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [0, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 29, 29, 17, 12, 4, 1, 1, 0, 1, 1, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.multiply(alpha, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))), tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.add(alpha, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(tf.math.sqrt(tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))))), alpha)))))), tf.math.add(grad, grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10077928751707077, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 9, 6, 1, 2, 9, 5, 5, 2, 5, 2, 5, 2, 3, 2, 1, 2, 3, 9, 2, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 0, 0, 0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1], [70, 83, 42, 15, 51, 83, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1, 0, 1], [0, 1, 0, 0, 1], [3, 4, 1], [2, 4, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 2, 0, 1, 1, 1, 0, 1, 0, 7, 5, 3, 2, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, grad))), sigma)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1290450394153595, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 6, 1, 2, 6, 5, 8, 0, 5, 3, 9, 7, 8, 2, 1, 2, 3, 9, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 2, 2, 0, 0, 1, 2, 0, 2, 2, 2, 2, 1, 2, 2, 0, 2, 1, 1, 1], [70, 32, 84, 91, 51, 83, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 2, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3028231361806353, 2.304878590176559, 2.3074232350723416, 2.307487115222607, 2.3116420825962787, 2.3164582384764763, 2.318981573109645, 2.3252518366608466, 2.337327843344742, 2.3506125685813135, 2.388103306112414, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09034473448991776, 0.08796724677085876, 0.07819310575723648, 0.08440100401639938, 0.08070268481969833, 0.0730418711900711, 0.07515519857406616, 0.07290978729724884, 0.07290978729724884, 0.07211729139089584, 0.0820235088467598, 0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9721411977495467, 1.9736659186226981, 1.9753191130501884, 1.977250439780099, 1.9795759746006556, 1.9825546400887626, 1.985823086329869, 1.990257944379534, 1.997870990208217, 2.0138773918151855, 2.14113255909511, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.03333333507180214, 0.028333334252238274, 0.02266666665673256, 0.020666666328907013, 0.027666667476296425, 0.035999998450279236, 0.05233333259820938, 0.070333331823349, 0.08766666799783707, 0.09933333098888397, 0.09966666996479034, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 1, 6, 1, 2, 6, 5, 5, 2, 5, 3, 0, 7, 8, 2, 1, 2, 3, 5, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 2, 2, 0, 0, 0, 2, 0, 2, 2, 2, 2, 1, 2, 2, 0, 2, 1, 1, 1], [0, 83, 42, 15, 51, 83, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [4, 4, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 32, 32, 20, 12, 5, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 0, 1, 0], "tree_depth": 50, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.subtract(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.square(grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(alpha, grad), tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))))))))), grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.square(tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, grad))), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3027415902245205, 2.304534425824908, 2.306762850531781, 2.306558350813844, 2.3102389906438714, 2.314575775723652, 2.316437154791815, 2.321789689807844, 2.331986588068831, 2.340069520049926, 2.3522350304729165, 2.45542281059116, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09021265059709549, 0.0882314071059227, 0.07924976944923401, 0.08506141602993011, 0.08360850811004639, 0.07357019931077957, 0.07674019038677216, 0.07555144280195236, 0.07357019931077957, 0.07211729139089584, 0.08109892904758453, 0.08730682730674744, 0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9719149725777763, 1.9731794084821428, 1.97452974319458, 1.9761432920183455, 1.9780878339494978, 1.9805847576686315, 1.9833010946001326, 1.9869070053100586, 1.9921753065926688, 2.0011816024780273, 2.021904332297189, 7.487021854945591, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.032999999821186066, 0.029666665941476822, 0.024000000208616257, 0.02266666665673256, 0.028999999165534973, 0.03700000047683716, 0.050999999046325684, 0.06566666811704636, 0.08033332973718643, 0.09333333373069763, 0.09966666996479034, 0.09966666996479034, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1], [5, 9, 6, 1, 2, 9, 5, 5, 2, 5, 2, 5, 2, 3, 2, 1, 2, 3, 9, 2, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 0, 0, 0, 2, 0, 1, 2, 2, 2, 2, 2, 0, 2, 1, 2, 3, 1, 1], [70, 83, 18, 88, 41, 58, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [7, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 15, 15, 8, 7, 1, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(tf.math.add(beta, tf.math.subtract(grad, beta)), tf.math.pow(grad, tf.math.negative(grad)))), tf.math.pow(tf.math.pow(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.323608473952987, 2.3984889006334416, 2.6345142036176488, 6911.376071589073, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.05692775174975395, 0.017699114978313446, 0.011359133757650852, 0.08070268481969833, 0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.0232815061296736, 2.1242776598249162, 2.807191780635289, 442680984956342.9, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.004000000189989805, 0.004666666500270367, 0.02133333310484886, 0.0989999994635582, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1], [5, 2, 6, 1, 2, 6, 5, 6, 2, 2, 3, 0, 7, 0, 2, 1, 5, 3, 9, 1, 6, 2, 1, 5, 8, 4, 5, 4, 6, 4, 9], [2, 0, 2, 0, 0, 0, 2, 1, 2, 1, 2, 2, 1, 0, 2, 1, 2, 1, 2, 1], [70, 83, 18, 19, 41, 57, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [2, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [53], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 51, 51, 31, 20, 7, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 64, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.add(tf.math.subtract(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.divide_no_nan(tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.add(alpha, alpha)), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha)))), tf.math.pow(tf.math.square(tf.math.add(alpha, grad)), tf.math.add(alpha, grad))))))))), tf.math.pow(alpha, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), grad))))))), alpha)))), grad), tf.math.add(alpha, alpha))))), grad), alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3022849876898595, 2.302850702860415, 2.3033959992478916, 2.301671246621965, 2.3029118709402976, 2.303632119958112], "accuracy": [0.09113723784685135, 0.08849557489156723, 0.08519349992275238, 0.09787346422672272, 0.09113723784685135, 0.0878351628780365], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [0, 9, 6, 1, 2, 9, 5, 5, 2, 5, 2, 5, 2, 3, 2, 1, 2, 3, 9, 2, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 0, 2, 0, 1, 2, 2, 2, 2, 2, 0, 2, 1, 2, 3, 1, 1], [70, 83, 18, 92, 44, 67, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [0, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 2, 2, 2, 0, 1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 5, 3, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.square(sigma), tf.math.square(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3022847807623092, 2.3028498706784877, 2.303394402337821, 2.301669384274012, 2.30290946420693, 2.303628768588353], "accuracy": [0.09113723784685135, 0.08849557489156723, 0.08519349992275238, 0.09800554811954498, 0.09126931428909302, 0.0878351628780365], "val_loss": [1.9710063253130232, 1.9710057803562708, 1.9710053716387068, 1.9710048948015486, 1.9710045542035783, 1.9710039411272322], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 9, 1, 2, 6, 5, 3, 2, 5, 5, 5, 7, 8, 2, 1, 2, 3, 6, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 2, 2, 0, 0, 0, 2, 0, 2, 2, 2, 2, 1, 2, 2, 0, 2, 1, 1, 1], [70, 32, 28, 91, 14, 83, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1, 0, 1], [0, 0, 1, 0, 1], [3, 4, 6], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 4, 4, 3, 1, 1, 1, 1, 0, 1, 0, 7, 5, 3, 2, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.add(grad, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, beta), tf.math.add(sigma, tf.math.divide_no_nan(sigma, tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))))), sigma)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3022849876898595, 2.302850702860415, 2.3033959992478916, 2.301671246621965, 2.3029118709402976, 2.303632119958112], "accuracy": [0.09113723784685135, 0.08849557489156723, 0.08519349992275238, 0.09787346422672272, 0.09113723784685135, 0.0878351628780365], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 9, 6, 1, 2, 9, 5, 5, 2, 5, 2, 5, 2, 3, 2, 1, 2, 3, 9, 2, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 0, 0, 0, 2, 0, 1, 2, 2, 2, 2, 2, 0, 2, 1, 2, 3, 1, 1], [70, 83, 42, 15, 51, 83, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [1, 0, 1, 0, 1], [0, 1, 1, 0], [8, 4], [7, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 2, 2, 2, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3022849876898595, 2.302850702860415, 2.3033959992478916, 2.301671246621965, 2.3029118709402976, 2.303632119958112], "accuracy": [0.09113723784685135, 0.08849557489156723, 0.08519349992275238, 0.09787346422672272, 0.09113723784685135, 0.0878351628780365], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 6, 1, 2, 9, 5, 8, 2, 0, 9, 5, 7, 3, 2, 1, 2, 3, 2, 2, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [3, 0, 2, 1, 0, 2, 0, 1, 2, 2, 2, 2, 2, 0, 2, 1, 2, 3, 1, 1], [70, 83, 18, 92, 44, 67, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [1, 0, 0, 0, 1], [0, 1, 1, 0], [2, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 11, 11, 7, 4, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), grad)), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.square(tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3022849876898595, 2.302850702860415, 2.3033959992478916, 2.301671246621965, 2.3029118709402976, 2.303632119958112], "accuracy": [0.09113723784685135, 0.08849557489156723, 0.08519349992275238, 0.09787346422672272, 0.09113723784685135, 0.0878351628780365], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}]