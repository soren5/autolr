[{"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 8, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [6, 2, 1, 9, 2, 9, 5, 3, 2, 3, 3, 4, 3, 1, 0, 6, 0, 3, 7, 8, 1, 6, 1, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [2, 3, 0, 1, 1, 3, 3, 0, 2, 2, 3, 3, 3, 4, 3, 2, 3, 1, 1, 2, 4], [68, 86, 89, 38, 8], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7805714011192322, "mapping_values": [1, 4, 4, 2, 2, 1, 7, 7, 4, 3, 2, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, beta), tf.math.subtract(grad, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.286178260226811, 2.2446261912194605, 2.1854258546298913, 2.097415583150388, 1.9602494247050066, 1.7782492834138297, 1.5853284850427267, 1.4335373058736034, 1.3143006752447728, 1.2258466008065037, 1.1583585498701736, 1.1022256845181502, 1.0511166850069746, 1.0247490580732859, 0.9879738218071691, 0.9553682195858445, 0.9335992039470247, 0.9093009961626045, 0.8999089547246596, 0.8736089458318828, 0.8588139181674952, 0.8503468875730074, 0.8304166413254159, 0.8247565460589269, 0.8093371644484258, 0.7999524848099949, 0.8002137470128845, 0.7954114055306039, 0.7769725060166937, 0.7677731429581094, 0.76260773690149, 0.7504448635215064, 0.7497430263556321, 0.7411021089525491, 0.7408302552932131, 0.730642490674476, 0.7331915883151311, 0.7281291690154271, 0.7174632318850286, 0.7097002311610054, 0.7122791311791575, 0.7132727736888891, 0.6962550580068555, 0.6969417861550004, 0.6905911735429614, 0.6919513481750684, 0.6846428720186793, 0.6882960681571401, 0.6735382869164579, 0.6795731842431253, 0.6652944731265169, 0.6772581643951788, 0.6652755450500143, 0.6705674584972199, 0.6630240237676646, 0.6661396349000736, 0.6509495324478205, 0.6538173376435318, 0.6515978448001417, 0.6408552396818631], "accuracy": [0.13247919082641602, 0.23193766176700592, 0.32465988397598267, 0.37287017703056335, 0.4119667112827301, 0.45779949426651, 0.49808478355407715, 0.529388427734375, 0.5552766919136047, 0.5783912539482117, 0.6007132530212402, 0.6184123754501343, 0.62660151720047, 0.6336019039154053, 0.6527539491653442, 0.6597543358802795, 0.6699247360229492, 0.6723021864891052, 0.6736230254173279, 0.687491774559021, 0.6866992712020874, 0.6960771083831787, 0.6999075412750244, 0.7000396251678467, 0.7058512568473816, 0.7063795924186707, 0.7108704447746277, 0.7119271159172058, 0.713908314704895, 0.7172104120254517, 0.7243428826332092, 0.7273808121681213, 0.719852089881897, 0.7257958054542542, 0.7269845604896545, 0.7323999404907227, 0.7297582626342773, 0.7320036888122559, 0.7331924438476562, 0.7437590956687927, 0.7448157668113708, 0.7351737022399902, 0.7383436560630798, 0.7437590956687927, 0.7481178045272827, 0.7445515990257263, 0.7481178045272827, 0.7474573850631714, 0.7519482374191284, 0.7479857206344604, 0.7535332441329956, 0.752212405204773, 0.7578919529914856, 0.7526086568832397, 0.7556465268135071, 0.7586844563484192, 0.7696473598480225, 0.7623828053474426, 0.7593448758125305, 0.765949010848999], "val_loss": [1.9335888453892298, 1.887871469770159, 1.8177506583077567, 1.7070831230708532, 1.5457134928022112, 1.3498854637145996, 1.16351546560015, 1.022409541266305, 0.9217220374516079, 0.8523429461887905, 0.7992474351610456, 0.7555161203656878, 0.7265974112919399, 0.7045380558286395, 0.6862133230481829, 0.6649142163140433, 0.650347181728908, 0.6410776376724243, 0.6256508316312518, 0.618428145136152, 0.6050976685115269, 0.600556560925075, 0.5894918271473476, 0.5803283452987671, 0.5742906672613961, 0.5677967752729144, 0.5645625080381121, 0.5650058133261544, 0.5571518455232892, 0.5537656205041068, 0.5469507149287632, 0.5451300314494542, 0.5427156175885882, 0.5363560233797345, 0.5327947310038975, 0.5275441578456334, 0.52448913029262, 0.522593447140285, 0.5220370122364589, 0.5178407090050834, 0.514826808656965, 0.5131752150399345, 0.5104374374662127, 0.5088205167225429, 0.5024658441543579, 0.5039343152727399, 0.4972951923097883, 0.5001040867396763, 0.49778791836329866, 0.4955554519380842, 0.49187471185411724, 0.48714026382991243, 0.487339837210519, 0.48824870586395264, 0.4844071865081787, 0.48152693680354525, 0.480291519846235, 0.47694473607199533, 0.4750444548470633, 0.4754765204020909], "val_accuracy": [0.3266666531562805, 0.42766666412353516, 0.4779999852180481, 0.5230000019073486, 0.5659999847412109, 0.5916666388511658, 0.6200000047683716, 0.6610000133514404, 0.6859999895095825, 0.6956666707992554, 0.7070000171661377, 0.7076666951179504, 0.7059999704360962, 0.7223333120346069, 0.715666651725769, 0.7253333330154419, 0.7303333282470703, 0.734000027179718, 0.7416666746139526, 0.734333336353302, 0.7383333444595337, 0.7566666603088379, 0.7563333511352539, 0.75, 0.753333330154419, 0.7590000033378601, 0.7599999904632568, 0.7646666765213013, 0.7606666684150696, 0.765333354473114, 0.7636666893959045, 0.7616666555404663, 0.768666684627533, 0.7646666765213013, 0.765999972820282, 0.7736666798591614, 0.7703333497047424, 0.7696666717529297, 0.7760000228881836, 0.7730000019073486, 0.7699999809265137, 0.7766666412353516, 0.768666684627533, 0.7776666879653931, 0.7796666622161865, 0.7720000147819519, 0.7803333401679993, 0.7826666831970215, 0.7823333144187927, 0.7793333530426025, 0.7863333225250244, 0.7893333435058594, 0.7826666831970215, 0.7793333530426025, 0.7940000295639038, 0.7873333096504211, 0.7913333177566528, 0.7926666736602783, 0.7933333516120911, 0.7900000214576721]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 2, 1, 0, 2, 6, 2, 3, 8, 3, 4, 4, 8, 1, 0, 6, 0, 0, 7, 8, 2, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [2, 3, 1, 3, 0, 0, 3, 0, 3, 3, 3, 2, 4, 4, 5, 3, 3, 1, 1, 2], [21, 2, 78, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7797142863273621, "mapping_values": [1, 4, 4, 2, 2, 1, 53, 53, 34, 19, 5, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 53, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.subtract(tf.math.add(beta, beta), tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.subtract(tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.negative(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.sqrt(tf.math.add(grad, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), grad))))), tf.math.add(beta, grad)))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, beta)))), grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.negative(tf.math.add(beta, grad)))))))))))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha))), tf.math.add(tf.math.add(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), alpha)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.286182613704088, 2.2446954808671635, 2.1857759159915973, 2.098605004819377, 1.9633974898146473, 1.7841860795017908, 1.593063491635618, 1.4411833072146405, 1.3207356529685532, 1.231503617368307, 1.16327175143341, 1.1063146411845115, 1.054700147253789, 1.0278667856468864, 0.9908922953360652, 0.9578921021944056, 0.9359312640630243, 0.911221155960011, 0.9016665469275931, 0.8752778913398161, 0.8603061300384653, 0.8518505668548813, 0.8316526475552287, 0.8257780556098707, 0.810348307680161, 0.8010329670673663, 0.8011485365372072, 0.7958946487907059, 0.7777155053818687, 0.7685186958599557, 0.7635278518268256, 0.7512588869264144, 0.7502731019873361, 0.7413567849327277, 0.7415652433800234, 0.731218517787106, 0.7336105381209601, 0.728318141262844, 0.7174160200071656, 0.7101934834273579, 0.7124113502865848, 0.7136276505327559, 0.6964159988849989, 0.6968687423200435, 0.6906480821069237, 0.6919774339498546, 0.6846507839585938, 0.6882706480790848, 0.6730565278915256, 0.679992451628107, 0.6653314068521791, 0.6772116417063541, 0.6653329845212312, 0.6704997003684663, 0.6628398846137666, 0.6658658539819018, 0.6506439569430691, 0.6537558261618528, 0.6514369035834697, 0.6407202517729645], "accuracy": [0.13261127471923828, 0.23180557787418365, 0.32439571619033813, 0.37287017703056335, 0.4115704596042633, 0.45608243346214294, 0.49689605832099915, 0.5285959839820862, 0.5543521046638489, 0.577070415019989, 0.598599910736084, 0.6164311170578003, 0.6260731816291809, 0.6326773166656494, 0.6515651941299438, 0.6586976647377014, 0.6688680648803711, 0.672698438167572, 0.6732267737388611, 0.6863030195236206, 0.6861709356307983, 0.6955488324165344, 0.7004358768463135, 0.6999075412750244, 0.7054550051689148, 0.7054550051689148, 0.7103421092033386, 0.7117950320243835, 0.713379979133606, 0.7187954187393188, 0.7238145470619202, 0.7275128960609436, 0.7193237543106079, 0.7253995537757874, 0.7265883088111877, 0.7317395210266113, 0.7293620109558105, 0.7314753532409668, 0.7339849472045898, 0.7423061728477478, 0.7441553473472595, 0.735041618347168, 0.7384757399559021, 0.7437590956687927, 0.7483819723129272, 0.7449478507041931, 0.7478536367416382, 0.7454761862754822, 0.752212405204773, 0.7489103078842163, 0.7544577717781067, 0.7534011602401733, 0.757099449634552, 0.7544577717781067, 0.7565711140632629, 0.7584202885627747, 0.7695152759552002, 0.761590301990509, 0.7593448758125305, 0.7666094303131104], "val_loss": [1.9336130959647042, 1.8880410875592912, 1.8184666633605957, 1.7092625413622176, 1.5507095881870814, 1.3578935350690569, 1.1726773466382707, 1.0306095395769392, 0.9283132553100586, 0.8575358731406075, 0.8033201183591571, 0.7589259488242013, 0.7289747510637555, 0.7066470043999808, 0.6878032684326172, 0.6665354285921369, 0.6518896477563041, 0.6421865735735212, 0.6266371352331979, 0.619394132069179, 0.6059103012084961, 0.6011815582002912, 0.5902530465807233, 0.5811339787074498, 0.5749199560710362, 0.5685198477336338, 0.5652287176677159, 0.5652554546083722, 0.5575342008045742, 0.5541739804404122, 0.547142505645752, 0.5453334876469204, 0.5428695167813983, 0.5365695953369141, 0.5327670063291278, 0.5276530640465873, 0.5246354852403913, 0.522489241191319, 0.5217627797807965, 0.5178475550242833, 0.5144972630909511, 0.5130472694124494, 0.5101527316229684, 0.5086371047156197, 0.5024986267089844, 0.5036593335015433, 0.49734227997916086, 0.49953135422297884, 0.49765690735408236, 0.4953838416508266, 0.49170892579214914, 0.48698558126177105, 0.4870416947773525, 0.4878131151199341, 0.48432455744062153, 0.48124643734523226, 0.47987362316676546, 0.476635217666626, 0.4747496673039028, 0.4754658596856253], "val_accuracy": [0.3266666531562805, 0.4273333251476288, 0.4763333201408386, 0.5223333239555359, 0.5643333196640015, 0.5903333425521851, 0.6186666488647461, 0.6583333611488342, 0.6836666464805603, 0.6953333616256714, 0.7056666612625122, 0.7073333263397217, 0.7056666612625122, 0.7213333249092102, 0.7149999737739563, 0.7250000238418579, 0.7289999723434448, 0.7323333621025085, 0.7416666746139526, 0.7323333621025085, 0.7386666536331177, 0.7549999952316284, 0.7570000290870667, 0.750333309173584, 0.7526666522026062, 0.7596666812896729, 0.7606666684150696, 0.7649999856948853, 0.7603333592414856, 0.7643333077430725, 0.7643333077430725, 0.7620000243186951, 0.768666684627533, 0.7643333077430725, 0.7689999938011169, 0.7753333449363708, 0.7703333497047424, 0.7699999809265137, 0.7776666879653931, 0.7736666798591614, 0.7716666460037231, 0.777999997138977, 0.7696666717529297, 0.7763333320617676, 0.7793333530426025, 0.7726666927337646, 0.7820000052452087, 0.7833333611488342, 0.7823333144187927, 0.7799999713897705, 0.7856666445732117, 0.7883333563804626, 0.7836666703224182, 0.7796666622161865, 0.7943333387374878, 0.7876666784286499, 0.7926666736602783, 0.7926666736602783, 0.7910000085830688, 0.7889999747276306]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 5, 5, 3, 0, 6, 2, 6, 8, 3, 2, 8, 2, 1, 3, 1, 6, 2, 7, 8, 9, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 1, 3, 1, 0, 3, 0, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [54, 86, 9, 38, 8], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7791428565979004, "mapping_values": [1, 4, 4, 2, 2, 1, 8, 8, 5, 3, 0, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.square(tf.math.add(beta, tf.math.square(tf.math.multiply(grad, grad)))), tf.math.negative(alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2861783232088686, 2.2446260383305154, 2.1854255892864827, 2.09740983417966, 1.9602380773693957, 1.7782270004563185, 1.5853111132528677, 1.4335279362848201, 1.3143268914947641, 1.2258697121040365, 1.1583754949565923, 1.1022343670514123, 1.051152691534403, 1.024735783100947, 0.9879383059257152, 0.9553605611565846, 0.9336754711643265, 0.9092930176978917, 0.9000021894814836, 0.8735395841169603, 0.8587687378467554, 0.850335966027597, 0.8304029003567054, 0.8247082304047587, 0.8092566463594911, 0.7999647196572707, 0.8001817665898711, 0.7953387725590998, 0.7768994727469769, 0.7677701310222773, 0.7625755794044216, 0.750539552069548, 0.7494387443606344, 0.740802824135076, 0.7408854571693783, 0.7306147208696878, 0.733057447467671, 0.7277545628766846, 0.7171033092493615, 0.7098164690751693, 0.7121302045693786, 0.7130378194851033, 0.6960281691751491, 0.6967592562792748, 0.6904588486886595, 0.6919949902928878, 0.6843127108300445, 0.6881506154644585, 0.6731536793135664, 0.6797287013190313, 0.6652047908096707, 0.6772767906459158, 0.6652644447300333, 0.6703808871573304, 0.6631093283040318, 0.6659295075857061, 0.6507859530938284, 0.6536782237485478, 0.6514475202642301, 0.6408642767726186], "accuracy": [0.13247919082641602, 0.23193766176700592, 0.32465988397598267, 0.37287017703056335, 0.41223087906837463, 0.45779949426651, 0.49848103523254395, 0.5292563438415527, 0.5552766919136047, 0.5778629183769226, 0.6003170013427734, 0.6184123754501343, 0.6269977688789368, 0.6337339878082275, 0.6528860330581665, 0.6597543358802795, 0.6701889038085938, 0.6717738509178162, 0.6736230254173279, 0.6868313550949097, 0.6869634389877319, 0.6959450244903564, 0.6999075412750244, 0.7005679607391357, 0.7058512568473816, 0.7059833407402039, 0.71100252866745, 0.7129837274551392, 0.7136441469192505, 0.7174745798110962, 0.724210798740387, 0.72672039270401, 0.7207766771316528, 0.7256637215614319, 0.7260599732398987, 0.7323999404907227, 0.7294940948486328, 0.7326641082763672, 0.7333245277404785, 0.7430986762046814, 0.744419515132904, 0.7347774505615234, 0.739400327205658, 0.7433628439903259, 0.7483819723129272, 0.743891179561615, 0.7483819723129272, 0.7470611333847046, 0.7520803213119507, 0.7490423917770386, 0.7544577717781067, 0.7530049085617065, 0.7573636174201965, 0.7530049085617065, 0.7561748623847961, 0.7585523724555969, 0.7695152759552002, 0.7618544697761536, 0.7585523724555969, 0.7664773464202881], "val_loss": [1.9335888453892298, 1.8878722190856934, 1.8177475248064314, 1.7070753914969308, 1.5456931250435966, 1.3498714310782296, 1.1635241167885917, 1.0224401610238212, 0.9217315401349749, 0.8523511716297695, 0.7992762327194214, 0.755529693194798, 0.7265743698392596, 0.704506482396807, 0.6861363649368286, 0.6649548666817802, 0.6503916127341134, 0.6412389278411865, 0.6256989751543317, 0.6184470142636981, 0.605170590536935, 0.600588321685791, 0.589641843523298, 0.580376318522862, 0.5742552621023995, 0.5677650485719953, 0.5645673274993896, 0.564794795853751, 0.5570467369897025, 0.5537647519792829, 0.5469504083905902, 0.544971261705671, 0.5425252914428711, 0.5361804280962262, 0.532633866582598, 0.5273392200469971, 0.5244456018720355, 0.5225466660090855, 0.5215120826448713, 0.5175965683800834, 0.514641284942627, 0.5130396570478167, 0.5104312896728516, 0.5084369012287685, 0.5025998864855085, 0.5039539166859218, 0.49716101373944965, 0.49980177198137554, 0.49797299930027555, 0.4954299586159842, 0.4917731285095215, 0.48680446829114643, 0.48733045373644146, 0.48792735167912077, 0.48436403274536133, 0.4813061441693987, 0.4801375014441354, 0.47684223311288015, 0.4749427693230765, 0.47562536171504427], "val_accuracy": [0.3266666531562805, 0.42766666412353516, 0.4776666760444641, 0.5226666927337646, 0.565666675567627, 0.5913333296775818, 0.6200000047683716, 0.6606666445732117, 0.6859999895095825, 0.6956666707992554, 0.7070000171661377, 0.7076666951179504, 0.7066666483879089, 0.7223333120346069, 0.715666651725769, 0.7250000238418579, 0.7303333282470703, 0.734000027179718, 0.7416666746139526, 0.734000027179718, 0.7379999756813049, 0.7566666603088379, 0.7563333511352539, 0.7506666779518127, 0.7526666522026062, 0.7593333125114441, 0.7609999775886536, 0.765666663646698, 0.7599999904632568, 0.7646666765213013, 0.7646666765213013, 0.7613333463668823, 0.7689999938011169, 0.7649999856948853, 0.7663333415985107, 0.7743333578109741, 0.7710000276565552, 0.7696666717529297, 0.7763333320617676, 0.7730000019073486, 0.7710000276565552, 0.7776666879653931, 0.7693333625793457, 0.7773333191871643, 0.7793333530426025, 0.7733333110809326, 0.7816666960716248, 0.7836666703224182, 0.7806666493415833, 0.7793333530426025, 0.7850000262260437, 0.7893333435058594, 0.7826666831970215, 0.7803333401679993, 0.7946666479110718, 0.7863333225250244, 0.7919999957084656, 0.7923333048820496, 0.7926666736602783, 0.7900000214576721]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 4, 8, 3, 6, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 0, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [17, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 2, 3, 0, 2, 6, 5, 3, 4, 3, 3, 2, 8, 1, 0, 6, 0, 3, 7, 8, 2, 6, 2, 8, 2, 2, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 0, 1, 1, 1, 3, 0, 0, 2, 3, 3, 3, 4, 3, 2, 3, 1, 1, 2, 4], [68, 86, 89, 38, 8], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [6, 3, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [65, 18, 10, 42]], "fitness": -0.14971429109573364, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 10, 5, 5, 2], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(alpha, tf.math.sqrt(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(beta, tf.math.subtract(sigma, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [10684891.126219468, 11136106.436666226, 1249497.7766642452, 439491.94632066437, 184680.07847274965, 87722.0367866489], "accuracy": [0.09087307006120682, 0.09787346422672272, 0.09245806187391281, 0.10157178342342377, 0.10077928751707077, 0.1002509593963623], "val_loss": [13569438.285714285, 1944661.607142857, 318032.3839285714, 134037.64732142858, 55324.89397321428, 14411.662109375], "val_accuracy": [0.13733333349227905, 0.06733333319425583, 0.10000000149011612, 0.0989999994635582, 0.09866666793823242, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 8, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [0, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 2, 3, 0, 2, 6, 2, 3, 8, 8, 5, 4, 8, 1, 0, 6, 0, 3, 7, 8, 2, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 1, 3, 1, 0, 3, 0, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [68, 86, 78, 38, 8], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 40, 40, 24, 16, 3, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, grad), tf.math.multiply(tf.math.negative(tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.math.square(alpha))))), grad), tf.math.pow(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.add(beta, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.math.subtract(grad, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))), tf.math.add(beta, grad)))))))), tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(beta, grad)))))))))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, sigma))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [9225.421644153628, 169972.89683908995, 780876.8381653678, 2189856.7599722627, 4639741.063862106, 8445346.413023379], "accuracy": [0.09998679161071777, 0.09972262382507324, 0.1018359512090683, 0.10210011899471283, 0.10394927859306335, 0.10117553919553757], "val_loss": [34314.197544642855, 269454.58035714284, 904193.6785714285, 2137300.3571428573, 4167541.0, 7193680.571428572], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [75, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 2, 5, 3, 0, 6, 2, 6, 8, 3, 2, 8, 2, 1, 3, 1, 6, 2, 7, 8, 9, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [4, 3, 3, 3, 1, 0, 3, 0, 0, 3, 3, 2, 4, 4, 0, 2, 3, 1, 3, 2], [54, 86, 9, 38, 8], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [7, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 8, 8, 4, 4, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.square(tf.math.add(beta, tf.math.multiply(grad, grad))), grad), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0754193663597107, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 2, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [29, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 5, 5, 3, 0, 6, 2, 6, 8, 3, 2, 8, 2, 1, 3, 1, 6, 2, 7, 8, 9, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [3, 2, 1, 3, 1, 0, 3, 0, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [54, 86, 9, 38, 8], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [2, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 35, 35, 20, 15, 3, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.square(tf.math.add(beta, tf.math.square(tf.math.multiply(tf.math.add(beta, tf.math.negative(grad)), tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.sqrt(beta)), alpha), tf.math.add(tf.math.add(beta, grad), tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32))))))), grad)), tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), grad))), tf.math.add(beta, beta))), tf.math.add(beta, grad)))))), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0754193663597107, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 2, 8, 8, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [73, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 5, 3, 4, 6, 6, 2, 2, 8, 3, 3, 4, 0, 2, 0, 1, 1, 2, 6, 8, 2, 6, 2, 8, 4, 8, 9, 6, 0, 0, 3, 0, 2, 9], [1, 3, 3, 3, 1, 0, 3, 0, 0, 3, 3, 2, 3, 4, 0, 3, 3, 1, 2, 2], [68, 86, 89, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [46], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 5, 2, 2, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.sqrt(tf.math.sqrt(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.negative(alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [0, 3, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 5, 5, 3, 0, 6, 2, 6, 8, 3, 2, 8, 2, 1, 3, 1, 6, 2, 7, 8, 9, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 1, 3, 1, 0, 3, 0, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [54, 86, 9, 38, 8], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 8, 8, 5, 3, 0, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.square(tf.math.add(beta, tf.math.square(tf.math.multiply(grad, tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.negative(alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [365501.4550112859, 53899478.89842822, 924847100.2974508, 6607087801.837538, 28878362663.764362, 94083681341.54008], "accuracy": [0.09985470771789551, 0.09972262382507324, 0.1018359512090683, 0.10210011899471283, 0.10381719470024109, 0.10117553919553757], "val_loss": [3040350.4285714286, 163058518.85714287, 1748440905.142857, 9528674889.142857, 35686329782.85714, 105254750500.57143], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 5, 5, 4, 0, 6, 2, 6, 8, 3, 2, 8, 2, 1, 3, 1, 6, 2, 7, 8, 9, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 1, 3, 1, 0, 3, 0, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [14, 86, 29, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 8, 8, 5, 3, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.square(tf.math.pow(grad, tf.math.negative(alpha)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0754193663597107, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 8, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [44, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [6, 2, 1, 9, 2, 6, 8, 3, 2, 3, 3, 4, 4, 1, 0, 6, 0, 3, 7, 8, 1, 6, 1, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [1, 3, 3, 3, 1, 0, 3, 0, 0, 3, 3, 2, 3, 4, 0, 3, 3, 1, 2, 2], [68, 86, 89, 38, 8], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0754193663597107, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 8, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 2, 3, 0, 2, 6, 1, 3, 8, 3, 2, 4, 8, 1, 0, 6, 0, 0, 7, 8, 2, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [2, 3, 0, 1, 1, 1, 0, 0, 0, 2, 3, 3, 3, 4, 3, 2, 3, 1, 1, 2, 4], [21, 9, 78, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 5, 1, 1, 30, 30, 17, 13, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.sqrt(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.add(beta, beta), tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha))))), tf.math.multiply(alpha, tf.math.add(beta, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))))), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), tf.math.subtract(beta, tf.math.negative(tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(grad)), grad))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 1, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 2, 3, 0, 2, 6, 2, 3, 8, 3, 3, 4, 8, 1, 3, 6, 2, 0, 7, 8, 2, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [1, 3, 3, 3, 3, 0, 3, 0, 0, 3, 3, 2, 3, 4, 0, 3, 3, 1, 2, 2, 1, 4], [54, 86, 9, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [4, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 5, 3, 2, 55, 55, 33, 22, 5, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.add(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.add(beta, alpha), tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), grad)), tf.math.add(beta, tf.math.pow(grad, tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)))))))), tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.multiply(grad, tf.math.divide_no_nan(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.negative(tf.math.add(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), grad)), grad))), tf.math.add(beta, beta))))), tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, grad))))), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.sqrt(tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(alpha))))), tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), tf.math.negative(tf.math.add(tf.math.add(beta, beta), alpha))))))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3024024173898816, 2.3025286989031906, 2.302531702108135, 2.3025380493454284, 2.3025240152739674, 2.302554222130111], "accuracy": [0.10342095047235489, 0.10513802617788315, 0.09998679161071777, 0.10249637067317963, 0.10276053100824356, 0.10421344637870789], "val_loss": [1.97364684513637, 1.9736416680472237, 1.9736393519810267, 1.9736435753958566, 1.9736472538539342, 1.9736560412815638], "val_accuracy": [0.10066666454076767, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 8, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 2, 3, 4, 2, 5, 2, 3, 8, 6, 3, 2, 8, 5, 0, 2, 0, 2, 6, 8, 0, 6, 2, 1, 4, 8, 9, 6, 0, 0, 3, 0, 2, 9], [2, 3, 3, 3, 1, 0, 3, 0, 0, 3, 3, 2, 4, 4, 0, 2, 3, 1, 3, 2], [14, 0, 29, 38, 8], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 8, 5, 2, 28, 28, 16, 12, 3, 2, 1, 1, 0, 0, 1, 0, 1, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))))))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.pow(beta, grad)), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(tf.math.multiply(tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, alpha)))), tf.math.multiply(tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))))), tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)))))), tf.math.sqrt(tf.math.square(grad))), tf.math.negative(tf.math.add(beta, tf.math.add(grad, beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302456029732749, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [9, 0, 8, 8, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [1, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 5, 5, 3, 0, 6, 2, 6, 8, 3, 2, 8, 2, 1, 3, 1, 6, 2, 7, 8, 9, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [1, 3, 3, 3, 1, 0, 3, 0, 0, 3, 3, 2, 3, 4, 0, 3, 3, 1, 2, 2], [54, 86, 9, 38, 8], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 8, 8, 5, 3, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.square(tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, grad))))), tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [19097899.676708177, 363540124.4031172, 1684537608.4533086, 4741331517.201955, 10065721901.918373, 18344827056.64034], "accuracy": [0.09998679161071777, 0.09972262382507324, 0.1018359512090683, 0.10210011899471283, 0.10381719470024109, 0.10117553919553757], "val_loss": [72529874.28571428, 579533970.2857143, 1955138194.2857144, 4633478582.857142, 9048641243.428572, 15634790107.428572], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [1, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [31, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 5, 5, 3, 0, 6, 2, 6, 8, 3, 2, 8, 2, 1, 3, 1, 6, 2, 7, 8, 9, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [1, 3, 0, 1, 1, 1, 3, 0, 0, 2, 3, 3, 3, 4, 3, 2, 3, 1, 1, 2, 4], [16, 86, 9, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 1, 1, 0, 1, 0, 30, 30, 17, 13, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.square(tf.math.add(beta, tf.math.square(tf.math.multiply(tf.math.add(beta, alpha), tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), alpha)), tf.math.sqrt(tf.math.add(beta, alpha))))), tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad))), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.add(beta, grad))), grad))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3024581947409795, 2.3029548404805964, 2.3007308126141477, 2.3030600111009956, 2.302138122947319, 2.301610332895122], "accuracy": [0.09206181764602661, 0.09100515395402908, 0.10091137140989304, 0.09232597798109055, 0.09285431355237961, 0.09008057415485382], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 0, 8, 8, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 2, 3, 4, 5, 5, 2, 9, 8, 6, 3, 4, 8, 1, 1, 2, 0, 2, 6, 8, 0, 6, 2, 1, 4, 8, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 0, 0, 1, 1, 3, 1, 0, 2, 3, 3, 3, 4, 3, 3, 3, 1, 2, 2, 4], [67, 71, 78, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 1, 1, 0, 1, 0, 18, 18, 11, 7, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.pow(grad, grad)), tf.math.square(tf.math.square(tf.math.add(beta, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32))))), tf.math.add(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.multiply(alpha, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3024581947409795, 2.3029548404805964, 2.3007308126141477, 2.3030600111009956, 2.302138122947319, 2.301610332895122], "accuracy": [0.09206181764602661, 0.09100515395402908, 0.10091137140989304, 0.09232597798109055, 0.09285431355237961, 0.09008057415485382], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 8, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 1, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 2, 9, 0, 2, 6, 2, 3, 8, 3, 4, 4, 8, 3, 0, 6, 0, 0, 7, 8, 2, 3, 2, 8, 0, 8, 9, 6, 0, 0, 3, 0, 2, 9], [1, 3, 3, 3, 1, 0, 3, 0, 0, 3, 3, 2, 3, 4, 0, 3, 3, 1, 2, 2], [21, 9, 78, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 4, 4, 2, 2, 0, 5, 5, 3, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha)), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3024581947409795, 2.3029548404805964, 2.3007308126141477, 2.3030600111009956, 2.302138122947319, 2.301610332895122], "accuracy": [0.09206181764602661, 0.09100515395402908, 0.10091137140989304, 0.09232597798109055, 0.09285431355237961, 0.09008057415485382], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 0, 8, 8, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [6, 2, 1, 9, 2, 6, 8, 3, 2, 3, 3, 4, 4, 1, 0, 6, 0, 3, 7, 8, 1, 6, 1, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [2, 3, 0, 1, 1, 1, 3, 0, 0, 2, 3, 3, 3, 4, 3, 2, 3, 1, 1, 2, 4], [14, 86, 29, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.031142856925725937, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [2.302847522235014, 2.304823029326284, 2.304118413022008, 2.309036290751094, 2.3107450610185896, 2.3130714867518423], "accuracy": [0.09087307006120682, 0.08638224750757217, 0.09285431355237961, 0.08413683623075485, 0.07991018146276474, 0.07845727354288101], "val_loss": [1.97185332434518, 1.973442895071847, 1.9749482018607003, 1.9771090235028947, 1.9794257027762276, 1.9816791670663017], "val_accuracy": [0.03333333507180214, 0.026000000536441803, 0.020666666328907013, 0.018333332613110542, 0.019999999552965164, 0.02666666731238365]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 0, 8, 8, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [6, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 6, 5, 3, 0, 6, 2, 6, 8, 3, 2, 8, 2, 1, 3, 1, 6, 2, 7, 8, 9, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 2, 3, 1, 0, 3, 0, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [14, 86, 29, 38, 8], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [7, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.031142856925725937, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 3, 2, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [2.302847540216392, 2.3048231507242, 2.30411832768132, 2.309033425350892, 2.310741178773067, 2.3130652205094746], "accuracy": [0.09087307006120682, 0.08638224750757217, 0.09285431355237961, 0.08413683623075485, 0.07991018146276474, 0.07845727354288101], "val_loss": [1.97185332434518, 1.9734436443873815, 1.9749456133161272, 1.9771043913705009, 1.979421547480992, 1.981672968183245], "val_accuracy": [0.03333333507180214, 0.026000000536441803, 0.020666666328907013, 0.018333332613110542, 0.019999999552965164, 0.027000000700354576]}}]