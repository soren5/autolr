[{"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 3, 3, 0, 8, 0, 6, 4, 2, 0, 8, 6, 5, 2, 6, 0, 3, 4, 2, 4, 6, 4, 2, 0, 1, 0, 2, 2, 1, 2, 1, 9, 1, 2, 8, 5, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 1, 0, 1, 2, 1, 3, 0, 3, 3, 1, 3, 2, 0, 2, 3, 1, 3, 2, 3, 3, 2, 2, 4, 3, 1, 3, 2, 3, 3, 2, 2, 3, 2, 4, 0, 3, 0, 5], [96, 31, 78, 62, 37, 47, 1, 35, 47, 32, 7], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 1, 2, 3, 0, 0, 0], [91, 18, 10, 42]], "fitness": -0.8425714373588562, "mapping_values": [1, 4, 4, 2, 2, 1, 16, 16, 9, 7, 1, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.sqrt(alpha)))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), beta)))))), tf.math.add(beta, tf.math.pow(alpha, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), alpha)", "other_info": {"loss": [1.949713141344101, 1.0069751314373063, 0.7646834769300608, 0.6819140749632044, 0.6253650608142731, 0.5776986902683733, 0.5425413207150627, 0.5268430194960546, 0.4990018379568597, 0.48505733139038465, 0.4510658884588533, 0.4382600844882624, 0.4210758285672988, 0.42186527843205146, 0.3959046793242235, 0.39131717337215455, 0.3758922341304165, 0.370483567162496, 0.3573309933906218, 0.3403735981365756, 0.33676888021291, 0.3276357297545584, 0.3244746112473936, 0.3137623479203809, 0.3002737538413979, 0.2927732905416031, 0.2814124199802755, 0.28720108426447005, 0.2779585096688397, 0.26272305388019823, 0.2537561485189819, 0.2532774138255378, 0.25413436300608744, 0.2409908416059905, 0.23757032398392794, 0.2272188748311625, 0.22144476161255355, 0.21992528721396917, 0.2147815866008836, 0.21304252222741302, 0.20150832445897668, 0.20258260203894213, 0.20045584559306776], "accuracy": [0.3307357132434845, 0.6277902722358704, 0.7028133869171143, 0.7397965788841248, 0.7630431652069092, 0.7745344042778015, 0.7932901978492737, 0.8004226684570312, 0.8086118102073669, 0.8145555257797241, 0.8285563588142395, 0.8339717388153076, 0.8401796221733093, 0.8417646288871765, 0.8516708612442017, 0.8541803956031799, 0.8574824929237366, 0.8570862412452698, 0.8659358024597168, 0.8679170608520508, 0.8687095642089844, 0.8765024542808533, 0.8751816153526306, 0.8762382864952087, 0.8842953443527222, 0.8882578015327454, 0.8901069760322571, 0.8912957310676575, 0.8952582478523254, 0.8994848728179932, 0.8992207050323486, 0.8997490406036377, 0.9001452922821045, 0.9058248400688171, 0.9066173434257507, 0.9097873568534851, 0.9126931428909302, 0.9148064851760864, 0.9152027368545532, 0.9157310724258423, 0.9227314591407776, 0.9251089692115784, 0.9231277108192444], "val_loss": [0.842178463935852, 0.6168232985905239, 0.5431248801095145, 0.5054690837860107, 0.46593872138432096, 0.43955414635794504, 0.4260337097304208, 0.3983065826552255, 0.39036730357578825, 0.37481447628566195, 0.36437645128795076, 0.3529456513268607, 0.3519589219774519, 0.3398161104747227, 0.3437343750681196, 0.33343822615487234, 0.33501348325184416, 0.3239705647741045, 0.3322656920978001, 0.3235538261277335, 0.3249608022826059, 0.3163877044405256, 0.3239299314362662, 0.3138763053076608, 0.3079614554132734, 0.3189375400543213, 0.31581108059201923, 0.3053432617868696, 0.31519744225910734, 0.30561669383730206, 0.3054411496434893, 0.3051951101848057, 0.3049496327127729, 0.3105494294847761, 0.3068390318325588, 0.3076346942356655, 0.315969066960471, 0.3109061207090105, 0.3206081134932382, 0.3207883749689375, 0.31684562989643644, 0.32002271924700054, 0.3246755174228123], "val_accuracy": [0.6256666779518127, 0.7170000076293945, 0.7540000081062317, 0.7699999809265137, 0.7839999794960022, 0.7986666560173035, 0.8096666932106018, 0.8259999752044678, 0.8306666612625122, 0.8379999995231628, 0.843666672706604, 0.8550000190734863, 0.8500000238418579, 0.8583333492279053, 0.8529999852180481, 0.8576666712760925, 0.8616666793823242, 0.8659999966621399, 0.8586666584014893, 0.8656666874885559, 0.8633333444595337, 0.8713333606719971, 0.8656666874885559, 0.8703333139419556, 0.8683333396911621, 0.8669999837875366, 0.8740000128746033, 0.8700000047683716, 0.8696666955947876, 0.8766666650772095, 0.878000020980835, 0.8759999871253967, 0.8790000081062317, 0.875333309173584, 0.8766666650772095, 0.878000020980835, 0.878000020980835, 0.8823333382606506, 0.8763333559036255, 0.8733333349227905, 0.8796666860580444, 0.8793333172798157, 0.8803333044052124]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 2, 5, 5, 2, 2, 5, 6, 4, 2, 0, 8, 6, 5, 2, 6, 0, 3, 4, 2, 4, 6, 4, 2, 0, 1, 0, 2, 2, 1, 2, 1, 9, 1, 2, 8, 5, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 1, 0, 1, 2, 3, 3, 0, 3, 3, 1, 3, 2, 0, 2, 3, 1, 3, 2, 3, 3, 2, 2, 4, 3, 1, 3, 2, 3, 3, 2, 2, 3, 2, 4, 0, 3, 0, 5], [96, 31, 78, 62, 37, 47, 1, 35, 47, 32, 7], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 1, 2, 3, 0, 0, 0], [91, 18, 10, 42]], "fitness": -0.8334285616874695, "mapping_values": [1, 4, 4, 2, 2, 1, 13, 13, 8, 5, 1, 3, 1, 1, 0, 0, 3, 1, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(alpha, tf.math.square(tf.math.add(beta, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))))), tf.math.divide_no_nan(alpha, tf.math.add(beta, beta))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), alpha)", "other_info": {"loss": [1.8977365519597058, 1.221745428738577, 0.8117026542833122, 0.7084530005050672, 0.6326025932251801, 0.5884189307492848, 0.5512727174020762, 0.520008225065291, 0.4955795970354822, 0.4823407015512648, 0.45511723969984424, 0.44093975044906003, 0.4253865548443596, 0.4237432222576693, 0.4029080780576548, 0.3980684967372301, 0.3834029764680972, 0.37037295534500214, 0.3606534293850163, 0.35528135370537434, 0.34016766110116525, 0.3298783285734975, 0.3314566056820632, 0.32474669896380115, 0.30975264365158817, 0.2952439356213941, 0.2959977052845046, 0.2916281425508888, 0.28766762885939035, 0.27639557815435745, 0.26857880573105175, 0.2599055072170412, 0.25271245477229787, 0.2491743218401215, 0.24156668555105146, 0.2379958618428839, 0.2254150957498946, 0.21885970825721338, 0.21498152662450926, 0.23110782916102474, 0.21562772697784235, 0.21311769318295634, 0.20537698286407266, 0.19877307927879312, 0.19320078951106992, 0.19385531596251923, 0.18141182166529274, 0.18492784287833172], "accuracy": [0.35266146063804626, 0.561352550983429, 0.6915863156318665, 0.7244749665260315, 0.7567031979560852, 0.7753269076347351, 0.787082314491272, 0.8010830879211426, 0.8105930685997009, 0.8222163319587708, 0.8304054737091064, 0.8330471515655518, 0.8404437899589539, 0.8384625315666199, 0.8481045961380005, 0.8519350290298462, 0.8532558679580688, 0.8623695969581604, 0.8618412613868713, 0.8658037185668945, 0.8671245574951172, 0.8746532797813416, 0.8679170608520508, 0.873860776424408, 0.8804649114608765, 0.886672854423523, 0.8864086866378784, 0.8905032277107239, 0.8914278149604797, 0.8938053250312805, 0.8949940800666809, 0.901862382888794, 0.8969752788543701, 0.9037115573883057, 0.9045040011405945, 0.9072777628898621, 0.9120327830314636, 0.9142781496047974, 0.919561505317688, 0.9084665179252625, 0.9182406663894653, 0.9165235757827759, 0.919561505317688, 0.9225993752479553, 0.9265618920326233, 0.9225993752479553, 0.9282789826393127, 0.925901472568512], "val_loss": [1.1759991645812988, 0.6581914254597255, 0.5660012108939034, 0.5101176159722465, 0.4730081558227539, 0.43692816155297415, 0.41220333746501375, 0.3981863941465105, 0.38663175276347567, 0.3770668591771807, 0.36211804832730976, 0.36726434741701397, 0.3613453507423401, 0.3482446925980704, 0.3446537341390337, 0.33671956402914865, 0.3447736246245248, 0.32573642901011873, 0.3255437271935599, 0.3422125577926636, 0.32077229022979736, 0.33536674295152935, 0.32326851572309223, 0.3131053362573896, 0.3034472806113107, 0.3104399357523237, 0.3120628765651158, 0.30601111480167936, 0.3086537889071873, 0.30798687253679546, 0.30819960151399883, 0.31103962659835815, 0.31448714222226826, 0.306597854409899, 0.31524609667914255, 0.31086550440107075, 0.3132700409208025, 0.3046208790370396, 0.3319405061858041, 0.31465145519801546, 0.3124525717326573, 0.3174406886100769, 0.3198302047593253, 0.31622172253472464, 0.35449284315109253, 0.34126350709370207, 0.3510445015771048, 0.31869923216956003], "val_accuracy": [0.4893333315849304, 0.7020000219345093, 0.7409999966621399, 0.7583333253860474, 0.7770000100135803, 0.8036666512489319, 0.8143333196640015, 0.8220000267028809, 0.8296666741371155, 0.8360000252723694, 0.846666693687439, 0.8386666774749756, 0.8453333377838135, 0.8543333411216736, 0.8483333587646484, 0.8543333411216736, 0.8523333072662354, 0.8640000224113464, 0.8640000224113464, 0.8616666793823242, 0.8646666407585144, 0.8673333525657654, 0.8683333396911621, 0.8673333525657654, 0.8723333477973938, 0.8740000128746033, 0.8703333139419556, 0.8686666488647461, 0.8730000257492065, 0.8743333220481873, 0.8773333430290222, 0.8756666779518127, 0.8740000128746033, 0.875, 0.8709999918937683, 0.8799999952316284, 0.875333309173584, 0.878333330154419, 0.8743333220481873, 0.875, 0.8806666731834412, 0.8796666860580444, 0.8820000290870667, 0.8799999952316284, 0.8773333430290222, 0.8743333220481873, 0.8726666569709778, 0.8786666393280029]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 2, 5, 5, 2, 2, 5, 6, 4, 2, 0, 8, 6, 5, 2, 6, 0, 3, 4, 2, 4, 6, 4, 2, 0, 1, 0, 2, 2, 1, 2, 1, 9, 1, 2, 8, 5, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 1, 0, 1, 2, 3, 2, 0, 3, 3, 1, 3, 2, 0, 2, 3, 1, 3, 2, 3, 3, 2, 2, 4, 3, 1, 3, 2, 3, 3, 2, 2, 3, 2, 4, 0, 3, 0, 5], [96, 31, 78, 62, 37, 47, 1, 35, 47, 32, 7], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 1, 2, 3, 0, 0, 0], [87, 18, 10, 42]], "fitness": -0.7951428294181824, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), alpha)", "other_info": {"loss": [2.155697679963677, 1.5314579608811678, 1.1924779290583596, 1.0258810202506365, 0.9293400139195209, 0.8553853631806868, 0.8189626210999605, 0.7916301322367528, 0.7718077660425701, 0.7408651117052872, 0.6994037113138052, 0.7089875401396871, 0.70437092162898, 0.6675903657959311, 0.6724371348925081, 0.6761642655109481, 0.646109027216038, 0.6172772494714651, 0.6400423282488006, 0.6058185168339859, 0.625976120838321, 0.5944083007791842, 0.5946338782221051, 0.5840746475295809, 0.582286350085609, 0.5868057598763484, 0.5668230568964279, 0.5708185941268267], "accuracy": [0.2903183102607727, 0.48368775844573975, 0.5753533244132996, 0.6206578016281128, 0.6596222519874573, 0.6826046705245972, 0.6968696117401123, 0.698718786239624, 0.7156254053115845, 0.7190595865249634, 0.7412495017051697, 0.7309470176696777, 0.7338528633117676, 0.7485140562057495, 0.7473253011703491, 0.7458723783493042, 0.755118191242218, 0.7697794437408447, 0.7543256878852844, 0.7779685854911804, 0.761590301990509, 0.7759873270988464, 0.7757231593132019, 0.778232753276825, 0.780610203742981, 0.7792893648147583, 0.783119797706604, 0.7833839654922485], "val_loss": [1.4429116249084473, 0.9048375061580113, 0.8673796142850604, 0.7498243195669991, 0.6751078367233276, 0.6381266457693917, 0.6058179991585868, 0.554949198450361, 0.5870386702673775, 0.5529454265322004, 0.5205414976392474, 0.5309347595487323, 0.4994613102504185, 0.5209742103304181, 0.5146672895976475, 0.5085381099155971, 0.48628926277160645, 0.48311305046081543, 0.4845968314579555, 0.4722529138837542, 0.46506617750440327, 0.4655378205435617, 0.445411741733551, 0.46746446405138287, 0.46598700114658903, 0.45454577037266325, 0.44541839190891813, 0.44199380704334806], "val_accuracy": [0.6163333058357239, 0.6503333449363708, 0.6036666631698608, 0.6383333206176758, 0.6793333292007446, 0.7103333473205566, 0.7206666469573975, 0.7393333315849304, 0.7336666584014893, 0.7593333125114441, 0.7716666460037231, 0.7480000257492065, 0.7766666412353516, 0.7696666717529297, 0.7603333592414856, 0.7730000019073486, 0.7846666574478149, 0.7723333239555359, 0.7916666865348816, 0.7770000100135803, 0.7823333144187927, 0.7926666736602783, 0.8066666722297668, 0.784333348274231, 0.7803333401679993, 0.8016666769981384, 0.8033333420753479, 0.8050000071525574]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 5, 5, 0, 2, 2, 5, 6, 4, 2, 0, 8, 6, 5, 2, 6, 0, 3, 4, 2, 4, 6, 4, 2, 0, 1, 0, 2, 2, 1, 2, 1, 9, 1, 2, 8, 5, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 3, 0, 1, 2, 3, 3, 0, 3, 3, 1, 3, 2, 0, 2, 3, 1, 3, 2, 3, 3, 2, 2, 4, 3, 1, 3, 2, 3, 3, 2, 2, 3, 2, 4, 0, 3, 0, 5], [96, 31, 78, 62, 37, 47, 1, 35, 47, 32, 7], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 1, 2, 3, 0, 0, 0], [91, 18, 10, 42]], "fitness": -0.4628571569919586, "mapping_values": [1, 7, 7, 4, 3, 1, 3, 3, 2, 1, 0, 3, 1, 1, 0, 0, 3, 1, 2, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), grad))))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, tf.math.square(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), alpha)", "other_info": {"loss": [1.931702336252893, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.31699907779693604, 0.1472724825143814, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.308666740145002, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.48100000619888306, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [49, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 6, 5, 5, 2, 2, 5, 6, 4, 2, 0, 8, 6, 5, 2, 6, 0, 3, 4, 2, 4, 6, 4, 2, 0, 1, 0, 2, 2, 1, 2, 1, 9, 1, 2, 8, 5, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [0, 1, 0, 1, 2, 3, 3, 0, 3, 3, 1, 3, 2, 0, 2, 3, 1, 3, 2, 3, 3, 2, 2, 4, 3, 1, 3, 2, 3, 3, 2, 2, 3, 2, 4, 0, 3, 0, 5], [96, 31, 78, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 1, 2, 3, 0, 0, 0], [91, 18, 10, 42]], "fitness": -0.18771427869796753, "mapping_values": [1, 4, 4, 2, 2, 1, 13, 13, 8, 5, 2, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(alpha, tf.math.square(tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))))), tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, beta)))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), alpha)", "other_info": {"loss": [3.5658503218318147, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.22612600028514862, 0.10355303436517715, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [3.0802602767944336, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.17233332991600037, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 5, 3, 0, 2, 0, 6, 4, 2, 0, 8, 6, 5, 2, 6, 0, 3, 4, 2, 4, 6, 4, 2, 0, 1, 0, 2, 2, 1, 2, 1, 9, 1, 2, 8, 5, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 1, 0, 3, 2, 3, 2, 0, 3, 3, 1, 3, 2, 0, 2, 3, 1, 3, 2, 3, 3, 2, 2, 4, 3, 1, 3, 2, 3, 3, 2, 2, 3, 2, 4, 0, 3, 0, 5], [96, 31, 78, 62, 37, 47, 1, 35, 47, 32, 7], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 1, 2, 3, 0, 0, 0], [91, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 3, 1, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.negative(grad), tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 5, 5, 2, 2, 5, 6, 4, 2, 0, 8, 6, 5, 2, 6, 0, 3, 4, 2, 4, 6, 4, 2, 0, 1, 0, 2, 2, 1, 2, 1, 9, 1, 2, 8, 5, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 1, 0, 1, 2, 3, 2, 0, 3, 3, 1, 3, 2, 0, 2, 3, 1, 3, 2, 3, 3, 2, 2, 4, 3, 1, 3, 2, 3, 3, 2, 2, 3, 2, 4, 0, 3, 0, 5], [96, 31, 78, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 2, 2, 3, 0, 0, 0], [91, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 16, 16, 9, 7, 1, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(alpha, tf.math.square(tf.math.add(beta, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))))), tf.math.divide_no_nan(alpha, tf.math.add(beta, beta)))))))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), beta))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.sqrt(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 2, 5, 3, 0, 2, 0, 6, 4, 2, 0, 8, 6, 5, 2, 6, 0, 3, 4, 2, 4, 6, 4, 2, 0, 1, 0, 2, 2, 1, 2, 1, 9, 1, 2, 8, 5, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 1, 0, 3, 2, 3, 2, 0, 3, 3, 1, 3, 2, 0, 2, 3, 1, 3, 2, 3, 3, 2, 2, 4, 3, 1, 3, 2, 3, 3, 2, 2, 3, 2, 4, 0, 3, 0, 5], [73, 31, 78, 62, 37, 47, 1, 35, 47, 32, 7], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 1, 2, 3, 0, 0, 0], [81, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, grad), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3022272788994913, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 2, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [74, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 5, 3, 0, 8, 0, 3, 4, 2, 0, 8, 6, 5, 2, 6, 0, 3, 4, 2, 4, 6, 4, 2, 0, 1, 0, 2, 2, 1, 2, 1, 9, 1, 2, 8, 5, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 1, 0, 3, 2, 3, 2, 0, 3, 3, 1, 3, 2, 0, 2, 3, 1, 3, 2, 3, 3, 2, 2, 4, 3, 1, 3, 2, 3, 3, 2, 2, 3, 2, 4, 0, 3, 0, 5], [96, 31, 78, 62, 37, 47, 1, 35, 47, 32, 7], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 1, 0, 1, 0, 1, 0, 1], [4, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 1, 2, 3, 0, 0, 0], [87, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 0, 13, 13, 8, 5, 1, 3, 1, 1, 0, 0, 3, 1, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.negative(grad))))), alpha)))), tf.math.add(beta, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), tf.math.multiply(grad, tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), alpha)", "other_info": {"loss": [2.3022272788994913, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09576013684272766, 0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09833333641290665, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 8, 5, 3, 5, 2, 9, 6, 4, 2, 0, 8, 6, 5, 2, 6, 0, 3, 4, 2, 4, 6, 4, 2, 0, 1, 0, 2, 2, 1, 2, 1, 9, 1, 2, 8, 5, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 1, 0, 3, 2, 3, 2, 0, 3, 3, 1, 3, 2, 0, 2, 3, 1, 3, 2, 3, 3, 2, 2, 4, 3, 1, 3, 2, 3, 3, 2, 2, 3, 2, 4, 0, 3, 0, 5], [96, 31, 78, 62, 37, 47, 1, 35, 47, 32, 7], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 3, 2, 3, 0, 0, 0], [59, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 5, 5, 3, 2, 0, 5, 5, 2, 3, 0, 3, 1, 2, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.square(tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, alpha), tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, alpha), tf.math.add(sigma, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 2, 5, 5, 2, 2, 5, 6, 4, 2, 0, 8, 6, 5, 2, 6, 0, 3, 4, 2, 4, 6, 4, 2, 0, 1, 0, 2, 2, 1, 2, 1, 9, 1, 2, 8, 5, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 1, 0, 1, 2, 3, 3, 0, 3, 3, 1, 3, 2, 0, 2, 3, 1, 3, 2, 3, 3, 2, 2, 4, 3, 1, 3, 2, 3, 3, 2, 2, 3, 2, 4, 0, 3, 0, 5], [73, 31, 78, 62, 37, 47, 1, 35, 47, 32, 7], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 1, 2, 3, 0, 0, 0], [84, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 2, 2, 1, 1, 0, 3, 1, 1, 0, 0, 5, 3, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.sqrt(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 3, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [9, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 2, 2, 2, 2, 2, 5, 6, 8, 2, 0, 8, 6, 5, 2, 6, 0, 3, 4, 2, 4, 6, 4, 2, 0, 1, 0, 2, 2, 1, 2, 1, 9, 1, 2, 8, 5, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 1, 3, 1, 3, 3, 2, 0, 3, 3, 1, 3, 2, 0, 2, 3, 1, 3, 2, 3, 3, 2, 2, 4, 3, 1, 3, 2, 3, 3, 2, 2, 3, 2, 4, 0, 3, 0, 5], [96, 31, 78, 62, 37, 47, 1, 35, 47, 32, 7], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 1, 2, 3, 0, 0, 0], [87, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 3, 3, 1, 16, 16, 9, 7, 0, 3, 1, 1, 0, 0, 5, 3, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.multiply(grad, tf.math.add(alpha, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(grad)))))))))), beta))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.sqrt(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 2, 5, 5, 2, 2, 5, 2, 4, 2, 0, 8, 6, 5, 2, 6, 0, 3, 4, 2, 4, 6, 4, 2, 0, 1, 0, 2, 2, 1, 2, 1, 9, 1, 2, 8, 5, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 1, 0, 0, 2, 3, 2, 0, 3, 3, 1, 3, 2, 0, 2, 3, 1, 3, 2, 3, 3, 2, 2, 4, 3, 1, 3, 2, 3, 3, 2, 2, 3, 2, 4, 0, 3, 0, 5], [5, 31, 78, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 2, 2, 3, 0, 0, 0], [87, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 8, 8, 5, 3, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.square(tf.math.square(tf.math.add(beta, tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 1, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [0, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 2, 5, 5, 2, 2, 5, 6, 4, 2, 0, 8, 6, 5, 2, 6, 0, 3, 4, 2, 4, 6, 4, 2, 0, 1, 0, 2, 2, 1, 2, 1, 9, 1, 2, 8, 5, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 1, 0, 1, 2, 3, 2, 0, 3, 3, 1, 3, 2, 0, 2, 3, 1, 3, 2, 3, 3, 2, 2, 4, 3, 1, 3, 2, 3, 3, 2, 2, 3, 2, 4, 0, 3, 0, 5], [73, 31, 78, 62, 37, 47, 1, 35, 47, 32, 7], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 1, 2, 3, 0, 0, 0], [59, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 4, 4, 2, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 1, 0, 1, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), grad)))), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3022272788994913, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 2, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 5, 3, 0, 2, 0, 1, 4, 2, 0, 8, 6, 5, 2, 6, 0, 3, 4, 2, 4, 6, 4, 2, 0, 1, 0, 2, 2, 1, 2, 1, 9, 1, 2, 8, 5, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 2, 0, 3, 2, 3, 2, 0, 3, 3, 1, 3, 2, 0, 2, 3, 1, 3, 2, 3, 3, 2, 2, 4, 3, 1, 3, 2, 3, 3, 2, 2, 3, 2, 4, 0, 3, 0, 5], [73, 31, 78, 62, 37, 47, 1, 35, 47, 32, 7], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 6, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 1, 2, 3, 0, 0, 0], [59, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 19, 19, 11, 8, 2, 5, 5, 2, 3, 0, 3, 1, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(beta, grad)), tf.math.add(beta, beta)))))))))), tf.math.negative(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, alpha), tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, alpha), tf.math.add(sigma, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0730418711900711, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 2, 5, 5, 2, 2, 5, 6, 4, 2, 0, 8, 6, 5, 2, 6, 0, 3, 4, 2, 4, 6, 4, 2, 0, 1, 0, 2, 2, 1, 2, 1, 9, 1, 2, 8, 5, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 1, 0, 1, 2, 3, 2, 0, 3, 3, 1, 3, 2, 0, 2, 3, 1, 3, 2, 3, 3, 2, 2, 4, 3, 1, 3, 2, 3, 3, 2, 2, 3, 2, 4, 0, 3, 0, 5], [96, 31, 78, 62, 37, 47, 1, 35, 47, 32, 7], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 0, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 1, 2, 3, 0, 0, 0], [87, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 3, 1, 1, 0, 0, 5, 3, 2, 1], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.sqrt(alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 8, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [3, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 2, 5, 2, 2, 2, 5, 6, 8, 2, 0, 8, 6, 5, 2, 6, 0, 3, 4, 2, 4, 6, 4, 2, 0, 1, 0, 2, 2, 1, 2, 1, 9, 1, 2, 8, 5, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 1, 3, 1, 3, 3, 2, 0, 3, 3, 1, 3, 2, 0, 2, 3, 1, 3, 2, 3, 3, 2, 2, 4, 3, 1, 3, 2, 3, 3, 2, 2, 3, 2, 4, 0, 3, 0, 5], [73, 31, 78, 62, 37, 47, 1, 35, 47, 32, 7], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 1, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 0, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 1, 2, 3, 0, 0, 0], [59, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 2, 2, 1, 1, 0, 5, 5, 2, 3, 0, 5, 3, 2, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(grad)), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, alpha), tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, alpha), tf.math.add(sigma, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.math.sqrt(tf.math.sqrt(alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 2, 5, 5, 2, 2, 5, 6, 4, 2, 0, 8, 6, 5, 2, 6, 0, 3, 4, 2, 4, 6, 4, 2, 0, 1, 0, 2, 2, 1, 2, 1, 9, 1, 2, 8, 5, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 1, 0, 3, 2, 3, 2, 0, 3, 3, 1, 3, 2, 0, 2, 3, 1, 3, 2, 3, 3, 2, 2, 4, 3, 1, 3, 2, 3, 3, 2, 2, 3, 2, 4, 0, 3, 0, 5], [96, 31, 78, 62, 37, 47, 1, 35, 47, 32, 7], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [59, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 2, 2, 1, 1, 0, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [1, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [9, 2, 5, 5, 2, 2, 5, 6, 4, 2, 0, 8, 6, 5, 2, 6, 0, 3, 4, 2, 4, 6, 4, 2, 0, 1, 0, 2, 2, 1, 2, 1, 9, 1, 2, 8, 5, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 1, 0, 1, 2, 3, 2, 0, 3, 3, 1, 3, 2, 0, 2, 3, 1, 3, 2, 3, 3, 2, 2, 4, 3, 1, 3, 2, 3, 3, 2, 2, 3, 2, 4, 0, 3, 0, 5], [96, 31, 78, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 3, 2, 3, 0, 0, 0], [87, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), sigma)", "other_info": {"loss": [2.302188166317419, 2.3023451217303204, 2.301869777656266, 2.3033453688850147, 2.3025887643876817, 2.301790293071406], "accuracy": [0.09021265059709549, 0.09074098616838455, 0.09959053993225098, 0.08651433140039444, 0.08387266844511032, 0.09074098616838455], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 6, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [5, 2, 5, 2, 2, 2, 5, 6, 4, 2, 0, 8, 6, 5, 2, 6, 0, 3, 4, 2, 4, 6, 4, 2, 0, 1, 0, 2, 2, 1, 2, 1, 9, 1, 2, 8, 5, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 1, 0, 3, 2, 3, 3, 0, 3, 3, 1, 3, 2, 0, 2, 3, 1, 3, 2, 3, 3, 2, 2, 4, 3, 1, 3, 2, 3, 3, 2, 2, 3, 2, 4, 0, 3, 0, 5], [96, 31, 78, 62, 37, 47, 1, 35, 47, 32, 7], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [9, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 1, 2, 3, 0, 0, 0], [91, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 8, 8, 4, 4, 1, 12, 12, 7, 5, 1, 1, 1, 1, 0, 1, 3, 1, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), grad)))))), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(beta)))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), alpha)", "other_info": {"loss": [2.302188166317419, 2.3023451217303204, 2.301869777656266, 2.3033453688850147, 2.3025887643876817, 2.301790293071406], "accuracy": [0.09021265059709549, 0.09074098616838455, 0.09959053993225098, 0.08651433140039444, 0.08387266844511032, 0.09074098616838455], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}]