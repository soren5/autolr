[{"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 6, 2, 1, 2, 0, 9, 4, 2, 5, 5, 5, 7, 8, 4, 0, 2, 3, 9, 9, 8, 2, 0, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 0, 0, 2, 0, 1, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1], [70, 83, 89, 75, 49, 58, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7871428728103638, "mapping_values": [1, 29, 29, 19, 10, 6, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.square(tf.math.square(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.add(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32))), grad)))))))), tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), grad)))), tf.math.multiply(alpha, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.283731746982196, 2.2320393111176418, 2.154364343427034, 2.0209235344989946, 1.8239669652741584, 1.6056189840464403, 1.417584246789869, 1.285429478352962, 1.1870748562473332, 1.1146455678359124, 1.0564859026631879, 1.0134425688696858, 0.98353570040742, 0.944233537979917, 0.9193624169630319, 0.8979355872834694, 0.8701426217017818, 0.8530773930325406, 0.8546555909451051, 0.8315694309449262, 0.8240365605108049, 0.7982246399224946, 0.801874461852328, 0.7825769269156213, 0.7757688356963729, 0.7747628983017193, 0.7566419780734602, 0.7576484812123192, 0.7422819405404443, 0.7439564722970871, 0.7327824184419363, 0.7312630518961891, 0.7284213876081826, 0.7195169245877113, 0.724001850678448, 0.7197760538323649, 0.6966411871775313, 0.6977214342126631, 0.6928334531609597, 0.6941938605196425, 0.6802871359526725, 0.6747865483603693, 0.676391971597834, 0.6664433977182247, 0.6613259485935916, 0.6700299132722102, 0.66375385534809, 0.6650056791044167, 0.6540212941884586, 0.6592421646147136, 0.6441599036393589, 0.6508737210316696, 0.6473007982732314], "accuracy": [0.13591335713863373, 0.26376965641975403, 0.34341567754745483, 0.40483424067497253, 0.44564786553382874, 0.49610355496406555, 0.5367851257324219, 0.5638620853424072, 0.5849953889846802, 0.6044115424156189, 0.6260731816291809, 0.6431118845939636, 0.6523576974868774, 0.6643772125244141, 0.6672830581665039, 0.6744155287742615, 0.6845859289169312, 0.6922467350959778, 0.6919825673103333, 0.7004358768463135, 0.7038700580596924, 0.7104741930961609, 0.7116629481315613, 0.7162858247756958, 0.7161537408828735, 0.7180029153823853, 0.7213049530982971, 0.7253995537757874, 0.7280412316322327, 0.7306828498840332, 0.7326641082763672, 0.7290979027748108, 0.7331924438476562, 0.7374191284179688, 0.737947404384613, 0.7429665923118591, 0.7380794882774353, 0.7437590956687927, 0.7423061728477478, 0.748249888420105, 0.7479857206344604, 0.7532690763473511, 0.7511557340621948, 0.7621186375617981, 0.7514199018478394, 0.7569673657417297, 0.7541936039924622, 0.7604015469551086, 0.7629110813140869, 0.7602694630622864, 0.7627789974212646, 0.7597411274909973, 0.7626469135284424], "val_loss": [1.926919596535819, 1.8667773519243513, 1.7652722086225237, 1.5982086317879813, 1.3759351117270333, 1.1584515571594238, 0.9980016776493618, 0.8917768001556396, 0.8192451681409564, 0.7675828763416835, 0.7296615668705532, 0.7007220983505249, 0.675144978931972, 0.6580991574696132, 0.6388402155467442, 0.6253465754645211, 0.6142979349408831, 0.6031111649104527, 0.5979443447930473, 0.5904336316244942, 0.5813192810331073, 0.572277341570173, 0.5675593955176217, 0.5636278390884399, 0.5537574631827218, 0.5489315646035331, 0.5465920652662005, 0.5390455722808838, 0.5400942053113665, 0.5299967016492572, 0.5268354756491525, 0.522403359413147, 0.5183421543666294, 0.5164529425757272, 0.5193336350577218, 0.5115911790302822, 0.5070563554763794, 0.5049139431544712, 0.5033250025340489, 0.5001129763466972, 0.49594289915902273, 0.49339817251477924, 0.4945728949138096, 0.4915217672075544, 0.48604645047869, 0.4885527065822056, 0.4810309750693185, 0.47812581062316895, 0.47683838435581755, 0.47637959889003206, 0.4745877470288958, 0.4720699446541922, 0.47589107922145296], "val_accuracy": [0.37166666984558105, 0.4463333189487457, 0.4986666738986969, 0.5603333115577698, 0.5926666855812073, 0.609666645526886, 0.6586666703224182, 0.6816666722297668, 0.6986666917800903, 0.7076666951179504, 0.7139999866485596, 0.7179999947547913, 0.7273333072662354, 0.7310000061988831, 0.7316666841506958, 0.7403333187103271, 0.7390000224113464, 0.7393333315849304, 0.7440000176429749, 0.7553333044052124, 0.7463333606719971, 0.7580000162124634, 0.7516666650772095, 0.7586666941642761, 0.7586666941642761, 0.7670000195503235, 0.7639999985694885, 0.7689999938011169, 0.7546666860580444, 0.7736666798591614, 0.7649999856948853, 0.7736666798591614, 0.777999997138977, 0.7756666541099548, 0.7723333239555359, 0.7826666831970215, 0.7739999890327454, 0.7776666879653931, 0.7803333401679993, 0.7773333191871643, 0.7850000262260437, 0.7773333191871643, 0.7793333530426025, 0.7816666960716248, 0.7900000214576721, 0.7856666445732117, 0.7960000038146973, 0.79666668176651, 0.7879999876022339, 0.7879999876022339, 0.7850000262260437, 0.793666660785675, 0.793666660785675]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [5, 3, 2, 1, 2, 6, 5, 4, 2, 5, 5, 5, 7, 8, 4, 0, 2, 3, 8, 9, 6, 8, 3, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 0, 0, 0, 1, 2, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1], [70, 83, 89, 41, 49, 58, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7865714430809021, "mapping_values": [1, 31, 31, 20, 11, 6, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.square(grad))), tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), grad)))))), tf.math.multiply(alpha, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.283731711019441, 2.2320385329743195, 2.154362183961225, 2.0209255025465853, 1.823986660172958, 1.605647613973571, 1.4176074189910515, 1.2854538046216228, 1.1870641003919709, 1.114629814401515, 1.0564425011132104, 1.0133844908784961, 0.9834755940711919, 0.9441851127290959, 0.9194144691143683, 0.89783299549491, 0.8701618664048335, 0.8529832870764047, 0.8546331714267477, 0.8316751933053752, 0.824150756121532, 0.7980883821850959, 0.8018434704286925, 0.7825351454294935, 0.7757503878659324, 0.774725976219865, 0.7566087404104854, 0.7578636932728896, 0.7421283754280861, 0.743891228782093, 0.732508176227429, 0.7314198945239708, 0.7284168900043391, 0.7194941828374015, 0.7239169600286725, 0.7196390000726127, 0.6965754907034518, 0.6977752081596179, 0.6927454964658918, 0.6943094423260939, 0.6804617356787961, 0.6746437528413347, 0.6763880128684754, 0.6662942716757604, 0.6612119699954168, 0.6699013887631375, 0.6637470304469989, 0.6652802519904718, 0.6539206500649216, 0.6592606103510007, 0.6436931819349563, 0.6509176004658821, 0.6474625515962998], "accuracy": [0.13591335713863373, 0.26376965641975403, 0.3431515097618103, 0.40470215678215027, 0.44564786553382874, 0.49649980664253235, 0.5370492935180664, 0.5643904209136963, 0.585391640663147, 0.6053361296653748, 0.6267336010932922, 0.6431118845939636, 0.6523576974868774, 0.6647734642028809, 0.6676793098449707, 0.6737551093101501, 0.6840575933456421, 0.6921146512031555, 0.6930392384529114, 0.7009642124176025, 0.7034738063812256, 0.7106062769889832, 0.7116629481315613, 0.7156254053115845, 0.7161537408828735, 0.7180029153823853, 0.7210407853126526, 0.7253995537757874, 0.7285695672035217, 0.7293620109558105, 0.7321357727050781, 0.7285695672035217, 0.7334566116333008, 0.7364945411682129, 0.7382115721702576, 0.7433628439903259, 0.7388719916343689, 0.7434949278831482, 0.7428345084190369, 0.7481178045272827, 0.7491744756698608, 0.7528728246688843, 0.7503632307052612, 0.761590301990509, 0.7530049085617065, 0.7565711140632629, 0.754589855670929, 0.7592127919197083, 0.7631752490997314, 0.7605336308479309, 0.7629110813140869, 0.76106196641922, 0.7631752490997314], "val_loss": [1.926919664655413, 1.8667747633797782, 1.7652720042637415, 1.5982178619929723, 1.3759524481637138, 1.158478089741298, 0.9980375426156181, 0.8918243816920689, 0.8192909445081439, 0.767611929348537, 0.7296583141599383, 0.7008128336497715, 0.675067629132952, 0.6580811057771955, 0.6388900279998779, 0.6253981249673026, 0.6144498756953648, 0.6030408825193133, 0.5975949934550694, 0.5903870037623814, 0.5813692467553275, 0.5722496850149972, 0.5675460270472935, 0.5638718094144549, 0.553692136492048, 0.5488289764949253, 0.5465035097939628, 0.5390771968024117, 0.5400274481092181, 0.5298101731709072, 0.5267628261021206, 0.5223734889711652, 0.5183563573019845, 0.5165634325572422, 0.5191184452601841, 0.511853780065264, 0.5070854766028268, 0.5048010178974697, 0.5036874158041817, 0.49996863092694965, 0.49591083186013357, 0.49314236640930176, 0.4943983895438058, 0.4911264181137085, 0.4862403529030936, 0.48836937972477507, 0.48082288673945833, 0.4780442714691162, 0.47680738994053434, 0.47628644534519743, 0.4746665784290859, 0.4719662666320801, 0.47541631971086773], "val_accuracy": [0.37166666984558105, 0.4463333189487457, 0.4986666738986969, 0.5603333115577698, 0.5929999947547913, 0.609666645526886, 0.6586666703224182, 0.6819999814033508, 0.6986666917800903, 0.7076666951179504, 0.7136666774749756, 0.7179999947547913, 0.7266666889190674, 0.7310000061988831, 0.7323333621025085, 0.7396666407585144, 0.7390000224113464, 0.7393333315849304, 0.7446666955947876, 0.7559999823570251, 0.7476666569709778, 0.7580000162124634, 0.7513333559036255, 0.7586666941642761, 0.7586666941642761, 0.7666666507720947, 0.7643333077430725, 0.7696666717529297, 0.7549999952316284, 0.7739999890327454, 0.7649999856948853, 0.7720000147819519, 0.777999997138977, 0.7756666541099548, 0.7720000147819519, 0.7826666831970215, 0.7733333110809326, 0.7763333320617676, 0.7806666493415833, 0.7770000100135803, 0.7860000133514404, 0.7786666750907898, 0.7796666622161865, 0.781333327293396, 0.7916666865348816, 0.7860000133514404, 0.7953333258628845, 0.7979999780654907, 0.7873333096504211, 0.7883333563804626, 0.7853333353996277, 0.7923333048820496, 0.7929999828338623]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 3, 2, 4, 2, 6, 5, 4, 2, 5, 5, 5, 7, 8, 4, 5, 5, 2, 9, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 2, 2, 0, 2, 1, 0, 1, 2, 2, 1, 0, 2, 1, 2, 0, 2, 1], [70, 83, 89, 75, 49, 58, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7865714430809021, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.28373174251047, 2.2320415779993503, 2.1543606830358097, 2.020898019995089, 1.823875628694205, 1.605511805306116, 1.417521079879915, 1.2853964753296427, 1.187034403296856, 1.114607527869772, 1.0564443089816833, 1.0133526250119727, 0.9834942238646696, 0.9441779160527914, 0.9194231008840921, 0.8978887748693068, 0.8701823515946193, 0.8530295526409791, 0.8546417916786275, 0.8316192092550366, 0.8241285435464704, 0.798155545101914, 0.8019502072947735, 0.7825362662896819, 0.7759747918980107, 0.7745997895575344, 0.7566702668031665, 0.7577307816305023, 0.7422174146902513, 0.7438668494038121, 0.7325564275139342, 0.731330021080198, 0.7283766304796335, 0.7194923152540653, 0.7238222789046409, 0.7196881899019951, 0.6965785980019917, 0.6976632589929218, 0.692978841855998, 0.694013257146968, 0.6805465500415544, 0.6746092919250914, 0.6764640414231426, 0.6664277493536449, 0.6610358076608255, 0.669849142028734, 0.6638311925045866, 0.6648678269447384, 0.6538037338025062, 0.6593619978281454, 0.6440434099629319, 0.650899000706973, 0.6473053650156287], "accuracy": [0.13591335713863373, 0.2639017403125763, 0.34328359365463257, 0.40470215678215027, 0.44525161385536194, 0.4962356388568878, 0.5369172096252441, 0.5635979175567627, 0.5851274728775024, 0.6044115424156189, 0.6264694333076477, 0.6431118845939636, 0.6523576974868774, 0.6650376319885254, 0.667811393737793, 0.6742834448814392, 0.6843217611312866, 0.6921146512031555, 0.6929071545600891, 0.7009642124176025, 0.7034738063812256, 0.711530864238739, 0.7113987803459167, 0.7162858247756958, 0.7153612375259399, 0.718399167060852, 0.7217012047767639, 0.7252674698829651, 0.7281733155250549, 0.7308149337768555, 0.7326641082763672, 0.728701651096344, 0.733588695526123, 0.7371549606323242, 0.7386078238487244, 0.7430986762046814, 0.7376832365989685, 0.7440232634544373, 0.7428345084190369, 0.7475894689559937, 0.7493065595626831, 0.752740740776062, 0.7514199018478394, 0.7609298825263977, 0.7532690763473511, 0.7568352818489075, 0.7541936039924622, 0.7605336308479309, 0.7630431652069092, 0.7601373791694641, 0.7619865536689758, 0.7602694630622864, 0.7626469135284424], "val_loss": [1.926919732775007, 1.8667843001229423, 1.7652627399989538, 1.598161050251552, 1.3757671969277518, 1.158393110547747, 0.9979736464364188, 0.8918039117540631, 0.8192089796066284, 0.7676123380661011, 0.7296518938882011, 0.7007695266178676, 0.6750794989722115, 0.6581519671848842, 0.6388267789568219, 0.625372188431876, 0.6142816202981132, 0.6030209575380597, 0.5979125329426357, 0.5905471188681466, 0.5815317801066807, 0.5722684008734567, 0.5674985647201538, 0.5638186761311123, 0.5538443326950073, 0.5487681456974575, 0.5466725485665458, 0.5392278262547084, 0.5402286733899798, 0.5299839121954781, 0.5269335338047573, 0.5225218193871635, 0.5184170518602643, 0.5165930986404419, 0.5191594873155866, 0.5116849286215646, 0.5071059124810355, 0.5048714365277972, 0.5032274893351963, 0.49997447218213764, 0.49574594838278635, 0.49309044224875315, 0.49475978102002827, 0.4914093017578125, 0.48599263599940706, 0.48838530267987934, 0.4809487887791225, 0.4779918704714094, 0.47673005717141287, 0.476539100919451, 0.4742925337382725, 0.4719425780432565, 0.4754068510872977], "val_accuracy": [0.37166666984558105, 0.4463333189487457, 0.4986666738986969, 0.5606666803359985, 0.5926666855812073, 0.609666645526886, 0.6589999794960022, 0.6819999814033508, 0.6983333230018616, 0.7073333263397217, 0.7136666774749756, 0.7179999947547913, 0.7273333072662354, 0.7319999933242798, 0.7323333621025085, 0.7406666874885559, 0.7390000224113464, 0.7400000095367432, 0.7440000176429749, 0.7553333044052124, 0.7473333477973938, 0.7586666941642761, 0.7523333430290222, 0.7580000162124634, 0.7576666474342346, 0.7673333287239075, 0.7643333077430725, 0.7703333497047424, 0.7546666860580444, 0.7733333110809326, 0.7643333077430725, 0.7733333110809326, 0.7770000100135803, 0.7763333320617676, 0.7716666460037231, 0.7829999923706055, 0.7743333578109741, 0.7753333449363708, 0.7796666622161865, 0.7773333191871643, 0.7850000262260437, 0.7776666879653931, 0.7786666750907898, 0.781333327293396, 0.7903333306312561, 0.7853333353996277, 0.7950000166893005, 0.7993333339691162, 0.7876666784286499, 0.7879999876022339, 0.7846666574478149, 0.7926666736602783, 0.7923333048820496]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [5, 2, 2, 1, 2, 6, 2, 9, 2, 5, 5, 5, 0, 5, 4, 3, 2, 3, 6, 6, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 2, 0, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 1, 2, 0, 2, 2], [70, 83, 89, 75, 49, 58, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7862856984138489, "mapping_values": [1, 44, 44, 27, 17, 3, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.square(grad))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.divide_no_nan(tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(grad, tf.math.square(grad))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))))), alpha))))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))), tf.math.add(alpha, grad))))))))), alpha)), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.283731778473225, 2.2320394235721053, 2.154364694300077, 2.0209230919555665, 1.823980487884075, 1.6056528543799293, 1.4176324583268232, 1.2854682624678586, 1.1871109655614793, 1.1146356411865752, 1.0564392559469462, 1.013363123380938, 0.9835060710888718, 0.9442195470905291, 0.919375874614829, 0.8978801175209951, 0.8700868993104016, 0.8530000276758277, 0.8546679494497783, 0.8315424026830117, 0.8241299519433699, 0.798226960575135, 0.8019189434265023, 0.7824745350557312, 0.775703185049613, 0.774807622207233, 0.756603177347046, 0.7576811134681379, 0.7421521326302379, 0.7437897222609867, 0.7325652189431741, 0.7314422161367198, 0.7281927096136745, 0.71928509442782, 0.7238399296262875, 0.7196897115012706, 0.6965155783204701, 0.6975940689198519, 0.6927205560119507, 0.6940712011123393, 0.680491378073994, 0.6747120258562821, 0.6763385923436888, 0.666310392319172, 0.6611090157057521, 0.6698030990427511, 0.6637985425193186, 0.6648740394083013, 0.6538875562450936, 0.6592272867647538, 0.6438825867588903, 0.6508591710505564, 0.6474251976386037], "accuracy": [0.13591335713863373, 0.26376965641975403, 0.34341567754745483, 0.40483424067497253, 0.44564786553382874, 0.495839387178421, 0.5365209579467773, 0.5641262531280518, 0.5851274728775024, 0.6048077940940857, 0.6267336010932922, 0.6433760523796082, 0.6522256135940552, 0.6646413803100586, 0.6671509742736816, 0.6749438643455505, 0.6843217611312866, 0.6919825673103333, 0.6927750706672668, 0.7005679607391357, 0.7034738063812256, 0.71100252866745, 0.7124554514884949, 0.7160216569900513, 0.7165499925613403, 0.717870831489563, 0.7202483415603638, 0.7255316376686096, 0.7284374833106995, 0.7309470176696777, 0.7327961921691895, 0.7292299270629883, 0.7342491149902344, 0.7367587089538574, 0.7386078238487244, 0.743891179561615, 0.7376832365989685, 0.7436270117759705, 0.7423061728477478, 0.7481178045272827, 0.7486461400985718, 0.7530049085617065, 0.7510236501693726, 0.7613261342048645, 0.7526086568832397, 0.7563069462776184, 0.7539294958114624, 0.7606657147407532, 0.7619865536689758, 0.7602694630622864, 0.7618544697761536, 0.7618544697761536, 0.7633073329925537], "val_loss": [1.926919732775007, 1.8667778287615096, 1.7652730260576521, 1.5982068947383337, 1.3759652546473913, 1.1585076536451067, 0.9980606351579938, 0.891873666218349, 0.819322041102818, 0.7676643814359393, 0.7296584163393293, 0.7007596492767334, 0.6751434803009033, 0.6581439290727887, 0.6387960229601178, 0.6253330366952079, 0.6142939499446324, 0.6030480010168893, 0.5977145774023873, 0.5904135022844587, 0.5814401592527118, 0.5721478802817208, 0.5674632787704468, 0.5637984275817871, 0.5536961214882987, 0.5485014404569354, 0.5464556217193604, 0.5388817276273455, 0.5399805137089321, 0.5297396012714931, 0.5268377917153495, 0.5224542447498867, 0.5183447258813041, 0.5166631766727993, 0.5192411967686245, 0.5117175579071045, 0.5069980791636876, 0.5046413625989642, 0.5034052814756121, 0.4996539184025356, 0.4955254111971174, 0.4932215894971575, 0.49470043182373047, 0.4913472277777536, 0.4861100401197161, 0.48848284993852886, 0.4809387581689017, 0.47782152039664133, 0.4766562155314854, 0.47633353301457, 0.47459069320133757, 0.4721409593309675, 0.475697466305324], "val_accuracy": [0.37166666984558105, 0.4463333189487457, 0.4986666738986969, 0.5603333115577698, 0.5926666855812073, 0.609333336353302, 0.6589999794960022, 0.6816666722297668, 0.6983333230018616, 0.7076666951179504, 0.7139999866485596, 0.7179999947547913, 0.7263333201408386, 0.731333315372467, 0.731333315372467, 0.7403333187103271, 0.7386666536331177, 0.7406666874885559, 0.7440000176429749, 0.7549999952316284, 0.746999979019165, 0.7573333382606506, 0.7513333559036255, 0.7583333253860474, 0.7583333253860474, 0.765999972820282, 0.7646666765213013, 0.7710000276565552, 0.7549999952316284, 0.7730000019073486, 0.7646666765213013, 0.7746666669845581, 0.7776666879653931, 0.7749999761581421, 0.7730000019073486, 0.7829999923706055, 0.7733333110809326, 0.7766666412353516, 0.7806666493415833, 0.7770000100135803, 0.7856666445732117, 0.7786666750907898, 0.7789999842643738, 0.7826666831970215, 0.7896666526794434, 0.7850000262260437, 0.7953333258628845, 0.7979999780654907, 0.7870000004768372, 0.7883333563804626, 0.7853333353996277, 0.7929999828338623, 0.7923333048820496]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [9, 6, 2, 1, 2, 6, 5, 4, 2, 5, 5, 5, 7, 8, 4, 0, 2, 3, 9, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 0, 0, 2, 1, 1, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1], [70, 83, 89, 75, 49, 58, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7862856984138489, "mapping_values": [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.2837321246855957, 2.232042104497861, 2.1543635337926834, 2.020921175757955, 1.8239607092033934, 1.6055534477829696, 1.41755646984449, 1.2854137650381352, 1.1870495217618942, 1.1146160414851558, 1.0564612272377452, 1.0133877985701978, 0.9835110259030898, 0.9441755540366847, 0.9194043821205852, 0.8978783370418445, 0.8701989128998698, 0.8529745730836047, 0.8546670885244144, 0.8315928915094596, 0.8242282616369413, 0.7981758951322041, 0.8018992168556005, 0.7826196903392639, 0.775823546493562, 0.774653711079323, 0.7567481875829, 0.7576712740961871, 0.7421335107646267, 0.7438659129157247, 0.7325872289994295, 0.7314465600328517, 0.7284164946187268, 0.7195217922505072, 0.7239761524952445, 0.7197203057994145, 0.6964559332727047, 0.6976532721012465, 0.6927735041302933, 0.6941472451054834, 0.680383399681975, 0.6746343300563312, 0.6765119151715763, 0.6663244265008518, 0.6611090964408771, 0.6697618567302731, 0.6638720378017917, 0.6649263682476896, 0.654024309840232, 0.6591287005563312, 0.6439837267480396, 0.6509833227862236, 0.6473120240455983], "accuracy": [0.13591335713863373, 0.26376965641975403, 0.34341567754745483, 0.40483424067497253, 0.445779949426651, 0.4962356388568878, 0.5371813774108887, 0.5641262531280518, 0.5856558084487915, 0.604939877986908, 0.6264694333076477, 0.6433760523796082, 0.6524897813796997, 0.6641130447387695, 0.6676793098449707, 0.6740192770957947, 0.6844538450241089, 0.6922467350959778, 0.6931713223457336, 0.7009642124176025, 0.7033417224884033, 0.71100252866745, 0.7116629481315613, 0.7157574892044067, 0.7153612375259399, 0.7182670831680298, 0.7207766771316528, 0.7257958054542542, 0.7284374833106995, 0.7310791015625, 0.7323999404907227, 0.7289658188819885, 0.7339849472045898, 0.7367587089538574, 0.737947404384613, 0.7433628439903259, 0.7380794882774353, 0.7436270117759705, 0.7429665923118591, 0.7485140562057495, 0.7486461400985718, 0.7531369924545288, 0.7511557340621948, 0.7614582180976868, 0.7532690763473511, 0.7574957013130188, 0.7541936039924622, 0.759609043598175, 0.7627789974212646, 0.7606657147407532, 0.7629110813140869, 0.7613261342048645, 0.763439416885376], "val_loss": [1.9269208226885115, 1.8667804173060827, 1.7652625356401717, 1.5982252189091273, 1.3758394718170166, 1.1584033966064453, 0.9979366915566581, 0.8917577947889056, 0.8192143610545567, 0.7676370825086322, 0.7296667269298008, 0.7008244139807565, 0.6751258032662528, 0.6581694058009556, 0.6388986451285226, 0.6253889288221087, 0.6143713848931449, 0.6030972174235752, 0.5976364953177316, 0.5904681852885655, 0.5814085517610822, 0.5722905908312116, 0.5675344807761056, 0.5639094625200544, 0.5538265364510673, 0.5487679243087769, 0.5465293100902012, 0.5391209295817784, 0.5402234963008335, 0.5299022368022374, 0.5270962374550956, 0.5223023550851005, 0.5183642080851963, 0.5164761543273926, 0.5190560988017491, 0.5117687157222203, 0.5072599138532367, 0.5048092433384487, 0.5031531878880092, 0.49990854944501606, 0.495679361479623, 0.4933835097721645, 0.49451591287340435, 0.49141407012939453, 0.4860232557569231, 0.48850388186318533, 0.48077993733542307, 0.4779202256883894, 0.47673543861934115, 0.4761954205376761, 0.47470009326934814, 0.4719310828617641, 0.47560060024261475], "val_accuracy": [0.3720000088214874, 0.4463333189487457, 0.4986666738986969, 0.5606666803359985, 0.5923333168029785, 0.609666645526886, 0.6589999794960022, 0.6819999814033508, 0.6986666917800903, 0.7080000042915344, 0.7136666774749756, 0.7179999947547913, 0.7273333072662354, 0.7310000061988831, 0.7319999933242798, 0.7396666407585144, 0.7393333315849304, 0.7390000224113464, 0.7446666955947876, 0.7553333044052124, 0.7463333606719971, 0.7576666474342346, 0.7513333559036255, 0.7583333253860474, 0.7580000162124634, 0.7673333287239075, 0.7646666765213013, 0.7699999809265137, 0.7543333172798157, 0.7733333110809326, 0.7649999856948853, 0.7733333110809326, 0.7776666879653931, 0.7753333449363708, 0.7723333239555359, 0.7826666831970215, 0.7733333110809326, 0.7746666669845581, 0.7806666493415833, 0.7770000100135803, 0.7856666445732117, 0.778333306312561, 0.7789999842643738, 0.781333327293396, 0.7910000085830688, 0.7860000133514404, 0.7953333258628845, 0.7986666560173035, 0.7873333096504211, 0.7889999747276306, 0.7850000262260437, 0.7923333048820496, 0.7926666736602783]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [5, 2, 2, 1, 0, 6, 2, 9, 2, 5, 5, 5, 0, 5, 4, 3, 2, 3, 6, 6, 6, 4, 3, 5, 8, 4, 9, 4, 1, 4], [2, 0, 2, 2, 0, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 1, 2, 0, 2, 2], [70, 83, 89, 75, 49, 58, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7862856984138489, "mapping_values": [1, 42, 42, 27, 15, 4, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))))), tf.math.negative(tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.divide_no_nan(tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(grad, tf.math.square(grad))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))))), alpha))))))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))))))))), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.2837321246855957, 2.2320415016965875, 2.1543595617347466, 2.0209166860977232, 1.823964302565963, 1.6055650606194445, 1.4175536502007526, 1.2854196109854865, 1.1869996717939477, 1.1146037209192996, 1.0564706665791572, 1.0133986740757241, 0.9834761474236773, 0.9442073494577767, 0.919406482627316, 0.8978662220494245, 0.8701560862107505, 0.8530229739682423, 0.8547144519685991, 0.8315854638070951, 0.8241174131053204, 0.7982045047318758, 0.8019567859281466, 0.7826117301393478, 0.7758599123729927, 0.7747355124906636, 0.756787049929385, 0.7577497501336131, 0.742309313148886, 0.7437786228306273, 0.7326627177033899, 0.7314340057090887, 0.7283343287695826, 0.7194353144292613, 0.7239830888667048, 0.7196308872750438, 0.6966290100926752, 0.6977724060642564, 0.6928222897093388, 0.6942141682968447, 0.6803520522680044, 0.6747015314473137, 0.6764035069427596, 0.6663324346537319, 0.6611200266856843, 0.6697745097390476, 0.6638403791777289, 0.6652140055649379, 0.6541050526648937, 0.6591661577258742, 0.6439632717187866, 0.650949703278779, 0.6474013754074773], "accuracy": [0.13591335713863373, 0.26376965641975403, 0.34341567754745483, 0.40509840846061707, 0.445779949426651, 0.4963677227497101, 0.5374455451965332, 0.564258337020874, 0.5860520601272583, 0.6046757102012634, 0.6264694333076477, 0.6432439684867859, 0.652621865272522, 0.6645092964172363, 0.6676793098449707, 0.6738871932029724, 0.6847180128097534, 0.6922467350959778, 0.6927750706672668, 0.7009642124176025, 0.7037379741668701, 0.7111346125602722, 0.7120591998100281, 0.7157574892044067, 0.7161537408828735, 0.718399167060852, 0.7211728692054749, 0.724739134311676, 0.7280412316322327, 0.7301545143127441, 0.7323999404907227, 0.7285695672035217, 0.7327961921691895, 0.7368907928466797, 0.7380794882774353, 0.7428345084190369, 0.7390040755271912, 0.7437590956687927, 0.7427024245262146, 0.7483819723129272, 0.748778223991394, 0.7526086568832397, 0.7504953145980835, 0.7614582180976868, 0.752740740776062, 0.7564390301704407, 0.7534011602401733, 0.7604015469551086, 0.7631752490997314, 0.7602694630622864, 0.7619865536689758, 0.7604015469551086, 0.7630431652069092], "val_loss": [1.9269208226885115, 1.8667765344892229, 1.7652573585510254, 1.5982173851558141, 1.3758630752563477, 1.1583905560629708, 0.9979726246425084, 0.8917583056858608, 0.819212521825518, 0.7676272732870919, 0.7296601363590786, 0.7008227109909058, 0.67510039465768, 0.6581569569451469, 0.638859646660941, 0.6252942425864083, 0.6143638065883091, 0.6031161546707153, 0.5978947707584926, 0.5903438329696655, 0.5813625710351127, 0.572247930935451, 0.5674362693514142, 0.5636761869703021, 0.5538117715290615, 0.5489329610552106, 0.5468798364911761, 0.5391651902879987, 0.5402250971112933, 0.5300147363117763, 0.5269012791769845, 0.5225156205041068, 0.5182565450668335, 0.5166492973055158, 0.519122668675014, 0.5118330717086792, 0.5071126733507428, 0.5048839535032, 0.5034253256661552, 0.49992494923727854, 0.49582609108516146, 0.493166310446603, 0.4942030055182321, 0.49125470433916363, 0.48587468692234587, 0.4884772300720215, 0.4808303117752075, 0.47813531330653597, 0.47672367095947266, 0.47629106044769287, 0.47454254967825754, 0.47229806014469694, 0.47545662948063444], "val_accuracy": [0.3720000088214874, 0.4463333189487457, 0.4986666738986969, 0.5609999895095825, 0.5926666855812073, 0.609666645526886, 0.6589999794960022, 0.6809999942779541, 0.6983333230018616, 0.7076666951179504, 0.7136666774749756, 0.7183333039283752, 0.7269999980926514, 0.731333315372467, 0.7323333621025085, 0.7406666874885559, 0.7390000224113464, 0.7396666407585144, 0.7443333268165588, 0.7559999823570251, 0.746666669845581, 0.7576666474342346, 0.7516666650772095, 0.7583333253860474, 0.7583333253860474, 0.7666666507720947, 0.7643333077430725, 0.7696666717529297, 0.7549999952316284, 0.7733333110809326, 0.7663333415985107, 0.7749999761581421, 0.777999997138977, 0.7739999890327454, 0.7726666927337646, 0.7829999923706055, 0.7736666798591614, 0.7760000228881836, 0.7806666493415833, 0.7766666412353516, 0.7846666574478149, 0.777999997138977, 0.7799999713897705, 0.781333327293396, 0.7910000085830688, 0.7860000133514404, 0.7956666946411133, 0.7976666688919067, 0.7873333096504211, 0.7870000004768372, 0.7850000262260437, 0.7923333048820496, 0.7929999828338623]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], [4, 5, 0, 1, 2, 8, 2, 5, 2, 6, 6, 2, 4, 6, 2, 4, 2, 3, 3, 2, 4, 4, 9, 4, 0, 4, 5, 4, 1, 4], [2, 0, 2, 2, 0, 0, 1, 1, 0, 1, 2, 2, 1, 0, 2, 1, 2, 0, 2, 1], [70, 55, 42, 11, 68, 58, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7862856984138489, "mapping_values": [1, 44, 44, 25, 19, 7, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 59, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.sqrt(grad), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.multiply(tf.math.add(alpha, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(alpha, alpha), grad)))), grad)))), alpha)), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))))), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.28373174251047, 2.2320386004281034, 2.154357807275059, 2.0209240137609616, 1.8239723335026026, 1.6056379530770257, 1.4176002552386178, 1.285464185906943, 1.1870636046129588, 1.1146238514020097, 1.0564701783107555, 1.0133994046361015, 0.9835404758566108, 0.9442309473546867, 0.9193846916384024, 0.8978995183644404, 0.8701841028973316, 0.8530260106402775, 0.8547924564908509, 0.8316201366894532, 0.8241095173675402, 0.798362258938341, 0.8018883859964804, 0.7826303443605118, 0.7759366397214619, 0.7747137452696041, 0.7566945715477091, 0.7577190208964107, 0.7422235257841924, 0.7438565679607988, 0.7325317316665594, 0.7315612077996432, 0.7283172924142898, 0.7194558250637985, 0.7239262294602384, 0.7199057188520279, 0.6966853820967431, 0.6977533360734324, 0.6927283280765879, 0.6940642539315834, 0.6805396779275384, 0.6746162890584918, 0.676335153846126, 0.6664710534546338, 0.6611750646904081, 0.669854250637264, 0.663835460090083, 0.664973514836777, 0.6539369489633018, 0.6590908374044449, 0.6437565271156245, 0.6510767287440257, 0.6473533765373134], "accuracy": [0.13591335713863373, 0.26376965641975403, 0.34328359365463257, 0.40483424067497253, 0.44564786553382874, 0.49610355496406555, 0.5371813774108887, 0.5641262531280518, 0.5856558084487915, 0.6046757102012634, 0.62660151720047, 0.6428477168083191, 0.6523576974868774, 0.6642451286315918, 0.6671509742736816, 0.6740192770957947, 0.6847180128097534, 0.6921146512031555, 0.6930392384529114, 0.7009642124176025, 0.7038700580596924, 0.7108704447746277, 0.7107383608818054, 0.7157574892044067, 0.7164179086685181, 0.7185312509536743, 0.7209087014198303, 0.7253995537757874, 0.7281733155250549, 0.7308149337768555, 0.7322678565979004, 0.7293620109558105, 0.7334566116333008, 0.7371549606323242, 0.7386078238487244, 0.7436270117759705, 0.7383436560630798, 0.7433628439903259, 0.7429665923118591, 0.7485140562057495, 0.748249888420105, 0.7524765729904175, 0.750759482383728, 0.7609298825263977, 0.7524765729904175, 0.7568352818489075, 0.7539294958114624, 0.7609298825263977, 0.7633073329925537, 0.7594769597053528, 0.7622507214546204, 0.7609298825263977, 0.7631752490997314], "val_loss": [1.926919800894601, 1.8667748996189661, 1.7652688026428223, 1.5982046808515276, 1.3759548664093018, 1.1584581988198417, 0.9980330126626151, 0.8918305124555316, 0.8192769459315709, 0.7676282439913068, 0.7296811853136335, 0.7008265597479684, 0.6751114811216082, 0.6581956829343524, 0.6388780559812274, 0.6253450427736554, 0.6143655266080584, 0.6031527689525059, 0.5979475634438651, 0.5906808887209211, 0.5813257353646415, 0.5723845788410732, 0.5674562965120588, 0.5638082027435303, 0.5537318502153669, 0.5487563780375889, 0.5468034744262695, 0.5391115631375994, 0.5400363717760358, 0.5299805913652692, 0.526813234601702, 0.5225884573800224, 0.518339855330331, 0.5166762386049543, 0.519371611731393, 0.5120119537625994, 0.507223299571446, 0.5049418721880231, 0.5031571388244629, 0.5000827312469482, 0.4958616665431431, 0.4934502329145159, 0.49465065343039377, 0.4915001903261457, 0.48610775811331614, 0.48834143366132465, 0.48106636319841656, 0.4781334400177002, 0.47660953657967703, 0.4761467661176409, 0.47476255893707275, 0.4720092500959124, 0.475657446043832], "val_accuracy": [0.37166666984558105, 0.4463333189487457, 0.49900001287460327, 0.5603333115577698, 0.5929999947547913, 0.609666645526886, 0.6586666703224182, 0.6816666722297668, 0.6983333230018616, 0.7073333263397217, 0.7136666774749756, 0.7183333039283752, 0.7269999980926514, 0.7310000061988831, 0.7319999933242798, 0.7400000095367432, 0.7390000224113464, 0.7390000224113464, 0.7440000176429749, 0.7549999952316284, 0.746666669845581, 0.7586666941642761, 0.7523333430290222, 0.7580000162124634, 0.7586666941642761, 0.7666666507720947, 0.7646666765213013, 0.7699999809265137, 0.7543333172798157, 0.7736666798591614, 0.765999972820282, 0.7730000019073486, 0.7770000100135803, 0.7746666669845581, 0.7726666927337646, 0.7829999923706055, 0.7736666798591614, 0.7760000228881836, 0.7803333401679993, 0.7770000100135803, 0.7853333353996277, 0.777999997138977, 0.7796666622161865, 0.7820000052452087, 0.7903333306312561, 0.7856666445732117, 0.7963333129882812, 0.7986666560173035, 0.7873333096504211, 0.7876666784286499, 0.7846666574478149, 0.7926666736602783, 0.7926666736602783]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [2, 6, 5, 1, 2, 2, 5, 1, 2, 5, 5, 5, 7, 8, 4, 0, 2, 3, 9, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 1, 2, 0, 0, 2, 1, 2, 1, 2, 2, 1, 0, 2, 1, 2, 1, 2, 1, 0], [70, 83, 93, 75, 78, 83, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7860000133514404, "mapping_values": [1, 17, 17, 9, 8, 3, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha))), tf.math.square(tf.math.subtract(grad, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.add(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))))), alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.283732156176624, 2.2320415511689937, 2.1543600116470754, 2.0209155230710474, 1.8239542629583054, 1.605540590405291, 1.4175341113400008, 1.2853946735389385, 1.187028792776436, 1.1145835819655028, 1.0564685236933744, 1.0133637160421, 0.9834641842416343, 0.9442461887607013, 0.9193719697115112, 0.8979156711523197, 0.8701260182615348, 0.8530957916188848, 0.8546884956927961, 0.8315372298878921, 0.8240844716233443, 0.7981373314151454, 0.8019932724418358, 0.7826393093761751, 0.7759020975898553, 0.7746713459452366, 0.7566559681834452, 0.7577320172282541, 0.7421810782313142, 0.7438735102523887, 0.732558723383135, 0.7314141164712776, 0.7284648848436512, 0.7194821736863292, 0.7238572041639767, 0.7197505815736748, 0.6967816863864909, 0.6976895532619369, 0.6929675434180821, 0.6942497823594537, 0.6804639415151454, 0.6747098202876065, 0.6764272634127452, 0.6663380883877161, 0.6612825851005224, 0.6697498519800721, 0.663844814216771, 0.6652076508170341, 0.6540290052313547, 0.6594112493327077, 0.6437895477896652, 0.6510586299601484, 0.6475653276388688], "accuracy": [0.13591335713863373, 0.26376965641975403, 0.34341567754745483, 0.40509840846061707, 0.445779949426651, 0.4963677227497101, 0.5374455451965332, 0.5639941692352295, 0.5857878923416138, 0.6045436263084412, 0.62660151720047, 0.6433760523796082, 0.6523576974868774, 0.6645092964172363, 0.6668868064880371, 0.674679696559906, 0.6844538450241089, 0.691850483417511, 0.6929071545600891, 0.7009642124176025, 0.7038700580596924, 0.7112666964530945, 0.7116629481315613, 0.7161537408828735, 0.7164179086685181, 0.7177387475967407, 0.720380425453186, 0.7255316376686096, 0.7289658188819885, 0.7306828498840332, 0.7325320243835449, 0.728701651096344, 0.7334566116333008, 0.7368907928466797, 0.7390040755271912, 0.7429665923118591, 0.7386078238487244, 0.7437590956687927, 0.7427024245262146, 0.7477215528488159, 0.748249888420105, 0.752212405204773, 0.7497028112411499, 0.7623828053474426, 0.7528728246688843, 0.7560427784919739, 0.7543256878852844, 0.7600052952766418, 0.7635715007781982, 0.7605336308479309, 0.7625148296356201, 0.7607977986335754, 0.7623828053474426], "val_loss": [1.9269209589276994, 1.8667774200439453, 1.7652572223118372, 1.59821731703622, 1.3758243833269392, 1.1583738327026367, 0.9979303564344134, 0.8917293548583984, 0.8191526787621635, 0.7675646543502808, 0.7296191624232701, 0.700765575681414, 0.6751258884157453, 0.6581062929970878, 0.6388754504067558, 0.6253243684768677, 0.614447798047747, 0.6031756401062012, 0.5977143560137067, 0.590465784072876, 0.5813434634889875, 0.5722707850592477, 0.5674986498696464, 0.5637042352131435, 0.5536292961665562, 0.5486911194665092, 0.546696662902832, 0.5391630274908883, 0.5399868488311768, 0.529896650995527, 0.5262927838734218, 0.5223717178617205, 0.5183441298348563, 0.5165441887719291, 0.5193349974496024, 0.5118343659809658, 0.5070950984954834, 0.5050339017595563, 0.5034415210996356, 0.49992566449301584, 0.495701721736363, 0.49319631712777273, 0.49466034344264437, 0.4914020470210484, 0.4859941005706787, 0.4883382661002023, 0.4809551239013672, 0.47803822585514616, 0.4766998972211565, 0.4763982466288975, 0.47457466806684223, 0.47212868077414377, 0.475859318460737], "val_accuracy": [0.3720000088214874, 0.4463333189487457, 0.4986666738986969, 0.5609999895095825, 0.5923333168029785, 0.609333336353302, 0.6589999794960022, 0.6809999942779541, 0.6983333230018616, 0.7076666951179504, 0.7133333086967468, 0.7183333039283752, 0.7263333201408386, 0.7316666841506958, 0.7319999933242798, 0.7400000095367432, 0.7390000224113464, 0.7396666407585144, 0.7443333268165588, 0.7559999823570251, 0.7473333477973938, 0.7583333253860474, 0.7523333430290222, 0.7576666474342346, 0.7583333253860474, 0.7670000195503235, 0.7646666765213013, 0.7699999809265137, 0.7546666860580444, 0.7730000019073486, 0.765999972820282, 0.7749999761581421, 0.7763333320617676, 0.7746666669845581, 0.7726666927337646, 0.7833333611488342, 0.7733333110809326, 0.7770000100135803, 0.7803333401679993, 0.7773333191871643, 0.7856666445732117, 0.777999997138977, 0.7796666622161865, 0.7823333144187927, 0.7916666865348816, 0.7863333225250244, 0.7946666479110718, 0.7990000247955322, 0.7876666784286499, 0.7883333563804626, 0.7846666574478149, 0.7929999828338623, 0.7926666736602783]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], [5, 0, 2, 1, 2, 6, 3, 4, 0, 5, 5, 5, 8, 5, 4, 0, 2, 3, 6, 6, 3, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 2, 0, 0, 2, 1, 0, 1, 2, 2, 1, 0, 2, 1, 2, 0, 2, 1], [22, 83, 42, 11, 68, 83, 99, 44], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 0, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0754193663597107, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 2, 1, 2, 6, 2, 4, 0, 6, 5, 5, 7, 5, 4, 0, 2, 3, 6, 6, 3, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 2, 2, 0, 2, 1, 0, 1, 2, 2, 1, 0, 2, 1, 2, 0, 2, 1], [70, 83, 69, 75, 78, 83, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 1], [3, 4, 2], [2, 0, 1, 5, 3, 4], [22], [0, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 21, 21, 12, 9, 3, 1, 1, 0, 1, 0, 7, 5, 3, 2, 1, 5, 3, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, grad), grad), tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))), tf.math.negative(grad))), tf.math.divide_no_nan(tf.math.square(tf.math.square(alpha)), tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, beta), tf.math.add(sigma, tf.math.add(sigma, sigma)))), tf.math.add(sigma, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.square(sigma), tf.math.square(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 2, 1, 2, 6, 2, 4, 0, 5, 5, 5, 7, 5, 4, 0, 2, 3, 6, 6, 3, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 0, 0, 2, 1, 0, 1, 2, 2, 1, 0, 2, 1, 2, 0, 2, 1], [70, 83, 42, 11, 68, 83, 99, 44], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [4, 4], [2, 0, 1, 5, 3, 4], [85], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 20, 20, 12, 8, 3, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(grad, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, alpha), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))), tf.math.negative(grad))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(alpha)))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 8, 5, 2, 6, 2, 4, 0, 5, 5, 5, 7, 5, 4, 0, 2, 3, 6, 6, 3, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 2, 0, 2, 2, 1, 0, 1, 2, 2, 1, 0, 2, 1, 2, 0, 2, 1], [70, 83, 69, 75, 78, 83, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [1, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [28], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 1, 15, 15, 8, 7, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.sqrt(grad), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(tf.math.add(beta, tf.math.subtract(grad, beta)), tf.math.pow(grad, tf.math.negative(grad)))), tf.math.pow(tf.math.pow(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [4, 5, 0, 1, 2, 3, 2, 5, 2, 6, 6, 2, 1, 6, 5, 4, 6, 3, 9, 0, 6, 4, 9, 4, 0, 4, 5, 8, 1, 4], [2, 0, 2, 2, 0, 0, 2, 1, 2, 1, 2, 2, 1, 0, 2, 1, 2, 1, 2, 1, 0], [70, 78, 23, 75, 51, 80, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 4, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.06142857298254967, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3021583402507955, 2.301404137133355, 2.301457494745291, 2.3009199457807217, 2.3007006839187376, 2.30157124389983, 2.3000279035330164, 2.2998371741491743, 2.299598392887894, 2.2994813551252165, 2.2988550761876216, 2.300022335604213, 2.2998217333104742, 2.299828503188865], "accuracy": [0.08598599582910538, 0.09972262382507324, 0.09087307006120682, 0.09272222965955734, 0.09338264167308807, 0.09232597798109055, 0.09509972482919693, 0.1002509593963623, 0.10196803510189056, 0.09760929644107819, 0.10342095047235489, 0.09694888442754745, 0.09325055778026581, 0.09774138033390045], "val_loss": [1.970338957650321, 1.969883714403425, 1.9697021075657435, 1.9694266319274902, 1.9693634169442313, 1.9693571499415807, 1.969322340829032, 1.9692652566092355, 1.9692369188581194, 1.9694361005510603, 1.969635077885219, 1.9698664120265417, 1.9700704983302526, 1.9702681813921248], "val_accuracy": [0.04699999839067459, 0.0533333346247673, 0.0560000017285347, 0.06266666948795319, 0.06466666609048843, 0.0689999982714653, 0.07366666942834854, 0.07533333450555801, 0.07666666805744171, 0.07400000095367432, 0.07199999690055847, 0.07233333587646484, 0.07266666740179062, 0.07400000095367432]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [9, 2, 3, 0, 5, 6, 6, 3, 2, 5, 4, 5, 7, 2, 4, 0, 9, 3, 6, 1, 6, 8, 3, 5, 8, 4, 5, 4, 1, 4], [2, 1, 2, 2, 0, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 1, 2, 0, 2, 2], [70, 80, 8, 75, 73, 58, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [1, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [4, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.302524825191737, 2.302498806862862, 2.3029753699231503, 2.3029208488121733, 2.303151069709638, 2.3043065670380236], "accuracy": [0.08492933213710785, 0.09681680053472519, 0.08757099509239197, 0.08955223858356476, 0.08770307898521423, 0.08558975160121918], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 8, 1, 3, 6, 2, 4, 0, 5, 5, 5, 7, 5, 4, 0, 2, 3, 6, 6, 3, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 2, 0, 0, 2, 1, 0, 1, 2, 2, 1, 0, 2, 1, 2, 0, 2, 1], [70, 83, 56, 75, 78, 83, 99, 44], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 1, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [28], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 16, 16, 9, 7, 3, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.sqrt(grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(tf.math.pow(grad, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)))))), grad)))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.302524825191737, 2.302498806862862, 2.3029753699231503, 2.3029208488121733, 2.303151069709638, 2.3043065670380236], "accuracy": [0.08492933213710785, 0.09681680053472519, 0.08757099509239197, 0.08955223858356476, 0.08770307898521423, 0.08558975160121918], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [5, 2, 2, 1, 2, 6, 5, 9, 2, 3, 5, 5, 0, 5, 5, 3, 2, 3, 6, 6, 6, 2, 8, 8, 8, 4, 5, 4, 1, 4], [2, 1, 2, 2, 0, 1, 1, 1, 2, 2, 2, 1, 1, 1, 2, 1, 2, 0, 2, 2], [70, 83, 89, 75, 49, 58, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [1, 0, 0, 0, 1], [0, 1, 1, 0], [4, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 32, 32, 20, 12, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))), alpha), tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.square(grad))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.negative(tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.multiply(alpha, tf.math.add(alpha, alpha))))))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.multiply(tf.math.divide_no_nan(grad, tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.302524825191737, 2.302498806862862, 2.3029753699231503, 2.3029208488121733, 2.303151069709638, 2.3043065670380236], "accuracy": [0.08492933213710785, 0.09681680053472519, 0.08757099509239197, 0.08955223858356476, 0.08770307898521423, 0.08558975160121918], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 2, 1, 2, 6, 2, 9, 3, 2, 5, 5, 0, 5, 4, 3, 2, 8, 6, 6, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 1, 2, 0, 2, 2], [70, 83, 42, 18, 51, 83, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [1, 0, 0, 0, 1, 0, 1], [0, 1, 0, 0, 1], [3, 4, 1], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 22, 22, 14, 8, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.square(tf.math.add(alpha, alpha))))))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.square(alpha))))))))), tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.302524825191737, 2.302498806862862, 2.3029753699231503, 2.3029208488121733, 2.303151069709638, 2.3043065670380236], "accuracy": [0.08492933213710785, 0.09681680053472519, 0.08757099509239197, 0.08955223858356476, 0.08770307898521423, 0.08558975160121918], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [4, 5, 0, 1, 2, 4, 2, 5, 0, 6, 6, 2, 1, 6, 6, 4, 2, 2, 3, 0, 3, 2, 9, 3, 0, 4, 5, 1, 1, 4], [2, 0, 2, 2, 0, 0, 1, 0, 2, 1, 2, 2, 1, 0, 2, 1, 2, 1, 2, 1, 0], [70, 78, 23, 75, 68, 80, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 1, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 43, 43, 25, 18, 6, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.square(tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.pow(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), grad), tf.math.add(tf.math.square(grad), tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), alpha)), tf.math.divide_no_nan(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, grad))), alpha))))), tf.math.multiply(tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), alpha))))))), tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(alpha))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.302524825191737, 2.302498806862862, 2.3029753699231503, 2.3029208488121733, 2.303151069709638, 2.3043065670380236], "accuracy": [0.08492933213710785, 0.09681680053472519, 0.08757099509239197, 0.08955223858356476, 0.08770307898521423, 0.08558975160121918], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 6, 2, 1, 2, 6, 1, 4, 2, 5, 5, 5, 7, 8, 4, 0, 2, 3, 8, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 0, 0, 2, 1, 1, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1], [70, 92, 66, 75, 51, 83, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 1, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 19, 19, 10, 9, 3, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(grad, tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.add(alpha, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)), tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(grad, alpha))))), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.square(grad)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.302524825191737, 2.302498806862862, 2.3029753699231503, 2.3029208488121733, 2.303151069709638, 2.3043065670380236], "accuracy": [0.08492933213710785, 0.09681680053472519, 0.08757099509239197, 0.08955223858356476, 0.08770307898521423, 0.08558975160121918], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [5, 2, 2, 1, 2, 6, 2, 9, 5, 5, 5, 5, 0, 5, 4, 3, 2, 3, 6, 6, 6, 2, 3, 5, 2, 4, 5, 4, 1, 4], [2, 0, 2, 2, 0, 1, 2, 1, 2, 2, 2, 2, 1, 1, 2, 1, 1, 0, 2, 2], [2, 83, 26, 75, 49, 58, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1, 0, 1, 1, 0], [0, 1, 0, 0, 0, 1], [3, 4, 3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 26, 26, 17, 9, 3, 1, 1, 0, 1, 0, 9, 6, 4, 2, 1, 1, 0, 1, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))))))))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), tf.math.add(alpha, grad))))))), tf.math.add(alpha, alpha)))), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, tf.math.pow(sigma, sigma)))), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.302524825191737, 2.302498806862862, 2.3029753699231503, 2.3029208488121733, 2.303151069709638, 2.3043065670380236], "accuracy": [0.08492933213710785, 0.09681680053472519, 0.08757099509239197, 0.08955223858356476, 0.08770307898521423, 0.08558975160121918], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}]