[{"genotype": [[0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 2, 6, 1, 8, 2, 9, 1, 2, 8, 5, 6, 4, 3, 9, 8, 2, 8, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 2, 0, 2, 1, 2, 2, 1, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [97, 44, 89, 16, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4, 4], [2, 0, 1, 5, 3, 4], [49], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7977142930030823, "mapping_values": [1, 5, 5, 2, 3, 2, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.2143193724731396, 2.1182693400954244, 1.8105846648014075, 1.6431285230915984, 1.3627766946586777, 1.1039914529022208, 1.0081742286934057, 0.8243350586902511, 0.8054322972667373, 0.7797976176594825, 0.740033945733719, 0.7365822833700109, 0.6652757333427483, 0.657208049317802, 0.629440166261832, 0.6239337471450687, 0.6014884030892943, 0.5661327205455661, 0.5803290527289837, 0.5948916797026383, 0.5979632450416025, 0.5548299044988663, 0.5404411162942424, 0.5365573296520484], "accuracy": [0.2847708463668823, 0.27961960434913635, 0.39624884724617004, 0.4255712628364563, 0.5259543061256409, 0.5943732857704163, 0.6415268778800964, 0.6914542317390442, 0.6952846646308899, 0.7016246318817139, 0.7220974564552307, 0.7170783281326294, 0.7494386434555054, 0.7479857206344604, 0.7552502751350403, 0.7613261342048645, 0.7618544697761536, 0.7839123010635376, 0.7876105904579163, 0.7777044177055359, 0.7874785661697388, 0.7906485199928284, 0.7938185334205627, 0.7998943328857422], "val_loss": [1.9384633472987585, 1.3084462029593331, 1.1510954584394182, 1.1388322966439384, 0.8990632806505475, 0.7322029726845878, 0.7064614295959473, 0.6099813154765538, 0.6379198857716152, 0.5488894496645246, 0.5521679776055473, 0.6129505464008876, 0.49325670514787945, 0.49183586665562223, 0.5245403562273298, 0.48362505435943604, 0.4723660945892334, 0.4768421820231846, 0.43354188544409616, 0.4620410033634731, 0.46943841661725727, 0.45466761929648264, 0.4612124136516026, 0.4362272620201111], "val_accuracy": [0.19866666197776794, 0.531333327293396, 0.5886666774749756, 0.6259999871253967, 0.5669999718666077, 0.6683333516120911, 0.6656666398048401, 0.7089999914169312, 0.7126666903495789, 0.7289999723434448, 0.7406666874885559, 0.7203333377838135, 0.7746666669845581, 0.7776666879653931, 0.7606666684150696, 0.7670000195503235, 0.7586666941642761, 0.7950000166893005, 0.8063333630561829, 0.8003333210945129, 0.7786666750907898, 0.7870000004768372, 0.79666668176651, 0.8019999861717224]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 2, 3, 1, 8, 2, 1, 1, 2, 5, 5, 2, 4, 3, 4, 8, 2, 8, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 2, 0, 2, 1, 2, 2, 1, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [97, 44, 89, 16, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4, 4], [2, 0, 1, 5, 3, 4], [15], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.5702857375144958, "mapping_values": [1, 35, 35, 21, 14, 5, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.subtract(grad, tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))), grad))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.multiply(tf.math.pow(tf.math.add(alpha, alpha), tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.add(alpha, grad)), alpha), tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))))), tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.divide_no_nan(grad, alpha))))), alpha)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3014202755298343, 2.298764470829357, 2.2985439873673834, 2.296374352191496, 2.2943669606225052, 2.2925656584070944, 2.2908400403132227, 2.289681586166178, 2.28621941311264, 2.2849916847484963, 2.28302491150512, 2.279806258388404, 2.278816898280698, 2.2750356020062688, 2.2753064821991766, 2.2720963471538247, 2.271835016206019, 2.2696461320128094, 2.2648895090723147, 2.2651804100961703, 2.2622119859854903, 2.26068227632155, 2.2578413869096714, 2.2563968259329967, 2.2539138143655566, 2.2530208475097546, 2.2478548282204587, 2.2470344092946375, 2.245073354349727, 2.24284048443221, 2.2416232885890524, 2.2368597197038245, 2.235221116361113, 2.234078888785428, 2.229998748630911, 2.228584068042885, 2.2252261975280456, 2.2228737309183413, 2.2191359258331027, 2.2177624123963415, 2.213821138514976, 2.2127225236523627, 2.20657105213458, 2.204750530503414, 2.2033483647651457, 2.198731312426153, 2.1949927099880653, 2.1912289493670634, 2.1874226642369816, 2.186548642415601, 2.1824551275802753, 2.1764793304987022, 2.1748295200971675, 2.1684345565436143, 2.1664649784572845, 2.1652368040542087, 2.1592208116030287, 2.1531730802256623, 2.148779720378952, 2.1460379980117765, 2.141180701590233, 2.1362268588074036, 2.130217969819083, 2.1271581371399577, 2.1193297385161722, 2.1153840268875364, 2.1097860256631407, 2.1054247359967486, 2.099014373550546, 2.0915905086513304, 2.087683611006832, 2.078801031834445, 2.0749515789280384, 2.0687355599335993, 2.062239699375675, 2.054266343861838, 2.0518408239541226, 2.0446249896414668, 2.03591167197771, 2.033049960697584, 2.0241901282510897, 2.017804784765963, 2.0115564424978065, 2.0020849815748307, 1.9940689898374893, 1.9868665942741408, 1.9764995356403432, 1.9700810715601413, 1.9615695195002185, 1.955338398447567, 1.9441418452679189, 1.935014611347996, 1.9272366245550927, 1.9236295791019333, 1.9151802286574586, 1.9034398572477351, 1.893601006520596, 1.885526493823508, 1.877749495329307, 1.8706904136273272], "accuracy": [0.0944393053650856, 0.09681680053472519, 0.10408136248588562, 0.10500594228506088, 0.10672302544116974, 0.11174217611551285, 0.12072381377220154, 0.12336547672748566, 0.13617752492427826, 0.13261127471923828, 0.1434420794248581, 0.14040417969226837, 0.14872540533542633, 0.1640470176935196, 0.15836745500564575, 0.17355699837207794, 0.16814158856868744, 0.18134988844394684, 0.19244486093521118, 0.18940694630146027, 0.19455818831920624, 0.2005019187927246, 0.21040813624858856, 0.21701228618621826, 0.2082948088645935, 0.216880202293396, 0.2339189052581787, 0.22916391491889954, 0.23695680499076843, 0.23973055183887482, 0.23695680499076843, 0.25241050124168396, 0.2615242302417755, 0.254920095205307, 0.26839256286621094, 0.2665433883666992, 0.2739400267601013, 0.2751287817955017, 0.28305375576019287, 0.28305375576019287, 0.28661999106407166, 0.29243165254592896, 0.3028661906719208, 0.30682867765426636, 0.2969224750995636, 0.3086778521537781, 0.31264033913612366, 0.32043322920799255, 0.3136970102787018, 0.31898030638694763, 0.32518821954727173, 0.33324527740478516, 0.325320303440094, 0.3431515097618103, 0.3391890227794647, 0.3329811096191406, 0.3315281867980957, 0.3420948386192322, 0.3549068868160248, 0.3447364866733551, 0.35385021567344666, 0.35305771231651306, 0.35847312211990356, 0.3572843670845032, 0.3683793544769287, 0.37300223112106323, 0.37881389260292053, 0.372209757566452, 0.37762513756752014, 0.3789459764957428, 0.3887201249599457, 0.3863426148891449, 0.39043718576431274, 0.3903051018714905, 0.3983621597290039, 0.39189010858535767, 0.3897767663002014, 0.3975696861743927, 0.39823007583618164, 0.4017963409423828, 0.4037775695323944, 0.40509840846061707, 0.4002113342285156, 0.41447630524635315, 0.40774005651474, 0.4138158857822418, 0.42649585008621216, 0.42002376914024353, 0.4225333631038666, 0.41804254055023193, 0.43111875653266907, 0.42966583371162415, 0.43283581733703613, 0.4283449947834015, 0.4290054142475128, 0.4295337498188019, 0.4441949427127838, 0.4391758143901825, 0.4365341365337372, 0.44406285881996155], "val_loss": [1.9691709790910994, 1.9673361097063338, 1.9655098233904158, 1.9637034279959542, 1.96188109261649, 1.9600719724382674, 1.9582554953438895, 1.9564635413033622, 1.9546494483947754, 1.952857562473842, 1.9510581152779716, 1.9492393221173967, 1.9474264553615026, 1.9455832753862654, 1.9437432289123535, 1.9418946674891882, 1.9400327546255929, 1.9381484985351562, 1.9362043653215681, 1.9342621394566126, 1.932302611214774, 1.9303406987871443, 1.9283150264195033, 1.9262606757027763, 1.92417573928833, 1.9220679828098841, 1.9199157442365373, 1.9177520615713937, 1.9155628340584892, 1.9133185659136092, 1.9110403742109026, 1.9087114334106445, 1.9063400541033064, 1.9039358411516463, 1.9014714104788644, 1.898979936327253, 1.8964310373578752, 1.893862519945417, 1.8912130083356584, 1.8885062081473214, 1.885725634438651, 1.8829011235918318, 1.8799804278782435, 1.87699556350708, 1.8739893095833915, 1.8709052630833216, 1.8677201952253069, 1.8644537925720215, 1.8611315999712263, 1.8577460561479842, 1.8542679377964564, 1.8506832803998674, 1.8470463071550642, 1.8432632173810686, 1.8394381659371513, 1.8355504444667272, 1.8315490313938685, 1.8274071557181222, 1.8231709344046456, 1.81892762865339, 1.8145178386143275, 1.810021196092878, 1.8053505761282784, 1.8006511415754045, 1.7958030019487654, 1.790869849068778, 1.7857962335859026, 1.7806552478245325, 1.7753830637250627, 1.7699533190046037, 1.7643922397068568, 1.7586943081447057, 1.7529004641941615, 1.7470143181937081, 1.7409874371119909, 1.7347868510654993, 1.7285356521606445, 1.7221407890319824, 1.7156006949288505, 1.7090093408312117, 1.702251979282924, 1.695366621017456, 1.6884138584136963, 1.681267397744315, 1.6739674295697893, 1.6665362971169608, 1.6589934144701277, 1.6513513837541853, 1.6434765883854456, 1.635549851826259, 1.6274601050785609, 1.6192220279148646, 1.6108501979282923, 1.6025034018925257, 1.5940837860107422, 1.585479838507516, 1.5767652307237898, 1.5679257937840052, 1.5590073040553503, 1.5500311510903495], "val_accuracy": [0.05066666752099991, 0.059333331882953644, 0.07199999690055847, 0.08900000154972076, 0.10166666656732559, 0.11733333021402359, 0.1353333294391632, 0.15566666424274445, 0.17533333599567413, 0.19333332777023315, 0.21400000154972076, 0.22966666519641876, 0.2436666637659073, 0.2566666603088379, 0.2736666798591614, 0.28600001335144043, 0.29733332991600037, 0.3136666715145111, 0.3216666579246521, 0.3310000002384186, 0.3346666693687439, 0.34433332085609436, 0.35066667199134827, 0.35633334517478943, 0.36399999260902405, 0.367000013589859, 0.3733333349227905, 0.37566667795181274, 0.38100001215934753, 0.38466668128967285, 0.38866665959358215, 0.39366665482521057, 0.39666667580604553, 0.40066665410995483, 0.4046666622161865, 0.40799999237060547, 0.41100001335144043, 0.41466665267944336, 0.41966667771339417, 0.4216666519641876, 0.4246666729450226, 0.43033334612846375, 0.4323333203792572, 0.43666666746139526, 0.44066667556762695, 0.4426666796207428, 0.4440000057220459, 0.44466665387153625, 0.4466666579246521, 0.44966667890548706, 0.45233333110809326, 0.45366665720939636, 0.45633333921432495, 0.45899999141693115, 0.4606666564941406, 0.4636666774749756, 0.46666666865348816, 0.47066667675971985, 0.47333332896232605, 0.4763333201408386, 0.47866666316986084, 0.4816666543483734, 0.4846666753292084, 0.48899999260902405, 0.492000013589859, 0.49399998784065247, 0.4970000088214874, 0.4986666738986969, 0.5023333430290222, 0.5059999823570251, 0.5093333125114441, 0.5099999904632568, 0.5143333077430725, 0.5189999938011169, 0.5210000276565552, 0.5256666541099548, 0.5286666750907898, 0.5303333401679993, 0.5326666831970215, 0.5350000262260437, 0.5373333096504211, 0.5383333563804626, 0.5403333306312561, 0.5419999957084656, 0.5423333048820496, 0.5450000166893005, 0.5479999780654907, 0.5493333339691162, 0.5519999861717224, 0.5536666512489319, 0.5546666383743286, 0.5546666383743286, 0.5559999942779541, 0.5569999814033508, 0.5600000023841858, 0.5609999895095825, 0.562333345413208, 0.5636666417121887, 0.5643333196640015, 0.5686666369438171]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 8, 3, 1, 8, 2, 1, 1, 2, 5, 5, 2, 4, 3, 4, 8, 2, 9, 1, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 2, 0, 2, 1, 2, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1], [97, 44, 89, 16, 58, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4, 4], [2, 0, 1, 5, 3, 4], [15], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.5702857375144958, "mapping_values": [1, 4, 4, 2, 2, 2, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3014202755298343, 2.298764470829357, 2.2985440188584123, 2.2963743207004677, 2.2943669606225052, 2.2925657213891517, 2.2908401707490644, 2.2896815546751497, 2.28621941311264, 2.2849916847484963, 2.283024987996829, 2.2798062718980554, 2.2788169162620755, 2.275035664988326, 2.2753064507081477, 2.272096221189709, 2.271835047697048, 2.2696461140314317, 2.264889477581286, 2.2651805675513144, 2.2622120984399543, 2.2606824517580715, 2.2578416433096278, 2.2563972082970682, 2.2539141157661935, 2.253021166891769, 2.24785521058453, 2.247034818678012, 2.2450738761875657, 2.2428410242514256, 2.241623670953124, 2.23686016952168, 2.235221750653415, 2.2340794465860214, 2.2299994638866485, 2.2285845763710714, 2.2252269757658403, 2.222874558628542, 2.2191368480163907, 2.2177636224706143, 2.213822236134785, 2.212723832671448, 2.2065722307178244, 2.204751920485934, 2.2033498852779805, 2.1987329318838, 2.194994351898816, 2.1912309467170563, 2.1874246345676718, 2.1865507657297094, 2.1824574487840085, 2.1764815303045193, 2.17483131051961, 2.168436567403259, 2.1664674436065106, 2.165239624548204, 2.1592235512280618, 2.153176777996738, 2.1487833370921194, 2.1460415878001142, 2.141184372342006, 2.1362303721040328, 2.1302220004818238, 2.1271615244724718, 2.119333377776916, 2.1153881024564845, 2.1097897233397434, 2.1054283168416346, 2.099017954395432, 2.0915944628223624, 2.0876878935033303, 2.0788053773130013, 2.074955987483125, 2.0687395230480834, 2.0622438154735776, 2.0542707298693483, 2.0518451919802554, 2.0446299694123256, 2.035916732712004, 2.033054688540212, 2.0241945862785826, 2.0178097331402656, 2.011560904997026, 2.002089180824795, 1.994073281371913, 1.986870446981078, 1.9765038743640737, 1.9700854912945434, 1.9615735816539885, 1.9553428744092012, 1.9441463279843787, 1.9350188961275943, 1.9272406281512946, 1.9236334298091904, 1.915184479710165, 1.9034436111988062, 1.8936046996782359, 1.8855304322017892, 1.8777528691521694, 1.870693213904082], "accuracy": [0.0944393053650856, 0.09681680053472519, 0.10408136248588562, 0.10500594228506088, 0.10672302544116974, 0.11174217611551285, 0.12072381377220154, 0.12336547672748566, 0.13617752492427826, 0.13261127471923828, 0.1434420794248581, 0.14040417969226837, 0.14872540533542633, 0.1640470176935196, 0.15836745500564575, 0.17355699837207794, 0.16814158856868744, 0.18134988844394684, 0.19244486093521118, 0.18940694630146027, 0.19455818831920624, 0.2005019187927246, 0.21040813624858856, 0.21701228618621826, 0.2082948088645935, 0.216880202293396, 0.2339189052581787, 0.22916391491889954, 0.23695680499076843, 0.23986263573169708, 0.2370888888835907, 0.25241050124168396, 0.2615242302417755, 0.254920095205307, 0.26839256286621094, 0.2665433883666992, 0.2739400267601013, 0.2751287817955017, 0.28305375576019287, 0.28305375576019287, 0.28661999106407166, 0.29243165254592896, 0.3027341067790985, 0.30682867765426636, 0.2969224750995636, 0.3086778521537781, 0.31264033913612366, 0.32043322920799255, 0.3136970102787018, 0.31884822249412537, 0.32518821954727173, 0.33324527740478516, 0.325320303440094, 0.3431515097618103, 0.3391890227794647, 0.3329811096191406, 0.3315281867980957, 0.3420948386192322, 0.3549068868160248, 0.3447364866733551, 0.35385021567344666, 0.35305771231651306, 0.35847312211990356, 0.3572843670845032, 0.3683793544769287, 0.37300223112106323, 0.37881389260292053, 0.37207767367362976, 0.37762513756752014, 0.3789459764957428, 0.3887201249599457, 0.3863426148891449, 0.39043718576431274, 0.39043718576431274, 0.3983621597290039, 0.3917580246925354, 0.38964468240737915, 0.39770177006721497, 0.39823007583618164, 0.4017963409423828, 0.4037775695323944, 0.40509840846061707, 0.4002113342285156, 0.4143442213535309, 0.40774005651474, 0.4138158857822418, 0.42649585008621216, 0.42002376914024353, 0.4225333631038666, 0.41791045665740967, 0.43111875653266907, 0.4295337498188019, 0.43270373344421387, 0.4283449947834015, 0.4290054142475128, 0.4295337498188019, 0.4441949427127838, 0.4391758143901825, 0.43666622042655945, 0.44406285881996155], "val_loss": [1.9691709790910994, 1.9673361097063338, 1.9655098915100098, 1.9637034279959542, 1.96188109261649, 1.9600720405578613, 1.9582554953438895, 1.9564635413033622, 1.9546494483947754, 1.9528576987130302, 1.9510581833975655, 1.9492393221173967, 1.9474265234810966, 1.9455833435058594, 1.9437432289123535, 1.941894599369594, 1.940032890864781, 1.9381487028939384, 1.9362045696803503, 1.934262411934989, 1.9323029518127441, 1.9303409712655204, 1.9283152988978796, 1.9262608800615584, 1.924175807407924, 1.9220682552882604, 1.9199162891932897, 1.917752470288958, 1.9155631746564592, 1.9133187702723913, 1.9110407829284668, 1.9087118421282088, 1.9063404628208704, 1.9039363861083984, 1.9014719554356165, 1.8989804131644112, 1.8964318547930037, 1.8938632692609514, 1.8912136214120048, 1.8885070255824499, 1.8857267924717493, 1.8829024859837122, 1.8799817221505302, 1.8769969940185547, 1.873990876334054, 1.8709067617143904, 1.8677222388131278, 1.8644557680402483, 1.8611337116786413, 1.857748304094587, 1.8542701857430595, 1.8506853921072823, 1.847048350742885, 1.8432655334472656, 1.8394402776445662, 1.8355532373700822, 1.8315520967755998, 1.8274100167410714, 1.823173931666783, 1.8189306940351213, 1.8145205633980888, 1.8100243977137975, 1.8053535052708216, 1.800654343196324, 1.7958061354500907, 1.7908727782113212, 1.7857990946088518, 1.7806580407278878, 1.7753862653459822, 1.7699567931038993, 1.7643962587629045, 1.7586980547223772, 1.7529040745326452, 1.7470179285321916, 1.7409911155700684, 1.7347907338823592, 1.7285396712166923, 1.7221452849251884, 1.7156052930014474, 1.7090140070234026, 1.7022562708173479, 1.6953709125518799, 1.688417639051165, 1.6812712805611747, 1.673971312386649, 1.6665403161730086, 1.6589973313467843, 1.65135543687003, 1.6434807096208846, 1.6355539049421037, 1.6274644987923759, 1.6192265238080705, 1.6108540466853551, 1.6025071825299944, 1.5940876007080078, 1.5854837894439697, 1.5767692497798376, 1.567929404122489, 1.5590105056762695, 1.5500341824122839], "val_accuracy": [0.05066666752099991, 0.059333331882953644, 0.07199999690055847, 0.08900000154972076, 0.10166666656732559, 0.11733333021402359, 0.1353333294391632, 0.15566666424274445, 0.17533333599567413, 0.19333332777023315, 0.21400000154972076, 0.22966666519641876, 0.2436666637659073, 0.2566666603088379, 0.2736666798591614, 0.28600001335144043, 0.29733332991600037, 0.31333333253860474, 0.3216666579246521, 0.3310000002384186, 0.3346666693687439, 0.34433332085609436, 0.35066667199134827, 0.35633334517478943, 0.36399999260902405, 0.367000013589859, 0.3733333349227905, 0.37599998712539673, 0.38100001215934753, 0.38466668128967285, 0.38866665959358215, 0.39366665482521057, 0.39666667580604553, 0.40066665410995483, 0.4046666622161865, 0.40799999237060547, 0.41100001335144043, 0.41466665267944336, 0.41966667771339417, 0.4216666519641876, 0.4243333339691162, 0.4300000071525574, 0.4323333203792572, 0.43666666746139526, 0.44066667556762695, 0.4426666796207428, 0.4440000057220459, 0.44466665387153625, 0.4466666579246521, 0.44966667890548706, 0.45233333110809326, 0.45366665720939636, 0.4566666781902313, 0.45899999141693115, 0.4606666564941406, 0.4636666774749756, 0.46666666865348816, 0.47066667675971985, 0.47333332896232605, 0.4763333201408386, 0.47866666316986084, 0.4816666543483734, 0.4846666753292084, 0.4893333315849304, 0.492000013589859, 0.49399998784065247, 0.4970000088214874, 0.4986666738986969, 0.5023333430290222, 0.5059999823570251, 0.5093333125114441, 0.5099999904632568, 0.5139999985694885, 0.5189999938011169, 0.5210000276565552, 0.5256666541099548, 0.5286666750907898, 0.5303333401679993, 0.5326666831970215, 0.5350000262260437, 0.5373333096504211, 0.5383333563804626, 0.5403333306312561, 0.5419999957084656, 0.5423333048820496, 0.5450000166893005, 0.5483333468437195, 0.5493333339691162, 0.5519999861717224, 0.5536666512489319, 0.5546666383743286, 0.5546666383743286, 0.5559999942779541, 0.5569999814033508, 0.5600000023841858, 0.5609999895095825, 0.562333345413208, 0.5636666417121887, 0.5643333196640015, 0.5686666369438171]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 2, 3, 1, 8, 2, 1, 1, 2, 5, 5, 6, 4, 3, 4, 8, 2, 8, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [1, 0, 2, 2, 0, 2, 1, 2, 2, 1, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [97, 44, 89, 16, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [1, 1, 1, 0], [3, 4, 4], [2, 2, 1, 5, 3, 4], [49], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.2851428687572479, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.5755666035702673, 2.6684196753634786, 2.304119440259368, 2.3033396604747316, 2.303185205008643, 2.303025962024427], "accuracy": [0.20420023798942566, 0.11808215826749802, 0.09945846349000931, 0.09866596013307571, 0.09576013684272766, 0.09774138033390045], "val_loss": [2.312294210706438, 1.9747955458504813, 1.9739153044564384, 1.9736509323120117, 1.973555428641183, 1.9735621043613978], "val_accuracy": [0.2633333206176758, 0.10100000351667404, 0.0989999994635582, 0.10100000351667404, 0.10100000351667404, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 2, 3, 1, 8, 2, 9, 1, 2, 5, 5, 3, 4, 3, 4, 8, 2, 4, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 2, 0, 2, 2, 2, 2, 1, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [97, 44, 89, 16, 90, 47, 89, 44], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 3, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [1, 1, 1, 0], [3, 4, 4], [2, 2, 1, 5, 3, 4], [15], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.2491428554058075, "mapping_values": [1, 42, 42, 26, 16, 6, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(grad, tf.math.add(alpha, grad)))))), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.multiply(tf.math.pow(tf.math.sqrt(grad), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), grad), tf.math.add(alpha, tf.math.pow(tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), grad)), tf.math.add(alpha, alpha))))))), tf.math.add(alpha, tf.math.square(alpha))))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))))))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [3.335895780716527, 2.425268684159716, 2.220742322544868, 2.734499743900846, 2.784423385392626, 2.5537142459789774, 2.390723034879236, 2.4912658896286883], "accuracy": [0.17236824333667755, 0.1352529376745224, 0.17857614159584045, 0.14330999553203583, 0.12191256135702133, 0.10011887550354004, 0.09959053993225098, 0.09628847241401672], "val_loss": [2.0869310242789134, 1.8470475333077567, 1.734910522188459, 2.355398314339774, 2.14418397630964, 2.0361719131469727, 2.1302386011396135, 2.142418384552002], "val_accuracy": [0.09033333510160446, 0.16699999570846558, 0.22966666519641876, 0.10166666656732559, 0.0989999994635582, 0.09833333641290665, 0.0989999994635582, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 9, 3, 1, 8, 2, 1, 1, 2, 5, 5, 6, 4, 3, 4, 8, 2, 8, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 2, 0, 2, 1, 2, 2, 1, 0, 2, 2, 1, 2, 1, 2, 1, 2, 1], [97, 44, 89, 16, 90, 47, 89, 44], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 3, 3, 5, 2, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [9, 4, 4], [2, 0, 1, 5, 3, 4], [14], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 6, 6, 3, 3, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(grad, tf.math.square(tf.math.add(grad, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [5.2893267727137525, 31.86423556018326, 97.76288855556075, 219.40653272393735, 415.58540471814734, 708.3956951261779], "accuracy": [0.09853387624025345, 0.1010434553027153, 0.09932637959718704, 0.09840179979801178, 0.09985470771789551, 0.09602430462837219], "val_loss": [9.879024505615234, 39.4177496773856, 98.66600036621094, 198.57648577008928, 351.671622140067, 571.6711774553571], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [5, 2, 3, 1, 8, 2, 1, 1, 6, 5, 5, 6, 4, 3, 4, 8, 2, 9, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 0, 0, 2, 1, 2, 2, 1, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [61, 44, 89, 16, 90, 47, 89, 44], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 1, 0, 1], [0, 1, 1, 0], [3, 4, 4], [2, 0, 1, 5, 3, 4], [49], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [78, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 1, 0, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.30275572985391, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 9, 3, 1, 8, 2, 1, 1, 2, 5, 5, 6, 4, 3, 4, 8, 2, 8, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 2, 0, 2, 1, 2, 2, 1, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [97, 44, 89, 16, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 7, 6, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [1, 2, 5, 3, 0, 3, 1, 3], [53], [1, 0, 1, 0, 1], [0, 1, 1, 0], [3, 4, 4], [2, 7, 1, 5, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.30275572985391, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 2, 3, 1, 8, 2, 1, 1, 2, 5, 5, 6, 4, 3, 4, 8, 2, 8, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 2, 0, 2, 1, 2, 2, 1, 0, 2, 2, 1, 2, 1, 2, 1, 2, 1], [97, 44, 89, 16, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [1, 1, 1, 0], [9, 4, 4], [2, 0, 1, 5, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [63, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1277430195.9561322, 23954916949.953243, 111276314018.60785, 310761578031.8119, 669893331865.0725, 1235454308100.4294], "accuracy": [0.09932637959718704, 0.10130762308835983, 0.09879804402589798, 0.09840179979801178, 0.09972262382507324, 0.09642054885625839], "val_loss": [4764835986.285714, 38107379419.42857, 128598732214.85715, 304813478473.1429, 595316178944.0, 1028692976786.2858], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 9, 3, 1, 8, 2, 1, 1, 2, 5, 5, 6, 4, 3, 4, 8, 6, 8, 8, 9, 8, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 2, 0, 2, 1, 2, 2, 1, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [97, 44, 89, 16, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [1, 1, 1, 0], [9, 4, 4], [2, 0, 1, 5, 3, 4], [15], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 2, 15, 15, 8, 7, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(tf.math.add(beta, tf.math.subtract(grad, beta)), tf.math.pow(grad, tf.math.negative(grad)))), tf.math.pow(tf.math.pow(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 2, 4, 2, 8, 2, 1, 1, 2, 5, 5, 2, 9, 3, 4, 8, 2, 8, 0, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 2, 0, 2, 1, 2, 2, 1, 0, 2, 2, 1, 2, 1, 2, 1, 2, 1], [96, 44, 89, 16, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [9, 4, 4], [2, 0, 1, 5, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 26, 26, 15, 11, 5, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.subtract(grad, tf.math.add(alpha, grad)))), tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.math.square(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(alpha, grad), tf.math.pow(grad, tf.math.add(alpha, alpha))))))), tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [19463067.368726276, 364413459.8737287, 1692000976.593845, 4724281978.9449215, 10182653898.575089, 18777991778.531765], "accuracy": [0.09919429570436478, 0.10130762308835983, 0.09879804402589798, 0.09840179979801178, 0.09972262382507324, 0.09642054885625839], "val_loss": [72529874.28571428, 579533970.2857143, 1955138194.2857144, 4633478582.857142, 9048641243.428572, 15634790107.428572], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 9, 3, 1, 8, 2, 1, 1, 2, 5, 5, 6, 4, 3, 4, 8, 2, 8, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 2, 0, 2, 1, 2, 2, 1, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [12, 93, 89, 16, 90, 47, 89, 44], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [0, 2, 3, 5, 0, 3, 1, 3], [53], [1, 1, 0, 0, 1], [0, 1, 1, 0], [3, 4, 4], [2, 5, 1, 5, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.square(beta), tf.math.square(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.30275572985391, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 2, 3, 1, 2, 2, 1, 1, 6, 5, 5, 2, 4, 3, 4, 8, 2, 8, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 0, 1, 2, 2, 2, 2, 1, 2, 2, 2, 1, 2, 1, 2, 1, 2, 1], [97, 44, 89, 16, 78, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4, 4], [2, 0, 1, 5, 3, 4], [15], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 42, 42, 25, 17, 4, 15, 15, 8, 7, 1, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.subtract(tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.multiply(tf.math.pow(tf.math.sqrt(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))), grad), tf.math.add(alpha, alpha))), tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))))))), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(grad, grad)), grad))), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha)))))))))))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(tf.math.add(beta, tf.math.subtract(grad, beta)), tf.math.pow(grad, tf.math.negative(grad)))), tf.math.pow(tf.math.pow(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 2, 3, 1, 8, 2, 1, 1, 2, 5, 5, 6, 4, 3, 4, 8, 2, 8, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [1, 0, 2, 2, 0, 2, 1, 2, 2, 1, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [97, 44, 89, 16, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [1, 1, 1, 0], [3, 4, 4], [2, 2, 1, 5, 3, 4], [49], [0, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.06685714423656464, "mapping_values": [1, 35, 35, 21, 14, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.subtract(grad, tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(grad)))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.multiply(tf.math.pow(tf.math.add(alpha, alpha), tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.sqrt(alpha))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))))))), tf.math.add(alpha, tf.math.divide_no_nan(grad, alpha))), alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.square(sigma), tf.math.square(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.301840670183429, 2.3004585232606827, 2.3014716764466954, 2.3006919881749885, 2.300300133179491, 2.3006445847923067, 2.3007491972972027, 2.300438447509381, 2.299557050961419, 2.300139512872148, 2.2998070532635393, 2.2993778582844895, 2.2998837165356374, 2.299221607042483, 2.300281446843871, 2.2998490623589505], "accuracy": [0.09311848133802414, 0.09034473448991776, 0.09668471664190292, 0.09338264167308807, 0.09074098616838455, 0.09179764986038208, 0.09642054885625839, 0.1002509593963623, 0.10117553919553757, 0.09338264167308807, 0.10342095047235489, 0.09721305221319199, 0.09285431355237961, 0.09655263274908066, 0.09377889335155487, 0.09932637959718704], "val_loss": [1.9703149795532227, 1.9699089186532157, 1.9695401191711426, 1.9693946838378906, 1.9693616458347865, 1.96946348462786, 1.9693681171962194, 1.9692722729274206, 1.9692518370492118, 1.9693264280046736, 1.9695422989981515, 1.9697933197021484, 1.9700196129935128, 1.9702514239719935, 1.9704016276768275, 1.9705594607761927], "val_accuracy": [0.045666664838790894, 0.052666667848825455, 0.05833333358168602, 0.06400000303983688, 0.06733333319425583, 0.07466666400432587, 0.07766667008399963, 0.08100000023841858, 0.08133333176374435, 0.08100000023841858, 0.0833333358168602, 0.08133333176374435, 0.07599999755620956, 0.07633333653211594, 0.07766667008399963, 0.07866666465997696]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [2, 2, 3, 1, 8, 2, 4, 1, 2, 5, 5, 2, 4, 3, 4, 8, 2, 8, 8, 9, 9, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 2, 0, 2, 1, 2, 2, 1, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [97, 44, 89, 16, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4, 4], [2, 4, 1, 5, 3, 4], [37], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.06628571450710297, "mapping_values": [1, 33, 33, 21, 12, 6, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 0, 1, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(tf.math.pow(grad, tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))), grad))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.square(alpha), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.sqrt(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha))))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))))), grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3018456949549675, 2.300471465317738, 2.3014989006930278, 2.3007283099905975, 2.3003373102914417, 2.300669028034394, 2.3007851094460174, 2.3004861590002883, 2.299594003857245, 2.300164076472947, 2.299802487064362, 2.299346167539577, 2.299852202927762, 2.2991945187429224, 2.3002551977802277, 2.2998119399469164], "accuracy": [0.09311848133802414, 0.09047681838274002, 0.09694888442754745, 0.09351472556591034, 0.09060890227556229, 0.09219389408826828, 0.09615638852119446, 0.10051512718200684, 0.10117553919553757, 0.09377889335155487, 0.10368511080741882, 0.09774138033390045, 0.09377889335155487, 0.09694888442754745, 0.09377889335155487, 0.09972262382507324], "val_loss": [1.9703197479248047, 1.9699241774422782, 1.9695589201790946, 1.9694069453648158, 1.9693773133414132, 1.969477994101388, 1.9693927083696638, 1.969294616154262, 1.9692585127694267, 1.9693185942513602, 1.9694903237479073, 1.9697141647338867, 1.9699693407331194, 1.9701957702636719, 1.970334189278739, 1.9705029896327428], "val_accuracy": [0.04500000178813934, 0.052000001072883606, 0.0573333315551281, 0.06366666406393051, 0.06733333319425583, 0.07400000095367432, 0.07766667008399963, 0.08033332973718643, 0.08133333176374435, 0.07966666668653488, 0.08533333241939545, 0.08266666531562805, 0.07866666465997696, 0.07633333653211594, 0.07833333313465118, 0.07900000363588333]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 2, 3, 0, 8, 2, 1, 1, 2, 5, 5, 6, 4, 3, 4, 4, 6, 8, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 2, 0, 2, 1, 2, 2, 0, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [45, 44, 89, 16, 1, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [1, 0, 0, 0, 1], [1, 1, 1, 0], [9, 4, 4], [2, 0, 1, 5, 3, 4], [49], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 35, 35, 21, 14, 6, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.subtract(grad, tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.divide_no_nan(tf.math.pow(tf.math.multiply(tf.math.pow(tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))), grad), tf.math.add(alpha, tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.divide_no_nan(grad, alpha))))))))), alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3022228256271435, 2.3015125083129764, 2.3032631110427024, 2.302984607942415, 2.302997319075756, 2.3031304605632896], "accuracy": [0.09285431355237961, 0.09021265059709549, 0.09008057415485382, 0.08915598690509796, 0.08558975160121918, 0.08545766770839691], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 2, 3, 1, 8, 2, 1, 1, 2, 5, 5, 6, 4, 3, 4, 8, 2, 8, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 2, 0, 2, 1, 2, 2, 1, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [97, 44, 89, 16, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [5, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 1, 0, 1], [0, 1, 0, 0], [3, 4, 4], [2, 2, 1, 5, 3, 4], [15], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), sigma)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3022228256271435, 2.3015125083129764, 2.3032631110427024, 2.302984607942415, 2.302997319075756, 2.3031304605632896], "accuracy": [0.09285431355237961, 0.09021265059709549, 0.09008057415485382, 0.08915598690509796, 0.08558975160121918, 0.08545766770839691], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 9, 3, 1, 8, 2, 1, 1, 2, 5, 5, 6, 4, 3, 4, 8, 6, 8, 8, 9, 8, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 2, 0, 2, 1, 2, 2, 1, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [97, 44, 89, 16, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [1, 0, 0, 0, 1], [0, 0, 1, 0], [3, 4, 4], [2, 0, 1, 5, 3, 4], [15], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 3, 3, 2, 1, 2, 15, 15, 8, 7, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(tf.math.add(beta, tf.math.subtract(grad, beta)), tf.math.pow(grad, tf.math.negative(grad)))), tf.math.pow(tf.math.pow(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3022228256271435, 2.3015125083129764, 2.3032631110427024, 2.302984607942415, 2.302997319075756, 2.3031304605632896], "accuracy": [0.09285431355237961, 0.09021265059709549, 0.09008057415485382, 0.08915598690509796, 0.08558975160121918, 0.08545766770839691], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 9, 3, 1, 8, 2, 1, 1, 2, 5, 5, 6, 4, 3, 4, 8, 2, 8, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [1, 0, 2, 2, 0, 2, 1, 2, 2, 1, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [68, 44, 89, 16, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [1, 0, 0, 0, 1], [0, 1, 0, 0], [3, 4, 4], [4, 0, 1, 5, 3, 4], [49], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3022228256271435, 2.3015125083129764, 2.3032631110427024, 2.302984607942415, 2.302997319075756, 2.3031304605632896], "accuracy": [0.09285431355237961, 0.09021265059709549, 0.09008057415485382, 0.08915598690509796, 0.08558975160121918, 0.08545766770839691], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 2, 3, 1, 1, 2, 1, 1, 2, 5, 9, 6, 2, 3, 4, 0, 2, 8, 5, 4, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 2, 0, 2, 1, 2, 2, 1, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [97, 44, 89, 20, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 1, 0, 1], [0, 1, 1, 0], [3, 4, 4], [4, 0, 1, 5, 3, 4], [15], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 17, 17, 8, 9, 3, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.subtract(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.subtract(grad, tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), grad))))), grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3022228256271435, 2.3015125083129764, 2.3032631110427024, 2.302984607942415, 2.302997319075756, 2.3031304605632896], "accuracy": [0.09285431355237961, 0.09021265059709549, 0.09008057415485382, 0.08915598690509796, 0.08558975160121918, 0.08545766770839691], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}]