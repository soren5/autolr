[{"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 6, 2, 8, 6, 5, 4, 3, 5, 3, 1, 9, 0, 4, 8, 5, 3, 7, 6, 2, 6, 2, 2, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 0, 3, 0, 3, 3, 1, 0, 2, 0, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [94, 32, 78, 99, 37, 47, 96], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.8402857184410095, "mapping_values": [1, 4, 4, 2, 2, 1, 21, 21, 13, 8, 4, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))), tf.math.multiply(grad, tf.math.subtract(tf.math.add(beta, grad), alpha))))))), tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9382826799194433, 1.118924864979783, 0.792387183087928, 0.6953717780040791, 0.6322304028813487, 0.5874205590664293, 0.5472572757788086, 0.5303585903519542, 0.5022224150888357, 0.47923470692092307, 0.4626665011396687, 0.44482913475939784, 0.43171749901399953, 0.4061245519440046, 0.4002376634722546, 0.3980654491614263, 0.37707564920057096, 0.3647182194894693, 0.35749437271753526, 0.3429163186431419, 0.3283386957793424, 0.3236005642961722, 0.323399511239847, 0.3173975802218957, 0.3063916411256242, 0.2910459461567692, 0.29904049227518287, 0.2825573013207034, 0.2738346052664209, 0.2676249239281294], "accuracy": [0.33601900935173035, 0.6199973821640015, 0.6999075412750244, 0.7346453666687012, 0.7597411274909973, 0.7820631265640259, 0.7906485199928284, 0.7985734939575195, 0.8072909712791443, 0.8207634687423706, 0.82683926820755, 0.8321225643157959, 0.8348963260650635, 0.8446704745292664, 0.850350022315979, 0.8495575189590454, 0.8543124794960022, 0.8628978729248047, 0.8642187118530273, 0.8664641380310059, 0.8729361891746521, 0.8749174475669861, 0.8770307898521423, 0.878879964351654, 0.8812574148178101, 0.8873332738876343, 0.8844274282455444, 0.8942015767097473, 0.8922203183174133, 0.8972394466400146], "val_loss": [0.9520811694008964, 0.6287358828953334, 0.5619297538484845, 0.514924134526934, 0.475623573575701, 0.4425325734274728, 0.4281723414148603, 0.4084094251905169, 0.38796545778002056, 0.38118805204119, 0.3841421348708017, 0.3564573611531939, 0.3514765671321324, 0.3500624639647348, 0.3450480614389692, 0.34187062297548565, 0.3345549021448408, 0.3310028740337917, 0.3292403817176819, 0.32294170345578876, 0.3137942041669573, 0.32576639311654226, 0.31740834031786236, 0.3192299348967416, 0.30406596830912996, 0.32564989158085417, 0.3090447357722691, 0.312105655670166, 0.30122498103550505, 0.3125900455883571], "val_accuracy": [0.6136666536331177, 0.7260000109672546, 0.7383333444595337, 0.7606666684150696, 0.7776666879653931, 0.8006666898727417, 0.8006666898727417, 0.8119999766349792, 0.8316666483879089, 0.831333339214325, 0.8349999785423279, 0.8510000109672546, 0.8486666679382324, 0.8510000109672546, 0.8566666841506958, 0.8523333072662354, 0.8566666841506958, 0.859666645526886, 0.8640000224113464, 0.862666666507721, 0.8676666617393494, 0.8616666793823242, 0.8690000176429749, 0.8676666617393494, 0.875, 0.8736666440963745, 0.8723333477973938, 0.8690000176429749, 0.8693333268165588, 0.8679999709129333]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0], [0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 8, 2, 2, 4, 6, 5, 2, 3, 3, 3, 0, 2, 5, 2, 8, 5, 3, 4, 6, 2, 6, 2, 2, 2, 9, 0, 6, 5, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 0, 3, 0, 2, 2, 3, 0, 2, 0, 3, 3, 0, 0, 0, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [94, 64, 78, 99, 37, 47, 96, 0], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.8342857360839844, "mapping_values": [1, 4, 4, 2, 2, 1, 9, 9, 5, 4, 2, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9390732379810542, 1.1207734010695403, 0.7954623010794343, 0.6969920697229225, 0.6318018488077172, 0.5888693754100812, 0.5442008980434364, 0.5276595963470971, 0.5007764805246574, 0.47717206983707366, 0.46178258719099136, 0.4405191273595427, 0.4260728995419922, 0.41249815323144656, 0.40175252967837494, 0.39063075023824195, 0.37740413966416336, 0.3632371093240853, 0.35635121915602114, 0.3465136606081397, 0.33182069009730625, 0.3249068722953539, 0.3271129864074015, 0.31704550166691237, 0.2985218160928059, 0.28283774811027074, 0.3052560672106886, 0.2871880585278786, 0.268241029228312, 0.2636130037458581, 0.2726370484018685], "accuracy": [0.33641526103019714, 0.6214502453804016, 0.7014925479888916, 0.7342491149902344, 0.7611940503120422, 0.7773081660270691, 0.7942147850990295, 0.8018755912780762, 0.8099326491355896, 0.821820080280304, 0.8261788487434387, 0.8323867321014404, 0.8399154543876648, 0.8442742228507996, 0.8481045961380005, 0.8525954484939575, 0.8594637513160706, 0.8644828796386719, 0.8636903762817383, 0.8673887252807617, 0.876370370388031, 0.8766345381736755, 0.8772949576377869, 0.8819178342819214, 0.8883898854255676, 0.8920882344245911, 0.8817857503890991, 0.8924844861030579, 0.8927486538887024, 0.8953903317451477, 0.8901069760322571], "val_loss": [0.9621140275682721, 0.6320383548736572, 0.564440199307033, 0.5173709392547607, 0.4773680993488857, 0.4462401696613857, 0.4221941317830767, 0.40589780466897146, 0.38765863861356464, 0.3801861149924142, 0.38911045449120657, 0.3539109230041504, 0.36766873938696726, 0.3526696392468044, 0.3402709790638515, 0.3414194328444345, 0.3322308829852513, 0.333594730922154, 0.3271371637071882, 0.33184757402965, 0.31385919025966097, 0.3383888602256775, 0.3161834989275251, 0.3252710444586618, 0.3070971965789795, 0.3233405181339809, 0.30880716017314364, 0.31527980736323763, 0.30591583251953125, 0.31335324900490896, 0.310938903263637], "val_accuracy": [0.6043333411216736, 0.7223333120346069, 0.7369999885559082, 0.7543333172798157, 0.7820000052452087, 0.7963333129882812, 0.809333324432373, 0.8153333067893982, 0.8339999914169312, 0.8316666483879089, 0.8299999833106995, 0.8533333539962769, 0.8420000076293945, 0.8486666679382324, 0.8600000143051147, 0.8533333539962769, 0.8573333621025085, 0.8573333621025085, 0.8659999966621399, 0.8576666712760925, 0.8709999918937683, 0.8566666841506958, 0.8659999966621399, 0.8673333525657654, 0.8743333220481873, 0.875, 0.8723333477973938, 0.871666669845581, 0.8740000128746033, 0.8640000224113464, 0.874666690826416]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 8, 2, 2, 4, 6, 5, 2, 3, 3, 3, 2, 2, 5, 4, 8, 5, 3, 7, 6, 2, 6, 2, 2, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 0, 3, 0, 2, 3, 3, 0, 2, 0, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [94, 38, 78, 99, 95, 47, 96, 52], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.8311428427696228, "mapping_values": [1, 4, 4, 2, 2, 1, 59, 59, 35, 24, 8, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))), grad), tf.math.add(beta, tf.math.square(tf.math.add(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.square(tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))))))))), tf.math.divide_no_nan(tf.math.add(beta, grad), grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.negative(alpha))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad)), tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))), beta)))))), tf.math.sqrt(grad))), tf.math.add(beta, grad)))))))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, sigma))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.939077280232494, 1.1212143457923127, 0.7956103488060903, 0.6974974544985797, 0.6299897511212298, 0.5876349701290637, 0.5435846764901846, 0.5258811825396535, 0.5027499330664166, 0.47799638088872765, 0.46182906856358624, 0.44511641530690804, 0.4311369908932981, 0.4078961735459178, 0.40503384974953555, 0.399209909175507, 0.37761296574953856, 0.3671082000549144, 0.357907709597817, 0.34543987862611286, 0.3325472244843516, 0.32462153962936696, 0.32407387007008676, 0.3193539675901343, 0.3039057832139909, 0.29017198896678903, 0.30233641951910145, 0.2877955333455332, 0.26611936720229096, 0.26066480299280526, 0.26572458543451216, 0.25389658120707936, 0.25022099018411836, 0.24406991666964], "accuracy": [0.33641526103019714, 0.6217144131660461, 0.700171709060669, 0.7358341217041016, 0.7621186375617981, 0.7804781198501587, 0.7960638999938965, 0.8016114234924316, 0.8078193068504333, 0.8260467648506165, 0.8273676037788391, 0.8315942287445068, 0.8387266993522644, 0.8459912538528442, 0.8496896028518677, 0.848368763923645, 0.8564258217811584, 0.8609166741371155, 0.8605204224586487, 0.8654074668884277, 0.8728041052818298, 0.8776912093162537, 0.8755778670310974, 0.8795403242111206, 0.8820499181747437, 0.8878615498542786, 0.8857482671737671, 0.8920882344245911, 0.8980319499969482, 0.8986923694610596, 0.8936732411384583, 0.9009377956390381, 0.9019944667816162, 0.9052965044975281], "val_loss": [0.9630922930581229, 0.6320937701633998, 0.5650075844355992, 0.5151318481990269, 0.4751120294843401, 0.44386420931134907, 0.42653919969286236, 0.40655157395771574, 0.3886681284223284, 0.3829133766038077, 0.3928033709526062, 0.3567969288144793, 0.36488664150238037, 0.36331234659467426, 0.3471988354410444, 0.3427461215427944, 0.3356514402798244, 0.3383278931890215, 0.3310458745275225, 0.32800703389304026, 0.31494011197771343, 0.3282289845602853, 0.321534310068403, 0.32600923095430645, 0.30531961577279226, 0.32136490515300203, 0.31284499168395996, 0.3184573990958078, 0.30564058678490774, 0.3144747529711042, 0.3112037607601711, 0.3144693800381252, 0.3112017171723502, 0.32237011194229126], "val_accuracy": [0.6043333411216736, 0.7229999899864197, 0.7316666841506958, 0.7563333511352539, 0.7816666960716248, 0.7993333339691162, 0.8029999732971191, 0.815666675567627, 0.8339999914169312, 0.8309999704360962, 0.8286666870117188, 0.8496666550636292, 0.8443333506584167, 0.8453333377838135, 0.8496666550636292, 0.856333315372467, 0.8586666584014893, 0.8533333539962769, 0.8643333315849304, 0.8633333444595337, 0.8666666746139526, 0.862333357334137, 0.8673333525657654, 0.8629999756813049, 0.8736666440963745, 0.875333309173584, 0.8706666827201843, 0.871666669845581, 0.8756666779518127, 0.8696666955947876, 0.875, 0.875333309173584, 0.8756666779518127, 0.8733333349227905]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 8, 2, 2, 4, 6, 5, 2, 3, 3, 1, 2, 2, 5, 4, 8, 5, 3, 7, 6, 2, 6, 2, 2, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 0, 3, 0, 2, 3, 3, 0, 2, 0, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [94, 38, 78, 99, 37, 47, 96], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7345714569091797, "mapping_values": [1, 4, 4, 2, 2, 1, 20, 20, 11, 9, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(grad), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.pow(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, tf.math.multiply(grad, tf.math.subtract(tf.math.add(beta, grad), tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)))))))))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9394886403618519, 1.0955634407552477, 0.8498076391084681, 0.7383417534538469, 0.6816953480314538, 0.6323596029989534, 0.6213520807738727, 0.5902369093617837, 0.5932003166169821, 0.5678241209835188, 0.5517301273745884, 0.5490594514687583, 0.5418911272303901, 0.5830244515880917, 0.5645095063726491, 0.5750255512523613, 0.5879393383150072], "accuracy": [0.34183067083358765, 0.6189407110214233, 0.6800950765609741, 0.7288337349891663, 0.7494386434555054, 0.7609298825263977, 0.7663452625274658, 0.7741381525993347, 0.7769119143486023, 0.7862898111343384, 0.8038568496704102, 0.8063663840293884, 0.800818920135498, 0.7812706232070923, 0.7964601516723633, 0.7873464822769165, 0.7828556299209595], "val_loss": [0.817578911781311, 0.6444803987230573, 0.5500941957746234, 0.5406094448907035, 0.4795271158218384, 0.4440711566380092, 0.46710479259490967, 0.43638284717287334, 0.43123957089015413, 0.4363274233681815, 0.4202466181346348, 0.4315514734813145, 0.4191584416798183, 0.4281424198831831, 0.4278444392340524, 0.4344506093433925, 0.4591951540538243], "val_accuracy": [0.6679999828338623, 0.7300000190734863, 0.7573333382606506, 0.7633333206176758, 0.8009999990463257, 0.8053333163261414, 0.7963333129882812, 0.812333345413208, 0.815666675567627, 0.8220000267028809, 0.828000009059906, 0.8286666870117188, 0.8213333487510681, 0.8209999799728394, 0.8233333230018616, 0.8183333277702332, 0.8106666803359985]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0], [0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 8, 9, 2, 6, 0, 8, 3, 3, 3, 2, 9, 0, 4, 8, 5, 3, 7, 6, 2, 6, 2, 2, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 0, 1, 0, 2, 3, 3, 0, 2, 0, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [36, 38, 90, 99, 37, 47, 96], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7174285650253296, "mapping_values": [1, 4, 4, 2, 2, 1, 5, 5, 4, 1, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.sqrt(grad), tf.math.add(beta, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9397716539379408, 1.106794752488598, 0.8665295036603368, 0.7552600777569606, 0.6921396986006305, 0.6517669699998533, 0.6707867866950563, 0.6200914608489064, 0.5933851312888754, 0.5782808818522382, 0.5966267708097042, 0.6089102428870478, 0.5739173728713365, 0.571263105578631, 0.5864172251453458, 0.6049121239512525, 0.6274694974207371, 0.6201834587955739, 0.6678842581604859], "accuracy": [0.34288734197616577, 0.6188086271286011, 0.6753401160240173, 0.7161537408828735, 0.7359662055969238, 0.7479857206344604, 0.750231146812439, 0.7692511081695557, 0.7720248103141785, 0.7814027070999146, 0.7770439982414246, 0.7708360552787781, 0.7903843522071838, 0.7902522683143616, 0.7779685854911804, 0.7705719470977783, 0.7800818681716919, 0.7688548564910889, 0.7662131786346436], "val_loss": [0.8305765049798148, 0.6396431412015643, 0.5657906872885567, 0.5209767477852958, 0.4880974122456142, 0.5083551917757306, 0.487689733505249, 0.4423805730683463, 0.45407713311059134, 0.45276514121464323, 0.4580193076814924, 0.4401631014687674, 0.4420109987258911, 0.4584332023348127, 0.4683401073728289, 0.48869541713169645, 0.47917732170649935, 0.5240012407302856, 0.5556102820805141], "val_accuracy": [0.6733333468437195, 0.7319999933242798, 0.7513333559036255, 0.7733333110809326, 0.7866666913032532, 0.7876666784286499, 0.7856666445732117, 0.812666654586792, 0.8056666851043701, 0.8019999861717224, 0.8069999814033508, 0.815666675567627, 0.8196666836738586, 0.8206666707992554, 0.8050000071525574, 0.8086666464805603, 0.812666654586792, 0.8033333420753479, 0.8103333115577698]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 6, 2, 2, 6, 0, 9, 3, 3, 3, 2, 9, 0, 9, 8, 5, 3, 7, 6, 2, 6, 2, 2, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 1, 2, 3, 3, 2, 3, 3, 0, 2, 0, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [94, 38, 90, 99, 37, 47, 96], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7034285664558411, "mapping_values": [1, 4, 4, 2, 2, 1, 32, 32, 21, 11, 5, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(grad), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.divide_no_nan(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta)))), tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32), beta), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9397719079603246, 1.1067245790845353, 0.8664854953097252, 0.7549567261565363, 0.6901329262397388, 0.652104209623852, 0.6677995873732007, 0.6066838068150259, 0.5808816340070091, 0.5496619114266756, 0.5582845546487237, 0.569569861750325, 0.5426692378566628, 0.5493089822596405, 0.5418069848310773, 0.5483871523761762, 0.5708370945079215, 0.5894844313622655, 0.6028427771919864], "accuracy": [0.34288734197616577, 0.6188086271286011, 0.6754721999168396, 0.7182670831680298, 0.7367587089538574, 0.7508915662765503, 0.7530049085617065, 0.7684586048126221, 0.778232753276825, 0.7935543656349182, 0.791441023349762, 0.7837802171707153, 0.7992339134216309, 0.793950617313385, 0.7946110367774963, 0.7897239327430725, 0.7893276810646057, 0.7902522683143616, 0.7705719470977783], "val_loss": [0.8305799620492118, 0.6399177483149937, 0.5649369784763881, 0.5215573481151036, 0.4803434099469866, 0.49940173966544016, 0.4811478682926723, 0.4517551064491272, 0.43452110460826326, 0.432319700717926, 0.4211759567260742, 0.43187120131083895, 0.41182470321655273, 0.41119807958602905, 0.43582684653145926, 0.4274330905505589, 0.4395765406744821, 0.4511755534580776, 0.4761773007256644], "val_accuracy": [0.6733333468437195, 0.731333315372467, 0.7509999871253967, 0.7736666798591614, 0.7873333096504211, 0.7903333306312561, 0.7910000085830688, 0.8113333582878113, 0.8183333277702332, 0.8223333358764648, 0.8173333406448364, 0.8180000185966492, 0.8196666836738586, 0.8320000171661377, 0.8243333101272583, 0.8256666660308838, 0.8223333358764648, 0.8306666612625122, 0.815666675567627]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [58, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 6, 2, 2, 6, 0, 9, 3, 3, 3, 2, 9, 0, 4, 8, 5, 3, 7, 6, 2, 6, 2, 2, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 0, 3, 0, 3, 3, 1, 0, 2, 0, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [94, 38, 78, 99, 37, 47, 96], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.22114285826683044, "mapping_values": [1, 4, 4, 2, 2, 1, 21, 21, 13, 8, 4, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))))))))), tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(tf.math.add(beta, grad), alpha))))), tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2870588598942887, 2.219704095729354, 2.7388950347144605, 2.308953019653439, 2.3044641442097977, 2.3032487719806274], "accuracy": [0.21093647181987762, 0.20591731369495392, 0.2118610441684723, 0.10077928751707077, 0.09747721254825592, 0.09285431355237961], "val_loss": [1.9656768526349748, 1.9512103625706263, 1.983748504093715, 1.9753971099853516, 1.9740635326930456, 1.9738614218575614], "val_accuracy": [0.19566667079925537, 0.11833333224058151, 0.10166666656732559, 0.10066666454076767, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 6, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [6, 2, 6, 2, 2, 6, 3, 2, 3, 3, 3, 2, 1, 0, 4, 8, 5, 3, 7, 6, 2, 6, 2, 2, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 0, 0, 0, 2, 3, 3, 0, 2, 0, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [18, 9, 31, 20, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.1265714317560196, "mapping_values": [1, 8, 8, 5, 3, 2, 32, 32, 17, 15, 7, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)))), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(beta, tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.multiply(grad, tf.math.multiply(tf.math.add(beta, grad), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), grad))))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.square(grad))), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))))))), grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [2.3051416303629355, 2.3038072394909026, 2.304748067042107, 2.3012895866580974, 2.3008373958591175, 2.299440694475659, 2.299892345455423, 2.294940062864125, 2.297704756330773, 2.2928577572867037, 2.2949135588806033, 2.2955400868177636, 2.295696687074842, 2.2945467314747234, 2.2952315604540305, NaN], "accuracy": [0.08651433140039444, 0.08545766770839691, 0.08757099509239197, 0.1026284471154213, 0.107647605240345, 0.10579843819141388, 0.1080438494682312, 0.11874257028102875, 0.11028926074504852, 0.12059172987937927, 0.12098798155784607, 0.1154404953122139, 0.11028926074504852, 0.11781799048185349, 0.11570466309785843, 0.109232597053051], "val_loss": [1.9729036603655135, 1.9733089719499861, 1.9715144293648856, 1.9711495808192663, 1.9685399872916085, 1.968827724456787, 1.9647571018763952, 1.9648376192365373, 1.9649580546787806, 1.9633050646100725, 1.9634344918387276, 1.9622681481497628, 1.962350709097726, 1.962411539895194, 1.9624029568263464, NaN], "val_accuracy": [0.03466666489839554, 0.03433333337306976, 0.07366666942834854, 0.0663333311676979, 0.07133333384990692, 0.06666667014360428, 0.125, 0.12266666442155838, 0.11933333426713943, 0.1316666603088379, 0.13199999928474426, 0.12099999934434891, 0.11866666376590729, 0.11633333563804626, 0.11500000208616257, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 2, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [9, 2, 6, 2, 2, 6, 5, 4, 3, 3, 3, 1, 9, 0, 9, 2, 5, 3, 2, 6, 2, 6, 2, 2, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 1, 2, 3, 2, 2, 3, 3, 0, 3, 0, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [94, 88, 78, 99, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10771428793668747, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), grad), lambda shape,  alpha, beta, grad: tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.302221620024597, 2.2985148983167982, 2.3000539324113864, 2.301196189525656, 2.302134394126089, 2.302475861617524, 2.3028415180609887, 2.30301605878867, 2.303363121921014], "accuracy": [0.09417514503002167, 0.10474177449941635, 0.10328886657953262, 0.10011887550354004, 0.1088363528251648, 0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9691456386021204, 1.9699335098266602, 1.9718553679330009, 1.9730692590985979, 1.9733834947858537, 1.973774024418422, 1.9739225932529993, 1.974137306213379, 1.9745009286063058], "val_accuracy": [0.07366666942834854, 0.09366666525602341, 0.09266666322946548, 0.10833333432674408, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [0, 1, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [58, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [9, 2, 6, 2, 2, 2, 5, 2, 3, 3, 3, 2, 9, 0, 4, 8, 5, 3, 7, 6, 2, 6, 2, 2, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 0, 3, 0, 2, 3, 3, 0, 2, 0, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [94, 38, 90, 99, 37, 47, 96], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [31306516219.94329, 4756398923381.062, 81482567484357.17, 568628407008790.9, 2507087578278849.0, 8177116418105481.0], "accuracy": [0.09708096832036972, 0.10460969805717468, 0.09721305221319199, 0.10249637067317963, 0.09945846349000931, 0.10077928751707077], "val_loss": [264489542802.2857, 14258069382290.285, 153036865404928.0, 834329015109924.6, 3125100345819136.0, 9218213452260498.0], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [2, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 2, 6, 2, 2, 6, 5, 2, 3, 3, 3, 9, 9, 0, 4, 8, 5, 3, 7, 6, 2, 6, 2, 2, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 0, 3, 0, 3, 3, 1, 0, 2, 0, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [94, 38, 78, 99, 69, 47, 96], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 25, 25, 15, 10, 6, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.negative(grad), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))))), grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad)), alpha)))))), tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.negative(tf.math.pow(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), beta))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [14401.801468642632, 2.6736969441124288, 2.4749352971025194, 2.581745350507304, 2.643804839730908, 2.4967247420109304, 2.615670560641044, 2.59962556545115], "accuracy": [0.09774138033390045, 0.1072513535618782, 0.09866596013307571, 0.10157178342342377, 0.10210011899471283, 0.09377889335155487, 0.10289261490106583, 0.09998679161071777], "val_loss": [2.3362909725734164, 2.290236609322684, 2.3167315891810825, 2.2179886272975375, 2.3340041978018626, 2.2844885417393277, 2.120744228363037, 2.254821164267404], "val_accuracy": [0.10100000351667404, 0.10166666656732559, 0.10433333367109299, 0.09966666996479034, 0.10166666656732559, 0.10433333367109299, 0.0989999994635582, 0.10166666656732559]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 8, 2, 2, 4, 6, 0, 2, 3, 5, 3, 2, 2, 5, 4, 8, 5, 2, 0, 6, 2, 2, 2, 2, 2, 2, 9, 6, 0, 2, 6, 2, 2, 9, 8, 8, 2], [0, 1, 2, 3, 2, 2, 3, 3, 0, 1, 3, 3, 3, 0, 3, 3, 0, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [94, 88, 53, 99, 37, 47, 96], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 31, 31, 19, 12, 2, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.pow(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(alpha, beta))), grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.square(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))), alpha)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.negative(grad), grad))))))))))))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [10617377977.663689, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.052833180874586105, 0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [7.728211414068609e+32, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [29, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 6, 2, 8, 6, 6, 2, 3, 3, 3, 2, 9, 0, 4, 8, 5, 3, 7, 6, 2, 6, 2, 2, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [0, 0, 0, 3, 0, 3, 3, 1, 0, 2, 0, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [95, 38, 78, 87, 37, 47, 96], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 9, 9, 5, 4, 3, 2, 1, 1, 0, 0, 1, 0, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3025949051697903, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 4, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [0, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 8, 2, 2, 4, 6, 3, 2, 3, 3, 3, 2, 2, 5, 4, 3, 5, 3, 7, 6, 2, 6, 5, 2, 2, 2, 9, 6, 0, 2, 3, 5, 2, 9, 8, 8, 2], [3, 0, 0, 3, 0, 2, 0, 3, 2, 2, 0, 3, 3, 0, 3, 3, 3, 1, 0, 2, 3, 2, 3, 3, 2, 4, 3, 2, 3, 3, 3], [29, 38, 78, 99, 95, 62, 96, 52], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 2, 9, 9, 5, 4, 2, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(grad, tf.math.add(beta, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.pow(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, sigma))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [3953.545351829826, 450312.5378004887, 6061100.507991019, 33455545.730814952, 117715232.49663189, 308878372.1167613], "accuracy": [0.09721305221319199, 0.10447761416435242, 0.09721305221319199, 0.1026284471154213, 0.09972262382507324, 0.10077928751707077], "val_loss": [30377.149553571428, 1228334.0714285714, 10231409.714285715, 43926381.71428572, 131122016.0, 311556818.28571427], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 4, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 4, 6, 2, 2, 6, 5, 2, 3, 3, 3, 2, 9, 0, 4, 8, 5, 3, 7, 6, 2, 6, 2, 2, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 0, 3, 0, 2, 3, 3, 0, 2, 0, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [94, 45, 78, 99, 77, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 5, 3, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.pow(grad, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [9, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 8, 2, 2, 4, 6, 5, 2, 3, 3, 0, 2, 2, 5, 4, 8, 5, 3, 7, 6, 2, 6, 2, 2, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 2, 0, 2, 0, 2, 3, 3, 0, 2, 0, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [94, 38, 78, 12, 37, 47, 96], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 19, 19, 11, 8, 2, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))), beta))), tf.math.add(beta, tf.math.square(tf.math.add(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, tf.math.multiply(grad, tf.math.negative(tf.math.add(beta, grad))))))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2621233.7454703352, 50161013.97014926, 233997846.75630695, 642485406.2459384, 1383747446.413948, 2519606009.0344734], "accuracy": [0.09721305221319199, 0.10474177449941635, 0.09721305221319199, 0.1026284471154213, 0.09972262382507324, 0.10077928751707077], "val_loss": [10024683.142857144, 80006187.42857143, 269808338.28571427, 639295744.0, 1248333604.5714285, 2156781933.714286], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [58, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0], [0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 0, 2, 2, 6, 5, 2, 3, 3, 3, 2, 9, 0, 4, 6, 5, 3, 7, 6, 2, 6, 2, 2, 2, 2, 9, 6, 0, 2, 8, 2, 2, 0, 8, 8, 2], [3, 0, 0, 3, 0, 2, 3, 3, 1, 2, 0, 3, 3, 0, 3, 3, 3, 3, 1, 2, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [94, 38, 78, 99, 37, 47, 96, 25], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 9, 9, 5, 4, 2, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07647603005170822, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [1, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 8, 2, 2, 4, 5, 5, 2, 3, 3, 3, 2, 2, 5, 1, 8, 5, 2, 7, 6, 2, 6, 2, 2, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 0, 3, 0, 2, 3, 3, 0, 2, 1, 3, 3, 0, 3, 3, 3, 1, 1, 3, 1, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [94, 38, 12, 77, 10, 47, 31, 52], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [0, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 13, 13, 8, 5, 2, 9, 9, 5, 4, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.303174955214114, 2.301380863594042, 2.3025148629417918, 2.301068633601902, 2.302266575042771, 2.302043384045122], "accuracy": [0.09232597798109055, 0.09628847241401672, 0.0882314071059227, 0.09232597798109055, 0.09259014576673508, 0.09074098616838455], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [1, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 2, 6, 2, 2, 6, 5, 2, 3, 2, 3, 1, 9, 2, 4, 8, 5, 3, 7, 6, 2, 6, 2, 2, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 0, 3, 0, 2, 3, 3, 0, 2, 0, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [94, 38, 61, 92, 37, 47, 96], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 4, 4, 2, 2, 1, 32, 32, 18, 14, 7, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(alpha)), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))))), grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(grad, tf.math.multiply(tf.math.add(beta, grad), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)))))))))))), tf.math.subtract(tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.multiply(grad, grad))))), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.303174955214114, 2.301380863594042, 2.3025148629417918, 2.301068633601902, 2.302266575042771, 2.302043384045122], "accuracy": [0.09232597798109055, 0.09628847241401672, 0.0882314071059227, 0.09232597798109055, 0.09259014576673508, 0.09074098616838455], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 1, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 6, 5, 6, 4, 6, 5, 2, 3, 3, 9, 2, 2, 5, 4, 8, 5, 3, 7, 0, 2, 3, 2, 2, 2, 2, 9, 6, 9, 9, 3, 2, 2, 9, 8, 8, 2], [3, 0, 0, 3, 0, 2, 0, 2, 1, 2, 3, 3, 0, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [47, 61, 78, 99, 37, 47, 96], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 4, 4, 2, 2, 0, 32, 32, 20, 12, 5, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), grad))), tf.math.add(beta, tf.math.square(tf.math.add(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, tf.math.multiply(tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.square(beta), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.sqrt(alpha)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.negative(beta), grad)), grad))))))))))))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.303174955214114, 2.301380863594042, 2.3025148629417918, 2.301068633601902, 2.302266575042771, 2.302043384045122], "accuracy": [0.09232597798109055, 0.09628847241401672, 0.0882314071059227, 0.09232597798109055, 0.09259014576673508, 0.09074098616838455], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}]