[{"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [5, 3, 2, 1, 2, 6, 5, 4, 8, 5, 5, 5, 4, 8, 4, 0, 2, 2, 8, 9, 6, 8, 3, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 0, 0, 0, 1, 2, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1], [70, 83, 89, 41, 49, 58, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7754285931587219, "mapping_values": [1, 35, 35, 23, 12, 6, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.square(tf.math.square(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.math.pow(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))), tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(tf.math.sqrt(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)))))))), tf.math.add(alpha, tf.math.sqrt(tf.math.multiply(grad, tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.2824639051566114, 2.2316104030848463, 2.1537835716713123, 2.019314333448132, 1.8240457089223472, 1.6005221854867306, 1.4117950315661891, 1.2903867583500948, 1.1907423674674507, 1.1124412790501768, 1.0557383108982998, 1.0096936779975765, 0.9769040635154547, 0.9483466654988391, 0.922956625547045, 0.8914508467195466, 0.8828630256788244, 0.8640925044223633, 0.8401614817740375, 0.8237114738495342, 0.8158927948688078, 0.8004329067966989, 0.7923016617122092, 0.7932810946903398, 0.7738564394452805, 0.7853099041611149, 0.766606668384556, 0.7421788079249562, 0.7495351401003297, 0.747207749560682, 0.7262245956318741, 0.7309943539371044, 0.7195091887062661, 0.7137068947308477, 0.7096167741954256, 0.6998564735253757, 0.7002673188866311, 0.6996742662594948, 0.6869721810705296, 0.6832425718404488, 0.680092802822094], "accuracy": [0.13855500519275665, 0.2584863305091858, 0.3413023352622986, 0.40364548563957214, 0.447761207818985, 0.4971602261066437, 0.5340113639831543, 0.5556729435920715, 0.5913353562355042, 0.6052040457725525, 0.622639000415802, 0.6450931429862976, 0.653150200843811, 0.6651697158813477, 0.667811393737793, 0.6826046705245972, 0.6884163022041321, 0.6837934255599976, 0.6951525807380676, 0.7025492191314697, 0.702681303024292, 0.7082287669181824, 0.7136441469192505, 0.7057191729545593, 0.7199841737747192, 0.7153612375259399, 0.722229540348053, 0.7265883088111877, 0.724739134311676, 0.7296261787414551, 0.7317395210266113, 0.7292299270629883, 0.7312111854553223, 0.737947404384613, 0.7400607466697693, 0.7457403540611267, 0.7423061728477478, 0.7437590956687927, 0.7411174178123474, 0.7503632307052612, 0.7497028112411499], "val_loss": [1.9263922146388464, 1.8667248317173548, 1.76359646660941, 1.5967560495649065, 1.3724196978977747, 1.1553783416748047, 0.9939450877053397, 0.891719136919294, 0.8170866966247559, 0.7652780328478131, 0.7266670976366315, 0.6961218118667603, 0.673345548766, 0.6584864173616681, 0.6414926392691476, 0.6256674357822963, 0.6165790728160313, 0.6045469897133964, 0.5951225246701922, 0.5866986002240863, 0.5792591231209892, 0.5736230782100132, 0.5675547122955322, 0.5667603697095599, 0.5593801396233695, 0.5482469967433384, 0.5460095746176583, 0.5402101278305054, 0.536934324673244, 0.5347251721790859, 0.5259401627949306, 0.5250577926635742, 0.5186176470347813, 0.5183899572917393, 0.5105778319495065, 0.5080982106072562, 0.5074513980320522, 0.5049483605793544, 0.5028162343161446, 0.4996569497244699, 0.4978261504854475], "val_accuracy": [0.3683333396911621, 0.45766666531562805, 0.5233333110809326, 0.5669999718666077, 0.6000000238418579, 0.6243333220481873, 0.6713333129882812, 0.6853333115577698, 0.699999988079071, 0.7089999914169312, 0.7153333425521851, 0.7203333377838135, 0.7316666841506958, 0.7329999804496765, 0.7356666922569275, 0.7276666760444641, 0.7356666922569275, 0.7396666407585144, 0.7473333477973938, 0.7526666522026062, 0.7483333349227905, 0.7553333044052124, 0.7596666812896729, 0.7596666812896729, 0.7556666731834412, 0.7699999809265137, 0.7639999985694885, 0.7733333110809326, 0.7590000033378601, 0.7680000066757202, 0.7766666412353516, 0.7753333449363708, 0.7730000019073486, 0.7766666412353516, 0.7753333449363708, 0.7836666703224182, 0.7776666879653931, 0.7739999890327454, 0.7799999713897705, 0.7763333320617676, 0.7773333191871643]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [5, 3, 2, 8, 2, 6, 5, 4, 2, 5, 5, 5, 7, 8, 4, 0, 0, 3, 8, 1, 6, 8, 3, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 2, 0, 0, 1, 2, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1], [97, 83, 89, 16, 49, 47, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7751428484916687, "mapping_values": [1, 25, 25, 16, 9, 4, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.2824638421745536, 2.231611761576338, 2.153782303370127, 2.019294229307667, 1.8240170327191496, 1.6004924612306033, 1.4117753489173996, 1.2904148215804165, 1.1907330746223048, 1.1124322429513887, 1.0557968194348355, 1.0096975507800448, 0.9769248329432665, 0.9483732525163308, 0.9228527586001289, 0.8914093764435109, 0.8827649943816931, 0.8640212611971971, 0.8401027004858286, 0.8237359360649664, 0.815914131497285, 0.8004851272282205, 0.7923139511806744, 0.7933241537911245, 0.7737369665207092, 0.7854037973087509, 0.7666679190260434, 0.742158176412105, 0.7497313370038301, 0.7470098073613831, 0.7261283179599186, 0.7310051036438434, 0.7195061828639482, 0.7137666999892222, 0.7094833855190612, 0.6998620925483734, 0.7004195702326312, 0.6996851592661604, 0.687041089062709, 0.6832382697722758, 0.6801268530323394], "accuracy": [0.13855500519275665, 0.2584863305091858, 0.3413023352622986, 0.4037775695323944, 0.4476291239261627, 0.4971602261066437, 0.5342755317687988, 0.5559371113777161, 0.5913353562355042, 0.6053361296653748, 0.6225069165229797, 0.6445648074150085, 0.6530181169509888, 0.6653017997741699, 0.6679434776306152, 0.6833971738815308, 0.6886804699897766, 0.6839255094528198, 0.6955488324165344, 0.7022850513458252, 0.7028133869171143, 0.7080966830253601, 0.713379979133606, 0.7063795924186707, 0.7202483415603638, 0.7153612375259399, 0.7220974564552307, 0.7277770638465881, 0.7246070504188538, 0.7301545143127441, 0.7302865982055664, 0.7288337349891663, 0.7320036888122559, 0.737947404384613, 0.739928662776947, 0.7461365461349487, 0.7421740889549255, 0.7421740889549255, 0.7396644949913025, 0.7493065595626831, 0.7498348951339722], "val_loss": [1.9263921465192522, 1.8667263984680176, 1.7635854993547713, 1.5967248848506383, 1.372417381831578, 1.1553627422877721, 0.9939575876508441, 0.8917564664568219, 0.8171079499380929, 0.7653004441942487, 0.7265691586903164, 0.6960686956133161, 0.673390098980495, 0.6584480319704328, 0.6415098054068429, 0.6256025518689837, 0.6165150574275425, 0.6046086038861956, 0.5951193400791713, 0.5865872246878487, 0.5791304452078683, 0.5735782044274467, 0.5672857250486102, 0.5665879760469709, 0.559485639844622, 0.5481244666235787, 0.5457934992653983, 0.540152907371521, 0.5368944917406354, 0.5344131163188389, 0.5259899752480643, 0.5251217399324689, 0.518624118396214, 0.5184255838394165, 0.5108756508146014, 0.5082083259310041, 0.5080033540725708, 0.505360518183027, 0.5028911488396781, 0.4999192271913801, 0.49789019993373324], "val_accuracy": [0.3683333396911621, 0.45766666531562805, 0.5236666798591614, 0.5669999718666077, 0.5996666550636292, 0.6243333220481873, 0.6710000038146973, 0.6853333115577698, 0.699999988079071, 0.7093333601951599, 0.7149999737739563, 0.7203333377838135, 0.7316666841506958, 0.7326666712760925, 0.734666645526886, 0.7276666760444641, 0.734333336353302, 0.7400000095367432, 0.7476666569709778, 0.7519999742507935, 0.7486666440963745, 0.7556666731834412, 0.7596666812896729, 0.7603333592414856, 0.7553333044052124, 0.7706666588783264, 0.7643333077430725, 0.7733333110809326, 0.7586666941642761, 0.768666684627533, 0.7766666412353516, 0.7743333578109741, 0.7733333110809326, 0.7760000228881836, 0.7746666669845581, 0.7836666703224182, 0.7773333191871643, 0.7736666798591614, 0.7789999842643738, 0.7756666541099548, 0.7773333191871643]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [5, 5, 2, 1, 0, 6, 2, 5, 2, 5, 5, 5, 0, 1, 4, 2, 5, 3, 6, 6, 6, 4, 3, 5, 8, 4, 9, 4, 1, 4], [2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 2, 2, 1, 1, 2, 1, 2, 0, 2, 2], [89, 17, 89, 75, 49, 58, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7751428484916687, "mapping_values": [1, 42, 42, 27, 15, 3, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 52, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))))))), tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(grad, alpha)))))), tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.square(grad), grad)))), tf.math.add(alpha, grad)))))))))), tf.math.add(alpha, tf.math.sqrt(alpha)))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))))))), grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.2824638736655825, 2.2316104390476013, 2.153783603162341, 2.019306696149352, 1.8240417854393227, 1.6005528659364567, 1.4118417435633335, 1.2904244393972342, 1.1907340754386913, 1.1124783753089114, 1.0557729264827311, 1.0097912784580698, 0.9768996060626728, 0.9484176964036163, 0.9229455710543838, 0.8913597866859355, 0.8827829178628858, 0.8640661352361907, 0.8400606980980064, 0.823739325153105, 0.8159099186510694, 0.8004413041314586, 0.7922633179678594, 0.7933263269555315, 0.7738058822833, 0.7855665009838322, 0.7665690037521152, 0.742067772919208, 0.7495973606891226, 0.7472551018727879, 0.7261803563890393, 0.7310651562642491, 0.7193679653374809, 0.7137164085327973, 0.709581202535487, 0.6997389376061137, 0.7004013469096078, 0.6994679841808182, 0.6872833336207372, 0.6833899968871193, 0.6803460270737172], "accuracy": [0.13855500519275665, 0.2584863305091858, 0.3413023352622986, 0.4037775695323944, 0.447761207818985, 0.49689605832099915, 0.5340113639831543, 0.5559371113777161, 0.5914674401283264, 0.6056002974510193, 0.6223748326301575, 0.6450931429862976, 0.6534143686294556, 0.6651697158813477, 0.6679434776306152, 0.6832650899887085, 0.6882842183113098, 0.6840575933456421, 0.6952846646308899, 0.7025492191314697, 0.7030775547027588, 0.7073041796684265, 0.713908314704895, 0.7058512568473816, 0.719852089881897, 0.7161537408828735, 0.7210407853126526, 0.7272487282752991, 0.724210798740387, 0.7296261787414551, 0.7302865982055664, 0.7284374833106995, 0.7316074371337891, 0.7374191284179688, 0.7396644949913025, 0.746268630027771, 0.7425703406333923, 0.7432307600975037, 0.7408532500267029, 0.7493065595626831, 0.7510236501693726], "val_loss": [1.9263921465192522, 1.8667244229997908, 1.7635916301182337, 1.5967461722237724, 1.3724181311471122, 1.1554316111973353, 0.9939792496817452, 0.8917322840009417, 0.817098890032087, 0.7652948072978428, 0.726515565599714, 0.6961243663515363, 0.6733858074460711, 0.658602135522025, 0.641510043825422, 0.6256339379719326, 0.6167891877038139, 0.6046919311795916, 0.595172677721296, 0.5865923166275024, 0.5791457891464233, 0.5736982141222272, 0.5674745695931571, 0.5668141501290458, 0.5595966747828892, 0.5482278040477208, 0.5459338596888951, 0.5401869331087384, 0.5371801682880947, 0.5347247634615216, 0.5259801830564227, 0.5251205818993705, 0.5186982325145176, 0.5182342869894845, 0.51070579460689, 0.5083393199103219, 0.5078508172716413, 0.5049962827137539, 0.5030551127025059, 0.499957799911499, 0.49796484197889057], "val_accuracy": [0.3683333396911621, 0.45766666531562805, 0.5233333110809326, 0.5669999718666077, 0.6000000238418579, 0.624666690826416, 0.6713333129882812, 0.6853333115577698, 0.6993333101272583, 0.7083333134651184, 0.7143333554267883, 0.7203333377838135, 0.7306666374206543, 0.7326666712760925, 0.734000027179718, 0.7273333072662354, 0.734333336353302, 0.7396666407585144, 0.7483333349227905, 0.7526666522026062, 0.7486666440963745, 0.7543333172798157, 0.7580000162124634, 0.7603333592414856, 0.7553333044052124, 0.7689999938011169, 0.765333354473114, 0.7743333578109741, 0.7583333253860474, 0.7680000066757202, 0.7776666879653931, 0.7749999761581421, 0.7726666927337646, 0.7770000100135803, 0.7753333449363708, 0.7836666703224182, 0.7773333191871643, 0.7746666669845581, 0.7789999842643738, 0.7760000228881836, 0.7766666412353516]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 6, 2, 1, 2, 0, 9, 4, 0, 5, 5, 5, 1, 8, 4, 0, 2, 3, 4, 9, 8, 3, 0, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 2, 0, 2, 2, 1, 2, 2, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1], [70, 83, 78, 75, 49, 58, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7751428484916687, "mapping_values": [1, 31, 31, 21, 10, 4, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))))))), tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.pow(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32), alpha)))))))))))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.2824638241931763, 2.231608707041017, 2.153771471400948, 2.019285005144455, 1.8239992786754375, 1.6004898068990216, 1.411775929312806, 1.2903991457556594, 1.1907867617248749, 1.1124861215036685, 1.0557351876180627, 1.009772658332338, 0.9769307812758251, 0.9484105606152161, 0.9230605159469049, 0.8914472545142722, 0.8827609129160497, 0.864050562284752, 0.8400814346176931, 0.8237368294024716, 0.8158323654424969, 0.8004811143028013, 0.7920915729507337, 0.793249519785177, 0.7737700065223689, 0.7854702697139075, 0.7664926591771012, 0.742005877750834, 0.7497545521430304, 0.7472759238591268, 0.7261771928396491, 0.7310973937957672, 0.7195828199591289, 0.7137795979509642, 0.7093458371375924, 0.6996943693371371, 0.7003597634941784, 0.6994810494622692, 0.6873712494089588, 0.6833446855558271, 0.6801509942990788], "accuracy": [0.13855500519275665, 0.2584863305091858, 0.3413023352622986, 0.4037775695323944, 0.4476291239261627, 0.4971602261066437, 0.5341434478759766, 0.5556729435920715, 0.5910711884498596, 0.6059965491294861, 0.6223748326301575, 0.6450931429862976, 0.653150200843811, 0.6647734642028809, 0.6675472259521484, 0.683000922203064, 0.6889446377754211, 0.6840575933456421, 0.6955488324165344, 0.7022850513458252, 0.703209638595581, 0.707568347454071, 0.7140403985977173, 0.7063795924186707, 0.720380425453186, 0.7152291536331177, 0.7218332886695862, 0.7276449799537659, 0.7253995537757874, 0.7294940948486328, 0.7310791015625, 0.7280412316322327, 0.7314753532409668, 0.7386078238487244, 0.7400607466697693, 0.7465327978134155, 0.7417778372764587, 0.7425703406333923, 0.7403249144554138, 0.7500990629196167, 0.7499669790267944], "val_loss": [1.926391669682094, 1.8667187690734863, 1.7635720797947474, 1.5967127936226981, 1.372391700744629, 1.155362606048584, 0.9939384801047189, 0.8917186600821358, 0.8170655454908099, 0.7652018410818917, 0.7265637261526925, 0.6960356916700091, 0.6734218938010079, 0.6585516248430524, 0.6413640465055194, 0.6256483963557652, 0.6165214095796857, 0.6047598804746356, 0.5951174667903355, 0.5866159200668335, 0.5792933532169887, 0.5735016550336566, 0.5671884843281337, 0.5667129755020142, 0.5597385168075562, 0.5482480015073504, 0.546000633920942, 0.5400498083659581, 0.5371277843202863, 0.5347058773040771, 0.5258440971374512, 0.5251664774758475, 0.5186225857053485, 0.5182284116744995, 0.5106141226632255, 0.5080711330686297, 0.507594381059919, 0.5051909344536918, 0.5028561183384487, 0.49965618337903706, 0.4981074503489903], "val_accuracy": [0.3683333396911621, 0.45766666531562805, 0.5233333110809326, 0.5669999718666077, 0.5996666550636292, 0.6243333220481873, 0.6713333129882812, 0.6853333115577698, 0.6996666789054871, 0.7086666822433472, 0.7146666646003723, 0.7203333377838135, 0.731333315372467, 0.7329999804496765, 0.7353333234786987, 0.7279999852180481, 0.7356666922569275, 0.7393333315849304, 0.7476666569709778, 0.7519999742507935, 0.7483333349227905, 0.7549999952316284, 0.7603333592414856, 0.7596666812896729, 0.7556666731834412, 0.7689999938011169, 0.7646666765213013, 0.7733333110809326, 0.7586666941642761, 0.768666684627533, 0.7773333191871643, 0.7743333578109741, 0.7720000147819519, 0.7766666412353516, 0.7749999761581421, 0.7833333611488342, 0.7773333191871643, 0.7746666669845581, 0.7803333401679993, 0.7760000228881836, 0.7763333320617676]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [2, 3, 2, 1, 2, 6, 5, 4, 2, 5, 5, 5, 7, 8, 4, 0, 2, 3, 8, 9, 6, 8, 3, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 0, 0, 0, 1, 2, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1], [70, 74, 89, 41, 49, 58, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7751428484916687, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.2824638736655825, 2.2316105290489614, 2.153782127555713, 2.0193006367400623, 1.824008067002811, 1.6005134392156262, 1.4118254195902216, 1.290493436745208, 1.190811034647733, 1.1124831881930626, 1.0557557944025835, 1.0097511323719228, 0.9769156802253259, 0.9484338142285809, 0.9229221026800754, 0.8914760667114777, 0.8828742463024081, 0.8640370620492113, 0.8401764695985426, 0.8237439320386912, 0.8158565982615298, 0.8004896184000215, 0.7921618785856265, 0.7933605611206219, 0.7737320809473908, 0.7854183556428597, 0.7664851281054347, 0.7420055969610757, 0.7494968502686213, 0.7472408214233901, 0.7261596934875052, 0.7309978346090276, 0.7194724315193115, 0.7136139063913242, 0.7095765461853671, 0.6996411679994319, 0.7002160440283586, 0.6993676508107536, 0.687067047637357, 0.6832221411380156, 0.6800787498560155], "accuracy": [0.13855500519275665, 0.2584863305091858, 0.3413023352622986, 0.40364548563957214, 0.4476291239261627, 0.4967639744281769, 0.5344076156616211, 0.5559371113777161, 0.5912032723426819, 0.605468213558197, 0.6230352520942688, 0.6448289752006531, 0.6530181169509888, 0.6651697158813477, 0.6674151420593262, 0.6831330060958862, 0.6892088055610657, 0.6840575933456421, 0.6959450244903564, 0.7021529674530029, 0.702681303024292, 0.7078325152397156, 0.7136441469192505, 0.7061154246330261, 0.7201162576675415, 0.7157574892044067, 0.7226257920265198, 0.7272487282752991, 0.724739134311676, 0.7305507659912109, 0.7318716049194336, 0.7283053994178772, 0.7310791015625, 0.7382115721702576, 0.739928662776947, 0.7464007139205933, 0.7425703406333923, 0.7428345084190369, 0.739928662776947, 0.7497028112411499, 0.7504953145980835], "val_loss": [1.9263922146388464, 1.8667238780430384, 1.7635880878993444, 1.5967238971165247, 1.3723972184317452, 1.1554053510938371, 0.994067941393171, 0.8917677402496338, 0.8170730727059501, 0.7652484859739032, 0.7265175410679409, 0.6961354698453631, 0.6733975580760411, 0.6584951877593994, 0.6415609972817558, 0.6257487876074654, 0.6165679522923061, 0.6048141377312797, 0.5951646736689976, 0.5866125822067261, 0.5792207036699567, 0.5735300438744682, 0.5672405958175659, 0.5665778943470546, 0.5596320799418858, 0.5481676033564976, 0.5457629305975777, 0.5398771933146885, 0.536754982812064, 0.5346372638429914, 0.5259498528071812, 0.5249041659491402, 0.5186679533549717, 0.5183977229254586, 0.5105774062020438, 0.5082299028124128, 0.5077332598822457, 0.505021163395473, 0.5027133226394653, 0.49954681737082346, 0.49763900893075125], "val_accuracy": [0.3683333396911621, 0.45766666531562805, 0.5233333110809326, 0.5669999718666077, 0.5996666550636292, 0.6243333220481873, 0.6706666946411133, 0.6853333115577698, 0.6990000009536743, 0.7089999914169312, 0.7143333554267883, 0.7206666469573975, 0.7306666374206543, 0.7326666712760925, 0.7353333234786987, 0.7276666760444641, 0.7353333234786987, 0.7393333315849304, 0.7473333477973938, 0.7519999742507935, 0.7486666440963745, 0.7549999952316284, 0.7599999904632568, 0.7606666684150696, 0.7553333044052124, 0.7693333625793457, 0.7643333077430725, 0.7736666798591614, 0.7593333125114441, 0.768666684627533, 0.7773333191871643, 0.7743333578109741, 0.7723333239555359, 0.7773333191871643, 0.7753333449363708, 0.7839999794960022, 0.7770000100135803, 0.7743333578109741, 0.7796666622161865, 0.7773333191871643, 0.7766666412353516]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 6, 2, 1, 2, 0, 9, 4, 2, 5, 5, 5, 7, 8, 4, 0, 2, 3, 9, 9, 8, 2, 0, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 0, 0, 2, 0, 1, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1], [70, 83, 89, 75, 49, 58, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7748571634292603, "mapping_values": [1, 29, 29, 19, 10, 6, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.square(tf.math.square(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.add(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32))), grad)))))))), tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), grad)))), tf.math.multiply(alpha, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.2824638736655825, 2.231610470633103, 2.1537806973276576, 2.019304422182162, 1.8240388794156932, 1.6005165760842424, 1.4118011128145076, 1.2904229165698087, 1.1907526317950898, 1.1124825537590508, 1.055758151206925, 1.0097767981587304, 0.9769107823626335, 0.9484683818757935, 0.9230114211731929, 0.8915024025643963, 0.882813956341991, 0.8640924272063606, 0.8401218039279978, 0.82377714395775, 0.8159297548816062, 0.8004713812839275, 0.7923339924492998, 0.7933166657125851, 0.773838466609773, 0.7854609680985101, 0.7664607654488901, 0.7422466075825039, 0.7497272314160586, 0.7472477408133131, 0.726193179913862, 0.7310823444771556, 0.7195782648133029, 0.7137411163861269, 0.7097442070207481, 0.6996574046636663, 0.7003414646163042, 0.6995131523224026, 0.6871763423701256, 0.6833203741824229, 0.6801330549936442], "accuracy": [0.13855500519275665, 0.2584863305091858, 0.3413023352622986, 0.4037775695323944, 0.4476291239261627, 0.4970281422138214, 0.5337471961975098, 0.5559371113777161, 0.5910711884498596, 0.605468213558197, 0.6222427487373352, 0.6448289752006531, 0.6532822847366333, 0.6646413803100586, 0.6680755615234375, 0.683000922203064, 0.6885483860969543, 0.6840575933456421, 0.6955488324165344, 0.7020208835601807, 0.7029454708099365, 0.7077004313468933, 0.713908314704895, 0.7057191729545593, 0.7201162576675415, 0.7148329019546509, 0.7223616242408752, 0.726192057132721, 0.7246070504188538, 0.7301545143127441, 0.7310791015625, 0.7285695672035217, 0.7313432693481445, 0.7384757399559021, 0.7400607466697693, 0.7465327978134155, 0.7423061728477478, 0.7432307600975037, 0.7401928305625916, 0.7503632307052612, 0.7500990629196167], "val_loss": [1.9263921465192522, 1.8667234693254744, 1.763587202344622, 1.5967445032937186, 1.3724205493927002, 1.1553890705108643, 0.9939553397042411, 0.891693081174578, 0.81706816809518, 0.7652725492204938, 0.726454632622855, 0.6961074045726231, 0.673448017665318, 0.658505916595459, 0.6415797812598092, 0.6257007973534721, 0.6165403808866229, 0.6047829559871128, 0.5950908831187657, 0.586592538016183, 0.579228299004691, 0.5735818488257272, 0.5674405779157367, 0.5667349781308856, 0.5593829325267247, 0.5480129889079502, 0.5458699975694928, 0.5401871715273175, 0.536939093044826, 0.5343609537397113, 0.5258575677871704, 0.5251567363739014, 0.5186359882354736, 0.5183801480701992, 0.5108392408915928, 0.5081404617854527, 0.5077856779098511, 0.5050644363675799, 0.5027757883071899, 0.49946440969194683, 0.4978088991982596], "val_accuracy": [0.3683333396911621, 0.45766666531562805, 0.5236666798591614, 0.5669999718666077, 0.5993333458900452, 0.6243333220481873, 0.6713333129882812, 0.6850000023841858, 0.6990000009536743, 0.7083333134651184, 0.7143333554267883, 0.7206666469573975, 0.731333315372467, 0.7319999933242798, 0.7350000143051147, 0.7279999852180481, 0.7353333234786987, 0.7390000224113464, 0.7476666569709778, 0.7516666650772095, 0.7483333349227905, 0.7553333044052124, 0.7596666812896729, 0.7599999904632568, 0.7559999823570251, 0.7706666588783264, 0.7643333077430725, 0.7720000147819519, 0.7593333125114441, 0.7680000066757202, 0.7773333191871643, 0.7749999761581421, 0.7730000019073486, 0.7773333191871643, 0.7749999761581421, 0.7836666703224182, 0.7776666879653931, 0.7743333578109741, 0.7793333530426025, 0.7763333320617676, 0.7770000100135803]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [6, 6, 2, 1, 2, 0, 9, 4, 2, 5, 5, 5, 7, 8, 4, 0, 2, 3, 9, 9, 8, 2, 0, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 2, 2, 0, 2, 1, 0, 1, 2, 2, 1, 0, 2, 1, 2, 0, 2, 1], [70, 83, 89, 75, 49, 58, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7748571634292603, "mapping_values": [1, 21, 21, 13, 8, 3, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.add(grad, grad), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))))), tf.math.square(tf.math.square(tf.math.add(grad, tf.math.add(alpha, alpha)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.2824639051566114, 2.2316106100123965, 2.153783279403074, 2.0193073166485838, 1.8240334699497467, 1.6005138418914115, 1.4117836545345381, 1.2903967609243023, 1.1907217070064713, 1.1124609698866337, 1.055788933073509, 1.0097673914735155, 0.976944451869959, 0.948402481379211, 0.9229795363254519, 0.8914152224144806, 0.8826790944129532, 0.8641138806508092, 0.8400815740993325, 0.8236474473683306, 0.815921957915438, 0.8005964548407355, 0.7921543575989619, 0.7932333259408689, 0.7736277333450292, 0.7854236265640249, 0.7666223332031985, 0.7420163516906337, 0.7495425767225281, 0.747214139121918, 0.7261350679517249, 0.7310388736311692, 0.7196405018089218, 0.7137254062282757, 0.7095377913177635, 0.6995357990249147, 0.7004539732604907, 0.6995946823676753, 0.6873111126523969, 0.6832443009262402, 0.6800226669474647], "accuracy": [0.13855500519275665, 0.2584863305091858, 0.3413023352622986, 0.40364548563957214, 0.4476291239261627, 0.4970281422138214, 0.533879280090332, 0.5556729435920715, 0.5915995240211487, 0.6057323813438416, 0.6225069165229797, 0.6448289752006531, 0.6532822847366333, 0.6650376319885254, 0.6680755615234375, 0.6837934255599976, 0.6889446377754211, 0.6837934255599976, 0.6955488324165344, 0.7022850513458252, 0.7025492191314697, 0.7078325152397156, 0.7135120630264282, 0.7059833407402039, 0.7195879220962524, 0.7149649858474731, 0.7224937081336975, 0.7269845604896545, 0.7250033020973206, 0.7301545143127441, 0.7314753532409668, 0.7289658188819885, 0.7309470176696777, 0.7386078238487244, 0.7396644949913025, 0.7460044622421265, 0.7428345084190369, 0.7433628439903259, 0.7404569983482361, 0.7504953145980835, 0.750231146812439], "val_loss": [1.9263921465192522, 1.8667241505214147, 1.7635894502912248, 1.596740995134626, 1.3724135671343123, 1.1553653989519392, 0.9939122881208148, 0.8916847705841064, 0.8170191390173775, 0.7651486737387521, 0.7265257154192243, 0.6961101463862828, 0.673398460660662, 0.6585659640175956, 0.6414645229067121, 0.6256839547838483, 0.6165342501231602, 0.6046267747879028, 0.5950878007071358, 0.5866319452013288, 0.5793650490897042, 0.573744365147182, 0.5673643180302211, 0.5664562497820173, 0.5595961468560355, 0.5481398957116264, 0.5458909954343524, 0.5401756763458252, 0.5370582001549857, 0.5346777950014386, 0.5258323805672782, 0.5252416985375541, 0.5186233009610858, 0.5181781905038017, 0.510535444532122, 0.5079765149525234, 0.5075615474155971, 0.5049480710710798, 0.502913100378854, 0.4994311843599592, 0.49776569434574675], "val_accuracy": [0.3683333396911621, 0.45766666531562805, 0.5236666798591614, 0.5669999718666077, 0.5996666550636292, 0.6243333220481873, 0.6713333129882812, 0.6853333115577698, 0.6990000009536743, 0.7089999914169312, 0.7143333554267883, 0.7206666469573975, 0.7306666374206543, 0.7329999804496765, 0.734000027179718, 0.7276666760444641, 0.7350000143051147, 0.7396666407585144, 0.7476666569709778, 0.7523333430290222, 0.7483333349227905, 0.7549999952316284, 0.7599999904632568, 0.7603333592414856, 0.7556666731834412, 0.7703333497047424, 0.7643333077430725, 0.7736666798591614, 0.7570000290870667, 0.7676666378974915, 0.7770000100135803, 0.7736666798591614, 0.7726666927337646, 0.7763333320617676, 0.7746666669845581, 0.7839999794960022, 0.777999997138977, 0.7739999890327454, 0.7796666622161865, 0.7763333320617676, 0.7773333191871643]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [6, 6, 2, 1, 2, 0, 9, 4, 2, 8, 5, 5, 7, 8, 4, 0, 2, 3, 9, 9, 8, 2, 0, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 0, 0, 2, 0, 1, 2, 2, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1], [70, 83, 89, 75, 49, 58, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [1, 1, 1, 0], [8, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.15285713970661163, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.7850328561825415, 2.5192666807037383, 2.3044827572972846, 2.303489170432201, 2.30310232943831, 2.3030288722048726, 2.3031288313434235, 2.3029591596956345, 2.303003076360116], "accuracy": [0.21291771531105042, 0.09853387624025345, 0.09919429570436478, 0.09774138033390045, 0.0944393053650856, 0.09655263274908066, 0.0956280529499054, 0.0940430611371994, 0.09206181764602661], "val_loss": [3.009747641427176, 1.9757628440856934, 1.9740184375217982, 1.9736642156328474, 1.9736535208565849, 1.9736905097961426, 1.9736879212515694, 1.9737093789236886, 1.9736474582127161], "val_accuracy": [0.09833333641290665, 0.0989999994635582, 0.0989999994635582, 0.10433333367109299, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [2, 4, 5, 1, 2, 2, 2, 1, 2, 5, 5, 5, 7, 8, 4, 0, 2, 3, 9, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 1, 2, 0, 1, 2, 1, 2, 0, 2, 2, 1, 0, 2, 1, 2, 1, 2, 1, 0], [70, 9, 93, 75, 78, 83, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [1, 1, 1, 0], [4, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10685714334249496, "mapping_values": [1, 31, 31, 19, 12, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.square(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), alpha), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(grad, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))))))))), tf.math.sqrt(tf.math.pow(tf.math.add(alpha, alpha), grad))), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(grad, tf.math.multiply(tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, grad))))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.6932919782465476, 2.4608485811752745, 2.3052022513176835, 2.3035147596328267, 2.303175279067854, 2.3030835774753857, 2.303170162751895], "accuracy": [0.21503104269504547, 0.09919429570436478, 0.0944393053650856, 0.09708096832036972, 0.09245806187391281, 0.09628847241401672, 0.09813763201236725], "val_loss": [2.79513372693743, 1.9763385227748327, 1.9741219111851283, 1.9736758640834264, 1.9736740248543876, 1.973694120134626, 1.9736924171447754], "val_accuracy": [0.09833333641290665, 0.10433333367109299, 0.10433333367109299, 0.10433333367109299, 0.10433333367109299, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 6, 2, 1, 2, 0, 9, 4, 2, 5, 5, 5, 7, 8, 4, 0, 2, 3, 9, 9, 8, 2, 0, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 0, 0, 2, 0, 1, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1], [43, 9, 89, 43, 49, 58, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [2, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 22, 22, 14, 8, 5, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.add(alpha, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.add(grad, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.square(grad)))), tf.math.square(tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))), alpha)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [1.2721223557491487e+34, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.10315678268671036, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [20.860157012939453, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10433333367109299, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [5, 2, 2, 1, 0, 6, 2, 9, 2, 5, 5, 5, 0, 5, 4, 3, 2, 3, 6, 6, 6, 4, 3, 0, 8, 4, 9, 4, 1, 4], [2, 0, 2, 2, 0, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 1, 2, 0, 2, 2], [70, 83, 89, 75, 49, 58, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [1, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 4, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 42, 42, 26, 16, 3, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, grad)))), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.multiply(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))), tf.math.add(alpha, grad))))), tf.math.add(alpha, grad))), tf.math.multiply(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))))))), tf.math.add(alpha, alpha)))))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), alpha))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 6, 2, 8, 2, 0, 9, 4, 2, 5, 5, 4, 7, 8, 4, 6, 2, 3, 9, 9, 8, 2, 0, 5, 8, 4, 5, 4, 1, 4], [2, 0, 1, 0, 0, 2, 0, 1, 1, 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1], [52, 84, 89, 75, 49, 25, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [90], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 31, 31, 21, 10, 7, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.square(tf.math.square(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), grad), tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), alpha)))))))))), tf.math.multiply(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [184.93568671078745, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.15691454708576202, 0.10170386731624603, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [14767160466.285715, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 8, 5, 2, 6, 2, 4, 0, 5, 5, 5, 7, 5, 4, 0, 2, 3, 6, 6, 3, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 2, 0, 2, 2, 1, 0, 1, 2, 2, 1, 0, 2, 1, 2, 0, 2, 1], [49, 83, 69, 75, 78, 83, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [1, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [28], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.09914285689592361, "mapping_values": [1, 5, 5, 3, 2, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.sqrt(grad), tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.6918128590463506, 2.4571389107105204, 2.305223169454006, 2.3035159476318885, 2.3031593974492237, 2.303054139661657, 2.303163702713736], "accuracy": [0.21503104269504547, 0.09694888442754745, 0.09549596905708313, 0.09747721254825592, 0.09179764986038208, 0.09747721254825592, 0.09787346422672272], "val_loss": [2.7698636736188615, 1.9763740130833216, 1.974128246307373, 1.9736756597246443, 1.9736730030604772, 1.9736825398036413, 1.9736884662083216], "val_accuracy": [0.09833333641290665, 0.10433333367109299, 0.10433333367109299, 0.10433333367109299, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [5, 3, 2, 1, 2, 6, 5, 2, 2, 5, 5, 5, 7, 8, 4, 0, 2, 3, 1, 9, 6, 8, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 2, 2, 0, 2, 1, 0, 1, 2, 2, 1, 0, 2, 1, 2, 0, 2, 1], [70, 83, 89, 41, 49, 58, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [1, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [75], [0, 0, 1, 0, 0, 0, 1, 0, 1, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.087714284658432, "mapping_values": [1, 26, 26, 16, 10, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 10, 6, 4, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(alpha, tf.math.square(grad))), grad)))), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(tf.math.sqrt(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, alpha))), tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))))), alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.square(sigma), tf.math.square(tf.math.subtract(tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.math.square(beta)), sigma)))", "other_info": {"loss": [2.3008929379407395, 2.299600637222026, 2.2992246676555728, 2.2979234377816056, 2.2974516869913932, 2.2970551974926767, 2.29500184564889, 2.2959306073179335, 2.2962182862427034, 2.2958536735378976, 2.2958078888255873, 2.297467016351851, 2.297619329420268, 2.2970502429146413, 2.296530468588917, 2.296941815869935, 2.2978133387207245, 2.297981791067369], "accuracy": [0.0886276587843895, 0.09734513610601425, 0.09655263274908066, 0.09959053993225098, 0.10500594228506088, 0.1080438494682312, 0.11319508403539658, 0.10936468094587326, 0.107647605240345, 0.10896842926740646, 0.11821424216032028, 0.11240258812904358, 0.10777968913316727, 0.11847840249538422, 0.11781799048185349, 0.11570466309785843, 0.11491216719150543, 0.11187426000833511], "val_loss": [1.9691554478236608, 1.9679760932922363, 1.9670614515032088, 1.9664478302001953, 1.9659865243094308, 1.9656859125409807, 1.9655908175877161, 1.9656899315970284, 1.9657438141959054, 1.965911524636405, 1.9661674499511719, 1.96632753099714, 1.9664867264883858, 1.9667020525251115, 1.966919217790876, 1.967142036982945, 1.96741669518607, 1.9677386965070451], "val_accuracy": [0.052000001072883606, 0.06133333221077919, 0.07866666465997696, 0.09300000220537186, 0.10866666585206985, 0.11833333224058151, 0.12433333694934845, 0.12466666847467422, 0.13199999928474426, 0.1313333362340927, 0.13300000131130219, 0.13766667246818542, 0.1393333375453949, 0.13500000536441803, 0.1340000033378601, 0.13633333146572113, 0.13866665959358215, 0.13300000131130219]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 8, 2, 4, 6, 2, 4, 0, 5, 5, 5, 4, 5, 4, 0, 2, 3, 6, 3, 3, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 2, 2, 0, 1, 2, 1, 1, 1, 2, 2, 0, 2, 1, 2, 0, 2, 1], [64, 55, 42, 11, 68, 58, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [1, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [28], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.07000000029802322, "mapping_values": [1, 41, 41, 25, 16, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(grad, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, grad)), tf.math.square(tf.math.square(tf.math.add(alpha, tf.math.square(grad)))))), tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.pow(grad, tf.math.negative(tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.divide_no_nan(tf.math.multiply(grad, tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), alpha), alpha)), grad))), grad)))))), tf.math.multiply(tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(alpha)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.679177405103291, 2.5107715130167203, 2.305766521522382, 2.303650808875996, 2.3032486887813293, 2.3030884951459356, 2.3031369828907033], "accuracy": [0.2148989588022232, 0.0948355570435524, 0.0940430611371994, 0.09734513610601425, 0.09153348207473755, 0.09721305221319199, 0.09734513610601425], "val_loss": [3.0736022676740373, 1.9771077292306083, 1.9742749077933175, 1.973705496106829, 1.973663602556501, 1.9736912591116769, 1.9737036568777901], "val_accuracy": [0.09833333641290665, 0.10433333367109299, 0.10433333367109299, 0.10433333367109299, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [5, 3, 2, 1, 2, 6, 5, 1, 2, 5, 2, 5, 7, 8, 6, 6, 1, 3, 8, 9, 6, 8, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 2, 0, 1, 1, 2, 2, 2, 2, 2, 1, 1, 2, 1, 2, 0, 2, 2], [70, 83, 89, 75, 49, 58, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 1, 0, 0, 1], [1, 1, 1, 0], [2, 4], [2, 3, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.0657142847776413, "mapping_values": [1, 33, 33, 20, 13, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.multiply(tf.math.add(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), grad)))), tf.math.multiply(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))))), tf.math.add(alpha, grad))))))), tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))), alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.680260279899449, 2.5101793014519815, 2.3056499220203523, 2.303638401316173, 2.3032320142500846, 2.3030881484611996, 2.303136266406816], "accuracy": [0.21529521048069, 0.09285431355237961, 0.09338264167308807, 0.09681680053472519, 0.0936468094587326, 0.09655263274908066, 0.09642054885625839], "val_loss": [3.070827211652483, 1.9769692420959473, 1.9742492267063685, 1.9737016814095634, 1.9736646924700056, 1.9736864226205009, 1.973700795854841], "val_accuracy": [0.09833333641290665, 0.10433333367109299, 0.10433333367109299, 0.10433333367109299, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [2, 6, 5, 1, 2, 2, 5, 8, 2, 5, 5, 5, 7, 8, 4, 0, 2, 3, 9, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 1, 2, 0, 0, 2, 1, 2, 1, 2, 2, 1, 0, 2, 1, 2, 1, 2, 1, 0], [70, 83, 93, 75, 78, 83, 99, 44], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [1, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.301802788018834, 2.3022315088374627, 2.303392785934803, 2.3030653791562394, 2.303063905061181, 2.30346018312913], "accuracy": [0.08717474341392517, 0.0886276587843895, 0.08730682730674744, 0.0882314071059227, 0.08796724677085876, 0.08717474341392517], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1], [5, 2, 2, 1, 0, 9, 2, 1, 2, 5, 5, 5, 0, 0, 4, 3, 2, 3, 6, 6, 9, 4, 3, 5, 8, 4, 9, 4, 1, 4], [2, 0, 2, 2, 0, 2, 0, 1, 2, 2, 1, 2, 0, 1, 2, 1, 2, 0, 2, 2], [70, 83, 89, 75, 49, 58, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [1, 0, 1, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [87], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 20, 20, 14, 6, 3, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), grad), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, grad), grad), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.negative(grad))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.301802788018834, 2.3022315088374627, 2.303392785934803, 2.3030653791562394, 2.303063905061181, 2.30346018312913], "accuracy": [0.08717474341392517, 0.0886276587843895, 0.08730682730674744, 0.0882314071059227, 0.08796724677085876, 0.08717474341392517], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [5, 3, 2, 4, 2, 9, 5, 4, 2, 5, 5, 5, 7, 8, 4, 5, 1, 2, 9, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 2, 2, 2, 0, 0, 2, 1, 0, 1, 2, 2, 1, 0, 2, 1, 2, 0, 2, 1], [70, 83, 89, 75, 49, 58, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [2, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [31], [1, 0, 1, 0, 1, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 23, 23, 15, 8, 3, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.square(grad))))))))), tf.math.add(alpha, tf.math.square(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.301802788018834, 2.3022315088374627, 2.303392785934803, 2.3030653791562394, 2.303063905061181, 2.30346018312913], "accuracy": [0.08717474341392517, 0.0886276587843895, 0.08730682730674744, 0.0882314071059227, 0.08796724677085876, 0.08717474341392517], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [5, 3, 2, 4, 2, 6, 5, 4, 2, 5, 5, 5, 7, 8, 4, 5, 5, 2, 9, 9, 6, 2, 3, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 2, 2, 0, 2, 1, 0, 1, 2, 2, 1, 0, 2, 1, 2, 0, 2, 1], [70, 83, 89, 75, 49, 58, 99, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [5, 2, 3, 5, 0, 3, 1, 3], [53], [1, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4], [2, 0, 1, 5, 3, 4], [83], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0], [4, 5, 7, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 11, 7, 4, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.square(sigma), tf.math.add(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.math.subtract(beta, tf.math.subtract(sigma, tf.math.square(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))))))", "other_info": {"loss": [2.301802788018834, 2.3022315088374627, 2.303392785934803, 2.3030653791562394, 2.303063905061181, 2.30346018312913], "accuracy": [0.08717474341392517, 0.0886276587843895, 0.08730682730674744, 0.0882314071059227, 0.08796724677085876, 0.08717474341392517], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}]