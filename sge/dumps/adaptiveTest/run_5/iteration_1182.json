[{"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 2, 5, 0, 2, 2, 0, 6, 4, 2, 0, 8, 6, 5, 2, 6, 0, 2, 4, 8, 4, 6, 4, 2, 0, 8, 6, 3, 2, 2, 2, 1, 9, 1, 2, 8, 2, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [4, 1, 0, 1, 2, 1, 3, 0, 3, 3, 1, 3, 2, 3, 1, 3, 3, 3, 2, 3, 3, 0, 3, 4, 3, 1, 3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 3, 0, 5], [71, 31, 55, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 1, 2, 3, 0, 0, 0], [49, 18, 10, 42]], "fitness": -0.8454285860061646, "mapping_values": [1, 4, 4, 2, 2, 1, 12, 12, 7, 5, 1, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))), alpha)), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))), alpha), tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), alpha)", "other_info": {"loss": [2.07414691008282, 1.118412577402102, 0.8120419380057363, 0.7217148963517958, 0.6625311289559801, 0.6344085677487896, 0.6064362884307849, 0.5862313688250108, 0.577436606795198, 0.549263991211793, 0.5432712382817423, 0.5163985790908455, 0.512444755302334, 0.4880149586798099, 0.48047576262305014, 0.46699256406736067, 0.45555366613310344, 0.4506396407409351, 0.4358896657011654, 0.4300529763226527, 0.4139464787480507, 0.40381188504274856, 0.3985287963383548, 0.38197688205508884, 0.3850783412529887, 0.37700129930274895, 0.3704823885949973, 0.37546267037961023, 0.3657558697199919, 0.3545033528253371, 0.3372699136329979, 0.3306527064303523, 0.33120504079509355, 0.31856393612937967, 0.31434361068028754, 0.3125023764429343, 0.31245567035429417, 0.3060386286372632, 0.29579528020341805, 0.29402826406605853, 0.2975303193187953, 0.29042021667464474, 0.2910081920583156, 0.2763006459366077, 0.2804148090695031, 0.2658234627302596, 0.26257780243487266, 0.25622006093096883, 0.2532364078650401, 0.2507896405429321, 0.24082851778160327, 0.2399221710922727], "accuracy": [0.3057720363140106, 0.5988640785217285, 0.691850483417511, 0.7238145470619202, 0.7448157668113708, 0.7586844563484192, 0.7720248103141785, 0.7794214487075806, 0.7812706232070923, 0.7921014428138733, 0.7956677079200745, 0.8034605979919434, 0.8101968169212341, 0.813498854637146, 0.819970965385437, 0.8264430165290833, 0.8286884427070618, 0.8274996876716614, 0.8388587832450867, 0.8407079577445984, 0.8465195894241333, 0.8502179384231567, 0.8540483713150024, 0.8577466607093811, 0.8549728989601135, 0.8585391640663147, 0.8589354157447815, 0.8570862412452698, 0.8610487580299377, 0.8644828796386719, 0.8729361891746521, 0.8745211958885193, 0.8762382864952087, 0.8775591254234314, 0.8835028409957886, 0.883238673210144, 0.882710337638855, 0.8813894987106323, 0.8862766027450562, 0.8860124349594116, 0.8862766027450562, 0.8889182209968567, 0.8914278149604797, 0.8943336606025696, 0.8952582478523254, 0.9019944667816162, 0.8960506916046143, 0.9037115573883057, 0.9051644206047058, 0.9033153057098389, 0.9049002528190613, 0.9070135951042175], "val_loss": [0.9869472299303327, 0.6664372852870396, 0.574731537273952, 0.5188166754586356, 0.5061909641538348, 0.4881638969693865, 0.4632776805332729, 0.45169384138924734, 0.44862355504717144, 0.43410024472645353, 0.4229016218866621, 0.40539261272975374, 0.40159086670194355, 0.399890525000436, 0.38712395089013235, 0.3929758753095354, 0.37553843430110384, 0.3724513649940491, 0.35997776474271503, 0.3616807631083897, 0.3530805025781904, 0.3486734373228891, 0.34296830211366924, 0.34434921400887625, 0.3439835820879255, 0.3362263526235308, 0.3442199741091047, 0.3286892260823931, 0.3397970369883946, 0.33747885056904386, 0.3264991215297154, 0.3232033337865557, 0.3189394303730556, 0.3157535365649632, 0.318871659891946, 0.3298622710364206, 0.3165351152420044, 0.3190188578196934, 0.31386700698307585, 0.3143776740346636, 0.31595659255981445, 0.31326351846967426, 0.3075571741376604, 0.32179746457508634, 0.30638520206723896, 0.31419033663613455, 0.30035698413848877, 0.31918470348630634, 0.3055308886936733, 0.30394658020564486, 0.30836524282182964, 0.3128104976245335], "val_accuracy": [0.6136666536331177, 0.7086666822433472, 0.722000002861023, 0.7606666684150696, 0.7566666603088379, 0.7806666493415833, 0.7860000133514404, 0.7926666736602783, 0.79666668176651, 0.800000011920929, 0.8063333630561829, 0.8136666417121887, 0.8233333230018616, 0.8243333101272583, 0.8306666612625122, 0.8186666369438171, 0.8389999866485596, 0.8356666564941406, 0.843999981880188, 0.8346666693687439, 0.8513333201408386, 0.8473333120346069, 0.8546666502952576, 0.8573333621025085, 0.8533333539962769, 0.8613333106040955, 0.8516666889190674, 0.8619999885559082, 0.8583333492279053, 0.8583333492279053, 0.8629999756813049, 0.8656666874885559, 0.8666666746139526, 0.8673333525657654, 0.8700000047683716, 0.8629999756813049, 0.8706666827201843, 0.8683333396911621, 0.8723333477973938, 0.8743333220481873, 0.8736666440963745, 0.8700000047683716, 0.8776666522026062, 0.8666666746139526, 0.8773333430290222, 0.8736666440963745, 0.8830000162124634, 0.8733333349227905, 0.8773333430290222, 0.8796666860580444, 0.878333330154419, 0.8793333172798157]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 2, 5, 4, 2, 2, 5, 6, 4, 2, 0, 4, 2, 5, 2, 6, 0, 3, 4, 2, 4, 6, 4, 2, 0, 1, 0, 2, 2, 2, 2, 6, 9, 1, 2, 8, 5, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 1, 0, 1, 2, 2, 3, 0, 3, 3, 1, 3, 2, 0, 2, 3, 1, 3, 2, 3, 3, 2, 2, 4, 3, 1, 3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 3, 0, 5], [4, 31, 78, 62, 37, 47, 1, 35, 47, 32, 7], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 1, 2, 3, 0, 0, 0], [91, 18, 10, 42]], "fitness": -0.8362857103347778, "mapping_values": [1, 4, 4, 2, 2, 1, 64, 64, 37, 27, 4, 3, 2, 1, 1, 0, 3, 1, 2, 1], "tree_depth": 50, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), alpha)), tf.math.add(beta, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)))))), tf.math.add(tf.math.add(beta, tf.math.negative(alpha)), beta))), tf.math.add(beta, beta))), tf.math.pow(grad, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), grad)))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(grad)), tf.math.multiply(tf.math.pow(tf.math.add(tf.math.pow(alpha, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.subtract(tf.math.negative(tf.math.add(beta, beta)), tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, beta))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(alpha, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)), grad))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), grad)))))), tf.math.add(tf.math.add(beta, grad), beta))))))), beta), tf.math.sqrt(grad)), grad))), tf.math.add(beta, tf.math.square(alpha)))))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), alpha)", "other_info": {"loss": [1.8966811113290782, 1.0989285769668538, 0.7855861586129992, 0.6679548538120085, 0.6069448226793426, 0.5624938182401903, 0.5326643192127255, 0.5061038922419591, 0.48454756161099366, 0.4656253675420318, 0.4492871605953158, 0.42684076286152667, 0.42792029159416406, 0.40017868688062136, 0.3928176240284272, 0.3733198803138141, 0.3684592765312248, 0.3603852144353315, 0.3439430109915433, 0.34281309942732463, 0.33137303573060833, 0.31536740983765377, 0.316005904609816, 0.30905535444764887, 0.309374774707669, 0.30329323931692015, 0.2878477605279442, 0.2828580559701369, 0.2693013001851843, 0.26189300340943883, 0.24942100440522133, 0.24219033549553398, 0.24406056805585022, 0.22588148001808264, 0.22853181962961566], "accuracy": [0.36441686749458313, 0.6203936338424683, 0.7055870890617371, 0.7421740889549255, 0.765949010848999, 0.7868181467056274, 0.8061022162437439, 0.8127063512802124, 0.8222163319587708, 0.8271034359931946, 0.8329150676727295, 0.8383304476737976, 0.8367455005645752, 0.8481045961380005, 0.8508783578872681, 0.8639545440673828, 0.8617091774940491, 0.8621054291725159, 0.8679170608520508, 0.8726720213890076, 0.8746532797813416, 0.8798044919967651, 0.8819178342819214, 0.8782195448875427, 0.8808611631393433, 0.8850878477096558, 0.8897107243537903, 0.8885219693183899, 0.8971073627471924, 0.89988112449646, 0.9056927561759949, 0.9095231890678406, 0.9085986018180847, 0.9116365313529968, 0.913089394569397], "val_loss": [1.1162989139556885, 0.6441289867673602, 0.5411360434123448, 0.4936720473425729, 0.4512068033218384, 0.4329510586602347, 0.4095819337027414, 0.39177519934517996, 0.3794904521533421, 0.3921243463243757, 0.36111269678388325, 0.35616315262658255, 0.3504957982472011, 0.34794888326099943, 0.32834140743528095, 0.334508410521916, 0.3252967596054077, 0.32635087626320974, 0.3190140979630606, 0.31945384400231497, 0.31984846932547434, 0.3106327993529184, 0.30812067644936697, 0.3087564366204398, 0.31338004555021015, 0.3039300867489406, 0.3236973796572004, 0.3017727732658386, 0.3105018734931946, 0.31269337449754986, 0.3046671322413853, 0.30915350573403494, 0.315763567175184, 0.3100513645580837, 0.3180065325328282], "val_accuracy": [0.5253333449363708, 0.7239999771118164, 0.746666669845581, 0.7706666588783264, 0.7866666913032532, 0.809333324432373, 0.8196666836738586, 0.824999988079071, 0.8460000157356262, 0.8220000267028809, 0.8463333249092102, 0.8443333506584167, 0.8513333201408386, 0.8560000061988831, 0.8629999756813049, 0.8600000143051147, 0.8629999756813049, 0.8603333234786987, 0.8666666746139526, 0.8653333187103271, 0.8700000047683716, 0.8723333477973938, 0.8733333349227905, 0.8740000128746033, 0.8736666440963745, 0.8766666650772095, 0.8666666746139526, 0.8806666731834412, 0.878000020980835, 0.8823333382606506, 0.8790000081062317, 0.8803333044052124, 0.8763333559036255, 0.8776666522026062, 0.8756666779518127]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [32, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 4, 1, 2, 5, 6, 4, 2, 0, 8, 6, 5, 2, 6, 0, 3, 4, 2, 4, 6, 4, 6, 0, 1, 0, 2, 2, 1, 1, 1, 9, 1, 2, 9, 5, 4, 6, 4, 2, 9, 1, 3, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 1, 0, 3, 3, 3, 1, 3, 3, 3, 1, 3, 2, 3, 1, 3, 1, 3, 1, 3, 3, 2, 2, 3, 3, 1, 0, 3, 3, 3, 2, 2, 3, 2, 4, 0, 3, 0, 5], [4, 31, 89, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 1, 2, 3, 0, 0, 0], [91, 18, 10, 42]], "fitness": -0.8208571672439575, "mapping_values": [1, 4, 4, 2, 2, 1, 71, 71, 42, 29, 5, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 67, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.pow(tf.math.add(beta, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.negative(grad), grad)))))), tf.math.add(beta, grad))), tf.math.sqrt(alpha))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.pow(alpha, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, alpha))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(tf.math.add(beta, grad), alpha))))))))), tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))), grad)), tf.math.square(grad))))), tf.math.pow(tf.math.divide_no_nan(beta, tf.math.pow(beta, grad)), tf.math.add(beta, grad))), tf.math.add(alpha, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))))))))))), grad)), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), alpha)", "other_info": {"loss": [2.234872337125154, 1.6317197600879751, 1.1173911675832464, 0.878011828746778, 0.8017177821040201, 0.7335695446505917, 0.6982923400258785, 0.6472050650654184, 0.6193751251582598, 0.5934220540950232, 0.5743054071862731, 0.5342057543408051, 0.5197678291251269, 0.4989729706975904, 0.48328027753089287, 0.4700707287017491, 0.4540612565968818, 0.4424316036057211, 0.4233722447475123, 0.41513735579855454, 0.4047876927421518, 0.3959401073653889, 0.3906875039450701, 0.377435172699257, 0.37445804517282677, 0.3621862482251492, 0.34880250026332293, 0.3573040745009867, 0.34076005036977963, 0.3287685524124621, 0.323000757240931, 0.3173660360283588, 0.3049223003937285], "accuracy": [0.22322018444538116, 0.46968695521354675, 0.6089023947715759, 0.6740192770957947, 0.6973979473114014, 0.7128516435623169, 0.7300224304199219, 0.7500990629196167, 0.7605336308479309, 0.7734777331352234, 0.7837802171707153, 0.7948752045631409, 0.8039889335632324, 0.8078193068504333, 0.8136309385299683, 0.8244617581367493, 0.8281601071357727, 0.83119797706604, 0.8401796221733093, 0.8475762605667114, 0.8473120927810669, 0.8481045961380005, 0.8541803956031799, 0.8590674996376038, 0.8574824929237366, 0.8628978729248047, 0.8689737319946289, 0.8627657890319824, 0.8692378997802734, 0.8732003569602966, 0.8771628737449646, 0.8765024542808533, 0.8853520154953003], "val_loss": [1.6990834644862585, 0.8045028618403843, 0.7145048720496041, 0.6116779361452375, 0.5739235367093768, 0.5640991415296283, 0.5195614780698504, 0.4891033513205392, 0.46930151326315744, 0.44669714995792936, 0.43025108746119906, 0.4155667168753488, 0.4076253431183951, 0.3985783117158072, 0.39155994994299753, 0.379470203604017, 0.370647132396698, 0.3662321312086923, 0.35750978333609446, 0.3524935671261379, 0.3508270042283194, 0.3440242324556623, 0.33656526463372366, 0.3444969058036804, 0.3448185494967869, 0.3352732147489275, 0.3250833409173148, 0.3178378428731646, 0.31904555218560354, 0.3221376708575657, 0.32671345131737844, 0.3193842513220651, 0.3199582185064043], "val_accuracy": [0.4490000009536743, 0.6656666398048401, 0.6956666707992554, 0.7136666774749756, 0.7369999885559082, 0.7256666421890259, 0.7540000081062317, 0.7803333401679993, 0.7900000214576721, 0.8029999732971191, 0.8040000200271606, 0.8186666369438171, 0.8133333325386047, 0.8256666660308838, 0.8330000042915344, 0.8363333344459534, 0.8420000076293945, 0.8476666808128357, 0.8510000109672546, 0.8556666374206543, 0.8550000190734863, 0.8586666584014893, 0.8560000061988831, 0.8500000238418579, 0.8543333411216736, 0.8576666712760925, 0.862333357334137, 0.8663333058357239, 0.8659999966621399, 0.8659999966621399, 0.8650000095367432, 0.8643333315849304, 0.8656666874885559]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 4, 2, 2, 5, 2, 4, 2, 0, 8, 4, 5, 2, 8, 0, 3, 4, 2, 4, 6, 4, 2, 0, 1, 0, 2, 5, 1, 2, 1, 9, 1, 2, 8, 5, 4, 4, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 1, 3, 1, 2, 1, 3, 0, 3, 3, 1, 3, 2, 3, 1, 3, 3, 3, 2, 3, 3, 0, 3, 4, 3, 1, 3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 3, 0, 5], [48, 31, 78, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 1, 2, 3, 0, 0, 0], [28, 18, 10, 42]], "fitness": -0.7857142686843872, "mapping_values": [1, 4, 4, 2, 2, 1, 64, 64, 38, 26, 3, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 61, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, grad), alpha), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, alpha))), grad)))), tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))))), tf.math.sqrt(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.negative(tf.math.multiply(tf.math.pow(tf.math.add(tf.math.pow(alpha, tf.math.divide_no_nan(grad, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.negative(beta), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.subtract(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))))))))))))), grad)), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, grad)), grad))))))), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.square(grad))), grad)))), tf.math.add(beta, tf.math.pow(grad, alpha)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32), alpha)", "other_info": {"loss": [2.2974984635451468, 2.2789043752571785, 2.2538119047041723, 2.2252750232345346, 2.18751676591821, 2.1411180675399772, 2.0784776429962473, 1.9957180697101375, 1.8919864801163246, 1.7841263906814955, 1.6532919653150715, 1.5457325010188834, 1.453748690800156, 1.353866573952098, 1.2960029406522984, 1.2322635218105484, 1.171241212498951, 1.1361660970247747, 1.1064698239674011, 1.0689129022134214, 1.0471321292415412, 1.0164509970419726, 0.9904935023079553, 0.9853131462790474, 0.95497356256584, 0.9447754172837305, 0.929619344871719, 0.9078529046164716, 0.8947032692803683, 0.8794256599981394, 0.876138602281212, 0.860966819073656, 0.8476026678097923, 0.8467843063503382, 0.8376651021782685, 0.8350441667303323, 0.8204821840867453, 0.8220949720602624, 0.8119944707986119, 0.795319901363268, 0.8021321169940504, 0.7889117212532345, 0.78205849612315, 0.7790761239745, 0.7688067495437141, 0.7580460601510499, 0.7756440239402329, 0.762481520842284, 0.7477310193354947, 0.7528161655768522, 0.7489976911591406, 0.7481445340416797, 0.7506460322443804, 0.7368878058517425, 0.7302676481325802, 0.7321725183584434, 0.726018765480952, 0.7214508011450999, 0.7113907881826064, 0.7185831987752324, 0.7177824069873894, 0.7076475406839328, 0.7088170274295008, 0.7023467529703361, 0.6972355930607758, 0.7050990518278465, 0.6971549062822725, 0.6888565432205018, 0.6858987462456043, 0.6787022164768279, 0.6804972951280883, 0.687930926828179, 0.6799510852645937, 0.6727684799548799, 0.684562835167774, 0.6743719078813956, 0.6707593955069076, 0.6739579735415061, 0.6717646316435862, 0.6639339398981919, 0.660338819026947, 0.6563128852620652, 0.656484329240701, 0.6513161679867346, 0.6596310117918314, 0.6601039009197529, 0.6520817966477557, 0.6545024604420101, 0.6458853852826024, 0.6456923177213623], "accuracy": [0.10249637067317963, 0.15638621151447296, 0.22057852149009705, 0.28001585602760315, 0.3241315484046936, 0.3583410382270813, 0.38488972187042236, 0.42306166887283325, 0.43904373049736023, 0.4492141008377075, 0.48249900341033936, 0.49491479992866516, 0.5147272348403931, 0.5400871634483337, 0.5499933958053589, 0.5678246021270752, 0.5892220139503479, 0.6021661758422852, 0.6087703108787537, 0.6210539937019348, 0.6332056522369385, 0.6465460062026978, 0.6468101739883423, 0.6514331102371216, 0.6639809608459473, 0.6650376319885254, 0.6742834448814392, 0.6753401160240173, 0.6737551093101501, 0.6833971738815308, 0.6902654767036438, 0.6936996579170227, 0.6929071545600891, 0.6948884129524231, 0.6947563290596008, 0.6946242451667786, 0.6991150379180908, 0.702681303024292, 0.7030775547027588, 0.7096816897392273, 0.7119271159172058, 0.7147008180618286, 0.7161537408828735, 0.7172104120254517, 0.7248712182044983, 0.7209087014198303, 0.7206445932388306, 0.7197200059890747, 0.7271166443824768, 0.7284374833106995, 0.7305507659912109, 0.7312111854553223, 0.7292299270629883, 0.7285695672035217, 0.7327961921691895, 0.7276449799537659, 0.7360982894897461, 0.7349095344543457, 0.7362303733825684, 0.7383436560630798, 0.7383436560630798, 0.7446836829185486, 0.7466648817062378, 0.7383436560630798, 0.7466648817062378, 0.7428345084190369, 0.7434949278831482, 0.7489103078842163, 0.7464007139205933, 0.750759482383728, 0.7471932172775269, 0.7494386434555054, 0.750759482383728, 0.7515519857406616, 0.7467969655990601, 0.7530049085617065, 0.7512878179550171, 0.7556465268135071, 0.7535332441329956, 0.7589486241340637, 0.7613261342048645, 0.7606657147407532, 0.7585523724555969, 0.7563069462776184, 0.7614582180976868, 0.7553823590278625, 0.7605336308479309, 0.7600052952766418, 0.7606657147407532, 0.7605336308479309], "val_loss": [1.9574713025774275, 1.9355113165719169, 1.910135269165039, 1.879134178161621, 1.839393138885498, 1.7859647614615304, 1.7155676569257463, 1.6246072564806258, 1.513951097215925, 1.3906262261526925, 1.264662742614746, 1.149324655532837, 1.0520359788622176, 0.9728776727403913, 0.9125174454280308, 0.86496559211186, 0.8245672157832554, 0.7917576347078595, 0.7659407343183245, 0.7428534541811261, 0.7232591254370553, 0.7066178832735334, 0.6930720465523856, 0.6795247452599662, 0.6666179554803031, 0.6551610742296491, 0.6463854483195713, 0.6370081560952323, 0.6288840600422451, 0.622768657548087, 0.6156711408070156, 0.6078567675181797, 0.6022847209657941, 0.5970648356846401, 0.5907322679247174, 0.5872503519058228, 0.581931642123631, 0.5773623841149467, 0.5753975255148751, 0.5698602710451398, 0.567574143409729, 0.5643921409334455, 0.5608759096690586, 0.5578919649124146, 0.5545214925493512, 0.5510166542870658, 0.5482440505708966, 0.545757668358939, 0.5428779465811593, 0.5399075746536255, 0.5365236146109444, 0.534534249986921, 0.5317934070314679, 0.5300337757383075, 0.5284502676555088, 0.5245565346309117, 0.5230386938367572, 0.5217745474406651, 0.5184167623519897, 0.5169696467263358, 0.5149975674492973, 0.512188264301845, 0.5102952378136771, 0.508694086756025, 0.5083922488348824, 0.5066748006003243, 0.5048355545316424, 0.5026756525039673, 0.5005753210612706, 0.49885339396340506, 0.49752773557390484, 0.49570337363651823, 0.4953343527657645, 0.49298226833343506, 0.4914191620690482, 0.4887204851422991, 0.48793879577091764, 0.4873577356338501, 0.4848519393375942, 0.4852851458958217, 0.4829995632171631, 0.4806098256792341, 0.4815089702606201, 0.47966248648507254, 0.477860621043614, 0.4773098741258894, 0.4764077493122646, 0.4751746484211513, 0.4738943236214774, 0.47185020787375315], "val_accuracy": [0.14133332669734955, 0.33399999141693115, 0.3889999985694885, 0.43066665530204773, 0.4620000123977661, 0.49033331871032715, 0.5286666750907898, 0.5503333210945129, 0.5683333277702332, 0.5903333425521851, 0.612666666507721, 0.6333333253860474, 0.6620000004768372, 0.6706666946411133, 0.6803333163261414, 0.690666675567627, 0.6963333487510681, 0.6990000009536743, 0.7059999704360962, 0.7093333601951599, 0.7133333086967468, 0.7173333168029785, 0.7223333120346069, 0.7273333072662354, 0.7256666421890259, 0.7273333072662354, 0.7276666760444641, 0.7360000014305115, 0.737333357334137, 0.737333357334137, 0.7450000047683716, 0.7450000047683716, 0.7453333139419556, 0.7463333606719971, 0.746999979019165, 0.7516666650772095, 0.7506666779518127, 0.753000020980835, 0.7513333559036255, 0.7546666860580444, 0.7549999952316284, 0.7576666474342346, 0.7596666812896729, 0.7580000162124634, 0.7646666765213013, 0.7646666765213013, 0.7649999856948853, 0.7676666378974915, 0.7689999938011169, 0.7693333625793457, 0.7683333158493042, 0.7713333368301392, 0.7726666927337646, 0.7730000019073486, 0.7703333497047424, 0.7743333578109741, 0.7739999890327454, 0.7749999761581421, 0.7723333239555359, 0.7739999890327454, 0.7749999761581421, 0.7760000228881836, 0.7770000100135803, 0.7770000100135803, 0.7776666879653931, 0.777999997138977, 0.778333306312561, 0.7806666493415833, 0.781000018119812, 0.7786666750907898, 0.7806666493415833, 0.7846666574478149, 0.781000018119812, 0.781333327293396, 0.7826666831970215, 0.7823333144187927, 0.7853333353996277, 0.7879999876022339, 0.7870000004768372, 0.7839999794960022, 0.7900000214576721, 0.7876666784286499, 0.7863333225250244, 0.784333348274231, 0.79666668176651, 0.7873333096504211, 0.7886666655540466, 0.7913333177566528, 0.7900000214576721, 0.7950000166893005]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 4, 2, 2, 5, 6, 4, 2, 0, 8, 6, 5, 2, 6, 4, 3, 4, 2, 4, 6, 4, 2, 0, 1, 0, 2, 1, 1, 2, 1, 9, 5, 2, 8, 5, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 1, 0, 1, 2, 1, 3, 3, 0, 3, 3, 3, 2, 0, 3, 1, 1, 3, 2, 3, 3, 2, 2, 1, 3, 1, 3, 2, 2, 0, 2, 2, 3, 2, 4, 0, 3, 0, 5], [71, 31, 55, 62, 37, 47, 1, 35, 47, 32, 7], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 3, 2, 3, 0, 0, 0], [91, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 16, 16, 8, 8, 1, 5, 5, 2, 3, 0, 3, 1, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), alpha)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.square(tf.math.add(beta, beta)))))))), tf.math.divide_no_nan(tf.math.add(beta, alpha), grad))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, alpha), tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, alpha), tf.math.add(sigma, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1018359512090683, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [9, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 2, 5, 0, 2, 2, 5, 6, 4, 2, 0, 2, 6, 5, 2, 6, 0, 2, 4, 8, 4, 6, 4, 2, 0, 8, 6, 3, 2, 2, 2, 1, 9, 1, 2, 8, 2, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 1, 0, 1, 3, 2, 3, 0, 3, 3, 1, 3, 2, 0, 2, 3, 1, 3, 2, 3, 3, 2, 2, 4, 3, 1, 3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 3, 0, 5], [65, 31, 78, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 1, 2, 3, 0, 0, 0], [91, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 24, 24, 14, 10, 2, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.add(beta, alpha), tf.math.negative(tf.math.add(beta, tf.math.add(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32), alpha)))), tf.math.add(beta, grad))), beta)))), grad)))))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), alpha)", "other_info": {"loss": [304563511.1297963, 46047354448.81363, 782320929611.1669, 5452038789093.761, 24162388072465.043, 80131059754341.75], "accuracy": [0.10077928751707077, 0.10091137140989304, 0.09787346422672272, 0.09998679161071777, 0.09430722147226334, 0.09813763201236725], "val_loss": [2538824484.571429, 136806545115.42857, 1468267720118.8572, 8004299802916.571, 29982218181485.715, 88438419376420.58], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 2, 5, 4, 2, 2, 5, 6, 4, 2, 1, 5, 2, 6, 2, 2, 0, 2, 4, 3, 4, 6, 4, 2, 5, 1, 0, 2, 2, 2, 2, 6, 0, 1, 2, 8, 5, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 2, 1, 1, 0, 2, 3, 0, 3, 3, 1, 3, 2, 0, 2, 3, 1, 3, 1, 3, 3, 2, 3, 1, 3, 1, 3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 3, 0, 5], [4, 31, 10, 62, 37, 47, 1, 35, 47, 32, 7], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 1, 2, 3, 0, 0, 0], [91, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 76, 76, 43, 33, 4, 3, 2, 1, 1, 0, 3, 1, 2, 1], "tree_depth": 76, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), beta)), tf.math.add(beta, alpha))))), tf.math.add(tf.math.subtract(alpha, tf.math.square(tf.math.add(beta, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.multiply(tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(grad, tf.math.add(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.add(beta, grad)), tf.math.add(beta, beta)))), tf.math.add(beta, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))))))))), tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.sqrt(tf.math.square(tf.math.add(beta, alpha)))))))))), tf.math.add(beta, grad))))), grad), tf.math.pow(beta, grad)), tf.math.add(beta, tf.math.divide_no_nan(alpha, grad))), tf.math.add(beta, alpha))))), tf.math.pow(tf.math.add(beta, grad), tf.math.add(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), beta))))))))), grad)), tf.math.subtract(grad, tf.math.add(beta, grad)))))), tf.math.add(beta, beta))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1018359512090683, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 2, 5, 4, 2, 2, 5, 6, 4, 2, 0, 4, 2, 5, 2, 6, 0, 3, 4, 2, 2, 9, 3, 2, 0, 1, 0, 1, 2, 4, 2, 0, 9, 1, 2, 8, 5, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 1, 0, 3, 2, 1, 1, 3, 3, 3, 1, 3, 2, 0, 2, 3, 1, 3, 0, 3, 3, 2, 3, 4, 3, 3, 3, 2, 3, 3, 2, 2, 3, 2, 4, 0, 3, 0, 5], [4, 50, 78, 62, 37, 47, 1, 35, 47, 32, 7], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 1, 2, 3, 0, 0, 0], [91, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 57, 57, 34, 23, 5, 7, 4, 3, 1, 0, 3, 1, 2, 0], "tree_depth": 50, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad)), tf.math.pow(tf.math.add(beta, tf.math.add(beta, alpha)), tf.math.add(beta, alpha)))), tf.math.negative(grad))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.negative(tf.math.multiply(tf.math.pow(tf.math.add(grad, tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.subtract(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.pow(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad)))))))))), grad)))), tf.math.subtract(beta, grad)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, alpha), sigma)), sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1018359512090683, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [0, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 5, 4, 2, 2, 5, 0, 2, 2, 0, 8, 6, 5, 2, 6, 0, 3, 4, 2, 4, 6, 4, 6, 0, 1, 0, 2, 2, 1, 2, 1, 9, 1, 2, 8, 5, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 1, 0, 2, 2, 1, 1, 3, 3, 3, 1, 3, 2, 0, 2, 2, 1, 3, 2, 3, 3, 2, 2, 4, 3, 1, 3, 2, 3, 3, 2, 2, 3, 2, 4, 0, 3, 0, 5], [11, 31, 55, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 1, 2, 3, 0, 0, 0], [91, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 0, 68, 68, 40, 28, 3, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 79, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.add(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.sqrt(tf.math.add(beta, beta)))), tf.math.divide_no_nan(alpha, tf.math.square(tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.multiply(tf.math.pow(tf.math.add(tf.math.pow(tf.math.divide_no_nan(grad, tf.math.pow(alpha, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.subtract(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), beta))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha)))), tf.math.square(tf.math.pow(tf.math.add(beta, grad), beta))))))))))), grad))), grad))), beta), beta), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), grad))), tf.math.add(beta, alpha))))))))))))))))), tf.math.pow(grad, beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07515519857406616, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [2, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 2, 5, 4, 2, 2, 5, 6, 2, 2, 0, 4, 2, 5, 2, 6, 0, 5, 4, 2, 2, 6, 4, 1, 0, 1, 0, 4, 2, 4, 2, 6, 2, 1, 2, 8, 5, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 1, 0, 1, 2, 2, 3, 0, 3, 3, 1, 3, 2, 0, 2, 3, 1, 3, 2, 1, 3, 2, 2, 3, 3, 1, 3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 3, 0, 5], [71, 24, 55, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 0, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 1, 2, 3, 0, 0, 0], [91, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 17, 17, 9, 8, 2, 1, 0, 0, 0, 0, 5, 3, 2, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.square(tf.math.add(beta, beta)))))))))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.sqrt(tf.math.sqrt(alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1018359512090683, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [2, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [56, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 2, 5, 0, 2, 8, 5, 6, 4, 2, 0, 8, 6, 5, 2, 6, 0, 2, 4, 8, 4, 6, 4, 2, 0, 8, 6, 3, 2, 2, 2, 1, 9, 1, 2, 8, 2, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 1, 0, 1, 2, 2, 3, 3, 3, 3, 1, 3, 2, 0, 2, 3, 1, 3, 2, 3, 3, 2, 2, 4, 3, 1, 3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 3, 0, 5], [4, 31, 78, 62, 37, 47, 1, 35, 47, 32, 7], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [4, 1, 1, 4, 3, 4], [44], [0, 1, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 1, 2, 3, 0, 0, 0], [91, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 10, 10, 6, 4, 1, 3, 1, 1, 0, 0, 3, 1, 2, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha)))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, alpha)", "other_info": {"loss": [2.303979070321082, 2.332532410734381, 2.42373731010043, 2.593318868826535, 2.8049360376543704, 3.014587712750821, 3.1451713303533353, 3.2060132026357455, 3.392009871809978], "accuracy": [0.1018359512090683, 0.09998679161071777, 0.09998679161071777, 0.09800554811954498, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10513802617788315, 0.09998679161071777], "val_loss": [1.9804208619253976, 2.025590147290911, 2.1394524574279785, 2.3008956909179688, 2.4932187625340054, 2.6470116887773787, 2.700703893389021, 2.795091152191162, 3.059273992265974], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10433333367109299, 0.10433333367109299, 0.10433333367109299, 0.10433333367109299, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 2, 3, 0, 1, 2, 9, 6, 4, 2, 0, 2, 6, 5, 2, 6, 0, 2, 4, 8, 4, 6, 4, 2, 0, 8, 6, 3, 2, 2, 2, 1, 9, 1, 2, 8, 2, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 1, 3, 1, 2, 1, 3, 0, 3, 3, 1, 3, 2, 3, 1, 3, 3, 3, 2, 3, 3, 0, 3, 4, 3, 1, 3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 3, 0, 5], [48, 31, 78, 62, 37, 47, 1, 35, 47, 32, 7], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 1, 0, 1, 0, 1, 0, 1], [8, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 1, 2, 3, 0, 0, 0], [91, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 19, 19, 11, 8, 2, 3, 2, 1, 1, 0, 1, 0, 1, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), grad))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, grad), alpha), tf.math.add(beta, grad)))), alpha)))), tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, alpha))))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3024253574706908, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.1018359512090683, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 4, 6, 2, 5, 6, 4, 2, 0, 0, 6, 5, 2, 6, 0, 3, 5, 2, 5, 6, 4, 2, 0, 1, 0, 2, 2, 1, 2, 1, 9, 1, 6, 8, 5, 4, 2, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 1, 0, 1, 2, 1, 3, 0, 3, 3, 1, 3, 2, 0, 3, 3, 1, 3, 2, 3, 2, 2, 2, 1, 3, 1, 3, 2, 2, 0, 2, 2, 3, 2, 4, 0, 3, 0, 5], [4, 31, 93, 62, 37, 47, 1, 35, 47, 32, 7], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 1, 2, 3, 0, 0, 0], [91, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 76, 76, 45, 31, 6, 3, 2, 1, 1, 0, 3, 1, 2, 1], "tree_depth": 71, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.square(grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.pow(tf.math.add(beta, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(alpha)), tf.math.add(beta, beta))))))), alpha)), tf.math.negative(grad))), tf.math.divide_no_nan(tf.math.square(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.square(tf.math.add(tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.pow(tf.math.add(tf.math.negative(grad), tf.math.subtract(tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))), alpha), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), grad)))))), alpha))), tf.math.add(beta, grad))), tf.math.add(beta, grad)), tf.math.pow(beta, tf.math.add(beta, tf.math.add(beta, beta)))))), tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))), tf.math.subtract(alpha, grad))))), tf.math.add(beta, tf.math.pow(alpha, grad)))), tf.math.divide_no_nan(beta, tf.math.add(beta, beta))))))), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1018359512090683, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 2, 5, 4, 2, 2, 5, 6, 4, 2, 8, 2, 2, 5, 2, 6, 0, 3, 4, 5, 4, 6, 4, 2, 0, 1, 9, 2, 2, 5, 2, 6, 9, 1, 2, 8, 5, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 1, 0, 1, 2, 2, 3, 0, 3, 3, 1, 3, 2, 0, 1, 3, 1, 2, 2, 3, 1, 2, 2, 4, 3, 1, 0, 2, 3, 3, 3, 2, 3, 2, 4, 0, 3, 0, 5], [4, 31, 57, 62, 37, 47, 1, 35, 47, 32, 7], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 0, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 3, 2, 3, 0, 0, 0], [91, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 60, 60, 36, 24, 5, 3, 2, 1, 1, 0, 5, 3, 2, 1], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.sqrt(alpha), beta), tf.math.add(beta, beta))))), tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)))))), tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(grad)), tf.math.multiply(tf.math.pow(tf.math.square(tf.math.pow(alpha, tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.subtract(tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta)))), tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha))))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), beta)))))))), tf.math.sqrt(tf.math.add(beta, grad)))), alpha))), beta)), beta)))))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.sqrt(sigma)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1018359512090683, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [8, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 2, 5, 0, 2, 2, 5, 6, 4, 2, 0, 8, 6, 5, 2, 6, 0, 2, 4, 8, 4, 6, 4, 2, 0, 8, 6, 3, 2, 2, 2, 1, 9, 1, 2, 8, 2, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 1, 3, 1, 2, 0, 3, 0, 3, 3, 1, 3, 2, 3, 1, 3, 3, 3, 2, 3, 3, 0, 3, 4, 3, 1, 3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 3, 0, 5], [48, 31, 78, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 1, 2, 3, 0, 0, 0], [91, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 0, 18, 18, 10, 8, 2, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.pow(tf.math.add(beta, tf.math.add(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), grad)))))))), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1018359512090683, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 2, 5, 0, 2, 2, 5, 6, 4, 2, 0, 8, 6, 5, 2, 6, 0, 2, 4, 8, 4, 6, 4, 2, 0, 8, 6, 3, 2, 2, 2, 1, 9, 1, 2, 8, 2, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 1, 3, 1, 2, 1, 3, 0, 0, 3, 1, 3, 2, 3, 1, 3, 3, 3, 2, 3, 3, 0, 3, 4, 3, 1, 3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 3, 0, 5], [48, 31, 78, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 1, 0, 1, 0, 1, 0, 1], [9, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 1, 2, 3, 0, 0, 0], [91, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), grad)))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3024253574706908, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.1018359512090683, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 2, 5, 0, 4, 5, 5, 2, 4, 2, 0, 8, 6, 5, 2, 6, 0, 2, 4, 8, 4, 6, 4, 2, 0, 8, 6, 3, 2, 2, 2, 1, 9, 1, 2, 8, 2, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 1, 0, 1, 2, 1, 3, 2, 3, 3, 1, 3, 2, 0, 3, 3, 1, 3, 2, 3, 2, 2, 2, 1, 3, 1, 3, 2, 2, 0, 2, 2, 3, 2, 4, 0, 3, 0, 5], [71, 31, 55, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 2, 2, 3, 0, 0, 0], [91, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 5, 2, 2, 19, 19, 12, 7, 1, 1, 0, 0, 0, 0, 3, 1, 2, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.square(grad)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))))))), alpha)), tf.math.add(beta, beta)))))))), alpha)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1018359512090683, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [8, 0, 1, 6, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [0, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 2, 5, 6, 2, 2, 5, 6, 4, 2, 0, 8, 6, 5, 6, 6, 0, 5, 4, 2, 8, 6, 4, 2, 1, 8, 0, 2, 9, 1, 2, 1, 3, 1, 2, 3, 5, 4, 9, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 1, 2, 0, 2, 3, 2, 3, 3, 3, 1, 3, 2, 3, 1, 3, 1, 3, 2, 3, 3, 2, 3, 4, 3, 1, 0, 2, 3, 3, 2, 2, 3, 2, 4, 0, 3, 0, 5], [63, 31, 55, 62, 37, 47, 1, 35, 47, 32, 7], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 0, 0, 0, 0, 1, 0, 1, 0], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 1, 3, 3, 0, 0, 0], [91, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 1, 67, 67, 42, 25, 4, 3, 2, 1, 1, 0, 10, 7, 3, 2], "tree_depth": 73, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.negative(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(grad)), tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.pow(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)))), beta))))), tf.math.add(beta, grad))), tf.math.sqrt(beta))))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.pow(tf.math.add(tf.math.sqrt(tf.math.divide_no_nan(tf.math.pow(grad, tf.math.add(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha)))), tf.math.negative(tf.math.add(tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.subtract(beta, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), alpha)))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, beta)))))), grad)))))))), tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))), tf.math.pow(grad, tf.math.add(beta, tf.math.add(beta, grad)))), tf.math.add(beta, grad)))))), tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, alpha), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.sqrt(tf.math.subtract(tf.math.subtract(alpha, tf.math.square(sigma)), tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1018359512090683, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 2, 5, 4, 2, 2, 5, 6, 4, 2, 0, 4, 2, 6, 2, 6, 0, 3, 4, 2, 4, 2, 3, 2, 0, 1, 0, 1, 2, 2, 4, 6, 9, 1, 2, 4, 5, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 0, 0, 3, 2, 2, 3, 0, 3, 3, 1, 3, 2, 0, 2, 3, 1, 3, 2, 3, 3, 2, 2, 4, 3, 1, 3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 3, 0, 5], [71, 31, 55, 62, 37, 47, 1, 35, 47, 32, 7], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 2, 2, 3, 0, 0, 0], [91, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 59, 59, 33, 26, 5, 3, 2, 1, 1, 0, 3, 1, 2, 1], "tree_depth": 53, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(grad)), tf.math.add(beta, beta))))), tf.math.add(beta, beta))), tf.math.pow(grad, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(grad)), alpha)), tf.math.multiply(tf.math.pow(tf.math.add(grad, tf.math.pow(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.subtract(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, beta)))), tf.math.add(beta, grad))), tf.math.add(beta, alpha))), tf.math.negative(tf.math.add(beta, grad))))), tf.math.add(beta, beta)), tf.math.subtract(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), beta)))), tf.math.divide_no_nan(tf.math.add(beta, grad), grad)))))))))))), alpha), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1018359512090683, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 2, 5, 0, 2, 2, 5, 6, 4, 1, 2, 8, 6, 2, 8, 4, 0, 8, 4, 2, 4, 6, 4, 2, 0, 1, 0, 2, 2, 1, 3, 1, 9, 1, 2, 1, 5, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 1, 0, 1, 2, 1, 3, 3, 3, 3, 1, 3, 2, 0, 3, 3, 1, 3, 2, 3, 2, 2, 2, 1, 3, 1, 3, 2, 2, 0, 2, 2, 3, 2, 4, 0, 3, 0, 5], [3, 10, 78, 62, 12, 47, 1, 35, 47, 32, 7], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 1, 2, 3, 0, 0, 0], [91, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 1, 1, 0, 1, 0, 12, 12, 7, 5, 1, 1, 0, 0, 0, 0, 3, 1, 2, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.negative(tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)))), tf.math.add(beta, alpha))))), tf.math.square(tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, alpha)", "other_info": {"loss": [2.3019121250597996, 2.3027642965159316, 2.3026735536678355, 2.3032157494801067, 2.3016875942448394, 2.3021583011074465], "accuracy": [0.09206181764602661, 0.09338264167308807, 0.09074098616838455, 0.08770307898521423, 0.0886276587843895, 0.09179764986038208], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}]