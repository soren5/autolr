[{"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 1, 2, 1, 8, 6, 2, 3, 0, 2, 5, 2, 8, 2, 3, 5, 3, 1, 8, 9, 6, 2, 2, 6, 8, 4, 5, 4, 1, 4], [1, 1, 2, 2, 2, 2, 0, 2, 1, 2, 0, 0, 1, 2, 2, 1, 2, 1, 2, 1], [82, 94, 73, 46, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.8288571238517761, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.0535058606144867, 1.5843605967781027, 1.2498530017669884, 0.9804288879393146, 0.9438284634599092, 0.831198436528023, 0.8150615817158057, 0.7428306008783455, 0.7627966186121989, 0.7178742101462983, 0.6837558773498903, 0.6734536521312914, 0.6582070381460944, 0.6536709523282865, 0.6381274836332004, 0.6169824660052682, 0.635170914879281, 0.599662807017364, 0.5727772351426692, 0.5701190518696767, 0.5727283960367474, 0.5667674429758964, 0.5380855665120624, 0.5360238826419731, 0.5236078244410706, 0.5310462710407384, 0.5176799868580026, 0.5202910242858831, 0.5188824778117398, 0.4841760445611037, 0.49718499305682523, 0.47090925184365007, 0.4818609085703066, 0.4942226010330318, 0.4816389397473588, 0.4588884844984345, 0.4449020747172598, 0.4586244773918281, 0.457802656721587, 0.4508386840712928, 0.433080557004068, 0.42360855403782244, 0.42760783543739145, 0.4182243944355966, 0.4353538939406796, 0.42007769385049876], "accuracy": [0.31224408745765686, 0.471800297498703, 0.5462950468063354, 0.6188086271286011, 0.6458855867385864, 0.6796988248825073, 0.6863030195236206, 0.7234182953834534, 0.7043983340263367, 0.719852089881897, 0.735569953918457, 0.7382115721702576, 0.7446836829185486, 0.7479857206344604, 0.7498348951339722, 0.7588165402412415, 0.7560427784919739, 0.7753269076347351, 0.776251494884491, 0.778232753276825, 0.7775723338127136, 0.7763835787773132, 0.7943468689918518, 0.7915731072425842, 0.802800178527832, 0.7959318161010742, 0.8055738806724548, 0.7998943328857422, 0.8053097128868103, 0.8220842480659485, 0.8123101592063904, 0.8201030492782593, 0.822348415851593, 0.8045172095298767, 0.8178576231002808, 0.8245938420295715, 0.8356888294219971, 0.8269713521003723, 0.8253863453865051, 0.8342359066009521, 0.837537944316864, 0.8381983637809753, 0.835160493850708, 0.8422929644584656, 0.8343679904937744, 0.8399154543876648], "val_loss": [1.659740924835205, 1.1288048199244909, 0.7208806446620396, 0.7306176424026489, 0.6819694723401751, 0.6416430303028652, 0.6550323452268328, 0.6327981097357613, 0.6058417899268014, 0.5405396052769252, 0.5688123873301915, 0.5582451139177594, 0.5496911661965507, 0.5348816599164691, 0.479568498475211, 0.520786029951913, 0.5129417351314, 0.4724975313459124, 0.4550789083753313, 0.485846791948591, 0.4898317200796945, 0.4387239898954119, 0.4349104506628854, 0.4420443943568638, 0.4222800816808428, 0.4410771131515503, 0.43078059809548513, 0.421928950718471, 0.4184748019490923, 0.41673964262008667, 0.41135128906794954, 0.3870862637247358, 0.4067098242895944, 0.4090619257518223, 0.39141474451337543, 0.3917921185493469, 0.3847992335047041, 0.38224349703107563, 0.3759024568966457, 0.3734737719808306, 0.36326359851019724, 0.3862587639263698, 0.3998059800692967, 0.36992176089968, 0.3776519809450422, 0.40539698941367014], "val_accuracy": [0.36666667461395264, 0.5149999856948853, 0.6940000057220459, 0.6656666398048401, 0.6746666431427002, 0.6940000057220459, 0.7006666660308838, 0.6936666369438171, 0.7026666402816772, 0.7283333539962769, 0.734000027179718, 0.737333357334137, 0.7423333525657654, 0.734000027179718, 0.7726666927337646, 0.7403333187103271, 0.7630000114440918, 0.7699999809265137, 0.800000011920929, 0.7523333430290222, 0.7683333158493042, 0.79666668176651, 0.8069999814033508, 0.7923333048820496, 0.8090000152587891, 0.7870000004768372, 0.7979999780654907, 0.8106666803359985, 0.8196666836738586, 0.812666654586792, 0.8169999718666077, 0.8306666612625122, 0.8180000185966492, 0.8246666789054871, 0.8336666822433472, 0.8216666579246521, 0.8259999752044678, 0.8389999866485596, 0.8383333086967468, 0.8383333086967468, 0.8486666679382324, 0.8349999785423279, 0.8233333230018616, 0.8396666646003723, 0.8316666483879089, 0.8213333487510681]}}, {"genotype": [[0], [1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 1, 3, 0, 2, 6, 1, 4, 0, 5, 5, 2, 2, 2, 3, 5, 3, 1, 8, 9, 6, 2, 2, 6, 8, 4, 5, 4, 1, 4], [0, 0, 2, 2, 2, 0, 1, 2, 2, 2, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1], [30, 94, 73, 43, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.819428563117981, "mapping_values": [1, 44, 44, 26, 18, 6, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.subtract(grad, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.square(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha))), tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))), grad), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.add(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))))))), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))))))))), grad)))), alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.0537187472751444, 1.5794957164665648, 1.2362254715677519, 0.9656853604751288, 0.943556937401746, 0.848886563084806, 0.8181718044576392, 0.7367149529172413, 0.7817526087233766, 0.7131325010185181, 0.6889028254674489, 0.6715246764754795, 0.6558234414105182, 0.6585872861703216, 0.6288926445922958, 0.615641521771413, 0.6460264078882062, 0.6062558334280927, 0.5687214844671805, 0.5710036930013185, 0.5678109706526718, 0.5629755508126584, 0.5433955287275187, 0.5442157567114232, 0.5260825404999924, 0.5407024313981239, 0.5187960522931565, 0.5197358414867315, 0.5152395009569378, 0.49011881807146135, 0.4960892607334063, 0.4678219304919605, 0.4912772502968135, 0.48440390663486443, 0.48142575309922464, 0.45568170403098984, 0.4422443617509734, 0.4635619859827067, 0.45206133189722214, 0.45265744495243837, 0.431461527307886, 0.4270940217729636, 0.42837817689620145, 0.4225854929986804, 0.42279753066513753, 0.4164122250637185, 0.41836408730495434, 0.41972951831724414], "accuracy": [0.3125082552433014, 0.4733852744102478, 0.5429930090904236, 0.6244881749153137, 0.6556597352027893, 0.6715096831321716, 0.6872276067733765, 0.7244749665260315, 0.6988508701324463, 0.717870831489563, 0.7351737022399902, 0.7454761862754822, 0.7441553473472595, 0.7442874312400818, 0.7515519857406616, 0.759609043598175, 0.7541936039924622, 0.7716285586357117, 0.7799497842788696, 0.7816668748855591, 0.7821952104568481, 0.778761088848114, 0.7928939461708069, 0.7917051911354065, 0.8026680946350098, 0.7952714562416077, 0.8038568496704102, 0.8009510040283203, 0.8062343001365662, 0.81548011302948, 0.8105930685997009, 0.8226125836372375, 0.813498854637146, 0.8131026029586792, 0.8161405324935913, 0.8238013386726379, 0.8358209133148193, 0.8203672170639038, 0.8277638554573059, 0.8334434032440186, 0.8413683772087097, 0.8348963260650635, 0.8329150676727295, 0.8426892161369324, 0.8379341959953308, 0.8372738361358643, 0.8442742228507996, 0.842028796672821], "val_loss": [1.6595776081085205, 0.9911255836486816, 0.7284052201679775, 0.6834014654159546, 0.6683166708265033, 0.6316803353173392, 0.6857749904905047, 0.5915439469473702, 0.5960423946380615, 0.5489074672971453, 0.5643793855394635, 0.5188618387494769, 0.5367050170898438, 0.5366476093019757, 0.4817478827067784, 0.5261406557900565, 0.512516941343035, 0.47144021306719097, 0.45383150236947195, 0.4806185449872698, 0.49132871627807617, 0.45630291530064176, 0.4469658817563738, 0.4382753201893398, 0.42973233120782034, 0.4481752259390695, 0.43476684604372295, 0.42205279214041574, 0.4224660226276943, 0.4108113561357771, 0.4035440683364868, 0.40038810457502094, 0.39131246294294086, 0.3968046307563782, 0.39215179852076937, 0.3830143894468035, 0.38638912779944284, 0.37564300639288767, 0.3750769666263035, 0.3761506846972874, 0.39819627148764475, 0.36848621709006174, 0.36189346654074533, 0.37232827288763864, 0.41441426958356586, 0.3744721497808184, 0.3851099099431719, 0.40533946241651264], "val_accuracy": [0.36399999260902405, 0.5856666564941406, 0.6826666593551636, 0.6869999766349792, 0.6743333339691162, 0.7143333554267883, 0.6933333277702332, 0.7066666483879089, 0.706333339214325, 0.721666693687439, 0.7326666712760925, 0.7570000290870667, 0.7563333511352539, 0.7326666712760925, 0.7680000066757202, 0.734000027179718, 0.7663333415985107, 0.7749999761581421, 0.7950000166893005, 0.7590000033378601, 0.7676666378974915, 0.7906666398048401, 0.7986666560173035, 0.7933333516120911, 0.8063333630561829, 0.7846666574478149, 0.7960000038146973, 0.8076666593551636, 0.8166666626930237, 0.8163333535194397, 0.8206666707992554, 0.8220000267028809, 0.8236666917800903, 0.8273333311080933, 0.8326666951179504, 0.8316666483879089, 0.8309999704360962, 0.8410000205039978, 0.8396666646003723, 0.8323333263397217, 0.8226666450500488, 0.8386666774749756, 0.8479999899864197, 0.8336666822433472, 0.8080000281333923, 0.8346666693687439, 0.8309999704360962, 0.8203333616256714]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 0, 1, 0, 0, 6, 1, 3, 0, 2, 5, 2, 8, 2, 3, 6, 3, 1, 8, 9, 6, 2, 2, 6, 8, 4, 5, 4, 1, 4], [0, 2, 2, 1, 0, 0, 1, 1, 1, 2, 0, 0, 1, 0, 2, 1, 2, 1, 2, 1], [30, 94, 30, 70, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.805142879486084, "mapping_values": [1, 12, 12, 7, 5, 2, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.0536188708320346, 1.5852111618611098, 1.2444305846940225, 0.9906927533137753, 0.9328466660200786, 0.8299227297550116, 0.8100608561206188, 0.7508214050910067, 0.7667372686011743, 0.7118096095365288, 0.6868854797731978, 0.6789876229144862, 0.6552945261996074, 0.652673711866168, 0.6397707436566875, 0.6163819791098879, 0.6368961702201187, 0.6034141715963866, 0.5722214716725644, 0.5728866130589904, 0.5697999950397473, 0.5663015860308903, 0.5391691587407749, 0.5458466973539042, 0.5224934229682607, 0.5336013522524136, 0.5205125134571621, 0.5177797490201684, 0.5165366033175051, 0.4869158676137951, 0.4977467208805495, 0.4712055657108651, 0.47140832132179, 0.4891828694922687, 0.4818299640250039, 0.4543837876352006, 0.4500417715570064, 0.4660006840750841, 0.4551626282628847, 0.4504630609730751, 0.4277825519834228, 0.4290084232664883, 0.42947107927044387, 0.42253780558266424, 0.4212048423446133, 0.41585582787208647, 0.420558856596737, 0.4202956081168873], "accuracy": [0.31224408745765686, 0.47206446528434753, 0.5419363379478455, 0.6082419753074646, 0.6468101739883423, 0.6799629926681519, 0.6910579800605774, 0.715889573097229, 0.7022850513458252, 0.7213049530982971, 0.7376832365989685, 0.7327961921691895, 0.7466648817062378, 0.7499669790267944, 0.7479857206344604, 0.7592127919197083, 0.754589855670929, 0.7720248103141785, 0.776251494884491, 0.7777044177055359, 0.7790252566337585, 0.77677983045578, 0.7950072884559631, 0.7897239327430725, 0.8072909712791443, 0.7984414100646973, 0.8021397590637207, 0.7988376617431641, 0.8064984679222107, 0.8202351331710815, 0.8105930685997009, 0.8208954930305481, 0.8228767514228821, 0.8064984679222107, 0.8156121969223022, 0.8267071843147278, 0.8322546482086182, 0.8190463781356812, 0.828820526599884, 0.8330471515655518, 0.8408400416374207, 0.8338396549224854, 0.8329150676727295, 0.8436138033866882, 0.8392550349235535, 0.8396512866020203, 0.844010055065155, 0.8413683772087097], "val_loss": [1.6589329923902238, 1.1023991107940674, 0.729964120047433, 0.7145587376185826, 0.678696734564645, 0.6291408368519374, 0.6356235912867955, 0.6062998431069511, 0.5941129922866821, 0.5459151097706386, 0.573450003351484, 0.5605486971991402, 0.543534653527396, 0.5347180366516113, 0.4811705010277884, 0.5192782538277763, 0.5098368610654559, 0.4751429387501308, 0.4558356659752982, 0.4806375503540039, 0.4896913596561977, 0.4378816144806998, 0.43515929153987337, 0.4441002437046596, 0.42173746653965544, 0.44379012073789326, 0.4381754313196455, 0.41759370054517475, 0.42148747614451815, 0.41255814688546316, 0.40718970128468107, 0.392640267099653, 0.4142401729311262, 0.3955452953066145, 0.39334449597767424, 0.38745265347617014, 0.3949424113546099, 0.3813762239047459, 0.37651402609688894, 0.37426123448780607, 0.3867301174572536, 0.37916654348373413, 0.3612875086920602, 0.3728813869612558, 0.40771542276654926, 0.3754146524838039, 0.38439981426511494, 0.40622815064021517], "val_accuracy": [0.36633333563804626, 0.5149999856948853, 0.6796666383743286, 0.6806666851043701, 0.6803333163261414, 0.699999988079071, 0.706333339214325, 0.7003333568572998, 0.7056666612625122, 0.7243333458900452, 0.734333336353302, 0.7316666841506958, 0.749666690826416, 0.7319999933242798, 0.7693333625793457, 0.7403333187103271, 0.7666666507720947, 0.765999972820282, 0.8009999990463257, 0.7613333463668823, 0.7716666460037231, 0.7986666560173035, 0.8050000071525574, 0.7900000214576721, 0.8090000152587891, 0.7850000262260437, 0.793666660785675, 0.8113333582878113, 0.8183333277702332, 0.815666675567627, 0.8216666579246521, 0.8236666917800903, 0.8166666626930237, 0.8286666870117188, 0.8320000171661377, 0.8289999961853027, 0.8309999704360962, 0.8423333168029785, 0.8370000123977661, 0.8360000252723694, 0.8333333134651184, 0.8320000171661377, 0.8483333587646484, 0.831333339214325, 0.8119999766349792, 0.8343333601951599, 0.8323333263397217, 0.8159999847412109]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 6, 4, 5, 5, 6, 1, 3, 0, 2, 5, 2, 8, 2, 3, 5, 3, 1, 8, 9, 6, 2, 2, 6, 8, 4, 5, 4, 1, 4], [1, 1, 2, 1, 2, 2, 0, 2, 1, 2, 0, 0, 1, 2, 2, 1, 2, 1, 2, 1], [61, 94, 73, 70, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.8037142753601074, "mapping_values": [1, 11, 11, 6, 5, 0, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, alpha))))))), grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.0534679190893024, 1.5857222256737928, 1.2506251605494525, 0.9866504795940844, 0.9376011680712742, 0.8290660774876272, 0.8170064745672375, 0.7314183068801352, 0.7729700577021307, 0.7189808482066311, 0.6881063653414732, 0.670106738069668, 0.6594490818674412, 0.6588406644445668, 0.6395816866747849, 0.6227579995342265, 0.629509862230407, 0.6041859364654442, 0.5685928342537936, 0.5744543854019756, 0.5690608752591026, 0.5686465770010116, 0.5389527328584991, 0.5361423647328138, 0.5240724847506003, 0.5322319029769751, 0.5189987771924555, 0.5182486565168807, 0.517186014242239, 0.4816753346339634, 0.48599656191736307, 0.47348831900043764, 0.4831720541780336, 0.49779129771114955, 0.479927214243629, 0.4605891081036956, 0.4424272971445496], "accuracy": [0.31224408745765686, 0.4703473746776581, 0.5449742674827576, 0.6141856908798218, 0.6469422578811646, 0.6803592443466187, 0.687491774559021, 0.726192057132721, 0.7061154246330261, 0.7177387475967407, 0.7345132827758789, 0.7403249144554138, 0.7448157668113708, 0.7489103078842163, 0.7504953145980835, 0.7536653280258179, 0.7601373791694641, 0.7703077793121338, 0.7796856164932251, 0.7765156626701355, 0.778761088848114, 0.7732135653495789, 0.7955356240272522, 0.7923656105995178, 0.8068947196006775, 0.798309326171875, 0.8050455451011658, 0.8009510040283203, 0.8050455451011658, 0.8215559124946594, 0.8186501264572144, 0.819442629814148, 0.8208954930305481, 0.8025360107421875, 0.8185180425643921, 0.8230088353157043, 0.8389908671379089], "val_loss": [1.6597605432782854, 1.1323770454951696, 0.7222925083977836, 0.7212143114634922, 0.6812970127378192, 0.6330137763704572, 0.6391991547175816, 0.5915279388427734, 0.6099622419902256, 0.5497867209570748, 0.565848810332162, 0.558425852230617, 0.5529218912124634, 0.5492539576121739, 0.4840158905301775, 0.5248496873038155, 0.5086428437914167, 0.4718961034502302, 0.4532852683748518, 0.47592006410871235, 0.48576807975769043, 0.4388147507395063, 0.43361760888780865, 0.4442930221557617, 0.4224187987191336, 0.440562835761479, 0.42912990706307547, 0.4202298777444022, 0.41786948272160124, 0.40607608216149466, 0.42274911063058035, 0.3890406404222761, 0.4039601343018668, 0.40890127420425415, 0.3906531844820295, 0.3903346487454006, 0.383821896144322], "val_accuracy": [0.36666667461395264, 0.5170000195503235, 0.6919999718666077, 0.6703333258628845, 0.6763333082199097, 0.699999988079071, 0.7070000171661377, 0.7173333168029785, 0.7020000219345093, 0.7223333120346069, 0.737666666507721, 0.737666666507721, 0.7416666746139526, 0.7279999852180481, 0.7639999985694885, 0.7356666922569275, 0.7670000195503235, 0.7723333239555359, 0.8006666898727417, 0.7633333206176758, 0.7696666717529297, 0.7973333597183228, 0.8083333373069763, 0.7893333435058594, 0.8076666593551636, 0.7886666655540466, 0.8033333420753479, 0.8096666932106018, 0.8176666498184204, 0.8216666579246521, 0.8056666851043701, 0.8336666822433472, 0.8203333616256714, 0.8246666789054871, 0.8330000042915344, 0.8236666917800903, 0.8259999752044678]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [2, 3, 5, 2, 2, 3, 1, 1, 0, 8, 5, 2, 8, 0, 3, 5, 5, 8, 9, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [1, 1, 2, 2, 1, 2, 0, 2, 1, 2, 0, 2, 1, 2, 2, 1, 2, 1, 2, 1], [30, 94, 73, 82, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7954285740852356, "mapping_values": [1, 28, 28, 19, 9, 2, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.subtract(grad, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.sqrt(grad)))))), tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), tf.math.square(tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))))))))))), alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [1.9807078010764152, 1.651161727116738, 1.1292070077788545, 1.0274477811332676, 0.9269756598085885, 0.8242612886879155, 0.7909501375003876, 0.730968755879627, 0.7580128984050728, 0.6955969731852741, 0.6893956542345732, 0.6496528344714269, 0.6467426847614837, 0.6541729448509569, 0.6101805561128278, 0.6010216552945743, 0.5904335735370423, 0.592470805178292, 0.5708678565272849, 0.584027871865449, 0.5224119062122022], "accuracy": [0.34566107392311096, 0.43323206901550293, 0.5935807824134827, 0.6180161237716675, 0.6469422578811646, 0.6907938122749329, 0.7003037929534912, 0.7285695672035217, 0.7120591998100281, 0.7388719916343689, 0.7405890822410583, 0.7586844563484192, 0.7506273984909058, 0.7540615797042847, 0.7707040309906006, 0.7668735980987549, 0.7758552432060242, 0.7677981853485107, 0.7794214487075806, 0.776251494884491, 0.8083476424217224], "val_loss": [1.7764748164585658, 0.906076158796038, 0.815861565726144, 0.6637357813971383, 0.6908746446881976, 0.6482446534293038, 0.577194162777492, 0.5783943959644863, 0.5476256779261998, 0.5221027987343925, 0.5566827569689069, 0.5402200392314366, 0.5084788799285889, 0.5138921226773944, 0.4956289529800415, 0.47211146354675293, 0.4940872703279768, 0.4620169060570853, 0.4843595709119524, 0.4485588925225394, 0.44415310450962614], "val_accuracy": [0.2653333246707916, 0.5803333520889282, 0.6460000276565552, 0.7006666660308838, 0.6899999976158142, 0.7070000171661377, 0.734666645526886, 0.7440000176429749, 0.7350000143051147, 0.768666684627533, 0.7276666760444641, 0.7493333220481873, 0.7736666798591614, 0.746666669845581, 0.7720000147819519, 0.8016666769981384, 0.7739999890327454, 0.793666660785675, 0.7850000262260437, 0.8013333082199097, 0.7963333129882812]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 8, 7, 2, 7, 6, 1, 3, 0, 2, 5, 2, 8, 2, 3, 5, 3, 1, 8, 9, 6, 2, 2, 6, 8, 4, 5, 4, 1, 4], [1, 0, 1, 1, 1, 2, 1, 2, 2, 2, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1], [18, 94, 73, 70, 77, 85, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.6974285840988159, "mapping_values": [1, 12, 12, 6, 6, 1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), alpha))), alpha)), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.0068725324058105, 1.7307180890695624, 0.9383472689327673, 0.817617279513952, 0.7575909415760124, 0.7143273523313305, 0.7029560739574273, 0.6660488138912439, 0.6819440482267692, 0.7217713252680256, 0.7752047786308301, 0.7389843906661571, 0.8191678753823116, 0.9834707969483005], "accuracy": [0.3617751896381378, 0.43547746539115906, 0.6539427042007446, 0.6944921612739563, 0.7248712182044983, 0.7293620109558105, 0.7392682433128357, 0.7465327978134155, 0.7557786107063293, 0.7532690763473511, 0.7329282760620117, 0.7300224304199219, 0.7127195596694946, 0.6767930388450623], "val_loss": [1.8746215956551688, 0.8301053728376117, 0.5696639674050468, 0.5753788948059082, 0.5182787690843854, 0.47863653727940153, 0.4584965024675642, 0.45704383509499685, 0.4860656602042062, 0.4978315830230713, 0.49266225951058523, 0.5118554489953178, 0.6987320865903582, 0.5836334569113595], "val_accuracy": [0.2693333327770233, 0.6683333516120911, 0.7363333106040955, 0.7480000257492065, 0.7630000114440918, 0.7836666703224182, 0.8006666898727417, 0.7933333516120911, 0.8100000023841858, 0.8059999942779541, 0.7879999876022339, 0.7896666526794434, 0.7076666951179504, 0.7766666412353516]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 1, 2, 2, 2, 6, 9, 3, 0, 2, 5, 2, 8, 2, 3, 5, 3, 1, 8, 9, 6, 2, 2, 6, 8, 4, 5, 4, 1, 4], [1, 0, 1, 1, 0, 2, 1, 2, 2, 2, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1], [18, 94, 73, 70, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [9, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 7, 6, 3, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), alpha)), alpha)), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08189142495393753, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [5, 6, 1, 5, 9, 6, 1, 3, 0, 2, 5, 2, 8, 2, 3, 5, 3, 1, 8, 9, 6, 2, 2, 6, 8, 4, 5, 4, 1, 4], [1, 1, 1, 1, 0, 2, 1, 2, 2, 2, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1], [18, 94, 73, 70, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 0, 0, 0, 1, 1, 0, 1], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 10, 9, 5, 4, 1, 1, 1, 0, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(sigma, alpha))))), tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.30277131791317, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 1, 3, 0, 2, 6, 1, 4, 2, 5, 5, 2, 6, 8, 3, 5, 4, 1, 8, 9, 9, 2, 2, 6, 8, 4, 5, 4, 1, 4], [0, 0, 2, 2, 2, 0, 1, 2, 2, 2, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1], [30, 94, 73, 43, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 33, 33, 21, 12, 6, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.square(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)))), tf.math.pow(grad, tf.math.add(alpha, tf.math.subtract(tf.math.sqrt(grad), tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))))))))))), grad))), tf.math.add(alpha, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)))))), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08189142495393753, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 1, 3, 0, 2, 6, 1, 3, 0, 2, 5, 9, 8, 2, 3, 6, 3, 1, 8, 9, 6, 2, 2, 6, 8, 4, 5, 4, 1, 4], [0, 2, 2, 1, 0, 0, 1, 0, 1, 2, 0, 0, 1, 0, 2, 1, 2, 1, 2, 1], [30, 85, 49, 70, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 12, 6, 6, 3, 15, 15, 8, 7, 1, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), alpha)))), tf.math.divide_no_nan(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(tf.math.add(beta, tf.math.subtract(grad, beta)), tf.math.pow(grad, tf.math.negative(grad)))), tf.math.pow(tf.math.pow(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 1, 3, 0, 2, 6, 1, 4, 0, 5, 5, 2, 2, 2, 0, 5, 3, 1, 8, 9, 6, 2, 4, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 2, 2, 0, 1, 2, 2, 0, 0, 2, 1, 1, 1, 1, 0, 1, 2, 1], [30, 94, 73, 43, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [32], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 31, 31, 18, 13, 5, 1, 1, 0, 1, 0, 5, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.divide_no_nan(grad, tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), tf.math.negative(tf.math.square(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))))))))))))), tf.math.multiply(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, alpha)))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, beta))), sigma)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 1, 3, 0, 2, 6, 1, 4, 0, 5, 5, 2, 2, 2, 3, 5, 1, 1, 8, 9, 2, 2, 2, 6, 8, 4, 5, 4, 1, 4], [0, 0, 2, 2, 2, 0, 1, 2, 2, 2, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1], [30, 94, 73, 43, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [4, 0, 1, 5, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 33, 33, 20, 13, 5, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(grad)))), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)), tf.math.square(tf.math.subtract(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)))))), alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [8.394905568281112e+20, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.060493990778923035, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 2, 2, 2, 2, 6, 9, 3, 0, 2, 5, 2, 8, 2, 3, 2, 3, 1, 8, 9, 6, 2, 2, 6, 8, 4, 5, 4, 1, 4], [0, 0, 2, 1, 0, 0, 1, 2, 2, 2, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1], [18, 94, 73, 0, 24, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 15, 8, 7, 5, 15, 15, 8, 7, 1, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(tf.math.add(beta, tf.math.subtract(grad, beta)), tf.math.pow(grad, tf.math.negative(grad)))), tf.math.pow(tf.math.pow(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [6, 1, 2, 2, 2, 8, 9, 3, 0, 2, 5, 2, 8, 2, 3, 5, 3, 1, 4, 3, 6, 2, 2, 6, 9, 9, 5, 4, 1, 4], [1, 0, 1, 1, 0, 2, 1, 2, 0, 2, 0, 2, 1, 2, 2, 1, 2, 1, 2, 1], [18, 94, 73, 70, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [2, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 43, 43, 27, 16, 7, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.sqrt(alpha)))))), tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), tf.math.subtract(tf.math.pow(tf.math.add(alpha, alpha), tf.math.multiply(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.add(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.square(alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09602430462837219, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [2, 3, 5, 2, 2, 2, 1, 1, 0, 2, 5, 2, 8, 0, 3, 5, 3, 8, 9, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [1, 2, 2, 1, 2, 2, 0, 2, 1, 2, 0, 0, 1, 2, 2, 1, 2, 1, 2, 1], [82, 94, 73, 46, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [4, 2, 1, 5, 3, 4], [80], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.06885714083909988, "mapping_values": [1, 10, 10, 5, 5, 0, 8, 8, 4, 4, 0, 3, 3, 1, 2, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), beta)), grad)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.300821275003141, 2.301149878787201, 2.3009541557764477, 2.2985303795269973, 2.2994951441334917, 2.300081248768978, 2.300977869087978, 2.2993331288995367, 2.2997038163812547, 2.2999463916501948, 2.2987207124072957, 2.298662855357164, 2.2987611831974406, 2.2993033324974625, 2.299453838768101, 2.299437079463007, 2.300029715274886], "accuracy": [0.09034473448991776, 0.09338264167308807, 0.08968432247638702, 0.09826971590518951, 0.09576013684272766, 0.09919429570436478, 0.08981640636920929, 0.09985470771789551, 0.1010434553027153, 0.09998679161071777, 0.10236428678035736, 0.1006472036242485, 0.10302469879388809, 0.09945846349000931, 0.10513802617788315, 0.10289261490106583, 0.10011887550354004], "val_loss": [1.9701685905456543, 1.9696483612060547, 1.9692155974251884, 1.9691896438598633, 1.9692177772521973, 1.9692540849958147, 1.9690886906215124, 1.9689443452017648, 1.9688968658447266, 1.9688332421439034, 1.968870026724679, 1.969034194946289, 1.9693147795540946, 1.9696083750043596, 1.9699126652308874, 1.9701153891427177, 1.9703313282557897], "val_accuracy": [0.04600000008940697, 0.05299999937415123, 0.06066666543483734, 0.06199999898672104, 0.06400000303983688, 0.06599999964237213, 0.07100000232458115, 0.07533333450555801, 0.07666666805744171, 0.0793333351612091, 0.08433333039283752, 0.08733333647251129, 0.0860000029206276, 0.08366666734218597, 0.08100000023841858, 0.08299999684095383, 0.0833333358168602]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 8, 3, 0, 6, 5, 1, 1, 0, 2, 5, 2, 8, 2, 3, 5, 3, 1, 8, 5, 6, 2, 2, 6, 8, 4, 5, 4, 1, 4], [0, 0, 1, 1, 0, 2, 2, 2, 2, 2, 0, 2, 1, 2, 1, 1, 2, 1, 2, 1], [0, 94, 73, 70, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [19], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 10, 10, 6, 4, 2, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))), alpha)))), alpha)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3012740655802557, 2.3023752807201, 2.303061115207957, 2.300614649892688, 2.30157476702166, 2.3020148310978117], "accuracy": [0.09034473448991776, 0.08994849026203156, 0.08426892012357712, 0.09734513610601425, 0.08994849026203156, 0.09391097724437714], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 1, 2, 0, 2, 6, 1, 3, 0, 2, 5, 0, 8, 2, 3, 5, 3, 1, 8, 9, 6, 2, 2, 6, 8, 4, 5, 4, 1, 4], [0, 0, 2, 1, 1, 0, 1, 2, 2, 2, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1], [30, 94, 73, 70, 77, 85, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [6, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [4, 0, 1, 5, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3012740655802557, 2.3023752807201, 2.303061115207957, 2.300614649892688, 2.30157476702166, 2.3020148310978117], "accuracy": [0.09034473448991776, 0.08994849026203156, 0.08426892012357712, 0.09734513610601425, 0.08994849026203156, 0.09391097724437714], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [2, 3, 5, 2, 2, 3, 1, 4, 0, 2, 5, 2, 8, 0, 3, 5, 3, 8, 9, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [1, 1, 0, 1, 2, 2, 0, 2, 1, 2, 0, 0, 1, 2, 2, 1, 2, 1, 2, 1], [39, 94, 73, 70, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 3, 1, 5, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 6, 6, 3, 3, 1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.multiply(alpha, tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, sigma))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3012740655802557, 2.3023752807201, 2.303061115207957, 2.300614649892688, 2.30157476702166, 2.3020148310978117], "accuracy": [0.09034473448991776, 0.08994849026203156, 0.08426892012357712, 0.09734513610601425, 0.08994849026203156, 0.09391097724437714], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 1, 3, 0, 2, 6, 1, 3, 5, 2, 5, 2, 8, 2, 3, 6, 3, 1, 8, 9, 6, 2, 2, 6, 8, 4, 5, 4, 1, 4], [0, 2, 1, 1, 1, 0, 2, 1, 1, 2, 0, 0, 1, 0, 2, 1, 2, 1, 2, 1], [30, 94, 49, 70, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [5, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [18], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 12, 12, 6, 6, 2, 1, 1, 0, 1, 0, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3012740655802557, 2.3023752807201, 2.303061115207957, 2.300614649892688, 2.30157476702166, 2.3020148310978117], "accuracy": [0.09034473448991776, 0.08994849026203156, 0.08426892012357712, 0.09734513610601425, 0.08994849026203156, 0.09391097724437714], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 6, 9, 2, 7, 6, 1, 3, 0, 2, 5, 2, 8, 2, 3, 5, 3, 1, 8, 9, 6, 2, 2, 6, 8, 4, 5, 4, 1, 4], [1, 0, 1, 1, 1, 2, 1, 2, 2, 2, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1], [18, 94, 73, 70, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [43], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 11, 11, 6, 5, 2, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), alpha))), alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3012740655802557, 2.3023752807201, 2.303061115207957, 2.300614649892688, 2.30157476702166, 2.3020148310978117], "accuracy": [0.09034473448991776, 0.08994849026203156, 0.08426892012357712, 0.09734513610601425, 0.08994849026203156, 0.09391097724437714], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}]