[{"genotype": [[0], [1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 4, 5, 8, 2, 9, 1, 1, 0, 2, 5, 2, 8, 3, 3, 8, 3, 8, 9, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [1, 0, 1, 1, 0, 2, 1, 2, 2, 2, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1], [3, 94, 73, 70, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [32], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7851428389549255, "mapping_values": [1, 11, 11, 7, 4, 2, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.math.pow(alpha, tf.math.square(tf.math.sqrt(tf.math.add(alpha, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)))))), tf.math.add(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.278653676184555, 2.211355722119008, 2.0892345346338193, 1.8839846971469265, 1.6237103641151265, 1.4019281758828768, 1.2471347260453114, 1.14915690941975, 1.0734501835960109, 1.008102315425747, 0.9729688282514276, 0.9461742534833956, 0.9084198527395324, 0.8777399274651337, 0.8585078844761473, 0.8470073271625943, 0.8254617013164153, 0.8149675866159639, 0.7965700985607203, 0.7914806115408426, 0.7836140216443958, 0.7745200757022389, 0.7581503776243697, 0.753426216825156, 0.7440499196341009, 0.7490609697205374, 0.7315105896631583, 0.7256300650835195, 0.7086489078406849, 0.7073231514623498, 0.6953791837650692, 0.6939332007243885, 0.6814525585605358, 0.690628711140592, 0.6901536752771094, 0.6795518791056769, 0.6723431937367987, 0.665415495748234, 0.6627198563763935, 0.6553589112455378], "accuracy": [0.15678246319293976, 0.2933562397956848, 0.3801347315311432, 0.43666622042655945, 0.4934619069099426, 0.5362567901611328, 0.5671641826629639, 0.5976753234863281, 0.6279223561286926, 0.6404702067375183, 0.6546030640602112, 0.6649055480957031, 0.6713775992393494, 0.6831330060958862, 0.6873596906661987, 0.6971337795257568, 0.7036058902740479, 0.7059833407402039, 0.7141724824905396, 0.7162858247756958, 0.7088891863822937, 0.7207766771316528, 0.7190595865249634, 0.7195879220962524, 0.7239466309547424, 0.7251353859901428, 0.7375511527061462, 0.7358341217041016, 0.744419515132904, 0.7424382567405701, 0.7412495017051697, 0.7453441023826599, 0.7474573850631714, 0.746268630027771, 0.7437590956687927, 0.748778223991394, 0.750759482383728, 0.752212405204773, 0.7523444890975952, 0.757099449634552], "val_loss": [1.915952478136335, 1.829725742340088, 1.6655096326555525, 1.4115907124110632, 1.150256531579154, 0.9682113102504185, 0.8563479355403355, 0.7824010848999023, 0.7328990016664777, 0.6963992289134434, 0.6700506040028164, 0.6548021861485073, 0.6361302477972848, 0.6161567483629499, 0.6084057944161552, 0.5944568940571376, 0.5884857858930316, 0.5790952614375523, 0.5676088162830898, 0.5597622905458722, 0.5621647323880877, 0.5489788225718907, 0.5473162957600185, 0.5374984911509922, 0.5354233469281878, 0.5367841039385114, 0.525760293006897, 0.5251317024230957, 0.516335095678057, 0.515885557447161, 0.5105112109865461, 0.501450947352818, 0.5034696204321725, 0.508313502584185, 0.497579710824149, 0.4937376635415213, 0.4917491504124233, 0.4861710582460676, 0.48707614626203266, 0.4806903430393764], "val_accuracy": [0.3853333294391632, 0.46433332562446594, 0.5446666479110718, 0.5743333101272583, 0.6353333592414856, 0.6816666722297668, 0.6946666836738586, 0.6956666707992554, 0.7133333086967468, 0.7179999947547913, 0.7289999723434448, 0.7210000157356262, 0.7446666955947876, 0.7366666793823242, 0.7333333492279053, 0.7450000047683716, 0.7480000257492065, 0.7516666650772095, 0.7583333253860474, 0.7566666603088379, 0.7516666650772095, 0.765999972820282, 0.765333354473114, 0.7736666798591614, 0.7716666460037231, 0.7586666941642761, 0.7739999890327454, 0.7676666378974915, 0.7739999890327454, 0.7803333401679993, 0.7826666831970215, 0.7796666622161865, 0.7720000147819519, 0.781333327293396, 0.7873333096504211, 0.781333327293396, 0.7793333530426025, 0.7856666445732117, 0.7799999713897705, 0.7866666913032532]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 4, 5, 8, 2, 9, 1, 1, 0, 2, 5, 2, 8, 3, 3, 8, 3, 8, 9, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [1, 0, 1, 1, 0, 2, 1, 2, 2, 2, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1], [3, 94, 73, 70, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [32], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7851428389549255, "mapping_values": [1, 6, 6, 3, 3, 1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.math.pow(alpha, tf.math.square(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.2786535952211198, 2.211358988242552, 2.0892554338440337, 1.8840300840488151, 1.6237293843028882, 1.4019193531830454, 1.2471779076776894, 1.1491445593625453, 1.0734987893770274, 1.0081461887979362, 0.9730968069894801, 0.9461962894725132, 0.9083020228436437, 0.8777510002068462, 0.858425119250379, 0.8472064437568306, 0.8254770783227999, 0.8153089130039717, 0.7966515053973426, 0.7916820453630699, 0.7836904767214299, 0.7744617114890883, 0.7582675441223727, 0.7534715708346651, 0.744131856826885, 0.7489745691389125, 0.7315866218471666, 0.7253158104307915, 0.7088836203508248, 0.7071856302261479, 0.6954250229489864, 0.6937362753782825, 0.6814859839887698, 0.690440912587437, 0.6898183679898748, 0.6796086073677537, 0.6723924521615146, 0.6656026208893561, 0.6627742149542981, 0.65556877439741], "accuracy": [0.15678246319293976, 0.2933562397956848, 0.38026681542396545, 0.4364020526409149, 0.49306565523147583, 0.5363888740539551, 0.5666358470916748, 0.5978074073791504, 0.6281865239143372, 0.6408664584159851, 0.6551313996315002, 0.6646413803100586, 0.6712455153465271, 0.6839255094528198, 0.6868313550949097, 0.6972658634185791, 0.702681303024292, 0.7054550051689148, 0.7141724824905396, 0.7162858247756958, 0.709549605846405, 0.7217012047767639, 0.7194558382034302, 0.7195879220962524, 0.7235503792762756, 0.7264562249183655, 0.7382115721702576, 0.7343811988830566, 0.7450799345970154, 0.7434949278831482, 0.7415136694908142, 0.7446836829185486, 0.7467969655990601, 0.7464007139205933, 0.7433628439903259, 0.750231146812439, 0.7508915662765503, 0.7508915662765503, 0.7524765729904175, 0.7552502751350403], "val_loss": [1.9159517288208008, 1.8297281946454729, 1.6655526842389787, 1.4115850584847587, 1.1502416133880615, 0.968186616897583, 0.8563852991376605, 0.7825271912983486, 0.732957295009068, 0.6964247567313058, 0.6699829271861485, 0.6548293147768293, 0.6361448764801025, 0.6161731140954154, 0.608522857938494, 0.5943986177444458, 0.5886257035391671, 0.579120567866734, 0.5676188809531075, 0.5597696134022304, 0.5621339423315865, 0.548672114099775, 0.5474870034626552, 0.5376247337886265, 0.5354190724236625, 0.5363875457218715, 0.5255390916551862, 0.5245644875935146, 0.5161910397665841, 0.5155153955732074, 0.5106138331549508, 0.5011640446526664, 0.5035429341452462, 0.5078381129673549, 0.4980423791067941, 0.4935746022633144, 0.49196032115391325, 0.4864521878106253, 0.4869964633669172, 0.48065974031175884], "val_accuracy": [0.38600000739097595, 0.46433332562446594, 0.5443333387374878, 0.5746666789054871, 0.6356666684150696, 0.6826666593551636, 0.6946666836738586, 0.6953333616256714, 0.7136666774749756, 0.7176666855812073, 0.7289999723434448, 0.7210000157356262, 0.7456666827201843, 0.7366666793823242, 0.734666645526886, 0.7450000047683716, 0.7480000257492065, 0.7526666522026062, 0.7580000162124634, 0.7570000290870667, 0.75, 0.7670000195503235, 0.765333354473114, 0.7746666669845581, 0.7713333368301392, 0.7586666941642761, 0.7739999890327454, 0.7673333287239075, 0.7749999761581421, 0.781333327293396, 0.784333348274231, 0.7789999842643738, 0.7713333368301392, 0.7826666831970215, 0.7879999876022339, 0.7799999713897705, 0.7789999842643738, 0.7846666574478149, 0.7799999713897705, 0.7853333353996277]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 8, 5, 2, 2, 3, 9, 1, 0, 2, 5, 2, 8, 3, 3, 5, 3, 8, 9, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 2, 1, 2, 0, 0, 1, 1, 2, 1, 2, 1, 2, 1], [27, 12, 73, 33, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [32], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7848571538925171, "mapping_values": [1, 28, 28, 20, 8, 4, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32))))), grad), tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))), tf.math.add(alpha, grad))))))), tf.math.add(tf.math.add(alpha, grad), tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))))))), grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.2786537076755837, 2.211355834573472, 2.0892364827003522, 1.8839919778570413, 1.623743587969285, 1.401987693014083, 1.2471622270190594, 1.1491762447224916, 1.073522730896171, 1.0082105306775389, 0.9731163919373526, 0.9461952273194753, 0.9083281552015342, 0.8778263765980523, 0.8585021821042692, 0.8471214090277254, 0.8254095937881046, 0.8150569211695062, 0.7966778838261322, 0.7916932868100963, 0.7835963984144173, 0.7745623327973749, 0.758267096288452, 0.7534271069584489, 0.7440676815348247, 0.749025292408197, 0.7313531663959147, 0.7255510977860439, 0.7087011419865497, 0.7074948671298367, 0.6954777369000389, 0.6939328559763506, 0.6817941395928753, 0.6904513666878885, 0.6901857943629954, 0.6794950178491126, 0.6723473441520498, 0.6659222542649137, 0.663164123402705, 0.6553394116619716], "accuracy": [0.15678246319293976, 0.2933562397956848, 0.3801347315311432, 0.436930388212204, 0.4934619069099426, 0.5361247062683105, 0.5671641826629639, 0.5976753234863281, 0.6277902722358704, 0.6408664584159851, 0.654999315738678, 0.6649055480957031, 0.6719059348106384, 0.6828688383102417, 0.6872276067733765, 0.6970016956329346, 0.7028133869171143, 0.7055870890617371, 0.7144366502761841, 0.7162858247756958, 0.7096816897392273, 0.7217012047767639, 0.7193237543106079, 0.7202483415603638, 0.7234182953834534, 0.726192057132721, 0.7383436560630798, 0.7349095344543457, 0.7452120184898376, 0.7423061728477478, 0.7429665923118591, 0.7449478507041931, 0.7469290494918823, 0.7457403540611267, 0.7433628439903259, 0.7499669790267944, 0.7506273984909058, 0.7515519857406616, 0.7530049085617065, 0.757099449634552], "val_loss": [1.915952410016741, 1.829725878579276, 1.6655163083757674, 1.4116353307451521, 1.150270904813494, 0.9681980950491769, 0.8563606568745205, 0.7824480533599854, 0.7328894138336182, 0.6964813130242484, 0.6699999741145543, 0.6547127962112427, 0.6360190766198295, 0.6160851376397269, 0.6083787679672241, 0.5943527051380703, 0.5885239498955863, 0.5791354690279279, 0.567611575126648, 0.559915270124163, 0.5622516700199672, 0.548630782536098, 0.5474177258355277, 0.5372440133775983, 0.5354335648672921, 0.5363022429602486, 0.5256339141300747, 0.525108916418893, 0.5161627871649606, 0.5159939016614642, 0.5107120275497437, 0.5012482234409877, 0.5035984516143799, 0.5079875673566546, 0.49769794940948486, 0.49366787501743864, 0.49164039748055594, 0.4862083537237985, 0.48757520743778776, 0.4805260556084769], "val_accuracy": [0.3853333294391632, 0.46433332562446594, 0.5446666479110718, 0.5746666789054871, 0.6356666684150696, 0.6823333501815796, 0.6946666836738586, 0.6953333616256714, 0.7136666774749756, 0.7176666855812073, 0.7293333411216736, 0.7203333377838135, 0.7453333139419556, 0.7360000014305115, 0.734333336353302, 0.7446666955947876, 0.7483333349227905, 0.7516666650772095, 0.7583333253860474, 0.7556666731834412, 0.7506666779518127, 0.7670000195503235, 0.7649999856948853, 0.7733333110809326, 0.7716666460037231, 0.7596666812896729, 0.7746666669845581, 0.7673333287239075, 0.7743333578109741, 0.7803333401679993, 0.7836666703224182, 0.777999997138977, 0.7716666460037231, 0.7826666831970215, 0.7876666784286499, 0.7826666831970215, 0.7789999842643738, 0.7853333353996277, 0.7796666622161865, 0.7860000133514404]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 4, 5, 8, 2, 9, 1, 1, 0, 2, 5, 2, 8, 3, 3, 8, 3, 8, 9, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [1, 0, 1, 1, 0, 2, 1, 2, 2, 2, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1], [3, 94, 73, 70, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [32], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7654285430908203, "mapping_values": [1, 11, 11, 7, 4, 2, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.square(alpha), tf.math.sqrt(tf.math.add(alpha, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))))), tf.math.add(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.278653608730771, 2.21135865087916, 2.089246603318682, 1.884024415758103, 1.6237502410002136, 1.4019021330224903, 1.2471295673896639, 1.1491519709493758, 1.073508060249308, 1.008070851550079, 0.9730648667175283, 0.9462132274025955, 0.9082720063271508, 0.8777613209900272, 0.8584931524690148, 0.8470251592646941, 0.8254789741457162, 0.8151075624912612, 0.7967256739107751, 0.7916654649348921, 0.7836222715539042, 0.7743627457901503, 0.7583573931448526, 0.7533141645332133, 0.7438901139288184, 0.7489617692795979, 0.7315461995374604, 0.7253535551055548, 0.70863984842279], "accuracy": [0.15678246319293976, 0.2933562397956848, 0.3801347315311432, 0.4364020526409149, 0.4931977391242981, 0.5363888740539551, 0.5670320987701416, 0.5976753234863281, 0.6284506916999817, 0.6408664584159851, 0.6547351479530334, 0.6649055480957031, 0.6707172393798828, 0.6831330060958862, 0.6869634389877319, 0.6973979473114014, 0.7030775547027588, 0.7059833407402039, 0.713908314704895, 0.7168141603469849, 0.709549605846405, 0.7217012047767639, 0.7187954187393188, 0.7199841737747192, 0.7236824631690979, 0.7257958054542542, 0.7383436560630798, 0.7345132827758789, 0.7458723783493042], "val_loss": [1.9159517288208008, 1.8297254017421178, 1.665548358644758, 1.411597762789045, 1.1502390248434884, 0.9681656020028251, 0.8563797644206456, 0.7824683870588031, 0.7328956638063703, 0.6963935579572406, 0.6700524772916522, 0.6548988137926374, 0.6362028803144183, 0.6161890200206211, 0.6083340304238456, 0.5943674700600761, 0.5883058990750994, 0.5788966928209577, 0.5675806147711617, 0.5598065682819912, 0.5618694509778704, 0.5484554086412702, 0.5472685779844012, 0.5373068537030902, 0.5353794779096331, 0.5366277183805194, 0.5256683315549578, 0.5251700537545341, 0.5159739937101092], "val_accuracy": [0.38600000739097595, 0.46433332562446594, 0.5443333387374878, 0.5746666789054871, 0.6353333592414856, 0.6819999814033508, 0.6946666836738586, 0.6953333616256714, 0.7136666774749756, 0.7179999947547913, 0.7293333411216736, 0.7210000157356262, 0.7459999918937683, 0.7360000014305115, 0.7353333234786987, 0.7446666955947876, 0.7486666440963745, 0.7526666522026062, 0.7583333253860474, 0.7556666731834412, 0.7506666779518127, 0.7663333415985107, 0.765666663646698, 0.7746666669845581, 0.7716666460037231, 0.7596666812896729, 0.7743333578109741, 0.7673333287239075, 0.7746666669845581]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 4, 5, 8, 2, 9, 1, 1, 0, 2, 5, 2, 8, 3, 3, 8, 3, 8, 9, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 0, 1, 1, 0, 2, 1, 2, 2, 2, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1], [97, 12, 73, 33, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [32], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7654285430908203, "mapping_values": [1, 6, 6, 3, 3, 2, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.2786536267121487, 2.211359312096292, 2.089245614248449, 1.8839983218665042, 1.6237493263905185, 1.40193695410163, 1.2471471357937611, 1.149059828104612, 1.0734017967406264, 1.0080173002998072, 0.9729121246074626, 0.9459662834068473, 0.9079442352839843, 0.8774771782007547, 0.8583647877218039, 0.8471873917788751, 0.8254138496195745, 0.8149958758810177, 0.7965113026606739, 0.7916356385061218, 0.7833577925896584, 0.7743202093774616, 0.7582300007540111, 0.7531529891964877, 0.7439903918904178, 0.7489829655525596, 0.7316026097795101, 0.7250857153163689, 0.7088498522214697], "accuracy": [0.15678246319293976, 0.2933562397956848, 0.3801347315311432, 0.43626996874809265, 0.49332982301712036, 0.5362567901611328, 0.5666358470916748, 0.5976753234863281, 0.6277902722358704, 0.6407343745231628, 0.6552634835243225, 0.6650376319885254, 0.6719059348106384, 0.683529257774353, 0.6869634389877319, 0.6963412761688232, 0.7028133869171143, 0.705058753490448, 0.7145687341690063, 0.7152291536331177, 0.7096816897392273, 0.7214370369911194, 0.7205125093460083, 0.7202483415603638, 0.7234182953834534, 0.7250033020973206, 0.737022876739502, 0.7353057861328125, 0.7460044622421265], "val_loss": [1.915951865059989, 1.8297272409711565, 1.665524891444615, 1.4115990570613317, 1.1502719266074044, 0.968172584261213, 0.8562840734209333, 0.7822237185069493, 0.7326842376164028, 0.6963020052228656, 0.6700696774891445, 0.6543485266821725, 0.6360052142824445, 0.6161192314965385, 0.6084421532494682, 0.5944048166275024, 0.5883196932928902, 0.5791083574295044, 0.5676923819950649, 0.5598685571125576, 0.5622169630868095, 0.5488171407154628, 0.5470604215349469, 0.5372454098292759, 0.53525481905256, 0.5357785054615566, 0.52569009576525, 0.524534957749503, 0.5160562140601022], "val_accuracy": [0.38600000739097595, 0.46399998664855957, 0.5443333387374878, 0.5740000009536743, 0.6359999775886536, 0.6816666722297668, 0.6946666836738586, 0.6949999928474426, 0.7143333554267883, 0.7173333168029785, 0.7289999723434448, 0.7210000157356262, 0.7453333139419556, 0.7363333106040955, 0.7336666584014893, 0.7446666955947876, 0.7490000128746033, 0.7519999742507935, 0.7573333382606506, 0.7553333044052124, 0.7506666779518127, 0.7670000195503235, 0.7670000195503235, 0.7749999761581421, 0.7710000276565552, 0.7593333125114441, 0.7746666669845581, 0.768666684627533, 0.7746666669845581]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 1, 5, 2, 2, 6, 1, 3, 0, 2, 5, 2, 4, 2, 3, 5, 3, 8, 9, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 0, 2, 2, 2, 0, 0, 1, 1, 2, 1, 2, 1, 2, 1], [97, 12, 73, 33, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [32], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7645714282989502, "mapping_values": [1, 47, 47, 29, 18, 6, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 58, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(grad, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(grad, tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(alpha, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.sqrt(grad)))), tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))))))))), grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(grad, tf.math.add(alpha, tf.math.add(tf.math.square(grad), tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha))))))))), grad))), alpha)), tf.math.subtract(grad, tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.278653644693526, 2.211355884045878, 2.089236163034919, 1.8839814797242587, 1.6236844280408185, 1.4018884493202155, 1.2471113326826335, 1.1491134705843942, 1.0734753088550546, 1.0080419519652686, 0.9729995649992405, 0.9461206326851865, 0.9083982147104185, 0.8777075306441191, 0.858564099229763, 0.8471771184762927, 0.8254338705449954, 0.8150705570762719, 0.7966885904295254, 0.7917310756195365, 0.7835639465234661, 0.7745505291331383, 0.7582243268264047, 0.7535941242274198, 0.7441980885382358, 0.7491789494507411, 0.7314369449478807, 0.7255351926593606, 0.7088335560470634], "accuracy": [0.15678246319293976, 0.2933562397956848, 0.3801347315311432, 0.43626996874809265, 0.49372607469558716, 0.5362567901611328, 0.5667679309844971, 0.5976753234863281, 0.6277902722358704, 0.6408664584159851, 0.6547351479530334, 0.6651697158813477, 0.6713775992393494, 0.683000922203064, 0.6866992712020874, 0.6971337795257568, 0.7028133869171143, 0.7059833407402039, 0.7140403985977173, 0.7164179086685181, 0.7094175219535828, 0.7213049530982971, 0.7199841737747192, 0.7197200059890747, 0.7235503792762756, 0.7255316376686096, 0.7374191284179688, 0.7353057861328125, 0.7454761862754822], "val_loss": [1.915952478136335, 1.8297261510576521, 1.665513004575457, 1.4115423815590995, 1.1501986299242293, 0.9681567123958043, 0.8563210112707955, 0.7823732580457415, 0.7329695395060948, 0.6963410547801426, 0.6700596468789237, 0.6548779691968646, 0.6361167090279716, 0.6161603246416364, 0.6083349159785679, 0.5944837502070835, 0.5883738654000419, 0.579224841935294, 0.5676994153431484, 0.5598655428205218, 0.5621195350374494, 0.549072231565203, 0.5478690351758685, 0.5375501939228603, 0.5356842109135219, 0.5366280419485909, 0.5257519824164254, 0.525438632283892, 0.5164438145501273], "val_accuracy": [0.3853333294391632, 0.46433332562446594, 0.5446666479110718, 0.5743333101272583, 0.6356666684150696, 0.6823333501815796, 0.6946666836738586, 0.6953333616256714, 0.7136666774749756, 0.7179999947547913, 0.7296666502952576, 0.7213333249092102, 0.7453333139419556, 0.7369999885559082, 0.7333333492279053, 0.7453333139419556, 0.7493333220481873, 0.7523333430290222, 0.7583333253860474, 0.7556666731834412, 0.7513333559036255, 0.7666666507720947, 0.7639999985694885, 0.7739999890327454, 0.7713333368301392, 0.7576666474342346, 0.7730000019073486, 0.7670000195503235, 0.7730000019073486]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [5, 1, 5, 8, 2, 6, 4, 1, 0, 2, 5, 2, 8, 2, 3, 5, 3, 8, 9, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [1, 1, 1, 1, 0, 2, 1, 2, 2, 2, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1], [42, 94, 73, 70, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [32], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7639999985694885, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.2786535952211198, 2.211361457957977, 2.0892485744996296, 1.8840092912625328, 1.6237213475404084, 1.4019315060434276, 1.247126127892261, 1.1491423460785677, 1.073559324195939, 1.008178398979496, 0.9730492191638425, 0.9461605123572299, 0.9083871212476091, 0.8777095158228296, 0.8585478221467929, 0.8471878274651314, 0.8255111776590505, 0.8150740297101099, 0.7967779019946167, 0.7915946195122746, 0.7837164447984959, 0.7745170443836787, 0.7583086026374611, 0.7535148559465636, 0.7440710073574863, 0.7491465842073557, 0.7312272163807928, 0.725482649208611, 0.7087854249539424], "accuracy": [0.15678246319293976, 0.2933562397956848, 0.3800026476383209, 0.4361378848552704, 0.4934619069099426, 0.5362567901611328, 0.5670320987701416, 0.5976753234863281, 0.6281865239143372, 0.6406022906303406, 0.6546030640602112, 0.6647734642028809, 0.6711134314537048, 0.6833971738815308, 0.687491774559021, 0.6971337795257568, 0.7029454708099365, 0.705058753490448, 0.7143045663833618, 0.7162858247756958, 0.7094175219535828, 0.7217012047767639, 0.7187954187393188, 0.7205125093460083, 0.7235503792762756, 0.7259278893470764, 0.7376832365989685, 0.735569953918457, 0.7454761862754822], "val_loss": [1.9159528187343053, 1.8297311919076102, 1.6655418872833252, 1.4115686416625977, 1.150261061532157, 0.9681849479675293, 0.856369137763977, 0.7824646064213344, 0.732911365372794, 0.696361916405814, 0.6700294528688703, 0.654734560421535, 0.6360925776617867, 0.6162706613540649, 0.6083993911743164, 0.5944382292883736, 0.5882991552352905, 0.5791113376617432, 0.5675887550626483, 0.5597162587302071, 0.5621041740689959, 0.5487759794507708, 0.5481303930282593, 0.5374016421181815, 0.5352762426648822, 0.5366789102554321, 0.5255730152130127, 0.5249966382980347, 0.5161975451878139], "val_accuracy": [0.3853333294391632, 0.4650000035762787, 0.5446666479110718, 0.5746666789054871, 0.6353333592414856, 0.6819999814033508, 0.6946666836738586, 0.6946666836738586, 0.7136666774749756, 0.7176666855812073, 0.7293333411216736, 0.722000002861023, 0.7453333139419556, 0.7356666922569275, 0.7336666584014893, 0.7453333139419556, 0.7486666440963745, 0.7519999742507935, 0.7583333253860474, 0.7563333511352539, 0.7516666650772095, 0.7673333287239075, 0.7639999985694885, 0.7743333578109741, 0.7716666460037231, 0.7593333125114441, 0.7739999890327454, 0.7673333287239075, 0.7743333578109741]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 1, 5, 8, 2, 6, 4, 1, 0, 2, 5, 2, 2, 2, 3, 5, 3, 8, 9, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [2, 0, 1, 1, 0, 2, 1, 2, 2, 2, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1], [3, 94, 73, 70, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [1, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [32], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.30542856454849243, "mapping_values": [1, 6, 6, 3, 3, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.subtract(grad, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3491106822490377, 2.305441166289872, 2.2898095062521895, 2.3113821903476155, 2.265344827938168, 2.3036511589617636, 2.3032675255495936, 2.302372400141222], "accuracy": [0.21503104269504547, 0.09959053993225098, 0.12389380484819412, 0.14132875204086304, 0.12415797263383865, 0.09589222073554993, 0.09694888442754745, 0.1026284471154213], "val_loss": [1.9785998889378138, 1.9729495729718889, 1.6201625210898263, 1.7999470574515206, 1.9741967746189661, 1.973496573311942, 1.973477567945208, 1.973011084965297], "val_accuracy": [0.10066666454076767, 0.10166666656732559, 0.25833332538604736, 0.20866666734218597, 0.10166666656732559, 0.10433333367109299, 0.10166666656732559, 0.12600000202655792]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 3, 5, 8, 2, 8, 1, 1, 0, 2, 5, 2, 8, 3, 3, 8, 3, 8, 9, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [1, 0, 1, 1, 0, 2, 1, 2, 2, 2, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1], [3, 94, 73, 70, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [5], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.23571428656578064, "mapping_values": [1, 6, 6, 3, 3, 1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.multiply(alpha, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.302013229999434, 2.302149079432026, 2.3013493583312896, 2.3023809716213712, 2.302877217487904, 2.3028509603940486, 2.3010198123356482, 2.3004208474567993, 2.2999208790042602, 2.2999116437876967, 2.300174659946418, 2.2990639627003446, 2.2989204772601055, 2.299327320316291, 2.298153839437575, 2.297771575475775, 2.297817001190357, 2.298674510564818, 2.297262319626038, 2.298381151918092, 2.2987310024473597, 2.2980611588520032, 2.2957065724236947, 2.2950990625801433, 2.29662196555268, 2.29664838898215, 2.294886663400612, 2.296194967860165, 2.2944262306436083, 2.294190631330352, 2.2926247309164647, 2.294440429161222, 2.2935172157075976, 2.294151292012872, 2.295252716851477, 2.294050785371294, 2.2926642910805297, 2.292947559371805, 2.293676706085336, 2.2936915377615748, 2.2930189954480316, 2.292453842770233, 2.2923790301314244, 2.2918807182329646, 2.291596178743329, 2.288829732549, 2.2905022531153425, 2.2888093074677154, 2.2891737857058283, 2.2917724629088383, 2.2887221602967798, 2.2897874161457388, 2.288019928808115, 2.2893585409895776, 2.2887159983212086, 2.2869982180924793, 2.288977368349381, 2.288509713786232, 2.286583915819282, 2.28753348518561, 2.285741928215465, 2.2874434901549754, 2.286428088226087, 2.2868689659044588, 2.285783141060213, 2.2873066747980566, 2.284611963340871, 2.28651094389409, 2.282969619588231, 2.28426173957993, 2.2848379058671617, 2.2836158336067025, 2.2849910750821785, 2.284095442353333, 2.283778538714625, 2.283583603735377, 2.281008336679763, 2.28247807199425, 2.2823877440089673, 2.280566662876692, 2.282141816582993, 2.2814135279999967, 2.280213949214576, 2.281644265665244, 2.279671216858156, 2.280694086601107, 2.2815665978923088, 2.28240298872154, 2.2797472224086266, 2.278478201212522, 2.2798095345260947, 2.279909474927484, 2.278168666694993, 2.278676020455099, 2.2795305733573024, 2.278271987280432, 2.2784635434927263, 2.2772150366549733, 2.2762983227607485, 2.275721457813552], "accuracy": [0.09325055778026581, 0.09509972482919693, 0.09245806187391281, 0.08968432247638702, 0.09417514503002167, 0.09272222965955734, 0.09628847241401672, 0.09245806187391281, 0.09879804402589798, 0.09747721254825592, 0.09602430462837219, 0.09853387624025345, 0.09470347315073013, 0.09800554811954498, 0.1010434553027153, 0.10381719470024109, 0.09760929644107819, 0.09642054885625839, 0.10500594228506088, 0.10513802617788315, 0.09945846349000931, 0.10051512718200684, 0.10051512718200684, 0.10989301651716232, 0.10474177449941635, 0.10394927859306335, 0.10328886657953262, 0.10830801725387573, 0.10619468986988068, 0.11002509295940399, 0.11847840249538422, 0.11728965491056442, 0.11861048638820648, 0.10659094154834747, 0.10817593336105347, 0.1142517477273941, 0.11755382269620895, 0.11530841141939163, 0.11187426000833511, 0.10381719470024109, 0.11094967275857925, 0.11042134463787079, 0.11491216719150543, 0.11662924289703369, 0.11636507511138916, 0.12098798155784607, 0.11993131786584854, 0.12851670384407043, 0.11966715008020401, 0.12257297337055206, 0.1200634017586708, 0.12178047746419907, 0.12640337646007538, 0.11861048638820648, 0.12296922504901886, 0.13076211512088776, 0.12191256135702133, 0.13115836679935455, 0.1348566859960556, 0.13261127471923828, 0.13617752492427826, 0.1336679458618164, 0.13181878626346588, 0.13551710546016693, 0.13300752639770508, 0.1310262829065323, 0.13195087015628815, 0.1340641975402832, 0.14212125539779663, 0.13934750854969025, 0.1328754425048828, 0.13657376170158386, 0.1328754425048828, 0.14080041646957397, 0.13657376170158386, 0.13908334076404572, 0.14357416331768036, 0.13895125687122345, 0.14172500371932983, 0.14991414546966553, 0.14714039862155914, 0.14555540680885315, 0.15070664882659912, 0.14410249888896942, 0.14555540680885315, 0.14740456640720367, 0.148064985871315, 0.14238542318344116, 0.15097081661224365, 0.15995244681835175, 0.1516312211751938, 0.1476687341928482, 0.1460837423801422, 0.1508387327194214, 0.15057456493377686, 0.1538766324520111, 0.15612204372882843, 0.15638621151447296, 0.15598995983600616, 0.1612732857465744], "val_loss": [1.9707609585353307, 1.9705140931265694, 1.970269066946847, 1.9700251988002233, 1.9697816031319755, 1.969534260886056, 1.9692888941083635, 1.969045979636056, 1.9688032014029366, 1.968557562146868, 1.9683116504124232, 1.9680708476475306, 1.9678288868495397, 1.9675836563110352, 1.9673399244035994, 1.967095102582659, 1.9668517112731934, 1.966608660561698, 1.9663646561758858, 1.9661216054643904, 1.9658777373177665, 1.9656338691711426, 1.9653914315359933, 1.9651527404785156, 1.9649111883980888, 1.9646684101649694, 1.9644312858581543, 1.9641872814723425, 1.9639453206743513, 1.9637046541486467, 1.963461467197963, 1.9632211412702287, 1.9629788398742676, 1.9627393995012556, 1.9624995504106795, 1.9622574533735002, 1.9620178086417062, 1.9617772102355957, 1.9615379742213659, 1.9612980570111955, 1.9610602515084403, 1.9608220372881209, 1.9605817113603865, 1.960340976715088, 1.9601020131792342, 1.9598614828927177, 1.9596210207257951, 1.9593803542000907, 1.9591400282723563, 1.9589030402047294, 1.958660670689174, 1.9584221158708846, 1.9581830842154366, 1.9579451424734933, 1.9577063151768275, 1.9574634007045202, 1.9572267532348633, 1.9569861548287528, 1.956747327532087, 1.956507750919887, 1.9562672206333704, 1.956028665815081, 1.9557904515947615, 1.9555508749825614, 1.955310617174421, 1.955071040562221, 1.9548332350594657, 1.9545927728925432, 1.9543513570513045, 1.954111099243164, 1.9538698877607072, 1.953632082257952, 1.9533907345363073, 1.9531525884355818, 1.9529131480625697, 1.9526715959821428, 1.9524293627057756, 1.9521897860935755, 1.9519469397408622, 1.9517063413347517, 1.9514643124171667, 1.951225893838065, 1.9509859085083008, 1.9507436071123396, 1.9505019187927246, 1.9502579825265067, 1.9500179971967424, 1.9497759682791573, 1.9495340756007604, 1.9492898668561662, 1.949049949645996, 1.948812484741211, 1.9485722269330705, 1.9483283587864466, 1.9480866704668318, 1.9478458677019392, 1.9476032938276018, 1.9473586082458496, 1.947119849068778, 1.9468764577593123], "val_accuracy": [0.039000000804662704, 0.04066666588187218, 0.04266666620969772, 0.04533333331346512, 0.04633333161473274, 0.047333333641290665, 0.04899999871850014, 0.050999999046325684, 0.05233333259820938, 0.0533333346247673, 0.05366666615009308, 0.05533333495259285, 0.056333333253860474, 0.05833333358168602, 0.05999999865889549, 0.06133333221077919, 0.06333333253860474, 0.06499999761581421, 0.06700000166893005, 0.06966666877269745, 0.070333331823349, 0.07133333384990692, 0.07266666740179062, 0.07533333450555801, 0.07699999958276749, 0.07900000363588333, 0.0806666687130928, 0.08299999684095383, 0.08633333444595337, 0.08833333104848862, 0.09033333510160446, 0.09266666322946548, 0.09433333575725555, 0.09600000083446503, 0.09700000286102295, 0.09866666793823242, 0.10100000351667404, 0.10300000011920929, 0.10366666316986084, 0.10533333569765091, 0.1066666692495346, 0.11033333092927933, 0.11299999803304672, 0.11500000208616257, 0.11599999666213989, 0.11766666918992996, 0.11999999731779099, 0.1223333328962326, 0.12399999797344208, 0.12800000607967377, 0.1303333342075348, 0.13199999928474426, 0.13366666436195374, 0.13766667246818542, 0.13966666162014008, 0.14166666567325592, 0.14399999380111694, 0.1469999998807907, 0.1509999930858612, 0.15466666221618652, 0.15733332931995392, 0.16033333539962769, 0.16300000250339508, 0.16566666960716248, 0.1679999977350235, 0.1693333387374878, 0.1733333319425583, 0.17533333599567413, 0.17733334004878998, 0.179666668176651, 0.18333333730697632, 0.18533332645893097, 0.1889999955892563, 0.19166666269302368, 0.1940000057220459, 0.19566667079925537, 0.19833333790302277, 0.20200000703334808, 0.20399999618530273, 0.2056666612625122, 0.20800000429153442, 0.21066667139530182, 0.2123333364725113, 0.21466666460037231, 0.21699999272823334, 0.21766667068004608, 0.21933333575725555, 0.22033333778381348, 0.2213333398103714, 0.2240000069141388, 0.2266666740179062, 0.2293333262205124, 0.23333333432674408, 0.2356666624546051, 0.23633334040641785, 0.23766666650772095, 0.23899999260902405, 0.24199999868869781, 0.24433332681655884, 0.24699999392032623]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 4, 5, 8, 2, 9, 1, 1, 4, 2, 5, 2, 8, 3, 3, 8, 3, 8, 9, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 0, 1, 2, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1], [97, 12, 73, 88, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [2, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [32], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 29, 29, 20, 9, 5, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.sqrt(tf.math.add(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)))), grad))))), tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.multiply(tf.math.add(alpha, alpha), tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))))), tf.math.multiply(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, alpha)), grad))), tf.math.add(alpha, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [4424436602914.822, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.12032756209373474, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 1, 5, 8, 2, 6, 1, 1, 0, 1, 5, 2, 8, 2, 3, 5, 3, 8, 9, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 2, 2, 2, 0, 0, 1, 1, 2, 1, 2, 1, 2, 1], [97, 12, 73, 33, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [1, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [41], [0, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 11, 8, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.divide_no_nan(tf.math.subtract(grad, tf.math.add(alpha, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)), tf.math.add(alpha, alpha))))), tf.math.subtract(grad, tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.negative(tf.math.subtract(alpha, tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3026639964869937, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 1, 5, 8, 2, 6, 1, 5, 0, 2, 5, 2, 8, 2, 3, 9, 3, 6, 9, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 0, 2, 2, 1, 2, 2, 2, 0, 0, 1, 1, 2, 1, 2, 1, 2, 1], [96, 83, 73, 70, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [0, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [32], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 29, 29, 19, 10, 4, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(grad, tf.math.square(tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.multiply(alpha, grad))))), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07264561951160431, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 1, 2, 8, 2, 6, 1, 1, 0, 2, 5, 2, 8, 2, 3, 5, 3, 8, 9, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [1, 2, 1, 1, 0, 2, 1, 2, 2, 2, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1], [3, 94, 73, 70, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0, 1, 1], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 4, 1, 5, 3, 4], [32], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 31, 31, 20, 11, 4, 1, 1, 0, 1, 0, 10, 9, 5, 4, 0, 1, 0, 1, 0], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.negative(alpha))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.multiply(alpha, grad))), tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))))))))))), grad)))))), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), grad)), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, beta), tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, alpha))))))))), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 1, 5, 8, 2, 6, 1, 1, 0, 2, 5, 2, 8, 2, 3, 5, 3, 8, 9, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [1, 0, 2, 1, 2, 2, 1, 2, 2, 2, 0, 0, 1, 1, 2, 1, 2, 1, 2, 1], [97, 12, 73, 33, 77, 85, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [68], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 22, 22, 13, 9, 1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.divide_no_nan(tf.math.subtract(alpha, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.add(alpha, alpha))))), tf.math.subtract(grad, tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))))), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07211729139089584, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 1, 5, 8, 2, 6, 2, 3, 1, 2, 5, 2, 8, 2, 3, 5, 3, 8, 9, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [2, 2, 2, 0, 2, 2, 1, 2, 2, 2, 0, 0, 1, 1, 2, 1, 2, 1, 2, 1], [97, 12, 73, 33, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 4, 1, 5, 3, 4], [32], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 22, 22, 12, 10, 1, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.divide_no_nan(tf.math.add(grad, tf.math.add(alpha, grad)), tf.math.add(alpha, grad)), tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32))))), tf.math.multiply(grad, tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10236428678035736, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 8, 5, 6, 2, 3, 1, 1, 0, 2, 5, 2, 8, 3, 3, 1, 4, 8, 9, 9, 5, 5, 2, 5, 8, 4, 5, 4, 1, 4], [2, 2, 2, 1, 2, 2, 1, 2, 0, 1, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1], [97, 15, 73, 33, 77, 85, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [1, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [32], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 33, 33, 22, 11, 3, 15, 15, 8, 7, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), tf.math.add(alpha, grad))), tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))), grad))), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), grad)), tf.math.subtract(tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.square(alpha)))))), tf.math.add(alpha, tf.math.square(alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.square(tf.math.add(tf.math.add(beta, tf.math.subtract(grad, beta)), tf.math.pow(grad, tf.math.negative(grad)))), tf.math.pow(tf.math.pow(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 4, 5, 8, 2, 3, 1, 1, 0, 2, 5, 2, 8, 3, 3, 8, 2, 8, 9, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [1, 0, 1, 1, 0, 2, 1, 2, 2, 2, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1], [97, 12, 73, 33, 77, 85, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [9, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [32], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 30, 30, 18, 12, 3, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.pow(tf.math.square(alpha), tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.subtract(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha)), tf.math.add(alpha, alpha)), tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)))))), tf.math.add(alpha, grad)))), tf.math.multiply(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))))))))), tf.math.add(alpha, tf.math.sqrt(grad)))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [29816.922916700558, 548344.0998381984, 2561861.6971338, 7147916.495707304, 15257626.821820103, 28069527.397701755], "accuracy": [0.09972262382507324, 0.09681680053472519, 0.09800554811954498, 0.10051512718200684, 0.09800554811954498, 0.09708096832036972], "val_loss": [110713.52901785714, 875256.25, 2942919.8571428573, 6962994.857142857, 13584806.285714285, 23457649.714285713], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [1, 4, 5, 6, 2, 8, 1, 1, 0, 2, 5, 2, 8, 3, 3, 8, 3, 8, 9, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 0, 1, 1, 0, 2, 1, 2, 2, 2, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1], [84, 12, 73, 33, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [0, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [4, 0, 1, 5, 3, 4], [95], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 22, 22, 13, 9, 3, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.subtract(tf.math.subtract(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)))), tf.math.negative(tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))))))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3021213038722523, 2.3025201142597918, 2.301982344007763, 2.303269905736024, 2.304023993596299, 2.3042796142443596], "accuracy": [0.09298639744520187, 0.09377889335155487, 0.09140139818191528, 0.08770307898521423, 0.09166556596755981, 0.08981640636920929], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [8, 4, 5, 8, 2, 9, 1, 1, 0, 2, 5, 2, 8, 3, 3, 8, 3, 8, 9, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [1, 0, 1, 1, 0, 2, 1, 2, 2, 2, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1], [97, 12, 73, 33, 77, 85, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 0, 0, 1, 0, 1, 0, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [3, 0, 1, 5, 3, 4], [32], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 6, 6, 4, 2, 1, 1, 1, 0, 1, 0, 11, 9, 6, 3, 1, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.pow(tf.math.add(alpha, alpha), tf.math.square(tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, sigma), tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.add(sigma, tf.math.add(tf.math.add(sigma, alpha), tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.sqrt(sigma)))))))))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3021213038722523, 2.3025201142597918, 2.301982344007763, 2.303269905736024, 2.304023993596299, 2.3042796142443596], "accuracy": [0.09298639744520187, 0.09377889335155487, 0.09140139818191528, 0.08770307898521423, 0.09166556596755981, 0.08981640636920929], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [1, 1, 5, 8, 2, 9, 1, 1, 0, 2, 2, 2, 3, 3, 3, 8, 3, 8, 9, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 0, 1, 2, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1], [3, 16, 73, 42, 77, 85, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4, 0, 7, 6], [2, 0, 1, 5, 3, 4], [32], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 11, 11, 7, 4, 2, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.subtract(tf.math.square(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))))), tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3021213038722523, 2.3025201142597918, 2.301982344007763, 2.303269905736024, 2.304023993596299, 2.3042796142443596], "accuracy": [0.09298639744520187, 0.09377889335155487, 0.09140139818191528, 0.08770307898521423, 0.09166556596755981, 0.08981640636920929], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}]