[{"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 2, 2, 6, 5, 3, 3, 3, 3, 2, 9, 1, 3, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 1, 1, 1, 3, 3, 0, 2, 2, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [21, 2, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.8105714321136475, "mapping_values": [1, 4, 4, 2, 2, 1, 28, 28, 17, 11, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(grad, tf.math.add(beta, tf.math.add(grad, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, alpha))), tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(alpha, alpha), grad), tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), beta))))), tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))))), tf.math.square(tf.math.add(beta, beta)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2599012379349657, 1.8428750554284934, 1.3166972668006232, 0.9607049615123977, 0.8558547824459809, 0.7963242736144261, 0.7447284373388692, 0.7024768739643508, 0.6795761423765345, 0.6384225521246991, 0.6206772413629787, 0.5899914517268497, 0.5726588222769824, 0.5475434438663624, 0.5320752157338023, 0.5156824694034399, 0.5020377254245177, 0.485631273800844, 0.46351396277785034, 0.44814382884575155, 0.43937839340729057, 0.4265409862525931, 0.42356392193259407, 0.4101893680049381, 0.3942160822097825, 0.38629747706161216, 0.3777371889304775, 0.36876034719706874, 0.3578037626007056, 0.35734467229445094, 0.34452237266953184, 0.3326825448794687, 0.3341653001047066, 0.32278473815582903, 0.32471411263764793, 0.3075496315200331, 0.3065428699736645, 0.29647058265446324, 0.29175317579918, 0.28945010492294976, 0.2838098592746212, 0.27325878972233153, 0.26980725521613674, 0.27007764854593014, 0.2607967873149308, 0.25747350254283685, 0.24403890938239878], "accuracy": [0.18663319945335388, 0.42266544699668884, 0.548540472984314, 0.6567164063453674, 0.6844538450241089, 0.7055870890617371, 0.7128516435623169, 0.7360982894897461, 0.7412495017051697, 0.7577598690986633, 0.7606657147407532, 0.7773081660270691, 0.7803460359573364, 0.7932901978492737, 0.7993659973144531, 0.8031964302062988, 0.813498854637146, 0.8185180425643921, 0.8251221776008606, 0.8301413059234619, 0.8379341959953308, 0.839519202709198, 0.8376700282096863, 0.8424250483512878, 0.8524633646011353, 0.8535200357437134, 0.8570862412452698, 0.8618412613868713, 0.8614450097084045, 0.8639545440673828, 0.8693699836730957, 0.8725399374961853, 0.8747853636741638, 0.8758420348167419, 0.874389111995697, 0.8878615498542786, 0.8837670087814331, 0.8898428082466125, 0.8849557638168335, 0.8877294659614563, 0.8894465565681458, 0.8934090733528137, 0.8922203183174133, 0.896446943283081, 0.8971073627471924, 0.9002773761749268, 0.902390718460083], "val_loss": [1.8137078966413225, 0.9824963978358677, 0.7267603022711617, 0.6939402137483869, 0.6099627188273838, 0.5736957788467407, 0.5514295952660697, 0.5187922205243792, 0.494173492704119, 0.4849480390548706, 0.4625558853149414, 0.4430502567972456, 0.43468897683279856, 0.4234379700251988, 0.41035012687955585, 0.40097880363464355, 0.3898195283753531, 0.38337379693984985, 0.378104567527771, 0.3698902300425938, 0.3608410784176418, 0.3572511843272618, 0.35431456565856934, 0.35096750940595356, 0.3468155690601894, 0.3401218737874712, 0.3367687974657331, 0.33870639971324373, 0.33487726960863384, 0.3413929598672049, 0.325214147567749, 0.3251249705042158, 0.32149021114621845, 0.32058634076799664, 0.31821695395878385, 0.31753278630120413, 0.31867519446781706, 0.31249713046210154, 0.3170067071914673, 0.30679150990077425, 0.3132498094013759, 0.31234231165477205, 0.3137150066239493, 0.3074910044670105, 0.3099508796419416, 0.3179726941244943, 0.3178132602146694], "val_accuracy": [0.44566667079925537, 0.656000018119812, 0.7046666741371155, 0.7106666564941406, 0.7279999852180481, 0.7396666407585144, 0.7523333430290222, 0.7596666812896729, 0.7749999761581421, 0.7746666669845581, 0.7950000166893005, 0.7979999780654907, 0.8096666932106018, 0.8153333067893982, 0.8153333067893982, 0.8220000267028809, 0.8316666483879089, 0.8349999785423279, 0.8339999914169312, 0.843999981880188, 0.8429999947547913, 0.8503333330154419, 0.8503333330154419, 0.8506666421890259, 0.8519999980926514, 0.8579999804496765, 0.8583333492279053, 0.8586666584014893, 0.8576666712760925, 0.862666666507721, 0.8653333187103271, 0.8686666488647461, 0.8653333187103271, 0.8703333139419556, 0.8730000257492065, 0.8766666650772095, 0.8733333349227905, 0.8696666955947876, 0.871666669845581, 0.8769999742507935, 0.874666690826416, 0.8790000081062317, 0.8733333349227905, 0.8776666522026062, 0.878333330154419, 0.8759999871253967, 0.8773333430290222]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1], [6, 2, 3, 6, 2, 6, 5, 3, 3, 3, 3, 2, 9, 1, 3, 9, 5, 1, 7, 8, 2, 6, 2, 4, 2, 2, 6, 6, 0, 2, 3, 2, 2, 0, 8, 8, 2, 7, 0, 5, 7, 5, 3, 6], [3, 3, 3, 1, 1, 1, 3, 3, 0, 2, 3, 3, 3, 0, 3, 2, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 2, 3, 3], [21, 2, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.803428590297699, "mapping_values": [1, 4, 4, 2, 2, 1, 75, 75, 44, 31, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 61, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(grad, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(grad, tf.math.multiply(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.square(tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(alpha)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), grad)), tf.math.add(beta, grad))))))))))), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(beta, grad)))), tf.math.add(beta, grad)))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))))), tf.math.sqrt(tf.math.add(beta, tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.add(alpha, tf.math.negative(tf.math.add(beta, alpha))))))), tf.math.add(beta, grad))), tf.math.square(tf.math.add(beta, grad)))), tf.math.add(tf.math.add(beta, beta), grad)), tf.math.add(beta, grad))), tf.math.square(tf.math.add(beta, beta)))))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, beta))))), tf.math.add(beta, grad))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.259901255916343, 1.8428756743059371, 1.3167145568555167, 0.9606366162491575, 0.8557084860141645, 0.7968129126969865, 0.7449947943257271, 0.7022417653915416, 0.6798830517704114, 0.6383784953645034, 0.6209282950324594, 0.5889089208520902, 0.5735497416018369, 0.5471026975921809, 0.5340823455493621, 0.5153425487277216, 0.5026013125376285, 0.4852351194335926, 0.46444016482851774, 0.4477476084693674, 0.440442034805676, 0.42522224820899357, 0.42384979083175595, 0.40987020417636555, 0.39476304833427034, 0.38652721562673387, 0.3768522714808034, 0.36628282278787977, 0.3541008702453101, 0.3527703868903504, 0.341791160267893, 0.3292827221538255, 0.3284913387280949, 0.31535372164397113, 0.3212935954918872, 0.3070160101008311, 0.3010977801826605, 0.2922883128186164, 0.2895213470341208, 0.28624113784442884, 0.28177381070802365, 0.2726794177507129, 0.26854501545563064, 0.26266183453685715, 0.25650072794320516, 0.25472829127670704, 0.23869466779254384, 0.23608574814422334], "accuracy": [0.18663319945335388, 0.42266544699668884, 0.548540472984314, 0.656980574131012, 0.6847180128097534, 0.7045304179191589, 0.7108704447746277, 0.7339849472045898, 0.739400327205658, 0.7580240368843079, 0.7621186375617981, 0.7788931727409363, 0.780610203742981, 0.7948752045631409, 0.7955356240272522, 0.8037247657775879, 0.8131026029586792, 0.8169330358505249, 0.8259146809577942, 0.830669641494751, 0.837537944316864, 0.8388587832450867, 0.8378021121025085, 0.8424250483512878, 0.854708731174469, 0.8545766472816467, 0.8597279191017151, 0.8634262084960938, 0.8619733452796936, 0.8647470474243164, 0.8701624870300293, 0.8765024542808533, 0.8767666220664978, 0.8808611631393433, 0.8795403242111206, 0.8878615498542786, 0.8837670087814331, 0.8905032277107239, 0.8878615498542786, 0.889050304889679, 0.8905032277107239, 0.8920882344245911, 0.8923524022102356, 0.8982961177825928, 0.9006736278533936, 0.9001452922821045, 0.9068815112113953, 0.9062210917472839], "val_loss": [1.8137080328805106, 0.9825073991503034, 0.7267008679253715, 0.6939950840813773, 0.6102668046951294, 0.5742218835013253, 0.5523884466716221, 0.5187328713280814, 0.49460506439208984, 0.484485353742327, 0.4617443255015782, 0.4437003476279123, 0.436810450894492, 0.4264198797089713, 0.41261844975607737, 0.4034089275768825, 0.3913801312446594, 0.3806948661804199, 0.37900835275650024, 0.3712976319449289, 0.3628676278250558, 0.3572320342063904, 0.3521240438733782, 0.3489084924970354, 0.34699054275240215, 0.3415618283408029, 0.33624841485704693, 0.3402669770377023, 0.33434817620686125, 0.33946142877851215, 0.3216169391359602, 0.3181306038584028, 0.3224357111113412, 0.32057649748665945, 0.3191647785050528, 0.3166516934122358, 0.31537176030022757, 0.31097029788153513, 0.3169818179947989, 0.3053456119128636, 0.31179338693618774, 0.3104706747191293, 0.31444174902779715, 0.3096447672162737, 0.3161226340702602, 0.32022455760410856, 0.31806847878864836, 0.31392373357500347], "val_accuracy": [0.44566667079925537, 0.6556666493415833, 0.7046666741371155, 0.7103333473205566, 0.7276666760444641, 0.7383333444595337, 0.7516666650772095, 0.7586666941642761, 0.7720000147819519, 0.7749999761581421, 0.7946666479110718, 0.8023333549499512, 0.8056666851043701, 0.8133333325386047, 0.8140000104904175, 0.8233333230018616, 0.8330000042915344, 0.8373333215713501, 0.8326666951179504, 0.8410000205039978, 0.843999981880188, 0.8523333072662354, 0.8529999852180481, 0.8529999852180481, 0.8536666631698608, 0.859000027179718, 0.859666645526886, 0.8586666584014893, 0.859333336353302, 0.8633333444595337, 0.8676666617393494, 0.8690000176429749, 0.8683333396911621, 0.8733333349227905, 0.8696666955947876, 0.871999979019165, 0.8733333349227905, 0.874666690826416, 0.871999979019165, 0.875, 0.871999979019165, 0.8790000081062317, 0.8806666731834412, 0.8786666393280029, 0.875, 0.871666669845581, 0.8743333220481873, 0.8793333172798157]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 1, 2, 6, 5, 3, 3, 3, 3, 2, 9, 2, 3, 8, 5, 3, 7, 8, 2, 6, 2, 2, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 1, 1, 1, 3, 3, 0, 2, 3, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [35, 2, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7914285659790039, "mapping_values": [1, 4, 4, 2, 2, 1, 33, 33, 19, 14, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.multiply(grad, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), alpha)), alpha)), tf.math.add(tf.math.multiply(tf.math.sqrt(tf.math.add(beta, alpha)), tf.math.square(tf.math.add(beta, grad))), grad))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), beta)), grad))))), alpha)), grad), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.256979119839087, 1.8359106035122956, 1.3136900915933905, 0.971689113741144, 0.8514830191468267, 0.8023680732423729, 0.7323514102173204, 0.7063299448829301, 0.6667623275841987, 0.6390638624152739, 0.6038500841472285, 0.5846796609296964, 0.5618444133853522, 0.5463954710831275, 0.5149224656936027, 0.49902272933761693, 0.4822268004288936, 0.4653767621819495, 0.45935791506900797, 0.4377644571094717, 0.4339667533634676, 0.41753080385299074, 0.4011109769226239, 0.39523376467961363, 0.384990688729768, 0.373550862684037, 0.3617594273468885, 0.34674572854891683, 0.3525027572447362, 0.3322777604075817, 0.3370405312825849, 0.33653566301884574, 0.3189344316063587, 0.3190263079897823, 0.31035925439477613, 0.29752412507672904, 0.298144879070775], "accuracy": [0.19059570133686066, 0.4237220883369446, 0.5588429570198059, 0.6501122713088989, 0.6823405027389526, 0.7025492191314697, 0.7149649858474731, 0.7298903465270996, 0.7470611333847046, 0.7584202885627747, 0.770439863204956, 0.7783648371696472, 0.7852331399917603, 0.7985734939575195, 0.8098005652427673, 0.8124422430992126, 0.8251221776008606, 0.8284242749214172, 0.8338396549224854, 0.8418967127799988, 0.8429533839225769, 0.8494254350662231, 0.8519350290298462, 0.8593316674232483, 0.8623695969581604, 0.8672566413879395, 0.8698983192443848, 0.8681812286376953, 0.8696341514587402, 0.874389111995697, 0.8750495314598083, 0.8776912093162537, 0.8840311765670776, 0.8861445188522339, 0.8836349248886108, 0.8881257176399231, 0.8908994793891907], "val_loss": [1.8093599591936385, 0.9912984030587333, 0.7535057578768048, 0.6968886511666434, 0.6002847978046962, 0.5618443489074707, 0.5512451955250331, 0.5138934680393764, 0.4959958110536848, 0.47149334635053364, 0.4540161405290876, 0.43055892842156546, 0.4137935127530779, 0.40155348607472013, 0.38999803577150616, 0.3832811287471226, 0.3748010056359427, 0.3663083485194615, 0.35790114743368967, 0.34892432178769794, 0.3438164506639753, 0.33742531708308626, 0.33579894474574495, 0.3365070308957781, 0.33491709402629305, 0.3287240522248404, 0.32462525367736816, 0.3213222452572414, 0.31884063141686575, 0.3187154531478882, 0.3145360435758318, 0.31605478695460726, 0.3164487225668771, 0.31150167328970774, 0.3134280613490513, 0.315215996333531, 0.3129219838551113], "val_accuracy": [0.4193333387374878, 0.656000018119812, 0.6996666789054871, 0.7009999752044678, 0.7246666550636292, 0.7300000190734863, 0.7536666393280029, 0.765999972820282, 0.7726666927337646, 0.7820000052452087, 0.7953333258628845, 0.8059999942779541, 0.8180000185966492, 0.8226666450500488, 0.8316666483879089, 0.8366666436195374, 0.8386666774749756, 0.8510000109672546, 0.846666693687439, 0.856333315372467, 0.8533333539962769, 0.8603333234786987, 0.859333336353302, 0.8606666922569275, 0.862333357334137, 0.862333357334137, 0.8633333444595337, 0.8679999709129333, 0.8726666569709778, 0.8733333349227905, 0.8713333606719971, 0.878000020980835, 0.8740000128746033, 0.8730000257492065, 0.871666669845581, 0.875333309173584, 0.8773333430290222]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 6, 2, 6, 5, 3, 3, 3, 3, 2, 9, 1, 3, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 1, 1, 1, 3, 3, 0, 2, 3, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [21, 2, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7900000214576721, "mapping_values": [1, 4, 4, 2, 2, 1, 58, 58, 36, 22, 6, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 55, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(grad, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(grad, tf.math.multiply(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.square(tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(tf.math.add(beta, alpha), alpha)))))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad)))))), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), beta))))), tf.math.divide_no_nan(grad, tf.math.add(beta, alpha)))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, grad), tf.math.multiply(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, alpha)))))), tf.math.add(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha)))))), beta)), tf.math.add(beta, tf.math.sqrt(grad)))))), tf.math.sqrt(tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.256979196330796, 1.8359119819376084, 1.3137285246935346, 0.9717588535609766, 0.85145365877741, 0.801350818129421, 0.7309400375650512, 0.7061086871274127, 0.6661217509794859, 0.6392853808850187, 0.6021381605885457, 0.5845212377986699, 0.5609327415354957, 0.5453355330297298, 0.5144680191528654, 0.4973827067336008, 0.48199266577519606, 0.4623225689044545, 0.4600242602157555, 0.43531065089685916, 0.43362624787572607, 0.4155694432600913, 0.398055115868434, 0.3928301002032658, 0.3839752401154291, 0.37320678051216194, 0.35932828889641355, 0.3470225007723603, 0.3544875947066491, 0.3301460008697739, 0.33620605039606005, 0.33811689286010926, 0.321354875416095, 0.3168482006407055, 0.3097633153707942, 0.29468959687235113, 0.2972600094362918, 0.2822380721876099], "accuracy": [0.19059570133686066, 0.4237220883369446, 0.5588429570198059, 0.6495839357376099, 0.6823405027389526, 0.7018887996673584, 0.7157574892044067, 0.7313432693481445, 0.7445515990257263, 0.7582882046699524, 0.7720248103141785, 0.7784969210624695, 0.7860256433486938, 0.7989697456359863, 0.8095363974571228, 0.8124422430992126, 0.8228767514228821, 0.8302733898162842, 0.8317263126373291, 0.8430854678153992, 0.8454629778862, 0.8524633646011353, 0.8527275323867798, 0.86118084192276, 0.8634262084960938, 0.863029956817627, 0.870030403137207, 0.8710870146751404, 0.8685774803161621, 0.876370370388031, 0.8757099509239197, 0.8798044919967651, 0.8821820020675659, 0.8845595121383667, 0.8869370222091675, 0.8911636471748352, 0.889578640460968, 0.8951261639595032], "val_loss": [1.8093595504760742, 0.9913412843431745, 0.7536656515938895, 0.696985125541687, 0.5998298270361764, 0.5610147203717913, 0.5517084087644305, 0.5138986451285226, 0.4983117750712803, 0.4717156376157488, 0.455313972064427, 0.4305583579199655, 0.4136590702193124, 0.4022075193268912, 0.38790020772389006, 0.3797469309398106, 0.3709859081677028, 0.364918623651777, 0.35697388648986816, 0.3497348002025059, 0.3430646998541696, 0.33676464217049734, 0.3339612228529794, 0.33543301480157034, 0.3332697408539908, 0.3269656300544739, 0.32445608718054636, 0.32211190462112427, 0.31690087488719393, 0.31605606419699533, 0.3141275133405413, 0.31689298152923584, 0.31786993571690153, 0.31075121675218853, 0.31312787532806396, 0.3191622495651245, 0.3155840039253235, 0.31002977916172575], "val_accuracy": [0.4193333387374878, 0.656000018119812, 0.6993333101272583, 0.7003333568572998, 0.7253333330154419, 0.7269999980926514, 0.7546666860580444, 0.7606666684150696, 0.7703333497047424, 0.7860000133514404, 0.7956666946411133, 0.8033333420753479, 0.8203333616256714, 0.8203333616256714, 0.8299999833106995, 0.8393333554267883, 0.8426666855812073, 0.8536666631698608, 0.8479999899864197, 0.8569999933242798, 0.8553333282470703, 0.8606666922569275, 0.8616666793823242, 0.8603333234786987, 0.8633333444595337, 0.862333357334137, 0.8619999885559082, 0.8700000047683716, 0.8723333477973938, 0.8736666440963745, 0.8740000128746033, 0.8733333349227905, 0.8799999952316284, 0.8759999871253967, 0.8769999742507935, 0.875, 0.8726666569709778, 0.8743333220481873]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 8, 2, 2, 6, 1, 3, 3, 3, 3, 2, 9, 1, 3, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [1, 0, 3, 2, 2, 1, 3, 3, 0, 1, 3, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [21, 2, 47, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7891428470611572, "mapping_values": [1, 4, 4, 2, 2, 1, 9, 9, 5, 4, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(grad, beta)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.256979164839767, 1.83590940927801, 1.3137273170440709, 0.9718155119050967, 0.8515816820359045, 0.8015914076291937, 0.7310494521290571, 0.7057482299630227, 0.666540032207155, 0.6394602259656206, 0.6024464680817558, 0.5848096339001301, 0.5612510649866007, 0.544375842706544, 0.5131979075090335, 0.49762539550408147, 0.4825066430158367, 0.4632793227797407, 0.4594116058678376, 0.43635231554468845, 0.4339527709294209, 0.4179796490057065, 0.3975327500672215, 0.39335871029366215, 0.38521635729985354, 0.37247693595349624, 0.36061639863549444, 0.34804454919385275, 0.3530550183101715, 0.3309835845634308, 0.33549833976361165, 0.3362355246409732, 0.3191653156773352, 0.31627074943289796, 0.3089037932354178, 0.292198731965865, 0.2953038034839338, 0.27968892813311463], "accuracy": [0.19059570133686066, 0.4237220883369446, 0.5588429570198059, 0.6493197679519653, 0.6828688383102417, 0.7017567157745361, 0.7153612375259399, 0.7313432693481445, 0.7461365461349487, 0.7594769597053528, 0.772288978099823, 0.7798177003860474, 0.7864218950271606, 0.7987055778503418, 0.8083476424217224, 0.8141592741012573, 0.8244617581367493, 0.830669641494751, 0.833179235458374, 0.843481719493866, 0.8448025584220886, 0.8499537706375122, 0.8537842035293579, 0.8588033318519592, 0.8603883385658264, 0.8650112152099609, 0.8717474341392517, 0.8687095642089844, 0.8691058158874512, 0.8754457831382751, 0.8750495314598083, 0.878351628780365, 0.883238673210144, 0.8853520154953003, 0.8894465565681458, 0.893541157245636, 0.8891823887825012, 0.8990886211395264], "val_loss": [1.8093595504760742, 0.9913279669625419, 0.7537072726658413, 0.6971248047692435, 0.6001054729734149, 0.561382566179548, 0.5513803618294852, 0.514064976147243, 0.4983482190540859, 0.4720953702926636, 0.45535315786089214, 0.4299662283488682, 0.4137707097189767, 0.4017146740640913, 0.3883892723492214, 0.38066783973148893, 0.3706457529749189, 0.3636904103415353, 0.3558592370578221, 0.3493579115186419, 0.3436539258275713, 0.33575802189963205, 0.33366481746946064, 0.3362281918525696, 0.33429334844861713, 0.32750071798052105, 0.32519142968314035, 0.32110828161239624, 0.3147977760859898, 0.3185198562485831, 0.3132117816380092, 0.3152348058564322, 0.3165382998330252, 0.3094104698726109, 0.31042106662477764, 0.3171553186007908, 0.31224299328667776, 0.30980185100010466], "val_accuracy": [0.4193333387374878, 0.656000018119812, 0.6993333101272583, 0.7003333568572998, 0.7256666421890259, 0.7289999723434448, 0.753000020980835, 0.7613333463668823, 0.7699999809265137, 0.7866666913032532, 0.7953333258628845, 0.8056666851043701, 0.8209999799728394, 0.8203333616256714, 0.8299999833106995, 0.8383333086967468, 0.8443333506584167, 0.8506666421890259, 0.8493333458900452, 0.8569999933242798, 0.8506666421890259, 0.859666645526886, 0.8613333106040955, 0.8586666584014893, 0.8640000224113464, 0.8600000143051147, 0.8606666922569275, 0.8676666617393494, 0.8736666440963745, 0.8740000128746033, 0.8713333606719971, 0.8736666440963745, 0.8763333559036255, 0.8740000128746033, 0.875, 0.875333309173584, 0.8759999871253967, 0.875]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [15, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 2, 6, 5, 6, 5, 5, 4, 0, 2, 2, 9, 9, 2, 2, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [0, 0, 3, 1, 1, 1, 1, 3, 0, 2, 3, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [68, 86, 89, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7440000176429749, "mapping_values": [1, 4, 4, 2, 2, 1, 9, 9, 5, 4, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(beta, grad))), alpha)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.300818548698813, 2.2843809017903927, 2.255723265608965, 2.212907018914687, 2.1495927924162612, 2.0415900755300185, 1.87700120295201, 1.6675931072002075, 1.4992571670019301, 1.3934710743625356, 1.3465958383372747, 1.352798254026036, 1.2017437182145427, 1.0674248313576302, 0.9512569446132924, 0.9224446580992902, 0.9059580451209925, 0.9099120969675346, 0.8876421867958731, 0.848310279587965, 0.8156996815511028, 0.7979035997875709, 0.810144089216475, 0.8123412306172391, 0.8008238331217571, 0.7930974970483006, 0.7750307253134202, 0.7475054372240287, 0.7389941562152637, 0.7392716275749741, 0.7388588268806308, 0.7194543687926622, 0.7203107517172773, 0.7085692953471384, 0.7041029427124288, 0.6866685603477731, 0.6850560887724952, 0.6766659365023415, 0.6753759968628769, 0.6775468602518695, 0.6622798590927139, 0.6485312164908371, 0.6493780852671014, 0.6328412279114668, 0.6248647637292299, 0.6153906886729708, 0.6247832037438616, 0.6102040945940391, 0.6097872327930026, 0.6002608065308518, 0.5992256004292935, 0.5748370188676984, 0.5764518690902827, 0.5740724105120745, 0.5704736367759609, 0.562280242248785, 0.5631254030776109, 0.5465673731145227, 0.5512786006584238, 0.5460116597702632, 0.5343886372034088, 0.534130180445739, 0.5294126296055992, 0.5225181864347471, 0.5261756181441373, 0.5113013743992101, 0.5171274668772647, 0.5101920747879773, 0.5066474348940413, 0.5067028529954829, 0.49238852519463744, 0.48560312406466605, 0.49325496569254207, 0.4935944625974221, 0.4829391379319225, 0.48903745187272046, 0.47819069839975603, 0.47389809247399084, 0.4697662420071914, 0.475949199404998, 0.46683480305096037, 0.45868888303289135, 0.45862828497605757, 0.4687179954981587, 0.4452406722186752, 0.44930862847052827, 0.4541247184675572], "accuracy": [0.09232597798109055, 0.13657376170158386, 0.21714437007904053, 0.29824328422546387, 0.34803855419158936, 0.3903051018714905, 0.4245145916938782, 0.44868576526641846, 0.4784044325351715, 0.5128780603408813, 0.5455026030540466, 0.5531634092330933, 0.5987319946289062, 0.633469820022583, 0.6473385095596313, 0.6481310129165649, 0.6675472259521484, 0.6716417670249939, 0.6781138777732849, 0.6917183995246887, 0.6984546184539795, 0.6936996579170227, 0.6909258961677551, 0.6851142644882202, 0.6976621150970459, 0.7091533541679382, 0.7140403985977173, 0.7172104120254517, 0.7187954187393188, 0.7181349992752075, 0.7160216569900513, 0.7297582626342773, 0.7316074371337891, 0.733060359954834, 0.7357020378112793, 0.7384757399559021, 0.7433628439903259, 0.7429665923118591, 0.7416457533836365, 0.7428345084190369, 0.744419515132904, 0.7557786107063293, 0.7544577717781067, 0.7633073329925537, 0.7629110813140869, 0.7692511081695557, 0.7662131786346436, 0.7696473598480225, 0.767401933670044, 0.7729493975639343, 0.7734777331352234, 0.7828556299209595, 0.7827235460281372, 0.7872143983840942, 0.7862898111343384, 0.7860256433486938, 0.7913089394569397, 0.798309326171875, 0.7909126877784729, 0.7954035401344299, 0.7961959838867188, 0.7989697456359863, 0.8042530417442322, 0.8121780753135681, 0.7959318161010742, 0.806630551815033, 0.8031964302062988, 0.8096684813499451, 0.8124422430992126, 0.8088759779930115, 0.8164047002792358, 0.8185180425643921, 0.8231409192085266, 0.8148196935653687, 0.8202351331710815, 0.8181217908859253, 0.819442629814148, 0.8173292875289917, 0.8219521641731262, 0.8190463781356812, 0.8260467648506165, 0.828292191028595, 0.8285563588142395, 0.8216879963874817, 0.8339717388153076, 0.8302733898162842, 0.830669641494751], "val_loss": [1.962704862867083, 1.9408653123038155, 1.9070966584341866, 1.85840790612357, 1.7784600939069475, 1.6447199072156633, 1.4386693750108992, 1.1915907178606306, 0.984419448035104, 0.8471763134002686, 0.7881893600736346, 0.7412467173167637, 0.7313102313450405, 0.6707761628287179, 0.662093026297433, 0.6702619620731899, 0.6809344632284982, 0.6700835738863263, 0.6341104507446289, 0.6082260949271066, 0.5978869710649762, 0.5892177649906704, 0.5942955698285785, 0.5946083920342582, 0.5831783669335502, 0.5812438215528216, 0.5749750988824027, 0.5589063167572021, 0.5494024583271572, 0.550183721951076, 0.5458365338189262, 0.5373991046633039, 0.5287986653191703, 0.5229662486485073, 0.5156161614826748, 0.5041217293058123, 0.49477778162275043, 0.4907529183796474, 0.48585947922297884, 0.4778268677847726, 0.4742886168616159, 0.47425871235983713, 0.47185351167406353, 0.4669173615319388, 0.46197754996163504, 0.4586409500667027, 0.456244911466326, 0.453701308795384, 0.45014125960213797, 0.4453639132635934, 0.44036565508161274, 0.4374857715197972, 0.4368992533002581, 0.4369343178612845, 0.4347677060535976, 0.42992526292800903, 0.42402106523513794, 0.4200879761150905, 0.41845113039016724, 0.4178325193268912, 0.4152877926826477, 0.41204045500074116, 0.40992872204099384, 0.4091122491019113, 0.40851352896009174, 0.40745116983141216, 0.4056477802140372, 0.4035496115684509, 0.4011486598423549, 0.3978005903107779, 0.39495110511779785, 0.3932097383907863, 0.39215431043079924, 0.39142959458487375, 0.39031865767070223, 0.38879445620945524, 0.38729732377188547, 0.38599328483854023, 0.384344790663038, 0.38244047335215975, 0.3813804728644235, 0.3803894008908953, 0.3785524538585118, 0.3762939657483782, 0.37438019684382845, 0.3722375546182905, 0.3698406900678362], "val_accuracy": [0.0963333323597908, 0.3009999990463257, 0.38366666436195374, 0.42100000381469727, 0.46000000834465027, 0.49666666984558105, 0.5483333468437195, 0.5893333554267883, 0.6470000147819519, 0.6759999990463257, 0.6786666512489319, 0.6963333487510681, 0.7023333311080933, 0.7153333425521851, 0.7136666774749756, 0.7083333134651184, 0.7213333249092102, 0.7176666855812073, 0.7246666550636292, 0.7289999723434448, 0.7306666374206543, 0.7379999756813049, 0.7319999933242798, 0.734000027179718, 0.7409999966621399, 0.7473333477973938, 0.7456666827201843, 0.7459999918937683, 0.7513333559036255, 0.75, 0.7523333430290222, 0.7643333077430725, 0.7683333158493042, 0.7696666717529297, 0.7739999890327454, 0.7773333191871643, 0.7823333144187927, 0.7850000262260437, 0.7846666574478149, 0.7886666655540466, 0.7860000133514404, 0.7883333563804626, 0.7889999747276306, 0.7896666526794434, 0.7906666398048401, 0.7933333516120911, 0.796999990940094, 0.8026666641235352, 0.8080000281333923, 0.8090000152587891, 0.8090000152587891, 0.8103333115577698, 0.8103333115577698, 0.8103333115577698, 0.8130000233650208, 0.815666675567627, 0.815666675567627, 0.815666675567627, 0.8190000057220459, 0.8230000138282776, 0.8220000267028809, 0.8236666917800903, 0.8263333439826965, 0.828000009059906, 0.8266666531562805, 0.8286666870117188, 0.8293333053588867, 0.8253333568572998, 0.828000009059906, 0.8306666612625122, 0.8299999833106995, 0.8363333344459534, 0.8356666564941406, 0.8363333344459534, 0.8376666903495789, 0.8366666436195374, 0.8356666564941406, 0.8370000123977661, 0.8389999866485596, 0.8389999866485596, 0.8426666855812073, 0.8443333506584167, 0.8426666855812073, 0.843666672706604, 0.843666672706604, 0.843666672706604, 0.8443333506584167]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [0, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 6, 2, 6, 5, 3, 3, 3, 0, 2, 0, 1, 3, 6, 5, 3, 1, 8, 2, 6, 2, 4, 2, 3, 9, 6, 0, 2, 3, 2, 3, 9, 4, 6, 2, 9], [0, 2, 3, 1, 3, 3, 3, 0, 3, 3, 3, 3, 3, 1, 3, 2, 0, 1, 1, 2, 3, 3, 0, 3, 1, 0, 2], [21, 72, 78, 38, 37, 47, 96, 1], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 2, 64, 64, 38, 26, 8, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 64, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.subtract(tf.math.add(beta, tf.math.multiply(beta, tf.math.divide_no_nan(tf.math.square(tf.math.multiply(tf.math.subtract(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(beta, alpha))), grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(grad, grad)), tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32))), tf.math.pow(grad, tf.math.add(beta, grad))))))), tf.math.add(beta, grad))), tf.math.add(beta, grad))))), tf.math.add(beta, grad))))), alpha))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.negative(grad), tf.math.add(beta, beta)))), tf.math.add(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(tf.math.add(beta, alpha), tf.math.multiply(tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha))), tf.math.add(beta, beta))))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))))), alpha), tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302369492385586, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 6, 2, 6, 5, 3, 3, 0, 0, 2, 9, 1, 3, 1, 5, 3, 7, 8, 2, 6, 2, 4, 6, 0, 9, 6, 0, 0, 9, 8, 3, 9, 4, 8, 2, 9], [3, 3, 3, 1, 1, 1, 3, 3, 3, 2, 3, 1, 0, 0, 3, 2, 3, 1, 1, 3, 4, 2, 3], [21, 20, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 56, 56, 38, 18, 7, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 67, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(grad, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, grad), alpha))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, alpha))), grad)), tf.math.divide_no_nan(grad, tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta))))), grad)), tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.sqrt(alpha)))))))))))), tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))))))), tf.math.multiply(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(beta, beta))))))), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))))), alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07700435817241669, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 6, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 2, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 2, 2, 6, 5, 3, 3, 2, 5, 2, 9, 1, 2, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 5, 6, 0, 2, 9, 2, 2, 9, 8, 8, 2], [2, 0, 3, 2, 1, 1, 3, 3, 0, 1, 0, 3, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [21, 2, 53, 38, 37, 47, 96, 26], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 5, 3, 1, 55, 55, 35, 20, 8, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 64, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(grad, grad)), tf.math.sqrt(tf.math.add(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.subtract(grad, tf.math.add(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.multiply(tf.math.add(beta, beta), tf.math.add(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), grad)), grad)))))))))))), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(grad, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, grad)))))), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha)))))))), alpha), tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 6, 5, 6, 2, 8, 4, 3, 2, 2, 9, 9, 2, 2, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 2, 3, 1, 1, 1, 1, 3, 3, 2, 3, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [21, 2, 53, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 18, 18, 10, 8, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.add(grad, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.pow(alpha, alpha))))), tf.math.add(beta, tf.math.multiply(alpha, grad))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3584511141499287, 3880.1864527819603, 3.66020203323532e+26, 2.4789447585715436, 2.934331718358413, 4.062714220935548, 6.117606065465695], "accuracy": [0.040285300463438034, 0.04054946452379227, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.2128799302237376, 22540315501.714287, 2.046788079398019, 2.289874689919608, 2.9608182225908553, 4.397536277770996, 6.5869535718645364], "val_accuracy": [0.0033333334140479565, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 2, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 6, 2, 6, 5, 2, 3, 3, 3, 2, 9, 1, 3, 9, 4, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 2, 3, 1, 1, 2, 3, 3, 0, 1, 3, 2, 3, 1, 3, 2, 0, 1, 1, 2, 4, 2, 0, 3, 1, 4, 2], [21, 2, 78, 58, 37, 59, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 5, 3, 2, 58, 58, 35, 23, 7, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(grad, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.subtract(grad, tf.math.multiply(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), alpha))), tf.math.pow(alpha, tf.math.multiply(tf.math.add(beta, beta), grad)))), tf.math.add(tf.math.sqrt(grad), tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))), alpha))))), grad)), tf.math.add(tf.math.add(beta, beta), tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.add(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), alpha)))))))), tf.math.add(tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha))))), beta)), tf.math.add(beta, grad))))))), beta), tf.math.sqrt(tf.math.add(beta, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 1, 3, 0, 6, 5, 2, 3, 3, 3, 5, 9, 1, 0, 6, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [0, 2, 3, 0, 3, 2, 3, 0, 3, 3, 3, 3, 3, 1, 3, 2, 0, 1, 1, 2, 3, 3, 0, 3, 1, 0, 2], [21, 2, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 8, 5, 2, 34, 34, 21, 13, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))))))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.negative(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.square(tf.math.add(beta, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.negative(tf.math.divide_no_nan(grad, tf.math.add(beta, beta))), tf.math.square(tf.math.add(beta, grad)))))))))), tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.sqrt(grad))))))), grad), tf.math.add(grad, tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1628582775592804, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [82, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 9, 2, 6, 0, 3, 5, 6, 9, 2, 9, 0, 3, 5, 3, 9, 7, 3, 2, 4, 8, 4, 2, 1, 9, 8, 0, 2, 3, 6, 2, 0, 8, 8, 2, 7, 7, 9, 9], [4, 2, 3, 2, 1, 1, 3, 3, 0, 1, 3, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [21, 90, 53, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 11, 11, 7, 4, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.negative(tf.math.add(beta, grad)))))), tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 9, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 6, 2, 6, 5, 3, 3, 3, 3, 2, 9, 1, 3, 3, 5, 3, 7, 8, 2, 5, 2, 4, 9, 2, 9, 6, 2, 5, 3, 4, 2, 9, 8, 8, 2], [0, 2, 3, 1, 3, 2, 3, 0, 3, 3, 3, 3, 3, 1, 3, 2, 0, 1, 1, 2, 3, 3, 0, 3, 1, 0, 2], [21, 72, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3598308895147864, 58.54973897907507, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.04015321657061577, 0.036983225494623184, 0.11002509295940399, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.222245556967599, 19680.40401785714, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0033333334140479565, 0.0989999994635582, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 6, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [34, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 9, 3, 6, 2, 6, 5, 3, 3, 3, 3, 3, 9, 1, 3, 9, 5, 3, 7, 8, 2, 6, 0, 4, 2, 2, 9, 2, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 1, 1, 2, 3, 3, 0, 2, 3, 0, 3, 0, 3, 3, 3, 3, 1, 2, 4, 2], [21, 2, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.07400000095367432, "mapping_values": [1, 17, 17, 10, 7, 2, 2, 2, 2, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))))))))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3025617903375735, 2.299862790841468, 2.2994779006538297, 2.299099439391213, 2.2998223324902796, 2.298389341852936, 2.2989414998836617, 2.298406846267263, 2.2989862773239245, 2.299689557936213, 2.2981270421781024, 2.2989241907452045, 2.29937352159193, 2.2985999479332873, 2.2983068516068315, 2.299178163058344, 2.299359972545295, 2.2999955198595066], "accuracy": [0.08651433140039444, 0.09536388516426086, 0.10302469879388809, 0.10130762308835983, 0.09998679161071777, 0.10210011899471283, 0.10276053100824356, 0.10236428678035736, 0.1022322028875351, 0.10276053100824356, 0.10777968913316727, 0.108440101146698, 0.10434553027153015, 0.10553427785634995, 0.10447761416435242, 0.10553427785634995, 0.09602430462837219, 0.09932637959718704], "val_loss": [1.9698566028050013, 1.9691005434308733, 1.9686525889805384, 1.9684868540082658, 1.9682820865086146, 1.9682399885995048, 1.9683119228907995, 1.9683921677725655, 1.9683294977460588, 1.9683942794799805, 1.96845429284232, 1.9685066768101283, 1.9686051096235002, 1.9687939371381487, 1.9691241809300013, 1.969437735421317, 1.9697255407060896, 1.9699580328805106], "val_accuracy": [0.04933333396911621, 0.05700000002980232, 0.06300000101327896, 0.070333331823349, 0.07666666805744171, 0.08133333176374435, 0.08533333241939545, 0.08799999952316284, 0.09466666728258133, 0.09733333438634872, 0.10000000149011612, 0.09866666793823242, 0.10066666454076767, 0.10000000149011612, 0.09700000286102295, 0.09866666793823242, 0.09700000286102295, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [9, 2, 3, 6, 2, 6, 5, 3, 3, 3, 3, 2, 9, 1, 3, 3, 5, 3, 7, 8, 2, 5, 2, 4, 9, 2, 9, 6, 2, 5, 3, 4, 2, 9, 8, 8, 2], [4, 0, 3, 1, 3, 2, 3, 0, 3, 3, 3, 3, 3, 1, 3, 2, 0, 1, 1, 2, 3, 3, 0, 3, 1, 0, 2], [68, 86, 89, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [2.303157947728222, 2.301659573810826, 2.302274278472711, 2.3024375458844446, 2.3039978078296235, 2.3027780830364155], "accuracy": [0.08625016361474991, 0.09140139818191528, 0.0936468094587326, 0.09047681838274002, 0.09047681838274002, 0.08968432247638702], "val_loss": [1.971015112740653, 1.9710580280848913, 1.9711600712367467, 1.9713513510567802, 1.971632480621338, 1.9720049585614885], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03633333370089531, 0.035999998450279236, 0.03500000014901161, 0.03333333507180214]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 2, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [66, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 6, 2, 6, 5, 9, 3, 3, 3, 2, 9, 1, 3, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 6, 3, 2, 2, 9, 8, 0, 2], [3, 3, 3, 1, 1, 1, 3, 3, 0, 2, 3, 1, 3, 0, 3, 2, 1, 1, 1, 2, 4, 2], [21, 2, 94, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 4, 4, 2, 2, 0, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), grad)), lambda shape,  alpha, beta, grad: tf.math.sqrt(grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [2.303156274609861, 2.30163491879157, 2.3021677053363616, 2.30217521802514, 2.303446108560206, 2.3019016689990317], "accuracy": [0.08625016361474991, 0.09179764986038208, 0.0940430611371994, 0.09179764986038208, 0.09192973375320435, 0.09021265059709549], "val_loss": [1.9710072789873396, 1.9710076195853097, 1.971008028302874, 1.971008368900844, 1.9710089819771903, 1.9710090500967843], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [1, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 6, 2, 6, 5, 3, 3, 3, 3, 2, 9, 1, 3, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 3, 1, 1, 1, 3, 3, 0, 2, 3, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [68, 86, 89, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 4, 4, 2, 2, 1, 4, 4, 2, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(alpha)), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3031560947016136, 2.301634378972354, 2.302166427808305, 2.3021736390964467, 2.3034439582267945, 2.3018995502511226], "accuracy": [0.08625016361474991, 0.09179764986038208, 0.0940430611371994, 0.09192973375320435, 0.09179764986038208, 0.09021265059709549], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [1, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 7, 3, 6, 0, 6, 5, 8, 8, 3, 8, 2, 9, 9, 2, 2, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 3, 1, 1, 1, 3, 3, 0, 2, 3, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [68, 86, 89, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 4, 4, 2, 2, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(alpha), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3031560947016136, 2.301634378972354, 2.302166427808305, 2.3021736390964467, 2.3034439582267945, 2.3018995502511226], "accuracy": [0.08625016361474991, 0.09179764986038208, 0.0940430611371994, 0.09192973375320435, 0.09179764986038208, 0.09021265059709549], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 6, 2, 6, 5, 3, 3, 2, 3, 2, 9, 1, 3, 3, 5, 4, 7, 8, 2, 5, 2, 4, 9, 2, 9, 6, 2, 5, 3, 4, 2, 9, 8, 8, 2], [0, 2, 1, 1, 3, 2, 3, 0, 3, 3, 3, 3, 3, 1, 1, 2, 0, 1, 1, 2, 3, 3, 0, 3, 1, 0, 2], [21, 72, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 4, 4, 2, 2, 1, 34, 34, 19, 15, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), beta), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(alpha)), tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.multiply(tf.math.multiply(tf.math.add(beta, beta), tf.math.square(tf.math.add(beta, grad))), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), grad))), grad))))))), tf.math.add(beta, grad)), tf.math.add(alpha, tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3031560947016136, 2.301634378972354, 2.302166427808305, 2.3021736390964467, 2.3034439582267945, 2.3018995502511226], "accuracy": [0.08625016361474991, 0.09179764986038208, 0.0940430611371994, 0.09192973375320435, 0.09179764986038208, 0.09021265059709549], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}]