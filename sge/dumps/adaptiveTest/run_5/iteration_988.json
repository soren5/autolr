[{"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 2, 2, 6, 5, 2, 3, 3, 3, 2, 9, 0, 4, 9, 5, 3, 7, 8, 2, 6, 2, 2, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 1, 3, 1, 1, 3, 3, 0, 2, 3, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [94, 61, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.8445714116096497, "mapping_values": [1, 4, 4, 2, 2, 1, 13, 13, 7, 6, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(grad, tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))), alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.square(alpha))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9215810927008248, 1.110404544069688, 0.8232239732306473, 0.7083809853403119, 0.6344790023394453, 0.5959705372827243, 0.5649653844247011, 0.529704465700446, 0.5020917428010616, 0.4924941183419795, 0.49008719310343557, 0.46264232052488885, 0.43091514899100547, 0.4270620293597409, 0.4042338033740263, 0.3849697803438552, 0.3774689795980049, 0.37116488317976604, 0.36276230297902984, 0.348568068121749, 0.3466643670633122, 0.3327498931328004, 0.3352567689758266, 0.3123033627495711, 0.3067825608296937, 0.30276417545260786, 0.2894034297624363, 0.27909049202800346, 0.2787292124753961, 0.28014461439299215, 0.27120570152143775, 0.2552221370859704, 0.2552205284769824, 0.2460874185948214, 0.24562085656961666, 0.2376562554968378, 0.2245471400198069, 0.2376350237630094, 0.23821268737780624, 0.22778216198435108, 0.21523845759853316, 0.2190942540873059, 0.21292796858337026, 0.19974336943110266, 0.20190467480670948, 0.18653366309957828], "accuracy": [0.34764233231544495, 0.6116761565208435, 0.6866992712020874, 0.7243428826332092, 0.757099449634552, 0.763439416885376, 0.7862898111343384, 0.8021397590637207, 0.8041210174560547, 0.8158763647079468, 0.8120459914207458, 0.8265751004219055, 0.8358209133148193, 0.843481719493866, 0.8511425256729126, 0.8520671129226685, 0.8581429123878479, 0.8642187118530273, 0.8618412613868713, 0.8652753829956055, 0.8687095642089844, 0.8709549307823181, 0.8683133125305176, 0.8799365758895874, 0.8799365758895874, 0.8829745054244995, 0.8885219693183899, 0.8905032277107239, 0.8920882344245911, 0.8932769894599915, 0.896446943283081, 0.8973715305328369, 0.9025228023529053, 0.9038436412811279, 0.9045040011405945, 0.9121648669242859, 0.9096552729606628, 0.9064852595329285, 0.9104477763175964, 0.9099194407463074, 0.9152027368545532, 0.913089394569397, 0.9141460657119751, 0.9203540086746216, 0.9196935892105103, 0.9268260598182678], "val_loss": [0.8727212292807442, 0.6414039134979248, 0.575697762625558, 0.5136565140315464, 0.48056675706590923, 0.44713306427001953, 0.43565997907093595, 0.4057508962494986, 0.3913557955196926, 0.39541507618767874, 0.37253778321402414, 0.372506388596126, 0.3579528672354562, 0.3492597000939505, 0.34626162903649466, 0.34100186824798584, 0.33790316752025057, 0.3447637898581369, 0.3352444853101458, 0.3216003009251186, 0.3243938854762486, 0.3240154044968741, 0.32023764508111136, 0.3188148822103228, 0.3182865721838815, 0.31356832810810636, 0.3124341198376247, 0.31394474846976145, 0.31816281591142925, 0.3206029874937875, 0.3092718635286604, 0.3081770879881723, 0.3045404979160854, 0.2998004640851702, 0.3041782634598868, 0.3134885174887521, 0.3072173169681004, 0.313111458505903, 0.30720999411174227, 0.31773520367486136, 0.3038313899721418, 0.3203112653323582, 0.30594994340624126, 0.32301682233810425, 0.30780215774263653, 0.3174065351486206], "val_accuracy": [0.6233333349227905, 0.7056666612625122, 0.7326666712760925, 0.7566666603088379, 0.7776666879653931, 0.7940000295639038, 0.8013333082199097, 0.8266666531562805, 0.8339999914169312, 0.8206666707992554, 0.8363333344459534, 0.843666672706604, 0.8463333249092102, 0.8523333072662354, 0.8529999852180481, 0.8600000143051147, 0.8583333492279053, 0.8586666584014893, 0.8606666922569275, 0.8673333525657654, 0.8659999966621399, 0.8636666536331177, 0.8690000176429749, 0.871666669845581, 0.8643333315849304, 0.8723333477973938, 0.8759999871253967, 0.875, 0.8730000257492065, 0.8703333139419556, 0.878000020980835, 0.8743333220481873, 0.8793333172798157, 0.8769999742507935, 0.8809999823570251, 0.8769999742507935, 0.8823333382606506, 0.8796666860580444, 0.8793333172798157, 0.878000020980835, 0.8843333125114441, 0.8763333559036255, 0.8796666860580444, 0.8763333559036255, 0.8790000081062317, 0.8830000162124634]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [1, 2, 3, 8, 2, 3, 5, 9, 6, 3, 3, 2, 9, 1, 2, 9, 5, 3, 7, 2, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 1, 3, 1, 1, 3, 3, 0, 2, 3, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [84, 61, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.8382856845855713, "mapping_values": [1, 4, 4, 2, 2, 1, 13, 13, 8, 5, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.sqrt(grad), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), alpha)), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.square(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9215810927008248, 1.1104058732351592, 0.8229627394405385, 0.7079798255881865, 0.6347850260323915, 0.5971630505677211, 0.5641501021737892, 0.5283045230083745, 0.5023249902973684, 0.49420331535621514, 0.49230686883097546, 0.46388666374084103, 0.42854824526403495, 0.4284838139420377, 0.40636933329334946, 0.3855042946478789, 0.37533679094769307, 0.3725843793208085, 0.3635120087445546, 0.34235518798379694, 0.3429365004680381, 0.3326432342148885, 0.3325373355927579, 0.3170477704538283, 0.304259919408542, 0.2974105727214382, 0.29182921798158995, 0.2815391110344145, 0.2851345598492971, 0.28061809990589, 0.2752416595263551, 0.2504227559257256, 0.25644902868624203, 0.2476242129450949, 0.24356938957805882, 0.24270986498244576, 0.22695622316929076, 0.23336038573850115, 0.23196386849096093, 0.22710362835889952], "accuracy": [0.34764233231544495, 0.6116761565208435, 0.6865671873092651, 0.7246070504188538, 0.7561748623847961, 0.7626469135284424, 0.7823272943496704, 0.8014793395996094, 0.8033285140991211, 0.8170651197433472, 0.8079513907432556, 0.8240655064582825, 0.8370096683502197, 0.8378021121025085, 0.8487650156021118, 0.8524633646011353, 0.8598600029945374, 0.8615770936012268, 0.8627657890319824, 0.8689737319946289, 0.870030403137207, 0.8697662353515625, 0.8716153502464294, 0.8776912093162537, 0.8817857503890991, 0.889050304889679, 0.8914278149604797, 0.8938053250312805, 0.8881257176399231, 0.8914278149604797, 0.8961827754974365, 0.9030511379241943, 0.9033153057098389, 0.9035794734954834, 0.9049002528190613, 0.9062210917472839, 0.9097873568534851, 0.9113723635673523, 0.91124027967453, 0.9117686152458191], "val_loss": [0.872719407081604, 0.6415296282087054, 0.5751673153468541, 0.5137677533285958, 0.48192291600363596, 0.4466783659798758, 0.43432682752609253, 0.41095733642578125, 0.3911803109305246, 0.39895129203796387, 0.3777169244629996, 0.36804325239998953, 0.3569821459906442, 0.35098406246730257, 0.34714714118412565, 0.3408736842019217, 0.33410340547561646, 0.3418229733194624, 0.3331824966839382, 0.3179744141442435, 0.32030665022986277, 0.3179925424712045, 0.3208551747458322, 0.3142496177128383, 0.3125417913709368, 0.3051819120134626, 0.31111919028418406, 0.310890861919948, 0.31552099330084665, 0.3161453604698181, 0.30303739649908884, 0.3117213078907558, 0.2997961470058986, 0.30795343433107647, 0.29681865658078876, 0.3170695815767561, 0.3090743507657732, 0.30822932720184326, 0.3046950783048357, 0.3123913066727774], "val_accuracy": [0.6233333349227905, 0.7056666612625122, 0.7326666712760925, 0.7573333382606506, 0.7763333320617676, 0.7916666865348816, 0.8033333420753479, 0.8236666917800903, 0.8343333601951599, 0.8216666579246521, 0.8363333344459534, 0.8489999771118164, 0.8489999771118164, 0.8510000109672546, 0.8510000109672546, 0.8586666584014893, 0.8603333234786987, 0.8603333234786987, 0.862333357334137, 0.8653333187103271, 0.8663333058357239, 0.8690000176429749, 0.8683333396911621, 0.8696666955947876, 0.8666666746139526, 0.8740000128746033, 0.8726666569709778, 0.874666690826416, 0.8740000128746033, 0.8709999918937683, 0.8790000081062317, 0.8793333172798157, 0.8773333430290222, 0.8793333172798157, 0.8813333511352539, 0.8730000257492065, 0.8806666731834412, 0.8793333172798157, 0.8759999871253967, 0.8793333172798157]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 3, 3, 2, 2, 6, 5, 8, 3, 3, 0, 2, 9, 1, 0, 2, 2, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [0, 0, 1, 3, 1, 1, 3, 3, 0, 2, 3, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [21, 42, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.8339999914169312, "mapping_values": [1, 4, 4, 2, 2, 1, 4, 4, 2, 2, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9215808857732743, 1.1103827533641937, 0.8231690427441686, 0.7081388694231363, 0.6346686650827781, 0.596069346605086, 0.5653684222230569, 0.5298602344132906, 0.5040063686642302, 0.49294100873238217, 0.4891398901543235, 0.4630005153973876, 0.4321958617236022, 0.4308200132191819, 0.4055302559683871, 0.3852054447057681, 0.3795121862092873, 0.3723572955596338, 0.36747177404781706, 0.34912706451598036, 0.35185457886312427, 0.33224718197697994, 0.3333540962136354, 0.3126282999465463, 0.31220789309411456, 0.30475037169336816, 0.2926760975395951, 0.2869460986802418, 0.28791484442196186, 0.28661637107190074, 0.28486018206197444, 0.25878960860167605, 0.2622347712052292, 0.256643494685344, 0.24315455718488269, 0.24728237811277698, 0.2276532211874958, 0.23724632707758192, 0.23429603633186552, 0.22194161109125388], "accuracy": [0.34764233231544495, 0.6115440726280212, 0.6863030195236206, 0.7244749665260315, 0.7559106945991516, 0.7642319202423096, 0.7824593782424927, 0.7987055778503418, 0.802800178527832, 0.8141592741012573, 0.8117818236351013, 0.82683926820755, 0.8350284099578857, 0.839519202709198, 0.8507462739944458, 0.8516708612442017, 0.8558974862098694, 0.8615770936012268, 0.8585391640663147, 0.8661999702453613, 0.8661999702453613, 0.8691058158874512, 0.8706908226013184, 0.878351628780365, 0.8770307898521423, 0.8841632604598999, 0.8887861371040344, 0.8906353116035461, 0.8853520154953003, 0.8878615498542786, 0.8894465565681458, 0.8982961177825928, 0.8988244533538818, 0.8992207050323486, 0.9080702662467957, 0.9027869701385498, 0.9095231890678406, 0.9064852595329285, 0.9095231890678406, 0.9148064851760864], "val_loss": [0.8727209057126727, 0.641458443232945, 0.5753666503088815, 0.5131428752626691, 0.48120687689099995, 0.4470533813749041, 0.43553818123681204, 0.4067270074571882, 0.39208923067365375, 0.39132772173200336, 0.37630218267440796, 0.3739516053880964, 0.35999975885663715, 0.3510402185576303, 0.34525582620075773, 0.3458217467580523, 0.3369425790650504, 0.34320185014179777, 0.3296417423657009, 0.32120668036597116, 0.32158091238566805, 0.3217147929327829, 0.3235429440225874, 0.3228795528411865, 0.3163037896156311, 0.3082168272563389, 0.31602866309029715, 0.31673366682870047, 0.31003311702183317, 0.32570165395736694, 0.3124256900378636, 0.3037422299385071, 0.3033109988485064, 0.308196450982775, 0.3065432480403355, 0.3198036551475525, 0.3121632848467146, 0.31322626556668964, 0.3039198006902422, 0.31646863903318134], "val_accuracy": [0.6233333349227905, 0.7053333520889282, 0.7333333492279053, 0.7580000162124634, 0.7766666412353516, 0.7910000085830688, 0.8036666512489319, 0.8273333311080933, 0.8309999704360962, 0.8246666789054871, 0.8349999785423279, 0.840666651725769, 0.846666693687439, 0.8516666889190674, 0.8523333072662354, 0.856333315372467, 0.8546666502952576, 0.8576666712760925, 0.8629999756813049, 0.8669999837875366, 0.8659999966621399, 0.8629999756813049, 0.8706666827201843, 0.8730000257492065, 0.8650000095367432, 0.874666690826416, 0.871999979019165, 0.8703333139419556, 0.8736666440963745, 0.8669999837875366, 0.8763333559036255, 0.8816666603088379, 0.875333309173584, 0.8793333172798157, 0.8823333382606506, 0.875333309173584, 0.8766666650772095, 0.8823333382606506, 0.8776666522026062, 0.8816666603088379]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 2, 2, 6, 5, 2, 3, 3, 3, 2, 9, 0, 4, 9, 5, 3, 7, 8, 2, 6, 2, 2, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 1, 3, 1, 1, 3, 3, 0, 2, 3, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [94, 13, 89, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.8285714387893677, "mapping_values": [1, 4, 4, 2, 2, 1, 24, 24, 14, 10, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(grad, tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.multiply(grad, tf.math.add(beta, grad)))), tf.math.add(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta))))))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9215828970737934, 1.1111522728284242, 0.8223444957774723, 0.7076620336584112, 0.6339403690206629, 0.5968544218345262, 0.5670307094253144, 0.5350537639898064, 0.5037063673038241, 0.4921380834509558, 0.4910282991376803, 0.4657321140561767, 0.4336673252224497, 0.43013470772943635, 0.40734941675804387, 0.38561234846484815, 0.3795041532099853, 0.37162766601777647, 0.36205724650889876, 0.35198801486656855, 0.351130831979285, 0.3356486374888485, 0.33826969027629444, 0.3189865684252626, 0.3106458840227209, 0.30325384683864715, 0.2921120954495159, 0.28433690691794133, 0.28752843072196793, 0.2861137796685901, 0.281573685334107, 0.25609387291846036, 0.25790453151216786, 0.24778067739711163, 0.24532417327720632, 0.24701491075617968, 0.23206593063387496, 0.23899113460971758, 0.23606851693818975, 0.2245113642212422], "accuracy": [0.3475102484226227, 0.6116761565208435, 0.6882842183113098, 0.7251353859901428, 0.7565711140632629, 0.7635715007781982, 0.7821952104568481, 0.7979130744934082, 0.8018755912780762, 0.8149517774581909, 0.8088759779930115, 0.8251221776008606, 0.8362171649932861, 0.8405758738517761, 0.8459912538528442, 0.8514066934585571, 0.8555012345314026, 0.863029956817627, 0.8584070801734924, 0.8634262084960938, 0.8692378997802734, 0.8661999702453613, 0.8668603897094727, 0.8772949576377869, 0.8779553771018982, 0.8864086866378784, 0.8898428082466125, 0.8905032277107239, 0.8879936337471008, 0.8891823887825012, 0.8899748921394348, 0.8986923694610596, 0.9000132083892822, 0.9029190540313721, 0.9037115573883057, 0.908730685710907, 0.9071456789970398, 0.9046360850334167, 0.908730685710907, 0.9115044474601746], "val_loss": [0.8721979004996163, 0.6423108407429287, 0.5749047143118722, 0.512434891292027, 0.4818460089819772, 0.44757827690669466, 0.43764432838984896, 0.4097107819148472, 0.39392239706856863, 0.3964000514575413, 0.3763131669589451, 0.37230485677719116, 0.3600227492196219, 0.3546630229268755, 0.34393405062811716, 0.34292047364371164, 0.33681888239724295, 0.340533903666905, 0.3315684029034206, 0.3207439524786813, 0.3236833725656782, 0.32374270473207745, 0.3206169605255127, 0.32021727732249666, 0.3144053646496364, 0.30968869583947317, 0.3151584948812212, 0.3120872804096767, 0.31264463492802214, 0.32358624253954205, 0.3094772015299116, 0.30847556250435965, 0.30355135032108854, 0.3037647434643337, 0.29477838959012714, 0.3110943181174142, 0.30488157272338867, 0.30613843883786884, 0.31148630380630493, 0.31242670331682476], "val_accuracy": [0.6236666440963745, 0.706333339214325, 0.7310000061988831, 0.7566666603088379, 0.778333306312561, 0.7946666479110718, 0.8029999732971191, 0.8246666789054871, 0.8309999704360962, 0.8220000267028809, 0.8309999704360962, 0.8443333506584167, 0.8479999899864197, 0.8516666889190674, 0.8573333621025085, 0.856333315372467, 0.8633333444595337, 0.8576666712760925, 0.8653333187103271, 0.8640000224113464, 0.8646666407585144, 0.8633333444595337, 0.8676666617393494, 0.871999979019165, 0.8713333606719971, 0.8726666569709778, 0.8736666440963745, 0.874666690826416, 0.8736666440963745, 0.8650000095367432, 0.8723333477973938, 0.8796666860580444, 0.8756666779518127, 0.8806666731834412, 0.8820000290870667, 0.874666690826416, 0.8793333172798157, 0.8773333430290222, 0.8766666650772095, 0.8793333172798157]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [1, 3, 3, 3, 2, 6, 5, 3, 0, 3, 3, 2, 8, 8, 4, 9, 5, 4, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [2, 2, 1, 3, 1, 1, 3, 3, 0, 2, 3, 3, 3, 0, 3, 3, 3, 1, 3, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [94, 61, 30, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7940000295639038, "mapping_values": [1, 4, 4, 2, 2, 1, 14, 14, 7, 7, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(beta, beta)), alpha)), tf.math.add(grad, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.square(alpha))))), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.1620555746241994, 1.5489860419442294, 1.2153043542807649, 1.0401410231689783, 0.8901128372212663, 0.900569007782778, 0.8191704144567279, 0.7936089083881048, 0.761375539755667, 0.7550092403993568, 0.7256912444450632, 0.7059104742863396, 0.6989356973277989, 0.6800158412984617, 0.67068905919188, 0.6562428478756286, 0.6509666065766023, 0.6398860523178278, 0.6171169797931098, 0.6193201468605265, 0.6227646816077564, 0.595293103483422, 0.5800123010502358, 0.5935868695191325, 0.5789322905127304, 0.5710350115065247], "accuracy": [0.2934883236885071, 0.48514068126678467, 0.5654470920562744, 0.6199973821640015, 0.6700568199157715, 0.6729626059532166, 0.6905296444892883, 0.7069079279899597, 0.7132478952407837, 0.7137762308120728, 0.7293620109558105, 0.7368907928466797, 0.7338528633117676, 0.744419515132904, 0.7429665923118591, 0.7510236501693726, 0.7499669790267944, 0.7530049085617065, 0.7647602558135986, 0.7680623531341553, 0.7593448758125305, 0.7759873270988464, 0.787082314491272, 0.7814027070999146, 0.7810064554214478, 0.7910447716712952], "val_loss": [1.4512686048235213, 0.8801777362823486, 0.7176798241479057, 0.7043584585189819, 0.7060833828789848, 0.6372708252498082, 0.6493419068200248, 0.5958960737500872, 0.571894713810512, 0.5492466006960187, 0.5629916020802089, 0.5190221411841256, 0.5451984746115548, 0.5234874657222203, 0.5291789088930402, 0.48920345306396484, 0.48890754154750277, 0.49264236858912874, 0.4687138625553676, 0.466376713344029, 0.4631052868706839, 0.45418964113507954, 0.4459298423358372, 0.446585442338671, 0.4419431686401367, 0.458563004221235], "val_accuracy": [0.5523333549499512, 0.6433333158493042, 0.7133333086967468, 0.6753333210945129, 0.6836666464805603, 0.7073333263397217, 0.6946666836738586, 0.7263333201408386, 0.7223333120346069, 0.753000020980835, 0.7490000128746033, 0.7613333463668823, 0.7350000143051147, 0.7546666860580444, 0.7663333415985107, 0.7726666927337646, 0.7676666378974915, 0.7773333191871643, 0.8063333630561829, 0.8059999942779541, 0.8069999814033508, 0.8040000200271606, 0.8056666851043701, 0.7950000166893005, 0.7993333339691162, 0.7983333468437195]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [1, 9, 3, 2, 2, 6, 5, 2, 3, 3, 2, 2, 8, 8, 4, 9, 5, 4, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [1, 0, 3, 3, 0, 1, 3, 3, 3, 3, 3, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [21, 61, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7774285674095154, "mapping_values": [1, 4, 4, 2, 2, 1, 3, 3, 2, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.162053197476653, 1.5498166824801094, 1.211934250312128, 1.0445604531709245, 0.8932260637663737, 0.8984902422457418, 0.8175010451346562, 0.7937852933800152, 0.7600763538620333, 0.7549110188727932, 0.7245787145155863, 0.6956622361774694, 0.7076859801688828, 0.6791841659831207, 0.6631486105282766, 0.6591343685872425], "accuracy": [0.2933562397956848, 0.4846123456954956, 0.5679566860198975, 0.6174877882003784, 0.6675472259521484, 0.6732267737388611, 0.6885483860969543, 0.7088891863822937, 0.7148329019546509, 0.713379979133606, 0.7302865982055664, 0.7421740889549255, 0.7317395210266113, 0.7448157668113708, 0.7474573850631714, 0.7506273984909058], "val_loss": [1.4511424132755824, 0.8813550472259521, 0.720128093447004, 0.7000965561185565, 0.7262164354324341, 0.6268894842692784, 0.6472657237734113, 0.5975436653409686, 0.5722550324031285, 0.5601346663066319, 0.5389985357012067, 0.5400279249463763, 0.5460645301001412, 0.5206264938626971, 0.5230064051491874, 0.4868782418114798], "val_accuracy": [0.5529999732971191, 0.6426666378974915, 0.7113333344459534, 0.6813333630561829, 0.6803333163261414, 0.7136666774749756, 0.6946666836738586, 0.7243333458900452, 0.7226666808128357, 0.7523333430290222, 0.7746666669845581, 0.7419999837875366, 0.7363333106040955, 0.7559999823570251, 0.7643333077430725, 0.7736666798591614]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 1, 2, 2, 3, 1, 8, 3, 3, 3, 2, 9, 1, 4, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 1, 3, 1, 1, 3, 3, 0, 2, 3, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [21, 61, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.725428581237793, "mapping_values": [1, 4, 4, 2, 2, 1, 4, 4, 2, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.add(grad, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9456793599518583, 1.0234789031450349, 0.8559433588136409, 0.7720696743075338, 0.6883889503955148, 0.6455679972331443, 0.6215936123750088, 0.5766218478385846, 0.5931297831484323, 0.5777483329859865, 0.5520025254350848, 0.5603991449705882, 0.5843137510779228, 0.6205043313824788], "accuracy": [0.3455289900302887, 0.6288469433784485, 0.6750759482383728, 0.711530864238739, 0.7423061728477478, 0.763439416885376, 0.7606657147407532, 0.7803460359573364, 0.7837802171707153, 0.789988100528717, 0.7924976944923401, 0.7827235460281372, 0.7862898111343384, 0.7829877138137817], "val_loss": [0.8669544458389282, 0.65704688004085, 0.5684103284563337, 0.4962958438055856, 0.48523047992161344, 0.46422864709581646, 0.4678478581564767, 0.46517814908708843, 0.4339564953531538, 0.435163608619145, 0.47415021487644743, 0.473084671156747, 0.4674325500215803, 0.5047659363065448], "val_accuracy": [0.6723333597183228, 0.7076666951179504, 0.7409999966621399, 0.7756666541099548, 0.7886666655540466, 0.7963333129882812, 0.7929999828338623, 0.8086666464805603, 0.8180000185966492, 0.8176666498184204, 0.7923333048820496, 0.8059999942779541, 0.8149999976158142, 0.8113333582878113]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 0, 2, 6, 5, 2, 3, 3, 3, 2, 9, 0, 4, 9, 5, 3, 7, 8, 2, 6, 2, 2, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [1, 0, 1, 3, 1, 1, 3, 3, 0, 2, 3, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [94, 61, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.6548571586608887, "mapping_values": [1, 4, 4, 2, 2, 1, 41, 41, 25, 16, 5, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(grad), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.negative(tf.math.add(tf.math.add(beta, alpha), tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(alpha)), grad))), tf.math.add(beta, tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(tf.math.add(beta, grad), grad))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.divide_no_nan(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), beta), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)))))), tf.math.add(tf.math.add(beta, grad), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)))))))))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9456850196140285, 1.0232754881277124, 0.8548499585662331, 0.7700650363613382, 0.6862036967951435, 0.643892573445874, 0.6267152722517041, 0.5867329510117031, 0.5786783102638513, 0.5642031243117951, 0.5681944952239734, 0.557620641813932, 0.5486323040206561, 0.5574170872126242, 0.5947106722449551, 0.6164446992644891, 0.6290044346348233, 0.6922282490984103, 0.6956775201121184], "accuracy": [0.3455289900302887, 0.6287148594856262, 0.67666095495224, 0.7099458575248718, 0.7424382567405701, 0.7637035846710205, 0.76106196641922, 0.7726852297782898, 0.7885351777076721, 0.7884030938148499, 0.7880068421363831, 0.7885351777076721, 0.7924976944923401, 0.7975168228149414, 0.7844406366348267, 0.7880068421363831, 0.7746664881706238, 0.7528728246688843, 0.76106196641922], "val_loss": [0.8669066769736153, 0.6559993880135673, 0.5679094450814384, 0.496584381375994, 0.4818207025527954, 0.46604611192430767, 0.46074581146240234, 0.46436778136662077, 0.42627741609300884, 0.4495386225836618, 0.44212876898901804, 0.4463878699711391, 0.46692071642194477, 0.44301897287368774, 0.4776315518787929, 0.47601544857025146, 0.5194257327488491, 0.5539507014410836, 0.5714230707713536], "val_accuracy": [0.6723333597183228, 0.7080000042915344, 0.7413333058357239, 0.7763333320617676, 0.7896666526794434, 0.7953333258628845, 0.7903333306312561, 0.8100000023841858, 0.8193333148956299, 0.8166666626930237, 0.8173333406448364, 0.8209999799728394, 0.8090000152587891, 0.8243333101272583, 0.7990000247955322, 0.8133333325386047, 0.7883333563804626, 0.8016666769981384, 0.7946666479110718]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [7, 2, 3, 5, 2, 6, 5, 2, 3, 3, 3, 2, 2, 1, 2, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 1, 3, 1, 1, 3, 3, 0, 2, 3, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [21, 61, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, grad), tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07158895581960678, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [0, 2, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 2, 2, 6, 5, 2, 3, 3, 3, 2, 9, 0, 4, 9, 5, 3, 7, 8, 2, 6, 2, 2, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 2, 1, 3, 1, 3, 3, 3, 0, 2, 3, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [21, 61, 60, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 31, 31, 19, 12, 3, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), grad), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.add(grad, tf.math.multiply(tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.square(grad)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.multiply(alpha, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))))))), tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(beta, grad)), grad))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [2.301966430016355, 2.303186561768128, 2.3055944552022893, 2.319115453754607, 2.385487495774307, 5.400088679694449, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09377889335155487, 0.09153348207473755, 0.08611807972192764, 0.08492933213710785, 0.09008057415485382, 0.09179764986038208, 0.09496764093637466, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9712824140276228, 1.9725615637642997, 1.9760441098894392, 1.985961982182094, 2.104517732347761, 88.993898664202, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.03633333370089531, 0.023666666820645332, 0.014999999664723873, 0.04766666516661644, 0.0989999994635582, 0.10066666454076767, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [8, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [91, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 3, 3, 2, 2, 6, 5, 2, 3, 3, 3, 6, 9, 1, 4, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [0, 0, 1, 2, 1, 3, 3, 3, 1, 2, 3, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [94, 61, 78, 38, 37, 47, 96], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 0, 2, 2, 1, 1, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 2, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 4, 3, 2, 2, 6, 5, 2, 2, 3, 3, 8, 9, 1, 4, 9, 5, 3, 7, 8, 0, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 1, 3, 1, 3, 3, 3, 2, 2, 3, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [59, 61, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 5, 3, 2, 31, 31, 19, 12, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.multiply(tf.math.add(tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.square(grad)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(alpha, tf.math.sqrt(grad))), tf.math.add(beta, grad))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))))))), tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(beta, grad)), grad))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09576013684272766, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [6, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [1, 3, 3, 2, 2, 6, 5, 2, 3, 3, 3, 2, 8, 8, 4, 9, 5, 4, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 3, 2, 0, 1, 3, 3, 2, 0, 2, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [68, 61, 99, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 24, 24, 12, 12, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, beta)), tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.square(tf.math.add(tf.math.multiply(tf.math.multiply(alpha, grad), tf.math.add(beta, grad)), beta))))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), beta)), alpha)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07158895581960678, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [5, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 9, 2, 1, 8, 5, 2, 3, 3, 3, 2, 9, 3, 4, 9, 2, 3, 3, 8, 2, 3, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 1, 3, 1, 1, 3, 3, 0, 2, 3, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [21, 61, 82, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 22, 22, 14, 8, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.subtract(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.multiply(tf.math.add(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), grad), alpha))))), tf.math.add(beta, alpha))))))), tf.math.multiply(grad, grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07172103971242905, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 8, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 3, 3, 2, 2, 6, 5, 2, 3, 3, 3, 2, 9, 1, 4, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 2, 1, 3, 1, 1, 3, 3, 0, 2, 3, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [21, 61, 13, 26, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 5, 1, 1, 33, 33, 20, 13, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.square(grad)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(alpha, grad))), tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))), tf.math.subtract(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))))), tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(beta, grad)), grad)))))))), tf.math.sqrt(tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.2052568942308426, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [6, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [1, 0, 3, 2, 2, 6, 5, 2, 3, 2, 3, 2, 8, 8, 3, 9, 5, 4, 7, 0, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 3, 2, 0, 1, 3, 3, 0, 3, 3, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 3, 5], [21, 61, 99, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 54, 54, 32, 22, 6, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(grad), tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.negative(tf.math.multiply(tf.math.add(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(beta, alpha)))), tf.math.sqrt(grad)), tf.math.add(beta, grad))))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))))), tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(grad, tf.math.add(beta, grad))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.pow(grad, tf.math.add(tf.math.add(tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta)))))), tf.math.add(grad, tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, alpha)))))))))), beta))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.310379075968587e+31, 2290.546827113482, 5691.71955462249, 14268.571294995914, 4544.7403720366465, 3609.7683794583154], "accuracy": [0.10500594228506088, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.10011887550354004, 0.09998679161071777], "val_loss": [1221.3278111049108, 3279.8758370535716, 7549.539899553572, 8313.931640625, 3021.7784598214284, 3285.2638811383927], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 2, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [6, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 4, 8, 2, 2, 6, 5, 2, 3, 3, 3, 2, 9, 1, 4, 9, 5, 3, 7, 8, 0, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 1, 3, 1, 1, 3, 3, 0, 2, 3, 3, 0, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [21, 85, 78, 44, 29, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.0908571407198906, "mapping_values": [1, 4, 4, 2, 2, 0, 7, 7, 4, 3, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), grad), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.add(grad, tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))))), alpha))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3008793171575403, 2.2991042249254057, 2.299627482064443, 2.30164181107559, 2.3023070332365045, 2.3025876732550246, 2.3028861866367647, 2.303102330383041, 2.3034754859111595, 2.30389383053027], "accuracy": [0.09668471664190292, 0.10170386731624603, 0.10210011899471283, 0.08770307898521423, 0.11002509295940399, 0.109232597053051, 0.08083476126194, 0.09219389408826828, 0.09985470771789551, 0.09998679161071777], "val_loss": [1.9691675731113978, 1.969301973070417, 1.9722403117588587, 1.9732488223484583, 1.9737450054713659, 1.9740309034075056, 1.9742489542279924, 1.9745323317391532, 1.9749272210257394, 1.9754815782819475], "val_accuracy": [0.06599999964237213, 0.10866666585206985, 0.08633333444595337, 0.10733333230018616, 0.12966667115688324, 0.07433333247900009, 0.0963333323597908, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 2, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 0, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [91, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 3, 3, 2, 2, 6, 5, 2, 3, 3, 1, 6, 9, 6, 4, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 1, 2, 1, 3, 3, 3, 1, 2, 3, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [21, 61, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.036571428179740906, "mapping_values": [1, 34, 34, 21, 13, 8, 30, 30, 18, 12, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))), grad)))))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.sqrt(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))), tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))))), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.multiply(grad, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, alpha), beta)), tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, grad), tf.math.subtract(grad, tf.math.add(beta, grad))), tf.math.divide_no_nan(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.pow(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad))))))))))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3045942609525234, 2.308833498224811, 2.3081763304298613, 2.3085685479815736, 2.3083376037036865, 2.307395286217436], "accuracy": [0.09153348207473755, 0.07238145917654037, 0.0750231146812439, 0.07779685407876968, 0.07555144280195236, 0.07330603897571564], "val_loss": [1.9770797320774622, 1.9770797320774622, 1.9770797320774622, 1.9770797320774622, 1.9770797320774622, 1.9770797320774622], "val_accuracy": [0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 1, 2, 2, 6, 1, 2, 3, 3, 3, 2, 9, 0, 4, 9, 5, 3, 7, 8, 2, 6, 2, 2, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 1, 3, 1, 1, 3, 3, 0, 2, 3, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [21, 61, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 4, 4, 2, 2, 1, 30, 30, 18, 12, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.add(grad, tf.math.subtract(tf.math.add(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, alpha), grad)), tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.multiply(tf.math.add(beta, alpha), tf.math.multiply(grad, tf.math.add(beta, grad))), tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta))))), tf.math.pow(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(grad, grad))))))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.301904838004243, 2.3022610102000884, 2.301571480177019, 2.3020100375963883, 2.3015965049324443, 2.3006679548516233], "accuracy": [0.09391097724437714, 0.09153348207473755, 0.09060890227556229, 0.09259014576673508, 0.09153348207473755, 0.09140139818191528], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 5, 2, 6, 5, 2, 3, 3, 3, 2, 2, 1, 2, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 1, 3, 1, 1, 3, 3, 0, 2, 3, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [21, 61, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 18, 18, 11, 7, 2, 9, 9, 5, 4, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, grad))))), tf.math.add(alpha, alpha))))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.add(grad, tf.math.multiply(tf.math.square(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.301904838004243, 2.3022610102000884, 2.301571480177019, 2.3020100375963883, 2.3015965049324443, 2.3006679548516233], "accuracy": [0.09391097724437714, 0.09153348207473755, 0.09060890227556229, 0.09259014576673508, 0.09153348207473755, 0.09140139818191528], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}]