[{"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 8, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 2, 3, 0, 2, 6, 2, 3, 8, 3, 3, 4, 8, 1, 0, 6, 0, 3, 7, 8, 2, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 1, 3, 1, 0, 3, 0, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [68, 86, 78, 38, 8], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7680000066757202, "mapping_values": [1, 4, 4, 2, 2, 1, 45, 45, 26, 19, 3, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.multiply(tf.math.multiply(tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), grad), tf.math.subtract(alpha, grad)), alpha))), tf.math.add(beta, tf.math.negative(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(tf.math.negative(grad), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)))), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(beta, grad))))))))))), beta), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.287667313083099, 2.2458348316114027, 2.1882584032963894, 2.098302032748832, 1.9682677482743036, 1.7905487193407525, 1.6101995448646702, 1.4358856496305796, 1.3115786600578982, 1.2318735450187364, 1.163760792798118, 1.1031574520688756, 1.0507611414822826, 1.0160796151358327, 0.984869999018611, 0.9536765228488017, 0.9309211434972852, 0.9186236042199181, 0.8983356967389292, 0.878043206919611, 0.862750172591433, 0.8505835517002938, 0.8370462048244263, 0.8198215216772196, 0.8130079720549659, 0.79882849613752, 0.8023169539655283, 0.793238334840929, 0.780822803843149, 0.7751873211066453, 0.7706489859318862, 0.7545716004081295, 0.7597844627129955, 0.7401929445994796, 0.7444697715713049, 0.7393698164295952, 0.7351809087572412, 0.7304249222504385, 0.7193317586609465, 0.7133141574197048, 0.7125606561270782], "accuracy": [0.13168670237064362, 0.23365473747253418, 0.3205653131008148, 0.3803988993167877, 0.4135517179965973, 0.45225200057029724, 0.4917448163032532, 0.5371813774108887, 0.5552766919136047, 0.5756174921989441, 0.5909391045570374, 0.6133931875228882, 0.6269977688789368, 0.6409985423088074, 0.64667809009552, 0.658961832523346, 0.6687359809875488, 0.6709813475608826, 0.6761326193809509, 0.6890767216682434, 0.6926429867744446, 0.6909258961677551, 0.7010962963104248, 0.7040021419525146, 0.7038700580596924, 0.7073041796684265, 0.7120591998100281, 0.7135120630264282, 0.7162858247756958, 0.7154933214187622, 0.7220974564552307, 0.7232862114906311, 0.7312111854553223, 0.7293620109558105, 0.7276449799537659, 0.7322678565979004, 0.7280412316322327, 0.7346453666687012, 0.7404569983482361, 0.7405890822410583, 0.7407211661338806], "val_loss": [1.9343244688851493, 1.8888182640075684, 1.8198070526123047, 1.7107955387660436, 1.5522905077253069, 1.362316370010376, 1.1811767646244593, 1.0325703620910645, 0.9272491931915283, 0.8539440291268485, 0.8024976594107491, 0.760934863771711, 0.7347473587308612, 0.7062174592699323, 0.6835028444017682, 0.6648998601096017, 0.6532180649893624, 0.6376989228384835, 0.6262376649039132, 0.6175610678536552, 0.6074763195855277, 0.5989673137664795, 0.5917243957519531, 0.5835964850017002, 0.5790914978299823, 0.5724058151245117, 0.567073004586356, 0.5633269037519183, 0.5571804046630859, 0.5520885671888079, 0.5470330204282489, 0.5435760021209717, 0.5398315531866891, 0.5347523178373065, 0.5315614087241036, 0.5280651365007673, 0.5236832754952567, 0.5230414186205182, 0.5184170348303658, 0.5165920768465314, 0.5179483039038522], "val_accuracy": [0.32899999618530273, 0.4266666769981384, 0.47433334589004517, 0.5193333625793457, 0.5616666674613953, 0.5886666774749756, 0.6159999966621399, 0.6589999794960022, 0.6856666803359985, 0.6963333487510681, 0.6993333101272583, 0.7053333520889282, 0.70333331823349, 0.715666651725769, 0.7200000286102295, 0.7300000190734863, 0.734000027179718, 0.7396666407585144, 0.737666666507721, 0.7423333525657654, 0.746999979019165, 0.7440000176429749, 0.75, 0.7540000081062317, 0.746999979019165, 0.7463333606719971, 0.7526666522026062, 0.7463333606719971, 0.7570000290870667, 0.7630000114440918, 0.7616666555404663, 0.765666663646698, 0.765666663646698, 0.7710000276565552, 0.7670000195503235, 0.7756666541099548, 0.7749999761581421, 0.7699999809265137, 0.7749999761581421, 0.7730000019073486, 0.7673333287239075]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 8, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [6, 2, 3, 0, 2, 6, 8, 3, 8, 3, 3, 4, 8, 1, 0, 6, 0, 3, 7, 8, 2, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 1, 3, 1, 0, 3, 0, 0, 3, 3, 2, 4, 4, 0, 2, 3, 1, 2, 2], [68, 86, 78, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.767714262008667, "mapping_values": [1, 4, 4, 2, 2, 1, 44, 44, 27, 17, 5, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.negative(grad)), tf.math.add(tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), alpha)), tf.math.sqrt(grad)), alpha)), tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.negative(grad), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))))))), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, grad))))), grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, tf.math.sqrt(beta)), tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.287667313083099, 2.2458350294065546, 2.1882592987437937, 2.0982898380998543, 1.9682511920233634, 1.7905282979754094, 1.610190322842848, 1.4359146904998907, 1.3116196116373255, 1.2319339568730532, 1.1638180017628768, 1.1031999573526823, 1.050802459428339, 1.0161061255592696, 0.984762925552796, 0.953712899506037, 0.9309452220102767, 0.9187256261153292, 0.8983691178056558, 0.878032077517665, 0.8627800232840409, 0.8505938270261747, 0.8369870280718775, 0.8197506039354543, 0.8129906511782278, 0.7987494061903601, 0.8023558675951536, 0.7930791663015051, 0.7808870068866783, 0.7750101681981246, 0.7706103561623946, 0.7545810977638894, 0.7597737595342516, 0.7402741320144861, 0.7445140155535396, 0.7394420744925285, 0.7351127912843578, 0.7304377443030557, 0.7193095870478404, 0.7131397185261381, 0.7125919669563461], "accuracy": [0.13168670237064362, 0.23365473747253418, 0.3206973969936371, 0.38053098320961, 0.41368380188941956, 0.45185577869415283, 0.49187690019607544, 0.5370492935180664, 0.5552766919136047, 0.5754854083061218, 0.5912032723426819, 0.6132611036300659, 0.6268656849861145, 0.6409985423088074, 0.6465460062026978, 0.6586976647377014, 0.6675472259521484, 0.6707172393798828, 0.6760005354881287, 0.6886804699897766, 0.6926429867744446, 0.6903975605964661, 0.7018887996673584, 0.7049266695976257, 0.7040021419525146, 0.7073041796684265, 0.7124554514884949, 0.713908314704895, 0.7157574892044067, 0.7160216569900513, 0.7219653725624084, 0.7231541275978088, 0.7313432693481445, 0.7294940948486328, 0.7269845604896545, 0.7318716049194336, 0.7275128960609436, 0.7343811988830566, 0.739928662776947, 0.7411174178123474, 0.7409853339195251], "val_loss": [1.9343244688851493, 1.8888213975088937, 1.8198033741542272, 1.7107845374516077, 1.5522726263318742, 1.3622732503073556, 1.1811742101396834, 1.0326241084507533, 0.9272589002336774, 0.8539812224251884, 0.8025317532675607, 0.7609552145004272, 0.7347571509225028, 0.7061696222850254, 0.6835263967514038, 0.6649244172232491, 0.6533716235842023, 0.6376368658883231, 0.6262538433074951, 0.617476395198277, 0.6074324675968715, 0.5988828114100865, 0.5916672093527657, 0.5834533657346453, 0.5790747914995465, 0.5724561895642962, 0.5670484304428101, 0.5632294927324567, 0.5571779523577008, 0.5519976445606777, 0.5470241989408221, 0.5436474084854126, 0.539805395262582, 0.5346903119768415, 0.5315332072121757, 0.5280548845018659, 0.5239307880401611, 0.5231908219201225, 0.5184157405580793, 0.5165229865482875, 0.5178674118859428], "val_accuracy": [0.32899999618530273, 0.4266666769981384, 0.47433334589004517, 0.5193333625793457, 0.5616666674613953, 0.5879999995231628, 0.6163333058357239, 0.6589999794960022, 0.6859999895095825, 0.6963333487510681, 0.6993333101272583, 0.7053333520889282, 0.70333331823349, 0.715666651725769, 0.7200000286102295, 0.7300000190734863, 0.734000027179718, 0.7396666407585144, 0.737333357334137, 0.7416666746139526, 0.7476666569709778, 0.7440000176429749, 0.75, 0.7556666731834412, 0.746999979019165, 0.7459999918937683, 0.7536666393280029, 0.746666669845581, 0.7559999823570251, 0.7636666893959045, 0.7606666684150696, 0.7663333415985107, 0.7663333415985107, 0.7713333368301392, 0.7670000195503235, 0.7749999761581421, 0.7749999761581421, 0.7696666717529297, 0.7743333578109741, 0.7733333110809326, 0.7673333287239075]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 8, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 2, 3, 0, 2, 6, 2, 4, 8, 3, 9, 4, 8, 1, 0, 6, 0, 4, 7, 8, 2, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 1, 3, 1, 3, 3, 3, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [54, 86, 78, 38, 8], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7674285769462585, "mapping_values": [1, 4, 4, 2, 2, 1, 33, 33, 20, 13, 2, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.multiply(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, grad))))), tf.math.subtract(alpha, grad)), alpha), tf.math.add(beta, grad)), grad))), tf.math.negative(tf.math.divide_no_nan(grad, tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, grad))))))), tf.math.add(beta, beta)), tf.math.sqrt(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.287667313083099, 2.2458351418610185, 2.188260697575293, 2.0982923526270136, 1.9682559602532357, 1.7905259113175727, 1.6101790286011117, 1.435935107850128, 1.311644621985605, 1.2319361289982562, 1.1637977085817666, 1.103167807405588, 1.0507649010072657, 1.0160840390900328, 0.9848528829437788, 0.9537443095477911, 0.9308855082963231, 0.918621911955012, 0.8983624941007478, 0.8779863300828602, 0.862761432956695, 0.8505740671141462, 0.8371310011034613, 0.8198243107904044, 0.8130671294956411, 0.7988375030126333, 0.8022888389718279, 0.7931286066341489, 0.7808141524466415, 0.7751157568383131, 0.7706948657549761, 0.7545249529518487, 0.7597309231144043, 0.7401859781777052, 0.7444582265192696, 0.7393672009579431, 0.7350191741949531, 0.7303199038655451, 0.7191334251934873, 0.713224771000438, 0.7125437068523527], "accuracy": [0.13168670237064362, 0.23365473747253418, 0.3206973969936371, 0.38066306710243225, 0.4138158857822418, 0.45185577869415283, 0.4917448163032532, 0.5373134613037109, 0.5548804402351379, 0.5756174921989441, 0.5906749367713928, 0.6128648519515991, 0.627129852771759, 0.6412627100944519, 0.646149754524231, 0.6592260003089905, 0.6676793098449707, 0.6704530715942383, 0.6760005354881287, 0.6884163022041321, 0.6926429867744446, 0.6910579800605774, 0.7020208835601807, 0.7046625018119812, 0.703209638595581, 0.7074362635612488, 0.7125874757766724, 0.7140403985977173, 0.7161537408828735, 0.7153612375259399, 0.7226257920265198, 0.7230220437049866, 0.7309470176696777, 0.7296261787414551, 0.72672039270401, 0.7318716049194336, 0.7284374833106995, 0.7351737022399902, 0.7400607466697693, 0.7404569983482361, 0.7413815855979919], "val_loss": [1.9343245370047433, 1.8888213975088937, 1.8198036466326033, 1.7107871600559779, 1.5522709574018205, 1.3622778483799525, 1.1812042508806502, 1.0326408658708846, 0.9273223536355155, 0.8539584023611886, 0.8025183847972325, 0.760960578918457, 0.7347905806132725, 0.7061844212668282, 0.6835733311516898, 0.6649252857480731, 0.6532454320362636, 0.6376681668417794, 0.6262639079775129, 0.6176783527646746, 0.6074812582560948, 0.5990065165928432, 0.5916822126933506, 0.5836313452039447, 0.5790320464542934, 0.5724688598087856, 0.5669924872262138, 0.5631568602153233, 0.5572311367307391, 0.5520560911723545, 0.5469323396682739, 0.5435449225561959, 0.5398260525294712, 0.534717321395874, 0.5314727510724749, 0.528219495500837, 0.523929238319397, 0.5232583965573993, 0.5186446053641183, 0.5167027200971331, 0.5175748552594867], "val_accuracy": [0.32899999618530273, 0.4266666769981384, 0.47433334589004517, 0.5193333625793457, 0.5616666674613953, 0.5879999995231628, 0.6163333058357239, 0.6589999794960022, 0.6853333115577698, 0.6963333487510681, 0.6993333101272583, 0.7053333520889282, 0.70333331823349, 0.715666651725769, 0.7200000286102295, 0.7300000190734863, 0.734000027179718, 0.7396666407585144, 0.737333357334137, 0.7426666617393494, 0.746999979019165, 0.7436666488647461, 0.750333309173584, 0.7549999952316284, 0.7473333477973938, 0.7463333606719971, 0.7536666393280029, 0.746999979019165, 0.7559999823570251, 0.7633333206176758, 0.7609999775886536, 0.765666663646698, 0.765999972820282, 0.7716666460037231, 0.7666666507720947, 0.7756666541099548, 0.7743333578109741, 0.7689999938011169, 0.7753333449363708, 0.7736666798591614, 0.7663333415985107]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 8, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 2, 3, 4, 2, 6, 2, 3, 8, 3, 3, 4, 8, 1, 0, 6, 0, 2, 6, 8, 2, 6, 2, 8, 4, 8, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 1, 3, 1, 0, 3, 0, 0, 3, 0, 2, 4, 4, 5, 2, 3, 1, 1, 2], [68, 86, 29, 38, 8], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7668571472167969, "mapping_values": [1, 4, 4, 2, 2, 1, 43, 43, 24, 19, 4, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), grad), tf.math.subtract(alpha, grad)), alpha)))), tf.math.add(beta, tf.math.negative(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(tf.math.negative(grad), tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))), tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))), tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, grad)))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha)))), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.287667313083099, 2.2458348675741573, 2.1882587541694325, 2.0983013848524052, 1.9682685805979405, 1.790545675260453, 1.610190767905558, 1.4358978876112127, 1.3115951417538279, 1.231901597809782, 1.1637823901644408, 1.1031957811384059, 1.050768066076098, 1.0161138913886831, 0.9848531804001641, 0.9537465977961629, 0.930896082810596, 0.9186253111675163, 0.8983514902062971, 0.8780395937728025, 0.8628037899335016, 0.8506706537209671, 0.8370653606204309, 0.8198050707086612, 0.8130324114394021, 0.79873367050903, 0.8023203613814456, 0.7931369157546642, 0.780908759188863, 0.7751107689821332, 0.7707340411931421, 0.7545106616459187, 0.7597512365757372, 0.7402623140926863, 0.7444968533128591, 0.7393766278603987, 0.7351489937725856, 0.7302017945340123, 0.7192297738147307, 0.7132246905172411, 0.7126016658074537], "accuracy": [0.13168670237064362, 0.23365473747253418, 0.3205653131008148, 0.3803988993167877, 0.41368380188941956, 0.4519878625869751, 0.49187690019607544, 0.5370492935180664, 0.5552766919136047, 0.5754854083061218, 0.5910711884498596, 0.6135252714157104, 0.6267336010932922, 0.6409985423088074, 0.6465460062026978, 0.6592260003089905, 0.6680755615234375, 0.6709813475608826, 0.6765288710594177, 0.6890767216682434, 0.6927750706672668, 0.6905296444892883, 0.7016246318817139, 0.7046625018119812, 0.7040021419525146, 0.7077004313468933, 0.7128516435623169, 0.7135120630264282, 0.7161537408828735, 0.7156254053115845, 0.7219653725624084, 0.7224937081336975, 0.7313432693481445, 0.7296261787414551, 0.7265883088111877, 0.7314753532409668, 0.7289658188819885, 0.7353057861328125, 0.7396644949913025, 0.7409853339195251, 0.7409853339195251], "val_loss": [1.9343246051243372, 1.8888190133231026, 1.8198067120143346, 1.7107988085065569, 1.5522871698651994, 1.3623024395533971, 1.181182520730155, 1.0325917516435896, 0.9272344793592181, 0.853941661970956, 0.8025256395339966, 0.7609643595559257, 0.7348473923546928, 0.70620140007564, 0.6835813352039882, 0.664961576461792, 0.6532265288489205, 0.6376757621765137, 0.6262045076915196, 0.6175860847745623, 0.6074311903544835, 0.5990249770028251, 0.5916601930345807, 0.583524329321725, 0.5790310757500785, 0.5724599531718663, 0.5669659546443394, 0.5633659022194999, 0.5571317161832537, 0.551946929522923, 0.5469528606959752, 0.5435879571097237, 0.5398913111005511, 0.5347923551286969, 0.5314442259924752, 0.5281540836606707, 0.5238873277391706, 0.5231530325753349, 0.5185865334102085, 0.5165642499923706, 0.5177088635308402], "val_accuracy": [0.32899999618530273, 0.4266666769981384, 0.47433334589004517, 0.5193333625793457, 0.5619999766349792, 0.5886666774749756, 0.6163333058357239, 0.659333348274231, 0.6856666803359985, 0.6963333487510681, 0.6993333101272583, 0.7053333520889282, 0.7036666870117188, 0.7153333425521851, 0.7200000286102295, 0.7300000190734863, 0.734000027179718, 0.7396666407585144, 0.7369999885559082, 0.7426666617393494, 0.746666669845581, 0.7440000176429749, 0.7506666779518127, 0.7549999952316284, 0.746999979019165, 0.746999979019165, 0.7536666393280029, 0.7459999918937683, 0.7556666731834412, 0.7636666893959045, 0.7599999904632568, 0.765666663646698, 0.7666666507720947, 0.7713333368301392, 0.7670000195503235, 0.7753333449363708, 0.7736666798591614, 0.7689999938011169, 0.7749999761581421, 0.7733333110809326, 0.7680000066757202]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [73, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 5, 5, 3, 0, 6, 2, 6, 8, 3, 2, 8, 2, 1, 3, 1, 6, 2, 7, 8, 9, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [2, 3, 0, 1, 1, 1, 3, 0, 0, 2, 3, 2, 3, 4, 5, 2, 3, 1, 1, 2], [54, 86, 78, 38, 8], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7654285430908203, "mapping_values": [1, 4, 4, 2, 2, 1, 6, 6, 4, 2, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.square(tf.math.add(beta, tf.math.square(tf.math.multiply(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.934168662440429, 2.2479271197504826, 2.3846127909754937, 2.203832097671382, 2.0945589820927064, 1.8424999152570116, 2.2071728677703026, 2.2226081603648185, 1.9654520108101154, 2.057019457762283, 1.8625782243390803, 1.4451270427812186, 1.2069175666302203, 1.082179114582705, 1.006622115626642, 0.8962245450484644, 0.838356460775162, 0.822333497346715, 0.8208885124141924, 0.7985588319313257, 0.7312289645816389, 0.7332882506185125, 0.7015344982196973, 0.6886697569228497, 0.6562934060217036, 0.6445311032518057, 0.6410482280589114, 0.6109592544325527, 0.5889222158527235, 0.5917610158663321, 0.5745206076896359, 0.5596030946531159, 0.5554910724141956, 0.5417750187207364, 0.5291110042095373, 0.5207137587268543, 0.5281582158696083, 0.5204780486517767, 0.5113914213546152, 0.48879465243489184, 0.5519372497992414, 0.47739920301948163, 0.49112797618746806, 0.468141530845238, 0.45190325928890096, 0.4576870570400403], "accuracy": [0.17421740293502808, 0.15229164063930511, 0.1776515692472458, 0.17342491447925568, 0.26918503642082214, 0.39122968912124634, 0.2673358917236328, 0.19019944965839386, 0.30999869108200073, 0.3035266101360321, 0.342491090297699, 0.5135384798049927, 0.5797120332717896, 0.6189407110214233, 0.6342623233795166, 0.6606789231300354, 0.6814159154891968, 0.6799629926681519, 0.6770572066307068, 0.6925109028816223, 0.7096816897392273, 0.7119271159172058, 0.7236824631690979, 0.728701651096344, 0.7437590956687927, 0.748778223991394, 0.7478536367416382, 0.763967752456665, 0.7733456492424011, 0.7684586048126221, 0.7765156626701355, 0.778232753276825, 0.7835160493850708, 0.7895918488502502, 0.7932901978492737, 0.7973847389221191, 0.7973847389221191, 0.7989697456359863, 0.8024039268493652, 0.8115176558494568, 0.7860256433486938, 0.8158763647079468, 0.806630551815033, 0.8175934553146362, 0.8253863453865051, 0.8158763647079468], "val_loss": [1.8511295318603516, 1.9686778613499232, 1.9668822288513184, 1.8999967575073242, 1.4604814052581787, 1.1261613709586007, 1.9787584713527135, 1.624685219355992, 1.246781894138881, 2.0266668455941335, 1.0994987487792969, 0.9532736028943744, 0.8068370308194842, 0.9539369174412319, 0.6554603576660156, 0.6613189152308873, 0.6134313515254429, 0.6737194742475238, 0.59769264289311, 0.6432170527321952, 0.5608562741960798, 0.5294612646102905, 0.5311915533883231, 0.5346886430467878, 0.5394384690693447, 0.5246216229030064, 0.48373522077287945, 0.48542685168130056, 0.4633763006755284, 0.43799154247556416, 0.479336074420384, 0.460206355367388, 0.43896154846463886, 0.42204717227390837, 0.443134605884552, 0.4158222590173994, 0.4801129273005894, 0.40809352908815655, 0.4099617430141994, 0.4453831911087036, 0.4114636012486049, 0.4347355621201651, 0.4190999524933951, 0.4140527674130031, 0.4115771395819528, 0.44669430596487864], "val_accuracy": [0.2356666624546051, 0.10066666454076767, 0.0989999994635582, 0.21666666865348816, 0.4963333308696747, 0.54666668176651, 0.09799999743700027, 0.4410000145435333, 0.5316666960716248, 0.10266666859388351, 0.6019999980926514, 0.6103333234786987, 0.6496666669845581, 0.5896666646003723, 0.6966666579246521, 0.706333339214325, 0.7213333249092102, 0.6636666655540466, 0.706333339214325, 0.6809999942779541, 0.7453333139419556, 0.7516666650772095, 0.7519999742507935, 0.7403333187103271, 0.7379999756813049, 0.7596666812896729, 0.7680000066757202, 0.7789999842643738, 0.7776666879653931, 0.8066666722297668, 0.762666642665863, 0.7726666927337646, 0.8013333082199097, 0.8116666674613953, 0.7826666831970215, 0.8176666498184204, 0.7630000114440918, 0.8199999928474426, 0.8199999928474426, 0.8119999766349792, 0.828000009059906, 0.7983333468437195, 0.8136666417121887, 0.8100000023841858, 0.8169999718666077, 0.8053333163261414]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 8, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [5, 2, 3, 0, 2, 6, 2, 4, 8, 1, 9, 4, 8, 1, 5, 4, 0, 4, 7, 8, 2, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 1, 3, 1, 0, 3, 0, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [54, 86, 9, 38, 8], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7542856931686401, "mapping_values": [1, 4, 4, 2, 2, 1, 20, 20, 12, 8, 3, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.negative(grad)), grad), tf.math.add(alpha, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.pow(tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, alpha)))), tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.math.pow(grad, tf.math.add(beta, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.287665037257938, 2.245764642611408, 2.1879267087308345, 2.097132400829621, 1.9652840361193957, 1.7848902874146597, 1.6029666051290228, 1.4284365600551423, 1.3050141531195167, 1.226448523873871, 1.1589835567119147, 1.099101798047227, 1.0469548437715348, 1.0130105395720792, 0.9819481397317527, 0.9511302154156447, 0.9285133420484193, 0.9163769738092524, 0.8967044120608949, 0.8758941258043897, 0.8612978250799933, 0.8490074964688202, 0.8354797509084714, 0.8183778966060483, 0.811749396551208, 0.7977014500876586, 0.801362455339952, 0.7921235759370693, 0.7799291544822796], "accuracy": [0.13155461847782135, 0.23378682136535645, 0.3213578164577484, 0.3809272348880768, 0.414608359336853, 0.4539690911769867, 0.49332982301712036, 0.5383700728416443, 0.5560691952705383, 0.5772024989128113, 0.59225994348526, 0.6148461103439331, 0.6277902722358704, 0.6427156329154968, 0.6470743417739868, 0.6600185036659241, 0.6695284843444824, 0.6711134314537048, 0.6782459616661072, 0.6902654767036438, 0.6933034062385559, 0.6911900639533997, 0.7021529674530029, 0.7043983340263367, 0.7038700580596924, 0.7077004313468933, 0.7127195596694946, 0.7137762308120728, 0.7165499925613403], "val_loss": [1.9343022618974959, 1.8886404718671526, 1.8191258566720145, 1.708714280809675, 1.5475183895656042, 1.3546784605298723, 1.1724663461957658, 1.024597099849156, 0.9207634244646344, 0.8487497738429478, 0.7984131234032767, 0.7575353213718959, 0.7322178057261876, 0.7038854019982475, 0.6815445593425206, 0.6631558452333722, 0.6521085500717163, 0.6363804680960519, 0.6251101153237479, 0.6169138295309884, 0.6064443928854806, 0.5982948201043266, 0.5906820467540196, 0.582952754838126, 0.578580379486084, 0.5723687069756644, 0.56661057472229, 0.5629370042255947, 0.5569378478186471], "val_accuracy": [0.32866665720939636, 0.4269999861717224, 0.4740000069141388, 0.5196666717529297, 0.5636666417121887, 0.5913333296775818, 0.6183333396911621, 0.6623333096504211, 0.687333345413208, 0.6966666579246521, 0.699999988079071, 0.7053333520889282, 0.7026666402816772, 0.715666651725769, 0.7206666469573975, 0.731333315372467, 0.7360000014305115, 0.7386666536331177, 0.7383333444595337, 0.7433333396911621, 0.7483333349227905, 0.7429999709129333, 0.750333309173584, 0.7549999952316284, 0.7463333606719971, 0.7456666827201843, 0.753333330154419, 0.7459999918937683, 0.7549999952316284]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [73, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 5, 5, 3, 0, 6, 2, 6, 8, 3, 2, 8, 2, 1, 3, 1, 6, 2, 7, 8, 9, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [5, 3, 3, 3, 1, 3, 0, 1, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [48, 86, 89, 38, 8], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 8, 5, 2, 2, 2, 1, 1, 0, 2, 2, 1, 1, 0, 3, 2, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.sqrt(tf.math.add(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))))))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, sigma))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09021265059709549, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [9, 0, 8, 8, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [0, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 2, 3, 0, 2, 6, 2, 3, 8, 3, 9, 4, 2, 1, 0, 0, 0, 6, 7, 8, 2, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 1, 3, 1, 0, 3, 0, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [68, 86, 78, 38, 8], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 33, 33, 20, 13, 4, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.sqrt(tf.math.multiply(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad)), alpha))), tf.math.subtract(grad, alpha)), tf.math.add(beta, tf.math.negative(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))), grad), tf.math.negative(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))), tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), grad)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))))), tf.math.add(beta, beta)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [9431.098171818101, 167279.6416135583, 787665.4876832651, 2157628.579381852, 4669286.731871615, 8442929.903051116], "accuracy": [0.09549596905708313, 0.09919429570436478, 0.09787346422672272, 0.09628847241401672, 0.1018359512090683, 0.1010434553027153], "val_loss": [34314.197544642855, 269454.58035714284, 904193.6785714285, 2137300.3571428573, 4167541.0, 7193680.571428572], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [73, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 2, 3, 0, 2, 4, 2, 3, 8, 3, 3, 4, 8, 1, 0, 6, 0, 3, 7, 8, 2, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 1, 3, 1, 0, 3, 0, 0, 3, 3, 3, 4, 4, 5, 2, 3, 1, 1, 2], [48, 86, 89, 38, 8], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 30, 30, 17, 13, 3, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.multiply(grad, tf.math.negative(tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.sqrt(alpha)), tf.math.add(beta, grad)), alpha)), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.multiply(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.negative(grad), tf.math.add(beta, grad)))))))), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [19527769.84486504, 357771565.2082948, 1699154890.3045833, 4671498466.075287, 10129840471.948223, 18339422179.86739], "accuracy": [0.09536388516426086, 0.09893012791872025, 0.09787346422672272, 0.09642054885625839, 0.10170386731624603, 0.1010434553027153], "val_loss": [72529874.28571428, 579533970.2857143, 1955138194.2857144, 4633478582.857142, 9048641243.428572, 15634790107.428572], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 4, 4, 9, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [57, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [9, 2, 3, 0, 2, 6, 2, 3, 8, 1, 9, 4, 8, 1, 5, 4, 0, 4, 7, 8, 2, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [2, 3, 3, 3, 1, 3, 0, 1, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [54, 86, 78, 38, 8], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 6, 2, 3, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))), tf.math.square(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [19430164425.761684, 2763317196919.834, 48335698737453.62, 338287813725643.75, 1504500232117916.0, 4880669613102413.0], "accuracy": [0.09536388516426086, 0.09893012791872025, 0.09774138033390045, 0.09642054885625839, 0.10170386731624603, 0.10091137140989304], "val_loss": [157225062985.14285, 8475697030290.286, 90973459110765.72, 495923479932342.9, 1857637013070994.2, 5479607783241435.0], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 6, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 2, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 2, 3, 0, 2, 6, 2, 6, 8, 3, 9, 4, 8, 1, 0, 6, 0, 4, 7, 8, 2, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 1, 3, 1, 0, 3, 0, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [68, 39, 78, 38, 8], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [14, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 6, 2, 1, 40, 40, 24, 16, 4, 1, 1, 0, 1, 1, 1, 0, 1, 1], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.sqrt(tf.math.divide_no_nan(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.multiply(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), grad))))), tf.math.subtract(alpha, grad))), alpha), tf.math.add(beta, tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(tf.math.negative(grad), tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(beta, grad)))))))))), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.30299947041688, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [5, 0, 8, 8, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 4, 3, 0, 2, 6, 5, 6, 5, 3, 9, 4, 8, 1, 0, 4, 0, 4, 7, 8, 2, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 1, 3, 1, 3, 3, 0, 0, 3, 3, 2, 4, 3, 5, 2, 3, 1, 1, 2], [54, 86, 78, 38, 8], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 0, 38, 38, 23, 15, 3, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.square(tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.multiply(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), grad)))), tf.math.subtract(tf.math.add(beta, alpha), tf.math.negative(grad)))), tf.math.add(beta, tf.math.pow(alpha, tf.math.negative(tf.math.add(beta, tf.math.pow(grad, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))))))))))), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.304259266001185, 2.3056049048073963, 2.3060556866977477, 2.307529012682321, 2.313204744315308, 2.315999097198055, 2.320046282022416, 2.320618777841294, 2.3289399570902938, 2.3449249689243, 2.3746944687480167, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0874389111995697, 0.08638224750757217, 0.08598599582910538, 0.07991018146276474, 0.07938185334205627, 0.0754193663597107, 0.07766477018594742, 0.08096684515476227, 0.07924976944923401, 0.07515519857406616, 0.07819310575723648, 0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.97224303654262, 1.9738786561148507, 1.9755372319902693, 1.977285521371024, 1.9796182087489538, 1.9821757589067732, 1.98532349722726, 1.9888553619384766, 1.9947658266339983, 2.0073772157941545, 2.054392542157854, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.029999999329447746, 0.023333333432674408, 0.020999999716877937, 0.019999999552965164, 0.026333333924412727, 0.03533333167433739, 0.04766666516661644, 0.07233333587646484, 0.08699999749660492, 0.0989999994635582, 0.09966666996479034, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [2, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [73, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 2, 3, 0, 2, 6, 2, 3, 8, 3, 3, 4, 8, 1, 0, 6, 0, 3, 7, 8, 2, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 1, 3, 1, 0, 3, 0, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [68, 86, 78, 38, 8], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 3, 2, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 8, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [0, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [36, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 2, 5, 0, 2, 6, 2, 3, 5, 9, 3, 4, 8, 1, 0, 6, 0, 3, 7, 8, 2, 6, 2, 0, 2, 0, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 1, 3, 1, 0, 3, 0, 0, 3, 3, 2, 4, 2, 5, 2, 3, 1, 1, 2], [28, 46, 78, 38, 8], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 2, 31, 31, 19, 12, 4, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(grad, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.square(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), alpha)), tf.math.sqrt(grad)))), tf.math.add(beta, alpha)), tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.subtract(grad, tf.math.negative(tf.math.divide_no_nan(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.add(beta, grad))))))))))), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.302999627872024, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 8, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [5, 5, 5, 3, 0, 6, 2, 6, 8, 3, 9, 4, 2, 1, 3, 1, 6, 2, 7, 8, 9, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [2, 3, 1, 1, 1, 3, 3, 0, 0, 2, 3, 2, 3, 4, 5, 2, 3, 1, 1, 2], [54, 86, 78, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08149518072605133, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 5, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [73, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [5, 5, 5, 3, 0, 6, 2, 6, 8, 3, 2, 8, 2, 1, 3, 1, 6, 2, 7, 8, 9, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [5, 3, 3, 3, 1, 3, 0, 1, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [48, 86, 89, 38, 8], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 8, 5, 2, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 3, 2, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.sqrt(grad))), tf.math.add(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: tf.math.square(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 8, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 2, 3, 0, 2, 6, 2, 8, 8, 3, 9, 4, 8, 1, 0, 4, 0, 4, 7, 8, 2, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 3, 3, 1, 3, 0, 1, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [54, 42, 78, 38, 8], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [6, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 21, 21, 13, 8, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.negative(grad), tf.math.add(grad, grad))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(grad))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))))))), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08149518072605133, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 1, 9, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [3, 1, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [27, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 2, 9, 0, 1, 3, 2, 6, 8, 3, 9, 1, 8, 1, 0, 4, 0, 4, 7, 8, 2, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 3, 3, 1, 3, 0, 1, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [58, 70, 78, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 4, 4, 2, 2, 0, 15, 15, 9, 6, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.negative(grad))), tf.math.subtract(tf.math.multiply(grad, tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.sqrt(grad), tf.math.add(beta, grad)), tf.math.add(beta, alpha)))), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.303676718529331, 2.303271412928154, 2.301931186768483, 2.301473123742888, 2.303998995576757, 2.3032661139012456], "accuracy": [0.0882314071059227, 0.09179764986038208, 0.09153348207473755, 0.08981640636920929, 0.08770307898521423, 0.08466517180204391], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 8, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [3, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [5, 5, 5, 3, 0, 6, 2, 6, 2, 3, 3, 4, 2, 1, 3, 1, 6, 2, 7, 8, 9, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 3, 3, 3, 3, 0, 1, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [58, 70, 78, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 5, 5, 3, 2, 1, 9, 9, 6, 3, 0, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.sqrt(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.square(tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.negative(tf.math.divide_no_nan(grad, tf.math.add(beta, grad)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [2.303685404447879, 2.3033002520659345, 2.301974582571348, 2.301533152036474, 2.3040862448730994, 2.3033753936285386], "accuracy": [0.0882314071059227, 0.09166556596755981, 0.09166556596755981, 0.08915598690509796, 0.08757099509239197, 0.08492933213710785], "val_loss": [1.9710241726466589, 1.9710384096418108, 1.971052646636963, 1.9710673604692732, 1.9710830279758997, 1.9711016927446638], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.036666665226221085, 0.036666665226221085, 0.03700000047683716]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 8, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [1, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [28, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 2, 3, 5, 2, 9, 2, 3, 8, 3, 9, 4, 8, 8, 0, 4, 0, 4, 7, 0, 2, 6, 2, 8, 2, 8, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 1, 3, 1, 3, 3, 0, 0, 3, 3, 1, 2, 4, 5, 2, 3, 1, 1, 2], [89, 86, 78, 38, 8], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 6, 6, 5, 1, 1, 21, 21, 14, 7, 2, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha))))), tf.math.add(alpha, tf.math.sqrt(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.multiply(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), grad)))), tf.math.sqrt(alpha)), grad)))), alpha), tf.math.add(beta, grad)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.303676718529331, 2.303271412928154, 2.301931186768483, 2.301473123742888, 2.303998995576757, 2.3032661139012456], "accuracy": [0.0882314071059227, 0.09179764986038208, 0.09153348207473755, 0.08981640636920929, 0.08770307898521423, 0.08466517180204391], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}]