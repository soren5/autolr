[{"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [48, 83, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 0, 2, 1, 9, 3, 5, 6, 9, 8, 9, 1, 2, 0, 3, 0, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 3, 3, 0, 3, 3, 1, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [18, 86, 78, 38, 8], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.8291428685188293, "mapping_values": [1, 4, 4, 2, 2, 1, 14, 14, 11, 3, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(grad), tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.subtract(grad, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))))))))), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.1412467743663615, 2.0047942863684036, 1.3366976088032732, 1.1118706708980384, 0.8508767570565642, 0.8209566104964746, 0.7190203637006717, 0.6905853598424236, 0.6349843746446552, 0.6393960717174403, 0.608571009573888, 0.5708257300096999, 0.5750769467606379, 0.5866359244673369, 0.5329640801273176, 0.5280216772715964, 0.5093568589716949, 0.5105358642940397, 0.496020422611947, 0.47634401186472075, 0.4797456092594196, 0.4658157175298317, 0.45513985426182507, 0.4556394470657545, 0.45673720202252627, 0.43658137049468404, 0.41506295008682037, 0.41383933599409944, 0.4156189036761387, 0.42396225480198185, 0.39907705479168293, 0.4049644139047312], "accuracy": [0.2731475234031677, 0.352529376745224, 0.5192180871963501, 0.5934486985206604, 0.6839255094528198, 0.6922467350959778, 0.7260599732398987, 0.7400607466697693, 0.7560427784919739, 0.7535332441329956, 0.7712323069572449, 0.7791573405265808, 0.7829877138137817, 0.780610203742981, 0.7977809906005859, 0.7947431206703186, 0.8107251524925232, 0.8082155585289001, 0.8140271902084351, 0.819970965385437, 0.8140271902084351, 0.8181217908859253, 0.8253863453865051, 0.8252542614936829, 0.8294808864593506, 0.8367455005645752, 0.8474441766738892, 0.8433496356010437, 0.8404437899589539, 0.8391229510307312, 0.8535200357437134, 0.8457271456718445], "val_loss": [1.9073632785252161, 1.1677276066371374, 1.058917828968593, 0.7932819128036499, 0.5997746671949115, 0.5684572628566197, 0.5320947340556553, 0.5094423975263324, 0.48200408049992155, 0.46878167561122347, 0.44858644689832416, 0.46310492924281527, 0.45780164854867117, 0.43635806867054533, 0.44153923647744314, 0.4555427346910749, 0.3905862399509975, 0.394976692540305, 0.3815671631268093, 0.38936265877314974, 0.39881488255092074, 0.3751623375075204, 0.4088013342448643, 0.3815482514245169, 0.3609979493277414, 0.3714878133365086, 0.35177687236240934, 0.35959931782313753, 0.3774254747799465, 0.35986070122037617, 0.40255349023001535, 0.35842829942703247], "val_accuracy": [0.2773333191871643, 0.4399999976158142, 0.5166666507720947, 0.6583333611488342, 0.70333331823349, 0.7129999995231628, 0.7476666569709778, 0.7763333320617676, 0.781333327293396, 0.7886666655540466, 0.7879999876022339, 0.7793333530426025, 0.781000018119812, 0.8076666593551636, 0.7866666913032532, 0.7926666736602783, 0.8333333134651184, 0.8240000009536743, 0.8289999961853027, 0.8326666951179504, 0.8226666450500488, 0.8453333377838135, 0.8106666803359985, 0.8336666822433472, 0.8486666679382324, 0.846666693687439, 0.8603333234786987, 0.8460000157356262, 0.8376666903495789, 0.8516666889190674, 0.812666654586792, 0.8460000157356262]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [48, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 5, 5, 3, 2, 6, 2, 6, 8, 3, 9, 4, 2, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [0, 3, 1, 3, 1, 3, 3, 2, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [94, 86, 78, 38, 8], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.824571430683136, "mapping_values": [1, 4, 4, 2, 2, 1, 20, 20, 12, 8, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.square(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.divide_no_nan(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.sqrt(tf.math.multiply(tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), alpha)), grad), alpha))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, grad)))))))), beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.297685577380989, 2.186318832680754, 1.8702561605119938, 1.469604138590483, 1.2151514412688855, 1.0106171303342724, 0.9629696576334875, 0.8825581128634103, 0.8452761931316082, 0.7789810811051477, 0.7452634845852553, 0.7207328830932377, 0.6907041644879998, 0.6796859346833038, 0.6928647156200074, 0.631366453347441, 0.5928712585708956, 0.5809893629113524, 0.591389310074961, 0.5678338759910035, 0.5622236731974771, 0.5316034725408009, 0.5203124533287208, 0.5020421047480571, 0.52099657657439, 0.5020406601443471, 0.46315058007720217, 0.4711359992806371, 0.4623461228635065, 0.4787478938141771, 0.4513640688032821, 0.45613749692736366, 0.43939469623417665, 0.43971606211230235, 0.4383451377537745, 0.4085984236221618, 0.4096265913291992, 0.3956107407977568, 0.4010074077824308, 0.39507538050692614, 0.3909995555562775, 0.38148519116905405, 0.3872883924758036, 0.3723465545444189, 0.36474455063054273, 0.36350419704058484, 0.36184696721488996, 0.3634072788647216, 0.34621432540502056, 0.34785567754059105, 0.33612461071823097, 0.3372014115168796, 0.32920366637443177, 0.3234436765417463, 0.3187142177508917, 0.32247320519005696, 0.317276405463082, 0.3162631510649028], "accuracy": [0.2588825821876526, 0.230484738945961, 0.3747193217277527, 0.4850085973739624, 0.5647866725921631, 0.6221106648445129, 0.6365077495574951, 0.6729626059532166, 0.6841896772384644, 0.7057191729545593, 0.7113987803459167, 0.7246070504188538, 0.7446836829185486, 0.7430986762046814, 0.739400327205658, 0.7640998363494873, 0.7763835787773132, 0.7786290049552917, 0.7663452625274658, 0.7807422876358032, 0.7869502305984497, 0.7987055778503418, 0.8024039268493652, 0.8105930685997009, 0.8017435073852539, 0.8136309385299683, 0.8248580098152161, 0.8181217908859253, 0.821820080280304, 0.8158763647079468, 0.8300092220306396, 0.8255184292793274, 0.8376700282096863, 0.8341038227081299, 0.8298771381378174, 0.8409721255302429, 0.8438779711723328, 0.8510104417800903, 0.8515387773513794, 0.8451988101005554, 0.845859169960022, 0.8549728989601135, 0.8532558679580688, 0.8532558679580688, 0.854708731174469, 0.8556333184242249, 0.8574824929237366, 0.8589354157447815, 0.8656716346740723, 0.8601241707801819, 0.8634262084960938, 0.8676528930664062, 0.8696341514587402, 0.8751816153526306, 0.8766345381736755, 0.8747853636741638, 0.8755778670310974, 0.8779553771018982], "val_loss": [2.0382395471845354, 1.4524782044546944, 1.3054824216025216, 0.8891843046460833, 0.735930153301784, 0.7274581875119891, 0.6600401060921806, 0.5971614462988717, 0.5570777995245797, 0.5388132504054478, 0.5126659018652779, 0.5318151542118618, 0.49381342955998014, 0.5307755810873849, 0.47275704996926443, 0.45589092799595426, 0.43146964481898714, 0.423856931073325, 0.4342248865536281, 0.41026322330747333, 0.4116249850818089, 0.4359223587172372, 0.3987188935279846, 0.4153308527810233, 0.383424494947706, 0.38412002154759, 0.41230723687580656, 0.376050523349217, 0.3786903875214713, 0.3771320496286665, 0.3617286852427891, 0.3861063207898821, 0.3630291053227016, 0.4007787619318281, 0.35540181398391724, 0.35824560267584665, 0.36190623896462576, 0.34502284015928, 0.3484630925314767, 0.3648942453520639, 0.34089772190366474, 0.34006390401295256, 0.33869372946875437, 0.3597090244293213, 0.3449407305036272, 0.3450379967689514, 0.3386543478284563, 0.3407399994986398, 0.34920636245182585, 0.34151982409613474, 0.34543431656701223, 0.33062647921698435, 0.33483053956712994, 0.33869063002722605, 0.33638326610837666, 0.3516223430633545, 0.3359726667404175, 0.33722369159970966], "val_accuracy": [0.19633333384990692, 0.3813333213329315, 0.5099999904632568, 0.6323333382606506, 0.656000018119812, 0.6840000152587891, 0.7039999961853027, 0.718666672706604, 0.7519999742507935, 0.7583333253860474, 0.762333333492279, 0.7566666603088379, 0.7716666460037231, 0.7716666460037231, 0.7799999713897705, 0.7903333306312561, 0.8026666641235352, 0.8086666464805603, 0.8186666369438171, 0.8140000104904175, 0.8166666626930237, 0.7933333516120911, 0.8206666707992554, 0.8183333277702332, 0.8363333344459534, 0.8396666646003723, 0.8236666917800903, 0.8383333086967468, 0.8460000157356262, 0.8383333086967468, 0.8479999899864197, 0.8259999752044678, 0.8553333282470703, 0.8296666741371155, 0.8496666550636292, 0.8476666808128357, 0.8410000205039978, 0.856333315372467, 0.8526666760444641, 0.8463333249092102, 0.8560000061988831, 0.8569999933242798, 0.8603333234786987, 0.8486666679382324, 0.859333336353302, 0.859000027179718, 0.8619999885559082, 0.8579999804496765, 0.859000027179718, 0.8586666584014893, 0.8553333282470703, 0.8650000095367432, 0.8679999709129333, 0.8600000143051147, 0.8659999966621399, 0.8510000109672546, 0.8646666407585144, 0.8616666793823242]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [48, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 5, 2, 3, 2, 6, 2, 6, 8, 3, 9, 4, 2, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 1, 3, 1, 3, 3, 1, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [18, 86, 78, 38, 8], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.8234285712242126, "mapping_values": [1, 4, 4, 2, 2, 1, 21, 21, 12, 9, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.square(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.sqrt(tf.math.multiply(tf.math.add(beta, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), alpha)), grad), alpha))), tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, grad)))), alpha))), tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2974057855103482, 2.213325190411866, 1.8005148945798208, 1.3258370804890602, 1.1625063765585903, 1.0218227581813462, 0.9209409535458658, 0.8849588895927346, 0.8221167249450311, 0.7646892330807434, 0.7428660476212456, 0.6884800361179326, 0.6788824002630345, 0.7061098761499329, 0.6439278255899616, 0.6561977365989695, 0.6002169167045999, 0.5729663895578149, 0.5692877980145198, 0.5732249076363906, 0.5460725714659348, 0.5350508272624239, 0.5125486621405108, 0.4999580398298384, 0.5076308305064181, 0.5011988414898997, 0.4789288392975157, 0.47815538906796007, 0.45967411735133096, 0.4718418029305359, 0.45966226731655446, 0.4601779158333305, 0.4348852369118014, 0.4289363888528416, 0.42995470045044626, 0.4250782546885592], "accuracy": [0.2592788338661194, 0.2172764539718628, 0.3889842927455902, 0.5085193514823914, 0.5789195895195007, 0.6213181614875793, 0.6462818384170532, 0.666358470916748, 0.691850483417511, 0.7092854380607605, 0.7217012047767639, 0.7386078238487244, 0.7442874312400818, 0.7390040755271912, 0.7485140562057495, 0.7512878179550171, 0.7738739848136902, 0.7796856164932251, 0.783119797706604, 0.7819310426712036, 0.789988100528717, 0.798309326171875, 0.8033285140991211, 0.8047813773155212, 0.8072909712791443, 0.8090080618858337, 0.8182538747787476, 0.819442629814148, 0.8208954930305481, 0.8185180425643921, 0.8325188159942627, 0.8298771381378174, 0.8384625315666199, 0.8334434032440186, 0.8345000743865967, 0.8425571322441101], "val_loss": [2.047056334359305, 1.5626679488590784, 1.1047834668840681, 0.7340224470411029, 0.790786623954773, 0.6444788319723946, 0.6770462308611188, 0.5747436625616891, 0.5383835179465157, 0.5664855752672467, 0.5066440446036202, 0.4771490607942854, 0.516365681375776, 0.5160691227231707, 0.526743974004473, 0.4753234897341047, 0.4348214268684387, 0.435977714402335, 0.4258207934243338, 0.4152013233729771, 0.41511627605983187, 0.4291818652834211, 0.43135576588766916, 0.392118011202131, 0.3911032846995762, 0.39848488569259644, 0.4053363544600351, 0.38661121470587595, 0.3843993714877537, 0.39070598568235126, 0.37089866399765015, 0.3702523538044521, 0.3690177287374224, 0.37846364293779644, 0.36871052639825, 0.3827849881989615], "val_accuracy": [0.19599999487400055, 0.4483333230018616, 0.48399999737739563, 0.6809999942779541, 0.6589999794960022, 0.7133333086967468, 0.6869999766349792, 0.737333357334137, 0.7636666893959045, 0.7383333444595337, 0.7643333077430725, 0.781333327293396, 0.7563333511352539, 0.7609999775886536, 0.7419999837875366, 0.784333348274231, 0.8056666851043701, 0.8043333292007446, 0.8080000281333923, 0.8109999895095825, 0.812666654586792, 0.8046666383743286, 0.8106666803359985, 0.8289999961853027, 0.8339999914169312, 0.8349999785423279, 0.8233333230018616, 0.831333339214325, 0.8423333168029785, 0.8356666564941406, 0.8453333377838135, 0.8389999866485596, 0.8399999737739563, 0.8429999947547913, 0.8410000205039978, 0.8323333263397217]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [48, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 0, 1, 2, 0, 9, 5, 6, 9, 3, 9, 3, 6, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 1, 3, 1, 3, 3, 1, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [18, 86, 78, 38, 8], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.8191428780555725, "mapping_values": [1, 4, 4, 2, 2, 1, 9, 9, 5, 4, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(grad), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(tf.math.negative(grad), alpha))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.139904588362513, 2.0512726022236385, 1.5397747145541796, 1.2953097546467487, 0.9269424065339362, 0.798071951402287, 0.7474381999175279, 0.7030111759991583, 0.6456851416953, 0.6676171614021248, 0.6203144673406172, 0.5927592990515239, 0.5919320704820149, 0.5779989031185926, 0.5383926779208891, 0.551086296388549, 0.5259128581806811, 0.5313825582028254, 0.5125310963541053, 0.5020772870096154, 0.49345034001887894, 0.48603359247006606, 0.48122330900149307, 0.481662341431541], "accuracy": [0.2727513015270233, 0.3319244384765625, 0.46229031682014465, 0.5486725568771362, 0.6536785364151001, 0.6913221478462219, 0.7132478952407837, 0.7312111854553223, 0.7489103078842163, 0.7427024245262146, 0.7663452625274658, 0.7824593782424927, 0.7815347909927368, 0.7885351777076721, 0.7942147850990295, 0.7895918488502502, 0.8000264167785645, 0.8024039268493652, 0.8095363974571228, 0.8115176558494568, 0.81112140417099, 0.8164047002792358, 0.8211596608161926, 0.8157442808151245], "val_loss": [1.8619836398533411, 1.213881492614746, 1.1862382548195975, 0.7016732352120536, 0.596551809992109, 0.5600329467228481, 0.5796431813921247, 0.5317219836371285, 0.49787586075919016, 0.47208118438720703, 0.4447440675326756, 0.45529426847185406, 0.4549097333635603, 0.429130528654371, 0.42066714593342375, 0.4468350240162441, 0.41529507296425955, 0.4140248554093497, 0.39935845136642456, 0.40849209683282034, 0.41287469012396677, 0.41598726170403616, 0.41570052930286955, 0.39659868819372995], "val_accuracy": [0.27399998903274536, 0.5556666851043701, 0.5056666731834412, 0.6896666884422302, 0.7136666774749756, 0.7323333621025085, 0.7226666808128357, 0.7480000257492065, 0.7673333287239075, 0.7866666913032532, 0.7919999957084656, 0.796999990940094, 0.8019999861717224, 0.8216666579246521, 0.8146666884422302, 0.800000011920929, 0.8180000185966492, 0.8159999847412109, 0.8299999833106995, 0.8186666369438171, 0.8166666626930237, 0.8113333582878113, 0.815666675567627, 0.8226666450500488]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [32, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 5, 2, 3, 2, 6, 2, 6, 8, 6, 9, 4, 2, 2, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 1, 3, 0, 2, 3, 1, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [18, 86, 78, 38, 8], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7825714349746704, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2781066166458666, 2.205420001119025, 2.0684116418099343, 1.8352829328444278, 1.5517626630946582, 1.3445479338903783, 1.2065250708395228, 1.1060081036052116, 1.0410699680292093, 0.9883395723694461, 0.9379102065736088, 0.9114689078581032, 0.8827773607984872, 0.8622941642373765, 0.8456355982751989, 0.8252957909964709, 0.8096485424114177, 0.7937758325223578, 0.7903974244009155, 0.7730625792028976, 0.7602658919717469, 0.748330001636755, 0.7494447942753792, 0.7395176749502773, 0.7329865439047415, 0.7215086930558005, 0.7182384559255093, 0.7007571923781568, 0.7063024149531811, 0.6920948342451283, 0.6929625247794214, 0.6940757273651463, 0.6857446142947276, 0.6774027746870942, 0.6772572169954498, 0.6655418724904144, 0.6649478242980207, 0.656172862661954, 0.6548084384414734, 0.6428809881194582, 0.6568946173760744, 0.6456987977956878, 0.6364380876149767], "accuracy": [0.15149913728237152, 0.28899750113487244, 0.39307886362075806, 0.4349491596221924, 0.501518964767456, 0.5460308790206909, 0.5815612077713013, 0.6149781942367554, 0.635979413986206, 0.6528860330581665, 0.6695284843444824, 0.6713775992393494, 0.6808875799179077, 0.6856426000595093, 0.6934354901313782, 0.7043983340263367, 0.7094175219535828, 0.7143045663833618, 0.7144366502761841, 0.7172104120254517, 0.7228899598121643, 0.72672039270401, 0.7219653725624084, 0.7360982894897461, 0.7343811988830566, 0.7326641082763672, 0.7358341217041016, 0.7460044622421265, 0.7397965788841248, 0.7473253011703491, 0.7466648817062378, 0.7470611333847046, 0.7494386434555054, 0.7512878179550171, 0.7508915662765503, 0.7474573850631714, 0.7607977986335754, 0.7544577717781067, 0.7563069462776184, 0.7640998363494873, 0.7585523724555969, 0.7621186375617981, 0.7642319202423096], "val_loss": [1.9122324671064104, 1.8183976582118444, 1.6308303901127406, 1.348900556564331, 1.0834330490657262, 0.9168734209878104, 0.8164300748280117, 0.753456541470119, 0.7136188745498657, 0.6799116815839495, 0.652106625693185, 0.6333444969994682, 0.6168415035520282, 0.6021405969347272, 0.5942907333374023, 0.578376122883388, 0.5789612020765033, 0.5644390412739345, 0.5607372522354126, 0.5527439287730626, 0.5489459208079747, 0.5402900491441999, 0.5382523025785174, 0.5293080295835223, 0.5282232420785087, 0.5201610497065953, 0.5168791668755668, 0.5159837177821568, 0.5130199534552438, 0.5024595601218087, 0.5031376225607735, 0.4954493386404855, 0.4953760419573103, 0.4902897221701486, 0.4976728473390852, 0.4826196091515677, 0.48240108149392263, 0.47833047594342915, 0.47579448563711985, 0.47923125539507183, 0.47762058462415424, 0.4693739414215088, 0.4732504742486136], "val_accuracy": [0.390666663646698, 0.49033331871032715, 0.5633333325386047, 0.6026666760444641, 0.6553333401679993, 0.6800000071525574, 0.6983333230018616, 0.7070000171661377, 0.7136666774749756, 0.7239999771118164, 0.7250000238418579, 0.7306666374206543, 0.7416666746139526, 0.7453333139419556, 0.7516666650772095, 0.753333330154419, 0.7556666731834412, 0.7603333592414856, 0.7616666555404663, 0.7670000195503235, 0.765999972820282, 0.762666642665863, 0.7616666555404663, 0.7726666927337646, 0.7676666378974915, 0.7723333239555359, 0.7760000228881836, 0.777999997138977, 0.7693333625793457, 0.7773333191871643, 0.7746666669845581, 0.7803333401679993, 0.777999997138977, 0.7796666622161865, 0.7816666960716248, 0.7910000085830688, 0.7876666784286499, 0.7960000038146973, 0.7876666784286499, 0.7923333048820496, 0.7893333435058594, 0.7933333516120911, 0.7913333177566528]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [12, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 6, 2, 0, 9, 2, 5, 6, 2, 3, 9, 3, 6, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 1, 3, 1, 3, 3, 1, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [18, 86, 78, 38, 8], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.477142870426178, "mapping_values": [1, 4, 4, 2, 2, 1, 17, 17, 11, 6, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))), tf.math.add(grad, grad))), tf.math.add(beta, tf.math.square(tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(tf.math.add(beta, tf.math.multiply(grad, alpha)), grad))))), tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.302319236608497, 2.3010063877415585, 2.29836813129092, 2.2983100691082265, 2.295905310574492, 2.2965232089935372, 2.2961521859749072, 2.2954589253356192, 2.293472583126068, 2.2931822556483197, 2.2922414772231203, 2.2921729805510136, 2.28790536035148, 2.286870188449179, 2.288593819049749, 2.286335263695022, 2.285823941844849, 2.2845021436369066, 2.2830092008827765, 2.2825994871044046, 2.2805105099635843, 2.279288196796754, 2.278482957271112, 2.2779193405367524, 2.277535231578556, 2.2758496037217304, 2.2735246990996423, 2.2732934151595185, 2.2701601134693115, 2.2698955406145633, 2.2705110837880724, 2.270652525492033, 2.2676534416212335, 2.2668561479434706, 2.2659732476044105, 2.2659047944843964, 2.2636080461486205, 2.263066686391673, 2.2611940312048606, 2.2597511967868225, 2.2594478613727866, 2.2564323315956116, 2.255336872197067, 2.2548233697191127, 2.253930984817523, 2.2539876774553735, 2.2513483272898136, 2.2510120890096763, 2.2491346349994568, 2.2474923041581385, 2.247416106480901, 2.246303446430493, 2.2456192489407867, 2.2451693544046454, 2.2426239902852565, 2.239705447334387, 2.2387668339489095, 2.2365796420520967, 2.235477397470521, 2.2352652297815423, 2.234546566305537, 2.2324988274227247, 2.2321208165762934, 2.228678053459235, 2.227629453183921, 2.2257087524493673, 2.2240553487639905, 2.2233225515789092, 2.222279912177456, 2.2214540597580332, 2.2199142411274444, 2.219320986012993, 2.2161073107461826, 2.214478368914091, 2.2127390566944145, 2.210012565026304, 2.2077498055562494, 2.2068866680736288, 2.2070459798027606, 2.202045565031901, 2.201094196551606, 2.2010315105096616, 2.197288967063792, 2.197420728677425, 2.196632508320847, 2.1934630786108222, 2.191871202538404, 2.188160204726786, 2.1872959807406893, 2.185168468815193, 2.1837494867415774, 2.17993804561684, 2.177740931589653, 2.1779230614978213, 2.1762051621070393, 2.174448449172994, 2.172340542491338, 2.1697964319983147, 2.1696235547527394, 2.1668246232948407], "accuracy": [0.09074098616838455, 0.0956280529499054, 0.09959053993225098, 0.09906221181154251, 0.10540219396352768, 0.10540219396352768, 0.10579843819141388, 0.10791176557540894, 0.11121384054422379, 0.1146479994058609, 0.11662924289703369, 0.11781799048185349, 0.12389380484819412, 0.1298375427722931, 0.1290450394153595, 0.13155461847782135, 0.13498876988887787, 0.14040417969226837, 0.13868708908557892, 0.1402720957994461, 0.1500462293624878, 0.14714039862155914, 0.15281997621059418, 0.15638621151447296, 0.15559370815753937, 0.16497160494327545, 0.16893409192562103, 0.16510368883609772, 0.17197199165821075, 0.17500990629196167, 0.1736890822649002, 0.1748778223991394, 0.1822744756937027, 0.18438778817653656, 0.1872936189174652, 0.1850482076406479, 0.19231277704238892, 0.19284109771251678, 0.20472857356071472, 0.204860657453537, 0.19931316375732422, 0.204860657453537, 0.2145027071237564, 0.22163519263267517, 0.2164839506149292, 0.21357811987400055, 0.2230881005525589, 0.23074890673160553, 0.22837141156196594, 0.23180557787418365, 0.23656055331230164, 0.2390701323747635, 0.23061682283878326, 0.2390701323747635, 0.24184387922286987, 0.24435345828533173, 0.25637298822402954, 0.25399550795555115, 0.2619204819202423, 0.2599392533302307, 0.25980716943740845, 0.2654867172241211, 0.2665433883666992, 0.2731475234031677, 0.2728833854198456, 0.26641130447387695, 0.27737417817115784, 0.2785629332065582, 0.27618545293807983, 0.28318583965301514, 0.2802800238132477, 0.28318583965301514, 0.2845066785812378, 0.2896578907966614, 0.2867520749568939, 0.29480913281440735, 0.2975828945636749, 0.29705455899238586, 0.2953374683856964, 0.3127724230289459, 0.3066965937614441, 0.31224408745765686, 0.31343284249305725, 0.30260202288627625, 0.30722492933273315, 0.3171311616897583, 0.3159424066543579, 0.3140932619571686, 0.32003697752952576, 0.32122573256492615, 0.32360321283340454, 0.32981112599372864, 0.32703739404678345, 0.32360321283340454, 0.32967904210090637, 0.33166027069091797, 0.3329811096191406, 0.33099988102912903, 0.3291507065296173, 0.3346982002258301], "val_loss": [1.9699852807181222, 1.9689722742353166, 1.9679649216788155, 1.966958454677037, 1.965963636125837, 1.964973313467843, 1.9639769281659807, 1.9629808153424944, 1.961991446358817, 1.9609983307974679, 1.9600110735212053, 1.9590159824916296, 1.9580165999276298, 1.957035677773612, 1.9560585703168596, 1.9550833702087402, 1.9541006769452776, 1.953108787536621, 1.9521123341151647, 1.9511305264064245, 1.9501372746058874, 1.9491472925458635, 1.948148318699428, 1.9471426691327776, 1.9461447170802526, 1.9451371601649694, 1.9441229275294714, 1.9431111471993583, 1.942085129874093, 1.941056728363037, 1.9400273731776647, 1.9389993122645788, 1.937971728188651, 1.9369227545601981, 1.9358908789498466, 1.934835774557931, 1.9337589400155204, 1.9326804706028529, 1.931595802307129, 1.9305112702505929, 1.9294167927333288, 1.9283084869384766, 1.927194254738944, 1.9260847227913993, 1.9249516214643205, 1.9238190650939941, 1.9226696150643485, 1.921513557434082, 1.9203392437526159, 1.9191631589617049, 1.9179775374276298, 1.9167861938476562, 1.9155703953334264, 1.9143531663077218, 1.913125855582101, 1.9118682316371374, 1.91059752873012, 1.9093132019042969, 1.9080239704677038, 1.9067284039088659, 1.9054204395839147, 1.904083251953125, 1.9027485847473145, 1.9013853754316057, 1.9000099727085658, 1.8986133166721888, 1.8971972465515137, 1.8957668031964983, 1.89432920728411, 1.8928858212062292, 1.8914249965122767, 1.889953885759626, 1.888451167515346, 1.8869277409144811, 1.8853932108197893, 1.8838347707475935, 1.8822622980390276, 1.8806639398847307, 1.8790489605494909, 1.8773884773254395, 1.8757133483886719, 1.8740433284214564, 1.8723175185067313, 1.8706077166966029, 1.8688626289367676, 1.8670684950692313, 1.8652749061584473, 1.8634452819824219, 1.8615978104727608, 1.8597289494105749, 1.857846464429583, 1.8559085300990514, 1.8539479119437081, 1.8519656998770577, 1.849975313459124, 1.847961357661656, 1.845935685294015, 1.8438718659537179, 1.8417908804757255, 1.8396727016993932], "val_accuracy": [0.04533333331346512, 0.05166666582226753, 0.055666666477918625, 0.06266666948795319, 0.06966666877269745, 0.07666666805744171, 0.08666666597127914, 0.09466666728258133, 0.10100000351667404, 0.109333336353302, 0.11666666716337204, 0.12666666507720947, 0.13600000739097595, 0.14800000190734863, 0.1613333374261856, 0.17033334076404572, 0.18199999630451202, 0.19200000166893005, 0.20233333110809326, 0.21133333444595337, 0.21933333575725555, 0.2266666740179062, 0.23600000143051147, 0.24433332681655884, 0.25066667795181274, 0.25866666436195374, 0.2693333327770233, 0.2770000100135803, 0.28600001335144043, 0.2913333475589752, 0.29766666889190674, 0.30533334612846375, 0.31333333253860474, 0.31933334469795227, 0.32366666197776794, 0.32733333110809326, 0.33266666531562805, 0.335999995470047, 0.3400000035762787, 0.3449999988079071, 0.34833332896232605, 0.3513333201408386, 0.35633334517478943, 0.359333336353302, 0.36399999260902405, 0.367000013589859, 0.3683333396911621, 0.3683333396911621, 0.3709999918937683, 0.3733333349227905, 0.3766666650772095, 0.38066667318344116, 0.3816666603088379, 0.38466668128967285, 0.3869999945163727, 0.3883333206176758, 0.38966667652130127, 0.3919999897480011, 0.39366665482521057, 0.3956666588783264, 0.398333340883255, 0.4000000059604645, 0.40299999713897705, 0.4050000011920929, 0.40666666626930237, 0.4086666703224182, 0.4103333353996277, 0.41233333945274353, 0.4163333475589752, 0.4169999957084656, 0.4193333387374878, 0.42133334279060364, 0.42399999499320984, 0.42533332109451294, 0.4266666769981384, 0.42933332920074463, 0.4323333203792572, 0.4333333373069763, 0.43566668033599854, 0.437666654586792, 0.4403333365917206, 0.4416666626930237, 0.4429999887943268, 0.4436666667461395, 0.44433334469795227, 0.4449999928474426, 0.44566667079925537, 0.4466666579246521, 0.44699999690055847, 0.4483333230018616, 0.4503333270549774, 0.45133334398269653, 0.45366665720939636, 0.4543333351612091, 0.4556666612625122, 0.4569999873638153, 0.4583333432674408, 0.4596666693687439, 0.4606666564941406, 0.46266666054725647]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [3, 83, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 8, 8, 0, 2, 9, 4, 1, 9, 3, 0, 3, 6, 0, 2, 1, 6, 2, 3, 1, 5, 9, 2, 2, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 2, 1, 3, 1, 3, 3, 1, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [18, 86, 78, 38, 8], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.16599999368190765, "mapping_values": [1, 4, 4, 2, 2, 1, 5, 5, 3, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(grad), tf.math.add(alpha, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(beta)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.302692957526547, 2.30228904801715, 2.3005540330002825, 2.301401127283804, 2.2998658085952677, 2.30135911381114, 2.3019149537414623, 2.302136286233064, 2.3009720639372544, 2.3016368980972035, 2.301521749229416, 2.302383436487178, 2.2991202711161525, 2.298683116968518, 2.3012733609684863, 2.2999192420376007, 2.3002760690893904, 2.2999160769057863, 2.2993880581972292, 2.2997369801505303, 2.2985409291161205, 2.2982257226234286, 2.2984365875600368, 2.2985889367171723, 2.2990650416144827, 2.2982414177836774, 2.296957318021668, 2.2975029128181337, 2.2952955022007484, 2.295975071894825, 2.2975547156864864, 2.2984376114593474, 2.296303356863709, 2.296634508177526, 2.296274867087402, 2.297392346493367, 2.296368827184965, 2.2967340243317746, 2.2957097607014156, 2.2951893641129617, 2.295914850844652, 2.294001748769385, 2.2938077529785796, 2.2939339177231544, 2.294605462589851, 2.2953602306248566, 2.294006965415762, 2.2947338664725376, 2.2941280085538844, 2.292835884846244, 2.2942902361948287, 2.2939621476984735, 2.294708633403957, 2.2948445385756697, 2.293518000967892, 2.2924616201726, 2.2924265056600532, 2.2912683002291545, 2.2912650517405866, 2.292126327253147, 2.2924110078855735, 2.2919852647956462, 2.292844258594223, 2.290953624549244, 2.290700837936321, 2.2902786004907028, 2.2904599878719027, 2.29134242101006, 2.2906938066508995, 2.291196722474789, 2.290557657707133, 2.291414940818552, 2.290183113897009, 2.2903249411771265, 2.289411340013644, 2.2886473610731493, 2.2878155420170074, 2.2883691274101046, 2.2898261615739064, 2.2871467320201986, 2.2876660082523204, 2.28860744112408, 2.286825016300361, 2.2876336507163644, 2.2887910596131804, 2.2879986259458938, 2.28759785061263, 2.286558919500256, 2.286662299131374, 2.2865469260474613, 2.2863822287225832, 2.2860945152206633, 2.285004927796805, 2.2871605045586656, 2.286653036517616, 2.2870707618341535, 2.286039392473581, 2.285849952521404, 2.287097761108576, 2.2866849748449964], "accuracy": [0.08968432247638702, 0.09325055778026581, 0.09602430462837219, 0.09232597798109055, 0.09576013684272766, 0.09470347315073013, 0.09259014576673508, 0.09179764986038208, 0.09298639744520187, 0.09628847241401672, 0.09311848133802414, 0.09153348207473755, 0.09576013684272766, 0.10130762308835983, 0.10011887550354004, 0.0956280529499054, 0.09879804402589798, 0.09893012791872025, 0.09945846349000931, 0.09377889335155487, 0.09945846349000931, 0.10276053100824356, 0.09932637959718704, 0.10210011899471283, 0.09932637959718704, 0.09853387624025345, 0.1018359512090683, 0.10302469879388809, 0.10342095047235489, 0.10328886657953262, 0.1002509593963623, 0.10328886657953262, 0.1072513535618782, 0.10249637067317963, 0.10619468986988068, 0.107647605240345, 0.10659094154834747, 0.10830801725387573, 0.10936468094587326, 0.10817593336105347, 0.10210011899471283, 0.10830801725387573, 0.108440101146698, 0.11121384054422379, 0.11081759631633759, 0.108440101146698, 0.1088363528251648, 0.11068551242351532, 0.11227050423622131, 0.11636507511138916, 0.10685510188341141, 0.11174217611551285, 0.11121384054422379, 0.11055342853069305, 0.11702549457550049, 0.11240258812904358, 0.11345925182104111, 0.11306300014257431, 0.11768590658903122, 0.11953506618738174, 0.11913882195949554, 0.12098798155784607, 0.11966715008020401, 0.12178047746419907, 0.11979923397302628, 0.1154404953122139, 0.12270505726337433, 0.11610091477632523, 0.11913882195949554, 0.11874257028102875, 0.11953506618738174, 0.11874257028102875, 0.12349755316972733, 0.11913882195949554, 0.11927089840173721, 0.12376172095537186, 0.1220446452498436, 0.1302337795495987, 0.12455421686172485, 0.12468630075454712, 0.12891295552253723, 0.12798838317394257, 0.12970545887947083, 0.12719587981700897, 0.12323339283466339, 0.12838461995124817, 0.12930920720100403, 0.12230881303548813, 0.1356491893529892, 0.13300752639770508, 0.13142253458499908, 0.13195087015628815, 0.13313961029052734, 0.1290450394153595, 0.13815876841545105, 0.1302337795495987, 0.13195087015628815, 0.13393211364746094, 0.1306300312280655, 0.12996962666511536], "val_loss": [1.9708407265799386, 1.9706756728036063, 1.970511027744838, 1.970346314566476, 1.9701830318995885, 1.970020157950265, 1.9698553766523088, 1.9696903228759766, 1.9695265633719308, 1.9693622589111328, 1.9691980225699288, 1.9690335818699427, 1.9688678468976701, 1.968705381665911, 1.968543257032122, 1.9683819498334612, 1.9682200976780482, 1.9680571556091309, 1.967893464224679, 1.96773099899292, 1.9675687381199427, 1.9674065453665597, 1.9672425133841378, 1.96707854952131, 1.9669171060834612, 1.9667554582868303, 1.9665929930550712, 1.9664319583347865, 1.9662694249834334, 1.9661075047084264, 1.965945107596261, 1.9657837322780065, 1.96562283379691, 1.9654605729239327, 1.965301786150251, 1.9651405470711845, 1.9649781499590193, 1.9648160253252303, 1.9646541731698173, 1.9644936152866908, 1.964332444327218, 1.964170251573835, 1.9640088081359863, 1.963848658970424, 1.9636870111737932, 1.9635268620082311, 1.9633643967764718, 1.963203293936593, 1.9630415780203683, 1.9628829956054688, 1.9627229826790946, 1.9625633103506905, 1.9624019350324358, 1.962242262704032, 1.9620822497776575, 1.9619195801871163, 1.9617588860648019, 1.9615988731384277, 1.9614391326904297, 1.9612796647208077, 1.9611195155552454, 1.9609601838248116, 1.960799012865339, 1.9606387274605888, 1.960479395730155, 1.9603206770760673, 1.9601590973990304, 1.9599970408848353, 1.9598377091544015, 1.959676946912493, 1.9595187050955636, 1.9593593052455358, 1.9591989517211914, 1.9590370995657784, 1.9588777678353446, 1.9587178911481584, 1.9585572651454382, 1.9583968435014998, 1.9582374436514718, 1.958075727735247, 1.9579148292541504, 1.9577538626534599, 1.9575926916939872, 1.9574335643223353, 1.9572741644723075, 1.9571137428283691, 1.9569533211844308, 1.9567928314208984, 1.9566328866141183, 1.956472669328962, 1.956312928880964, 1.9561500549316406, 1.9559886796133858, 1.9558277130126953, 1.9556678363255091, 1.9555072103227888, 1.955348014831543, 1.955188274383545, 1.9550273759024483, 1.954868929726737], "val_accuracy": [0.038333334028720856, 0.03933333232998848, 0.04066666588187218, 0.04233333468437195, 0.04333333298563957, 0.04533333331346512, 0.04600000008940697, 0.046666666865348816, 0.047333333641290665, 0.04866666719317436, 0.050333332270383835, 0.05133333429694176, 0.05233333259820938, 0.052666667848825455, 0.05366666615009308, 0.0533333346247673, 0.054666668176651, 0.055666666477918625, 0.05700000002980232, 0.05833333358168602, 0.05900000035762787, 0.05999999865889549, 0.061000000685453415, 0.06199999898672104, 0.06300000101327896, 0.06400000303983688, 0.06533333659172058, 0.06700000166893005, 0.06800000369548798, 0.06966666877269745, 0.070333331823349, 0.07133333384990692, 0.07199999690055847, 0.07233333587646484, 0.07400000095367432, 0.07566666603088379, 0.07733333110809326, 0.07766667008399963, 0.07999999821186066, 0.0806666687130928, 0.08233333379030228, 0.08366666734218597, 0.08633333444595337, 0.08733333647251129, 0.08833333104848862, 0.09000000357627869, 0.09099999815225601, 0.09366666525602341, 0.09366666525602341, 0.0949999988079071, 0.09600000083446503, 0.09666666388511658, 0.09799999743700027, 0.09933333098888397, 0.10100000351667404, 0.10266666859388351, 0.10300000011920929, 0.10300000011920929, 0.10400000214576721, 0.10533333569765091, 0.10633333027362823, 0.10966666787862778, 0.1120000034570694, 0.11266666650772095, 0.11366666853427887, 0.11500000208616257, 0.11599999666213989, 0.11666666716337204, 0.11800000071525574, 0.11966666579246521, 0.12200000137090683, 0.12266666442155838, 0.12399999797344208, 0.12600000202655792, 0.12833333015441895, 0.12966667115688324, 0.1313333362340927, 0.13233333826065063, 0.1340000033378601, 0.1353333294391632, 0.13766667246818542, 0.13866665959358215, 0.140666663646698, 0.14133332669734955, 0.14300000667572021, 0.14533333480358124, 0.14800000190734863, 0.15033333003520966, 0.15299999713897705, 0.1550000011920929, 0.1576666682958603, 0.15833333134651184, 0.1613333374261856, 0.1626666635274887, 0.16366666555404663, 0.16599999368190765, 0.16766667366027832, 0.16866666078567505, 0.17133332788944244, 0.17166666686534882]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [92, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 5, 2, 3, 8, 6, 4, 6, 8, 3, 9, 4, 2, 1, 3, 1, 6, 2, 7, 2, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 1, 3, 1, 3, 3, 1, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 3, 2], [18, 86, 78, 38, 8], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10057143121957779, "mapping_values": [1, 4, 4, 2, 2, 1, 16, 16, 9, 7, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.square(tf.math.add(beta, tf.math.add(tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(grad))), alpha))), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(alpha), grad)), grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [36.41040955161721, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.2082948088645935, 0.11240258812904358, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [37623.478794642855, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.16899999976158142, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 2, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [48, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 0, 2, 2, 2, 9, 5, 6, 9, 3, 9, 3, 6, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 1, 3, 1, 3, 3, 1, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [18, 86, 78, 38, 8], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 3, 3, 1, 11, 11, 7, 4, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(grad, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.sqrt(grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.negative(tf.math.add(beta, grad)), tf.math.add(tf.math.add(tf.math.add(grad, alpha), tf.math.add(beta, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [0, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [48, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 0, 8, 9, 8, 9, 4, 1, 9, 3, 0, 3, 6, 1, 3, 1, 6, 2, 7, 1, 9, 6, 2, 8, 8, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 1, 3, 1, 3, 1, 1, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [18, 86, 78, 38, 8], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 0, 5, 5, 4, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)))), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08017434924840927, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [48, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 0, 2, 2, 2, 9, 5, 6, 9, 3, 9, 3, 6, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 1, 3, 2, 3, 3, 1, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [18, 86, 78, 38, 8], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 5, 2, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.sqrt(grad)), tf.math.add(alpha, tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [48, 83, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 0, 2, 2, 2, 9, 5, 6, 9, 3, 1, 3, 6, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 1, 3, 1, 3, 3, 1, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [18, 86, 78, 38, 8], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 19, 19, 12, 7, 2, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(grad), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(grad, grad), tf.math.add(beta, tf.math.add(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.square(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), grad)), alpha))))))))), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3023913156685496, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [48, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [7, 5, 4, 9, 2, 6, 2, 6, 8, 3, 2, 4, 2, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 4, 3, 3, 1, 3, 3, 1, 3, 3, 3, 2, 2, 4, 5, 2, 3, 1, 1, 2], [18, 86, 78, 38, 8], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 5, 2, 2, 6, 6, 4, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.sqrt(grad))), tf.math.add(alpha, tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.pow(tf.math.add(beta, grad), tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [48, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [1, 5, 2, 8, 2, 6, 2, 6, 8, 3, 2, 4, 2, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 1, 3, 1, 3, 3, 1, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [18, 86, 78, 38, 8], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 26, 26, 14, 12, 1, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.add(grad, tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.sqrt(tf.math.multiply(tf.math.add(alpha, grad), alpha)), tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, grad)))), alpha)), tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(beta, tf.math.subtract(grad, grad)), tf.math.add(beta, beta))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08017434924840927, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [32, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 5, 2, 4, 2, 6, 2, 6, 8, 3, 9, 4, 2, 1, 3, 1, 6, 2, 2, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 1, 3, 1, 2, 3, 1, 0, 3, 3, 2, 4, 1, 5, 2, 3, 1, 1, 2], [18, 86, 78, 38, 8], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 47, 47, 27, 20, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.square(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), tf.math.pow(grad, tf.math.add(beta, alpha))))), grad))), tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, tf.math.subtract(beta, grad)))))), tf.math.multiply(tf.math.add(beta, tf.math.subtract(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(tf.math.add(beta, alpha), grad)), tf.math.add(beta, beta))))))))), tf.math.add(beta, grad))))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08017434924840927, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [48, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [1, 5, 2, 9, 2, 6, 2, 6, 8, 3, 2, 4, 2, 1, 3, 1, 2, 2, 7, 1, 5, 6, 2, 8, 2, 1, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 0, 3, 1, 3, 3, 1, 3, 0, 3, 2, 2, 4, 5, 2, 3, 1, 1, 2, 3, 0], [18, 86, 78, 38, 8], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 54, 54, 32, 22, 5, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.add(beta, tf.math.add(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), grad))), tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(grad, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, alpha))), grad)), grad))))), tf.math.multiply(tf.math.add(beta, tf.math.subtract(alpha, grad)), tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.subtract(tf.math.add(beta, beta), grad)))), tf.math.add(beta, grad))), tf.math.add(beta, beta))))), tf.math.add(beta, grad)))), tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.negative(tf.math.negative(beta))))), tf.math.multiply(tf.math.negative(tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08017434924840927, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [48, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 5, 2, 8, 2, 6, 5, 6, 8, 3, 9, 4, 2, 1, 3, 2, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 1, 3, 1, 3, 3, 1, 0, 2, 3, 2, 1, 4, 5, 2, 3, 1, 1, 2], [18, 86, 78, 38, 8], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [92, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 29, 29, 17, 12, 2, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.square(tf.math.add(beta, tf.math.add(tf.math.sqrt(grad), grad))), tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.multiply(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(alpha, tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, alpha)))), tf.math.multiply(grad, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), alpha)), tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))))))), beta)))), tf.math.add(beta, grad))), beta))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3023913156685496, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [1, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [3, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 5, 2, 3, 2, 6, 2, 1, 8, 3, 9, 4, 2, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 1, 3, 1, 3, 3, 1, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [18, 86, 78, 38, 8], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, alpha)), tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.302765625374365, 2.302538221632847, 2.3009793132665592, 2.3020034208903617, 2.300638360653445, 2.302304276921226], "accuracy": [0.08928807079792023, 0.09259014576673508, 0.09509972482919693, 0.08994849026203156, 0.0940430611371994, 0.09272222965955734], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [48, 83, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 6, 8, 2, 2, 9, 5, 6, 9, 3, 2, 3, 6, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 2, 3, 1, 3, 3, 1, 3, 3, 3, 2, 2, 4, 5, 2, 3, 1, 1, 2], [18, 86, 78, 38, 8], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.03342857211828232, "mapping_values": [1, 4, 4, 2, 2, 1, 19, 19, 12, 7, 2, 2, 2, 1, 1, 0, 3, 2, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(grad), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(grad), tf.math.add(tf.math.add(tf.math.add(beta, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(beta, grad), alpha)))))), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [2.302832946675313, 2.302811523926745, 2.301489340677993, 2.3027780536552855, 2.3016017597459486, 2.30354854837306], "accuracy": [0.08928807079792023, 0.09232597798109055, 0.09430722147226334, 0.08915598690509796, 0.0940430611371994, 0.08955223858356476], "val_loss": [1.9711529186793737, 1.971348694392613, 1.971546036856515, 1.97175509589059, 1.9719562530517578, 1.972177233014788], "val_accuracy": [0.035999998450279236, 0.035999998450279236, 0.03500000014901161, 0.03466666489839554, 0.032999999821186066, 0.03166666626930237]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [24, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [1, 5, 2, 2, 2, 6, 9, 6, 1, 3, 2, 4, 2, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 1, 3, 3, 2, 3, 1, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [18, 86, 78, 38, 8], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.009999999776482582, "mapping_values": [1, 3, 3, 1, 2, 1, 16, 16, 9, 7, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(alpha, grad)), tf.math.subtract(grad, beta)))), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.307838135580613, 2.320570313840762, 2.3332477906723033, 2.3509793671729025, 2.3686188996160946, 2.394104713619566], "accuracy": [0.0804385170340538, 0.057852331548929214, 0.04279487580060959, 0.03011491149663925, 0.02681283839046955, 0.018755778670310974], "val_loss": [1.982731546674456, 1.995300020490374, 2.00931453704834, 2.0255974360874722, 2.0448318208966936, 2.068547316959926], "val_accuracy": [0.01133333332836628, 0.006000000052154064, 0.004666666500270367, 0.004000000189989805, 0.004000000189989805, 0.004000000189989805]}}]