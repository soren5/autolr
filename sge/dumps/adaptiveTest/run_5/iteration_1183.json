[{"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 2, 5, 0, 2, 2, 0, 6, 4, 2, 0, 8, 6, 5, 2, 6, 0, 2, 4, 8, 4, 6, 4, 2, 0, 8, 6, 3, 2, 2, 2, 1, 9, 1, 2, 8, 2, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [4, 1, 0, 1, 2, 1, 3, 0, 3, 3, 1, 3, 2, 3, 1, 3, 3, 3, 2, 3, 3, 0, 3, 4, 3, 1, 3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 3, 0, 5], [71, 31, 55, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 1, 2, 3, 0, 0, 0], [49, 18, 10, 42]], "fitness": -0.829714298248291, "mapping_values": [1, 4, 4, 2, 2, 1, 12, 12, 7, 5, 1, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))), alpha)), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))), alpha), tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), alpha)", "other_info": {"loss": [2.0762563821047904, 1.1344251972242447, 0.8070526222243616, 0.7135933257207391, 0.6558968535409296, 0.6285264734200924, 0.6079756373726791, 0.588851497212988, 0.5607394781236745, 0.5537242579138936, 0.5338932853711201, 0.516906506019167, 0.48941089478403177, 0.48431922514456577, 0.47875069118588437, 0.460421741740925, 0.44928307870060713, 0.44799891423240645, 0.43104758496140255, 0.4336297921398454, 0.4280704716767901, 0.40439645808449415, 0.3961846871603403, 0.4009649027859798, 0.3816570923895553, 0.3750165208943878, 0.37039895105938225, 0.3674035169909486, 0.3612243756209036, 0.3496458419026511, 0.34049340443305054, 0.34168417068630585], "accuracy": [0.3015453815460205, 0.5930524468421936, 0.7014925479888916, 0.7296261787414551, 0.7494386434555054, 0.7565711140632629, 0.7687227725982666, 0.7815347909927368, 0.787082314491272, 0.7952714562416077, 0.8000264167785645, 0.8033285140991211, 0.8166688680648804, 0.8215559124946594, 0.824329674243927, 0.8278959393501282, 0.8300092220306396, 0.8348963260650635, 0.8370096683502197, 0.8403117060661316, 0.8412362933158875, 0.8470479249954224, 0.8545766472816467, 0.8494254350662231, 0.8595958352088928, 0.8639545440673828, 0.8574824929237366, 0.8614450097084045, 0.8667283058166504, 0.8697662353515625, 0.8725399374961853, 0.8741249442100525], "val_loss": [1.0099686554500036, 0.6492125136511666, 0.5687743595668248, 0.5253749574933734, 0.5062237126486642, 0.48791660581316265, 0.4795832804271153, 0.45250964164733887, 0.43506141219820293, 0.428417444229126, 0.4133626478058951, 0.40804134947913034, 0.3967894656317575, 0.3872602581977844, 0.3838299938610622, 0.3813707062176296, 0.3792994959013803, 0.366079432623727, 0.3657445992742266, 0.3585879462105887, 0.3523542710712978, 0.34788811206817627, 0.3447275587490627, 0.3389049342700413, 0.3392112510544913, 0.34282684326171875, 0.3359993355614798, 0.33010307380131315, 0.3270817995071411, 0.3291019456727164, 0.32640278339385986, 0.32240764583860126], "val_accuracy": [0.5636666417121887, 0.722000002861023, 0.7403333187103271, 0.7596666812896729, 0.7566666603088379, 0.7663333415985107, 0.7829999923706055, 0.7979999780654907, 0.8033333420753479, 0.8100000023841858, 0.8119999766349792, 0.8236666917800903, 0.8256666660308838, 0.8299999833106995, 0.8316666483879089, 0.8363333344459534, 0.8306666612625122, 0.8399999737739563, 0.8399999737739563, 0.8523333072662354, 0.8539999723434448, 0.8529999852180481, 0.8573333621025085, 0.8586666584014893, 0.8573333621025085, 0.856333315372467, 0.8659999966621399, 0.8619999885559082, 0.8646666407585144, 0.8640000224113464, 0.8633333444595337, 0.8653333187103271]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 2, 5, 0, 2, 2, 5, 6, 4, 4, 0, 4, 9, 6, 2, 1, 8, 3, 4, 2, 4, 2, 3, 1, 0, 1, 0, 2, 1, 2, 4, 6, 2, 9, 2, 0, 5, 4, 6, 4, 2, 5, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 1, 3, 1, 2, 3, 3, 0, 3, 3, 1, 3, 2, 3, 1, 3, 3, 3, 2, 3, 3, 0, 3, 4, 3, 1, 1, 2, 0, 3, 3, 2, 3, 2, 4, 0, 3, 0, 5], [48, 31, 78, 62, 37, 47, 1, 35, 47, 32, 7], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 1, 2, 3, 0, 0, 0], [91, 18, 10, 42]], "fitness": -0.8108571171760559, "mapping_values": [1, 4, 4, 2, 2, 1, 16, 16, 9, 7, 0, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.negative(tf.math.add(beta, grad)))), alpha), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), grad)))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), alpha)", "other_info": {"loss": [2.0613771781252517, 1.547720226645076, 1.1245918129854324, 1.0045262367702383, 0.9739337178694337, 0.8374485679038717, 0.7692376576898404, 0.7788048945382098, 0.7358897171945085, 0.7394213825562658, 0.7065407873034525, 0.6720973599887622, 0.6648514357776438, 0.661451116072393, 0.6416002000485114, 0.6709407526488474, 0.6195079050264369, 0.6209170146625212, 0.5941932446858068, 0.5933873171441669, 0.5916972252922981, 0.5627153295693443, 0.580242286064149, 0.5902019829215344, 0.5504224774442597, 0.5693335541644667, 0.5560987667715577, 0.5364211933755478, 0.5691648174853231, 0.5330030975041372, 0.5290077167998971, 0.5166399183054138, 0.5044510599849183, 0.499814500925705, 0.5096150246774673, 0.4831186132880722, 0.49378843152637986], "accuracy": [0.32518821954727173, 0.4835556745529175, 0.587372899055481, 0.6277902722358704, 0.6337339878082275, 0.6866992712020874, 0.7098137736320496, 0.7046625018119812, 0.7145687341690063, 0.7123233675956726, 0.7273808121681213, 0.7448157668113708, 0.7454761862754822, 0.7470611333847046, 0.7619865536689758, 0.7387399077415466, 0.7655527591705322, 0.7586844563484192, 0.7725531458854675, 0.7718927264213562, 0.7695152759552002, 0.7840443849563599, 0.7758552432060242, 0.769911527633667, 0.7918372750282288, 0.7820631265640259, 0.785101056098938, 0.7955356240272522, 0.7835160493850708, 0.8005547523498535, 0.8009510040283203, 0.8045172095298767, 0.8146876096725464, 0.8109893202781677, 0.8079513907432556, 0.821820080280304, 0.8125742673873901], "val_loss": [1.3562144551958357, 0.9406699112483433, 0.8988171645573207, 0.8474164860589164, 0.6476804869515556, 0.5994985955102103, 0.6255337340491158, 0.5615847451346261, 0.5498649052211216, 0.556440029825483, 0.5286545412881034, 0.5163722549165998, 0.528449467250279, 0.5018100908824376, 0.507122414452689, 0.51214485509055, 0.5141775778361729, 0.5076264653887067, 0.46367507321493967, 0.4692845344543457, 0.4523015703473772, 0.4735882452556065, 0.4591272217886789, 0.46163104261670795, 0.43603905609675814, 0.4937713827405657, 0.4795163358960833, 0.48868121419634136, 0.4276429755347116, 0.43269799436841694, 0.43323918751307894, 0.4035677058356149, 0.4055461287498474, 0.41269573143550325, 0.41302492788859774, 0.410571072782789, 0.4187550033841814], "val_accuracy": [0.38366666436195374, 0.609000027179718, 0.5853333473205566, 0.628333330154419, 0.7123333215713501, 0.7319999933242798, 0.7043333053588867, 0.7369999885559082, 0.746999979019165, 0.7243333458900452, 0.750333309173584, 0.7716666460037231, 0.7480000257492065, 0.7739999890327454, 0.75, 0.7646666765213013, 0.762666642665863, 0.7609999775886536, 0.7836666703224182, 0.7816666960716248, 0.7919999957084656, 0.7699999809265137, 0.7836666703224182, 0.778333306312561, 0.8046666383743286, 0.7756666541099548, 0.7486666440963745, 0.7720000147819519, 0.8203333616256714, 0.8066666722297668, 0.8096666932106018, 0.8230000138282776, 0.8209999799728394, 0.8213333487510681, 0.8213333487510681, 0.8186666369438171, 0.8106666803359985]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 4, 2, 2, 5, 2, 2, 2, 0, 8, 2, 1, 2, 8, 0, 3, 0, 2, 4, 9, 4, 2, 4, 1, 0, 2, 2, 1, 2, 6, 9, 1, 2, 8, 5, 4, 4, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [0, 1, 0, 1, 2, 2, 3, 0, 3, 3, 1, 3, 2, 0, 2, 3, 1, 3, 2, 0, 3, 2, 2, 4, 3, 1, 3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 3, 0, 5], [4, 31, 78, 62, 37, 47, 1, 35, 47, 32, 7], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [4, 1, 1, 4, 3, 4], [44], [0, 1, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 1, 2, 3, 0, 0, 0], [28, 18, 10, 42]], "fitness": -0.7820000052452087, "mapping_values": [1, 4, 4, 2, 2, 1, 48, 48, 28, 20, 6, 3, 2, 1, 1, 0, 3, 1, 2, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.add(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, alpha)), tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, beta))), grad)))), tf.math.negative(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.sqrt(alpha)), tf.math.negative(tf.math.multiply(tf.math.negative(tf.math.add(grad, tf.math.pow(beta, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, beta)), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad)))))), beta))))), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32), alpha)", "other_info": {"loss": [2.2973987732140175, 2.2770075707340505, 2.255272071312101, 2.2268033531820297, 2.190372447768506, 2.14077946500787, 2.078631594542893, 1.997220908283888, 1.8957327663339503, 1.7818956378428628, 1.6552780592965886, 1.5437704984931708, 1.4364201707799658, 1.3455659680126555, 1.289751824780289, 1.2210746607555611, 1.1749531616073132, 1.1370769689710085, 1.0952687152797804, 1.0749919347286918, 1.0434679979850368, 1.017881414964608, 0.9848778342936159, 0.9726098913243261, 0.9528666490876144, 0.9309531871621571, 0.9301994407512351, 0.9157119524981194, 0.8967393636860946, 0.8727177003229519, 0.8689181778755611, 0.8720377336687116, 0.860910696258099, 0.8492529926251553, 0.8371912051327335, 0.8222202870587884, 0.8365500012031084, 0.8112004492827977, 0.8103462856726923, 0.7936818485939586, 0.799022244306493, 0.7995236877358396, 0.783232261334365, 0.7797935254475256, 0.7834663817895449, 0.7689630841109826, 0.7672788884189103, 0.7733979537628425, 0.7635223281586632, 0.7531625171851457, 0.7497396391569553, 0.7450698203241285, 0.7398677392721397, 0.7368928367640317, 0.7273523970806619, 0.7411016647007329, 0.7192434208142113, 0.718041756692863, 0.7219183374751812, 0.7222950284459949, 0.707903391208631, 0.7021463311674289, 0.702538053207803, 0.708094208539044, 0.7088196613312775, 0.6955770167456075, 0.6937928807544922, 0.694817975810994, 0.689448439119168, 0.6929892286050117, 0.6814154041693621, 0.6845597945357421, 0.6882712044074724, 0.6908564010647074, 0.6801402481744444, 0.667271016351362, 0.6727201098842139, 0.6699563181946668, 0.6607244117794382, 0.6612700059539559, 0.6628650772478665, 0.670295065278469, 0.6590532919891664, 0.6522797647720441, 0.652770122170464, 0.6471706463943903, 0.6559432788831115, 0.6501990612062402, 0.642908507483967], "accuracy": [0.09893012791872025, 0.15836745500564575, 0.21925769746303558, 0.2719587981700897, 0.31884822249412537, 0.35768061876296997, 0.3809272348880768, 0.4091929793357849, 0.43626996874809265, 0.45132744312286377, 0.481838583946228, 0.49848103523254395, 0.5264826416969299, 0.5478800535202026, 0.5567296147346497, 0.5742966532707214, 0.5828820466995239, 0.5955620408058167, 0.6159027814865112, 0.6184123754501343, 0.6300356388092041, 0.64231938123703, 0.6498481035232544, 0.6539427042007446, 0.6646413803100586, 0.670320987701416, 0.6693964004516602, 0.6736230254173279, 0.6783780455589294, 0.6935675740242004, 0.6844538450241089, 0.6866992712020874, 0.6901333928108215, 0.6960771083831787, 0.6947563290596008, 0.6984546184539795, 0.6993792057037354, 0.7055870890617371, 0.7106062769889832, 0.7116629481315613, 0.7119271159172058, 0.7132478952407837, 0.7170783281326294, 0.7164179086685181, 0.7199841737747192, 0.7259278893470764, 0.7228899598121643, 0.7195879220962524, 0.7181349992752075, 0.7210407853126526, 0.7306828498840332, 0.726192057132721, 0.7279091477394104, 0.7281733155250549, 0.7310791015625, 0.7313432693481445, 0.735041618347168, 0.7338528633117676, 0.7349095344543457, 0.7322678565979004, 0.7497028112411499, 0.746268630027771, 0.7424382567405701, 0.7407211661338806, 0.7384757399559021, 0.7471932172775269, 0.7423061728477478, 0.7503632307052612, 0.7421740889549255, 0.7490423917770386, 0.7499669790267944, 0.7498348951339722, 0.7475894689559937, 0.7466648817062378, 0.7516840696334839, 0.7544577717781067, 0.7528728246688843, 0.7588165402412415, 0.7547219395637512, 0.7552502751350403, 0.7601373791694641, 0.7540615797042847, 0.7578919529914856, 0.76106196641922, 0.7580240368843079, 0.7597411274909973, 0.7633073329925537, 0.7574957013130188, 0.7585523724555969], "val_loss": [1.9572446686880929, 1.935354232788086, 1.910074097769601, 1.879641328539167, 1.83995144707816, 1.7863424164908273, 1.7154829502105713, 1.6248094694955009, 1.514357600893293, 1.3904852185930525, 1.264131954738072, 1.1477324962615967, 1.0478429453713554, 0.9689617497580392, 0.9071694101606097, 0.8592186995915004, 0.8206100463867188, 0.7891844851630074, 0.762810298374721, 0.7415707792554583, 0.7221912145614624, 0.7053254842758179, 0.6885921103613717, 0.6747393948691232, 0.6640175070081439, 0.6539877312523978, 0.6452729191098895, 0.6375686270850045, 0.6302746193749564, 0.6209209816796439, 0.6147141626902989, 0.6082477910178048, 0.6043444190706525, 0.5970539706093925, 0.5910122053963798, 0.5865636893681118, 0.5836907965796334, 0.5789888075419835, 0.5742056369781494, 0.570076584815979, 0.566088216645377, 0.5632911409650531, 0.5610380343028477, 0.5567605836050851, 0.5540089436939785, 0.5508634533200946, 0.5472033364432198, 0.5446592569351196, 0.5412685360227313, 0.5386878252029419, 0.5352504423686436, 0.5339876243046352, 0.5323699542454311, 0.5295410837445941, 0.5267212220600673, 0.5257846627916608, 0.5232032707759312, 0.5199775525501796, 0.5194991486413139, 0.5176019838878086, 0.5156709466661725, 0.5124730893543789, 0.5102375064577375, 0.5091263736997332, 0.5074063198907035, 0.5050797803061349, 0.5028742722102574, 0.5011621373040336, 0.5001045635768345, 0.49901212964739117, 0.4969172307423183, 0.4955535616193499, 0.49341137068612234, 0.49216461181640625, 0.49135581084660124, 0.4898042508534023, 0.4888127020427159, 0.48731512682778494, 0.48506178174700054, 0.4838922194072178, 0.48331940174102783, 0.4829969917024885, 0.48083172525678364, 0.4796049083982195, 0.4788116046360561, 0.4778810909816197, 0.47598717893872944, 0.4749035154070173, 0.4737468276705061], "val_accuracy": [0.14800000190734863, 0.3343333303928375, 0.4020000100135803, 0.4413333237171173, 0.47466665506362915, 0.5096666812896729, 0.5403333306312561, 0.5600000023841858, 0.5883333086967468, 0.5989999771118164, 0.6079999804496765, 0.6293333172798157, 0.6573333144187927, 0.6693333387374878, 0.6840000152587891, 0.6919999718666077, 0.6983333230018616, 0.7003333568572998, 0.7066666483879089, 0.7123333215713501, 0.7160000205039978, 0.7196666598320007, 0.7236666679382324, 0.7260000109672546, 0.7296666502952576, 0.7323333621025085, 0.734000027179718, 0.7356666922569275, 0.7363333106040955, 0.737333357334137, 0.7403333187103271, 0.7423333525657654, 0.7440000176429749, 0.7490000128746033, 0.7490000128746033, 0.7490000128746033, 0.7519999742507935, 0.7513333559036255, 0.753333330154419, 0.753000020980835, 0.7549999952316284, 0.7583333253860474, 0.7606666684150696, 0.7620000243186951, 0.762666642665863, 0.7616666555404663, 0.7643333077430725, 0.765666663646698, 0.7680000066757202, 0.7713333368301392, 0.7736666798591614, 0.7720000147819519, 0.7710000276565552, 0.7726666927337646, 0.7699999809265137, 0.7746666669845581, 0.7730000019073486, 0.7726666927337646, 0.7730000019073486, 0.7733333110809326, 0.7760000228881836, 0.7753333449363708, 0.7766666412353516, 0.7773333191871643, 0.7766666412353516, 0.7776666879653931, 0.7786666750907898, 0.7789999842643738, 0.781000018119812, 0.7776666879653931, 0.7823333144187927, 0.7803333401679993, 0.7839999794960022, 0.7833333611488342, 0.7826666831970215, 0.7856666445732117, 0.7839999794960022, 0.7806666493415833, 0.7873333096504211, 0.7873333096504211, 0.7850000262260437, 0.7893333435058594, 0.7856666445732117, 0.7929999828338623, 0.7893333435058594, 0.7870000004768372, 0.7929999828338623, 0.7889999747276306, 0.7916666865348816]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [32, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 5, 4, 2, 6, 5, 6, 4, 2, 0, 4, 1, 8, 2, 6, 0, 3, 4, 2, 4, 6, 4, 4, 0, 1, 9, 2, 2, 2, 6, 6, 9, 1, 2, 8, 5, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 1, 0, 1, 2, 2, 3, 0, 3, 3, 1, 3, 0, 0, 2, 3, 1, 3, 2, 2, 3, 3, 2, 4, 3, 3, 3, 2, 3, 2, 3, 2, 3, 2, 4, 0, 3, 0, 5], [4, 31, 78, 62, 37, 47, 1, 35, 47, 32, 7], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 1, 2, 3, 0, 0, 0], [91, 18, 10, 42]], "fitness": -0.6774285435676575, "mapping_values": [1, 4, 4, 2, 2, 1, 77, 77, 45, 32, 7, 3, 2, 1, 1, 0, 3, 1, 2, 1], "tree_depth": 70, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(grad), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, alpha), tf.math.negative(tf.math.pow(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32), alpha))))), tf.math.add(beta, tf.math.subtract(tf.math.sqrt(beta), tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.negative(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.divide_no_nan(grad, alpha), grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.subtract(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, beta))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.sqrt(tf.math.add(beta, alpha)), grad), tf.math.square(beta)))))))))), tf.math.pow(beta, grad))), tf.math.divide_no_nan(tf.math.pow(tf.math.add(grad, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta)), tf.math.add(beta, tf.math.subtract(grad, grad)))))))))))))))))), tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, grad))))), tf.math.divide_no_nan(beta, tf.math.add(beta, grad))), tf.math.add(beta, beta)))), tf.math.add(beta, grad))), tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), alpha)", "other_info": {"loss": [2.2351547169600336, 1.6092873582309657, 1.1490569186405877, 0.9024239234747337, 0.8358119887415097, 0.7695053883153748, 0.7403541654879785, 0.7018411809647671, 0.6334970354671727, 0.6243742022768161, 0.5963918955932912, 0.5873244449273863, 0.5634642759995643, 0.5630065650043077, 0.5399294837968791, 0.5331535193158368, 0.5132847194264767, 0.5089689666931073, 0.4855830235456699, 0.4797899357127224, 0.4693253101288225, 0.4549610878986343, 0.43956674168752624, 0.44372348960726693, 0.43456505762351394, 0.42465365944663214, 0.4219716459634738], "accuracy": [0.22005018591880798, 0.4711398780345917, 0.6131290197372437, 0.674679696559906, 0.6901333928108215, 0.7041342258453369, 0.7162858247756958, 0.7322678565979004, 0.7582882046699524, 0.7663452625274658, 0.7774402499198914, 0.7777044177055359, 0.7865539789199829, 0.7864218950271606, 0.7952714562416077, 0.8004226684570312, 0.8067626357078552, 0.8059701323509216, 0.8137630224227905, 0.8103289008140564, 0.8156121969223022, 0.8304054737091064, 0.837537944316864, 0.8285563588142395, 0.8301413059234619, 0.8385946154594421, 0.8422929644584656], "val_loss": [1.6850457191467285, 0.8130276543753487, 0.7069645268576485, 0.6076435361589704, 0.5746831723621914, 0.5639688968658447, 0.5065637656620571, 0.4723592145102365, 0.4640629291534424, 0.4512284653527396, 0.4574576956885202, 0.445051908493042, 0.4300831982067653, 0.4143674373626709, 0.4330662318638393, 0.4110776015690395, 0.41545424291065763, 0.40750385182244436, 0.40093437262943815, 0.4006861022540501, 0.3902328780719212, 0.40043442589896067, 0.40466748816626413, 0.37730744055339266, 0.37584538970674786, 0.41863698618752615, 0.40323833908353535], "val_accuracy": [0.4846666753292084, 0.6366666555404663, 0.7086666822433472, 0.7286666631698608, 0.7360000014305115, 0.7693333625793457, 0.7730000019073486, 0.796999990940094, 0.7903333306312561, 0.8009999990463257, 0.8059999942779541, 0.8133333325386047, 0.8209999799728394, 0.8236666917800903, 0.8206666707992554, 0.8253333568572998, 0.8330000042915344, 0.8263333439826965, 0.8423333168029785, 0.8423333168029785, 0.8503333330154419, 0.8513333201408386, 0.8500000238418579, 0.8506666421890259, 0.8450000286102295, 0.8450000286102295, 0.8479999899864197]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 2, 5, 0, 4, 4, 5, 2, 4, 2, 0, 8, 6, 5, 2, 6, 0, 2, 4, 8, 4, 6, 4, 2, 0, 8, 6, 3, 2, 2, 2, 1, 9, 1, 2, 8, 2, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 1, 0, 3, 3, 3, 1, 3, 3, 3, 1, 3, 2, 3, 1, 3, 1, 3, 1, 3, 3, 2, 2, 3, 3, 1, 0, 3, 3, 3, 2, 2, 3, 2, 4, 0, 3, 0, 5], [4, 31, 89, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 1, 2, 3, 0, 0, 0], [3, 18, 10, 42]], "fitness": -0.16428571939468384, "mapping_values": [1, 4, 4, 2, 2, 1, 19, 19, 11, 8, 1, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.negative(grad), grad)), tf.math.add(beta, grad))))))))))))), alpha)), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), alpha)", "other_info": {"loss": [2.3018224209432887, 2.300805069467789, 2.3034031309582033, 2.3032474521916098, 2.3026644051775658, 2.3011566581129004, 2.3011684313489305, 2.3019728115473788, 2.3020813606513126, 2.3004634531497516, 2.301141371202349, 2.301083879920517, 2.3015235611287403, 2.299650279207473, 2.30025638212633, 2.2999613216414256, 2.2995121498558864, 2.299163975657064, 2.299924564903218, 2.298528104174202, 2.298908687270848, 2.299095515010694, 2.2988200163120105, 2.299435009998558, 2.297547157367207, 2.2978231901537396, 2.2985728453367993, 2.2985619973386866, 2.299676101725131, 2.297907792566128, 2.296215725423732, 2.2968157067385175, 2.298052158275096, 2.296228221000981, 2.2964214326021866, 2.295151648000562, 2.2977973068583957, 2.2959441528375737, 2.2961157558301593, 2.2949645817161723, 2.2961330421376207, 2.2957163917673515, 2.294235955045491, 2.2937580128041053, 2.2953433344912426, 2.2941258901838677, 2.294438960073237, 2.2952879036044433, 2.2964066069407343, 2.294100304226818, 2.293276484049448, 2.2935939810106296, 2.293490608716921, 2.2941949860042885, 2.292676107270323, 2.2941572211122847, 2.2938504151034556, 2.2927657215429287, 2.2933810170709874, 2.2927681930848336, 2.2927909928101275, 2.2926483397407615, 2.291907730324236, 2.2932358540406614, 2.292022494969981, 2.290713473680139, 2.291964647556104, 2.290400057861818, 2.291621898883653, 2.2897087024927547, 2.288591604254202, 2.2902618609619747, 2.2911366150757386, 2.2900219566361337, 2.289095888520748, 2.290590820846588, 2.2904641906960985, 2.28962612838604, 2.288818863042515, 2.289026515547783, 2.289256627958653, 2.2890740525783912, 2.288859156947551, 2.2880928270443004, 2.287924084066951, 2.2876344614843918, 2.285867495323295, 2.2883162560511447, 2.287106704056901, 2.2877711590963536, 2.2873750084411073, 2.2854896217147673, 2.2863307687285523, 2.2859362335001014, 2.286768156445148, 2.286231355864878, 2.285300119788246, 2.286515854573631, 2.286183690382363, 2.285911760278555], "accuracy": [0.0878351628780365, 0.09245806187391281, 0.08440100401639938, 0.09430722147226334, 0.09259014576673508, 0.09536388516426086, 0.0952318087220192, 0.09245806187391281, 0.09615638852119446, 0.09417514503002167, 0.09232597798109055, 0.09232597798109055, 0.09787346422672272, 0.09800554811954498, 0.09536388516426086, 0.09259014576673508, 0.09589222073554993, 0.09853387624025345, 0.09628847241401672, 0.09734513610601425, 0.09747721254825592, 0.10038304328918457, 0.10342095047235489, 0.09734513610601425, 0.10328886657953262, 0.10196803510189056, 0.10011887550354004, 0.1002509593963623, 0.10130762308835983, 0.10091137140989304, 0.10196803510189056, 0.107647605240345, 0.09826971590518951, 0.10315678268671036, 0.10645885765552521, 0.10738343745470047, 0.09628847241401672, 0.10513802617788315, 0.10170386731624603, 0.10606260597705841, 0.10817593336105347, 0.10196803510189056, 0.10870426893234253, 0.11240258812904358, 0.10619468986988068, 0.11319508403539658, 0.10989301651716232, 0.1080438494682312, 0.10447761416435242, 0.10936468094587326, 0.11398758739233017, 0.1158367469906807, 0.1146479994058609, 0.10830801725387573, 0.1142517477273941, 0.120459645986557, 0.1088363528251648, 0.1142517477273941, 0.11345925182104111, 0.11662924289703369, 0.11689341068267822, 0.11042134463787079, 0.12349755316972733, 0.11372341960668564, 0.11596883088350296, 0.12151630967855453, 0.12151630967855453, 0.1146479994058609, 0.12402588874101639, 0.120459645986557, 0.12495046854019165, 0.12455421686172485, 0.11861048638820648, 0.1208558976650238, 0.12455421686172485, 0.1220446452498436, 0.1212521493434906, 0.12362963706254959, 0.12032756209373474, 0.13010171055793762, 0.12574297189712524, 0.12561088800430298, 0.1212521493434906, 0.1310262829065323, 0.13670584559440613, 0.12878087162971497, 0.13115836679935455, 0.1336679458618164, 0.1298375427722931, 0.1274600476026535, 0.1340641975402832, 0.13512085378170013, 0.13181878626346588, 0.1356491893529892, 0.12970545887947083, 0.13313961029052734, 0.1310262829065323, 0.12838461995124817, 0.12930920720100403, 0.13498876988887787], "val_loss": [1.9709159987313407, 1.9707671574183874, 1.9706066676548548, 1.9704443386622839, 1.9702816009521484, 1.9701178414481026, 1.9699540819440569, 1.9697918891906738, 1.9696285384041923, 1.9694649151393346, 1.969301768711635, 1.9691386904035295, 1.9689758164542062, 1.9688119207109724, 1.9686487742832728, 1.9684865134102958, 1.968322822025844, 1.9681610379900252, 1.9679980278015137, 1.967834404536656, 1.9676719393048967, 1.9675100190298898, 1.9673476219177246, 1.967186382838658, 1.9670252799987793, 1.9668615204947335, 1.966698101588658, 1.966536181313651, 1.9663728305271693, 1.9662102971758162, 1.9660470826285226, 1.965886456625802, 1.9657238551548548, 1.9655637741088867, 1.9654028756277901, 1.9652415684291296, 1.9650791713169642, 1.9649168423243932, 1.9647554670061385, 1.9645942279270716, 1.9644310133797782, 1.9642699786594935, 1.964108943939209, 1.9639487266540527, 1.9637887137276786, 1.9636291095188685, 1.9634690284729004, 1.963308334350586, 1.9631480489458357, 1.9629871504647392, 1.962825093950544, 1.9626631055559431, 1.9625018664768763, 1.9623404911586217, 1.9621804782322474, 1.9620192391531808, 1.9618593624659948, 1.9616989408220564, 1.9615393366132463, 1.96137911932809, 1.9612187658037459, 1.9610579354422433, 1.9608971732003349, 1.960737637111119, 1.960578237261091, 1.9604184968130929, 1.960258960723877, 1.9600982666015625, 1.959937572479248, 1.959778104509626, 1.959618364061628, 1.959458487374442, 1.9592982019696916, 1.9591378484453474, 1.9589764050074987, 1.9588146890912737, 1.95865569795881, 1.958496366228376, 1.958336557660784, 1.9581760678972517, 1.9580160549708776, 1.9578554289681571, 1.957693644932338, 1.957533700125558, 1.9573736871991838, 1.9572127887180872, 1.9570529120309013, 1.9568939890180315, 1.9567343848092216, 1.9565736225673132, 1.9564146314348494, 1.956254141671317, 1.9560924938746862, 1.9559321403503418, 1.955772808619908, 1.9556125232151575, 1.9554525784083776, 1.9552933829171317, 1.9551337105887276, 1.9549738339015417], "val_accuracy": [0.03799999877810478, 0.039000000804662704, 0.0403333343565464, 0.04100000113248825, 0.041999999433755875, 0.04333333298563957, 0.04533333331346512, 0.04633333161473274, 0.04699999839067459, 0.047333333641290665, 0.04866666719317436, 0.050999999046325684, 0.05133333429694176, 0.05233333259820938, 0.052666667848825455, 0.05366666615009308, 0.05400000140070915, 0.054666668176651, 0.05533333495259285, 0.055666666477918625, 0.057999998331069946, 0.058666665107011795, 0.05999999865889549, 0.061000000685453415, 0.06199999898672104, 0.06300000101327896, 0.06400000303983688, 0.06566666811704636, 0.06700000166893005, 0.06833333522081375, 0.06933332979679108, 0.07066666334867477, 0.07133333384990692, 0.07199999690055847, 0.0729999989271164, 0.07466666400432587, 0.07599999755620956, 0.07699999958276749, 0.07766667008399963, 0.07999999821186066, 0.08100000023841858, 0.08233333379030228, 0.08399999886751175, 0.08666666597127914, 0.08799999952316284, 0.08900000154972076, 0.09000000357627869, 0.09099999815225601, 0.09399999678134918, 0.09399999678134918, 0.0949999988079071, 0.09566666930913925, 0.09733333438634872, 0.0976666659116745, 0.09966666996479034, 0.10066666454076767, 0.10266666859388351, 0.10300000011920929, 0.10366666316986084, 0.10400000214576721, 0.10566666722297668, 0.10700000077486038, 0.10899999737739563, 0.1120000034570694, 0.11233333498239517, 0.1133333370089531, 0.11500000208616257, 0.11566666513681412, 0.11666666716337204, 0.11833333224058151, 0.12033333629369736, 0.12166666984558105, 0.1223333328962326, 0.12399999797344208, 0.12566666305065155, 0.12833333015441895, 0.12933333218097687, 0.1313333362340927, 0.1326666623353958, 0.1340000033378601, 0.13566666841506958, 0.1379999965429306, 0.1393333375453949, 0.14100000262260437, 0.14233332872390747, 0.14300000667572021, 0.1456666737794876, 0.14766666293144226, 0.15066666901111603, 0.1536666601896286, 0.15566666424274445, 0.1576666682958603, 0.1586666703224182, 0.1613333374261856, 0.16300000250339508, 0.16433332860469818, 0.16633333265781403, 0.1679999977350235, 0.16899999976158142, 0.17100000381469727]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [55, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 2, 5, 0, 2, 2, 3, 6, 4, 2, 0, 8, 6, 5, 2, 6, 0, 2, 4, 8, 4, 6, 4, 2, 0, 8, 6, 3, 2, 2, 2, 1, 9, 1, 2, 8, 2, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [4, 1, 3, 1, 0, 1, 3, 0, 3, 3, 1, 3, 2, 3, 1, 3, 3, 3, 2, 3, 3, 0, 3, 4, 3, 1, 3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 3, 0, 5], [71, 31, 55, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 1, 2, 3, 0, 0, 0], [91, 18, 10, 42]], "fitness": -0.11057142913341522, "mapping_values": [1, 4, 4, 2, 2, 1, 9, 9, 5, 4, 0, 1, 0, 0, 0, 0, 3, 1, 2, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.negative(alpha)))), tf.math.add(beta, tf.math.add(grad, alpha))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, alpha)", "other_info": {"loss": [2.3000199007493567, 2.2993249272185388, 2.3021460663074076, 2.3025828968217392, 2.303905588997007, 2.3072053311035194], "accuracy": [0.0956280529499054, 0.09972262382507324, 0.08189142495393753, 0.08796724677085876, 0.08136309683322906, 0.09853387624025345], "val_loss": [1.9673127446855818, 1.9724813188825334, 1.9736213684082031, 1.9746121679033553, 1.976302215031215, 1.9849564007350378], "val_accuracy": [0.1263333261013031, 0.0403333343565464, 0.07733333110809326, 0.049666665494441986, 0.04699999839067459, 0.09799999743700027]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 2, 5, 4, 2, 2, 5, 6, 4, 2, 0, 4, 2, 5, 2, 6, 0, 3, 4, 2, 4, 6, 4, 2, 0, 1, 0, 2, 9, 2, 2, 6, 9, 1, 2, 8, 5, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 1, 0, 1, 2, 2, 3, 0, 3, 3, 1, 3, 2, 0, 2, 3, 1, 3, 3, 3, 3, 2, 2, 4, 3, 1, 3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 3, 0, 5], [4, 31, 78, 62, 37, 47, 1, 35, 47, 32, 7], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 1, 2, 3, 0, 0, 0], [91, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 3, 1, 2, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 4, 1, 2, 5, 6, 4, 2, 0, 1, 6, 5, 2, 6, 0, 3, 4, 2, 6, 6, 4, 6, 0, 2, 0, 2, 2, 1, 1, 1, 1, 1, 2, 9, 5, 4, 6, 4, 2, 9, 1, 3, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 1, 0, 3, 3, 3, 1, 3, 0, 3, 1, 3, 2, 3, 1, 3, 1, 3, 1, 3, 3, 3, 2, 3, 2, 1, 0, 0, 3, 3, 2, 2, 3, 2, 4, 0, 3, 0, 5], [4, 31, 89, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 1, 2, 3, 0, 0, 0], [91, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 74, 74, 41, 33, 5, 1, 0, 0, 0, 0, 3, 1, 2, 0], "tree_depth": 59, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.pow(tf.math.add(beta, tf.math.add(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32), grad)), grad))))), grad)), tf.math.add(beta, alpha))), tf.math.negative(grad)), tf.math.add(beta, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.pow(tf.math.add(grad, tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, alpha))))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.add(beta, alpha), tf.math.subtract(tf.math.add(beta, grad), grad)), tf.math.subtract(grad, tf.math.add(beta, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))))))), tf.math.square(grad)))), beta)))))), alpha), tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, tf.math.pow(grad, beta)))))))))))), tf.math.add(beta, tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 2, 6, 0, 0, 5, 1, 6, 4, 2, 0, 8, 6, 5, 2, 6, 0, 2, 4, 8, 4, 6, 4, 2, 0, 8, 6, 3, 2, 2, 2, 1, 9, 1, 2, 8, 2, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [4, 1, 0, 1, 2, 1, 3, 0, 3, 3, 1, 3, 2, 3, 1, 3, 3, 3, 2, 3, 3, 0, 3, 4, 3, 1, 3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 3, 0, 5], [71, 31, 55, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 1, 2, 3, 0, 0, 0], [49, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 5, 2, 2, 12, 12, 7, 5, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))))), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, grad)), tf.math.negative(tf.math.add(beta, tf.math.square(alpha))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), alpha)))), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3023241138130746, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [73, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 2, 2, 4, 8, 2, 5, 6, 4, 2, 0, 3, 6, 5, 2, 6, 0, 3, 0, 2, 4, 6, 4, 6, 0, 1, 0, 2, 2, 1, 1, 1, 9, 1, 2, 9, 5, 4, 6, 9, 2, 9, 1, 3, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 0, 0, 1, 2, 2, 3, 0, 3, 3, 1, 3, 2, 0, 1, 3, 1, 3, 2, 3, 3, 2, 0, 4, 3, 1, 3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 3, 0, 5], [4, 67, 78, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 1, 2, 3, 0, 0, 0], [91, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 61, 61, 37, 24, 7, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 58, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(beta, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.negative(alpha), beta)))))))), beta)), tf.math.multiply(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.pow(alpha, tf.math.divide_no_nan(grad, tf.math.add(beta, beta))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, grad))))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), grad))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))))), grad))))), tf.math.subtract(beta, tf.math.add(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))))))))))), tf.math.square(grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), alpha)", "other_info": {"loss": [1.2020937075159592e+21, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1530841439962387, 0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [56, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [8, 2, 5, 0, 2, 2, 5, 6, 4, 2, 8, 2, 6, 5, 2, 6, 0, 2, 4, 8, 4, 6, 4, 2, 0, 8, 6, 3, 2, 2, 2, 1, 9, 1, 2, 8, 2, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 1, 0, 1, 2, 2, 3, 0, 3, 3, 1, 3, 2, 0, 2, 3, 1, 3, 2, 3, 3, 2, 2, 4, 3, 1, 3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 3, 0, 5], [4, 31, 78, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 1, 2, 3, 0, 0, 0], [91, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 20, 20, 12, 8, 2, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32), alpha)))), tf.math.add(beta, beta))), beta)))), grad))))), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), alpha)", "other_info": {"loss": [4594.448387432312, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.17659489810466766, 0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.5975523874117104e+17, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10433333367109299, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [89, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4, 2, 5, 4, 2, 2, 5, 6, 4, 2, 0, 4, 2, 6, 2, 1, 0, 3, 4, 2, 4, 2, 2, 2, 9, 1, 0, 1, 2, 2, 4, 6, 9, 1, 2, 4, 5, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 3, 0, 3, 2, 2, 3, 0, 3, 3, 1, 3, 2, 0, 2, 3, 1, 3, 1, 3, 3, 2, 2, 3, 3, 1, 3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 3, 0, 5], [71, 31, 55, 62, 37, 47, 1, 35, 47, 32, 7], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [4, 1, 1, 4, 3, 4], [44], [0, 1, 0, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 2, 2, 3, 0, 0, 0], [91, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 58, 58, 32, 26, 4, 3, 2, 1, 1, 0, 5, 3, 2, 1], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.sqrt(grad))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), grad)))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, beta))), tf.math.add(beta, grad)))))), tf.math.negative(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.add(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(alpha, grad)), tf.math.negative(tf.math.multiply(tf.math.pow(beta, tf.math.add(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), beta), tf.math.add(beta, grad))), tf.math.add(beta, alpha))), tf.math.add(beta, grad)))), tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha))), tf.math.subtract(grad, tf.math.add(beta, tf.math.add(tf.math.add(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), beta))), tf.math.divide_no_nan(tf.math.add(beta, grad), grad))))))))), alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.sqrt(beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 2, 5, 3, 2, 2, 0, 6, 4, 2, 0, 8, 6, 5, 2, 6, 0, 2, 4, 8, 4, 6, 4, 2, 0, 8, 6, 3, 2, 2, 2, 1, 9, 1, 2, 8, 2, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [4, 1, 0, 1, 2, 1, 3, 0, 3, 3, 1, 3, 2, 3, 1, 3, 3, 3, 2, 3, 3, 0, 3, 4, 3, 1, 3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 3, 0, 5], [71, 31, 55, 62, 37, 47, 1, 35, 47, 32, 7], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [49, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 23, 23, 13, 10, 2, 3, 2, 1, 1, 0, 3, 1, 2, 2], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), alpha)))), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))), alpha), tf.math.add(beta, beta))))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(alpha, grad)), tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.302314351594144, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 2, 5, 0, 2, 4, 6, 6, 4, 2, 0, 8, 6, 5, 2, 6, 0, 2, 4, 8, 4, 6, 4, 2, 0, 8, 6, 3, 2, 2, 2, 1, 9, 1, 2, 8, 2, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [4, 1, 0, 1, 2, 1, 3, 0, 3, 3, 1, 3, 2, 3, 1, 3, 3, 3, 2, 3, 3, 0, 3, 4, 3, 1, 3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 3, 0, 5], [71, 31, 55, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 0, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 1, 2, 3, 0, 0, 0], [49, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 23, 23, 13, 10, 2, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))), alpha)), tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), alpha)), tf.math.add(beta, beta)), tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(alpha, grad)), tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, grad))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.sqrt(alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [42, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 4, 1, 2, 5, 6, 4, 2, 0, 8, 6, 5, 2, 6, 0, 3, 4, 4, 0, 6, 4, 6, 0, 1, 0, 2, 2, 1, 1, 1, 1, 1, 2, 9, 6, 4, 6, 4, 2, 9, 1, 3, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 1, 3, 1, 2, 3, 3, 0, 3, 3, 0, 3, 2, 3, 1, 3, 3, 3, 2, 3, 3, 0, 3, 4, 3, 1, 3, 3, 3, 3, 3, 2, 3, 2, 4, 0, 3, 0, 5], [48, 31, 78, 62, 37, 47, 1, 35, 47, 32, 7], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [0, 1, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 1, 2, 3, 0, 0, 0], [91, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 77, 77, 44, 33, 5, 3, 2, 1, 1, 0, 3, 1, 2, 1], "tree_depth": 68, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.sqrt(grad)), alpha)), tf.math.add(beta, beta)))))), grad)), tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))))))), tf.math.add(beta, tf.math.multiply(tf.math.pow(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.divide_no_nan(tf.math.pow(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(beta, tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(grad, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))))), grad)))), tf.math.divide_no_nan(beta, tf.math.pow(grad, tf.math.divide_no_nan(tf.math.pow(grad, tf.math.add(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(beta, grad)))))))))))), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), grad))), alpha)), tf.math.add(beta, tf.math.subtract(grad, grad))), tf.math.multiply(grad, tf.math.add(beta, grad))))))), tf.math.add(beta, grad)), tf.math.add(beta, beta))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, sigma))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.26020342111587524, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [35, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 2, 5, 0, 9, 2, 0, 6, 4, 1, 0, 8, 6, 5, 2, 6, 0, 2, 4, 8, 4, 6, 4, 2, 0, 8, 6, 3, 2, 2, 2, 1, 9, 1, 2, 8, 2, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 1, 3, 3, 2, 1, 3, 0, 3, 3, 1, 3, 2, 3, 1, 3, 3, 3, 2, 3, 3, 0, 3, 4, 3, 1, 3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 3, 0, 5], [10, 31, 55, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 0, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 1, 2, 3, 0, 0, 0], [49, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 7, 7, 4, 3, 0, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.negative(tf.math.add(beta, grad)))), alpha), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.sqrt(alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [2, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [0, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [22, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 2, 5, 2, 2, 2, 0, 6, 4, 2, 0, 8, 6, 5, 2, 6, 0, 2, 4, 8, 4, 6, 4, 2, 0, 8, 6, 3, 2, 2, 2, 1, 9, 1, 2, 8, 2, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 1, 0, 3, 3, 3, 1, 3, 3, 3, 1, 3, 2, 3, 1, 3, 1, 3, 1, 3, 3, 2, 2, 3, 3, 1, 0, 3, 3, 3, 2, 2, 3, 2, 4, 0, 3, 0, 5], [71, 31, 55, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 1, 2, 3, 0, 0, 0], [91, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.negative(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), alpha)", "other_info": {"loss": [37299.95284122628, 683594.9449709418, 3194250.846651697, 8907030.101307621, 19190597.162065778, 35383105.73873993], "accuracy": [0.0940430611371994, 0.10328886657953262, 0.09893012791872025, 0.09708096832036972, 0.09734513610601425, 0.09787346422672272], "val_loss": [139193.13839285713, 1101476.5714285714, 3704650.3571428573, 8766510.57142857, 17104869.14285714, 29537529.14285714], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [22, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 2, 5, 2, 2, 2, 5, 6, 2, 2, 0, 4, 2, 2, 2, 6, 0, 5, 4, 2, 2, 6, 0, 1, 0, 2, 0, 4, 2, 2, 5, 6, 2, 5, 2, 8, 5, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 1, 0, 1, 2, 2, 3, 0, 3, 3, 1, 3, 3, 0, 2, 3, 1, 3, 2, 1, 3, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 2, 4, 0, 3, 0, 5], [4, 31, 78, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 1, 2, 3, 0, 0, 0], [91, 18, 10, 42]], "fitness": -0.0908571407198906, "mapping_values": [1, 3, 3, 1, 2, 1, 65, 65, 38, 27, 3, 1, 0, 0, 0, 0, 3, 1, 2, 0], "tree_depth": 58, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), alpha)), tf.math.add(beta, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)))))), tf.math.add(tf.math.add(beta, tf.math.negative(alpha)), tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, grad))))), tf.math.add(tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(grad)), tf.math.square(tf.math.pow(tf.math.add(tf.math.add(tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, grad)))), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.square(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(alpha)), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), beta))))))))), tf.math.sqrt(tf.math.add(beta, alpha))))))), grad), beta), tf.math.square(beta))))), grad))))), tf.math.add(beta, tf.math.pow(grad, grad))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, alpha)", "other_info": {"loss": [2.3018514425715813, 2.300964072521856, 2.303722827945639, 2.3037299350299665, 2.3033046838299094, 2.301953190621006, 2.302104870373342, 2.3030445603426215, 2.3032816465677852, 2.3017725337686916, 2.302566435579233, 2.3025686687340494, 2.303146193670228, 2.301328245958301, 2.301912106795003, 2.301699132904196, 2.301305958497573, 2.3010263025422124, 2.301741856184649, 2.300470972325682, 2.300720363890789, 2.300845282598336, 2.3005465865686285, 2.3013650797865473, 2.2995830448847467, 2.2997721490165923, 2.300547115303002, 2.3003165473114184, 2.301311352155023, 2.2996677332046622, 2.2985466188837145, 2.299136043523895, 2.2999771608416397, 2.298766598993084, 2.2982895277305726, 2.2975801021163775, 2.2997257241861395, 2.2984506758905403, 2.2991960715025708, 2.2976169883771864, 2.2985646018357153, 2.298524964990995, 2.297798264721019, 2.2973665019634804, 2.298068117235693, 2.2975224830754413, 2.2975056969084995, 2.2988203759080683, 2.2990582748222126, 2.298447069978796, 2.2973599027664653, 2.297667750939402, 2.297995643435594, 2.2982001426811656, 2.297934397069014], "accuracy": [0.08770307898521423, 0.09179764986038208, 0.08387266844511032, 0.09338264167308807, 0.09153348207473755, 0.09457138925790787, 0.09298639744520187, 0.08994849026203156, 0.09232597798109055, 0.09245806187391281, 0.0878351628780365, 0.08928807079792023, 0.09232597798109055, 0.09338264167308807, 0.09113723784685135, 0.08968432247638702, 0.09074098616838455, 0.09628847241401672, 0.09074098616838455, 0.09351472556591034, 0.09576013684272766, 0.09906221181154251, 0.09945846349000931, 0.09549596905708313, 0.09826971590518951, 0.09576013684272766, 0.09694888442754745, 0.09668471664190292, 0.09668471664190292, 0.09774138033390045, 0.09853387624025345, 0.10566636174917221, 0.09602430462837219, 0.09932637959718704, 0.10038304328918457, 0.1026284471154213, 0.10130762308835983, 0.10355303436517715, 0.09760929644107819, 0.10474177449941635, 0.10447761416435242, 0.10421344637870789, 0.10659094154834747, 0.10910051316022873, 0.10936468094587326, 0.10817593336105347, 0.10777968913316727, 0.1072513535618782, 0.10447761416435242, 0.10632677376270294, 0.1162329912185669, 0.11227050423622131, 0.11795007437467575, 0.109232597053051, 0.11002509295940399], "val_loss": [1.9710064615522112, 1.9710046904427665, 1.9709994452340263, 1.970989499773298, 1.9709739003862654, 1.9709512165614538, 1.9709197453090124, 1.9708803721836634, 1.970832007271903, 1.970773560660226, 1.9707040786743164, 1.9706228801182337, 1.9705301012311662, 1.9704283305576868, 1.97031831741333, 1.97020047051566, 1.9700749942234583, 1.9699431146894182, 1.969806126185826, 1.9696643693106515, 1.9695241791861398, 1.9693824904305595, 1.969235897064209, 1.9690958431788854, 1.9689568792070662, 1.968824795314244, 1.9687036786760603, 1.9685908726283483, 1.9684826987130302, 1.9683826310294015, 1.9682982308523995, 1.9682199614388602, 1.9681648526872908, 1.9681266375950404, 1.968097754887172, 1.9680674416678292, 1.9680277279445104, 1.967977591923305, 1.9679276602608817, 1.9678865841456823, 1.9678445543561662, 1.9678076335362025, 1.9677790233067103, 1.9677607672555106, 1.9677502768380302, 1.9677505493164062, 1.9677626746041434, 1.967789990561349, 1.967832088470459, 1.967878954751151, 1.9679429871695382, 1.9680141721452986, 1.9680940764290946, 1.9681859016418457, 1.968282835824149], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03733333200216293, 0.03766666725277901, 0.03799999877810478, 0.03799999877810478, 0.03733333200216293, 0.038333334028720856, 0.03866666555404663, 0.03933333232998848, 0.04066666588187218, 0.04100000113248825, 0.041333332657814026, 0.04266666620969772, 0.044333335012197495, 0.045666664838790894, 0.04699999839067459, 0.04899999871850014, 0.049666665494441986, 0.05066666752099991, 0.052666667848825455, 0.05400000140070915, 0.055666666477918625, 0.05700000002980232, 0.059333331882953644, 0.06199999898672104, 0.06233333423733711, 0.06333333253860474, 0.0676666647195816, 0.0729999989271164, 0.07566666603088379, 0.07800000160932541, 0.0820000022649765, 0.08533333241939545, 0.08900000154972076, 0.09233333170413971, 0.09433333575725555, 0.09666666388511658, 0.10000000149011612, 0.10266666859388351, 0.10633333027362823, 0.10733333230018616, 0.10899999737739563, 0.1120000034570694, 0.1146666631102562, 0.11633333563804626, 0.11800000071525574, 0.11866666376590729, 0.11833333224058151, 0.11900000274181366, 0.11800000071525574, 0.11833333224058151, 0.11833333224058151, 0.11733333021402359, 0.11666666716337204]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [32, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 2, 4, 4, 2, 2, 5, 0, 4, 2, 0, 4, 2, 5, 2, 6, 0, 3, 4, 6, 9, 9, 3, 2, 0, 1, 0, 3, 2, 4, 2, 0, 9, 1, 2, 8, 5, 6, 6, 2, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 1, 0, 2, 3, 2, 1, 3, 3, 3, 1, 3, 2, 3, 1, 3, 1, 3, 1, 3, 3, 2, 2, 3, 3, 1, 0, 3, 3, 3, 2, 2, 3, 2, 4, 0, 3, 0, 5], [4, 31, 89, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 1, 2, 3, 0, 0, 0], [91, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 4, 4, 2, 2, 1, 67, 67, 42, 25, 5, 1, 0, 0, 0, 0, 3, 1, 2, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha))))), tf.math.pow(tf.math.add(beta, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(beta)), grad))))), beta)), tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.negative(tf.math.multiply(tf.math.pow(tf.math.divide_no_nan(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), alpha), tf.math.add(beta, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))), grad))))))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.subtract(beta, tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad)))))))), tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.negative(tf.math.add(beta, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), alpha))))), tf.math.sqrt(grad))))), tf.math.square(grad)))), tf.math.divide_no_nan(tf.math.divide_no_nan(beta, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, alpha)", "other_info": {"loss": [2.30185147406261, 2.3009650216299735, 2.3037275421841428, 2.3037430705993938, 2.3033312598019227, 2.3019995051068936], "accuracy": [0.08770307898521423, 0.09179764986038208, 0.08387266844511032, 0.09338264167308807, 0.09153348207473755, 0.09417514503002167], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [2, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [19, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [6, 2, 5, 2, 1, 2, 5, 6, 2, 2, 0, 4, 2, 5, 2, 6, 0, 5, 4, 2, 2, 6, 4, 1, 0, 1, 0, 4, 2, 4, 2, 6, 2, 1, 2, 8, 5, 4, 6, 4, 2, 9, 1, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 0, 0, 1, 2, 2, 3, 0, 3, 3, 1, 3, 2, 0, 2, 3, 1, 3, 2, 3, 3, 2, 2, 4, 3, 1, 3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 3, 0, 5], [4, 31, 78, 62, 37, 47, 1, 35, 47, 32, 7], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 4, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 1, 0, 1, 0, 1, 0, 1], [3, 8, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 1, 2, 3, 0, 0, 0], [91, 18, 10, 42]], "fitness": -0.017999999225139618, "mapping_values": [1, 4, 4, 2, 2, 1, 17, 17, 9, 8, 3, 1, 0, 0, 0, 0, 3, 1, 2, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.square(beta))))))))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, alpha)", "other_info": {"loss": [2.304493746280733, 2.3089489241506698, 2.3142540043591664, 2.3159785168030163, 2.3170216029047133, 2.3167938541159923], "accuracy": [0.08017434924840927, 0.07317395508289337, 0.05692775174975395, 0.0536256767809391, 0.04860652610659599, 0.04266279190778732], "val_loss": [1.9769062314714705, 1.980994701385498, 1.9834306580679757, 1.9847556522914342, 1.9853263582502092, 1.9853664125714983], "val_accuracy": [0.020666666328907013, 0.01733333244919777, 0.014333332888782024, 0.014000000432133675, 0.014000000432133675, 0.016333334147930145]}}]