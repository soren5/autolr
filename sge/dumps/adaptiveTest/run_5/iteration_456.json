[{"genotype": [[0], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [2, 0, 8, 0, 3, 1, 1, 4, 0, 9, 5, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [0, 1, 2, 2, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [66, 45, 37, 70, 77, 85, 89, 98, 7, 56], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 5, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [5, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0], [3, 9, 4, 3, 8, 8, 8, 4, 0, 7, 6], [2, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.8077142834663391, "mapping_values": [1, 16, 16, 11, 5, 2, 1, 1, 0, 1, 0, 3, 3, 2, 1, 1, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)))), tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.subtract(alpha, tf.math.add(alpha, tf.math.subtract(grad, tf.math.pow(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))))))), tf.math.square(grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.017632400890336, 1.5610474626448931, 1.1362252410502718, 1.058569902662651, 0.9031899636762647, 0.848415962378457, 0.7954574400376272, 0.7874923973130102, 0.7178402899310196, 0.7164744662256005, 0.6997006780451567, 0.6662714149595771, 0.6713263397093352, 0.6334917696239359, 0.6308703776505551, 0.6296491295890471, 0.5938118231798821, 0.5776285664390627, 0.6028591492282811, 0.5600273958475614, 0.5736649301876844, 0.5541789060916883, 0.5349241763278556, 0.5252930561368176, 0.522527856030689, 0.5192326004510511, 0.5413755635228911, 0.5167645866907724, 0.5015457185929273, 0.4931631140138306], "accuracy": [0.3222824037075043, 0.4621582329273224, 0.5865803956985474, 0.6021661758422852, 0.6540747880935669, 0.672170102596283, 0.6997754573822021, 0.6911900639533997, 0.7268524765968323, 0.7239466309547424, 0.7383436560630798, 0.7413815855979919, 0.7363624572753906, 0.7510236501693726, 0.7585523724555969, 0.7577598690986633, 0.7709681391716003, 0.7807422876358032, 0.767930269241333, 0.7832518815994263, 0.7840443849563599, 0.7868181467056274, 0.8005547523498535, 0.7976489067077637, 0.8010830879211426, 0.8000264167785645, 0.793422281742096, 0.796328067779541, 0.8088759779930115, 0.8125742673873901], "val_loss": [1.5430402755737305, 1.0679160526820592, 0.9527380125863212, 0.832702670778547, 0.6688666684286935, 0.6276129143578666, 0.5936281170163836, 0.5722086088997977, 0.5590929133551461, 0.5438394716807774, 0.508785537311009, 0.530877845627921, 0.5253475223268781, 0.498479996408735, 0.5277756452560425, 0.48999156270708355, 0.4663999080657959, 0.46216496399470736, 0.48050999641418457, 0.5185814414705548, 0.45163185255868094, 0.4490872962134225, 0.43437834296907696, 0.4190169061933245, 0.4093689152172634, 0.4459062303815569, 0.4503366436277117, 0.4446784428187779, 0.41068094968795776, 0.4108461397034781], "val_accuracy": [0.42233332991600037, 0.5616666674613953, 0.5580000281333923, 0.5733333230018616, 0.675000011920929, 0.7026666402816772, 0.7283333539962769, 0.7269999980926514, 0.7353333234786987, 0.7476666569709778, 0.7630000114440918, 0.7516666650772095, 0.7480000257492065, 0.765999972820282, 0.7609999775886536, 0.7743333578109741, 0.7873333096504211, 0.7900000214576721, 0.7726666927337646, 0.753000020980835, 0.7919999957084656, 0.793666660785675, 0.8009999990463257, 0.8130000233650208, 0.8169999718666077, 0.800000011920929, 0.7903333306312561, 0.7919999957084656, 0.8056666851043701, 0.815666675567627]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [2, 0, 5, 0, 3, 1, 1, 4, 0, 9, 5, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [0, 1, 2, 2, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [66, 45, 37, 70, 77, 85, 89, 98, 7, 56], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 5, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [5, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0], [3, 9, 4, 3, 8, 8, 8, 4, 0, 7, 6], [2, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.805142879486084, "mapping_values": [1, 8, 8, 5, 3, 1, 1, 1, 0, 1, 0, 3, 3, 2, 1, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.square(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.017635244908129, 1.561991460020075, 1.1513439325089028, 0.9880709095307314, 0.9472886609395009, 0.8453349863706626, 0.7849582492982423, 0.762584660724327, 0.7324192523247751, 0.7233419722931937, 0.6892430080697993, 0.6693660529723272, 0.6795724165784433, 0.6272239084209764, 0.6175103486804536, 0.6406577577869323, 0.5899861214529679, 0.5925318090718231, 0.5949462260221839, 0.5571465439028697, 0.5773647805608699, 0.5546359161911167, 0.5335824715699092, 0.5370724539416042, 0.5280458946678979, 0.514001599770212, 0.5307572019130106, 0.5201059900349189, 0.5025478287057129], "accuracy": [0.3222824037075043, 0.46268656849861145, 0.5754854083061218, 0.6324131488800049, 0.63096022605896, 0.6744155287742615, 0.6963412761688232, 0.7057191729545593, 0.7213049530982971, 0.7231541275978088, 0.7376832365989685, 0.7375511527061462, 0.7329282760620117, 0.7543256878852844, 0.7607977986335754, 0.7520803213119507, 0.7759873270988464, 0.7755910754203796, 0.7744023203849792, 0.7840443849563599, 0.7829877138137817, 0.7845727205276489, 0.8020076751708984, 0.7887993454933167, 0.7980451583862305, 0.8021397590637207, 0.8018755912780762, 0.7968564033508301, 0.8083476424217224], "val_loss": [1.5429670129503523, 1.078951256615775, 0.9250602381569999, 0.8959767818450928, 0.6875831399645124, 0.6190087965556553, 0.6284929854529244, 0.5762072460991996, 0.57492995262146, 0.5276449407849994, 0.5109228236334664, 0.5488962275641305, 0.524337785584586, 0.4840648855481829, 0.49679466656276156, 0.4879587548119681, 0.4737597533634731, 0.46518310478755404, 0.4824697630746024, 0.5186659267970494, 0.4492052452904837, 0.44534545285361155, 0.4375878572463989, 0.4178652422768729, 0.4147211228098188, 0.4326443246432713, 0.4570599453789847, 0.44232485975537983, 0.41157745463507517], "val_accuracy": [0.42233332991600037, 0.5533333420753479, 0.5929999947547913, 0.581333339214325, 0.6773333549499512, 0.7183333039283752, 0.7099999785423279, 0.7316666841506958, 0.7293333411216736, 0.7536666393280029, 0.762666642665863, 0.7453333139419556, 0.7526666522026062, 0.7766666412353516, 0.7746666669845581, 0.7723333239555359, 0.7806666493415833, 0.7856666445732117, 0.7720000147819519, 0.7559999823570251, 0.7893333435058594, 0.7976666688919067, 0.8013333082199097, 0.815666675567627, 0.812333345413208, 0.8026666641235352, 0.7839999794960022, 0.7960000038146973, 0.8103333115577698]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [2, 4, 8, 0, 3, 1, 2, 4, 2, 5, 5, 2, 2, 2, 3, 5, 2, 1, 8, 9, 9, 8, 2, 6, 8, 4, 5, 4, 1, 4], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [66, 45, 37, 70, 77, 85, 89, 98, 7, 56], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 5, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [5, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0], [3, 9, 4, 3, 8, 8, 8, 4, 0, 7, 6], [2, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7314285635948181, "mapping_values": [1, 33, 33, 20, 13, 6, 1, 1, 0, 1, 0, 3, 3, 2, 1, 1, 1, 0, 1, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, grad))), tf.math.add(alpha, alpha))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.square(tf.math.add(alpha, grad)), tf.math.add(alpha, alpha))), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.subtract(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)))), grad))))), tf.math.add(alpha, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)))))), alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.0145934422286023, 1.611698062003265, 1.167503103493794, 1.0148523233003306, 0.9286982450487119, 0.837855268360806, 0.8229252659743882, 0.7620887952694221, 0.7600746490636978, 0.7187106300338763], "accuracy": [0.32043322920799255, 0.44644036889076233, 0.5721833109855652, 0.6128648519515991, 0.6487914323806763, 0.689869225025177, 0.6909258961677551, 0.7141724824905396, 0.7172104120254517, 0.7300224304199219], "val_loss": [1.6604548863002233, 0.9042313780103411, 0.800569840839931, 0.7350192751203265, 0.6270614010947091, 0.691949622971671, 0.6139718294143677, 0.5710681506565639, 0.5647022042955671, 0.5494613306862968], "val_accuracy": [0.28299999237060547, 0.5723333358764648, 0.6416666507720947, 0.6633333563804626, 0.7336666584014893, 0.6736666560173035, 0.7023333311080933, 0.7293333411216736, 0.7303333282470703, 0.7306666374206543]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [2, 4, 8, 0, 3, 2, 1, 4, 4, 5, 5, 2, 2, 2, 3, 5, 2, 9, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [66, 45, 37, 70, 77, 85, 89, 98, 7, 56], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 5, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [5, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0], [3, 9, 4, 3, 8, 8, 8, 4, 0, 7, 6], [2, 1, 1, 4, 3, 4], [13], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.5080000162124634, "mapping_values": [1, 13, 13, 7, 6, 1, 1, 1, 0, 1, 0, 3, 3, 2, 1, 1, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.pow(tf.math.sqrt(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), grad)))), tf.math.subtract(tf.math.add(alpha, alpha), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3024598133483694, 2.3002416401365413, 2.2984807344869207, 2.2968882483388016, 2.2961974551790756, 2.294570067429256, 2.2941247760627594, 2.2938449380577612, 2.292157886428541, 2.290459440305894, 2.288448912702799, 2.287739150921871, 2.284639804811368, 2.286073738510551, 2.2845247259166466, 2.2831043585211828, 2.282322462885812, 2.2793510652347373, 2.2787110191751325, 2.2772781253097207, 2.274841305381665, 2.2751553263001045, 2.273499417377422, 2.2714215860453737, 2.270493493308764, 2.2692404942757514, 2.2669195013432972, 2.2656365931703273, 2.2637597491098447, 2.2638878306188697, 2.2612621433400144, 2.2607517543485875, 2.261182941576084, 2.257339338159769, 2.257408358937068, 2.254990315314502, 2.2545337982464932, 2.2533506058494033, 2.2519957322045214, 2.2489662351798483, 2.2497189070460126, 2.2468506285007743, 2.245193651622832, 2.2438887100902454, 2.241196614592823, 2.2420241966255117, 2.238569590362339, 2.237427141688141, 2.2370782138460177, 2.232191772288367, 2.23277763778098, 2.2293050957393685, 2.2283814102352224, 2.228276287859079, 2.2254093640579002, 2.222575695601909, 2.220574305624679, 2.2200920372717197, 2.2169814512572503, 2.217249180552289, 2.2128718568191963, 2.210836643587565, 2.2090268358657106, 2.2080118280470473, 2.2068654439389794, 2.2022838210543116, 2.2014452679880607, 2.1984923265991494, 2.1961964791272344, 2.192860591743821, 2.191156519119057, 2.190923906918829, 2.188061485327057, 2.1837278959253887, 2.1837888234767933, 2.1809847451881286, 2.177570593308275, 2.173822426288954, 2.1738225943250837, 2.169717870635946, 2.1686904396694002, 2.165271079960658, 2.1599785734586523, 2.1588312343221534, 2.1545754932629797, 2.153419709870088, 2.1540173922452976, 2.1510950520431926, 2.1445211189581403, 2.141612175984421, 2.13724936722229, 2.134085674295966, 2.130286176143904, 2.1292434161633014, 2.125480118586387, 2.122987731100467, 2.118182383539686, 2.1140848683674793, 2.111936987698149, 2.1094359069877626], "accuracy": [0.0886276587843895, 0.09100515395402908, 0.09879804402589798, 0.1002509593963623, 0.107647605240345, 0.10368511080741882, 0.10527011007070541, 0.11147800832986832, 0.11689341068267822, 0.12257297337055206, 0.12561088800430298, 0.12838461995124817, 0.137630432844162, 0.13459251821041107, 0.1410645842552185, 0.1410645842552185, 0.1460837423801422, 0.1566503793001175, 0.1450270712375641, 0.15519747138023376, 0.16734910011291504, 0.16536785662174225, 0.1666886806488037, 0.17500990629196167, 0.17395325005054474, 0.17831197381019592, 0.18584071099758148, 0.186104878783226, 0.1912561058998108, 0.19495442509651184, 0.19891692698001862, 0.20459648966789246, 0.1990489959716797, 0.2145027071237564, 0.20221899449825287, 0.21265354752540588, 0.2106723040342331, 0.216880202293396, 0.22335226833820343, 0.2296922504901886, 0.22705058753490448, 0.23814556002616882, 0.23973055183887482, 0.23986263573169708, 0.24580636620521545, 0.24105137586593628, 0.24514594674110413, 0.25478801131248474, 0.25056135654449463, 0.25597676634788513, 0.2576938271522522, 0.2654867172241211, 0.2677321434020996, 0.26535463333129883, 0.27143046259880066, 0.27261921763420105, 0.2805441915988922, 0.28358209133148193, 0.2883370816707611, 0.2802800238132477, 0.2887333333492279, 0.2991678714752197, 0.29401662945747375, 0.2999603748321533, 0.29903578758239746, 0.3032624423503876, 0.30947035551071167, 0.3093382716178894, 0.3148857355117798, 0.3139611780643463, 0.3195086419582367, 0.32267865538597107, 0.3175274133682251, 0.3269053101539612, 0.32479196786880493, 0.3229427933692932, 0.325320303440094, 0.3387927711009979, 0.3283582031726837, 0.33483028411865234, 0.3353586196899414, 0.3469819128513336, 0.34922730922698975, 0.34883105754852295, 0.3541143834590912, 0.35464271903038025, 0.34328359365463257, 0.3490952253341675, 0.3533218801021576, 0.35305771231651306, 0.36283186078071594, 0.36481308937072754, 0.36124685406684875, 0.3609826862812042, 0.3625676929950714, 0.3675868511199951, 0.3704926669597626, 0.3741909861564636, 0.3751155734062195, 0.36560559272766113], "val_loss": [1.9697653906685966, 1.968545981815883, 1.9673150607517786, 1.9660983085632324, 1.9648782185145788, 1.9636650085449219, 1.9624542508806502, 1.9612463542393275, 1.9600435665675573, 1.958845751626151, 1.9576342446463448, 1.9564313888549805, 1.9552333014351981, 1.9540284701756068, 1.952812876020159, 1.9516019821166992, 1.9503942217145647, 1.9491799899509974, 1.9479562895638602, 1.946725709097726, 1.9454996245247977, 1.9442698614937919, 1.9430241584777832, 1.9417777742658342, 1.9405242374965124, 1.939265183040074, 1.9379857608250208, 1.9366991179330009, 1.9354016440255302, 1.9341093472072057, 1.9327943665640694, 1.9314636502947127, 1.9301317759922572, 1.928781577519008, 1.9274285861424036, 1.9260450771876745, 1.9246720586504256, 1.9232957703726632, 1.9218923023768835, 1.9204620633806502, 1.919022492000035, 1.9175639833722795, 1.916097777230399, 1.9146164485386439, 1.9130902971540178, 1.911571979522705, 1.9100196020943778, 1.90846163885934, 1.9068796294076102, 1.9052555220467704, 1.9036295754568917, 1.9019597598484583, 1.9002972330365862, 1.8986174719674247, 1.896904468536377, 1.8951609475272042, 1.8934199469430106, 1.8916318757193429, 1.889817442212786, 1.8879979678562708, 1.8861257008143835, 1.8842389242989677, 1.8822983333042689, 1.8803376470293318, 1.8783879280090332, 1.8763588496616908, 1.8743281364440918, 1.8722467422485352, 1.870131288255964, 1.8679670606340681, 1.8657875742231096, 1.8635846546718053, 1.8613414083208357, 1.8590339251926966, 1.8567143848964147, 1.8543735912867956, 1.8519551413399833, 1.8494898251124792, 1.8470287322998047, 1.84454311643328, 1.8420022555759974, 1.8394285610743932, 1.836794376373291, 1.8341230664934431, 1.8313726697649275, 1.8286211150033134, 1.8258533477783203, 1.823026248386928, 1.8201463563101632, 1.8172200066702706, 1.8142152513776506, 1.8111767087663924, 1.8080853734697615, 1.8049885204860143, 1.8018076760428292, 1.7986159324645996, 1.7953564098903112, 1.7920352390834264, 1.7886625017438615, 1.7852614266531808], "val_accuracy": [0.04600000008940697, 0.05366666615009308, 0.060333333909511566, 0.06933332979679108, 0.07699999958276749, 0.08900000154972076, 0.09799999743700027, 0.10533333569765091, 0.11633333563804626, 0.12833333015441895, 0.1393333375453949, 0.1576666682958603, 0.16866666078567505, 0.18199999630451202, 0.19566667079925537, 0.2083333283662796, 0.21666666865348816, 0.2290000021457672, 0.2383333295583725, 0.24833333492279053, 0.257666677236557, 0.27000001072883606, 0.27933332324028015, 0.28700000047683716, 0.296999990940094, 0.30300000309944153, 0.3136666715145111, 0.3216666579246521, 0.3266666531562805, 0.3323333263397217, 0.3346666693687439, 0.3409999907016754, 0.3453333377838135, 0.34933334589004517, 0.35466668009757996, 0.3596666753292084, 0.36500000953674316, 0.36633333563804626, 0.3696666657924652, 0.37166666984558105, 0.3733333349227905, 0.37700000405311584, 0.3799999952316284, 0.38333332538604736, 0.3863333463668823, 0.38866665959358215, 0.38966667652130127, 0.3930000066757202, 0.39366665482521057, 0.39766666293144226, 0.4000000059604645, 0.4026666581630707, 0.40533334016799927, 0.40666666626930237, 0.4113333225250244, 0.4129999876022339, 0.4153333306312561, 0.4176666736602783, 0.41966667771339417, 0.4230000078678131, 0.42500001192092896, 0.42633333802223206, 0.42933332920074463, 0.4320000112056732, 0.4350000023841858, 0.43666666746139526, 0.43966665863990784, 0.4416666626930237, 0.4429999887943268, 0.4440000057220459, 0.445333331823349, 0.44600000977516174, 0.4466666579246521, 0.44866666197776794, 0.45100000500679016, 0.4516666531562805, 0.4546666741371155, 0.4566666781902313, 0.4586666524410248, 0.46000000834465027, 0.460999995470047, 0.46299999952316284, 0.46433332562446594, 0.46533334255218506, 0.468666672706604, 0.47099998593330383, 0.47200000286102295, 0.4740000069141388, 0.4776666760444641, 0.4793333411216736, 0.48100000619888306, 0.4816666543483734, 0.4833333194255829, 0.4846666753292084, 0.4873333275318146, 0.49000000953674316, 0.49266666173934937, 0.4950000047683716, 0.4970000088214874, 0.49799999594688416]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [2, 0, 8, 0, 3, 1, 1, 4, 0, 9, 4, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [0, 1, 2, 2, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [66, 45, 37, 70, 77, 85, 89, 98, 7, 56], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 5, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [5, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0], [3, 9, 4, 3, 8, 8, 8, 4, 0, 7, 6], [2, 1, 1, 4, 3, 4], [2], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.13600000739097595, "mapping_values": [1, 17, 17, 11, 6, 2, 1, 1, 0, 1, 0, 3, 3, 2, 1, 1, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)))), tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.subtract(alpha, tf.math.add(alpha, tf.math.subtract(grad, tf.math.pow(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))))))), tf.math.pow(grad, tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3029475766969094, 2.3018885179360185, 2.3013250441079474, 2.300856890821375, 2.301344403217907, 2.3008599780758754, 2.301556807813895, 2.30244709062633, 2.301947107247043, 2.3012554987845815, 2.3004940953378776, 2.3008753447532024, 2.2988025356734103, 2.301440483197056, 2.3012136998917874, 2.30083755816388, 2.301147553930508, 2.2992024630477417, 2.2999214217521415, 2.299731504521932, 2.298216829053037, 2.2996996787749797, 2.299383794847276, 2.298436094001142, 2.298586328913586, 2.298574020046647, 2.2976692312696843, 2.2974446550131695, 2.296813245651634, 2.298027052965619, 2.2968329873146116, 2.297828145235631, 2.299156815321407, 2.2967206581850346, 2.297713602790586, 2.2969659303456815, 2.297549404881933, 2.297453955290198, 2.2978949901088037, 2.296087399040467, 2.2985782690996728, 2.296761006884461, 2.2962280241505595, 2.296519778833224, 2.2955965874863025, 2.2975891722569677, 2.295762698348991, 2.296071811579537, 2.29704702185476, 2.294545474793728, 2.2959965685843287, 2.2949336780895253, 2.294963587670357, 2.2960058731756283, 2.295299171252006, 2.2942815552833546, 2.2930784431730107, 2.2951134430529216, 2.2938858058867972, 2.29529385424372, 2.293296095969387, 2.293091369075168, 2.2933408753620936, 2.2944670674854724, 2.293994107754664, 2.2925157497556157, 2.2929768848570347, 2.2928358448211466, 2.292249229842047, 2.291315297377565, 2.291378243850317, 2.2925425994791424, 2.2927022137110966, 2.291710571794934, 2.2925529278437886, 2.292328962922616, 2.2917677623059505, 2.29108501954432, 2.2923736147451645, 2.290440275369618, 2.2920815849568723, 2.29120038336987, 2.2886627492273584, 2.2900256347882983, 2.290425276003651, 2.2903045585772395, 2.2920415592924197, 2.2922733611340034, 2.2895732236150987, 2.2898398915679934, 2.289271015989278, 2.2890882269738766, 2.2884182490377913, 2.2892881370633114, 2.2895453576445814, 2.288989281814962, 2.288373967360795, 2.2875920684818483, 2.2889176312218473, 2.2894942690557447], "accuracy": [0.08691058307886124, 0.0878351628780365, 0.09245806187391281, 0.09060890227556229, 0.09774138033390045, 0.08955223858356476, 0.08994849026203156, 0.09100515395402908, 0.09311848133802414, 0.09338264167308807, 0.09192973375320435, 0.09272222965955734, 0.10091137140989304, 0.09681680053472519, 0.0936468094587326, 0.09377889335155487, 0.09813763201236725, 0.10117553919553757, 0.09100515395402908, 0.10051512718200684, 0.10170386731624603, 0.10157178342342377, 0.09074098616838455, 0.1006472036242485, 0.09932637959718704, 0.1010434553027153, 0.10328886657953262, 0.10381719470024109, 0.09919429570436478, 0.09800554811954498, 0.10487385839223862, 0.10342095047235489, 0.09655263274908066, 0.10936468094587326, 0.10011887550354004, 0.10011887550354004, 0.10487385839223862, 0.10593052208423615, 0.10342095047235489, 0.1072513535618782, 0.10381719470024109, 0.1026284471154213, 0.1072513535618782, 0.10355303436517715, 0.10777968913316727, 0.10566636174917221, 0.10976093262434006, 0.1088363528251648, 0.10527011007070541, 0.1088363528251648, 0.10394927859306335, 0.10936468094587326, 0.1080438494682312, 0.10394927859306335, 0.10791176557540894, 0.10949676483869553, 0.11530841141939163, 0.10989301651716232, 0.11742173880338669, 0.1150442510843277, 0.1150442510843277, 0.1154404953122139, 0.1138555034995079, 0.11359133571386337, 0.10870426893234253, 0.11411966383457184, 0.1142517477273941, 0.11161009222269058, 0.11398758739233017, 0.11966715008020401, 0.11649715900421143, 0.11689341068267822, 0.11372341960668564, 0.1224408894777298, 0.1150442510843277, 0.11451591551303864, 0.11596883088350296, 0.120459645986557, 0.11662924289703369, 0.11887465417385101, 0.11200633645057678, 0.11795007437467575, 0.12389380484819412, 0.12442214041948318, 0.12389380484819412, 0.11874257028102875, 0.12389380484819412, 0.11900673806667328, 0.1228371411561966, 0.11676132678985596, 0.12495046854019165, 0.12376172095537186, 0.12759213149547577, 0.12693171203136444, 0.1254788041114807, 0.12389380484819412, 0.12600713968276978, 0.12600713968276978, 0.1282525360584259, 0.11979923397302628], "val_loss": [1.970871925354004, 1.9707392283848353, 1.970604419708252, 1.9704711096627372, 1.970336982182094, 1.970203127179827, 1.97006927217756, 1.969935417175293, 1.9698012215750558, 1.969667843409947, 1.9695337159293038, 1.9693997928074427, 1.9692674364362444, 1.9691344669886999, 1.9689995220729284, 1.9688659395490373, 1.9687329701014928, 1.9686008862086706, 1.9684667587280273, 1.9683330399649483, 1.96820068359375, 1.9680687359401159, 1.9679347446986608, 1.9678021839686803, 1.9676695551191057, 1.9675366537911552, 1.9674030031476701, 1.9672697612217493, 1.9671372004917689, 1.9670050484793526, 1.9668715340750558, 1.9667371341160365, 1.9666036878313338, 1.966470445905413, 1.966339111328125, 1.9662068911961146, 1.9660745348249162, 1.96594272341047, 1.9658103670392717, 1.9656778744288854, 1.9655446325029646, 1.9654123442513602, 1.9652807371956962, 1.9651495388575964, 1.9650156838553292, 1.964883531842913, 1.9647511754717146, 1.964618750980922, 1.9644872801644462, 1.9643548556736536, 1.9642232486179896, 1.9640899385724748, 1.9639586039951868, 1.9638277462550573, 1.963695662362235, 1.9635645321437292, 1.9634341512407576, 1.9633030891418457, 1.9631716183253698, 1.9630403518676758, 1.9629092897687639, 1.962777818952288, 1.9626460075378418, 1.9625134468078613, 1.9623828615461076, 1.9622509138924735, 1.9621210098266602, 1.9619893346514021, 1.9618584087916784, 1.9617263248988561, 1.961594581604004, 1.961463791983468, 1.9613322530473982, 1.9611999647957938, 1.9610708781651087, 1.9609409059797014, 1.9608092989240373, 1.9606778962271554, 1.9605472428458077, 1.9604167938232422, 1.9602864129202706, 1.9601547377450126, 1.960024288722447, 1.9598936353410994, 1.9597618239266532, 1.959630080631801, 1.9595001084463937, 1.95936952318464, 1.9592383248465401, 1.9591073989868164, 1.9589765412466866, 1.9588441167558943, 1.9587125097002303, 1.9585820606776647, 1.958451271057129, 1.9583203451974052, 1.9581900324140276, 1.9580591065543038, 1.95792818069458, 1.9577970504760742], "val_accuracy": [0.03799999877810478, 0.03933333232998848, 0.0403333343565464, 0.04066666588187218, 0.0416666679084301, 0.04333333298563957, 0.04533333331346512, 0.04533333331346512, 0.04633333161473274, 0.04699999839067459, 0.047333333641290665, 0.04833333194255829, 0.050333332270383835, 0.05066666752099991, 0.05133333429694176, 0.05233333259820938, 0.052666667848825455, 0.05366666615009308, 0.05366666615009308, 0.0533333346247673, 0.054666668176651, 0.055666666477918625, 0.056333333253860474, 0.05766666680574417, 0.05833333358168602, 0.05900000035762787, 0.05999999865889549, 0.061000000685453415, 0.06133333221077919, 0.06199999898672104, 0.06333333253860474, 0.06400000303983688, 0.06533333659172058, 0.06666667014360428, 0.06700000166893005, 0.06833333522081375, 0.06966666877269745, 0.070333331823349, 0.070333331823349, 0.0716666653752327, 0.07233333587646484, 0.07266666740179062, 0.07400000095367432, 0.07566666603088379, 0.07633333653211594, 0.07766667008399963, 0.07800000160932541, 0.08033332973718643, 0.0806666687130928, 0.0820000022649765, 0.0833333358168602, 0.0846666693687439, 0.08633333444595337, 0.08699999749660492, 0.08833333104848862, 0.09000000357627869, 0.09066666662693024, 0.09200000017881393, 0.09333333373069763, 0.09399999678134918, 0.09433333575725555, 0.09566666930913925, 0.09666666388511658, 0.09666666388511658, 0.0976666659116745, 0.1003333330154419, 0.1003333330154419, 0.10166666656732559, 0.10266666859388351, 0.10266666859388351, 0.10300000011920929, 0.10333333164453506, 0.10499999672174454, 0.10533333569765091, 0.10633333027362823, 0.10899999737739563, 0.1106666699051857, 0.1120000034570694, 0.11299999803304672, 0.1146666631102562, 0.11533333361148834, 0.11566666513681412, 0.11666666716337204, 0.11733333021402359, 0.11900000274181366, 0.11933333426713943, 0.12200000137090683, 0.12200000137090683, 0.12300000339746475, 0.12433333694934845, 0.12733332812786102, 0.1289999932050705, 0.12933333218097687, 0.1313333362340927, 0.1326666623353958, 0.1340000033378601, 0.13433332741260529, 0.13566666841506958, 0.1366666704416275, 0.13866665959358215]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [2, 4, 8, 0, 3, 1, 1, 4, 2, 5, 5, 2, 2, 2, 9, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [0, 1, 2, 2, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [66, 54, 37, 70, 77, 85, 89, 98, 7, 56], [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 5, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1], [1, 0, 0, 0, 0, 1, 0, 0, 0, 1], [3, 9, 5, 3, 8, 8, 2, 4, 0, 7, 6], [2, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10371428728103638, "mapping_values": [1, 30, 30, 18, 12, 6, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.sqrt(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.pow(alpha, tf.math.add(tf.math.square(tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)), grad))))), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.add(tf.math.subtract(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))))))))), grad), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.267321609392646, 6.051064838460565, 2.7916999911241653, 2.5390808601200527, 2.409963981618089, 2.411029950140521], "accuracy": [0.2277110069990158, 0.1306300312280655, 0.11451591551303864, 0.09826971590518951, 0.1018359512090683, 0.09813763201236725], "val_loss": [8.1764954158238, 2.640247481209891, 2.0433270590645924, 2.0359482084001814, 2.121196678706578, 2.05967800957816], "val_accuracy": [0.21166667342185974, 0.18933333456516266, 0.0989999994635582, 0.09966666996479034, 0.10166666656732559, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [2, 4, 8, 0, 3, 1, 1, 4, 2, 5, 5, 2, 2, 4, 0, 5, 2, 4, 8, 9, 9, 8, 2, 6, 8, 4, 5, 4, 1, 4], [0, 1, 2, 2, 2, 2, 1, 0, 0, 2, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [66, 45, 37, 70, 93, 85, 89, 98, 7, 56], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 5, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [5, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 1, 1, 0], [3, 9, 4, 3, 8, 8, 8, 4, 0, 7, 6], [0, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 32, 32, 21, 11, 6, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.subtract(grad, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.square(tf.math.add(grad, tf.math.add(alpha, grad)))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))))))))), grad)))), tf.math.add(alpha, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 2, 4, 3, 2, 5, 9, 0, 3, 1, 5, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [0, 1, 2, 2, 1, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [66, 20, 37, 70, 67, 85, 89, 98, 7, 56], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 5, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [2, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0], [3, 9, 4, 3, 8, 8, 8, 4, 0, 7, 6], [4, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 18, 11, 7, 2, 1, 1, 0, 1, 0, 3, 3, 2, 1, 1, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.pow(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.square(alpha), tf.math.add(alpha, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.square(alpha)))))))), tf.math.add(alpha, grad))), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [8.012661536018359e+18, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.05468234047293663, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [2, 6, 4, 4, 3, 9, 1, 4, 4, 9, 5, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [3, 0, 2, 2, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [95, 45, 37, 70, 77, 85, 89, 98, 7, 56], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 5, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [5, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0, 1], [3, 0, 4, 3, 8, 8, 8, 4, 0, 7, 6], [2, 1, 1, 4, 3, 4], [54], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 11, 6, 5, 2, 1, 1, 0, 1, 0, 6, 5, 3, 2, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.add(alpha, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))))), grad)), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, beta))), tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, alpha))))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [2, 4, 8, 0, 3, 1, 1, 3, 2, 5, 5, 2, 2, 2, 6, 8, 2, 1, 2, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [0, 1, 2, 2, 2, 0, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [66, 45, 37, 70, 77, 85, 89, 98, 7, 56], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 5, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [5, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0], [3, 9, 4, 3, 8, 8, 8, 4, 0, 7, 6], [2, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [16, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 34, 34, 19, 15, 7, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.multiply(alpha, grad)), tf.math.add(alpha, grad))), tf.math.add(tf.math.square(tf.math.square(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, alpha))))), tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(tf.math.subtract(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))), grad)), alpha))), tf.math.add(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3028799934535846, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09628847241401672, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [2, 0, 8, 0, 3, 1, 1, 4, 0, 9, 5, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [1, 2, 2, 2, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [66, 45, 37, 70, 77, 85, 89, 98, 7, 56], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 5, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1], [3, 9, 0, 3, 8, 4, 8, 4, 0, 7, 6], [2, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [89, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 7, 6, 5, 1, 1, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, beta))))))))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 4, 2, 2, 8, 8, 4, 0, 5, 5, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [0, 1, 2, 2, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [65, 45, 37, 70, 77, 85, 89, 98, 7, 56], [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 5, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [5, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0], [0, 9, 4, 3, 8, 8, 8, 4, 0, 7, 6], [2, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 2, 2, 2, 0, 1, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3028801509087287, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 8, 8, 4, 3, 1, 8, 4, 0, 9, 5, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [0, 1, 2, 2, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [66, 45, 37, 70, 77, 85, 89, 98, 7, 56], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 5, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0], [9, 9, 4, 3, 8, 8, 8, 4, 0, 7, 6], [2, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [2, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 15, 10, 5, 2, 10, 10, 5, 5, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.subtract(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.pow(tf.math.add(alpha, grad), grad))), tf.math.add(alpha, tf.math.negative(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, tf.math.subtract(grad, beta)), tf.math.pow(grad, grad)))), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [19049013.590518907, 366152257.04821026, 1688478373.0085855, 4723750462.081099, 10200901257.078854, 18626871062.012417], "accuracy": [0.09642054885625839, 0.09628847241401672, 0.10513802617788315, 0.10289261490106583, 0.10408136248588562, 0.10091137140989304], "val_loss": [72529874.28571428, 579533970.2857143, 1955138194.2857144, 4633478582.857142, 9048641243.428572, 15634790107.428572], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [2, 0, 8, 0, 3, 1, 1, 4, 0, 9, 5, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [0, 1, 2, 2, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [66, 54, 37, 70, 77, 85, 89, 98, 7, 56], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 5, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [1, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1], [1, 0, 1, 0], [3, 9, 4, 3, 8, 8, 8, 4, 0, 7, 6], [2, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [89, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 15, 10, 5, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))))), tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.subtract(grad, tf.math.pow(grad, tf.math.negative(tf.math.add(alpha, tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32))))))), grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3028801509087287, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [2, 0, 8, 0, 3, 1, 5, 4, 0, 9, 4, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [0, 2, 2, 2, 1, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [66, 45, 37, 70, 77, 85, 89, 98, 7, 56], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 5, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [5, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0], [2, 9, 4, 3, 8, 8, 8, 4, 0, 7, 6], [2, 1, 1, 4, 3, 4], [27], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 3, 3, 2, 1, 1, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [8, 0, 8, 0, 9, 1, 1, 4, 0, 4, 5, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [3, 1, 2, 0, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [65, 45, 37, 70, 77, 85, 89, 98, 7, 56], [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 5, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [5, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0], [0, 9, 4, 3, 8, 8, 8, 4, 0, 7, 6], [4, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 10, 10, 5, 5, 1, 2, 2, 2, 0, 1, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, tf.math.subtract(grad, beta)), tf.math.pow(grad, grad)))), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3028801509087287, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 4, 2, 2, 8, 8, 4, 0, 5, 5, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [0, 1, 2, 2, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [66, 45, 37, 70, 77, 85, 89, 98, 7, 56], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 5, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [5, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0], [0, 9, 4, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 10, 10, 5, 5, 1, 2, 2, 2, 0, 1, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, tf.math.subtract(grad, beta)), tf.math.pow(grad, grad)))), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3028801509087287, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [2, 6, 8, 0, 3, 1, 1, 4, 0, 9, 5, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 1, 2, 2, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [19, 45, 37, 70, 77, 85, 89, 98, 7, 56], [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 5, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [5, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 1, 1, 0], [3, 9, 4, 3, 8, 8, 8, 4, 0, 7, 6], [4, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 17, 17, 11, 6, 1, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.sqrt(tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.subtract(alpha, tf.math.add(alpha, tf.math.subtract(grad, tf.math.pow(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))))))), tf.math.square(grad)))))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.303007055975899, 2.3020892894310547, 2.301672831565445, 2.301342420574224, 2.30197601821586, 2.301634398370828], "accuracy": [0.08677849918603897, 0.08730682730674744, 0.09113723784685135, 0.08942015469074249, 0.09628847241401672, 0.08809932321310043], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 0, 8, 0, 3, 1, 1, 4, 0, 4, 5, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [1, 1, 0, 2, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [66, 45, 37, 70, 77, 85, 89, 98, 7, 56], [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 5, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [5, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0], [3, 4, 4, 3, 8, 8, 8, 4, 0, 7, 6], [4, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 17, 17, 10, 7, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.sqrt(alpha))), tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.subtract(alpha, tf.math.add(alpha, tf.math.subtract(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, grad))))))), tf.math.pow(grad, tf.math.add(alpha, alpha)))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.303007055975899, 2.3020892894310547, 2.301672831565445, 2.301342420574224, 2.30197601821586, 2.301634398370828], "accuracy": [0.08677849918603897, 0.08730682730674744, 0.09113723784685135, 0.08942015469074249, 0.09628847241401672, 0.08809932321310043], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 4, 2, 2, 8, 8, 4, 3, 5, 5, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [0, 1, 2, 2, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [65, 45, 37, 70, 77, 85, 89, 98, 7, 56], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 5, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [35, 80, 39], [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1], [0, 0, 0, 0], [0, 9, 4, 3, 8, 8, 8, 4, 0, 7, 6], [2, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 16, 16, 9, 7, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(grad)))), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.303007055975899, 2.3020892894310547, 2.301672831565445, 2.301342420574224, 2.30197601821586, 2.301634398370828], "accuracy": [0.08677849918603897, 0.08730682730674744, 0.09113723784685135, 0.08942015469074249, 0.09628847241401672, 0.08809932321310043], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}]