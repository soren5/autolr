[{"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 2, 2, 6, 5, 2, 3, 3, 3, 2, 9, 1, 4, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 1, 3, 1, 1, 3, 3, 0, 2, 3, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [21, 61, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.8357142806053162, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9502229485072795, 1.1450538733269733, 0.8164104961952151, 0.6890862139933114, 0.6277607721722499, 0.5751050482446869, 0.5496334844828439, 0.5142886123605581, 0.49009515831042527, 0.465147591439441, 0.45770600759720115, 0.43398747519258934, 0.4261624819496131, 0.4005038475182551, 0.39350615687626006, 0.3834197796953038, 0.3855473272883267, 0.3667577290146059, 0.3567745367203091, 0.3453099110996907, 0.335654339510389, 0.3315574344965477, 0.3218094325887529, 0.31006002416306516, 0.30508509120055005, 0.28719318477532113, 0.28833494827165074, 0.2863685140882454, 0.2779835880574234, 0.26563643006254356, 0.259270220034473, 0.26500727236270905, 0.24430951007274415, 0.24583794409021678, 0.23471455434648478, 0.23003650532343825, 0.2244824416322353, 0.22386852409648794, 0.21106098056343395, 0.21379217173027845, 0.20601025722667982, 0.19808259250315946, 0.19091552976588247, 0.19747022446970725, 0.1875109088997941, 0.19328839212100993], "accuracy": [0.33403778076171875, 0.616299033164978, 0.7005679607391357, 0.7333245277404785, 0.7569673657417297, 0.7808743715286255, 0.7887993454933167, 0.802800178527832, 0.8128384351730347, 0.822348415851593, 0.828820526599884, 0.8343679904937744, 0.8396512866020203, 0.8506141901016235, 0.8558974862098694, 0.8564258217811584, 0.8481045961380005, 0.8595958352088928, 0.863558292388916, 0.8681812286376953, 0.8706908226013184, 0.8709549307823181, 0.8761062026023865, 0.8794082403182983, 0.8787478804588318, 0.8906353116035461, 0.889578640460968, 0.887597382068634, 0.8972394466400146, 0.9000132083892822, 0.8989565372467041, 0.8957865834236145, 0.9059569239616394, 0.9045040011405945, 0.9093911051750183, 0.9100515246391296, 0.91124027967453, 0.9121648669242859, 0.9132214784622192, 0.9171839952468872, 0.9208822846412659, 0.9236560463905334, 0.9255052208900452, 0.921938955783844, 0.9240522980690002, 0.9224672913551331], "val_loss": [0.9559811523982457, 0.6336446489606585, 0.5654202359063285, 0.5076829365321568, 0.4628427709851946, 0.44886958599090576, 0.4292924574443272, 0.41614413261413574, 0.39345654419490267, 0.38157970564705984, 0.3672915015901838, 0.3537691490990775, 0.3490930199623108, 0.34523543289729525, 0.34034028223582674, 0.3570870246206011, 0.3394256830215454, 0.33459043502807617, 0.3283866047859192, 0.3223293934549604, 0.32056799956730436, 0.31249965940202984, 0.31543081998825073, 0.31862917116710116, 0.3030446001461574, 0.30921815974371775, 0.3119398440633501, 0.3029355491910662, 0.30493595770427157, 0.3106192776135036, 0.31445378065109253, 0.3088933399745396, 0.31059043748038156, 0.3176759992327009, 0.3165175659315927, 0.3103043692452567, 0.31230522053582327, 0.3142931205885751, 0.31028352464948383, 0.3084454280989511, 0.3119820441518511, 0.31292781659535, 0.320496814591544, 0.31998989411762785, 0.32057160990578787, 0.3235615151269095], "val_accuracy": [0.6356666684150696, 0.7306666374206543, 0.746999979019165, 0.7670000195503235, 0.7860000133514404, 0.7870000004768372, 0.8040000200271606, 0.8176666498184204, 0.8346666693687439, 0.8256666660308838, 0.8393333554267883, 0.8426666855812073, 0.8510000109672546, 0.8576666712760925, 0.859000027179718, 0.8453333377838135, 0.8560000061988831, 0.8573333621025085, 0.8600000143051147, 0.8683333396911621, 0.8690000176429749, 0.8676666617393494, 0.8723333477973938, 0.8690000176429749, 0.8733333349227905, 0.8709999918937683, 0.8700000047683716, 0.8703333139419556, 0.8766666650772095, 0.871999979019165, 0.871666669845581, 0.875333309173584, 0.8769999742507935, 0.8759999871253967, 0.8776666522026062, 0.8790000081062317, 0.8830000162124634, 0.8759999871253967, 0.8813333511352539, 0.8763333559036255, 0.8859999775886536, 0.8799999952316284, 0.875, 0.875, 0.8813333511352539, 0.8756666779518127]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1], [8, 2, 3, 6, 2, 6, 5, 3, 2, 3, 3, 8, 9, 1, 3, 9, 5, 9, 7, 8, 2, 6, 0, 0, 2, 2, 9, 6, 8, 5, 3, 2, 2, 9, 8, 8, 2, 6], [3, 3, 3, 1, 1, 1, 3, 3, 0, 2, 3, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [21, 2, 52, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.8117142915725708, "mapping_values": [1, 4, 4, 2, 2, 1, 34, 34, 22, 12, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.subtract(grad, tf.math.multiply(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.square(alpha)))))), tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad))))))))))), grad)), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), beta), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.259504971928081, 1.8473570487282265, 1.308128664223053, 0.9639862745649952, 0.8459028179981548, 0.7789947208144551, 0.733841766062162, 0.7009623770023523, 0.6532101389785815, 0.6330597859961938, 0.6111612863323991, 0.5874852288148784, 0.5629847383911678, 0.5389517914381293, 0.5147454296640354, 0.4992725662370447, 0.4987537597723452, 0.4747772966440816, 0.4568286895192987, 0.4469573469233472, 0.4342658194521273, 0.42331180051254513, 0.41423781427331274, 0.40814252813195256, 0.39589782739595697, 0.38597058356319985, 0.37163911634086066, 0.36871814858077334, 0.3604651339112996, 0.3530385675935414, 0.34255364608487526, 0.33107489437207316, 0.3287322671303833, 0.32416645630066343, 0.3209786578577901, 0.31657982531902007, 0.30334876092937346, 0.3009029237892744, 0.29173061490184865, 0.2826863117599689, 0.2796298539192921, 0.2685432999975819, 0.2710498306516958, 0.25656049070640435], "accuracy": [0.189274862408638, 0.4241183400154114, 0.5472196340560913, 0.6479989290237427, 0.6888125538825989, 0.707040011882782, 0.7148329019546509, 0.7420420050621033, 0.7483819723129272, 0.7561748623847961, 0.7705719470977783, 0.7779685854911804, 0.7816668748855591, 0.793950617313385, 0.8042530417442322, 0.81112140417099, 0.8075551390647888, 0.8211596608161926, 0.83119797706604, 0.828820526599884, 0.8363492488861084, 0.8383304476737976, 0.8430854678153992, 0.8499537706375122, 0.8515387773513794, 0.8556333184242249, 0.8577466607093811, 0.8623695969581604, 0.8636903762817383, 0.8643507957458496, 0.8712190985679626, 0.8714832663536072, 0.8742570281028748, 0.876370370388031, 0.8766345381736755, 0.8800686597824097, 0.8796724081039429, 0.8799365758895874, 0.8857482671737671, 0.8934090733528137, 0.891559898853302, 0.8943336606025696, 0.8948619961738586, 0.9013340473175049], "val_loss": [1.8149636132376534, 0.9953962734767369, 0.7671364716121128, 0.6990509033203125, 0.6009582792009626, 0.5640396220343453, 0.5550590242658343, 0.5158015659877232, 0.49693366459437777, 0.47321254866463797, 0.462186336517334, 0.446871246610369, 0.431451039654868, 0.42400687081473215, 0.4096036468233381, 0.4024615968976702, 0.3882108586175101, 0.3820113795144217, 0.37209698983601164, 0.3680891735213144, 0.36456364393234253, 0.3632768392562866, 0.34904420375823975, 0.34249522004808697, 0.34399684837886263, 0.3491199016571045, 0.33635085821151733, 0.3334811670439584, 0.3283827730587551, 0.32678460223334177, 0.32164485113961355, 0.3166087695530483, 0.319992048399789, 0.3182894502367292, 0.32181801966258455, 0.32069155999592375, 0.3166276897702898, 0.31315607683999197, 0.30636541332517353, 0.3114712919507708, 0.3088115794318063, 0.31276640721729826, 0.3096332294600351, 0.3149938838822501], "val_accuracy": [0.43433332443237305, 0.6416666507720947, 0.7009999752044678, 0.7110000252723694, 0.734666645526886, 0.7493333220481873, 0.7453333139419556, 0.7616666555404663, 0.7766666412353516, 0.7839999794960022, 0.800000011920929, 0.7946666479110718, 0.8163333535194397, 0.8080000281333923, 0.8226666450500488, 0.8253333568572998, 0.8306666612625122, 0.8330000042915344, 0.8429999947547913, 0.8456666469573975, 0.8479999899864197, 0.8500000238418579, 0.8586666584014893, 0.8583333492279053, 0.8616666793823242, 0.8573333621025085, 0.8603333234786987, 0.8619999885559082, 0.8653333187103271, 0.8673333525657654, 0.8673333525657654, 0.8679999709129333, 0.8690000176429749, 0.8659999966621399, 0.8683333396911621, 0.8696666955947876, 0.8723333477973938, 0.8740000128746033, 0.8793333172798157, 0.8763333559036255, 0.8763333559036255, 0.8743333220481873, 0.8756666779518127, 0.8756666779518127]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 5, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [32, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 2, 2, 6, 5, 3, 3, 3, 3, 2, 3, 1, 3, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 1, 1, 1, 3, 3, 0, 3, 2, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [21, 2, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.8102856874465942, "mapping_values": [1, 6, 6, 5, 1, 1, 4, 4, 2, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.math.sqrt(tf.math.square(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(grad, tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.23816081574092, 1.6311668191272914, 1.12703982295141, 0.8785432228370035, 0.8013335052120404, 0.7283857445738272, 0.6976979719476142, 0.65130415654469, 0.6125805652247066, 0.5920699942837837, 0.5671069708089032, 0.5427829833424969, 0.5222168649231769, 0.49739249465314705, 0.48473323330729945, 0.46493078984163694, 0.4632958105140752, 0.4393273213354982, 0.4264681742034174, 0.4199548300861005, 0.4017415269923925, 0.3968179816378421, 0.3835556697473865, 0.38085417474863975, 0.37243006355286024, 0.35990334122392875, 0.3470188867280575, 0.3441323029673756, 0.3355771262789635, 0.3270649737284215, 0.30621726947327677, 0.3059451546706481, 0.2995131995148584, 0.30029798480246, 0.28734838713382166, 0.2875581218692148, 0.27367320695352937, 0.2704684729069735, 0.26286515091246837, 0.26494122128980413, 0.2560756661872728, 0.2520976676826448, 0.2470788062169898, 0.24047027899289664, 0.2377426546220026], "accuracy": [0.21740853786468506, 0.4617619812488556, 0.6044115424156189, 0.6798309087753296, 0.6955488324165344, 0.7197200059890747, 0.7333245277404785, 0.7534011602401733, 0.7627789974212646, 0.7696473598480225, 0.7858935594558716, 0.7931581139564514, 0.8024039268493652, 0.8078193068504333, 0.8173292875289917, 0.8224804997444153, 0.8203672170639038, 0.8354246616363525, 0.8366134166717529, 0.8385946154594421, 0.8469158411026001, 0.8479725122451782, 0.8524633646011353, 0.8573504090309143, 0.8603883385658264, 0.8614450097084045, 0.8671245574951172, 0.8677849769592285, 0.8701624870300293, 0.8762382864952087, 0.8817857503890991, 0.8787478804588318, 0.887201189994812, 0.8848236799240112, 0.8879936337471008, 0.8905032277107239, 0.8908994793891907, 0.8948619961738586, 0.897899866104126, 0.8920882344245911, 0.9027869701385498, 0.902390718460083, 0.904768168926239, 0.9072777628898621, 0.9075419306755066], "val_loss": [1.709256376538958, 0.8140709570475987, 0.6985369069235665, 0.6140741791043963, 0.5693304027829852, 0.5497243915285382, 0.519119245665414, 0.4884836162839617, 0.4733438662120274, 0.44562297207968576, 0.43020983253206524, 0.418249317577907, 0.41042816638946533, 0.39968722207205637, 0.39377589736665997, 0.3841580237661089, 0.3755178877285549, 0.36286240816116333, 0.365739711693355, 0.355724104813167, 0.3635221208844866, 0.34812153237206594, 0.3371385506221226, 0.332099369594029, 0.33402083601270405, 0.32930158717291697, 0.33052970681871685, 0.3285081045968192, 0.3227530462401254, 0.32041454315185547, 0.32192552941186087, 0.3205458777291434, 0.3158485208238874, 0.3200464759554182, 0.3178584405354091, 0.31611628191811697, 0.31465570415769306, 0.3129335216113499, 0.3157649891717093, 0.3110832061086382, 0.32124052728925434, 0.3112610237939017, 0.31782799107687815, 0.3137005567550659, 0.31263252667018343], "val_accuracy": [0.4729999899864197, 0.6493333578109741, 0.7016666531562805, 0.7256666421890259, 0.7473333477973938, 0.7440000176429749, 0.7673333287239075, 0.7796666622161865, 0.7836666703224182, 0.8023333549499512, 0.8119999766349792, 0.8140000104904175, 0.8116666674613953, 0.8276666402816772, 0.831333339214325, 0.8353333473205566, 0.8339999914169312, 0.8453333377838135, 0.8433333039283752, 0.8523333072662354, 0.8513333201408386, 0.8546666502952576, 0.8569999933242798, 0.859333336353302, 0.859000027179718, 0.8653333187103271, 0.8633333444595337, 0.8646666407585144, 0.8663333058357239, 0.8673333525657654, 0.8726666569709778, 0.8706666827201843, 0.8723333477973938, 0.8700000047683716, 0.8726666569709778, 0.8730000257492065, 0.8690000176429749, 0.8763333559036255, 0.8743333220481873, 0.8796666860580444, 0.8733333349227905, 0.8763333559036255, 0.875, 0.8706666827201843, 0.8796666860580444]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 6, 2, 6, 5, 3, 9, 3, 3, 2, 9, 1, 3, 9, 5, 9, 7, 8, 2, 6, 0, 0, 2, 2, 9, 6, 8, 5, 3, 2, 2, 9, 8, 8, 2, 6], [3, 3, 3, 1, 1, 1, 3, 3, 0, 2, 3, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [21, 61, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.806857168674469, "mapping_values": [1, 4, 4, 2, 2, 1, 23, 23, 14, 9, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.divide_no_nan(grad, tf.math.add(tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(beta, grad))))), tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.259504971928081, 1.8473565020124754, 1.308142424432782, 0.9640037602657782, 0.8458432930807915, 0.7792154060630687, 0.734429698413342, 0.7010858127264976, 0.6515482557432416, 0.6331527905772154, 0.6107181019125487, 0.5863563392093357, 0.5624500023706195, 0.5371443344428476, 0.5136996823499672, 0.4982051062325697, 0.4986864593499498, 0.4760702237036124, 0.4585858119705554, 0.4470612818200307, 0.434963099385895, 0.42369382914975967, 0.41457074163391794, 0.4074960317609805, 0.39303927261123034, 0.3838622657582902, 0.3719389874858627, 0.3645488415427605, 0.35808957546158177, 0.35196102999929174, 0.34211076482128644, 0.33223667914416133, 0.3240627647784597, 0.32275520489279147, 0.3178166070626538, 0.31164833993455754, 0.2999974436582654, 0.29674917362653, 0.29209743398622423, 0.284225876234337, 0.2748068825183937, 0.2692801359031714, 0.27238359807221296, 0.25396037356822937, 0.24552140432247443, 0.2530403794897168], "accuracy": [0.189274862408638, 0.4241183400154114, 0.5469554662704468, 0.6476026773452759, 0.6888125538825989, 0.707040011882782, 0.7149649858474731, 0.7413815855979919, 0.748249888420105, 0.7563069462776184, 0.769911527633667, 0.7784969210624695, 0.7835160493850708, 0.796328067779541, 0.8047813773155212, 0.8124422430992126, 0.8076872229576111, 0.8210275769233704, 0.829216718673706, 0.8278959393501282, 0.8356888294219971, 0.839519202709198, 0.8445383906364441, 0.846387505531311, 0.8527275323867798, 0.8569541573524475, 0.858671247959137, 0.8642187118530273, 0.8654074668884277, 0.8656716346740723, 0.8688416481018066, 0.8733324408531189, 0.8791441321372986, 0.8803328275680542, 0.8787478804588318, 0.8791441321372986, 0.8829745054244995, 0.882710337638855, 0.8860124349594116, 0.8905032277107239, 0.8947299122810364, 0.8957865834236145, 0.8961827754974365, 0.9034473896026611, 0.9037115573883057, 0.8994848728179932], "val_loss": [1.8149636132376534, 0.9953947748456683, 0.767196706363133, 0.6988974298749652, 0.6010382345744542, 0.5642723355974469, 0.5561652524130685, 0.5158710479736328, 0.4959547689982823, 0.4727156332560948, 0.4613447870526995, 0.4462535211018154, 0.4311521649360657, 0.42305549553462435, 0.40938117674418856, 0.40181647879736765, 0.388935991695949, 0.3828262005533491, 0.37354791164398193, 0.36767793553216116, 0.36369766507829937, 0.35962804726191927, 0.34751224517822266, 0.3421186889920916, 0.3421065126146589, 0.34720141547066824, 0.33231610911233084, 0.33075278997421265, 0.32500284910202026, 0.32541410412107197, 0.3206537365913391, 0.3194792696407863, 0.32126028197152273, 0.31934510810034616, 0.3195108601025173, 0.322732184614454, 0.32022816794259207, 0.3172159024647304, 0.3111140387398856, 0.31334767171314787, 0.31235495635441374, 0.31344257082257954, 0.3118365832737514, 0.31614149468285696, 0.3127791540963309, 0.3120513728686741], "val_accuracy": [0.43433332443237305, 0.6416666507720947, 0.7003333568572998, 0.7110000252723694, 0.7336666584014893, 0.7490000128746033, 0.7456666827201843, 0.7603333592414856, 0.7773333191871643, 0.784333348274231, 0.7986666560173035, 0.7929999828338623, 0.8159999847412109, 0.8096666932106018, 0.8233333230018616, 0.8266666531562805, 0.8296666741371155, 0.8333333134651184, 0.8429999947547913, 0.8463333249092102, 0.8513333201408386, 0.8539999723434448, 0.859666645526886, 0.8576666712760925, 0.8610000014305115, 0.8576666712760925, 0.8629999756813049, 0.8636666536331177, 0.8700000047683716, 0.8650000095367432, 0.8659999966621399, 0.8713333606719971, 0.8723333477973938, 0.8659999966621399, 0.8676666617393494, 0.8703333139419556, 0.8726666569709778, 0.8723333477973938, 0.8740000128746033, 0.8740000128746033, 0.8803333044052124, 0.8776666522026062, 0.8763333559036255, 0.8776666522026062, 0.878000020980835, 0.8776666522026062]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [4, 2, 8, 6, 2, 6, 5, 3, 2, 3, 3, 4, 9, 1, 1, 9, 5, 9, 7, 8, 2, 6, 0, 0, 2, 2, 9, 6, 8, 5, 3, 2, 2, 9, 8, 8, 2, 6], [3, 3, 3, 1, 1, 1, 3, 3, 0, 2, 3, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [21, 2, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.8057143092155457, "mapping_values": [1, 4, 4, 2, 2, 1, 28, 28, 18, 10, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.math.pow(alpha, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))), alpha), tf.math.subtract(tf.math.subtract(tf.math.add(beta, grad), tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))))))), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))))), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.259504971928081, 1.847353677660829, 1.3080897412484647, 0.9642553236962876, 0.8465256001325473, 0.7794878708136914, 0.7345445344020126, 0.701616370446489, 0.6529213043409269, 0.6344615508851563, 0.6105074509496088, 0.5884627258820131, 0.5638490541893588, 0.5392257222693436, 0.515313834522725, 0.500022704083103, 0.500276887023989, 0.4754510486854963, 0.4578468183311631, 0.4481493002348698, 0.43501535688629395, 0.42309462900930755, 0.41480885890685587, 0.4085210363004564, 0.3964839349364907, 0.3859152318842108, 0.372814530827791, 0.3667705583101597, 0.3600897637450889, 0.35469135475542884, 0.3410220725968403, 0.33136680423071857, 0.3286112895014736, 0.3241826048254447, 0.31960583804242915, 0.31518409750827187, 0.2995566423810657, 0.2980945984433277, 0.2900564656076871, 0.28325463027025743, 0.2758237819559208, 0.26724741162404786, 0.275398126226044, 0.25623946547461, 0.24647672546813673, 0.2494314948030199, 0.24955825323615138, 0.2458991316787917, 0.23303483155354407, 0.22344219454125863, 0.2305279269021311], "accuracy": [0.189274862408638, 0.4239862561225891, 0.547087550163269, 0.6474705934524536, 0.6890767216682434, 0.707040011882782, 0.7149649858474731, 0.741909921169281, 0.7473253011703491, 0.7572315335273743, 0.7725531458854675, 0.7781006693840027, 0.7820631265640259, 0.7965922355651855, 0.8035926818847656, 0.8099326491355896, 0.8068947196006775, 0.8201030492782593, 0.8272355198860168, 0.8280280232429504, 0.833179235458374, 0.8417646288871765, 0.8417646288871765, 0.8486329317092896, 0.8525954484939575, 0.8562937378883362, 0.8590674996376038, 0.8626337051391602, 0.8642187118530273, 0.8647470474243164, 0.8669924736022949, 0.8728041052818298, 0.8772949576377869, 0.8778232932090759, 0.8778232932090759, 0.8787478804588318, 0.8841632604598999, 0.882710337638855, 0.8889182209968567, 0.8919561505317688, 0.894069492816925, 0.8939374089241028, 0.895918607711792, 0.90423983335495, 0.9013340473175049, 0.9017302989959717, 0.9008057117462158, 0.900409460067749, 0.9059569239616394, 0.9108440279960632, 0.9082023501396179], "val_loss": [1.8149636813572474, 0.9953923566000802, 0.7672697305679321, 0.6995395932878766, 0.6014135905674526, 0.564313360622951, 0.5560164451599121, 0.5160965919494629, 0.4964740106037685, 0.4725583621433803, 0.4622771739959717, 0.4457731076649257, 0.4317420039858137, 0.42484435013362337, 0.4103750841958182, 0.40312000683375765, 0.38930665595190866, 0.38344264030456543, 0.3728080136435373, 0.3699484722954886, 0.3653921059199742, 0.3619043231010437, 0.34859901666641235, 0.34276881388255526, 0.34129992553165983, 0.3461017778941563, 0.33358906848090036, 0.33313327176230295, 0.32673465354102, 0.32629246371132986, 0.3226444976670401, 0.3198537826538086, 0.3225048099245344, 0.32047927379608154, 0.32276287249156405, 0.3239356790270124, 0.31884107419422697, 0.3157000456537519, 0.3119086538042341, 0.3147233894893101, 0.3112191302435739, 0.31309940985270907, 0.3139556646347046, 0.3156279921531677, 0.3100641540118626, 0.3115380236080715, 0.30621915204184397, 0.308160024029868, 0.3107470614569528, 0.3137934718813215, 0.31359847102846417], "val_accuracy": [0.4339999854564667, 0.6416666507720947, 0.7009999752044678, 0.7106666564941406, 0.734333336353302, 0.7483333349227905, 0.7473333477973938, 0.7609999775886536, 0.7763333320617676, 0.7839999794960022, 0.7963333129882812, 0.7973333597183228, 0.8149999976158142, 0.8083333373069763, 0.8209999799728394, 0.8259999752044678, 0.8296666741371155, 0.8286666870117188, 0.8443333506584167, 0.8429999947547913, 0.8493333458900452, 0.8533333539962769, 0.859666645526886, 0.8553333282470703, 0.8616666793823242, 0.859000027179718, 0.8603333234786987, 0.862666666507721, 0.8669999837875366, 0.8643333315849304, 0.8663333058357239, 0.8693333268165588, 0.8709999918937683, 0.8669999837875366, 0.8653333187103271, 0.8683333396911621, 0.8700000047683716, 0.8733333349227905, 0.8756666779518127, 0.8743333220481873, 0.878333330154419, 0.8730000257492065, 0.875333309173584, 0.875333309173584, 0.8769999742507935, 0.8793333172798157, 0.8756666779518127, 0.8786666393280029, 0.8786666393280029, 0.8793333172798157, 0.8759999871253967]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 2, 2, 6, 1, 3, 2, 3, 3, 2, 9, 1, 3, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 1, 3, 1, 3, 3, 2, 2, 2, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [21, 2, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.8048571348190308, "mapping_values": [1, 4, 4, 2, 2, 1, 31, 31, 18, 13, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(alpha, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.multiply(tf.math.add(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), grad), alpha), tf.math.subtract(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))), tf.math.square(tf.math.add(beta, beta)))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), beta))))), tf.math.add(beta, alpha)))))), grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.259504971928081, 1.84735472100585, 1.3081269732650245, 0.9639776406696271, 0.8462245768685744, 0.779156896070073, 0.7342791293338463, 0.7010205823038989, 0.6525221147620368, 0.6330133203927316, 0.6107635408218716, 0.5869888454348955, 0.5627739439236096, 0.5380941852917367, 0.5134285067790818, 0.49870813192078595, 0.4987511625458079, 0.4756087056555374, 0.45858272819187756, 0.4461788637149036, 0.4351525547175029, 0.4228495909254139, 0.41465509723536864, 0.4074200133542973, 0.3936650490267969, 0.38513497902953064, 0.3720963160241552, 0.3663177653633451, 0.35937199046535895, 0.3530021697428437, 0.34271658924135784, 0.3302119743743703, 0.3288261123329279, 0.3252082219953314, 0.3191258733684455, 0.3138995307421782, 0.30322984636829764, 0.29829483050491357, 0.2938001611725277, 0.2852260446772048, 0.27655603250791494, 0.2689220355844548, 0.2734268102679254, 0.2542857631102151, 0.2483895143493764, 0.2500944849211448, 0.2527955144765811, 0.2440268891956891, 0.2360435639783738, 0.22538044680071828], "accuracy": [0.189274862408638, 0.4241183400154114, 0.5472196340560913, 0.6479989290237427, 0.6888125538825989, 0.7069079279899597, 0.7149649858474731, 0.7413815855979919, 0.7474573850631714, 0.7567031979560852, 0.770439863204956, 0.7757231593132019, 0.7847048044204712, 0.7942147850990295, 0.8053097128868103, 0.8125742673873901, 0.806630551815033, 0.822348415851593, 0.8271034359931946, 0.8308017253875732, 0.8368775844573975, 0.8397833704948425, 0.8433496356010437, 0.8475762605667114, 0.8511425256729126, 0.8553691506385803, 0.8582749962806702, 0.8614450097084045, 0.8642187118530273, 0.8650112152099609, 0.8689737319946289, 0.8717474341392517, 0.8741249442100525, 0.8755778670310974, 0.8784837126731873, 0.878351628780365, 0.8790120482444763, 0.8823140859603882, 0.8849557638168335, 0.8882578015327454, 0.8922203183174133, 0.89552241563797, 0.8952582478523254, 0.9055606722831726, 0.9021265506744385, 0.9014661312103271, 0.9035794734954834, 0.9006736278533936, 0.9070135951042175, 0.9093911051750183], "val_loss": [1.8149636132376534, 0.9953921181815011, 0.7671473026275635, 0.698997071811131, 0.6011907032557896, 0.5641482046672276, 0.5557595321110317, 0.5158050911767142, 0.4964522293635777, 0.4719202518463135, 0.461787291935512, 0.4461814505713327, 0.43077725172042847, 0.4229432685034616, 0.40968949454171316, 0.4019132341657366, 0.38885146379470825, 0.38371496541159494, 0.3726197992052351, 0.36805780444826397, 0.3640415923936026, 0.360319401536669, 0.3480632134846279, 0.341998815536499, 0.3434577328818185, 0.347929630960737, 0.334097112928118, 0.33210322686604093, 0.3260384627750942, 0.3247701781136649, 0.32123806646892, 0.31908881664276123, 0.3214587484087263, 0.3201155407088144, 0.32018613815307617, 0.3226404445511954, 0.3174005321093968, 0.314088557447706, 0.31024146931512014, 0.31046561683927265, 0.30809701340539114, 0.31211491993495394, 0.31023599420275005, 0.31112376281193327, 0.30482474395207, 0.31691397939409527, 0.30909041847501484, 0.31193242754255024, 0.31065185580934795, 0.3151523896626064], "val_accuracy": [0.43433332443237305, 0.6416666507720947, 0.7009999752044678, 0.7106666564941406, 0.7336666584014893, 0.7493333220481873, 0.7476666569709778, 0.7620000243186951, 0.7773333191871643, 0.7846666574478149, 0.7983333468437195, 0.7943333387374878, 0.8163333535194397, 0.8090000152587891, 0.8199999928474426, 0.8226666450500488, 0.8296666741371155, 0.8306666612625122, 0.843666672706604, 0.8463333249092102, 0.8500000238418579, 0.8523333072662354, 0.8603333234786987, 0.8586666584014893, 0.859666645526886, 0.8576666712760925, 0.8586666584014893, 0.8636666536331177, 0.8693333268165588, 0.8686666488647461, 0.8666666746139526, 0.8690000176429749, 0.8723333477973938, 0.8669999837875366, 0.8703333139419556, 0.8686666488647461, 0.8726666569709778, 0.875, 0.874666690826416, 0.8726666569709778, 0.8796666860580444, 0.874666690826416, 0.8799999952316284, 0.878000020980835, 0.8803333044052124, 0.8766666650772095, 0.871666669845581, 0.8786666393280029, 0.8763333559036255, 0.8776666522026062]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [62, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 2, 3, 6, 2, 4, 5, 5, 3, 3, 3, 2, 9, 1, 3, 9, 5, 1, 7, 8, 2, 6, 2, 4, 2, 2, 6, 8, 0, 2, 6, 2, 2, 0, 8, 8, 2, 7, 0, 5, 7, 5, 9, 6], [3, 3, 3, 1, 2, 3, 3, 3, 2, 2, 3, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [21, 2, 14, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.4414285719394684, "mapping_values": [1, 4, 4, 2, 2, 1, 19, 19, 10, 9, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.pow(beta, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.square(tf.math.multiply(tf.math.multiply(grad, grad), beta)))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.6805787399507643, 2.285861420703838, 2.31386429878384, 2.2921783041094335, 2.226185955596307, 2.534334810418444, 4.667836329531061, 2.2753499153818924], "accuracy": [0.16312244534492493, 0.15031039714813232, 0.16483952105045319, 0.13274335861206055, 0.19574692845344543, 0.21516312658786774, 0.09787346422672272, 0.12442214041948318], "val_loss": [1.976592745099749, 1.9089562552315849, 1.615635871887207, 1.9539026532854353, 1.9743531772068568, 2.0174360956464494, 1.980466433933803, 1.972586223057338], "val_accuracy": [0.09866666793823242, 0.14266666769981384, 0.4449999928474426, 0.2123333364725113, 0.0989999994635582, 0.07400000095367432, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 2, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [44, 31, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 2, 2, 6, 4, 3, 3, 5, 3, 0, 9, 5, 3, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 1, 0, 1, 3, 3, 0, 2, 3, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [21, 2, 90, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.39885714650154114, "mapping_values": [1, 7, 7, 5, 2, 2, 25, 25, 15, 10, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.sqrt(tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.square(tf.math.add(beta, tf.math.multiply(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.negative(alpha)))), grad)), tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))))), tf.math.square(tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), beta))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.4704043401341003, 2.3059736400657656, 2.277418227794699, 2.125356874996881, 2.5763020387273405, 2.3066811531353086, 2.3036194477161915, 2.303080193008556, 2.3029408865852945], "accuracy": [0.2277110069990158, 0.1010434553027153, 0.16351869702339172, 0.23761722445487976, 0.2032756507396698, 0.09919429570436478, 0.09259014576673508, 0.09074098616838455, 0.09760929644107819], "val_loss": [1.978043828691755, 1.9722216469900948, 1.5418429374694824, 1.3271542276654924, 1.9785797936575753, 1.9743829454694475, 1.9739439146859306, 1.9737717083522253, 1.9736993653433663], "val_accuracy": [0.10133333504199982, 0.10100000351667404, 0.42766666412353516, 0.43533334136009216, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [0, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0], [1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 2, 2, 6, 5, 3, 3, 3, 3, 2, 9, 2, 3, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 1, 1, 1, 3, 3, 0, 2, 2, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2, 5, 3, 0, 5], [21, 2, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3029684832445336, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [2, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 2, 2, 6, 1, 3, 2, 3, 3, 2, 2, 1, 3, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 1, 3, 1, 2, 3, 2, 2, 2, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [21, 2, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 30, 30, 16, 14, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(grad, alpha), beta), tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), beta)))), tf.math.add(beta, beta)))), tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, alpha)), grad))), tf.math.add(beta, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1], [8, 2, 3, 9, 2, 6, 5, 3, 2, 6, 2, 8, 9, 1, 3, 9, 5, 9, 7, 2, 2, 6, 0, 0, 2, 2, 9, 6, 8, 5, 3, 2, 2, 9, 8, 8, 2, 6], [3, 3, 3, 1, 1, 1, 3, 3, 0, 2, 3, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [21, 2, 52, 38, 37, 47, 96], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 8, 5, 2, 35, 35, 24, 11, 5, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.sqrt(grad))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.multiply(grad, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(alpha)), tf.math.add(beta, alpha)))), alpha)), grad)))), grad))), tf.math.add(beta, tf.math.negative(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))))), tf.math.add(beta, beta))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 2, 7, 9, 1, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1], [2, 2, 3, 2, 2, 6, 5, 2, 3, 3, 3, 2, 9, 1, 4, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 1, 0, 1, 3, 3, 2, 2, 2, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [21, 74, 30, 28, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 29, 29, 17, 12, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(grad, grad)), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), beta)), tf.math.add(beta, beta)))))))), tf.math.square(tf.math.add(beta, beta)))), alpha))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.357159092536204, 2078.6152491122975, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.04345529153943062, 0.039228636771440506, 0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.2137692996433804, 3748521398.857143, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.004000000189989805, 0.09966666996479034, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 8, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 1, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [32, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [0, 2, 3, 2, 2, 6, 5, 3, 3, 3, 3, 2, 3, 1, 3, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 1, 1, 1, 3, 3, 0, 3, 2, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [21, 2, 78, 38, 37, 47, 96], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 5, 2, 2, 4, 4, 2, 2, 0, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(grad, tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9025473987358656, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.3615110218524933, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [8, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1], [8, 2, 0, 2, 2, 6, 5, 3, 3, 3, 1, 3, 9, 0, 3, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 3, 6, 0, 2, 3, 3, 2, 9, 8, 8, 2, 6, 4, 2, 1, 0, 9], [3, 3, 3, 1, 1, 1, 3, 3, 0, 2, 3, 3, 2, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [21, 2, 78, 38, 18, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 0, 69, 69, 43, 26, 6, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 56, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.negative(grad), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.multiply(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.negative(grad))), tf.math.multiply(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.square(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha))), tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), grad)))), tf.math.add(beta, grad)))), tf.math.pow(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta))))))), grad)), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), beta)), tf.math.add(beta, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))))), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad))))), tf.math.add(beta, tf.math.divide_no_nan(alpha, alpha))), tf.math.add(beta, grad))), tf.math.add(beta, grad))))))), tf.math.add(beta, tf.math.pow(beta, tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad)))))), tf.math.add(beta, tf.math.subtract(tf.math.negative(beta), tf.math.add(beta, grad))))), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [5, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 2, 2, 6, 5, 2, 3, 3, 3, 2, 9, 1, 4, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [1, 1, 3, 1, 0, 1, 3, 3, 2, 0, 2, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [21, 2, 14, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 0, 4, 4, 2, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.30453067196831, 2.3299548556665783, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08598599582910538, 0.07740060985088348, 0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9783580643790108, 2.03447471346174, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.027666667476296425, 0.09966666996479034, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [89, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [6, 2, 3, 6, 2, 4, 5, 5, 3, 3, 3, 2, 9, 1, 3, 9, 0, 1, 7, 8, 2, 2, 2, 4, 2, 2, 0, 8, 0, 2, 6, 2, 2, 0, 8, 8, 4, 7, 0, 5, 7, 5, 9, 6], [3, 3, 3, 1, 1, 1, 3, 3, 0, 2, 3, 3, 3, 0, 3, 2, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [52, 2, 14, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 33, 33, 20, 13, 3, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(grad, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.multiply(grad, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.math.negative(grad)))), alpha)), alpha))))))), tf.math.add(beta, tf.math.subtract(alpha, grad)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))))), beta)), grad), grad)), tf.math.sqrt(grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [2.3030942560517635, 2.304248839069619, 2.3057286075518477, 2.307813232821433, 2.3115425209374934, 2.313777852477241, 2.3164863303951253, 2.3229437103329427, 2.3324287191531314, 2.341701669873122, 2.3811084558116353, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0882314071059227, 0.08492933213710785, 0.09166556596755981, 0.07991018146276474, 0.07938185334205627, 0.08545766770839691, 0.07607977837324142, 0.07238145917654037, 0.07885351777076721, 0.07911768555641174, 0.07991018146276474, 0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9720499174935477, 1.973276002066476, 1.9748009272984095, 1.9769621576581682, 1.9792358534676688, 1.9817990575517928, 1.9844531331743513, 1.9881021635872977, 1.994758129119873, 2.0078498976571217, 2.070471695491246, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.03333333507180214, 0.03033333271741867, 0.02666666731238365, 0.024000000208616257, 0.029999999329447746, 0.038333334028720856, 0.050333332270383835, 0.06833333522081375, 0.08799999952316284, 0.0989999994635582, 0.09966666996479034, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [74, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 2, 3, 2, 8, 6, 5, 3, 3, 3, 3, 2, 9, 1, 3, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 1, 1, 1, 3, 3, 0, 2, 2, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2, 5, 3, 0, 5], [21, 2, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 8, 5, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 2, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 2, 2, 6, 1, 3, 2, 3, 3, 2, 9, 1, 3, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 1, 1, 1, 3, 3, 2, 2, 3, 3, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2, 4], [21, 2, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 34, 34, 20, 14, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(grad, tf.math.multiply(tf.math.add(grad, tf.math.add(tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(alpha, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))))))), tf.math.square(grad))))), tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, beta), beta), tf.math.sqrt(grad)))))), grad), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07330603897571564, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 1, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0], [0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 2, 2, 6, 5, 2, 3, 3, 3, 2, 9, 1, 4, 5, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [1, 3, 3, 1, 0, 1, 3, 3, 2, 2, 2, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [21, 61, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 4, 4, 2, 2, 0, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.302564237347967, 2.302533648852045, 2.302260634512115, 2.30195302790686, 2.302795408203806, 2.3021208154778865], "accuracy": [0.08902391046285629, 0.0878351628780365, 0.09826971590518951, 0.09087307006120682, 0.08625016361474991, 0.10038304328918457], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 3, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [74, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 2, 3, 2, 8, 6, 5, 3, 3, 3, 3, 2, 9, 1, 3, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 0, 1, 1, 3, 3, 0, 0, 2, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [21, 2, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 17, 17, 10, 7, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, grad)), tf.math.add(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.302564237347967, 2.302533648852045, 2.302260634512115, 2.30195302790686, 2.302795408203806, 2.3021208154778865], "accuracy": [0.08902391046285629, 0.0878351628780365, 0.09826971590518951, 0.09087307006120682, 0.08625016361474991, 0.10038304328918457], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}]