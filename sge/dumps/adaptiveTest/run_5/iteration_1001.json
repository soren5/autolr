[{"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 6, 2, 3, 6, 5, 4, 8, 2, 3, 1, 9, 0, 4, 8, 5, 3, 7, 6, 2, 6, 2, 2, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 3, 3, 0, 2, 3, 3, 0, 2, 0, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [79, 38, 78, 99, 37, 47, 96], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.8454285860061646, "mapping_values": [1, 4, 4, 2, 2, 1, 25, 25, 15, 10, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), grad)))), tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.multiply(beta, tf.math.subtract(tf.math.add(beta, grad), grad))))))))), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), beta)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9546635167127304, 1.0782829249193324, 0.7885281337549847, 0.6933498124656834, 0.6356372883795054, 0.5812536361132158, 0.553601281887914, 0.5283657293734754, 0.4976464569836308, 0.49272880389973506, 0.45918555642556774, 0.43860117294580203, 0.426472994243905, 0.41697580078494956, 0.40662805259959917, 0.38753275365609663, 0.3870472014225894, 0.37779690847814423, 0.35379818919910777, 0.34124955388108075, 0.343736357861947, 0.3462797488361349, 0.32492481541907575, 0.3182688572655233, 0.3123350859656704, 0.30466013758284244, 0.3041051904586139, 0.289882246537247, 0.28239221952185417, 0.28785999609164087, 0.27957946726942356, 0.26919333243713306, 0.26016751384816983, 0.2545760570047491, 0.24984779424120043, 0.24886913739490218, 0.23586215176649727, 0.23676011417803589, 0.2246462256602009, 0.22645184118608205, 0.21273783369897897, 0.2106451424038752, 0.20370888081579128, 0.19472541969174548, 0.1966683189662031, 0.19714069377870577, 0.18185001922486685, 0.17771272954884426, 0.18287219176628114, 0.17754893989579362, 0.16077279148635895], "accuracy": [0.3280940353870392, 0.6324131488800049, 0.7061154246330261, 0.7339849472045898, 0.7535332441329956, 0.7781006693840027, 0.7841764688491821, 0.7938185334205627, 0.8138951063156128, 0.8088759779930115, 0.8317263126373291, 0.8384625315666199, 0.8407079577445984, 0.842028796672821, 0.8418967127799988, 0.8537842035293579, 0.8545766472816467, 0.8533879518508911, 0.8642187118530273, 0.8676528930664062, 0.8712190985679626, 0.8656716346740723, 0.8717474341392517, 0.8761062026023865, 0.8835028409957886, 0.8829745054244995, 0.8816536664962769, 0.8881257176399231, 0.8899748921394348, 0.8850878477096558, 0.8912957310676575, 0.8916919827461243, 0.8988244533538818, 0.9017302989959717, 0.9019944667816162, 0.9035794734954834, 0.9066173434257507, 0.9093911051750183, 0.9137498140335083, 0.9075419306755066, 0.9142781496047974, 0.9153348207473755, 0.9181085824966431, 0.9233918786048889, 0.9203540086746216, 0.9223352074623108, 0.9293355941772461, 0.9310526847839355, 0.9252410531044006, 0.9292035102844238, 0.936732292175293], "val_loss": [0.9051035472324916, 0.6390258414404733, 0.5618891034807477, 0.5029333659580776, 0.4605074099131993, 0.44714663709912983, 0.4321476306234087, 0.40693771839141846, 0.39714880500520977, 0.3808948738234384, 0.3719650847571237, 0.35775125878197805, 0.3555106520652771, 0.3469018340110779, 0.3470590625490461, 0.33865528447287424, 0.33796956709453035, 0.3325098327228001, 0.3250717520713806, 0.3327926993370056, 0.32167533465794157, 0.3225474868501936, 0.3167747344289507, 0.32626086473464966, 0.3150784799030849, 0.33138627665383474, 0.3159157463482448, 0.32560233558927265, 0.3064947468893869, 0.30292744295937674, 0.3140237842287336, 0.3110277737889971, 0.30753824540546965, 0.30357139451163156, 0.2993383918489729, 0.305729125227247, 0.3056741101401193, 0.30659795658929007, 0.31418581519808086, 0.3050534129142761, 0.3076516389846802, 0.30916270187922884, 0.3175857663154602, 0.340108905519758, 0.31667308296476093, 0.31128309454236713, 0.3225087693759373, 0.3215887461389814, 0.32927037136895315, 0.3203006557055882, 0.3295614038194929], "val_accuracy": [0.5820000171661377, 0.7183333039283752, 0.7363333106040955, 0.7693333625793457, 0.7926666736602783, 0.7960000038146973, 0.7983333468437195, 0.815666675567627, 0.8203333616256714, 0.8323333263397217, 0.8433333039283752, 0.8493333458900452, 0.8479999899864197, 0.8496666550636292, 0.8496666550636292, 0.856333315372467, 0.8560000061988831, 0.8586666584014893, 0.862666666507721, 0.8600000143051147, 0.8656666874885559, 0.862333357334137, 0.8659999966621399, 0.859666645526886, 0.8693333268165588, 0.8576666712760925, 0.8650000095367432, 0.862333357334137, 0.875333309173584, 0.8679999709129333, 0.8740000128746033, 0.871666669845581, 0.875, 0.8773333430290222, 0.8786666393280029, 0.8786666393280029, 0.8769999742507935, 0.8776666522026062, 0.874666690826416, 0.8790000081062317, 0.8799999952316284, 0.8826666474342346, 0.8830000162124634, 0.878333330154419, 0.8796666860580444, 0.8849999904632568, 0.8833333253860474, 0.8830000162124634, 0.8769999742507935, 0.8849999904632568, 0.8830000162124634]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 6, 2, 8, 6, 5, 6, 3, 5, 3, 4, 9, 0, 4, 8, 5, 3, 7, 6, 2, 6, 2, 2, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 0, 3, 0, 3, 3, 3, 0, 2, 0, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [94, 32, 78, 99, 37, 47, 96], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.8448571562767029, "mapping_values": [1, 4, 4, 2, 2, 1, 9, 9, 5, 4, 2, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.sqrt(tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9552662766699336, 1.0693556155983357, 0.7858896079615768, 0.6906141094433366, 0.6311147887756198, 0.5752890533176569, 0.5460732138199403, 0.5184303429998726, 0.49059608393278514, 0.4870000629692093, 0.4578938040955664, 0.4367881268912366, 0.42052099646011665, 0.4127645694096295, 0.39561959089084686, 0.3797357214707992, 0.37649245027380374, 0.36416364493166625, 0.35029923405314733, 0.3429346405645765, 0.34480560593097404, 0.3410358630812573, 0.321677840652719, 0.31228549294877345, 0.3093486601815736, 0.29646002809762984, 0.2986422152354528, 0.28516849150566015, 0.27802765813832425, 0.2715805880405553, 0.2671142075087306, 0.25484070548913923, 0.2458599092855335, 0.24151093201504376, 0.23770489774249753, 0.23093290079255635, 0.21381188954470606, 0.22042482887646778, 0.21388167375508016, 0.21485759299964385, 0.21078130443413276, 0.20641745400584652, 0.19308389482000926, 0.19456613463157865, 0.19416918316340606], "accuracy": [0.3280940353870392, 0.6321489810943604, 0.7059833407402039, 0.7349095344543457, 0.7578919529914856, 0.7783648371696472, 0.7891955971717834, 0.8043851256370544, 0.8201030492782593, 0.8144234418869019, 0.8293488025665283, 0.8383304476737976, 0.8417646288871765, 0.8466516733169556, 0.8455950617790222, 0.8574824929237366, 0.860652506351471, 0.8599920868873596, 0.8628978729248047, 0.8702945709228516, 0.8684453964233398, 0.8691058158874512, 0.876370370388031, 0.8770307898521423, 0.8780874609947205, 0.8854840993881226, 0.8831065893173218, 0.8922203183174133, 0.8928807377815247, 0.8932769894599915, 0.8952582478523254, 0.8988244533538818, 0.9054285883903503, 0.9083344340324402, 0.9091269373893738, 0.9083344340324402, 0.9157310724258423, 0.9140139818191528, 0.9158631563186646, 0.9132214784622192, 0.913617730140686, 0.9157310724258423, 0.9216747879981995, 0.9196935892105103, 0.9206181764602661], "val_loss": [0.8988772460392543, 0.6353854281561715, 0.5615601880209786, 0.49857137884412495, 0.45855883189610075, 0.4434558664049421, 0.4253906181880406, 0.40037970883505686, 0.397365927696228, 0.3780228410448347, 0.36836776563099455, 0.3572939464024135, 0.34944394656590055, 0.3483023302895682, 0.34381993327822, 0.3345485670225961, 0.32889819145202637, 0.333096512726375, 0.32583920444761005, 0.3298204370907375, 0.3226398059300014, 0.3247708593096052, 0.315897456237248, 0.3196372815540859, 0.3095452870641436, 0.3253782732146127, 0.3161939638001578, 0.3147437998226711, 0.30393660068511963, 0.30335788215909687, 0.3170807787350246, 0.3122581328664507, 0.3122083970478603, 0.3057421786444528, 0.3033138002668108, 0.3079101528440203, 0.3052670955657959, 0.31195959874561857, 0.31325856276920866, 0.3065051521573748, 0.30867973395756315, 0.31842528922217234, 0.32795047760009766, 0.3296187775475638, 0.31110256910324097], "val_accuracy": [0.5823333263397217, 0.7203333377838135, 0.7383333444595337, 0.7726666927337646, 0.7919999957084656, 0.79666668176651, 0.8026666641235352, 0.8216666579246521, 0.8223333358764648, 0.8326666951179504, 0.8433333039283752, 0.847000002861023, 0.8516666889190674, 0.8486666679382324, 0.8519999980926514, 0.8619999885559082, 0.8629999756813049, 0.856333315372467, 0.8640000224113464, 0.8600000143051147, 0.8653333187103271, 0.8576666712760925, 0.8663333058357239, 0.8679999709129333, 0.8690000176429749, 0.8650000095367432, 0.8686666488647461, 0.8686666488647461, 0.8756666779518127, 0.8736666440963745, 0.8740000128746033, 0.8736666440963745, 0.8796666860580444, 0.8799999952316284, 0.8786666393280029, 0.8813333511352539, 0.8840000033378601, 0.8803333044052124, 0.8823333382606506, 0.8849999904632568, 0.8809999823570251, 0.8813333511352539, 0.8786666393280029, 0.8806666731834412, 0.8836666941642761]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0], [0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 8, 2, 2, 4, 6, 5, 2, 3, 3, 3, 0, 2, 5, 2, 8, 5, 3, 4, 6, 2, 6, 2, 2, 2, 9, 0, 6, 5, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 0, 3, 0, 2, 2, 3, 0, 2, 0, 3, 3, 0, 0, 0, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [94, 38, 78, 99, 95, 47, 96, 52], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.8431428670883179, "mapping_values": [1, 4, 4, 2, 2, 1, 9, 9, 5, 4, 2, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9552662991230372, 1.069352513094305, 0.7856347091193874, 0.6908495837450814, 0.630947405297475, 0.5741847157399605, 0.5473964186061753, 0.5216729420208581, 0.4921415499086157, 0.488519278523346, 0.45790197142378813, 0.43961783028423607, 0.4196908786280784, 0.41596603268377846, 0.39791983472688436, 0.3828522617381404, 0.3785180596430792, 0.3674041173477309, 0.3509054822204387, 0.3420384605137774, 0.34341398385364336, 0.3430855230388546, 0.3176723049301371, 0.3105702285186537], "accuracy": [0.3280940353870392, 0.6322810649871826, 0.7066437602043152, 0.7345132827758789, 0.7586844563484192, 0.7769119143486023, 0.7878747582435608, 0.8009510040283203, 0.8158763647079468, 0.8125742673873901, 0.8294808864593506, 0.8364813327789307, 0.8428213000297546, 0.8467837572097778, 0.8481045961380005, 0.8603883385658264, 0.8601241707801819, 0.8632941246032715, 0.8638224601745605, 0.8676528930664062, 0.8693699836730957, 0.8697662353515625, 0.8757099509239197, 0.8817857503890991], "val_loss": [0.89887877873012, 0.6351030383791242, 0.5618150745119367, 0.4989589623042515, 0.4589306116104126, 0.4449468340192522, 0.42877677508762907, 0.40331957169941496, 0.3965853112084525, 0.37887145791734966, 0.3688122630119324, 0.3596809336117336, 0.34725602184023174, 0.3443723661558969, 0.34245382036481586, 0.3390664373125349, 0.3317651493208749, 0.32930660247802734, 0.3238354069846017, 0.33310469559260775, 0.3215561168534415, 0.31891954796654837, 0.3192754898752485, 0.3226296731403896], "val_accuracy": [0.5823333263397217, 0.7203333377838135, 0.7396666407585144, 0.7703333497047424, 0.7960000038146973, 0.7960000038146973, 0.8006666898727417, 0.8193333148956299, 0.8220000267028809, 0.8346666693687439, 0.843666672706604, 0.847000002861023, 0.8519999980926514, 0.8503333330154419, 0.8489999771118164, 0.859666645526886, 0.8633333444595337, 0.8653333187103271, 0.8663333058357239, 0.859666645526886, 0.8646666407585144, 0.8616666793823242, 0.8653333187103271, 0.8650000095367432]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 8, 2, 2, 4, 6, 5, 2, 3, 3, 3, 1, 2, 5, 4, 8, 5, 3, 8, 6, 2, 6, 2, 2, 2, 2, 9, 6, 0, 2, 3, 1, 2, 9, 8, 8, 2, 3], [3, 0, 0, 3, 2, 2, 3, 3, 0, 2, 0, 3, 3, 0, 3, 3, 3, 1, 2, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [67, 38, 90, 99, 37, 47, 96, 79], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.8408571481704712, "mapping_values": [1, 4, 4, 2, 2, 1, 38, 38, 22, 16, 5, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(beta, grad)))))), tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.square(grad)))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)))))))))))), grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))))), tf.math.divide_no_nan(tf.math.add(beta, grad), grad))))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9552666362974827, 1.0694098290891978, 0.78595679062327, 0.690943053275398, 0.6312705526388458, 0.5739251745454136, 0.5481135523346011, 0.5222143167202987, 0.49229431088968056, 0.48703320959949253, 0.4595456221367878, 0.44070736452761955, 0.4216905003997864, 0.4132802994488064, 0.3988848853270297, 0.3817389896162875, 0.37531663052882375, 0.36921518922182767, 0.3503888624376703, 0.340233720229869, 0.33829892028466096, 0.33623526295052386, 0.32211827324476255, 0.3134503865427801, 0.3109355758973526, 0.3015555610958737, 0.2958980022152543, 0.2877878916754053, 0.2739247516823042, 0.2740678669454998, 0.26693953757335825, 0.2547423926563059, 0.24685482342859474, 0.23811302557164463, 0.2314646918094862, 0.23213611733108827, 0.2229334052645724, 0.23122018476077957, 0.21854109203401353, 0.2217090274789755, 0.21812541174685493], "accuracy": [0.3280940353870392, 0.6321489810943604, 0.7061154246330261, 0.7339849472045898, 0.7602694630622864, 0.77677983045578, 0.7866860628128052, 0.8001585006713867, 0.8189142942428589, 0.8107251524925232, 0.8269713521003723, 0.8372738361358643, 0.8407079577445984, 0.8500858545303345, 0.8448025584220886, 0.8570862412452698, 0.8598600029945374, 0.8577466607093811, 0.8639545440673828, 0.8679170608520508, 0.8708229064941406, 0.8677849769592285, 0.8734645247459412, 0.878879964351654, 0.8800686597824097, 0.8864086866378784, 0.8835028409957886, 0.8922203183174133, 0.8934090733528137, 0.8919561505317688, 0.8977677822113037, 0.8985602855682373, 0.9035794734954834, 0.9071456789970398, 0.9103156924247742, 0.9058248400688171, 0.9126931428909302, 0.9101836085319519, 0.9153348207473755, 0.9099194407463074, 0.9140139818191528], "val_loss": [0.89888596534729, 0.6350423778806414, 0.5620105607169015, 0.4978873218808855, 0.45946686608450754, 0.446066107068743, 0.4258204017366682, 0.40290472337177824, 0.3959765008517674, 0.3770242929458618, 0.37067346061979023, 0.35695705243519377, 0.3533786450113569, 0.348633417061397, 0.344835707119533, 0.33284651381628855, 0.33157492535454886, 0.333719151360648, 0.31987008026668, 0.32919256176267353, 0.3240463818822588, 0.3218658651624407, 0.31816400800432476, 0.32590427568980623, 0.31390163728169035, 0.3281670723642622, 0.3174475431442261, 0.3182014993258885, 0.30810874700546265, 0.30272826126643587, 0.3042106032371521, 0.31004216841288973, 0.3118695616722107, 0.30336205448423115, 0.3060969284602574, 0.3113957813807896, 0.3065837706838335, 0.3101645963532584, 0.31242584330695017, 0.3048353706087385, 0.30726598841803415], "val_accuracy": [0.5823333263397217, 0.7193333506584167, 0.7383333444595337, 0.7726666927337646, 0.7926666736602783, 0.7956666946411133, 0.8046666383743286, 0.8220000267028809, 0.8233333230018616, 0.8320000171661377, 0.8450000286102295, 0.847000002861023, 0.8496666550636292, 0.8496666550636292, 0.8476666808128357, 0.8629999756813049, 0.862333357334137, 0.8573333621025085, 0.8650000095367432, 0.862333357334137, 0.8629999756813049, 0.8610000014305115, 0.8610000014305115, 0.8663333058357239, 0.8690000176429749, 0.8600000143051147, 0.8693333268165588, 0.8709999918937683, 0.8736666440963745, 0.8786666393280029, 0.878000020980835, 0.875, 0.8786666393280029, 0.8793333172798157, 0.8809999823570251, 0.8843333125114441, 0.8816666603088379, 0.8763333559036255, 0.8816666603088379, 0.8826666474342346, 0.8793333172798157]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 6, 2, 8, 6, 5, 4, 3, 5, 3, 1, 9, 0, 4, 8, 5, 3, 7, 6, 2, 6, 2, 2, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 0, 3, 0, 3, 3, 1, 0, 2, 0, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [94, 32, 78, 99, 37, 47, 96], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.8374285697937012, "mapping_values": [1, 4, 4, 2, 2, 1, 21, 21, 13, 8, 4, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))), tf.math.multiply(grad, tf.math.subtract(tf.math.add(beta, grad), alpha))))))), tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9546873926754247, 1.078184165069377, 0.7891243306275104, 0.69259558269896, 0.6343271684621413, 0.5800880955084676, 0.5537134898242666, 0.5260901280429464, 0.49665984377932193, 0.4919964626890053, 0.4624193282828686, 0.44095601066858414, 0.42640200702112113, 0.41559819648640894, 0.4044281919563703, 0.38404179573956576, 0.38432727109140424, 0.3778945878669649, 0.35596091247206396, 0.34700917750852867, 0.3457217575331972, 0.3401558226905148, 0.32529278553204527, 0.3195065772686148, 0.3115989337342526, 0.30507421511243976, 0.3066365169519919, 0.2875820117568485, 0.28056632297433615, 0.27977956707656126, 0.2762604905724163, 0.26118677074741364, 0.2546143471887634, 0.24442010392460606, 0.23615960039128528, 0.23654878779157373, 0.2235676383184105, 0.23157192848936725, 0.22086474933975078, 0.21368206828623998], "accuracy": [0.3280940353870392, 0.6326773166656494, 0.7073041796684265, 0.7339849472045898, 0.7560427784919739, 0.7795535326004028, 0.7844406366348267, 0.7984414100646973, 0.8149517774581909, 0.8107251524925232, 0.8231409192085266, 0.8381983637809753, 0.8383304476737976, 0.8459912538528442, 0.844010055065155, 0.8529917001724243, 0.8570862412452698, 0.8539162874221802, 0.8654074668884277, 0.8672566413879395, 0.8676528930664062, 0.8702945709228516, 0.874389111995697, 0.8747853636741638, 0.8774270415306091, 0.8842953443527222, 0.8794082403182983, 0.8906353116035461, 0.8922203183174133, 0.8905032277107239, 0.8918240666389465, 0.8977677822113037, 0.9010698795318604, 0.9064852595329285, 0.9115044474601746, 0.9083344340324402, 0.9122969508171082, 0.908730685710907, 0.9140139818191528, 0.915070652961731], "val_loss": [0.905184268951416, 0.6394718715122768, 0.561640841620309, 0.5012986660003662, 0.4592359406607492, 0.44801110880715506, 0.4309322237968445, 0.4050942063331604, 0.3954078810555594, 0.3806986893926348, 0.3698782580239432, 0.35982694796153475, 0.35068795510700773, 0.34582444599696566, 0.34380107266562326, 0.34033543722970144, 0.3375402178083147, 0.32891776732036043, 0.32334264687129427, 0.3305203063147409, 0.321812493460519, 0.3285930071558271, 0.3169618674686977, 0.3258381996835981, 0.31107417174748014, 0.33049977677209036, 0.3123337881905692, 0.31514876229422434, 0.30770866359983173, 0.30995198658534456, 0.3083942873137338, 0.31512936523982454, 0.3043589847428458, 0.3010838883263724, 0.30686367409569876, 0.30439009836741854, 0.30535794155938284, 0.31484689882823397, 0.31327093499047415, 0.30880771364484516], "val_accuracy": [0.5820000171661377, 0.718999981880188, 0.7379999756813049, 0.7706666588783264, 0.7916666865348816, 0.7926666736602783, 0.8026666641235352, 0.8153333067893982, 0.8230000138282776, 0.8356666564941406, 0.8423333168029785, 0.8486666679382324, 0.8476666808128357, 0.8516666889190674, 0.8539999723434448, 0.8583333492279053, 0.8569999933242798, 0.8583333492279053, 0.859333336353302, 0.8606666922569275, 0.8666666746139526, 0.8556666374206543, 0.8679999709129333, 0.8640000224113464, 0.8709999918937683, 0.862333357334137, 0.8706666827201843, 0.8686666488647461, 0.8756666779518127, 0.8666666746139526, 0.8766666650772095, 0.8706666827201843, 0.8803333044052124, 0.878333330154419, 0.8863333463668823, 0.8799999952316284, 0.8823333382606506, 0.8793333172798157, 0.8799999952316284, 0.8830000162124634]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [26, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 6, 2, 2, 5, 0, 9, 3, 3, 3, 2, 9, 0, 4, 8, 5, 3, 7, 6, 2, 6, 2, 2, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 2, 3, 0, 3, 3, 1, 0, 2, 0, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [94, 38, 78, 99, 37, 47, 96], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7871428728103638, "mapping_values": [1, 4, 4, 2, 2, 1, 11, 11, 6, 5, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.square(beta), grad)))))), tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.280498943151248, 2.134603060625485, 1.6659444343805974, 1.3369026573783513, 1.0540098368357893, 0.8984665902000077, 0.8261620786999038, 0.7869641890284597, 0.7596958516186034, 0.7215092605949944, 0.7104067121356974, 0.6693546692252144, 0.6533475422100258, 0.637221364738163, 0.6128768774622608, 0.5934494874811507, 0.5649536053943218, 0.5543386548533179, 0.5344016951513864, 0.5239045420075295, 0.5065459826634686, 0.5051053563648794, 0.49296969127314927, 0.48319580887664876, 0.4693720105412047, 0.4542845077935683, 0.45060477839280205, 0.4323563073541447, 0.43752403744869006, 0.42298402319479106, 0.4156584960594626, 0.4062097863065505, 0.407176301900847, 0.3987257144100331, 0.3898778539827518, 0.37997015987121513, 0.3722774235682008, 0.3660200107146437, 0.3626189353152383, 0.34831510640689645, 0.3399569338157806, 0.32902465755393745, 0.33160864443212784, 0.31644965502579986, 0.3168547487395897], "accuracy": [0.146479994058609, 0.3481706380844116, 0.4593845009803772, 0.5464271306991577, 0.6347906589508057, 0.6750759482383728, 0.6947563290596008, 0.7025492191314697, 0.7168141603469849, 0.7228899598121643, 0.7289658188819885, 0.7441553473472595, 0.7508915662765503, 0.7667415142059326, 0.763967752456665, 0.7728173136711121, 0.7858935594558716, 0.7917051911354065, 0.8012151718139648, 0.809140145778656, 0.8127063512802124, 0.8127063512802124, 0.8177255392074585, 0.8204993009567261, 0.8249900937080383, 0.8335754871368408, 0.8348963260650635, 0.8391229510307312, 0.8374059200286865, 0.8429533839225769, 0.8455950617790222, 0.8485008478164673, 0.8524633646011353, 0.8524633646011353, 0.8529917001724243, 0.8565579056739807, 0.8613129258155823, 0.8619733452796936, 0.8681812286376953, 0.8676528930664062, 0.8717474341392517, 0.8778232932090759, 0.8795403242111206, 0.8795403242111206, 0.8857482671737671], "val_loss": [1.900240080697196, 1.6125867366790771, 0.9569060121263776, 0.7405240876334054, 0.6639629943030221, 0.6624541963849749, 0.6012840781893048, 0.5899904796055385, 0.5613654170717511, 0.5442122561591012, 0.5429912635258266, 0.5227399553571429, 0.5116678135735648, 0.48698110239846365, 0.47321433680398123, 0.45903124128069195, 0.44421798842293875, 0.4344522101538522, 0.42864752667290823, 0.42170508418764385, 0.41349234751292635, 0.4087133833340236, 0.4033260004861014, 0.3975675531796047, 0.39415544271469116, 0.39018626723970684, 0.38490913595472065, 0.37532873664583477, 0.3658476301601955, 0.36280140706471037, 0.3663630485534668, 0.3651909487588065, 0.35458563906805857, 0.34623080492019653, 0.34657273973737446, 0.34659071479524883, 0.3444233366421291, 0.343874386378697, 0.34121598516191753, 0.33595151560647146, 0.33804547786712646, 0.34063833951950073, 0.3309786915779114, 0.330656817981175, 0.33430529492241995], "val_accuracy": [0.3840000033378601, 0.4933333396911621, 0.6520000100135803, 0.6893333196640015, 0.7126666903495789, 0.7136666774749756, 0.7319999933242798, 0.737666666507721, 0.7473333477973938, 0.750333309173584, 0.7486666440963745, 0.7543333172798157, 0.7733333110809326, 0.7826666831970215, 0.7916666865348816, 0.796999990940094, 0.7996666431427002, 0.8149999976158142, 0.8199999928474426, 0.8153333067893982, 0.8273333311080933, 0.8286666870117188, 0.8233333230018616, 0.8259999752044678, 0.8326666951179504, 0.8346666693687439, 0.8379999995231628, 0.8456666469573975, 0.8473333120346069, 0.8479999899864197, 0.8489999771118164, 0.8516666889190674, 0.8536666631698608, 0.856333315372467, 0.8573333621025085, 0.8616666793823242, 0.862333357334137, 0.8636666536331177, 0.8606666922569275, 0.8669999837875366, 0.8663333058357239, 0.8653333187103271, 0.8663333058357239, 0.8633333444595337, 0.8650000095367432]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1], [8, 8, 2, 2, 4, 6, 5, 2, 3, 6, 1, 2, 1, 5, 4, 4, 5, 3, 7, 6, 2, 6, 2, 2, 2, 2, 9, 6, 0, 2, 3, 2, 2, 5, 8, 1, 2, 8], [3, 1, 2, 3, 3, 2, 1, 3, 0, 2, 0, 3, 3, 0, 3, 3, 3, 1, 0, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [94, 38, 90, 99, 37, 47, 96], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.6700000166893005, "mapping_values": [1, 4, 4, 2, 2, 1, 9, 9, 5, 4, 0, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(grad), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(grad, tf.math.add(beta, tf.math.pow(alpha, beta))), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9620813995131319, 0.9977753538859283, 0.8193135534956502, 0.7190972876948704, 0.6508332339291717, 0.6107724368800546, 0.5760150927877571, 0.5640878214528768, 0.5422928476881562, 0.5229949565249317, 0.5288021992682906, 0.5208542630058695, 0.5705462590326423, 0.6083222356738195, 0.6818472772714658, 0.6670076680882512], "accuracy": [0.3295469582080841, 0.640338122844696, 0.6873596906661987, 0.7304186820983887, 0.7582882046699524, 0.7683265209197998, 0.7843085527420044, 0.7913089394569397, 0.7996301651000977, 0.802800178527832, 0.7969884872436523, 0.7984414100646973, 0.793950617313385, 0.7808743715286255, 0.757099449634552, 0.7688548564910889], "val_loss": [0.8649556296212333, 0.6159156390598842, 0.5608485766819545, 0.4924670628138951, 0.44727698394230436, 0.43895407233919415, 0.42319038084575106, 0.41779513018471853, 0.3976905516215733, 0.4189051900591169, 0.40961153166634695, 0.4135024462427412, 0.4543459585734776, 0.4564023528780256, 0.47816695485796246, 0.5221403666904995], "val_accuracy": [0.6653333306312561, 0.7210000157356262, 0.7480000257492065, 0.7739999890327454, 0.8069999814033508, 0.8036666512489319, 0.8173333406448364, 0.824999988079071, 0.8386666774749756, 0.8273333311080933, 0.843666672706604, 0.8276666402816772, 0.8080000281333923, 0.8133333325386047, 0.8106666803359985, 0.7953333258628845]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [0, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [6, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0], [0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 8, 2, 2, 4, 6, 5, 2, 3, 3, 3, 0, 2, 5, 2, 8, 5, 3, 4, 6, 2, 6, 2, 2, 2, 9, 0, 6, 5, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 0, 3, 0, 2, 3, 3, 0, 2, 0, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [94, 64, 78, 99, 37, 47, 96, 0], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.1120000034570694, "mapping_values": [1, 4, 4, 2, 2, 2, 9, 9, 5, 4, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3023523945834232, 2.3012748855751552, 2.3025198307460593, 2.3025850799688024, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09021265059709549, 0.09866596013307571, 0.10408136248588562, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9708130700247628, 1.9735359464372908, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.08399999886751175, 0.11599999666213989, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 4, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 2, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0], [0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 8, 2, 2, 0, 6, 5, 2, 3, 3, 1, 2, 2, 5, 4, 8, 5, 3, 7, 6, 2, 6, 2, 2, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 0, 3, 0, 2, 3, 3, 0, 2, 0, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [94, 38, 78, 99, 37, 47, 96], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 5, 5, 3, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3047861194472037, 2.3204582057467165, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08506141602993011, 0.08321225643157959, 0.09206181764602661, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.97657653263637, 2.0038627215794156, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.02033333294093609, 0.08733333647251129, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 6, 8, 7, 1, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 8, 2, 2, 1, 6, 5, 2, 3, 3, 3, 2, 2, 5, 4, 8, 5, 3, 7, 6, 2, 6, 2, 2, 2, 2, 9, 6, 0, 1, 3, 2, 2, 9, 8, 8, 2, 6], [3, 3, 0, 0, 0, 2, 3, 0, 0, 2, 0, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [94, 38, 54, 60, 95, 47, 96, 52, 20], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 9, 8, 2, 64, 64, 38, 26, 9, 2, 2, 1, 1, 0, 3, 2, 1, 0], "tree_depth": 59, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))))), tf.math.square(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.math.add(tf.math.add(beta, beta), tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), beta)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))), tf.math.add(tf.math.add(beta, grad), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), grad))))))))), tf.math.negative(alpha)), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(tf.math.add(beta, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha)), grad), tf.math.add(beta, tf.math.sqrt(grad)))), tf.math.sqrt(beta))))))), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.add(grad, tf.math.divide_no_nan(beta, grad))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, sigma))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [0, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 8, 4, 2, 4, 6, 5, 2, 3, 3, 3, 2, 2, 5, 4, 8, 5, 1, 7, 6, 2, 6, 2, 9, 2, 2, 9, 6, 0, 2, 3, 2, 5, 9, 8, 8, 2], [3, 0, 2, 3, 0, 3, 3, 1, 0, 2, 0, 3, 3, 0, 3, 3, 3, 1, 3, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [94, 32, 78, 65, 37, 47, 96, 66], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [9, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 9, 9, 5, 4, 1, 1, 1, 1, 0, 1, 3, 2, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.pow(beta, tf.math.add(beta, grad)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [22126277.40443837, 26780751667.768063, 1674194365312.186, 29077162256152.72, 265976390736157.38, 1575087715984663.8], "accuracy": [0.09285431355237961, 0.10342095047235489, 0.10117553919553757, 0.09813763201236725, 0.09919429570436478, 0.10355303436517715], "val_loss": [347053778.28571427, 136698513700.57143, 4802779470701.714, 61117840003657.14, 443021821289618.3, 2244104919599396.5], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 6, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [6, 2, 6, 5, 2, 1, 3, 2, 3, 3, 3, 2, 1, 0, 1, 8, 2, 3, 7, 6, 2, 3, 2, 2, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 4, 2], [3, 0, 0, 0, 0, 2, 3, 3, 0, 2, 0, 3, 3, 0, 3, 3, 3, 1, 1, 3, 3, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [18, 5, 31, 20, 49, 47, 96, 24, 36], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 5, 3, 2, 20, 20, 10, 10, 5, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)))))), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.multiply(tf.math.add(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, tf.math.multiply(grad, grad))))), tf.math.add(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))))), beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09576013684272766, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 9, 2, 2, 4, 6, 5, 2, 3, 3, 3, 2, 2, 5, 4, 8, 5, 3, 7, 6, 2, 6, 2, 2, 2, 2, 9, 6, 0, 2, 3, 0, 2, 5, 8, 8, 2], [3, 0, 0, 3, 0, 2, 3, 3, 0, 2, 3, 1, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [94, 38, 78, 99, 0, 39, 96, 52], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 2, 2, 0, 1, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, sigma))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1253297759.3664093, 23560297202.44089, 111485244472.40048, 303653787450.8012, 662226267477.7842, 1222559775510.6887], "accuracy": [0.09311848133802414, 0.10342095047235489, 0.1010434553027153, 0.09813763201236725, 0.09932637959718704, 0.10342095047235489], "val_loss": [4764914102.857142, 38108058185.14286, 128601269394.28572, 304817345097.1429, 595333143405.7142, 1028720539355.4286], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 9, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0], [0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [6, 8, 2, 2, 4, 6, 5, 2, 3, 3, 3, 0, 2, 5, 2, 8, 5, 3, 4, 6, 2, 6, 2, 2, 2, 9, 0, 6, 5, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 0, 1, 0, 2, 2, 3, 0, 2, 0, 3, 3, 0, 0, 0, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [94, 10, 78, 99, 37, 47, 96, 0], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 1, 4, 4, 2, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.303179410155486, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [8, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [95, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 8, 2, 2, 4, 6, 9, 2, 3, 3, 3, 2, 2, 5, 4, 8, 5, 3, 7, 6, 2, 6, 9, 2, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 4, 8, 2, 2, 7], [3, 0, 2, 3, 0, 2, 1, 3, 0, 2, 0, 3, 0, 1, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [94, 38, 78, 99, 95, 47, 99, 52, 25], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 65, 65, 39, 26, 9, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 62, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, tf.math.add(tf.math.square(tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32), alpha)))))), grad)), tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, beta))))))), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)), tf.math.add(tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32), alpha))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.multiply(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), alpha))))))))))), tf.math.add(beta, tf.math.sqrt(grad)))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, beta)))))), tf.math.add(tf.math.add(beta, grad), tf.math.add(grad, beta))))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, sigma))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [9, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0], [0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 6, 2, 8, 6, 5, 9, 3, 5, 1, 1, 9, 0, 4, 8, 5, 3, 7, 6, 2, 6, 2, 2, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 0, 3, 0, 3, 3, 1, 0, 2, 0, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [94, 6, 78, 99, 37, 47, 96], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 9, 9, 5, 4, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)))), grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [109977451.80675727, 16008205651.21437, 279287615146.6216, 1934994269076.4739, 8663757670946.692, 28684722990175.082], "accuracy": [0.09311848133802414, 0.10342095047235489, 0.10117553919553757, 0.09813763201236725, 0.09932637959718704, 0.10342095047235489], "val_loss": [910130523.4285715, 49032455314.28571, 526215750802.2857, 2868687704649.143, 10745220244626.285, 31694597315437.715], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [1, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [21, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 6, 2, 2, 1, 0, 9, 3, 3, 3, 2, 9, 9, 9, 2, 5, 3, 7, 8, 2, 6, 2, 2, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 0, 3, 0, 3, 3, 1, 0, 2, 0, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [94, 38, 8, 63, 37, 47, 96, 80], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 4, 4, 2, 2, 1, 24, 24, 17, 7, 7, 2, 1, 1, 0, 0, 3, 2, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(alpha)), tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.multiply(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.add(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [2.303028910749892, 2.3022356353588957, 2.3034124610572366, 2.302037849906193, 2.3013074302308043, 2.301590936121892], "accuracy": [0.08836349099874496, 0.08836349099874496, 0.09166556596755981, 0.08942015469074249, 0.09140139818191528, 0.09813763201236725], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 2, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 8, 2, 2, 4, 6, 5, 2, 3, 3, 1, 2, 2, 5, 4, 8, 5, 3, 7, 6, 2, 6, 2, 2, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 0, 3, 1, 3, 3, 3, 0, 2, 0, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [94, 38, 78, 99, 37, 47, 96], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 18, 18, 11, 7, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(grad, tf.math.negative(tf.math.add(alpha, grad))))), tf.math.add(alpha, alpha))))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.303028910749892, 2.3022356353588957, 2.3034124610572366, 2.302037849906193, 2.3013074302308043, 2.301590936121892], "accuracy": [0.08836349099874496, 0.08836349099874496, 0.09166556596755981, 0.08942015469074249, 0.09140139818191528, 0.09813763201236725], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 6, 5, 8, 6, 5, 2, 3, 5, 3, 1, 9, 0, 4, 8, 5, 3, 7, 6, 2, 6, 2, 2, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 0, 3, 0, 3, 3, 1, 0, 2, 0, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [94, 32, 78, 99, 37, 47, 96], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 4, 4, 2, 2, 1, 11, 11, 7, 4, 2, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))), tf.math.divide_no_nan(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.303028910749892, 2.3022356353588957, 2.3034124610572366, 2.302037849906193, 2.3013074302308043, 2.301590936121892], "accuracy": [0.08836349099874496, 0.08836349099874496, 0.09166556596755981, 0.08942015469074249, 0.09140139818191528, 0.09813763201236725], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 5, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 3, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0], [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 0, 9, 2, 6, 0, 8, 3, 3, 3, 2, 9, 0, 4, 8, 5, 3, 7, 6, 2, 6, 2, 2, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 0, 1, 0, 2, 3, 3, 0, 2, 0, 3, 3, 0, 3, 3, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [79, 38, 90, 99, 37, 47, 96], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 4, 4, 2, 2, 0, 5, 5, 3, 2, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), grad), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.negative(grad), tf.math.add(beta, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.303028910749892, 2.3022356353588957, 2.3034124610572366, 2.302037849906193, 2.3013074302308043, 2.301590936121892], "accuracy": [0.08836349099874496, 0.08836349099874496, 0.09166556596755981, 0.08942015469074249, 0.09140139818191528, 0.09813763201236725], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}]