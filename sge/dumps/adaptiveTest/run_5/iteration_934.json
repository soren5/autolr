[{"genotype": [[0], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [39, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 0, 6, 9, 2, 9, 5, 6, 9, 3, 9, 3, 6, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [0, 3, 0, 3, 1, 3, 3, 1, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [22, 31, 33, 38, 8, 35], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7994285821914673, "mapping_values": [1, 4, 4, 2, 2, 1, 8, 8, 6, 2, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.negative(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.1962057525424155, 1.581778644964349, 1.259581204796543, 1.0305444200781153, 0.9529713917921688, 0.8945355333625018, 0.8050047684386579, 0.7827495441240263, 0.7957409450784572, 0.729399580690036, 0.7161774170900994, 0.6882323419665144, 0.6957057077949861, 0.6861869692251337, 0.6607230835272069, 0.6531694918937845, 0.638380805018902, 0.6413864231364697, 0.638008983466509, 0.6070851891772339, 0.6040896473464996, 0.6189514564611278, 0.6153234967922789, 0.5971654633158753, 0.5766334298768331, 0.6010583178903511, 0.5769242835460543, 0.567391684333709, 0.5574687457339733, 0.5543472497391742], "accuracy": [0.2635054886341095, 0.4909523129463196, 0.5501254796981812, 0.6247523427009583, 0.6477347612380981, 0.6686038970947266, 0.7033417224884033, 0.7116629481315613, 0.6976621150970459, 0.7251353859901428, 0.7292299270629883, 0.7442874312400818, 0.7346453666687012, 0.7434949278831482, 0.7518161535263062, 0.7532690763473511, 0.7588165402412415, 0.7549861073493958, 0.7561748623847961, 0.7684586048126221, 0.7692511081695557, 0.7622507214546204, 0.7691190242767334, 0.7744023203849792, 0.7816668748855591, 0.7711002230644226, 0.7810064554214478, 0.7861577272415161, 0.789459764957428, 0.791969358921051], "val_loss": [1.5982585293906075, 1.1170224802834647, 0.812108039855957, 0.7524070399148124, 0.6865338087081909, 0.6396481479917254, 0.6002473149980817, 0.5922844239643642, 0.5575301987784249, 0.5621387107031686, 0.5432767868041992, 0.5457439082009452, 0.5222534111567906, 0.5269905499049595, 0.5028267077037266, 0.5251428059169224, 0.5084790161677769, 0.5093997035707746, 0.47553324699401855, 0.4893287420272827, 0.46001132896968294, 0.4816730873925345, 0.4634142943790981, 0.4647120577948434, 0.44962775707244873, 0.48174173491341726, 0.44719999177115305, 0.4659832034792219, 0.4537949732371739, 0.45154983656747], "val_accuracy": [0.5293333530426025, 0.5373333096504211, 0.6556666493415833, 0.652999997138977, 0.7023333311080933, 0.7153333425521851, 0.7153333425521851, 0.7176666855812073, 0.7509999871253967, 0.7360000014305115, 0.753000020980835, 0.734000027179718, 0.7599999904632568, 0.762333333492279, 0.7746666669845581, 0.7543333172798157, 0.7633333206176758, 0.7519999742507935, 0.7856666445732117, 0.7699999809265137, 0.7903333306312561, 0.7756666541099548, 0.7913333177566528, 0.7913333177566528, 0.7950000166893005, 0.7733333110809326, 0.7929999828338623, 0.7823333144187927, 0.7889999747276306, 0.7876666784286499]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [39, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 1, 6, 9, 1, 2, 8, 5, 9, 1, 9, 3, 6, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [0, 3, 2, 3, 0, 3, 3, 3, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [52, 61, 33, 38, 8, 35], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7911428809165955, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(grad), tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.17625045924375, 1.5151426530769236, 1.1531530560251744, 1.0043922326883163, 0.906291321787962, 0.8577484205933987, 0.7926380120216816, 0.7710090772649946, 0.7532378417893549, 0.7229688363367494, 0.7356652686341154, 0.7016750817380136, 0.6830539881529636, 0.6629451825209045, 0.6485420125130067, 0.6495412623074549, 0.627935277330814, 0.6235273616062951, 0.6254865304275259, 0.6059656741439297, 0.6012366530350753, 0.6133679459359841], "accuracy": [0.2775062620639801, 0.4974243938922882, 0.5819574594497681, 0.6412627100944519, 0.6691322326660156, 0.6919825673103333, 0.7129837274551392, 0.7129837274551392, 0.7220974564552307, 0.7329282760620117, 0.7224937081336975, 0.7433628439903259, 0.7500990629196167, 0.7592127919197083, 0.761590301990509, 0.759609043598175, 0.767401933670044, 0.7711002230644226, 0.7662131786346436, 0.7766477465629578, 0.7778365015983582, 0.7763835787773132], "val_loss": [1.518080472946167, 0.997814519064767, 0.7536066429955619, 0.755034225327628, 0.6580872195107597, 0.6029812097549438, 0.5738526923315865, 0.5767229284558978, 0.5312670298985073, 0.6258198363440377, 0.5246456861495972, 0.5069822072982788, 0.5041763271604266, 0.5192931890487671, 0.5205377510615757, 0.48444863728114534, 0.47364682810647146, 0.4734576089041574, 0.46351003646850586, 0.4703766277858189, 0.5278141157967704, 0.4611431360244751], "val_accuracy": [0.5456666946411133, 0.574999988079071, 0.6806666851043701, 0.6393333077430725, 0.7013333439826965, 0.7369999885559082, 0.7416666746139526, 0.7473333477973938, 0.7580000162124634, 0.7096666693687439, 0.765666663646698, 0.7773333191871643, 0.7713333368301392, 0.7616666555404663, 0.7459999918937683, 0.7760000228881836, 0.7929999828338623, 0.7820000052452087, 0.7886666655540466, 0.7839999794960022, 0.7549999952316284, 0.7886666655540466]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [39, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 1, 6, 5, 2, 2, 6, 6, 9, 1, 9, 3, 1, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [0, 3, 0, 3, 0, 1, 3, 3, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [22, 98, 33, 38, 60, 35, 37], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7879999876022339, "mapping_values": [1, 4, 4, 2, 2, 1, 46, 46, 27, 19, 7, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.subtract(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(grad, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.add(beta, alpha))), tf.math.add(beta, grad)))), tf.math.multiply(tf.math.add(beta, tf.math.subtract(grad, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)))), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(tf.math.add(beta, grad), grad)), tf.math.add(beta, beta))))), tf.math.add(beta, grad))), tf.math.add(beta, alpha)))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.1656869879456684, 1.434788716924252, 1.073607482237508, 0.9639482493209108, 0.8251089525024384, 0.8124651122386067, 0.7430129898238443, 0.7303460183522767, 0.6963757980359528, 0.7033921162906718, 0.6899326449104383, 0.6383642242207047, 0.6478822390086237, 0.6308689296930505, 0.6249157491613294, 0.6052739738142643, 0.5966283401021427, 0.5924049301422063, 0.5887539175995558], "accuracy": [0.2863558232784271, 0.5235767960548401, 0.617751955986023, 0.6514331102371216, 0.7057191729545593, 0.6979262828826904, 0.7232862114906311, 0.7260599732398987, 0.7474573850631714, 0.7354378700256348, 0.7405890822410583, 0.7664773464202881, 0.7593448758125305, 0.7667415142059326, 0.7692511081695557, 0.77677983045578, 0.7800818681716919, 0.7833839654922485, 0.785101056098938], "val_loss": [1.4523732662200928, 0.8990750312805176, 0.8264467886516026, 0.6456016642706734, 0.6181751830237252, 0.5832443407603672, 0.5670807361602783, 0.5387163502829415, 0.5722852434430804, 0.5795706510543823, 0.5318725109100342, 0.5043692418507167, 0.5232599633080619, 0.48398406164986746, 0.4846682548522949, 0.4833143268312727, 0.47951953751700266, 0.4802762610571725, 0.46016951969691683], "val_accuracy": [0.5746666789054871, 0.6370000243186951, 0.6343333125114441, 0.7200000286102295, 0.7229999899864197, 0.7446666955947876, 0.7396666407585144, 0.7493333220481873, 0.7306666374206543, 0.7120000123977661, 0.7673333287239075, 0.7743333578109741, 0.7643333077430725, 0.7896666526794434, 0.7776666879653931, 0.7806666493415833, 0.7753333449363708, 0.7883333563804626, 0.784333348274231]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [29, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 3, 0, 2, 6, 5, 2, 8, 9, 8, 9, 5, 6, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 2, 3, 2, 0, 3, 2, 3, 0, 0, 3, 3, 0, 4, 5, 1, 3, 1, 1, 2, 5], [22, 86, 68, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7862856984138489, "mapping_values": [1, 4, 4, 2, 2, 1, 15, 15, 10, 5, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.sqrt(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))))), tf.math.sqrt(beta)), tf.math.add(beta, grad))), tf.math.add(beta, beta)), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.290551866821845, 2.2562973562909976, 2.215407582353434, 2.158519034750347, 2.072016167461187, 1.952715796864406, 1.8141821451694768, 1.6512422674383391, 1.5100322910161963, 1.3997819939341134, 1.2981322282466905, 1.239457320700925, 1.1689522209231722, 1.1173690183996257, 1.0823557373397559, 1.0430256576271042, 1.0026051900122601, 0.9850651285809265, 0.9606396688084167, 0.9520193634724746, 0.9247603517135435, 0.9013062629244977, 0.8937633996705149, 0.8728731273660066, 0.8750378298501233, 0.8575703434074371, 0.8356699933544078, 0.831128568838868, 0.8271434284582303, 0.8214374431734308, 0.8095833445190518, 0.8059453124603843, 0.7911130001106912, 0.7872366070621412, 0.7836384118004812, 0.7778071646110304, 0.7714794966459999, 0.7647198369127963, 0.764544401548605, 0.7494250809543278, 0.753787134656061, 0.7509096967089115, 0.7454055332866689, 0.7346871812755185, 0.7299451457432248, 0.7222277286612929, 0.7228986629405593, 0.7140820334852332, 0.7080384718507367, 0.7109115277267545, 0.7128733280564438, 0.698452796406671, 0.69060151139428, 0.6963794578445932, 0.691745761189998, 0.6926131884592903, 0.6860318562421092, 0.6866041837886749, 0.6806194576699389, 0.6865755297079251, 0.6778817559907213, 0.6747001970307135, 0.6800314665092626, 0.6684837590874997, 0.6764948890508677, 0.6606960940228761, 0.6620895630805373, 0.6512935844079898, 0.6639360246751539, 0.6612250504555436, 0.6562625632042332, 0.646602319995599, 0.6489420638045362, 0.6503168914091664, 0.6473345741887433, 0.642413881901721, 0.6369521181502472, 0.6403215011868888, 0.6439797599884686, 0.6371038334008458, 0.6292004243745906], "accuracy": [0.12415797263383865, 0.21542729437351227, 0.28345000743865967, 0.34460440278053284, 0.3963809311389923, 0.42609959840774536, 0.44828951358795166, 0.4913485646247864, 0.5149914026260376, 0.5279355645179749, 0.5645225048065186, 0.5739004015922546, 0.5935807824134827, 0.6132611036300659, 0.6232994198799133, 0.635979413986206, 0.6440364718437195, 0.6514331102371216, 0.6592260003089905, 0.6544709801673889, 0.6744155287742615, 0.6745476126670837, 0.6798309087753296, 0.6876237988471985, 0.6808875799179077, 0.6873596906661987, 0.7042662501335144, 0.7036058902740479, 0.703209638595581, 0.7003037929534912, 0.707568347454071, 0.709021270275116, 0.7102100253105164, 0.7106062769889832, 0.7141724824905396, 0.7172104120254517, 0.7255316376686096, 0.7177387475967407, 0.7168141603469849, 0.7246070504188538, 0.7263241410255432, 0.7279091477394104, 0.7277770638465881, 0.7329282760620117, 0.733060359954834, 0.7341170310974121, 0.7347774505615234, 0.7364945411682129, 0.7446836829185486, 0.7400607466697693, 0.7396644949913025, 0.7440232634544373, 0.7469290494918823, 0.7441553473472595, 0.7469290494918823, 0.7449478507041931, 0.7445515990257263, 0.7491744756698608, 0.7547219395637512, 0.7465327978134155, 0.7512878179550171, 0.752212405204773, 0.7536653280258179, 0.752740740776062, 0.7548540234565735, 0.759080708026886, 0.7568352818489075, 0.7631752490997314, 0.7567031979560852, 0.7605336308479309, 0.76106196641922, 0.7611940503120422, 0.7592127919197083, 0.7630431652069092, 0.7626469135284424, 0.7650244235992432, 0.7643640041351318, 0.7629110813140869, 0.7622507214546204, 0.7644960880279541, 0.7728173136711121], "val_loss": [1.9411285945347376, 1.907118592943464, 1.860846791948591, 1.7933932031903947, 1.695188011441912, 1.5618673733302526, 1.404921497617449, 1.2472787925175257, 1.1115262508392334, 1.0067415578024728, 0.9256633690425328, 0.8639849424362183, 0.8175281456538609, 0.7787585428782872, 0.7496119056429181, 0.723883867263794, 0.7021950313023159, 0.685700706073216, 0.6710324457713536, 0.657138500894819, 0.6453361340931484, 0.6352535315922329, 0.6260392665863037, 0.6174089908599854, 0.6109541484287807, 0.6036802530288696, 0.5972230434417725, 0.5914106709616525, 0.5869264943259103, 0.5817635399954659, 0.5764960050582886, 0.5709399495806012, 0.5687158959252494, 0.5618928841182164, 0.5588665008544922, 0.5540799243109567, 0.5485671758651733, 0.5462660108293805, 0.545751793043954, 0.5422885077340263, 0.5373581647872925, 0.5335827895573207, 0.5317967789513725, 0.5268526417868478, 0.5264379467282977, 0.5234407186508179, 0.520669800894601, 0.5189908742904663, 0.5178348677498954, 0.5145626579012189, 0.5104548931121826, 0.5074496950422015, 0.5061526128223964, 0.5048815863473075, 0.5038843495505196, 0.5012162412915911, 0.5003648315157209, 0.49889653069632395, 0.4947256020137242, 0.49331023011888775, 0.49229099069322857, 0.49529521805899485, 0.48915878364018034, 0.48747808592660086, 0.4873624699456351, 0.4817706516810826, 0.48382765906197683, 0.47989334378923687, 0.4807225465774536, 0.47828693049294607, 0.47738267694200787, 0.4759908744267055, 0.47424115453447613, 0.47454772676740375, 0.4715903656823294, 0.47121502671922955, 0.4687698909214565, 0.4679039887019566, 0.46777267115456717, 0.46818883078438894, 0.4671427181788853], "val_accuracy": [0.2953333258628845, 0.3840000033378601, 0.43166667222976685, 0.48500001430511475, 0.5350000262260437, 0.5619999766349792, 0.5923333168029785, 0.6143333315849304, 0.6503333449363708, 0.656000018119812, 0.6853333115577698, 0.6923333406448364, 0.699999988079071, 0.7059999704360962, 0.7103333473205566, 0.7126666903495789, 0.7226666808128357, 0.7229999899864197, 0.7226666808128357, 0.7300000190734863, 0.7356666922569275, 0.737333357334137, 0.7323333621025085, 0.7393333315849304, 0.7453333139419556, 0.7456666827201843, 0.7486666440963745, 0.7490000128746033, 0.7456666827201843, 0.7486666440963745, 0.753000020980835, 0.7599999904632568, 0.7590000033378601, 0.7603333592414856, 0.7620000243186951, 0.7570000290870667, 0.7673333287239075, 0.7673333287239075, 0.7670000195503235, 0.7663333415985107, 0.7699999809265137, 0.7706666588783264, 0.7736666798591614, 0.7713333368301392, 0.7736666798591614, 0.7746666669845581, 0.7753333449363708, 0.7749999761581421, 0.7766666412353516, 0.7753333449363708, 0.7793333530426025, 0.7776666879653931, 0.7766666412353516, 0.781000018119812, 0.7776666879653931, 0.7820000052452087, 0.7829999923706055, 0.7836666703224182, 0.7789999842643738, 0.7839999794960022, 0.7873333096504211, 0.7829999923706055, 0.7870000004768372, 0.7926666736602783, 0.7820000052452087, 0.7923333048820496, 0.7860000133514404, 0.7940000295639038, 0.7856666445732117, 0.7879999876022339, 0.7943333387374878, 0.7933333516120911, 0.7866666913032532, 0.7876666784286499, 0.7963333129882812, 0.8013333082199097, 0.7900000214576721, 0.7976666688919067, 0.796999990940094, 0.7940000295639038, 0.7963333129882812]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [29, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 3, 0, 2, 6, 5, 2, 8, 9, 8, 9, 5, 6, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 2, 3, 2, 0, 3, 2, 3, 0, 0, 3, 3, 0, 4, 5, 1, 3, 1, 1, 2, 5], [22, 61, 68, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7828571200370789, "mapping_values": [1, 4, 4, 2, 2, 1, 15, 15, 11, 4, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(grad), tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.sqrt(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.math.sqrt(beta))), tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))), grad), beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.290551866821845, 2.2562976037475018, 2.2154113742197037, 2.1585246440583625, 2.072025977263062, 1.9527558582396853, 1.8142067915129545, 1.651246028427655, 1.5100233194897628, 1.3997669063932656, 1.2981173388001594, 1.2394290279482396, 1.1689093587672816, 1.11731805901848, 1.082320995444808, 1.0429950659820795, 1.002517625309646, 0.9851523619742992, 0.960680325482232, 0.9519871618643476, 0.9246756434598068, 0.9012621157378128, 0.8936946490075154, 0.8729274415258151, 0.8749820762904974, 0.8575156215254058, 0.8356703919678505, 0.8311660577592408, 0.8270604668701519, 0.8213982572251338, 0.8096557785932178, 0.8059445791524147, 0.7911047279134072, 0.7873654831606777, 0.7834804053744935, 0.7777771065499978, 0.7714126771939602, 0.7646756004018082, 0.7644772027477597, 0.7494765852247451, 0.7537626405717076, 0.7508100526302309, 0.7452627023795907, 0.7346209943916473, 0.7298818521527346, 0.722169443183587, 0.7228601159452368, 0.713904289938849, 0.7079994809263812, 0.7109984444384687, 0.7128150334778306, 0.6981738554866102, 0.6905874896987932, 0.6963677328213284, 0.6915398962493617, 0.6925834205880881, 0.6858884677548749, 0.6865861257069524, 0.6803998582477441, 0.6860680948899107, 0.6776975906441602, 0.6743518605901109, 0.6799232882673022, 0.6681617344879062, 0.6761411074807284, 0.6606670065310968, 0.6619704800227756, 0.6511278972649666, 0.6637446425767576, 0.6609701773730157, 0.6560737852485913, 0.6463381184909354, 0.6485843231428915], "accuracy": [0.12415797263383865, 0.21542729437351227, 0.28345000743865967, 0.34447231888771057, 0.3963809311389923, 0.4263637661933899, 0.4484215974807739, 0.49148064851760864, 0.5148593187332153, 0.5280676484107971, 0.5643904209136963, 0.5737683176994324, 0.5938449501991272, 0.6132611036300659, 0.6234315037727356, 0.6358473300933838, 0.6439043879508972, 0.6519614458084106, 0.658961832523346, 0.6547351479530334, 0.6741513609886169, 0.6749438643455505, 0.6802271604537964, 0.6876237988471985, 0.68101966381073, 0.6876237988471985, 0.7045304179191589, 0.7038700580596924, 0.7025492191314697, 0.700700044631958, 0.7074362635612488, 0.7088891863822937, 0.7098137736320496, 0.7104741930961609, 0.7137762308120728, 0.7170783281326294, 0.7251353859901428, 0.7176066637039185, 0.7172104120254517, 0.7246070504188538, 0.7276449799537659, 0.7279091477394104, 0.7279091477394104, 0.7321357727050781, 0.7334566116333008, 0.7337207794189453, 0.7358341217041016, 0.7366266250610352, 0.7449478507041931, 0.7408532500267029, 0.7396644949913025, 0.7436270117759705, 0.7474573850631714, 0.7449478507041931, 0.746268630027771, 0.7446836829185486, 0.7449478507041931, 0.7498348951339722, 0.7552502751350403, 0.7477215528488159, 0.7514199018478394, 0.752212405204773, 0.7536653280258179, 0.7523444890975952, 0.7549861073493958, 0.7584202885627747, 0.7560427784919739, 0.7640998363494873, 0.7568352818489075, 0.7609298825263977, 0.76106196641922, 0.761590301990509, 0.7601373791694641], "val_loss": [1.9411287307739258, 1.9071195466177804, 1.8608475412641252, 1.7933934756687708, 1.6952178478240967, 1.5619019780840193, 1.404928547995431, 1.247295652117048, 1.1115084375653947, 1.00673736844744, 0.9256622110094342, 0.8639706884111676, 0.8174811601638794, 0.7787451914378575, 0.7496355601719448, 0.7238914796284267, 0.7021697248731341, 0.6856849534170968, 0.6710525580814907, 0.6571141821997506, 0.6452816043581281, 0.6351125580923898, 0.6259678091321673, 0.6173843656267438, 0.6109919207436698, 0.6036932468414307, 0.5971490655626569, 0.5912809542247227, 0.5868368489401681, 0.5817314726965768, 0.5765304906027657, 0.5709411757332938, 0.5687727757862636, 0.5620970896312169, 0.5589277744293213, 0.5542127234595162, 0.5485623734337943, 0.546208381652832, 0.5459405183792114, 0.5421033075877598, 0.5373563255582537, 0.5335830620356968, 0.5316962174006871, 0.5267441953931536, 0.5262534448078701, 0.5232711178915841, 0.520672082901001, 0.5188920668193272, 0.5178314106804984, 0.5146089281354632, 0.5105010271072388, 0.5073518923350743, 0.5060666458947318, 0.504576563835144, 0.5037248475211007, 0.5012711797441755, 0.5004391329629081, 0.4989351885659354, 0.49465133462633404, 0.4929672990526472, 0.49197166306631906, 0.49516686371394564, 0.48911573205675396, 0.4873144456318447, 0.4874723127910069, 0.48171516827174593, 0.4836147853306362, 0.47985477106911795, 0.4805811473301479, 0.4781542846134731, 0.4773930992398943, 0.47589615413120817, 0.4739992448261806], "val_accuracy": [0.2953333258628845, 0.3840000033378601, 0.4320000112056732, 0.48533332347869873, 0.5346666574478149, 0.562333345413208, 0.5923333168029785, 0.6140000224113464, 0.6503333449363708, 0.656000018119812, 0.6853333115577698, 0.6923333406448364, 0.7003333568572998, 0.706333339214325, 0.7103333473205566, 0.7126666903495789, 0.7229999899864197, 0.7226666808128357, 0.7226666808128357, 0.7300000190734863, 0.7353333234786987, 0.7379999756813049, 0.7323333621025085, 0.7393333315849304, 0.7450000047683716, 0.7456666827201843, 0.7483333349227905, 0.7493333220481873, 0.7456666827201843, 0.7493333220481873, 0.7523333430290222, 0.7599999904632568, 0.7596666812896729, 0.7603333592414856, 0.762333333492279, 0.7563333511352539, 0.7663333415985107, 0.7670000195503235, 0.7666666507720947, 0.765999972820282, 0.7696666717529297, 0.7716666460037231, 0.7726666927337646, 0.7713333368301392, 0.7739999890327454, 0.7739999890327454, 0.7756666541099548, 0.7746666669845581, 0.7773333191871643, 0.7746666669845581, 0.7793333530426025, 0.7770000100135803, 0.7773333191871643, 0.7816666960716248, 0.778333306312561, 0.7823333144187927, 0.7836666703224182, 0.7839999794960022, 0.7803333401679993, 0.784333348274231, 0.7870000004768372, 0.781333327293396, 0.7863333225250244, 0.7933333516120911, 0.7816666960716248, 0.7933333516120911, 0.7870000004768372, 0.7953333258628845, 0.7866666913032532, 0.7883333563804626, 0.7940000295639038, 0.793666660785675, 0.7863333225250244]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [51, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 9, 6, 9, 9, 2, 6, 6, 2, 2, 9, 3, 6, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [0, 3, 0, 3, 0, 3, 3, 3, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [22, 12, 46, 38, 8, 53], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.5785714387893677, "mapping_values": [1, 4, 4, 2, 2, 1, 5, 5, 5, 0, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32), tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.278787672968431, 2.1527230259040406, 2.052539964220417, 2.301554784263366, 1.944254906422206, 2.183363389534296, 2.0911900964411196], "accuracy": [0.24818386137485504, 0.2661471366882324, 0.36560559272766113, 0.10896842926740646, 0.31145158410072327, 0.25518426299095154, 0.21701228618621826], "val_loss": [1.6715823582240514, 1.596255098070417, 1.976813520703997, 1.9533079692295618, 1.8132523127964564, 1.9724458285740443, 1.2909465857914515], "val_accuracy": [0.43033334612846375, 0.5590000152587891, 0.09966666996479034, 0.2746666669845581, 0.32233333587646484, 0.10433333367109299, 0.468666672706604]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [11, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [1, 3, 8, 1, 3, 3, 2, 8, 9, 1, 9, 5, 6, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 2, 3, 3, 0, 3, 3, 3, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [10, 86, 25, 38, 8], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.4502857029438019, "mapping_values": [1, 4, 4, 2, 2, 1, 18, 18, 12, 6, 3, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.multiply(grad, tf.math.sqrt(tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))), tf.math.add(beta, beta))), tf.math.subtract(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)))), grad)), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.303244803607141, 2.300642026020252, 2.3002757467787105, 2.300227221055762, 2.2974395992544587, 2.295982834622372, 2.298582555469568, 2.294808910507426, 2.295539430418759, 2.295015000963192, 2.2926408544176873, 2.2944615049101436, 2.290621610727639, 2.291038544926551, 2.2888169641649685, 2.288970344180932, 2.287163009732989, 2.287100041877828, 2.2862795731331995, 2.287380211546342, 2.285465140085116, 2.2830549838000977, 2.2838011932347855, 2.2818567949027244, 2.281599688035559, 2.28100071364642, 2.279937914696037, 2.2785963881773137, 2.277831556774669, 2.2770612991528503, 2.2752714858094794, 2.274763185995886, 2.275039011949341, 2.273381376562495, 2.2750079945770976, 2.2731803076976735, 2.270843332123369, 2.2706384369096013, 2.2689275720793067, 2.2693432887090808, 2.2676377914616648, 2.2657175196034323, 2.266083016072471, 2.265310666123716, 2.2632332684546257, 2.2631142938677127, 2.2624353362017806, 2.2611025460187424, 2.259462560975651, 2.2592991934224456, 2.258969218896884, 2.256697359779145, 2.2558892745351935, 2.254612645043547, 2.2539341559956148, 2.2535862831344473, 2.2518697852519023, 2.251034535909483, 2.2490365026239956, 2.248892469239855, 2.2481634909718373, 2.2478696000952336, 2.246499211544752, 2.246053695804675, 2.2460410702324594, 2.2420841546626122, 2.2425078627077846, 2.24034978168484, 2.2405843437150987, 2.239961631734846, 2.2377682740520477, 2.23719744706875, 2.2349172084086826, 2.2339969979395655, 2.234790376337717, 2.2312151505222504, 2.2301007903026884, 2.2299117927364844, 2.228548741123349, 2.227703854675857, 2.2249846764842767, 2.223885449499045, 2.22382984884411, 2.221674442732134, 2.220724579176615, 2.2208306689571633, 2.217787504322131, 2.2175521282172865, 2.2150257968978164, 2.2153035848053486, 2.2141142848806767, 2.212266999307546, 2.2112030636569875, 2.2099896331646534, 2.2087988322515844, 2.206685899727695, 2.206678222309345, 2.2034288463874687, 2.2017609580255, 2.1997987756072854], "accuracy": [0.08902391046285629, 0.09866596013307571, 0.09509972482919693, 0.09747721254825592, 0.10368511080741882, 0.10857218503952026, 0.10381719470024109, 0.11213842034339905, 0.10447761416435242, 0.10236428678035736, 0.108440101146698, 0.1138555034995079, 0.11808215826749802, 0.11755382269620895, 0.12481838464736938, 0.11755382269620895, 0.12191256135702133, 0.1302337795495987, 0.1348566859960556, 0.12917712330818176, 0.1298375427722931, 0.13789460062980652, 0.13815876841545105, 0.14529123902320862, 0.14832915365695953, 0.14951789379119873, 0.1488574892282486, 0.14951789379119873, 0.15519747138023376, 0.1666886806488037, 0.16602826118469238, 0.16497160494327545, 0.16431118547916412, 0.16417910158634186, 0.15810328722000122, 0.17210407555103302, 0.17395325005054474, 0.17817988991737366, 0.18240654468536377, 0.17461365461349487, 0.18333113193511963, 0.19204860925674438, 0.1942940205335617, 0.18980319797992706, 0.19970941543579102, 0.19521859288215637, 0.19495442509651184, 0.20380398631095886, 0.20195482671260834, 0.20353981852531433, 0.21159687638282776, 0.21133272349834442, 0.20921939611434937, 0.21437062323093414, 0.21899352967739105, 0.22176727652549744, 0.22295601665973663, 0.22639016807079315, 0.22942808270454407, 0.23061682283878326, 0.23154141008853912, 0.22863557934761047, 0.23220182955265045, 0.23801347613334656, 0.2343151569366455, 0.24382512271404266, 0.2401268035173416, 0.24382512271404266, 0.2417117953300476, 0.2533350884914398, 0.25742965936660767, 0.24818386137485504, 0.2569013237953186, 0.25742965936660767, 0.25399550795555115, 0.2665433883666992, 0.2665433883666992, 0.26139214634895325, 0.26826047897338867, 0.2697133719921112, 0.27341169118881226, 0.2813366651535034, 0.2743362784385681, 0.2818650007247925, 0.2771100103855133, 0.27605336904525757, 0.2868841588497162, 0.28701624274253845, 0.28622373938560486, 0.27803459763526917, 0.2849029302597046, 0.2895258367061615, 0.28622373938560486, 0.29203540086746216, 0.2930920720100403, 0.30365869402885437, 0.3004887104034424, 0.31158366799354553, 0.31184783577919006, 0.30986660718917847], "val_loss": [1.970183985573905, 1.969367436000279, 1.968541213444301, 1.9677106993538993, 1.9668924467904227, 1.9660709926060267, 1.9652502196175712, 1.9644373485020228, 1.9636224337986536, 1.9628105844770158, 1.9620094299316406, 1.9612009184701102, 1.9603936331612724, 1.9595849854605538, 1.9587751116071428, 1.9579625129699707, 1.9571469170706612, 1.9563394955226354, 1.9555244445800781, 1.9547196796962194, 1.9539057186671667, 1.953101430620466, 1.9522923060825892, 1.9514783450535365, 1.950674397604806, 1.9498639106750488, 1.9490548542567663, 1.9482372147696358, 1.947416169302804, 1.9466001646859306, 1.945774691445487, 1.9449571881975447, 1.9441417966570174, 1.9433101926531111, 1.9424896921430315, 1.941655227116176, 1.9408255985804967, 1.9399844578334264, 1.939141069139753, 1.9382888248988561, 1.9374348095485143, 1.936581747872489, 1.9357181276593889, 1.9348506246294295, 1.9339748791285925, 1.9330940246582031, 1.9322056770324707, 1.9313137190682548, 1.9304197856358118, 1.9295283726283483, 1.9286266735621862, 1.9277146884373255, 1.92680025100708, 1.925884587424142, 1.9249606132507324, 1.9240307126726424, 1.9230878693716866, 1.922140121459961, 1.921179975782122, 1.920234203338623, 1.9192657470703125, 1.9182940210614885, 1.9173199108668737, 1.916337353842599, 1.915358066558838, 1.9143573216029577, 1.9133567810058594, 1.9123385974339075, 1.911313261304583, 1.9102788652692522, 1.9092422894069128, 1.9081854139055525, 1.907116140638079, 1.906040872846331, 1.9049629483904158, 1.9038677896772112, 1.9027705192565918, 1.9016639845711845, 1.9005487986973353, 1.8994276182992118, 1.8982853208269392, 1.8971254484994071, 1.8959666660853796, 1.8947975976126534, 1.89362519127982, 1.8924498558044434, 1.8912414142063685, 1.8900322232927596, 1.8888017109462194, 1.887571198599679, 1.8863378252301897, 1.8850706645420618, 1.8838019371032715, 1.8825310979570662, 1.8812290600367956, 1.8799145562308175, 1.8786009379795618, 1.8772598675319128, 1.8759119851248605, 1.8745311328342982], "val_accuracy": [0.0430000014603138, 0.04800000041723251, 0.0533333346247673, 0.05833333358168602, 0.06333333253860474, 0.06966666877269745, 0.07533333450555801, 0.08166666328907013, 0.09000000357627869, 0.09600000083446503, 0.10199999809265137, 0.1066666692495346, 0.1146666631102562, 0.12066666781902313, 0.12866666913032532, 0.13600000739097595, 0.14399999380111694, 0.156333327293396, 0.16599999368190765, 0.1743333339691162, 0.18400000035762787, 0.19366666674613953, 0.20200000703334808, 0.2096666693687439, 0.21566666662693024, 0.2199999988079071, 0.22699999809265137, 0.23633334040641785, 0.2423333376646042, 0.2486666738986969, 0.2540000081062317, 0.2603333294391632, 0.2693333327770233, 0.2763333320617676, 0.28166666626930237, 0.28733333945274353, 0.2933333218097687, 0.2996666729450226, 0.30666667222976685, 0.31299999356269836, 0.31833332777023315, 0.32100000977516174, 0.32633334398269653, 0.3293333351612091, 0.3330000042915344, 0.3356666564941406, 0.3383333384990692, 0.34433332085609436, 0.34599998593330383, 0.3503333330154419, 0.35199999809265137, 0.35499998927116394, 0.3580000102519989, 0.3616666793823242, 0.36500000953674316, 0.36666667461395264, 0.36666667461395264, 0.36899998784065247, 0.37066665291786194, 0.37299999594688416, 0.375, 0.3763333261013031, 0.3779999911785126, 0.37966665625572205, 0.3813333213329315, 0.3853333294391632, 0.3863333463668823, 0.3876666724681854, 0.38966667652130127, 0.390666663646698, 0.3930000066757202, 0.39533331990242004, 0.39633333683013916, 0.3970000147819519, 0.398333340883255, 0.4009999930858612, 0.40166667103767395, 0.4046666622161865, 0.4059999883174896, 0.40700000524520874, 0.40833333134651184, 0.4086666703224182, 0.41066667437553406, 0.41600000858306885, 0.4169999957084656, 0.4176666736602783, 0.41866666078567505, 0.4206666648387909, 0.42233332991600037, 0.4246666729450226, 0.4266666769981384, 0.4269999861717224, 0.43066665530204773, 0.43166667222976685, 0.4326666593551636, 0.4339999854564667, 0.4359999895095825, 0.43700000643730164, 0.4403333365917206, 0.4413333237171173]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 2, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [36, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 1, 6, 9, 0, 0, 6, 6, 9, 1, 9, 3, 6, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [2, 3, 0, 3, 0, 3, 3, 3, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [22, 86, 33, 38, 8, 22], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.1291428506374359, "mapping_values": [1, 4, 4, 2, 2, 0, 15, 15, 11, 4, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))))))))), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(beta, grad), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3021190992483076, 2.2966502971810403, 2.2982763355402756, 2.3009863457486395, 2.301789068889152, 2.3023486379871057, 2.3027551040641856], "accuracy": [0.09391097724437714, 0.1150442510843277, 0.11728965491056442, 0.11372341960668564, 0.11042134463787079, 0.1014397069811821, 0.10011887550354004], "val_loss": [1.967362608228411, 1.9675494602748327, 1.9709059851510184, 1.9725337028503418, 1.9732884679521834, 1.9735818590436662, 1.9736886024475098], "val_accuracy": [0.09733333438634872, 0.15066666901111603, 0.15000000596046448, 0.11866666376590729, 0.10433333367109299, 0.10433333367109299, 0.10433333367109299]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [9, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [48, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 1, 2, 5, 1, 2, 8, 9, 9, 1, 2, 3, 6, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [0, 3, 0, 3, 0, 3, 3, 3, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [21, 86, 25, 31, 8], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 19, 19, 12, 7, 5, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))), grad)))), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.subtract(grad, tf.math.add(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [96527397.72000591, 1836928226.582486, 8533481647.964073, 23804207632.027473, 50725010871.16629, 93283208731.79448], "accuracy": [0.09219389408826828, 0.1014397069811821, 0.10249637067317963, 0.1002509593963623, 0.09800554811954498, 0.10342095047235489], "val_loss": [365673792.0, 2923331072.0, 9863945947.428572, 23378454820.57143, 45657659099.42857, 78892948333.71428], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 2, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [29, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 3, 0, 2, 6, 5, 2, 8, 9, 8, 9, 5, 6, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 2, 3, 3, 0, 3, 2, 3, 0, 0, 3, 3, 0, 4, 5, 1, 3, 1, 1, 2, 5], [22, 39, 68, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 0, 13, 13, 7, 6, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(grad, tf.math.multiply(tf.math.negative(beta), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, grad))), tf.math.square(tf.math.add(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08175934851169586, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [98, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [1, 3, 0, 2, 6, 5, 2, 8, 9, 8, 9, 5, 6, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 1, 3, 2, 3, 3, 2, 3, 0, 0, 3, 3, 0, 4, 5, 1, 3, 1, 1, 2, 5], [22, 12, 59, 38, 8, 53], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [3.4821190676905176, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.17144367098808289, 0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.110232421330043, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09799999743700027, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 1, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [29, 83, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1], [0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 1, 6, 9, 2, 2, 6, 6, 9, 1, 9, 3, 6, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [0, 3, 0, 2, 0, 3, 3, 3, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [40, 55, 33, 67, 8], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 6, 2, 1, 5, 5, 2, 3, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.multiply(tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), grad)))), tf.math.square(alpha))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(grad, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3028964344473595, 273.94969843268757, 48598.46207568353, 6782662.622176727, 941601199.3258486, 129234006564.58592], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.03182281766619, 2328.912109375, 339123.0, 46999484.571428575, 6513834422.857142, 903244059209.1428], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [1, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [2, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [1, 3, 9, 1, 3, 3, 9, 8, 9, 1, 4, 5, 6, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 2, 3, 3, 0, 2, 3, 3, 1, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2, 5], [22, 86, 59, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 11, 11, 7, 4, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.multiply(grad, tf.math.add(beta, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), grad))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07449477910995483, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [68, 83, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 1, 0, 2, 1, 5, 0, 8, 5, 1, 1, 4, 0, 1, 3, 1, 1, 2, 0, 1, 5, 6, 0, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 0, 3, 0, 3, 3, 3, 2, 3, 3, 2, 4, 3, 5, 2, 3, 1, 1, 2], [22, 86, 33, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [2, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [1, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 5, 2, 2, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.square(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302925875882557, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [39, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [5, 1, 6, 9, 2, 2, 6, 6, 9, 1, 9, 3, 6, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [0, 3, 0, 3, 0, 3, 3, 3, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [22, 31, 33, 38, 8, 35], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 16, 16, 11, 5, 6, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), grad)), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.math.subtract(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [58.57480428411252, 719.1209314356643, 3006.2608501498316, 8103.056157567734, 17048.326006771316, 31124.223313569048], "accuracy": [0.09602430462837219, 0.10447761416435242, 0.09972262382507324, 0.10011887550354004, 0.09774138033390045, 0.10381719470024109], "val_loss": [165.66288539341517, 1067.9263392857142, 3444.11328125, 8079.490513392857, 15751.767299107143, 27220.91015625], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [2, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [2, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [1, 3, 8, 1, 3, 3, 2, 8, 9, 1, 9, 5, 6, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 2, 3, 3, 0, 2, 3, 3, 1, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2, 5], [22, 12, 59, 38, 8, 53], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 15, 15, 9, 6, 2, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.multiply(tf.math.add(grad, tf.math.sqrt(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)))))))))), tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [2.303880659722381, 2.3020921276859903, 2.3059444099353716, 2.3163237612024825, 2.3453932962617885, 2.475881184191358, 2235708347987.5024, 2.4440806220000084, 2.7287670318334962, 3.1504082449864024, 3.902181200300304, 5.033840037670748], "accuracy": [0.0874389111995697, 0.09589222073554993, 0.09906221181154251, 0.09298639744520187, 0.09549596905708313, 0.10394927859306335, 0.09589222073554993, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9710019656590052, 1.9710815293448312, 1.9742818559919084, 1.9838987759181432, 2.020568302699498, 2.2673183168683733, 2.0248888560703824, 2.2038216590881348, 2.4983770506722585, 2.9934703281947543, 3.842968532017299, 4.96053763798305], "val_accuracy": [0.043666668236255646, 0.03233333304524422, 0.04899999871850014, 0.07800000160932541, 0.10133333504199982, 0.09133332967758179, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [91, 83, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 1, 6, 9, 9, 2, 6, 6, 8, 3, 9, 3, 6, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 2, 3, 2, 0, 3, 2, 3, 0, 0, 3, 3, 0, 4, 5, 1, 3, 1, 1, 2, 5], [22, 86, 68, 38, 8], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.08657142519950867, "mapping_values": [1, 4, 4, 2, 2, 1, 14, 14, 9, 5, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, beta))), tf.math.divide_no_nan(tf.math.sqrt(grad), beta))))), tf.math.add(beta, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [3.478736142976141, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.17183992266654968, 0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.109532901218959, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10433333367109299, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 2, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [29, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 5, 6, 9, 1, 2, 8, 5, 9, 8, 9, 3, 6, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [2, 2, 3, 2, 1, 3, 2, 3, 0, 0, 3, 3, 0, 4, 5, 1, 3, 1, 1, 2, 5], [22, 31, 33, 38, 8], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.06885714083909988, "mapping_values": [1, 4, 4, 2, 2, 0, 12, 12, 9, 3, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), beta)))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.sqrt(tf.math.square(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))))), grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3030823885945755, 2.3006453551258534, 2.300674354804899, 2.301229519693528, 2.2991743183501283, 2.2990086501568316, 2.301545821601657, 2.2995453641682633, 2.299982966653675, 2.299689880908205, 2.299102618882937, 2.3006753669265647, 2.299431730743255, 2.299780735360507, 2.299329102204665, 2.300226991675108, 2.29977672472606], "accuracy": [0.08955223858356476, 0.09721305221319199, 0.0936468094587326, 0.09734513610601425, 0.09826971590518951, 0.10381719470024109, 0.09615638852119446, 0.10117553919553757, 0.10091137140989304, 0.09853387624025345, 0.09866596013307571, 0.09721305221319199, 0.1010434553027153, 0.09998679161071777, 0.10659094154834747, 0.09853387624025345, 0.10011887550354004], "val_loss": [1.9700929777962821, 1.969677448272705, 1.9694681848798479, 1.9693826947893416, 1.9694113731384277, 1.9695206369672502, 1.969424043382917, 1.9693553788321358, 1.969306128365653, 1.9692212513514928, 1.9693036760602678, 1.9693659373692103, 1.96960483278547, 1.9698254721505302, 1.970118863242013, 1.9703715869358607, 1.9706106185913086], "val_accuracy": [0.04899999871850014, 0.054666668176651, 0.0573333315551281, 0.06266666948795319, 0.0689999982714653, 0.0689999982714653, 0.07533333450555801, 0.07566666603088379, 0.0793333351612091, 0.08266666531562805, 0.08533333241939545, 0.08566666394472122, 0.08166666328907013, 0.07966666668653488, 0.07966666668653488, 0.0806666687130928, 0.08233333379030228]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [1, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [39, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 2, 6, 9, 4, 2, 8, 5, 9, 1, 9, 3, 6, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 0, 3, 0, 3, 3, 3, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2], [22, 86, 33, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 4, 4, 2, 2, 1, 19, 19, 13, 6, 5, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.square(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))))), grad))), tf.math.subtract(tf.math.add(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.303603950540041, 2.301866548912573, 2.302398439348649, 2.3032589833875923, 2.301324994509577, 2.3007684281127108], "accuracy": [0.08809932321310043, 0.09642054885625839, 0.08889182657003403, 0.09034473448991776, 0.09113723784685135, 0.0952318087220192], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [5, 0, 8, 3, 9, 5, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [11, 83, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 1, 2, 5, 3, 2, 8, 0, 6, 1, 2, 3, 6, 1, 3, 1, 6, 2, 7, 1, 5, 6, 2, 8, 2, 3, 9, 6, 0, 0, 3, 0, 2, 9], [3, 3, 3, 3, 0, 3, 3, 3, 0, 3, 3, 2, 4, 4, 5, 2, 3, 1, 1, 2, 5, 0, 5], [21, 86, 25, 38, 8], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [5, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.029428571462631226, "mapping_values": [1, 3, 3, 2, 1, 0, 54, 54, 31, 23, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.negative(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.add(beta, grad), tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, grad)), tf.math.add(beta, grad))), tf.math.multiply(tf.math.add(beta, tf.math.subtract(grad, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))))))), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(tf.math.add(beta, grad), grad)), tf.math.add(beta, beta))))), tf.math.add(beta, grad))), tf.math.add(beta, alpha))))))))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))))), beta), tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(grad)), tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.304156277268208, 2.303683263467303, 2.3059179196819386, 2.309002137817113, 2.310010659932429, 2.3115130664020276], "accuracy": [0.08585391938686371, 0.09100515395402908, 0.08611807972192764, 0.08241976052522659, 0.08347642421722412, 0.07753269374370575], "val_loss": [1.9720794132777624, 1.9732661928449358, 1.9748107365199499, 1.9766925403050013, 1.9789660998753138, 1.9810568945748466], "val_accuracy": [0.03333333507180214, 0.027000000700354576, 0.01966666616499424, 0.020999999716877937, 0.024000000208616257, 0.03133333474397659]}}]