[{"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 6, 2, 6, 5, 3, 3, 3, 3, 2, 9, 1, 3, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 1, 1, 1, 3, 3, 0, 2, 3, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [21, 2, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7871428728103638, "mapping_values": [1, 4, 4, 2, 2, 1, 58, 58, 36, 22, 6, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 55, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(grad, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(grad, tf.math.multiply(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.square(tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(tf.math.add(beta, alpha), alpha)))))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad)))))), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), beta))))), tf.math.divide_no_nan(grad, tf.math.add(beta, alpha)))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, grad), tf.math.multiply(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, alpha)))))), tf.math.add(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha)))))), beta)), tf.math.add(beta, tf.math.sqrt(grad)))))), tf.math.sqrt(tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2573328018818297, 1.8304369884978953, 1.2741039392498144, 0.9463401697000351, 0.8271098386625714, 0.7744706296854645, 0.715017632502197, 0.6911988346143059, 0.6480315349688068, 0.6213962247012361, 0.5907794810194837, 0.5705418971000236, 0.5476160615332264, 0.5270255195261575, 0.515931923659313, 0.4935019383687448, 0.47244801762286365, 0.47174203945755594, 0.4468338764921518, 0.4428913857462604, 0.41887023989487604, 0.4140239681597352, 0.4109922026551836, 0.39647634096936685, 0.3790597318579508, 0.363887468479124, 0.363650898584805, 0.3535828862475555, 0.3501475891377617], "accuracy": [0.19772817194461823, 0.43204331398010254, 0.5665037631988525, 0.6519614458084106, 0.6956809163093567, 0.7087571024894714, 0.7181349992752075, 0.7407211661338806, 0.7547219395637512, 0.7611940503120422, 0.7803460359573364, 0.7906485199928284, 0.7985734939575195, 0.8037247657775879, 0.8104609847068787, 0.8148196935653687, 0.8214238286018372, 0.8277638554573059, 0.8352925777435303, 0.8379341959953308, 0.8457271456718445, 0.8438779711723328, 0.8462554216384888, 0.8527275323867798, 0.8618412613868713, 0.8632941246032715, 0.8679170608520508, 0.8729361891746521, 0.8687095642089844], "val_loss": [1.8094319616045271, 0.9697525501251221, 0.7099536657333374, 0.6812210423605782, 0.5917534828186035, 0.576190744127546, 0.5522594622203282, 0.5157375505992344, 0.5003254583903721, 0.4815071480614798, 0.4630911520549229, 0.44413866315569195, 0.43316065413611277, 0.4232536384037563, 0.4109974333218166, 0.39996143749782015, 0.3945029718535287, 0.38490537234715055, 0.378324670451028, 0.36662857021604267, 0.3651718326977321, 0.3614063262939453, 0.35071531363895964, 0.34246728249958586, 0.3438183494976589, 0.3436859590666635, 0.3354500276701791, 0.33326360157557894, 0.3302808574267796], "val_accuracy": [0.44733333587646484, 0.6433333158493042, 0.7009999752044678, 0.6946666836738586, 0.7303333282470703, 0.7336666584014893, 0.749666690826416, 0.7636666893959045, 0.777999997138977, 0.7796666622161865, 0.7996666431427002, 0.8006666898727417, 0.8050000071525574, 0.8203333616256714, 0.8246666789054871, 0.82833331823349, 0.8330000042915344, 0.8363333344459534, 0.8420000076293945, 0.8460000157356262, 0.8503333330154419, 0.8463333249092102, 0.8529999852180481, 0.8633333444595337, 0.8576666712760925, 0.8610000014305115, 0.8633333444595337, 0.862666666507721, 0.862666666507721]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 6, 2, 6, 5, 8, 8, 3, 2, 2, 9, 9, 2, 2, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 3, 1, 1, 1, 3, 3, 0, 2, 3, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [68, 86, 89, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7814285755157471, "mapping_values": [1, 4, 4, 2, 2, 1, 21, 21, 13, 8, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(alpha, alpha)))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.multiply(tf.math.add(beta, tf.math.add(alpha, grad)), tf.math.add(grad, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))))))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2573327883721785, 1.8304382193562472, 1.2740833615630043, 0.946390583947854, 0.8273770753670646, 0.7744566366468139, 0.7154578287934331, 0.6917228269429019, 0.6488015364977063, 0.6214182098795787, 0.5911870823324065, 0.5699017824214668, 0.5463535678448096, 0.5270455355940872, 0.5151431417074721, 0.49471562307240896, 0.47225583529018883, 0.4710834138995825, 0.446138077301986, 0.443352578566799, 0.41832617095684754, 0.41275260376341355, 0.41022459836117015, 0.3962824697216441, 0.3778769061660187, 0.3628028768471849, 0.3631818427102378, 0.3514664692570741, 0.3472537470846412, 0.3378675186386859, 0.31951768341837244, 0.3235929667981168, 0.30569742765046853, 0.30908925067857274, 0.29572987853654104, 0.28723826213220577, 0.2840623103821235, 0.2761880414652204, 0.2688471465267604, 0.261113877600966], "accuracy": [0.19772817194461823, 0.43204331398010254, 0.5659754276275635, 0.6513010263442993, 0.6956809163093567, 0.7073041796684265, 0.7202483415603638, 0.7396644949913025, 0.7530049085617065, 0.761590301990509, 0.7819310426712036, 0.7907806038856506, 0.7992339134216309, 0.802271842956543, 0.81112140417099, 0.8156121969223022, 0.824329674243927, 0.829216718673706, 0.8350284099578857, 0.8366134166717529, 0.8470479249954224, 0.8457271456718445, 0.8459912538528442, 0.8533879518508911, 0.8615770936012268, 0.8671245574951172, 0.8681812286376953, 0.8712190985679626, 0.8709549307823181, 0.8755778670310974, 0.8802007436752319, 0.8786157965660095, 0.8844274282455444, 0.8835028409957886, 0.8918240666389465, 0.8918240666389465, 0.8927486538887024, 0.8969752788543701, 0.8967111110687256, 0.9010698795318604], "val_loss": [1.8094319616045271, 0.9697621209280831, 0.7098650762013027, 0.6815840687070575, 0.5910818406513759, 0.5771497317722866, 0.5527886322566441, 0.5163418395178658, 0.5000838211604527, 0.48249452454703196, 0.46418799672807964, 0.44422428948538645, 0.4328003781182425, 0.4224871737616403, 0.41095885208674837, 0.4002620577812195, 0.3953344651630947, 0.3843472685132708, 0.3796886035374233, 0.36800628900527954, 0.36555129289627075, 0.3618215833391462, 0.3532002993992397, 0.3440233724457877, 0.345011830329895, 0.3468764679772513, 0.33732976232256207, 0.3345103859901428, 0.3301945754459926, 0.3290470668247768, 0.3312523535319737, 0.3290512476648603, 0.32249224185943604, 0.31796744891575407, 0.3160542164530073, 0.31823354959487915, 0.3218251041003636, 0.3151959606579372, 0.31718394586018156, 0.31481086356299265], "val_accuracy": [0.44733333587646484, 0.6433333158493042, 0.7006666660308838, 0.6943333148956299, 0.7316666841506958, 0.734333336353302, 0.7493333220481873, 0.7616666555404663, 0.7770000100135803, 0.777999997138977, 0.8006666898727417, 0.8003333210945129, 0.8080000281333923, 0.8196666836738586, 0.8240000009536743, 0.8309999704360962, 0.8326666951179504, 0.8363333344459534, 0.840666651725769, 0.8446666598320007, 0.8506666421890259, 0.8483333587646484, 0.8519999980926514, 0.8606666922569275, 0.8579999804496765, 0.8613333106040955, 0.8613333106040955, 0.8643333315849304, 0.8613333106040955, 0.8676666617393494, 0.8659999966621399, 0.8690000176429749, 0.8700000047683716, 0.8703333139419556, 0.874666690826416, 0.8723333477973938, 0.8740000128746033, 0.8733333349227905, 0.8736666440963745, 0.8726666569709778]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 5, 3, 0, 6, 6, 3, 3, 3, 3, 0, 2, 9, 0, 3, 5, 5, 3, 7, 3, 2, 6, 2, 4, 2, 2, 9, 5, 0, 2, 3, 6, 2, 9, 8, 8, 2, 7, 7, 9, 9], [3, 2, 3, 1, 1, 2, 3, 1, 3, 2, 1, 0, 3, 1, 3, 2, 0, 1, 1, 2, 4, 2, 0, 3, 1, 4, 2], [21, 43, 78, 71, 37, 47, 96, 81], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.7808571457862854, "mapping_values": [1, 4, 4, 2, 2, 1, 2, 2, 1, 1, 0, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.sqrt(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2865750093060777, 2.244944945711895, 2.1876019324608893, 2.097986454410072, 1.9669270953167195, 1.7899457147927285, 1.6042622467782188, 1.4374845876764266, 1.3222265458456546, 1.221233939308894, 1.1568415105429466, 1.09916819052028, 1.0594836866315551, 1.022551613398169, 0.9821934976975806, 0.9613071457506124, 0.9284933602506018, 0.9248688565883276, 0.8914580300515276, 0.8774008111017823, 0.8594824959652031, 0.8394355566872267, 0.8448244251547992, 0.8314485433724862, 0.8271261946778051, 0.8054171570020345, 0.8083652100149257, 0.7905044349791461, 0.7901234649207377, 0.7790100493089098, 0.7653058884071715, 0.7538137757751401, 0.7584760203778452, 0.7450091410479951, 0.7443573311051955, 0.7406468628467177, 0.730756944653349, 0.7176572289197295, 0.7225294804151079, 0.7181725768821902, 0.7115575052869634, 0.7077647495609879, 0.7165090862109031, 0.6932426585875262, 0.6973030506785142, 0.691721943517198, 0.6869021390234207, 0.6894165492249895, 0.6829454585341037, 0.6886679726647758, 0.6717972776688573, 0.6690546639796026, 0.6699362155342807, 0.6699588074109117, 0.6634811950460511, 0.6508209929017815], "accuracy": [0.13247919082641602, 0.22956016659736633, 0.3163386583328247, 0.3770968019962311, 0.4138158857822418, 0.4515916109085083, 0.49425438046455383, 0.5271430611610413, 0.553031325340271, 0.5764099955558777, 0.5962224006652832, 0.6116761565208435, 0.6260731816291809, 0.6345264911651611, 0.6514331102371216, 0.6532822847366333, 0.672170102596283, 0.6684718132019043, 0.6828688383102417, 0.6876237988471985, 0.6968696117401123, 0.6906617283821106, 0.6956809163093567, 0.700700044631958, 0.7013604640960693, 0.7087571024894714, 0.7028133869171143, 0.7119271159172058, 0.7141724824905396, 0.7199841737747192, 0.7210407853126526, 0.7202483415603638, 0.7288337349891663, 0.7296261787414551, 0.7238145470619202, 0.7283053994178772, 0.7364945411682129, 0.7364945411682129, 0.7368907928466797, 0.7292299270629883, 0.7445515990257263, 0.7423061728477478, 0.737947404384613, 0.7460044622421265, 0.7436270117759705, 0.7498348951339722, 0.7483819723129272, 0.7475894689559937, 0.7470611333847046, 0.748778223991394, 0.7532690763473511, 0.7585523724555969, 0.7490423917770386, 0.7532690763473511, 0.7576277852058411, 0.7618544697761536], "val_loss": [1.9336387770516532, 1.88824919291905, 1.8190993581499373, 1.7097717693873815, 1.5521093096051897, 1.3609294891357422, 1.1771141120365687, 1.0299475193023682, 0.926487752369472, 0.8520564011165074, 0.7990132059369769, 0.7591333218983242, 0.7318226950509208, 0.7034356253487724, 0.6832934788295201, 0.66436539377485, 0.6516238451004028, 0.6379049164908273, 0.6252158199037824, 0.6157808814729963, 0.6051598957606724, 0.5991109439304897, 0.5934884377888271, 0.5849246978759766, 0.5804883582251412, 0.571872421673366, 0.5747059413364956, 0.566130416733878, 0.557952914919172, 0.55302780015128, 0.5496621813092913, 0.5424616507121495, 0.5413716009684971, 0.5380861929484776, 0.5335174117769513, 0.529434357370649, 0.528759377343314, 0.5228284597396851, 0.519085134778704, 0.5162021262305123, 0.5134747879845756, 0.5168780088424683, 0.5096394334520612, 0.5085640634809222, 0.5041977337428502, 0.5077214751924787, 0.500322699546814, 0.4985532930919102, 0.4937976598739624, 0.49312654563358854, 0.4918247291019985, 0.48779518263680594, 0.486276490347726, 0.4877499171665737, 0.48304344926561626, 0.48087687151772635], "val_accuracy": [0.3266666531562805, 0.4156666696071625, 0.4723333418369293, 0.5353333353996277, 0.5630000233650208, 0.5809999704360962, 0.6230000257492065, 0.6579999923706055, 0.6733333468437195, 0.6933333277702332, 0.7003333568572998, 0.7036666870117188, 0.7113333344459534, 0.7206666469573975, 0.7300000190734863, 0.7226666808128357, 0.7360000014305115, 0.7360000014305115, 0.7363333106040955, 0.7383333444595337, 0.7459999918937683, 0.746999979019165, 0.7459999918937683, 0.7483333349227905, 0.7563333511352539, 0.7559999823570251, 0.7416666746139526, 0.750333309173584, 0.7646666765213013, 0.7630000114440918, 0.7673333287239075, 0.765333354473114, 0.7749999761581421, 0.762666642665863, 0.7680000066757202, 0.7726666927337646, 0.7723333239555359, 0.7773333191871643, 0.7749999761581421, 0.7793333530426025, 0.7770000100135803, 0.7786666750907898, 0.7770000100135803, 0.781000018119812, 0.7789999842643738, 0.7823333144187927, 0.777999997138977, 0.7846666574478149, 0.7820000052452087, 0.7850000262260437, 0.7923333048820496, 0.7870000004768372, 0.7923333048820496, 0.7900000214576721, 0.7879999876022339, 0.7916666865348816]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0], [1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 2, 2, 6, 5, 3, 3, 3, 3, 2, 9, 1, 3, 9, 5, 3, 7, 8, 2, 6, 2, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 1, 1, 1, 3, 3, 0, 2, 3, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [21, 2, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.6380000114440918, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2581860934738565, 1.830045228258903, 1.341385738126291, 0.9825697726167945, 0.8878667301048991, 0.8344677754869362, 0.7719881321539606, 0.7571457609162275, 0.7029079077360637, 0.6734477304795068, 0.6474470573251966, 0.6162825088065771, 0.6114430294974038, 0.597887764218272, 0.5737247941374637, 0.5554280321887141, 0.5466121180245527, 0.5313523493627469, 0.5176816587718314, 0.5049087098324697, 0.49136385838463636, 0.4770210189369644, 0.46920612137142254, 0.4618212018959621, 0.45865062913638316, 0.4455544121702192, 0.43705621022416646, 0.43174216666509446, 0.4216161301075869, 0.41488437490960184, 0.4050803116803565, 0.3985943381363737, 0.39753993323387454, 0.38611081084712556, 0.3837498339167864, 0.38596873103257545, 0.3681195545284708], "accuracy": [0.1978602558374405, 0.4241183400154114, 0.5526350736618042, 0.6477347612380981, 0.6767930388450623, 0.6910579800605774, 0.700700044631958, 0.7080966830253601, 0.737022876739502, 0.7397965788841248, 0.7535332441329956, 0.7623828053474426, 0.7584202885627747, 0.7644960880279541, 0.7779685854911804, 0.789988100528717, 0.7881389260292053, 0.7923656105995178, 0.8017435073852539, 0.8076872229576111, 0.8148196935653687, 0.8165367841720581, 0.8264430165290833, 0.8230088353157043, 0.8260467648506165, 0.8252542614936829, 0.834632158279419, 0.8310658931732178, 0.8383304476737976, 0.8388587832450867, 0.8401796221733093, 0.8412362933158875, 0.8527275323867798, 0.8576145768165588, 0.8507462739944458, 0.8507462739944458, 0.8536521196365356], "val_loss": [1.8066646030970983, 0.9779164450509208, 0.7488360404968262, 0.7260536466326032, 0.5966771670750209, 0.5779774529593331, 0.5862740789140973, 0.53185316494533, 0.5022609915052142, 0.487105199268886, 0.4708954947335379, 0.45485990388052805, 0.4478985752378191, 0.4466444764818464, 0.43286547490528654, 0.42245221989495413, 0.4145554644720895, 0.4181105749947684, 0.4016543541635786, 0.39983722993305754, 0.39116545234407696, 0.38966857535498484, 0.38833177941186087, 0.3825440321649824, 0.38256867442812237, 0.38091284888131277, 0.3688051019396101, 0.36042351382119314, 0.37172439268657137, 0.3651519502912249, 0.36384024790355135, 0.37438454798289705, 0.40212176527295795, 0.37330734729766846, 0.3777373092515128, 0.370350786617824, 0.39089326347623554], "val_accuracy": [0.460999995470047, 0.6333333253860474, 0.70333331823349, 0.734333336353302, 0.7363333106040955, 0.7293333411216736, 0.7393333315849304, 0.7673333287239075, 0.7646666765213013, 0.7786666750907898, 0.7829999923706055, 0.7950000166893005, 0.8016666769981384, 0.8016666769981384, 0.8066666722297668, 0.8183333277702332, 0.815666675567627, 0.8236666917800903, 0.8296666741371155, 0.8299999833106995, 0.8386666774749756, 0.8333333134651184, 0.8433333039283752, 0.8386666774749756, 0.846666693687439, 0.8453333377838135, 0.8500000238418579, 0.8546666502952576, 0.8529999852180481, 0.8566666841506958, 0.8510000109672546, 0.8613333106040955, 0.8573333621025085, 0.8586666584014893, 0.8523333072662354, 0.8576666712760925, 0.8606666922569275]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [6, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 6, 1, 8, 4, 3, 8, 3, 8, 2, 2, 1, 3, 2, 0, 9, 7, 1, 2, 2, 2, 8, 2, 2, 9, 6, 9, 1, 3, 0, 2, 9], [1, 3, 2, 3, 1, 1, 0, 1, 0, 2, 3, 1, 0, 0, 0, 2, 3, 1, 1, 2, 4, 5], [15, 2, 78, 38, 8, 47, 96], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.2851428687572479, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(grad), tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.302611918764942, 2.302612202058237, 2.301916224813858, 2.3012189636172526, 2.3016813785455734, 2.3012623516418333, 2.3015600993192082, 2.2992898566359776, 2.2997021419087798, 2.2990614036763617, 2.2992167188790273, 2.2997564398743267, 2.2980926352059914, 2.299507478917547, 2.297864064060544, 2.297610875338674, 2.2968725717897507, 2.297458279764238, 2.296646986875583, 2.2955419024645205, 2.2963475528221244, 2.2949549356046655, 2.2952667734705146, 2.295517534706429, 2.2955738611036147, 2.294876869942581, 2.2949116936669673, 2.2943011382000558, 2.294151652994535, 2.293672480524618, 2.291743917235955, 2.2924274600901544, 2.2922519949433227, 2.2911761388046834, 2.2903806826599427, 2.2908575601581536, 2.291560385284202, 2.2912064179642293, 2.2927687810538324, 2.2883115626911934, 2.2898799853790326, 2.2894728137769436, 2.289371691674699, 2.2874032238675714, 2.2876478004228833, 2.288563861098697, 2.2875880710736336, 2.2879060221354504, 2.2867826877284627, 2.2880384508235467, 2.2864764783171743, 2.285310751946847, 2.2854241354905414, 2.2860375316371977, 2.2861414535438316, 2.2853392553272784, 2.2843955844195922, 2.2843668283866365, 2.2844330405105673, 2.283630903575556, 2.2826049364694847, 2.283116386299199, 2.284210063903843, 2.283153316332538, 2.2832856084755337, 2.2821737892670857, 2.281099862741237, 2.2812270467874316, 2.281078611713249, 2.2804785709119098, 2.2799093630083673, 2.2795346180335514, 2.2788061277505163, 2.279025509467356, 2.279557768253996, 2.279625803928932, 2.27755497037585, 2.278617122437519, 2.27734767135738, 2.2769555312106164, 2.2775635610025446, 2.2768838999844845, 2.2774476680017464, 2.2767586014006573, 2.275421436452406, 2.2763580329004705, 2.2751684673804617, 2.2753516697156164, 2.2741572560887406, 2.2738196719765047, 2.2731559241625767, 2.2733406898383657, 2.274995440080134, 2.2721064128203086, 2.2701705170975166, 2.273301579366192, 2.27338493196263, 2.2711795627826774, 2.2711170222922683, 2.2696417246543814], "accuracy": [0.08928807079792023, 0.09034473448991776, 0.0936468094587326, 0.09853387624025345, 0.09325055778026581, 0.09549596905708313, 0.09470347315073013, 0.10210011899471283, 0.09470347315073013, 0.10091137140989304, 0.09787346422672272, 0.09509972482919693, 0.10447761416435242, 0.10342095047235489, 0.10394927859306335, 0.09813763201236725, 0.10289261490106583, 0.10210011899471283, 0.11227050423622131, 0.10394927859306335, 0.10527011007070541, 0.107647605240345, 0.10896842926740646, 0.10513802617788315, 0.10540219396352768, 0.10962884873151779, 0.10949676483869553, 0.11042134463787079, 0.1138555034995079, 0.10989301651716232, 0.11742173880338669, 0.11649715900421143, 0.11398758739233017, 0.1228371411561966, 0.1158367469906807, 0.1212521493434906, 0.11795007437467575, 0.1212521493434906, 0.1146479994058609, 0.12561088800430298, 0.12851670384407043, 0.1262712925672531, 0.12376172095537186, 0.13089419901371002, 0.1258750557899475, 0.12138422578573227, 0.13168670237064362, 0.12495046854019165, 0.12679962813854218, 0.1216483935713768, 0.13340377807617188, 0.13697001338005066, 0.13168670237064362, 0.12970545887947083, 0.1372341811656952, 0.136045441031456, 0.13789460062980652, 0.13221503794193268, 0.13459251821041107, 0.1352529376745224, 0.136045441031456, 0.14040417969226837, 0.14014001190662384, 0.1368379294872284, 0.14212125539779663, 0.14119666814804077, 0.1434420794248581, 0.14317791163921356, 0.14753665030002594, 0.1460837423801422, 0.1484612375497818, 0.146479994058609, 0.1516312211751938, 0.14991414546966553, 0.15057456493377686, 0.1484612375497818, 0.15519747138023376, 0.1554616242647171, 0.15229164063930511, 0.15889579057693481, 0.15876370668411255, 0.15876370668411255, 0.15678246319293976, 0.15982036292552948, 0.1562541276216507, 0.160084530711174, 0.16536785662174225, 0.1670849323272705, 0.16919825971126556, 0.16721701622009277, 0.16483952105045319, 0.16880200803279877, 0.16536785662174225, 0.16893409192562103, 0.17434948682785034, 0.16853784024715424, 0.17038699984550476, 0.17250032722949982, 0.17091533541679382, 0.17157575488090515], "val_loss": [1.9707051004682268, 1.9704012189592635, 1.9700991766793388, 1.969799518585205, 1.9694980212620325, 1.9692004067557198, 1.9689023835318429, 1.9686034747532435, 1.968303952898298, 1.9680051122392928, 1.967703206198556, 1.9674073628016882, 1.9671104976109095, 1.9668113163539342, 1.9665155410766602, 1.966219084603446, 1.965925625392369, 1.9656313487461634, 1.9653340067182268, 1.9650389807564872, 1.9647410256522042, 1.9644453866141183, 1.9641471590314592, 1.9638545172555106, 1.963564055306571, 1.9632703236171178, 1.9629765238080705, 1.9626832689557756, 1.9623898097446986, 1.9620980535234724, 1.9618021420070104, 1.9615089552743095, 1.9612151554652624, 1.9609206063406808, 1.960627896445138, 1.9603347778320312, 1.9600403649466378, 1.95974942616054, 1.9594545364379883, 1.959160396030971, 1.9588673455374581, 1.9585770198277064, 1.9582808358328683, 1.9579853330339705, 1.9576866286141532, 1.957395008632115, 1.957099097115653, 1.956808226449149, 1.9565179007393974, 1.9562251908438546, 1.9559332983834403, 1.955636773790632, 1.9553437232971191, 1.955052171434675, 1.954758984701974, 1.9544619832720076, 1.9541663442339217, 1.9538722038269043, 1.9535790170942033, 1.9532852854047502, 1.9529886926923479, 1.9526944160461426, 1.9524026598249162, 1.9521053177969796, 1.95181029183524, 1.9515180587768555, 1.9512217385428292, 1.950925418308803, 1.950632163456508, 1.9503382274082728, 1.9500436101640974, 1.9497486523219518, 1.9494514465332031, 1.9491536276681083, 1.9488590785435267, 1.9485633713858468, 1.9482677323477608, 1.9479725020272392, 1.9476755005972726, 1.947373730795724, 1.9470782279968262, 1.9467807497297014, 1.9464809553963798, 1.9461843626839774, 1.945883137839181, 1.9455838203430176, 1.9452825954982214, 1.9449821199689592, 1.9446819169180733, 1.944378103528704, 1.9440768105643136, 1.9437747682843889, 1.9434759957449776, 1.9431688444955009, 1.9428633281162806, 1.9425592422485352, 1.9422591073172433, 1.9419547489711217, 1.9416495731898717, 1.9413467815944128], "val_accuracy": [0.03933333232998848, 0.041999999433755875, 0.04466666653752327, 0.04633333161473274, 0.047333333641290665, 0.050333332270383835, 0.052000001072883606, 0.0533333346247673, 0.05400000140070915, 0.0560000017285347, 0.05833333358168602, 0.05999999865889549, 0.061666667461395264, 0.06366666406393051, 0.06599999964237213, 0.06833333522081375, 0.070333331823349, 0.07133333384990692, 0.07333333045244217, 0.07666666805744171, 0.07833333313465118, 0.0820000022649765, 0.08433333039283752, 0.08766666799783707, 0.09000000357627869, 0.09300000220537186, 0.09433333575725555, 0.0963333323597908, 0.09700000286102295, 0.10100000351667404, 0.10266666859388351, 0.10300000011920929, 0.10533333569765091, 0.10999999940395355, 0.11233333498239517, 0.11500000208616257, 0.11633333563804626, 0.11866666376590729, 0.12200000137090683, 0.12399999797344208, 0.1289999932050705, 0.1316666603088379, 0.13366666436195374, 0.13833333551883698, 0.1393333375453949, 0.1420000046491623, 0.14633333683013916, 0.15000000596046448, 0.15566666424274445, 0.15833333134651184, 0.16200000047683716, 0.16466666758060455, 0.1679999977350235, 0.17100000381469727, 0.17466667294502258, 0.1770000010728836, 0.18066667020320892, 0.18400000035762787, 0.18666666746139526, 0.19033333659172058, 0.19366666674613953, 0.1966666728258133, 0.19966666400432587, 0.20266667008399963, 0.20499999821186066, 0.20866666734218597, 0.21066667139530182, 0.2136666625738144, 0.2160000056028366, 0.21766667068004608, 0.21933333575725555, 0.22100000083446503, 0.2240000069141388, 0.22699999809265137, 0.23066666722297668, 0.23399999737739563, 0.23466666042804718, 0.23800000548362732, 0.24033333361148834, 0.24300000071525574, 0.2460000067949295, 0.24766667187213898, 0.24833333492279053, 0.25066667795181274, 0.2529999911785126, 0.2549999952316284, 0.257666677236557, 0.2603333294391632, 0.2626666724681854, 0.2669999897480011, 0.27000001072883606, 0.2723333239555359, 0.2746666669845581, 0.27533334493637085, 0.2786666750907898, 0.28066667914390564, 0.2840000092983246, 0.28600001335144043, 0.28700000047683716, 0.28866666555404663]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [93, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 5, 3, 6, 5, 5, 2, 3, 5, 3, 3, 8, 2, 1, 0, 2, 3, 3, 9, 5, 2, 6, 2, 4, 2, 2, 8, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 3, 1, 1, 1, 3, 3, 0, 2, 3, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [21, 18, 78, 71, 37, 47, 96, 81], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.17228572070598602, "mapping_values": [1, 4, 4, 2, 2, 1, 11, 11, 7, 4, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.square(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, grad)), tf.math.square(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.add(grad, alpha))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [3.7489522899760703, 2.3061795054866403, 2.301494225912783, 2.292719648813669, 2.3065617457042045, 2.302962076709633, 2.303110912349702, 2.2987599760833244, 2.429370481733948, 2.3073267761616423, 2.303948523613755, 2.303234682453464, 2.303327000073438], "accuracy": [0.2565050721168518, 0.09998679161071777, 0.10315678268671036, 0.1258750557899475, 0.09708096832036972, 0.1010434553027153, 0.10051512718200684, 0.13591335713863373, 0.18623696267604828, 0.09721305221319199, 0.1002509593963623, 0.09430722147226334, 0.09959053993225098], "val_loss": [1.9794723646981376, 1.9740535872323173, 1.9736862863813127, 1.9790359905787878, 1.9745465006147112, 1.9732272284371513, 1.973022392817906, 1.937724999019078, 1.980060304914202, 1.9746651649475098, 1.973855904170445, 1.97372225352696, 1.9737992967878069], "val_accuracy": [0.09799999743700027, 0.09833333641290665, 0.09966666996479034, 0.09966666996479034, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.15000000596046448, 0.10433333367109299, 0.10433333367109299, 0.10433333367109299, 0.10166666656732559, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [76, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 5, 3, 6, 2, 5, 8, 3, 5, 3, 3, 8, 2, 1, 0, 2, 3, 3, 9, 5, 2, 6, 2, 4, 2, 2, 8, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 1, 3, 1, 3, 3, 1, 2, 3, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4], [68, 86, 89, 38, 8], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 11, 11, 7, 4, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.square(tf.math.sqrt(tf.math.add(beta, grad))), grad)))), tf.math.add(beta, alpha)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [3.0192304723188155, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1822744756937027, 0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1265.902866908482, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 5, 3, 6, 2, 5, 2, 3, 5, 3, 3, 8, 9, 1, 0, 9, 3, 3, 7, 8, 2, 6, 2, 4, 2, 2, 8, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [1, 3, 2, 3, 1, 1, 0, 1, 0, 2, 3, 1, 0, 0, 0, 2, 3, 1, 1, 2, 4, 5], [21, 2, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [2.310914988719934, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08334434032440186, 0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.0260797228131975, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09266666322946548, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 6, 2, 6, 5, 3, 3, 3, 3, 2, 9, 1, 3, 9, 5, 3, 7, 8, 2, 6, 2, 4, 9, 2, 9, 6, 0, 8, 3, 4, 2, 9, 8, 8, 2], [0, 2, 3, 1, 3, 2, 3, 3, 3, 3, 3, 3, 3, 1, 3, 2, 0, 1, 1, 2, 3, 3, 0, 3, 1, 0, 2], [21, 70, 78, 38, 1, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 8, 5, 2, 6, 6, 3, 3, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))))))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), beta), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.15797120332717896, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 5, 3, 2, 2, 5, 8, 3, 5, 3, 3, 8, 2, 1, 0, 2, 3, 3, 9, 5, 2, 6, 2, 4, 2, 2, 8, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 3, 1, 1, 1, 3, 3, 0, 2, 3, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [21, 2, 78, 71, 37, 47, 96, 81], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 11, 11, 7, 4, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.sqrt(grad)))), alpha))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 2, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 1, 6, 0, 6, 5, 3, 1, 3, 3, 2, 4, 6, 1, 2, 3, 3, 2, 8, 4, 6, 2, 4, 2, 3, 9, 6, 0, 8, 3, 2, 5, 0, 4, 8, 2, 5, 7, 0, 9], [1, 3, 3, 3, 1, 1, 3, 1, 0, 2, 3, 1, 0, 0, 0, 2, 3, 1, 1, 2, 4, 5, 4, 4], [21, 8, 78, 38, 8, 47, 96, 65], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), grad), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.30407108688682, 2.3206331556373345, 2.849937798328264e+18, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08757099509239197, 0.08030643314123154, 0.08625016361474991, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.97586270741054, 1.9996308599199568, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.01600000075995922, 0.06599999964237213, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 1, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 1, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 5, 3, 5, 2, 5, 2, 3, 2, 3, 3, 8, 9, 1, 0, 9, 3, 3, 7, 8, 2, 6, 2, 4, 2, 2, 8, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [1, 3, 2, 0, 1, 1, 0, 1, 0, 2, 3, 1, 0, 0, 0, 2, 3, 1, 1, 2, 4, 5], [21, 2, 78, 71, 37, 47, 96, 81], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 30, 30, 20, 10, 5, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.square(tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, alpha), tf.math.square(tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, tf.math.sqrt(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))))), tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.negative(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(alpha, tf.math.multiply(tf.math.add(beta, alpha), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.math.add(tf.math.sqrt(alpha), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))))))), beta))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3033601371698125, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [20, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 5, 3, 6, 2, 5, 2, 3, 5, 3, 3, 8, 9, 1, 0, 9, 3, 3, 7, 8, 2, 6, 2, 4, 2, 2, 8, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [1, 3, 2, 3, 1, 1, 0, 1, 0, 2, 3, 1, 0, 0, 0, 2, 3, 1, 1, 2, 4, 5], [21, 2, 78, 71, 37, 47, 96, 81], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07885351777076721, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 1, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 2, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 2, 3, 6, 2, 6, 0, 3, 3, 2, 0, 2, 9, 0, 3, 5, 5, 3, 7, 3, 2, 4, 8, 4, 2, 1, 9, 5, 0, 2, 3, 6, 2, 9, 8, 8, 2, 7, 7, 9, 9], [3, 2, 3, 1, 1, 2, 3, 1, 0, 1, 3, 0, 3, 1, 3, 2, 0, 1, 1, 2, 4, 2, 0, 3, 1, 4, 2], [21, 2, 78, 71, 37, 47, 96, 81], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 5, 3, 1, 35, 35, 21, 14, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.add(beta, grad), beta), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(grad)), alpha), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, alpha), tf.math.negative(beta)), tf.math.add(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.multiply(tf.math.square(grad), tf.math.add(beta, alpha)))))), tf.math.square(tf.math.multiply(tf.math.add(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), alpha), grad))))), tf.math.multiply(tf.math.add(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), alpha))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07290978729724884, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 2, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 5, 3, 6, 2, 5, 8, 3, 5, 3, 3, 8, 2, 1, 0, 2, 3, 3, 9, 5, 2, 6, 2, 4, 2, 2, 8, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 3, 1, 1, 1, 3, 3, 0, 2, 3, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [21, 18, 78, 71, 37, 47, 96, 81], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.0657142847776413, "mapping_values": [1, 4, 4, 2, 2, 0, 11, 11, 7, 4, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.square(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.square(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.sqrt(grad)))), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.302376581645991, 2.301910539234571, 2.3011176263053166, 2.3005388459792746, 2.3008414803085357, 2.3006991776083563, 2.301089495180337, 2.2994938716125084, 2.2998243918775993, 2.299257391432194, 2.2996336390329404, 2.300204429833046, 2.299640297968437, 2.3005053189924727, 2.299752545882651, 2.300205312054218], "accuracy": [0.09113723784685135, 0.09166556596755981, 0.09668471664190292, 0.1006472036242485, 0.0936468094587326, 0.10011887550354004, 0.09800554811954498, 0.09959053993225098, 0.09391097724437714, 0.10038304328918457, 0.09840179979801178, 0.09589222073554993, 0.10077928751707077, 0.1006472036242485, 0.10315678268671036, 0.09945846349000931], "val_loss": [1.9703662054879325, 1.9698703629629952, 1.9696999277387346, 1.9695930480957031, 1.969541004725865, 1.9695462499346053, 1.969477312905448, 1.9694664818899972, 1.9693795612880163, 1.9693927083696638, 1.969430378505162, 1.9695375306265694, 1.969845908028739, 1.9700172288077218, 1.970282758985247, 1.97053861618042], "val_accuracy": [0.04533333331346512, 0.05366666615009308, 0.057999998331069946, 0.06133333221077919, 0.06499999761581421, 0.06800000369548798, 0.07100000232458115, 0.07500000298023224, 0.07699999958276749, 0.07999999821186066, 0.0806666687130928, 0.0793333351612091, 0.07566666603088379, 0.07866666465997696, 0.0793333351612091, 0.07900000363588333]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [1, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [1, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [76, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [8, 2, 3, 6, 2, 6, 5, 3, 3, 3, 2, 2, 9, 1, 3, 9, 5, 4, 8, 8, 2, 6, 4, 4, 2, 2, 9, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2, 1, 4, 6, 3, 7], [2, 3, 3, 1, 1, 1, 3, 3, 2, 2, 3, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2, 1, 4, 4, 3, 2], [21, 2, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [2, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 13, 13, 8, 5, 2, 69, 69, 42, 27, 5, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 53, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))))))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, beta), tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))), tf.math.subtract(grad, tf.math.multiply(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.square(tf.math.pow(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.add(beta, alpha)))))))), alpha), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(grad, tf.math.pow(tf.math.pow(beta, tf.math.add(beta, beta)), tf.math.add(beta, grad)))))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, alpha), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), grad)), tf.math.sqrt(tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad)))), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), grad))))))), tf.math.add(beta, tf.math.subtract(alpha, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, beta)))))))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.multiply(beta, alpha))))), grad)), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(beta))", "other_info": {"loss": [2.302743409051871, 2.3030687320375676, 2.3026991167938893, 2.3023175680248444, 2.3031038962429573, 2.302993592143988], "accuracy": [0.08915598690509796, 0.08889182657003403, 0.09166556596755981, 0.09509972482919693, 0.09047681838274002, 0.09232597798109055], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 4, 3, 6, 2, 5, 8, 3, 5, 3, 3, 8, 2, 1, 0, 2, 3, 3, 9, 5, 2, 6, 2, 4, 2, 2, 8, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 0, 3, 1, 1, 1, 3, 3, 0, 2, 3, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [21, 18, 78, 71, 37, 47, 96, 81], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 18, 18, 11, 7, 2, 31, 31, 19, 12, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, grad))))), tf.math.add(alpha, alpha)))))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.sqrt(grad)))), tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.sqrt(tf.math.add(beta, tf.math.add(alpha, tf.math.subtract(tf.math.negative(alpha), tf.math.add(tf.math.add(beta, alpha), tf.math.multiply(tf.math.add(beta, grad), grad)))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))), beta)))), grad)), alpha))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.302743409051871, 2.3030687320375676, 2.3026991167938893, 2.3023175680248444, 2.3031038962429573, 2.302993592143988], "accuracy": [0.08915598690509796, 0.08889182657003403, 0.09166556596755981, 0.09509972482919693, 0.09047681838274002, 0.09232597798109055], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [1, 2, 3, 6, 1, 8, 4, 3, 8, 3, 8, 5, 2, 1, 3, 2, 0, 9, 7, 1, 2, 2, 2, 8, 2, 2, 9, 6, 9, 1, 3, 0, 2, 9], [3, 0, 3, 1, 1, 1, 3, 3, 0, 2, 3, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [50, 18, 78, 71, 37, 47, 96, 81], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [8, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 4, 4, 2, 2, 1, 27, 27, 15, 12, 2, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(grad, tf.math.add(beta, tf.math.multiply(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, alpha)))), alpha)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.multiply(tf.math.sqrt(grad), tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)))), beta))))))))))), tf.math.multiply(tf.math.add(beta, grad), alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [2.302743490015306, 2.3030694337836537, 2.302699962485468, 2.302318809590146, 2.3031056280605955, 2.3029957648360293], "accuracy": [0.08915598690509796, 0.08889182657003403, 0.09166556596755981, 0.09509972482919693, 0.09047681838274002, 0.09232597798109055], "val_loss": [1.9710071427481515, 1.9710074152265276, 1.9710076877049036, 1.971008028302874, 1.9710084370204382, 1.9710088457380022], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 1, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [22, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [5, 2, 2, 6, 1, 8, 4, 3, 8, 3, 8, 2, 2, 1, 2, 2, 0, 9, 7, 1, 2, 2, 2, 8, 2, 2, 9, 6, 9, 1, 3, 0, 2, 9], [3, 2, 3, 2, 1, 2, 3, 1, 0, 2, 3, 3, 3, 1, 3, 2, 0, 1, 1, 2, 4, 2, 0, 3, 1, 4, 2], [15, 2, 78, 38, 8, 47, 96], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 4, 4, 2, 2, 0, 13, 13, 7, 6, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(grad, tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.math.sqrt(tf.math.add(beta, tf.math.pow(grad, beta))), tf.math.add(beta, alpha)), tf.math.add(beta, beta))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.302743409051871, 2.3030687320375676, 2.3026991167938893, 2.3023175680248444, 2.3031038962429573, 2.302993592143988], "accuracy": [0.08915598690509796, 0.08889182657003403, 0.09166556596755981, 0.09509972482919693, 0.09047681838274002, 0.09232597798109055], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 3, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [30, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 5, 3, 6, 2, 5, 2, 3, 5, 3, 3, 8, 9, 1, 0, 9, 3, 3, 7, 8, 2, 6, 2, 4, 2, 2, 8, 6, 0, 2, 3, 2, 2, 9, 8, 8, 2], [3, 3, 3, 1, 1, 1, 3, 3, 0, 2, 3, 1, 3, 0, 3, 2, 3, 1, 1, 2, 4, 2], [21, 2, 78, 38, 37, 47, 96], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [5, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [3, 1, 1, 4, 3, 4], [44], [0, 0, 1, 0, 1, 0, 1, 0, 1], [0, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [50, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(grad), grad)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(sigma))", "other_info": {"loss": [2.302743409051871, 2.3030687320375676, 2.3026991167938893, 2.3023175680248444, 2.3031038962429573, 2.302993592143988], "accuracy": [0.08915598690509796, 0.08889182657003403, 0.09166556596755981, 0.09509972482919693, 0.09047681838274002, 0.09232597798109055], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}]