[{"genotype": [[0], [1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 3, 2, 5, 8, 2, 0, 8, 2, 8, 5, 6, 1, 3, 9, 8, 5, 8, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 3, 0, 2, 2, 1, 1, 2, 2, 2, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [40, 21, 52, 16, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4], [2, 0, 1, 5, 3, 4], [49], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.8157142996788025, "mapping_values": [1, 15, 15, 9, 6, 2, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))), grad)))))), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.039809439900592, 1.8171893224866085, 1.5538002716913955, 1.2522271525480366, 1.1077599216052303, 0.9994418296154542, 0.8568355673969603, 0.7911996890005576, 0.7512780572555289, 0.7250152647676343, 0.6868320810812151, 0.6688688598635206, 0.6508473880050708, 0.6446664172896714, 0.6241982976096953, 0.5847834760974884, 0.5903746506809133, 0.5738476267769164, 0.5477285744365747, 0.5385326745409015, 0.509569346180461, 0.519425971326008, 0.5269655005539161, 0.5011696606547746, 0.4813299820234495, 0.49844442012523854, 0.4949526375925001, 0.4653948152251074, 0.46527513771119483, 0.45979423264171687, 0.4651619486797125, 0.45159156149514773], "accuracy": [0.28820499777793884, 0.3967771828174591, 0.4399682879447937, 0.5373134613037109, 0.5847312211990356, 0.6333377361297607, 0.6631884574890137, 0.6845859289169312, 0.7014925479888916, 0.7079645991325378, 0.7207766771316528, 0.7411174178123474, 0.748778223991394, 0.7535332441329956, 0.7537974119186401, 0.769911527633667, 0.7707040309906006, 0.7744023203849792, 0.780610203742981, 0.7972526550292969, 0.802800178527832, 0.8053097128868103, 0.7942147850990295, 0.8012151718139648, 0.81112140417099, 0.8012151718139648, 0.8045172095298767, 0.8211596608161926, 0.817461371421814, 0.8198388814926147, 0.8202351331710815, 0.8211596608161926], "val_loss": [1.7073702130998885, 1.6755570002964564, 1.229217188698905, 1.0514349256243025, 0.83472740650177, 0.6964098385402134, 0.6195413385118756, 0.5991701398577008, 0.6200444187436785, 0.5805057798113141, 0.5310150895799909, 0.5061378479003906, 0.5253897394452777, 0.6084890365600586, 0.4753072772707258, 0.4510877473013742, 0.4695050035204206, 0.45173587117876324, 0.43160208633967806, 0.432187625340053, 0.4285989659173148, 0.4448319843837193, 0.42531532049179077, 0.40448272228240967, 0.4143772806440081, 0.43078254801886423, 0.38956070797783987, 0.3865883605820792, 0.41278993231909616, 0.41757627044405254, 0.4035152282033648, 0.3970115865979876], "val_accuracy": [0.4166666567325592, 0.3179999887943268, 0.4819999933242798, 0.5426666736602783, 0.6583333611488342, 0.6793333292007446, 0.7139999866485596, 0.7250000238418579, 0.7113333344459534, 0.7223333120346069, 0.7609999775886536, 0.7670000195503235, 0.7526666522026062, 0.6943333148956299, 0.784333348274231, 0.7903333306312561, 0.7826666831970215, 0.7839999794960022, 0.8003333210945129, 0.8069999814033508, 0.8066666722297668, 0.7886666655540466, 0.8006666898727417, 0.8116666674613953, 0.8019999861717224, 0.7820000052452087, 0.8353333473205566, 0.8349999785423279, 0.8176666498184204, 0.8113333582878113, 0.8203333616256714, 0.8226666450500488]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 2, 3, 3, 8, 2, 0, 1, 8, 8, 5, 6, 1, 3, 9, 8, 5, 8, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 3, 2, 0, 0, 0, 2, 2, 2, 2, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [5, 21, 52, 16, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4], [2, 0, 1, 5, 3, 4], [49], [1, 0, 1, 0, 0, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.8137142658233643, "mapping_values": [1, 28, 28, 19, 9, 5, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), grad)), tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.subtract(grad, tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.0399016892165243, 1.7882188164153356, 1.6246954132269529, 1.33709826056574, 1.1001967718383623, 1.0010811305001994, 0.8509610348358099, 0.8067853091305053, 0.7769404784988466, 0.7417140329880816, 0.6918735871729425, 0.689221740186238, 0.7175813033171081, 0.6178693007232491, 0.6235401255658368, 0.603526899441752, 0.5838940867721413, 0.5914277160140927, 0.5653992421937861, 0.5385195724228197, 0.5317263488032011, 0.5316259888232172, 0.514449139966185, 0.5089344494630317, 0.4917181654849372, 0.47501091737206175, 0.5065819795467693, 0.4847355444890129, 0.4732685399455417, 0.44051954285217676], "accuracy": [0.28820499777793884, 0.39889049530029297, 0.45225200057029724, 0.5246334671974182, 0.5863162279129028, 0.6155065298080444, 0.6621318459510803, 0.6783780455589294, 0.6963412761688232, 0.7008321285247803, 0.7217012047767639, 0.7215691208839417, 0.7220974564552307, 0.7549861073493958, 0.7491744756698608, 0.761590301990509, 0.7716285586357117, 0.7840443849563599, 0.7788931727409363, 0.7938185334205627, 0.7901201844215393, 0.7877426743507385, 0.8039889335632324, 0.8098005652427673, 0.8080834746360779, 0.817989706993103, 0.8004226684570312, 0.81548011302948, 0.8168009519577026, 0.8298771381378174], "val_loss": [1.7074518544333321, 1.7038886887686593, 1.6133691923958915, 0.7486648218972343, 0.785503693989345, 0.6619089330945697, 0.6438135760171073, 0.6133354391370501, 0.5703638110842023, 0.5925006696156093, 0.5208629199436733, 0.5841483048030308, 0.5339358023234776, 0.5494108710970197, 0.4677143948418753, 0.4500735913004194, 0.48869647298540386, 0.46333939688546316, 0.4362190876688276, 0.46211550916944233, 0.4478234904153006, 0.4441690274647304, 0.441273638180324, 0.4224137152944292, 0.39119410514831543, 0.44233094794409616, 0.40698191949299406, 0.43244928973061697, 0.38773410660879953, 0.41985137122017996], "val_accuracy": [0.41499999165534973, 0.304666668176651, 0.38966667652130127, 0.6813333630561829, 0.6269999742507935, 0.6806666851043701, 0.6976666450500488, 0.7106666564941406, 0.7416666746139526, 0.7066666483879089, 0.7553333044052124, 0.746999979019165, 0.7463333606719971, 0.7136666774749756, 0.7796666622161865, 0.7910000085830688, 0.7803333401679993, 0.7826666831970215, 0.7943333387374878, 0.7793333530426025, 0.79666668176651, 0.781000018119812, 0.8109999895095825, 0.8033333420753479, 0.8320000171661377, 0.784333348274231, 0.8206666707992554, 0.7956666946411133, 0.8236666917800903, 0.8203333616256714]}}, {"genotype": [[0], [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 2, 3, 3, 8, 2, 4, 1, 8, 8, 5, 6, 1, 3, 9, 8, 5, 8, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 0, 0, 0, 2, 1, 2, 2, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [5, 3, 92, 16, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4], [2, 0, 1, 5, 3, 4], [49], [1, 0, 1, 0, 0, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.805142879486084, "mapping_values": [1, 29, 29, 20, 9, 7, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(grad, tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.square(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))))), tf.math.add(alpha, tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, grad))))))))), tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.039929262855821, 1.7848363407472845, 1.5960707388628335, 1.379800183551659, 1.1597601907789559, 0.981209194592481, 0.9139782560657375, 0.7983732748387465, 0.7726558708810788, 0.740013957724296, 0.7167059693826487, 0.6638592534675543, 0.6778106045855223, 0.6304151892756521, 0.631701948266098, 0.6000071527967049, 0.5848748343039056, 0.5608132073293823, 0.5544483477980185, 0.5500911788193462, 0.5410125327069352, 0.5546652296389004, 0.5237207884140428, 0.523599647204984], "accuracy": [0.2880729138851166, 0.4002113342285156, 0.4613657295703888, 0.5256901383399963, 0.5735041499137878, 0.6197332143783569, 0.635451078414917, 0.6900013089179993, 0.7029454708099365, 0.7161537408828735, 0.7124554514884949, 0.7499669790267944, 0.7341170310974121, 0.7442874312400818, 0.7477215528488159, 0.7604015469551086, 0.7774402499198914, 0.7913089394569397, 0.7865539789199829, 0.787082314491272, 0.7844406366348267, 0.7833839654922485, 0.7992339134216309, 0.7965922355651855], "val_loss": [1.7086913585662842, 1.6983646324702673, 1.6188524450574602, 1.029853309903826, 0.8253518513270787, 0.8029483045850482, 0.6581977265221732, 0.5848391907555717, 0.5992833716528756, 0.5709789991378784, 0.5329610620226178, 0.532253588948931, 0.5227970225470406, 0.5372435876301357, 0.48085107122148785, 0.4697267838886806, 0.48969922746930805, 0.45437136718205046, 0.4217934693608965, 0.4684858662741525, 0.44577845505305697, 0.4424475772040231, 0.4408370171274458, 0.4180383597101484], "val_accuracy": [0.41999998688697815, 0.3073333203792572, 0.35199999809265137, 0.5740000009536743, 0.6566666960716248, 0.596666693687439, 0.6926666498184204, 0.7256666421890259, 0.7166666388511658, 0.7269999980926514, 0.746999979019165, 0.7680000066757202, 0.749666690826416, 0.7153333425521851, 0.7863333225250244, 0.7856666445732117, 0.7886666655540466, 0.7953333258628845, 0.8019999861717224, 0.762333333492279, 0.7923333048820496, 0.7986666560173035, 0.8013333082199097, 0.8006666898727417]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 3, 5, 5, 8, 2, 0, 8, 2, 8, 5, 6, 1, 3, 9, 8, 5, 8, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [2, 3, 0, 0, 2, 0, 1, 2, 2, 2, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [91, 3, 52, 10, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4], [2, 0, 1, 5, 3, 4], [49], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.8019999861717224, "mapping_values": [1, 12, 12, 8, 4, 2, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), grad), tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32))))), tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.039932683379879, 1.7866173635589102, 1.6609353437683192, 1.3459397046289834, 1.1460060014102469, 1.0040634803374555, 0.8449777571233257, 0.7910344596426201, 0.7635309807597024, 0.7323896776431619, 0.7238278060131983, 0.6842373012787851, 0.6384885301207035, 0.6332706882496709, 0.6277752308136342, 0.6016278283911893, 0.5636616607604167, 0.5626304189857475, 0.5472356575890429, 0.5401310823722963, 0.5169206087135163, 0.523028407043643, 0.5194729519495008, 0.5205013712934767, 0.519649369377171, 0.5130168052869718], "accuracy": [0.2880729138851166, 0.3991546630859375, 0.4427420496940613, 0.5204068422317505, 0.564258337020874, 0.6222427487373352, 0.6712455153465271, 0.6979262828826904, 0.7061154246330261, 0.7140403985977173, 0.7137762308120728, 0.7338528633117676, 0.7498348951339722, 0.7531369924545288, 0.7588165402412415, 0.7732135653495789, 0.7839123010635376, 0.7765156626701355, 0.7839123010635376, 0.7905164361000061, 0.8009510040283203, 0.7996301651000977, 0.7957997918128967, 0.7980451583862305, 0.7956677079200745, 0.7981772422790527], "val_loss": [1.708115884235927, 1.705514567238944, 1.698711974280221, 0.9473892620631627, 0.8317994049617222, 0.7230128220149449, 0.679094842502049, 0.6440111228397915, 0.6382452079227993, 0.5733387810843331, 0.53009147303445, 0.519664832523891, 0.5029395137514386, 0.493723954473223, 0.500222989491054, 0.4842050245829991, 0.46655126980372835, 0.44146584612982614, 0.4402356573513576, 0.4371799911771502, 0.4269541757447379, 0.4078570008277893, 0.43148950168064665, 0.436534013066973, 0.4756791251046317, 0.42395453793661936], "val_accuracy": [0.4183333218097687, 0.29766666889190674, 0.4153333306312561, 0.6060000061988831, 0.6513333320617676, 0.6629999876022339, 0.6916666626930237, 0.7023333311080933, 0.7129999995231628, 0.7110000252723694, 0.7450000047683716, 0.7416666746139526, 0.7643333077430725, 0.7649999856948853, 0.7910000085830688, 0.7596666812896729, 0.7753333449363708, 0.800000011920929, 0.793666660785675, 0.7993333339691162, 0.8100000023841858, 0.8056666851043701, 0.7943333387374878, 0.7900000214576721, 0.7609999775886536, 0.7946666479110718]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 3, 3, 3, 8, 2, 0, 2, 8, 8, 1, 6, 1, 3, 9, 8, 5, 2, 5, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [5, 21, 52, 16, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4], [2, 0, 1, 5, 3, 4], [49], [1, 0, 1, 0, 0, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.795714259147644, "mapping_values": [1, 30, 30, 20, 10, 4, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), grad)), grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.negative(grad), tf.math.add(tf.math.sqrt(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, grad), tf.math.multiply(tf.math.add(alpha, grad), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))))))))))))))), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.249903626713408, 1.8914490001328539, 1.5783223401695556, 1.4190183972260577, 1.244118652150395, 1.0147673203063097, 0.9313383618397499, 0.934489797890824, 0.8736753379270432, 0.7612144399580466, 0.7571230283770437, 0.7029405533913151, 0.6955266900271032, 0.676089886645316, 0.62854548628619, 0.6584094830901474, 0.6155966249250417, 0.5978275400268687, 0.5756887484299051, 0.5753633064868475, 0.5562369354318208, 0.5760071301315407, 0.5455183061579073, 0.5373638576567528], "accuracy": [0.24342887103557587, 0.3777572214603424, 0.4555540978908539, 0.4966318905353546, 0.531898021697998, 0.6110157370567322, 0.6596222519874573, 0.6479989290237427, 0.6822084188461304, 0.7088891863822937, 0.7107383608818054, 0.7259278893470764, 0.735569953918457, 0.7405890822410583, 0.7547219395637512, 0.7498348951339722, 0.7732135653495789, 0.7770439982414246, 0.7940827012062073, 0.7808743715286255, 0.789988100528717, 0.7775723338127136, 0.7935543656349182, 0.7930260300636292], "val_loss": [1.628256048474993, 1.6175411428724016, 0.9110564163752964, 1.2416891029902868, 0.7993855476379395, 0.7497225829533168, 0.8572625602994647, 0.7930612393787929, 0.590515102658953, 0.6250941583088466, 0.5691328389304025, 0.567556483404977, 0.5357778923852103, 0.4997386762074062, 0.5247892652239118, 0.4822883605957031, 0.48015729018620085, 0.49691377367292133, 0.4406576582363674, 0.4523854766573225, 0.46874133178165983, 0.44280394486018587, 0.4421543564115252, 0.4326844641140529], "val_accuracy": [0.4183333218097687, 0.35466668009757996, 0.5946666598320007, 0.4586666524410248, 0.6026666760444641, 0.6386666893959045, 0.5826666951179504, 0.6000000238418579, 0.731333315372467, 0.6953333616256714, 0.7229999899864197, 0.7456666827201843, 0.7519999742507935, 0.7666666507720947, 0.7663333415985107, 0.7793333530426025, 0.7806666493415833, 0.7703333497047424, 0.812666654586792, 0.7836666703224182, 0.7853333353996277, 0.8009999990463257, 0.7926666736602783, 0.8056666851043701]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 2, 3, 3, 8, 2, 0, 1, 8, 8, 5, 6, 1, 3, 9, 8, 5, 8, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 0, 2, 0, 2, 0, 2, 2, 2, 2, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [5, 3, 52, 16, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4], [2, 0, 1, 5, 3, 4], [49], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.7354285717010498, "mapping_values": [1, 28, 28, 19, 9, 5, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.subtract(grad, tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, grad))))), tf.math.square(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.394429031254168, 2.0031837031447957, 1.7598586978535722, 1.3657602177729398, 1.233729221116692, 1.1109158881918912, 1.0175387606314066, 0.9396684433742836, 0.8018109909909639, 0.7886294336791965, 0.7741106243307375, 0.7579118406547453], "accuracy": [0.2401268035173416, 0.32545238733291626, 0.38528597354888916, 0.5114251971244812, 0.535860538482666, 0.5946374535560608, 0.6129969358444214, 0.6277902722358704, 0.6880200505256653, 0.698718786239624, 0.7078325152397156, 0.7195879220962524], "val_loss": [1.8298261506216866, 1.49648836680821, 1.1643235002245222, 1.1922850608825684, 0.8318753242492676, 0.7954239164079938, 0.6589282410485404, 0.6445682389395577, 0.6656414440699986, 0.6379920073917934, 0.6115845782416207, 0.6626850196293422], "val_accuracy": [0.5116666555404663, 0.4650000035762787, 0.4936666786670685, 0.46966665983200073, 0.6346666812896729, 0.6426666378974915, 0.7303333282470703, 0.6959999799728394, 0.6793333292007446, 0.7153333425521851, 0.7210000157356262, 0.6809999942779541]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 3, 2, 5, 8, 2, 0, 8, 2, 8, 5, 6, 1, 3, 9, 8, 5, 8, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 2, 0, 0, 2, 0, 1, 2, 2, 2, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [5, 17, 52, 16, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [1, 1, 1, 0], [1, 4, 4, 2, 8, 8, 8, 4], [2, 0, 1, 5, 3, 4], [49], [1, 0, 1, 0, 0, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.4034285843372345, "mapping_values": [1, 15, 15, 9, 6, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), grad)), tf.math.square(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))))), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.506478718668321, 2.3610416963320557, 2.2947219789870554, 2.3166001262508598, 2.3039171483459695, 2.303125312157972, 2.3033291030443417, 2.303162074785002], "accuracy": [0.22242768108844757, 0.137630432844162, 0.12072381377220154, 0.12481838464736938, 0.09813763201236725, 0.09760929644107819, 0.09457138925790787, 0.09959053993225098], "val_loss": [2.0664564541407993, 1.9757144791739327, 1.810906205858503, 1.9746052878243583, 1.973822798047747, 1.973789964403425, 1.9736274991716658, 1.9736976623535156], "val_accuracy": [0.0989999994635582, 0.10433333367109299, 0.3423333466053009, 0.0976666659116745, 0.09833333641290665, 0.10066666454076767, 0.10066666454076767, 0.0989999994635582]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 2, 3, 3, 8, 2, 0, 1, 8, 8, 5, 6, 1, 3, 9, 8, 5, 8, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 3, 2, 0, 0, 0, 2, 2, 2, 2, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [83, 3, 52, 16, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1], [1, 1, 1, 0], [5, 4, 4], [2, 0, 1, 5, 3, 4], [49], [1, 0, 1, 0, 0, 0, 1, 0, 1], [4, 5, 5, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.34542858600616455, "mapping_values": [1, 5, 5, 2, 3, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.5070027796158687, 2.303550010973893, 2.78343705988642, 2.307205189645818, 2.303787738324912, 2.303071421402919, 2.3033591547756775, 2.302919788036868, 2.3029708390569077, 2.3029610890879875, 2.302854982743158, 2.3027053885156956, 2.3018218905398906, 2.2981659314257987, 2.2361793890605277, 2.308644917221936, 2.3041236658515776, 2.3015392532973413, 2.2570764703552846, 2.3079553750748207], "accuracy": [0.2218993455171585, 0.14436666667461395, 0.1764628142118454, 0.10077928751707077, 0.10077928751707077, 0.10421344637870789, 0.09721305221319199, 0.09879804402589798, 0.09576013684272766, 0.09470347315073013, 0.09417514503002167, 0.10368511080741882, 0.10302469879388809, 0.12481838464736938, 0.19640734791755676, 0.12323339283466339, 0.09774138033390045, 0.10672302544116974, 0.17672698199748993, 0.09906221181154251], "val_loss": [2.0687904357910156, 1.9625208718436105, 1.9794676644461495, 1.974498680659703, 1.9737547465733118, 1.9737362180437361, 1.973578861781529, 1.9736170087541853, 1.9735374450683594, 1.9735845838274275, 1.973623616354806, 1.9731511388506209, 1.9715535981314523, 1.952639102935791, 1.7394153731209892, 1.9745256560189384, 1.9731295449393136, 1.9673582485743932, 1.9812852995736259, 1.9743719100952148], "val_accuracy": [0.0989999994635582, 0.09866666793823242, 0.10066666454076767, 0.10433333367109299, 0.09833333641290665, 0.09833333641290665, 0.10066666454076767, 0.09966666996479034, 0.10566666722297668, 0.09833333641290665, 0.12200000137090683, 0.10266666859388351, 0.09866666793823242, 0.2603333294391632, 0.2893333435058594, 0.0989999994635582, 0.1459999978542328, 0.10999999940395355, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 2, 3, 8, 0, 0, 8, 2, 8, 5, 6, 1, 3, 9, 8, 5, 8, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [3, 2, 2, 2, 1, 2, 0, 2, 2, 1, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [5, 3, 52, 16, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [4, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [1, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4], [2, 0, 1, 5, 3, 4], [49], [1, 0, 1, 0, 0, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.2980000078678131, "mapping_values": [1, 12, 12, 8, 4, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.add(alpha, grad)))))))), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.5045152528962094, 2.3219614880448085, 2.298424903254672, 2.140094940263393, 2.5559362713938865, 2.435697685348013, 2.3068556518854484, 2.30372898072583], "accuracy": [0.22216351330280304, 0.13776251673698425, 0.11398758739233017, 0.2188614457845688, 0.19363360106945038, 0.12508255243301392, 0.0936468094587326, 0.09391097724437714], "val_loss": [2.062159333910261, 1.9747050830296107, 1.9028098242623466, 3.4700110980442593, 1.936410699571882, 1.9781253678458077, 1.9743677547999792, 1.973790236881801], "val_accuracy": [0.0989999994635582, 0.10433333367109299, 0.24933333694934845, 0.24400000274181366, 0.12800000607967377, 0.10066666454076767, 0.10100000351667404, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 9, 9, 3, 8, 2, 0, 1, 2, 8, 5, 6, 1, 3, 9, 8, 5, 8, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [3, 3, 2, 0, 2, 0, 2, 2, 2, 2, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [5, 21, 52, 16, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 1, 0, 0, 1], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4], [2, 0, 1, 5, 3, 4], [49], [1, 0, 1, 0, 0, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10199999809265137, "mapping_values": [1, 3, 3, 2, 1, 1, 15, 15, 8, 7, 1, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(tf.math.add(beta, tf.math.subtract(grad, beta)), tf.math.pow(grad, tf.math.negative(grad)))), tf.math.pow(tf.math.pow(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2738914844607.924, 113383429053534.55, 857803966082125.8, 3323680453658337.5, 8982376426582479.0, 2.0294446285348108e+16], "accuracy": [0.11200633645057678, 0.10936468094587326, 0.10553427785634995, 0.10540219396352768, 0.10817593336105347, 0.10474177449941635], "val_loss": [11785141597915.428, 187115834666422.84, 943244573072237.8, 2968372540829111.0, 7226681907478528.0, 1.49501976553905e+16], "val_accuracy": [0.13300000131130219, 0.13199999928474426, 0.1303333342075348, 0.1289999932050705, 0.1276666671037674, 0.1276666671037674]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 3, 2, 5, 8, 2, 0, 8, 2, 8, 5, 6, 1, 3, 9, 8, 5, 8, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 3, 0, 0, 0, 0, 1, 2, 2, 2, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [91, 3, 52, 16, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [1, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4], [2, 0, 1, 5, 3, 4], [49], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 15, 9, 6, 5, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))))), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10196803510189056, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 2, 3, 3, 8, 8, 0, 1, 8, 8, 5, 3, 2, 3, 9, 8, 4, 8, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 3, 2, 0, 0, 0, 2, 2, 2, 2, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [5, 21, 52, 16, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4], [2, 0, 1, 5, 3, 4], [49], [1, 0, 1, 0, 0, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 28, 28, 20, 8, 6, 15, 15, 8, 7, 1, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(grad, tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))))))))))))), tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.sqrt(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(tf.math.add(beta, tf.math.subtract(grad, beta)), tf.math.pow(grad, tf.math.negative(grad)))), tf.math.pow(tf.math.pow(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10157178342342377, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 2, 3, 1, 2, 2, 0, 1, 6, 8, 5, 6, 1, 1, 9, 8, 5, 8, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [1, 2, 2, 2, 1, 2, 1, 2, 2, 1, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [5, 21, 52, 16, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 1, 0, 0, 1], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4], [4, 0, 1, 5, 3, 4], [49], [1, 0, 1, 0, 1, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 1, 0, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(alpha, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3026434958272404, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10157178342342377, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 3, 2, 5, 8, 2, 0, 8, 2, 8, 5, 6, 1, 3, 9, 8, 5, 8, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 3, 0, 0, 2, 0, 1, 2, 2, 2, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [91, 3, 52, 16, 90, 47, 89, 44], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1], [0, 1, 0, 0, 0, 0, 0, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4], [2, 0, 1, 5, 3, 4], [49], [0, 0, 1, 0, 0, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 15, 9, 6, 4, 1, 1, 0, 1, 0, 12, 9, 7, 2, 1, 1, 1, 0, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.square(tf.math.add(alpha, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(sigma, tf.math.sqrt(sigma)))))), sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3026434958272404, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10157178342342377, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 2, 3, 3, 8, 2, 0, 1, 8, 2, 5, 6, 1, 3, 9, 8, 5, 8, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 2, 2, 1, 2, 0, 2, 2, 2, 2, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [11, 3, 57, 16, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 2, 3, 3, 3], [53], [0, 1, 0, 0, 1], [1, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4], [2, 2, 1, 5, 3, 4], [49], [1, 0, 1, 0, 0, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 1, 17, 17, 9, 8, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(alpha, grad), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(tf.math.add(beta, tf.math.subtract(grad, beta)), tf.math.pow(grad, tf.math.negative(grad)))), tf.math.pow(tf.math.pow(beta, tf.math.multiply(tf.math.add(beta, grad), grad)), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10157178342342377, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 1, 3, 1, 8, 2, 0, 1, 2, 8, 5, 6, 1, 3, 9, 8, 5, 8, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 3, 2, 0, 2, 1, 2, 2, 2, 2, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [5, 98, 52, 16, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [0, 0, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4], [2, 0, 1, 5, 3, 4], [59], [1, 0, 1, 0, 0, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 28, 28, 18, 10, 3, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(grad, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.square(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.multiply(tf.math.add(alpha, grad), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.square(tf.math.sqrt(tf.math.add(alpha, grad))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.301021735996634, 2.3031292484735912, 2.3021778045407912, 2.30233588446684, 2.3018076785441166, 2.30224185650611], "accuracy": [0.09628847241401672, 0.08506141602993011, 0.09470347315073013, 0.09391097724437714, 0.09259014576673508, 0.08942015469074249], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [0, 5, 9, 3, 8, 2, 0, 1, 2, 8, 5, 6, 1, 3, 9, 8, 5, 8, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 1, 2, 0, 2, 0, 2, 2, 2, 2, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [5, 3, 52, 16, 90, 47, 89, 44], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4], [3, 0, 1, 5, 3, 4], [49], [1, 0, 1, 0, 0, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, sigma), tf.math.add(sigma, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.301021735996634, 2.3031292484735912, 2.3021778045407912, 2.30233588446684, 2.3018076785441166, 2.30224185650611], "accuracy": [0.09628847241401672, 0.08506141602993011, 0.09470347315073013, 0.09391097724437714, 0.09259014576673508, 0.08942015469074249], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 3, 2, 5, 8, 2, 0, 8, 2, 8, 5, 6, 1, 3, 9, 8, 5, 8, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 3, 0, 0, 2, 0, 1, 2, 2, 2, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [91, 3, 52, 16, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4], [2, 0, 1, 5, 3, 4], [49], [1, 0, 1, 0, 0, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 5, 5, 2, 3, 2, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.math.add(alpha, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.301021735996634, 2.3031292484735912, 2.3021778045407912, 2.30233588446684, 2.3018076785441166, 2.30224185650611], "accuracy": [0.09628847241401672, 0.08506141602993011, 0.09470347315073013, 0.09391097724437714, 0.09259014576673508, 0.08942015469074249], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [2, 6, 5, 5, 8, 2, 0, 1, 8, 8, 5, 6, 1, 3, 9, 8, 5, 8, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 3, 1, 2, 0, 0, 2, 2, 2, 2, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [5, 21, 52, 16, 90, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4], [2, 0, 1, 5, 3, 4], [49], [1, 0, 1, 0, 0, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 15, 15, 10, 5, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)))), grad), tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.subtract(alpha, tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.301021735996634, 2.3031292484735912, 2.3021778045407912, 2.30233588446684, 2.3018076785441166, 2.30224185650611], "accuracy": [0.09628847241401672, 0.08506141602993011, 0.09470347315073013, 0.09391097724437714, 0.09259014576673508, 0.08942015469074249], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 4, 3, 3, 3, 2, 0, 1, 8, 8, 5, 6, 1, 3, 8, 8, 5, 8, 8, 9, 6, 2, 2, 5, 8, 4, 5, 4, 1, 4], [0, 3, 2, 0, 0, 0, 2, 2, 2, 2, 0, 2, 1, 1, 2, 1, 2, 1, 2, 1], [5, 21, 52, 16, 16, 47, 89, 44], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [2, 5, 2, 1, 4, 0, 4, 4, 3, 2, 5, 1, 8, 5, 1, 3, 6, 2, 7, 1, 5, 6, 2, 8], [3, 2, 3, 5, 0, 3, 1, 3], [53], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1], [0, 1, 1, 0], [3, 4, 4, 2, 8, 8, 8, 4], [2, 0, 1, 5, 3, 4], [49], [1, 0, 1, 0, 0, 0, 1, 0, 1], [9, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [3, 0, 2, 3, 0, 0, 0], [83, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 19, 19, 11, 8, 4, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), grad)), tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))), grad)), tf.math.add(alpha, tf.math.square(grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.301021735996634, 2.3031292484735912, 2.3021778045407912, 2.30233588446684, 2.3018076785441166, 2.30224185650611], "accuracy": [0.09628847241401672, 0.08506141602993011, 0.09470347315073013, 0.09391097724437714, 0.09259014576673508, 0.08942015469074249], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}]