[{"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 2, 2, 7, 5, 6, 5, 1, 4, 3, 0, 2, 2, 5, 6, 0, 5, 3, 4, 6, 2, 6, 4, 2, 2, 3, 0, 6, 5, 2, 0, 1, 2, 9, 2, 8, 2, 2, 6, 0, 6, 3, 6, 4, 6, 0, 3, 5, 3, 2, 8, 2, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [5, 5, 0, 2, 0, 2, 2, 3, 0, 2, 0, 3, 2, 0, 0, 0, 1, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3, 2, 3, 2, 4, 0, 3, 0, 5], [94, 21, 78, 87, 37, 47, 71, 35, 47, 32, 7], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.8448571562767029, "mapping_values": [1, 4, 4, 2, 2, 1, 79, 79, 46, 33, 8, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 104, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.negative(beta))), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.square(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.negative(tf.math.square(tf.math.multiply(tf.math.add(beta, beta), tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(grad, tf.math.divide_no_nan(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), grad)), tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), beta)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.negative(alpha)))), tf.math.add(beta, alpha)))))))))), tf.math.add(beta, alpha))))), grad))))))), tf.math.divide_no_nan(tf.math.add(beta, grad), beta)))))), grad)))), tf.math.add(beta, tf.math.multiply(tf.math.divide_no_nan(grad, beta), tf.math.pow(grad, grad)))))), tf.math.divide_no_nan(beta, grad))), tf.math.add(beta, grad))))), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta)))))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9341154125435571, 1.0313719245877642, 0.7878844967025099, 0.68587462089758, 0.6192898003495427, 0.5905473759822747, 0.5519902089788079, 0.5213741333162496, 0.500692928928536, 0.47813494397412676, 0.46480224630804645, 0.44876463661072924, 0.42441429187356833, 0.40666494989407737, 0.396771044420796, 0.3987377229234121, 0.37903517806660686, 0.36939918832724766, 0.3555628669386322, 0.3513807537509718, 0.337237106609842, 0.32949509958092876, 0.33415943978170065, 0.31631652241479985, 0.30308054398000833, 0.3030893632906177, 0.2867975807925257, 0.2917692773747737, 0.2750599350927371, 0.2648286502796031, 0.25880699986479994, 0.2600387520876543, 0.25100449665646746, 0.2415081306695623, 0.23306285285946557, 0.22519637456132027, 0.22871828340008715, 0.22197105891322574, 0.2134744547668654], "accuracy": [0.3407739996910095, 0.6239598393440247, 0.6984546184539795, 0.7327961921691895, 0.7629110813140869, 0.7724210619926453, 0.7902522683143616, 0.8061022162437439, 0.8079513907432556, 0.8148196935653687, 0.8234050869941711, 0.83119797706604, 0.8399154543876648, 0.8448025584220886, 0.8527275323867798, 0.8506141901016235, 0.8582749962806702, 0.8545766472816467, 0.8656716346740723, 0.8681812286376953, 0.8698983192443848, 0.876370370388031, 0.8717474341392517, 0.8817857503890991, 0.8842953443527222, 0.8881257176399231, 0.8878615498542786, 0.8841632604598999, 0.8927486538887024, 0.898428201675415, 0.8963148593902588, 0.8972394466400146, 0.9022586345672607, 0.9083344340324402, 0.9093911051750183, 0.9116365313529968, 0.9093911051750183, 0.9148064851760864, 0.9163914918899536], "val_loss": [0.8460757902690342, 0.6424393483570644, 0.5439226457050869, 0.49879188196999685, 0.46688342094421387, 0.44090187549591064, 0.42087277344294954, 0.3969731501170567, 0.38403981924057007, 0.3927139128957476, 0.3666890263557434, 0.36733841044562204, 0.35368802717753817, 0.35428312846592497, 0.35386002915246145, 0.3493499159812927, 0.332574154649462, 0.33673713888440815, 0.341583856514522, 0.3289648379598345, 0.3316991925239563, 0.3266754831586565, 0.32349614586148945, 0.320796080998012, 0.3106346641268049, 0.3118089607783726, 0.31393496479306904, 0.3098240920475551, 0.3110465577670506, 0.3159563456262861, 0.3109883155141558, 0.31781327724456787, 0.31695843594414846, 0.32108455896377563, 0.31338435411453247, 0.31486473764692036, 0.31310137680598665, 0.3125201974596296, 0.3284702811922346], "val_accuracy": [0.652999997138977, 0.703000009059906, 0.7476666569709778, 0.7699999809265137, 0.7816666960716248, 0.8086666464805603, 0.8143333196640015, 0.8236666917800903, 0.8370000123977661, 0.8213333487510681, 0.8376666903495789, 0.8446666598320007, 0.843666672706604, 0.8479999899864197, 0.8386666774749756, 0.8569999933242798, 0.8560000061988831, 0.856333315372467, 0.8619999885559082, 0.862666666507721, 0.8676666617393494, 0.8653333187103271, 0.8610000014305115, 0.8696666955947876, 0.8676666617393494, 0.8706666827201843, 0.8733333349227905, 0.8676666617393494, 0.8733333349227905, 0.8713333606719971, 0.8743333220481873, 0.875333309173584, 0.8769999742507935, 0.8793333172798157, 0.8759999871253967, 0.8730000257492065, 0.875333309173584, 0.8756666779518127, 0.8730000257492065]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [3, 4, 2, 7, 4, 6, 5, 2, 4, 3, 0, 6, 2, 5, 6, 0, 5, 3, 4, 6, 2, 6, 4, 2, 2, 9, 0, 6, 5, 2, 0, 2, 2, 9, 8, 8, 2, 2, 6, 0, 6, 5, 6, 4, 6, 0, 3, 5, 3, 2, 8, 3, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [5, 5, 0, 3, 0, 2, 2, 3, 0, 2, 0, 3, 3, 0, 0, 0, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3, 2, 1, 2, 4, 0, 3, 0, 5], [94, 21, 78, 87, 37, 47, 96, 35, 47, 32, 7], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.8399999737739563, "mapping_values": [1, 4, 4, 2, 2, 1, 96, 96, 57, 39, 11, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 76, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.pow(grad, tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.negative(grad)))), tf.math.divide_no_nan(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.square(tf.math.divide_no_nan(tf.math.negative(tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), grad)), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad)))), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))))), tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, alpha)), tf.math.add(beta, alpha)))), tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, grad)), grad)))))))))), beta))))))))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.pow(grad, grad), tf.math.divide_no_nan(beta, tf.math.add(beta, grad)))))))), tf.math.negative(tf.math.multiply(grad, tf.math.add(beta, beta))))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), alpha)), tf.math.add(beta, beta)), grad)), tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)))))))))))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9341152258332475, 1.0316393792416678, 0.787847875808728, 0.6858839184348893, 0.6179559138614457, 0.5912256213171985, 0.5565292775009003, 0.5206906285150223, 0.49736865929813434, 0.47794054707815115, 0.4656061054992323, 0.44437522379052385, 0.4231900226729752, 0.39893934022811867, 0.3865259788598776, 0.39136529103435186, 0.37346377800704783, 0.3671099189887855, 0.35039883497337293, 0.34708729439470765, 0.33914626446917795, 0.32514397837167497, 0.32752536250426706, 0.30864094712037954, 0.3021439440561213, 0.2974583032093091, 0.28060669696893137, 0.28569282164442666, 0.26839399918778034, 0.270609939469165, 0.2513975130804715, 0.2582334055030319, 0.2546296508446692, 0.24308387680084256, 0.23741095147120592], "accuracy": [0.3407739996910095, 0.6239598393440247, 0.7005679607391357, 0.7338528633117676, 0.7609298825263977, 0.772288978099823, 0.7905164361000061, 0.804649293422699, 0.8133667707443237, 0.8152159452438354, 0.8247259259223938, 0.8378021121025085, 0.8417646288871765, 0.8448025584220886, 0.857218325138092, 0.8545766472816467, 0.858671247959137, 0.854708731174469, 0.8706908226013184, 0.8710870146751404, 0.8709549307823181, 0.874389111995697, 0.8751816153526306, 0.8845595121383667, 0.8841632604598999, 0.886672854423523, 0.8916919827461243, 0.8887861371040344, 0.8976356983184814, 0.8973715305328369, 0.9001452922821045, 0.9008057117462158, 0.9021265506744385, 0.9062210917472839, 0.9089948534965515], "val_loss": [0.8460928201675415, 0.641755223274231, 0.5432788133621216, 0.4974496875490461, 0.4681649889264788, 0.43832095180238995, 0.4195753421102251, 0.3946067179952349, 0.38644419397626606, 0.391240656375885, 0.3662145137786865, 0.3625805377960205, 0.34690152747290476, 0.3488131080354963, 0.3494465776852199, 0.348834684916905, 0.33070547240121023, 0.3361250502722604, 0.33834591082164217, 0.3280519587653024, 0.33072757720947266, 0.3272839869771685, 0.3260361211640494, 0.3188540594918387, 0.3067685195377895, 0.3117040055138724, 0.3165637765611921, 0.3033960206168039, 0.3121797868183681, 0.3072031395775931, 0.3184137259210859, 0.31517666578292847, 0.3126794014658247, 0.3208292382104056, 0.3122579199927194], "val_accuracy": [0.652999997138977, 0.70333331823349, 0.7476666569709778, 0.7713333368301392, 0.778333306312561, 0.809333324432373, 0.8133333325386047, 0.8240000009536743, 0.8370000123977661, 0.8286666870117188, 0.8370000123977661, 0.8476666808128357, 0.8533333539962769, 0.8519999980926514, 0.847000002861023, 0.8573333621025085, 0.8616666793823242, 0.8529999852180481, 0.8646666407585144, 0.8640000224113464, 0.8636666536331177, 0.8669999837875366, 0.862666666507721, 0.8686666488647461, 0.8676666617393494, 0.8723333477973938, 0.8730000257492065, 0.871666669845581, 0.8723333477973938, 0.8790000081062317, 0.875333309173584, 0.875333309173584, 0.8776666522026062, 0.8736666440963745, 0.8736666440963745]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [90, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1], [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 2, 7, 4, 6, 5, 9, 4, 0, 0, 6, 2, 5, 6, 0, 5, 3, 4, 6, 2, 6, 4, 2, 2, 3, 0, 6, 5, 2, 0, 2, 2, 9, 8, 8, 2, 2, 6, 0, 1, 5, 6, 4, 6, 4, 3, 5, 3, 2, 8, 2, 1, 0, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [5, 5, 0, 3, 0, 2, 2, 3, 0, 2, 0, 3, 3, 0, 0, 2, 2, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3, 2, 1, 2, 4, 0, 3, 0, 5], [94, 21, 78, 87, 37, 47, 96, 35, 47, 32], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.7965714335441589, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.square(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1904299382000803, 2.0251589170961553, 2.0647428256173286, 1.6345513404683194, 1.08328451539988, 0.9131891038345072, 0.8078557931515582, 0.7294895470480893, 0.6715506130693895, 0.6573517763257232, 0.6271333818690117, 0.5930878644244011, 0.5956874553553574, 0.5435522070193666, 0.5662716159243011, 0.5188346791969645, 0.537095980802626], "accuracy": [0.2785629332065582, 0.34024566411972046, 0.31686699390411377, 0.44287413358688354, 0.5926561951637268, 0.6619997620582581, 0.6931713223457336, 0.7239466309547424, 0.7514199018478394, 0.7499669790267944, 0.7588165402412415, 0.7769119143486023, 0.7761194109916687, 0.7938185334205627, 0.7814027070999146, 0.8013472557067871, 0.7938185334205627], "val_loss": [1.6293704509735107, 1.9431728635515486, 1.4483210018702917, 0.7715169872556414, 0.8703142915453229, 0.5907520055770874, 0.6154470784323556, 0.541274871144976, 0.5285762207848685, 0.4788732188088553, 0.4601579223360334, 0.43814981835229055, 0.447326728275844, 0.4478721703801836, 0.4370089088167463, 0.4401403069496155, 0.4392240217753819], "val_accuracy": [0.4183333218097687, 0.23999999463558197, 0.42500001192092896, 0.6833333373069763, 0.6473333239555359, 0.731333315372467, 0.734666645526886, 0.7513333559036255, 0.7763333320617676, 0.7929999828338623, 0.7883333563804626, 0.8109999895095825, 0.8009999990463257, 0.8063333630561829, 0.8056666851043701, 0.7956666946411133, 0.8106666803359985]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0], [1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1], [3, 4, 2, 7, 4, 6, 5, 1, 4, 3, 0, 6, 2, 5, 1, 0, 5, 3, 4, 6, 2, 6, 4, 2, 2, 9, 3, 6, 5, 2, 0, 2, 2, 9, 8, 8, 2, 2, 6, 0, 6, 5, 6, 4, 6, 0, 3, 5, 3, 2, 8, 3, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [5, 5, 0, 3, 2, 2, 2, 3, 0, 2, 0, 3, 3, 0, 3, 0, 3, 1, 3, 0, 0, 2, 3, 4, 3, 4, 3, 2, 3, 3, 3, 2, 1, 2, 4, 0, 3, 0, 5], [94, 21, 78, 87, 37, 47, 96, 35, 97, 83, 7], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.772857129573822, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.square(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2566619954482676, 2.056541796231928, 1.620517290011688, 1.2806485780493742, 1.1189306056919885, 1.0241497180024473, 0.9350170797014343, 0.9170935670256599, 0.871631724006858, 0.8279643231032783, 0.802597472405059, 0.7941316618045181, 0.7728641180393168, 0.7563591430042681, 0.753818365647698, 0.7237288406055522, 0.7246272480955466, 0.7112409765095901, 0.7077190949774815, 0.6985521761181647, 0.693426184193837, 0.6759893364988817], "accuracy": [0.20261524617671967, 0.3825122117996216, 0.49768856167793274, 0.5543521046638489, 0.6066569685935974, 0.6404702067375183, 0.6674151420593262, 0.6708492636680603, 0.6833971738815308, 0.7008321285247803, 0.7103421092033386, 0.7080966830253601, 0.7166820764541626, 0.7255316376686096, 0.7211728692054749, 0.735569953918457, 0.7346453666687012, 0.7380794882774353, 0.7337207794189453, 0.7408532500267029, 0.7357020378112793, 0.7495707273483276], "val_loss": [1.8494305610656738, 1.5150462218693324, 1.0432992662702287, 0.8331421273095267, 0.8055150508880615, 0.6987698589052472, 0.6724405118397304, 0.6245119912283761, 0.6188807146889823, 0.5855814218521118, 0.5855779988425118, 0.5618948936462402, 0.553526793207441, 0.5544208117893764, 0.5421282052993774, 0.5333065816334316, 0.5310262782233102, 0.5369922263281686, 0.5289756059646606, 0.5215689625058856, 0.5180878639221191, 0.4947493416922433], "val_accuracy": [0.41733333468437195, 0.5899999737739563, 0.6176666617393494, 0.6903333067893982, 0.6740000247955322, 0.6956666707992554, 0.6996666789054871, 0.7233333587646484, 0.7170000076293945, 0.7483333349227905, 0.734333336353302, 0.7570000290870667, 0.7450000047683716, 0.7486666440963745, 0.7620000243186951, 0.7639999985694885, 0.7760000228881836, 0.7513333559036255, 0.7593333125114441, 0.7606666684150696, 0.7630000114440918, 0.7720000147819519]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [33, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1], [3, 4, 2, 7, 4, 6, 5, 1, 1, 2, 0, 6, 2, 5, 6, 0, 5, 3, 4, 6, 2, 9, 4, 2, 2, 8, 0, 6, 5, 2, 0, 2, 2, 9, 8, 8, 2, 2, 6, 0, 6, 5, 6, 4, 6, 0, 3, 5, 3, 2, 8, 3, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [1, 1, 0, 3, 0, 2, 2, 3, 0, 2, 0, 3, 3, 0, 0, 0, 2, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3, 2, 1, 2, 4, 0, 3, 0, 5], [94, 21, 78, 87, 37, 47, 96, 14, 47, 32], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.6228571534156799, "mapping_values": [1, 4, 4, 2, 2, 1, 68, 68, 42, 26, 9, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 61, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(grad), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.pow(alpha, tf.math.add(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.negative(grad)))), tf.math.divide_no_nan(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.square(tf.math.divide_no_nan(tf.math.negative(tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), grad)), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))))))), grad))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.negative(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, tf.math.add(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, grad)), tf.math.negative(tf.math.divide_no_nan(tf.math.add(beta, grad), beta))))))))))))))))), grad)))))), tf.math.add(beta, grad))), tf.math.square(beta)))))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2181420681451716, 1.5623055772065897, 1.012622654493128, 0.8741466169344073, 0.8026496584798681, 0.764091270616451, 0.7275687418341746, 0.6826441579128946, 0.6405134298829449, 0.6190723476077996, 0.5997721791629542, 0.5668120243687592, 0.5585527831631691, 0.5383911022515172, 0.5223093962452084, 0.5101914020923655, 0.4943383843899403, 0.48215470083275364, 0.4709171999785658, 0.4608057387603225, 0.4574913805336638, 0.4545580568905315, 0.4391399587913826, 0.4203272033180181, 0.43055634015366356, 0.41705523632253244, 0.4252917051960874, 0.41594927818106625, 0.3958822094753292, 0.3919676801965001, 0.39606723080709894, 0.39531215583297163, 0.3806830663265979, 0.3867713150654046, 0.3854604446223509], "accuracy": [0.24554219841957092, 0.4822348356246948, 0.6392814517021179, 0.6748117804527283, 0.695813000202179, 0.7182670831680298, 0.7220974564552307, 0.7436270117759705, 0.7586844563484192, 0.7605336308479309, 0.7745344042778015, 0.7918372750282288, 0.778232753276825, 0.7976489067077637, 0.8041210174560547, 0.8074230551719666, 0.8132346868515015, 0.8191784620285034, 0.8253863453865051, 0.8222163319587708, 0.8220842480659485, 0.8276317715644836, 0.8286884427070618, 0.8379341959953308, 0.8348963260650635, 0.8416325449943542, 0.8397833704948425, 0.845859169960022, 0.8442742228507996, 0.8487650156021118, 0.8511425256729126, 0.844010055065155, 0.8568220734596252, 0.8515387773513794, 0.8502179384231567], "val_loss": [1.5871284348624093, 0.7564142601830619, 0.6765328134809222, 0.6047016893114362, 0.6137522629329136, 0.5465880802699498, 0.5259087256022862, 0.4887955699648176, 0.4589599881853376, 0.4503368990761893, 0.4417549967765808, 0.4281417727470398, 0.41737633092062815, 0.4101782100541251, 0.3941873737743923, 0.40347450971603394, 0.39321683985846384, 0.4044753057616098, 0.3885054588317871, 0.39294348444257465, 0.3886038064956665, 0.3743026852607727, 0.3857196399143764, 0.38706499338150024, 0.37980581181389944, 0.3869531324931553, 0.37386174712862286, 0.3655005693435669, 0.37951583521706717, 0.4079716546194894, 0.407871629510607, 0.40737034593309673, 0.40431736196790424, 0.40041782174791607, 0.40868909869875225], "val_accuracy": [0.4776666760444641, 0.6653333306312561, 0.7139999866485596, 0.731333315372467, 0.737333357334137, 0.7696666717529297, 0.7699999809265137, 0.7900000214576721, 0.7960000038146973, 0.7983333468437195, 0.8103333115577698, 0.8036666512489319, 0.8223333358764648, 0.8296666741371155, 0.8299999833106995, 0.8316666483879089, 0.831333339214325, 0.8339999914169312, 0.8403333425521851, 0.8413333296775818, 0.8426666855812073, 0.846666693687439, 0.8486666679382324, 0.8479999899864197, 0.8519999980926514, 0.8529999852180481, 0.8539999723434448, 0.8483333587646484, 0.8600000143051147, 0.8613333106040955, 0.8560000061988831, 0.859666645526886, 0.8546666502952576, 0.859333336353302, 0.8550000190734863]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [3, 4, 2, 7, 8, 6, 2, 2, 4, 3, 0, 6, 2, 5, 6, 0, 5, 0, 4, 6, 2, 5, 4, 2, 2, 6, 0, 6, 5, 2, 0, 2, 2, 9, 8, 8, 2, 2, 6, 3, 6, 5, 6, 6, 6, 0, 3, 5, 3, 8, 5, 3, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [3, 2, 0, 3, 0, 2, 2, 3, 0, 2, 0, 3, 3, 0, 3, 0, 3, 1, 1, 3, 4, 3, 3, 4, 2, 4, 3, 2, 0, 3, 3, 2, 1, 2, 4, 0, 3, 0, 5], [94, 21, 97, 87, 57, 47, 96, 35, 47, 32, 3, 46], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.10285714268684387, "mapping_values": [1, 4, 4, 2, 2, 1, 31, 31, 18, 13, 4, 3, 1, 1, 0, 0, 4, 2, 2, 2], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.pow(beta, tf.math.multiply(tf.math.add(beta, beta), tf.math.negative(grad)))))))))), tf.math.divide_no_nan(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.square(tf.math.add(beta, beta)), tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))), tf.math.square(grad))))))))), tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3030590709678216, 2.302292445804685, 2.3019186170298616, 2.3008418565948388, 2.3021414458176968, 2.3006603946113913, 2.3006321039843507, 2.300044047471917, 2.300372247540987, 2.3004023563970493, 2.3003366028769707, 2.3008388522562178, 2.300971841358663, 2.300257201932283, 2.300580892517519, 2.300354831458996, 2.3007796174735757, 2.3005801310329517, 2.3004077297742764, 2.3005149537987006, 2.301377591329748, 2.3008908534550696, 2.3011277138895565, 2.301504176668503, 2.301290197647038], "accuracy": [0.09100515395402908, 0.09232597798109055, 0.09100515395402908, 0.09430722147226334, 0.08981640636920929, 0.0952318087220192, 0.09589222073554993, 0.09285431355237961, 0.09668471664190292, 0.10170386731624603, 0.09602430462837219, 0.09642054885625839, 0.0956280529499054, 0.10368511080741882, 0.09840179979801178, 0.10685510188341141, 0.09179764986038208, 0.09998679161071777, 0.09998679161071777, 0.10091137140989304, 0.09760929644107819, 0.10460969805717468, 0.09985470771789551, 0.09945846349000931, 0.09800554811954498], "val_loss": [1.970844336918422, 1.9707014220101493, 1.9705990382603236, 1.9705241067068917, 1.9704773085457938, 1.9704677036830358, 1.9704855510166712, 1.9705257415771484, 1.9705886840820312, 1.9706811223711287, 1.9708096640450614, 1.9709579604012626, 1.9711119106837682, 1.971285138811384, 1.9714507375444685, 1.9716129984174455, 1.9717766216823034, 1.9719315937587194, 1.9720831598554338, 1.9722258022853307, 1.9723657880510603, 1.972496850149972, 1.9726153782435827, 1.9727224622453963, 1.9728168760027205], "val_accuracy": [0.04266666620969772, 0.04500000178813934, 0.04833333194255829, 0.054999999701976776, 0.059333331882953644, 0.06300000101327896, 0.0676666647195816, 0.07233333587646484, 0.07900000363588333, 0.08299999684095383, 0.08366666734218597, 0.08633333444595337, 0.09366666525602341, 0.09733333438634872, 0.09866666793823242, 0.1003333330154419, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10466666519641876, 0.10466666519641876, 0.10333333164453506, 0.10300000011920929, 0.10333333164453506, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 6, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [61, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0], [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 2, 7, 4, 6, 5, 2, 4, 3, 0, 6, 2, 5, 6, 0, 5, 3, 4, 6, 2, 6, 4, 2, 2, 9, 0, 6, 5, 2, 0, 2, 2, 9, 8, 8, 2, 2, 6, 0, 6, 5, 6, 4, 6, 0, 3, 5, 3, 2, 8, 3, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [5, 5, 0, 3, 0, 2, 2, 3, 0, 2, 0, 3, 3, 0, 0, 0, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3, 2, 1, 2, 4, 0, 3, 0, 5], [94, 21, 78, 87, 37, 47, 96, 35, 47, 32, 7], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [2, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 2, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 5, 3, 2, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [6, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 2, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [33, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [3, 4, 2, 7, 4, 6, 5, 2, 4, 3, 0, 6, 2, 5, 6, 0, 5, 3, 4, 6, 2, 6, 3, 2, 2, 9, 0, 6, 5, 2, 0, 2, 2, 9, 8, 5, 6, 2, 6, 0, 6, 5, 6, 4, 6, 0, 3, 5, 3, 2, 8, 5, 1, 4, 1, 1, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [1, 5, 0, 3, 0, 2, 2, 3, 0, 2, 0, 3, 3, 3, 0, 0, 0, 1, 3, 3, 3, 2, 3, 4, 2, 4, 1, 2, 3, 3, 3, 2, 1, 2, 4, 0, 3, 0, 5], [94, 21, 78, 87, 37, 47, 96, 35, 37, 32, 7], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 95, 95, 57, 38, 11, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 71, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(grad, grad)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.pow(alpha, tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.negative(grad)))), tf.math.divide_no_nan(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.square(tf.math.divide_no_nan(tf.math.negative(tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), grad)), tf.math.add(tf.math.divide_no_nan(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), grad)))), grad))), tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))))), tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))))))))))))))), tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, grad)), tf.math.negative(tf.math.divide_no_nan(tf.math.add(beta, grad), beta)))))))))), grad)))), tf.math.add(beta, tf.math.square(tf.math.divide_no_nan(grad, tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, beta), grad), tf.math.negative(tf.math.multiply(alpha, beta)))))))), grad)), tf.math.square(tf.math.multiply(grad, tf.math.add(beta, grad)))))))), tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), alpha)), tf.math.add(beta, beta)), tf.math.add(beta, grad)), tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))))), tf.math.add(beta, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1199719709.891304, 24048225134.332584, 111083925838.88628, 310114768268.1559, 661895694302.7278, 1211147641947.5662], "accuracy": [0.09985470771789551, 0.10302469879388809, 0.09628847241401672, 0.10421344637870789, 0.09866596013307571, 0.09826971590518951], "val_loss": [4760748763.428572, 38094904173.71429, 128580082541.71428, 304797150646.8571, 595319249773.7142, 1028728665819.4286], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1], [3, 4, 4, 7, 4, 6, 9, 2, 4, 3, 0, 6, 2, 5, 2, 0, 5, 3, 5, 6, 2, 6, 4, 2, 2, 9, 0, 6, 5, 2, 0, 2, 2, 5, 8, 8, 2, 2, 6, 0, 6, 5, 4, 2, 6, 0, 3, 5, 3, 2, 8, 3, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [5, 5, 0, 3, 0, 2, 2, 3, 0, 2, 0, 3, 3, 0, 0, 0, 3, 1, 1, 3, 4, 2, 0, 4, 2, 4, 3, 0, 3, 3, 3, 2, 1, 2, 4, 0, 3, 0, 5], [94, 21, 78, 87, 37, 47, 96, 35, 47, 32], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 0, 0, 1, 0, 1, 0, 1], [2, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 5, 2, 2, 70, 70, 43, 27, 10, 3, 1, 1, 0, 0, 5, 3, 2, 1], "tree_depth": 79, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), grad))))), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.pow(grad, tf.math.pow(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, grad), tf.math.square(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.negative(tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(grad, tf.math.divide_no_nan(tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.add(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, beta)), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), grad)))))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.square(tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, alpha)))), tf.math.add(beta, grad))))))))))))))))))))))))), tf.math.negative(tf.math.divide_no_nan(tf.math.add(beta, grad), beta))), tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))))), tf.math.square(tf.math.pow(grad, beta)))), grad)))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.square(tf.math.sqrt(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.303192638591957, 2.3026026181100208, 2.3025997361455377, 2.302604284174391, 2.3025991951926446, 2.3026091010736485], "accuracy": [0.09259014576673508, 0.09470347315073013, 0.09549596905708313, 0.09998679161071777, 0.09998679161071777, 0.09047681838274002], "val_loss": [1.9736443247113908, 1.9736434391566686, 1.9736413955688477, 1.973642008645194, 1.9736415318080358, 1.9736407143729073], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 2, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 1, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0], [3, 4, 2, 7, 4, 2, 5, 5, 4, 3, 0, 6, 2, 5, 6, 0, 5, 3, 4, 6, 2, 6, 4, 2, 2, 9, 0, 6, 5, 2, 0, 2, 2, 0, 8, 8, 2, 2, 9, 0, 6, 5, 6, 4, 6, 0, 2, 5, 3, 2, 8, 2, 1, 4, 1, 7, 9, 2, 5, 8, 9, 0, 3, 1, 2, 6, 8, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [0, 0, 0, 3, 0, 3, 2, 3, 3, 2, 0, 3, 3, 2, 0, 1, 2, 1, 1, 3, 4, 2, 3, 4, 2, 2, 3, 2, 3, 0, 3, 2, 1, 2, 4, 0, 3, 0, 5, 2, 2, 3, 2, 4], [94, 21, 78, 27, 37, 47, 96, 35, 32, 32, 7, 9], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 4, 4, 0, 67, 67, 42, 25, 8, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 71, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), grad)))))), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.square(tf.math.pow(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), grad))))), tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(grad, tf.math.square(tf.math.divide_no_nan(tf.math.negative(tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, beta), grad), tf.math.add(grad, tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))), grad), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, beta))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.negative(beta)))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(alpha, tf.math.add(beta, tf.math.add(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha)))))))))))))))))), tf.math.add(beta, grad)))), tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), beta))))))))), grad)), tf.math.add(beta, tf.math.square(grad))))))), beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [8, 4, 2, 7, 4, 6, 3, 2, 0, 3, 0, 6, 2, 5, 6, 0, 5, 3, 4, 6, 2, 6, 4, 2, 2, 2, 0, 6, 5, 2, 0, 2, 2, 9, 8, 8, 2, 2, 6, 2, 6, 5, 6, 8, 6, 0, 3, 5, 5, 2, 8, 3, 2, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [5, 5, 0, 3, 0, 3, 2, 3, 0, 2, 0, 3, 3, 0, 0, 0, 3, 1, 1, 3, 4, 2, 3, 4, 3, 4, 3, 2, 3, 3, 3, 2, 1, 2, 4, 0, 3, 0, 5], [94, 21, 78, 22, 37, 47, 96, 35, 47, 32, 7], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 29, 29, 17, 12, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.pow(grad, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad))), tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.add(beta, grad)))), tf.math.divide_no_nan(beta, grad))), tf.math.add(tf.math.square(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.add(beta, beta)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))), grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 4, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [0, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [17, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 2, 7, 4, 6, 5, 2, 4, 3, 0, 6, 2, 5, 6, 0, 5, 3, 4, 6, 2, 6, 4, 2, 2, 9, 0, 6, 5, 2, 0, 2, 2, 9, 8, 8, 2, 2, 6, 0, 6, 5, 6, 4, 6, 0, 3, 5, 3, 2, 8, 3, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [1, 5, 0, 3, 0, 2, 2, 3, 0, 2, 0, 3, 3, 0, 0, 0, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [94, 21, 78, 87, 37, 47, 96, 35, 47, 32], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 3, 3, 2, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 4, 2, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.sqrt(grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.square(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 7, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0], [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 2, 7, 4, 6, 5, 2, 4, 3, 0, 6, 2, 5, 6, 0, 5, 3, 4, 6, 2, 6, 4, 2, 2, 9, 0, 6, 5, 2, 0, 2, 2, 9, 8, 8, 2, 2, 6, 0, 6, 5, 6, 4, 6, 0, 3, 5, 3, 2, 8, 3, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [5, 5, 0, 3, 0, 2, 2, 3, 0, 2, 0, 3, 3, 0, 0, 0, 3, 1, 1, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3], [94, 21, 78, 87, 37, 47, 96, 35, 47, 32], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3031765129808357, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1], [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 2, 7, 4, 6, 8, 2, 4, 3, 0, 6, 2, 5, 6, 0, 5, 0, 4, 6, 2, 5, 4, 2, 2, 6, 0, 6, 5, 2, 0, 2, 2, 9, 8, 8, 2, 2, 6, 3, 6, 5, 6, 6, 6, 0, 3, 5, 3, 8, 5, 3, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [0, 2, 0, 3, 0, 2, 2, 3, 0, 2, 0, 3, 3, 0, 0, 0, 3, 1, 1, 3, 4, 3, 3, 4, 2, 4, 3, 2, 0, 3, 3, 2, 1, 2, 4, 0, 3, 0, 5], [94, 21, 78, 87, 37, 47, 96, 35, 47, 32], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3031765129808357, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [24, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0], [3, 4, 2, 7, 4, 6, 5, 2, 4, 3, 0, 6, 2, 5, 6, 0, 5, 3, 4, 6, 2, 6, 4, 2, 2, 9, 3, 6, 6, 2, 0, 2, 2, 9, 8, 8, 2, 2, 6, 0, 6, 5, 6, 4, 6, 0, 3, 5, 3, 2, 1, 3, 1, 4, 1, 7, 1, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [1, 5, 0, 3, 0, 2, 2, 3, 0, 2, 0, 3, 3, 0, 0, 0, 0, 1, 3, 3, 4, 2, 3, 4, 2, 4, 3, 2, 3, 3, 3, 2, 1, 2, 4, 0, 3, 0, 5, 1, 3, 1], [94, 21, 78, 87, 37, 47, 96, 35, 47, 32, 35, 53, 56], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 103, 103, 61, 42, 13, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 74, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.negative(grad), tf.math.add(alpha, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.pow(alpha, tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, grad), tf.math.square(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))))))), tf.math.divide_no_nan(tf.math.negative(tf.math.square(tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.pow(grad, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, beta))))))), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), grad)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.add(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, alpha))), tf.math.add(beta, grad)))))))), tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, grad)), grad))), beta))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.pow(grad, grad), tf.math.divide_no_nan(beta, tf.math.add(beta, grad))))))), grad), tf.math.negative(beta))))), tf.math.add(beta, grad))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, beta)), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.subtract(beta, grad))), tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))), alpha)))))), tf.math.add(tf.math.add(beta, grad), alpha)))))))), tf.math.add(beta, tf.math.square(tf.math.sqrt(tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [67, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 4, 2, 7, 4, 6, 8, 2, 4, 3, 0, 6, 2, 5, 6, 0, 5, 0, 4, 6, 2, 5, 4, 2, 2, 6, 0, 6, 5, 2, 0, 2, 2, 9, 8, 4, 2, 8, 6, 3, 6, 6, 6, 6, 6, 0, 3, 5, 3, 8, 5, 3, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [5, 5, 3, 3, 0, 2, 2, 3, 0, 2, 0, 3, 3, 0, 0, 0, 3, 1, 1, 3, 4, 2, 3, 3, 2, 4, 3, 2, 3, 3, 3, 2, 1, 2, 4, 0, 3, 0, 5], [94, 17, 37, 87, 37, 47, 87, 35, 47, 32, 7], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07317395508289337, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 6, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 1, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [33, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1], [3, 4, 2, 7, 4, 6, 5, 0, 4, 3, 0, 6, 2, 5, 6, 0, 5, 3, 2, 8, 2, 6, 4, 2, 2, 9, 0, 6, 5, 2, 0, 2, 2, 3, 8, 8, 2, 2, 6, 0, 6, 5, 6, 4, 6, 0, 0, 5, 3, 2, 8, 3, 1, 9, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [5, 5, 0, 3, 0, 2, 3, 3, 0, 2, 0, 3, 3, 0, 0, 0, 3, 3, 1, 3, 4, 2, 3, 4, 3, 4, 3, 2, 3, 3, 3, 2, 1, 2, 4, 0, 2, 0, 5, 4, 0, 3, 0, 2], [94, 69, 78, 2, 37, 47, 96, 35, 47, 75, 97, 98, 70, 64, 84], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 3, 3, 0, 59, 59, 36, 23, 8, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(grad, tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.negative(grad)))), tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, grad)))))))), tf.math.square(tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), grad))))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, tf.math.add(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), grad))), tf.math.negative(tf.math.add(beta, grad)))))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.math.add(beta, grad)), tf.math.add(beta, grad))), tf.math.sqrt(tf.math.add(beta, beta))))))))))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 9, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [3, 4, 2, 7, 4, 6, 5, 2, 4, 3, 0, 6, 2, 5, 3, 0, 5, 9, 4, 6, 2, 6, 4, 2, 2, 9, 0, 6, 5, 2, 5, 2, 2, 9, 8, 8, 2, 2, 6, 9, 6, 5, 6, 4, 6, 0, 6, 5, 3, 2, 8, 3, 1, 4, 2, 7, 4, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [5, 3, 0, 3, 0, 2, 2, 3, 0, 2, 0, 3, 3, 1, 0, 0, 3, 1, 3, 3, 4, 2, 3, 4, 2, 4, 3, 3, 3, 3, 3, 0, 5, 3, 5, 1, 3, 4, 5], [94, 58, 78, 87, 37, 47, 96, 35, 47, 32, 7], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 1, 76, 76, 48, 28, 10, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 50, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.multiply(tf.math.add(beta, tf.math.negative(grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, grad), tf.math.square(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)))))), tf.math.multiply(tf.math.negative(tf.math.square(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), beta)), grad), tf.math.divide_no_nan(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), grad)))), grad))))))), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha)))))))))))), tf.math.add(beta, grad))))))), tf.math.divide_no_nan(tf.math.square(grad), grad))))), beta), tf.math.add(beta, tf.math.divide_no_nan(tf.math.pow(grad, grad), tf.math.divide_no_nan(beta, tf.math.add(beta, grad)))))), tf.math.negative(tf.math.divide_no_nan(grad, tf.math.square(tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [6943545.258367726, 3.440402723661028e+20, 3.272600376626457, 5.822789736616613, 11.63790523194996, 24.1182864799696, 50.87124218812881], "accuracy": [0.044908203184604645, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.0356170191044354e+21, 2.3454125268118724, 3.775144577026367, 7.311037336077009, 14.971728733607701, 31.3961181640625, 66.63368443080357], "val_accuracy": [0.0989999994635582, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 8, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1], [3, 4, 2, 7, 4, 6, 8, 2, 4, 3, 0, 6, 2, 5, 6, 0, 5, 0, 4, 6, 2, 5, 4, 2, 2, 6, 0, 6, 5, 2, 0, 2, 2, 9, 8, 8, 2, 2, 6, 3, 6, 5, 6, 6, 6, 0, 3, 5, 3, 8, 5, 3, 1, 4, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [5, 2, 0, 3, 0, 2, 2, 3, 0, 2, 0, 3, 3, 0, 0, 0, 3, 1, 1, 3, 4, 3, 3, 4, 2, 4, 3, 2, 0, 3, 3, 2, 1, 2, 4, 0, 3, 0, 5], [94, 21, 78, 87, 37, 47, 96, 35, 47, 32, 80, 7], [1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [0, 1, 1, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [0, 0, 2, 3, 0, 0, 0], [6, 18, 10, 42]], "fitness": -0.08571428805589676, "mapping_values": [1, 1, 1, 0, 1, 0, 100, 100, 61, 39, 12, 1, 0, 0, 0, 0, 3, 1, 2, 2], "tree_depth": 61, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.multiply(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.negative(grad))), tf.math.divide_no_nan(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.square(tf.math.divide_no_nan(tf.math.negative(tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), grad)), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.pow(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad)))))))))))), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, alpha))), tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, grad))))), grad)))))))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(grad, grad), beta))))), grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.multiply(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, beta))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))))))), tf.math.sqrt(tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.pow(tf.math.subtract(tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, grad))), tf.math.add(tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))))))))))))), tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3031700806232918, 2.302680861790891, 2.3026095781942257, 2.301623661913939, 2.303215376500362, 2.301676201766839, 2.3020060716792026, 2.301274743834034, 2.3016886317797653, 2.3016136435154895, 2.3012427662058497, 2.3025202445381776, 2.3024748224135734, 2.3013151322436483, 2.3018904335038095, 2.3011016422778607, 2.3020527535079416, 2.30256403634073, 2.3015687505031512, 2.3012655273231424, 2.3018497638163264, 2.30095361438268, 2.3012474432849395, 2.3021203824132583, 2.301559945076149, 2.301561177036687, 2.3013857219669847, 2.303045220929933, 2.3021129386268506, 2.300889850119401, 2.3023186712185657, 2.302237342330112, 2.3019916247918446, 2.300508403381289, 2.301788396776124, 2.3003622118539626, 2.3009353627492217, 2.3014231712873885, 2.3016763227868626, 2.300343920667772, 2.301126695532667, 2.3003731467673147, 2.3012690745356092, 2.30075301725347, 2.3008193830536214, 2.3009442222778116, 2.300601913723979, 2.300574856002207, 2.300525783059651, 2.3007302356040267, 2.301388628053596, 2.29956099927512, 2.3007188170829456, 2.301241243740571, 2.3012904623291353, 2.300670676652734, 2.3016252901890746, 2.301602784715954, 2.3004344211924015, 2.300473961044753, 2.3011943173525027, 2.30063642691533, 2.3002539581673696, 2.301180019197274, 2.3006373178910082, 2.3008536050159383, 2.301197997488602, 2.302136478863687, 2.301551595418807, 2.3005933210818585, 2.3010602540910647, 2.300591382084742, 2.3007315681469107, 2.300791349613813, 2.3015300630184763, 2.2989317487180823, 2.3010520862944137, 2.3009195841062557, 2.300814669885813, 2.3010682613779414], "accuracy": [0.09126931428909302, 0.09060890227556229, 0.08994849026203156, 0.0936468094587326, 0.08638224750757217, 0.09272222965955734, 0.08955223858356476, 0.0882314071059227, 0.09245806187391281, 0.0944393053650856, 0.09113723784685135, 0.09642054885625839, 0.08981640636920929, 0.09325055778026581, 0.09311848133802414, 0.09813763201236725, 0.08558975160121918, 0.0874389111995697, 0.08889182657003403, 0.09259014576673508, 0.08717474341392517, 0.09285431355237961, 0.09338264167308807, 0.08928807079792023, 0.09087307006120682, 0.09760929644107819, 0.09377889335155487, 0.08651433140039444, 0.09166556596755981, 0.09813763201236725, 0.08994849026203156, 0.08915598690509796, 0.09245806187391281, 0.09879804402589798, 0.09153348207473755, 0.09787346422672272, 0.09245806187391281, 0.09734513610601425, 0.08717474341392517, 0.09694888442754745, 0.09787346422672272, 0.09232597798109055, 0.09206181764602661, 0.09509972482919693, 0.09549596905708313, 0.09351472556591034, 0.0936468094587326, 0.0936468094587326, 0.09351472556591034, 0.09681680053472519, 0.09021265059709549, 0.09813763201236725, 0.08928807079792023, 0.08968432247638702, 0.09192973375320435, 0.0944393053650856, 0.08889182657003403, 0.09602430462837219, 0.08955223858356476, 0.09813763201236725, 0.09628847241401672, 0.09536388516426086, 0.10038304328918457, 0.10302469879388809, 0.09496764093637466, 0.09430722147226334, 0.09615638852119446, 0.09311848133802414, 0.09272222965955734, 0.09774138033390045, 0.09813763201236725, 0.09470347315073013, 0.09879804402589798, 0.09272222965955734, 0.0886276587843895, 0.1002509593963623, 0.09285431355237961, 0.09576013684272766, 0.09589222073554993, 0.09628847241401672], "val_loss": [1.970984663282122, 1.9709619794573103, 1.970940317426409, 1.970918927873884, 1.9708973339625768, 1.9708764893668038, 1.970855440412249, 1.9708349364144462, 1.9708142280578613, 1.9707933153424944, 1.970773765019008, 1.9707553727286202, 1.9707375253949846, 1.9707202911376953, 1.9707029887608118, 1.9706861632210868, 1.9706707000732422, 1.9706566674368722, 1.9706439290727888, 1.9706313269478934, 1.970618792942592, 1.970606463296073, 1.970594814845494, 1.9705830301557268, 1.970571858542306, 1.9705613000052316, 1.9705513545445033, 1.9705420221601213, 1.9705333709716797, 1.9705254690987724, 1.9705181121826172, 1.9705115045819963, 1.9705046245029993, 1.9704981531415666, 1.9704920223781042, 1.9704863684517997, 1.9704809188842773, 1.9704758780343192, 1.9704724039350237, 1.9704696791512626, 1.9704681124005998, 1.9704666137695312, 1.9704667500087194, 1.9704672949654716, 1.9704677036830358, 1.970467976161412, 1.9704690660749162, 1.970470973423549, 1.9704728807721819, 1.970475333077567, 1.9704788071768624, 1.9704828262329102, 1.9704858916146415, 1.970489229474749, 1.9704931804112025, 1.9704971994672502, 1.9705027171543665, 1.9705092566353934, 1.9705157961164201, 1.9705228124346053, 1.9705301012311662, 1.9705373900277274, 1.9705446788242884, 1.9705530575343542, 1.9705617087227958, 1.9705706323896135, 1.9705799647739954, 1.9705893652779716, 1.9705994469778878, 1.9706100736345564, 1.9706213133675712, 1.9706333705357142, 1.9706463132585799, 1.9706600734165736, 1.9706741741725378, 1.970689160483224, 1.9707044192722865, 1.9707194055829729, 1.970735822405134, 1.9707531247820174], "val_accuracy": [0.03866666555404663, 0.03933333232998848, 0.03933333232998848, 0.03966666758060455, 0.04066666588187218, 0.04100000113248825, 0.04233333468437195, 0.04266666620969772, 0.04333333298563957, 0.044333335012197495, 0.04466666653752327, 0.04500000178813934, 0.04466666653752327, 0.04466666653752327, 0.04500000178813934, 0.045666664838790894, 0.04633333161473274, 0.047333333641290665, 0.04699999839067459, 0.047333333641290665, 0.04766666516661644, 0.04833333194255829, 0.04866666719317436, 0.049666665494441986, 0.05066666752099991, 0.05066666752099991, 0.05133333429694176, 0.052666667848825455, 0.0533333346247673, 0.054999999701976776, 0.055666666477918625, 0.055666666477918625, 0.0560000017285347, 0.056333333253860474, 0.05833333358168602, 0.059333331882953644, 0.05999999865889549, 0.059333331882953644, 0.06066666543483734, 0.060333333909511566, 0.061666667461395264, 0.06133333221077919, 0.06133333221077919, 0.06199999898672104, 0.06300000101327896, 0.06333333253860474, 0.06400000303983688, 0.06333333253860474, 0.06466666609048843, 0.06599999964237213, 0.06666667014360428, 0.06700000166893005, 0.06800000369548798, 0.06933332979679108, 0.07000000029802322, 0.06933332979679108, 0.07133333384990692, 0.07233333587646484, 0.07199999690055847, 0.07233333587646484, 0.0729999989271164, 0.07333333045244217, 0.07500000298023224, 0.07566666603088379, 0.07566666603088379, 0.07699999958276749, 0.07800000160932541, 0.07900000363588333, 0.07900000363588333, 0.07999999821186066, 0.0806666687130928, 0.08100000023841858, 0.08133333176374435, 0.0820000022649765, 0.08266666531562805, 0.08233333379030228, 0.08266666531562805, 0.08266666531562805, 0.08266666531562805, 0.08266666531562805]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 0, 3, 7, 9, 4, 1, 2, 0, 2, 1, 2, 2, 2, 3, 5, 2, 1, 8, 9, 6, 8, 2, 6, 8, 4, 5, 4, 1, 4], [2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 2, 2, 1, 2, 1], [40, 33, 37, 70, 77, 81, 89, 98, 7, 56], [1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [3, 4, 2, 7, 4, 6, 5, 2, 4, 3, 0, 2, 2, 5, 6, 0, 5, 3, 4, 6, 9, 6, 4, 2, 2, 9, 0, 6, 5, 2, 0, 2, 2, 8, 8, 8, 2, 2, 6, 0, 6, 5, 6, 4, 6, 0, 5, 5, 3, 2, 1, 3, 1, 5, 1, 7, 2, 2, 5, 8, 9, 0, 3, 1, 1, 6, 6, 8, 4, 5, 3, 4, 0, 7, 9, 1, 8, 2, 4, 5, 4, 0], [0, 3, 0, 3, 0, 2, 2, 3, 0, 1, 0, 3, 3, 0, 0, 2, 3, 1, 3, 3, 4, 3, 3, 0, 2, 4, 3, 2, 3, 3, 3, 5, 1, 3, 2, 4, 1, 2, 1, 2, 2, 0, 4, 2], [94, 21, 78, 87, 37, 47, 96, 15, 47, 32, 3, 46], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [6, 5, 2, 3, 8, 8, 8, 4, 0, 7, 6], [1, 1, 1, 4, 3, 4], [44], [1, 1, 0, 1, 1, 0, 1, 0, 1], [3, 5, 8, 1, 1, 5, 9, 7, 4, 8, 0, 7, 9], [1, 0, 2, 3, 0, 0, 0], [53, 18, 10, 42]], "fitness": -0.034857142716646194, "mapping_values": [1, 8, 8, 4, 4, 1, 14, 14, 7, 7, 3, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), beta))))))), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.303187430574122, 2.3027453793825616, 2.3027258313894112, 2.301774307437907, 2.3034141753343715, 2.3019063343004764], "accuracy": [0.09140139818191528, 0.09060890227556229, 0.08928807079792023, 0.09351472556591034, 0.08572183549404144, 0.09245806187391281], "val_loss": [1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814, 1.9710068021501814], "val_accuracy": [0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716]}}]