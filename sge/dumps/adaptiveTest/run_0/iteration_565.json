[{"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0], [6, 3, 0, 2, 9, 6, 3, 0, 3, 5, 2, 9], [1, 2, 1, 2, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [20, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 5, 3, 3, 0], [45, 84, 6], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.8514285683631897, "mapping_values": [1, 18, 18, 12, 6, 3, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))))))), tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.square(grad)))), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))))))), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.9353545092950644, 1.344683001369234, 0.9927696611714039, 0.7249808556068968, 0.6289199265065746, 0.6091155388005389, 0.5616958994182693, 0.5310939545833581, 0.5088628739366567, 0.4941370681748965, 0.4707150403117428, 0.4567988871260562, 0.43585515800106245, 0.43732808768678383, 0.40743041965530347, 0.40297083926868477, 0.3928556424822585, 0.38792312035408194, 0.37202426614447703, 0.3587201550541899, 0.35438432310944173, 0.3418804690420919, 0.33820511623301824, 0.3282578169921638, 0.3132374333100879, 0.3087671660767602, 0.2967069305960749, 0.28881004801862165, 0.28798064487154584, 0.27818097499115685, 0.2676077295941542, 0.28150395141884227, 0.2644623742009419, 0.2624250616080662, 0.2561048493802886, 0.24973544593161878, 0.24657419479801795, 0.22980452648652716, 0.2299832007699497, 0.2296207246842118, 0.22706161563414717, 0.2223848690485611], "accuracy": [0.3465856611728668, 0.5124818682670593, 0.6413947939872742, 0.7259278893470764, 0.76106196641922, 0.7746664881706238, 0.7890635132789612, 0.8038568496704102, 0.8084797263145447, 0.8162726163864136, 0.8301413059234619, 0.8335754871368408, 0.8432175517082214, 0.8397833704948425, 0.8486329317092896, 0.8582749962806702, 0.8564258217811584, 0.8582749962806702, 0.8610487580299377, 0.867520809173584, 0.8706908226013184, 0.8770307898521423, 0.8761062026023865, 0.8816536664962769, 0.8870691061019897, 0.887201189994812, 0.887597382068634, 0.894069492816925, 0.8938053250312805, 0.8949940800666809, 0.8996169567108154, 0.8911636471748352, 0.8986923694610596, 0.9009377956390381, 0.9054285883903503, 0.906749427318573, 0.9105798602104187, 0.9125610589981079, 0.9126931428909302, 0.91559898853302, 0.9149385690689087, 0.9137498140335083], "val_loss": [1.3041177817753382, 0.9434892790658134, 0.6108042682920184, 0.508909923689706, 0.4869070734296526, 0.46447907175336567, 0.423664927482605, 0.4114811931337629, 0.4159442867551531, 0.3858384830611093, 0.3928535665784563, 0.38447352818080355, 0.35847215141568867, 0.38235011271068026, 0.33558651379176546, 0.3501006705420358, 0.3506029759134565, 0.327930748462677, 0.3185213804244995, 0.3218582698277065, 0.31082625899996075, 0.31184730359486174, 0.30515032155173166, 0.3078746625355312, 0.30741814204624723, 0.31166212047849384, 0.31122091838291716, 0.3055389012609209, 0.30563399621418547, 0.2953344072614397, 0.30933111906051636, 0.28608075210026335, 0.3015893186841692, 0.2891170637948172, 0.3066933751106262, 0.2953141416822161, 0.2875973582267761, 0.28525471687316895, 0.2969507319586618, 0.2909902589661734, 0.2885646309171404, 0.29006723846708027], "val_accuracy": [0.43299999833106995, 0.6056666374206543, 0.7266666889190674, 0.7680000066757202, 0.7829999923706055, 0.7839999794960022, 0.8119999766349792, 0.8199999928474426, 0.8080000281333923, 0.824999988079071, 0.8316666483879089, 0.8323333263397217, 0.8463333249092102, 0.8296666741371155, 0.8539999723434448, 0.8410000205039978, 0.8460000157356262, 0.8519999980926514, 0.859333336353302, 0.8556666374206543, 0.8633333444595337, 0.859333336353302, 0.8629999756813049, 0.8616666793823242, 0.8669999837875366, 0.859666645526886, 0.8646666407585144, 0.8653333187103271, 0.8663333058357239, 0.871999979019165, 0.8603333234786987, 0.8813333511352539, 0.8709999918937683, 0.8776666522026062, 0.8769999742507935, 0.878000020980835, 0.8816666603088379, 0.878333330154419, 0.878333330154419, 0.8759999871253967, 0.878333330154419, 0.8803333044052124]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [6, 3, 8, 2, 9, 6, 1, 5, 2, 5, 2], [2, 2, 0, 2, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [51, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 5, 3, 3, 0], [45, 84, 6], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.8362857103347778, "mapping_values": [1, 12, 12, 7, 5, 2, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.9349243057055985, 1.3422491931172096, 0.9828806008723875, 0.7195125208979883, 0.6275791973958099, 0.6081107614960227, 0.5604409534445276, 0.5284225142800403, 0.5076741669250753, 0.4917501927941561, 0.47063828828611615, 0.4537800150446022, 0.43780340989819133, 0.4313018676304405, 0.4096501752795198, 0.4011612862738258, 0.39277225669821286, 0.38626956441351734, 0.3765834092605761, 0.3559992204977143, 0.35351827302550315, 0.3454825418020016, 0.34477156464056236, 0.33111139072277257, 0.3101336810338798, 0.31279217545398236, 0.3025177911036145, 0.284979204428651, 0.2875134923856146, 0.2758804881349137, 0.2748766722475706, 0.2729769023323513, 0.26345618929861087, 0.2613205082892679, 0.25794710003389676, 0.2503060953015775, 0.25106215131375703, 0.23883007173926493, 0.23125477859671908, 0.22624246968396067, 0.2296989349176729, 0.22371112952150798], "accuracy": [0.3465856611728668, 0.5143309831619263, 0.6439043879508972, 0.7288337349891663, 0.7601373791694641, 0.7766477465629578, 0.7897239327430725, 0.8039889335632324, 0.8121780753135681, 0.8189142942428589, 0.8260467648506165, 0.833179235458374, 0.8411042094230652, 0.8411042094230652, 0.8511425256729126, 0.8555012345314026, 0.8548408150672913, 0.86118084192276, 0.8595958352088928, 0.8704266548156738, 0.8683133125305176, 0.8749174475669861, 0.8757099509239197, 0.8820499181747437, 0.8870691061019897, 0.8869370222091675, 0.8879936337471008, 0.8951261639595032, 0.8893144726753235, 0.8967111110687256, 0.8957865834236145, 0.8951261639595032, 0.9019944667816162, 0.9008057117462158, 0.9035794734954834, 0.9075419306755066, 0.9097873568534851, 0.9101836085319519, 0.9144102334976196, 0.9161273241043091, 0.9124290347099304, 0.9169198274612427], "val_loss": [1.3034818513052804, 0.9298550060817173, 0.6079667636326381, 0.5077413320541382, 0.485036986214774, 0.4680248498916626, 0.42099529504776, 0.40503679854529245, 0.4172540732792446, 0.3874020150729588, 0.3918290393693106, 0.39230336461748394, 0.3499502624784197, 0.3695421644619533, 0.3372272423335484, 0.3544785295213972, 0.3414083889552525, 0.3302659051758902, 0.32080539635249544, 0.3187355824879238, 0.31815771545682636, 0.31175718137196134, 0.31148708718163626, 0.3044721143586295, 0.30550454344068256, 0.31902939081192017, 0.29999380452292307, 0.31366160086223055, 0.3012443780899048, 0.29546270200184416, 0.3030182974679129, 0.28655420882361277, 0.30226354939596994, 0.28546268599373953, 0.2977668557848249, 0.29706121342522757, 0.29345768690109253, 0.28408713000161306, 0.2916469233376639, 0.2905273863247463, 0.2865246364048549, 0.29107063157217844], "val_accuracy": [0.4339999854564667, 0.6100000143051147, 0.7253333330154419, 0.7639999985694885, 0.7853333353996277, 0.7863333225250244, 0.8140000104904175, 0.8236666917800903, 0.8073333501815796, 0.8273333311080933, 0.8333333134651184, 0.8299999833106995, 0.8450000286102295, 0.8379999995231628, 0.8519999980926514, 0.8366666436195374, 0.8476666808128357, 0.8496666550636292, 0.8550000190734863, 0.8610000014305115, 0.8573333621025085, 0.8576666712760925, 0.8536666631698608, 0.8669999837875366, 0.8650000095367432, 0.8640000224113464, 0.8706666827201843, 0.8633333444595337, 0.8700000047683716, 0.871999979019165, 0.862333357334137, 0.8796666860580444, 0.8676666617393494, 0.8796666860580444, 0.8759999871253967, 0.874666690826416, 0.8826666474342346, 0.8790000081062317, 0.878000020980835, 0.8809999823570251, 0.875333309173584, 0.8813333511352539]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1], [6, 3, 0, 2, 6, 6, 1, 0, 3, 5, 2, 4, 1, 3, 2], [0, 2, 0, 2, 2, 1, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 5, 3, 3, 0], [45, 84, 6], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.8360000252723694, "mapping_values": [1, 28, 28, 15, 13, 3, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.subtract(tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(grad)))), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, alpha))))))), tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), tf.math.add(alpha, grad)))))), alpha)), tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, grad), grad), grad))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.934922329863978, 1.3435648575655426, 0.9725964512287776, 0.7184186205572975, 0.6256576284299736, 0.6063555230270555, 0.5603939189241389, 0.5312417763540096, 0.5048876263288821, 0.48925973187033306, 0.47547214830855433, 0.4518977557041421, 0.4444255443564684, 0.43632632408947003, 0.4058193140742549, 0.4010801888365614, 0.3959611527648317, 0.3836355432267706, 0.3709796170446111, 0.3575777742628408], "accuracy": [0.3465856611728668, 0.5148593187332153, 0.646149754524231, 0.7288337349891663, 0.7626469135284424, 0.7784969210624695, 0.7886672616004944, 0.8001585006713867, 0.8103289008140564, 0.819970965385437, 0.8232730031013489, 0.8350284099578857, 0.8392550349235535, 0.8411042094230652, 0.8520671129226685, 0.8555012345314026, 0.8535200357437134, 0.8643507957458496, 0.8625016212463379, 0.8689737319946289], "val_loss": [1.3034747328077043, 0.9146011897495815, 0.6056728533336094, 0.5078856774738857, 0.48372416836874826, 0.4652366467884609, 0.4218711086681911, 0.4064708522387913, 0.40309299741472515, 0.39003714493342806, 0.3961396643093654, 0.3962136847632272, 0.3556139213698251, 0.35947355202266146, 0.3329316973686218, 0.3575626867158072, 0.34022524527141024, 0.32372855288641794, 0.3231536831174578, 0.32383804661887033], "val_accuracy": [0.43433332443237305, 0.6179999709129333, 0.7250000238418579, 0.7646666765213013, 0.7820000052452087, 0.7836666703224182, 0.8086666464805603, 0.8270000219345093, 0.8186666369438171, 0.8293333053588867, 0.8243333101272583, 0.8243333101272583, 0.8429999947547913, 0.843666672706604, 0.8550000190734863, 0.8389999866485596, 0.8500000238418579, 0.8519999980926514, 0.8539999723434448, 0.8546666502952576]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1], [6, 3, 0, 2, 9, 6, 1, 0, 3, 5, 2], [1, 2, 2, 2, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 5, 3, 3, 0], [45, 84, 6], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.8311428427696228, "mapping_values": [1, 16, 16, 10, 6, 2, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))))), tf.math.add(alpha, grad))), tf.math.subtract(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.square(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.9349221443818183, 1.343558510139303, 0.9814052882447707, 0.7207898945935005, 0.6262917911859945, 0.6027370939212563, 0.554977690609864, 0.5266749757455088, 0.5056631389295326, 0.4877331812407567, 0.47800613297935585, 0.4530152352557537, 0.4371940646354533, 0.43080420063282315, 0.40374012135747656, 0.40112856293020627, 0.39183523371203577, 0.3913324156008723, 0.3729346660165707, 0.35605346123225273, 0.35890165526381007, 0.35032492648923813, 0.3373627216745724, 0.3275683290647273, 0.30959377483196737, 0.30705650270245, 0.2945388442119666, 0.2923148766980746, 0.2954831370950265, 0.2797836082061331, 0.2689339340386563], "accuracy": [0.3465856611728668, 0.5147272348403931, 0.6444327235221863, 0.7260599732398987, 0.7581561207771301, 0.778232753276825, 0.7907806038856506, 0.8057059645652771, 0.8125742673873901, 0.8202351331710815, 0.8234050869941711, 0.8348963260650635, 0.8418967127799988, 0.8421608805656433, 0.8512746095657349, 0.8544445633888245, 0.8584070801734924, 0.858671247959137, 0.8590674996376038, 0.8725399374961853, 0.8691058158874512, 0.8746532797813416, 0.8784837126731873, 0.8819178342819214, 0.8861445188522339, 0.8862766027450562, 0.8881257176399231, 0.8922203183174133, 0.8898428082466125, 0.8956544995307922, 0.8996169567108154], "val_loss": [1.3034960201808385, 0.9191995007651192, 0.6080215658460345, 0.5074061325618199, 0.4825061048780169, 0.4598021847861154, 0.4204038807324001, 0.412111725125994, 0.3986015404973711, 0.38725474051066805, 0.398912250995636, 0.3892703226634434, 0.3530000959123884, 0.36024985143116545, 0.3378487910543169, 0.3584696054458618, 0.3472797189440046, 0.323404746396201, 0.3197022080421448, 0.32607491527284893, 0.32014105149677824, 0.310858530657632, 0.3148850543158395, 0.3046759196690151, 0.30337498017719816, 0.3070319380078997, 0.3139184032167707, 0.3316542591367449, 0.2999503016471863, 0.2986976334026882, 0.3102494648524693], "val_accuracy": [0.4336666762828827, 0.6156666874885559, 0.7236666679382324, 0.7676666378974915, 0.7836666703224182, 0.7879999876022339, 0.8090000152587891, 0.8199999928474426, 0.8226666450500488, 0.8286666870117188, 0.8206666707992554, 0.8309999704360962, 0.8426666855812073, 0.8356666564941406, 0.8489999771118164, 0.8363333344459534, 0.847000002861023, 0.859333336353302, 0.859666645526886, 0.8496666550636292, 0.8613333106040955, 0.8566666841506958, 0.8560000061988831, 0.8629999756813049, 0.862666666507721, 0.8700000047683716, 0.8666666746139526, 0.8560000061988831, 0.8700000047683716, 0.8700000047683716, 0.859666645526886]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1], [6, 3, 8, 2, 9, 6, 1, 0, 9, 5, 2], [0, 2, 1, 2, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 5, 3, 3, 0], [8, 84, 6], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.7200000286102295, "mapping_values": [1, 13, 13, 9, 4, 3, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))))), tf.math.add(alpha, alpha))), tf.math.subtract(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3016361724494265, 2.297077369948168, 2.2906628361058163, 2.2791708283782746, 2.2636299594014533, 2.2491873908493227, 2.2269412432017974, 2.203151761485664, 2.1694567629280437, 2.1312273752262656, 2.0809475796774723, 2.0151578400349495, 1.933752696165524, 1.8377639963138435, 1.7293322473831338, 1.6159150379523783, 1.525808341971415, 1.4722304061072897, 1.404701388979695, 1.3911460043968007, 1.3656450240934184, 1.3542626314253903, 1.3685751679614078, 1.3438970135848882, 1.2578529146101496, 1.1843214733898837, 1.1422744859809557, 1.0500385066726345, 0.9836299694319758, 0.9271509928033179, 0.9173960050555929, 0.9124219601322174, 0.9198278084863777, 0.9159974379625145, 0.9252516414117441, 0.9048260788576808, 0.9000630926430863, 0.8742261595099972, 0.850452743005192, 0.8278816846446464], "accuracy": [0.09100515395402908, 0.10791176557540894, 0.12389380484819412, 0.1516312211751938, 0.19561484456062317, 0.23035265505313873, 0.28041210770606995, 0.30880993604660034, 0.34460440278053284, 0.361378937959671, 0.37722888588905334, 0.3979659080505371, 0.4204200208187103, 0.4290054142475128, 0.4496103525161743, 0.4613657295703888, 0.47827234864234924, 0.4951789677143097, 0.5038964748382568, 0.5235767960548401, 0.5348038673400879, 0.544181764125824, 0.5560691952705383, 0.5626733303070068, 0.5888257622718811, 0.6140536069869995, 0.629111111164093, 0.6390172839164734, 0.6485272645950317, 0.6556597352027893, 0.6519614458084106, 0.6556597352027893, 0.6505085229873657, 0.6616035103797913, 0.6616035103797913, 0.6795667409896851, 0.6808875799179077, 0.6802271604537964, 0.6913221478462219, 0.6940959095954895], "val_loss": [1.9689737728663854, 1.9633962767464774, 1.9544270379202706, 1.9423034531729562, 1.9272518839154924, 1.9092888832092285, 1.8879026004246302, 1.8618172918047224, 1.8286093303135462, 1.785670552934919, 1.7302468163626534, 1.6589735916682653, 1.569420678274972, 1.4621597358158656, 1.3428951331547327, 1.2229790006365096, 1.1144062110355921, 1.0239455359322684, 0.9497659206390381, 0.8890632901872907, 0.8454500266483852, 0.8249531473432269, 0.8050472906657627, 0.7671198163713727, 0.749405060495649, 0.7504721879959106, 0.7372328213282994, 0.7006729160036359, 0.6679108313151768, 0.6635486398424421, 0.6743554387773786, 0.682843804359436, 0.6902994768960136, 0.6964278732027326, 0.6955336162022182, 0.6851990222930908, 0.6669417790004185, 0.6457492794309344, 0.6263988528932843, 0.6133891003472465], "val_accuracy": [0.049666665494441986, 0.08533333241939545, 0.17599999904632568, 0.28433331847190857, 0.3413333296775818, 0.36633333563804626, 0.3863333463668823, 0.40566667914390564, 0.4283333420753479, 0.4476666748523712, 0.4726666808128357, 0.4880000054836273, 0.5056666731834412, 0.5276666879653931, 0.5490000247955322, 0.5696666836738586, 0.5903333425521851, 0.6233333349227905, 0.6543333530426025, 0.6710000038146973, 0.6736666560173035, 0.6703333258628845, 0.6683333516120911, 0.6970000267028809, 0.6986666917800903, 0.7016666531562805, 0.7026666402816772, 0.7076666951179504, 0.7170000076293945, 0.7223333120346069, 0.7053333520889282, 0.7036666870117188, 0.7120000123977661, 0.7246666550636292, 0.7419999837875366, 0.7363333106040955, 0.7319999933242798, 0.7306666374206543, 0.7303333282470703, 0.7296666502952576]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1], [6, 3, 0, 2, 9, 8, 1, 0, 3, 5, 2], [0, 2, 0, 2, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [51, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [1, 5, 3, 3, 0], [45, 84, 6], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [3, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.1362857073545456, "mapping_values": [1, 9, 9, 6, 3, 3, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(tf.math.add(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad)), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(alpha, tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1743.8483905094395, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09298639744520187, 0.10513802617788315, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [9.945083900367434e+16, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [8, 3, 0, 2, 9, 6, 5, 0, 2, 5, 2], [1, 2, 2, 2, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 5, 3, 3, 0], [45, 84, 6], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [1, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 9, 4, 1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))))))), tf.math.negative(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06432439386844635, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [9, 3, 0, 2, 1, 6, 2, 0, 3, 5, 2], [0, 2, 0, 2, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [51, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 1, 3, 3, 0], [85, 84, 6], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [3, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [235080198.21605295, 4463935901.73874, 20945445546.756836, 58661011242.84137, 124250618140.30168, 230169161770.73993], "accuracy": [0.10051512718200684, 0.10051512718200684, 0.09760929644107819, 0.09826971590518951, 0.10130762308835983, 0.10157178342342377], "val_loss": [886378880.0, 7088348306.285714, 23920193536.0, 56696093549.71429, 110731088457.14285, 191338517065.14285], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [4, 3, 0, 2, 9, 6, 2, 0, 3, 5, 2], [2, 0, 0, 2, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [51, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 5, 3, 3, 0], [45, 84, 6], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [0, 4, 6], [64, 55], [0, 1, 0, 1, 0, 0, 0, 1], [8, 7, 0, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 8, 5, 3, 5, 5, 3, 2, 2, 1, 1, 0, 1, 1, 2, 1, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))))))), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.negative(tf.math.add(alpha, grad)), grad))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [6, 3, 0, 0, 3, 6, 1, 2, 3, 5, 2, 1, 6, 1, 8], [2, 0, 0, 2, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [62, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [2, 7, 9, 0, 1, 9], [0, 5, 3, 3, 0], [45, 84, 6], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 0, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 27, 27, 15, 12, 4, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), tf.math.square(grad)), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))))), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), tf.math.subtract(tf.math.add(alpha, alpha), grad)))), tf.math.add(alpha, tf.math.sqrt(grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.302001497166394, 2.3029766040565693, 2.302927944118856, 2.302888801651797, 2.302990406007657, 2.302853566024754, 2.3030304850808947, 2.302925630158059, 2.3030696709740823, 2.3029751806935583, 2.3029425068302176, 2.3029282947399707, 2.3030405297113714, 2.3030281685063425], "accuracy": [0.09351472556591034, 0.09879804402589798, 0.0944393053650856, 0.09708096832036972, 0.0944393053650856, 0.09972262382507324, 0.09311848133802414, 0.09668471664190292, 0.09430722147226334, 0.09668471664190292, 0.09457138925790787, 0.09642054885625839, 0.09681680053472519, 0.09140139818191528], "val_loss": [1.9736851964678084, 1.9736685071672713, 1.9737011364528112, 1.9737602642604284, 1.9736885343279158, 1.9736817904881068, 1.9736642837524414, 1.9736482756478446, 1.9736193248203822, 1.9736641475132533, 1.9736426217215401, 1.9736581529889787, 1.9736569949558802, 1.9737206186567033], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.10000000149011612, 0.09933333098888397, 0.10000000149011612, 0.09933333098888397, 0.10000000149011612, 0.1003333330154419, 0.10133333504199982, 0.09833333641290665, 0.1003333330154419, 0.1003333330154419, 0.10133333504199982, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [6, 3, 5, 2, 9, 6, 1, 0, 2, 5, 2], [1, 2, 0, 1, 1, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 82, 30, 57, 93, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [1, 1, 0, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 5, 3, 3, 0], [45, 84, 6], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 0, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.multiply(grad, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.square(beta), tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2723211545.6355534, 3384751884438.672, 211774215043520.78, 3791764537257386.0, 3.3516296163940084e+16, 1.982353369786684e+17], "accuracy": [0.1002509593963623, 0.10051512718200684, 0.09760929644107819, 0.09840179979801178, 0.1010434553027153, 0.10091137140989304], "val_loss": [43320314148.57143, 17077366985289.143, 600038798374619.4, 7635990296695369.0, 5.537781857453905e+16, 2.8055439096616432e+17], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [6, 4, 1, 0, 9, 1, 2, 0, 3, 5, 2], [0, 2, 0, 2, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [51, 82, 84, 57, 93, 59, 23, 22, 72, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 1, 3, 3, 0], [45, 84, 6], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [3, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 15, 9, 6, 4, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.subtract(tf.math.negative(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.subtract(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.negative(tf.math.add(alpha, grad)), tf.math.multiply(grad, tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1], [6, 3, 0, 2, 9, 6, 6, 0, 3, 5, 2], [0, 2, 0, 2, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [23, 82, 94, 57, 93, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 5, 3, 3, 0], [38, 84, 6], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 16, 10, 6, 4, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, grad)), tf.math.multiply(grad, tf.math.add(alpha, tf.math.square(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3016805946393935, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1], [6, 3, 0, 2, 9, 8, 1, 0, 3, 5, 2], [1, 2, 2, 2, 2, 2, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [61, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 5, 3, 3, 0], [45, 84, 6], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [7, 4, 6], [64, 55], [1, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 5, 3, 1, 5, 5, 3, 2, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, grad))), grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07013604789972305, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [9, 3, 0, 2, 9, 6, 2, 0, 3, 5, 2], [2, 0, 0, 2, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [1, 0, 1, 1, 0, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 5, 3, 3, 0], [67, 87, 6], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 0, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3016805946393935, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1], [6, 3, 0, 0, 8, 1, 2, 0, 3, 5, 2], [0, 2, 0, 2, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [51, 25, 64, 57, 93, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 1, 3, 3, 0], [45, 84, 6], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [3, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 16, 10, 6, 3, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))))))), tf.math.add(tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), grad)), grad)), tf.math.add(alpha, tf.math.square(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0540219247341156, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1], [5, 3, 0, 2, 9, 6, 1, 0, 0, 5, 2], [0, 2, 0, 2, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [23, 12, 41, 57, 93, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [8, 7, 9, 0, 1, 9], [0, 5, 3, 3, 0], [45, 84, 6], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 10, 4, 3, 2, 2, 1, 1, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(grad, tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.math.square(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))))))))))), grad))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3016805946393935, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [9, 3, 0, 2, 1, 6, 2, 0, 3, 5, 2], [0, 2, 0, 2, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [51, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 5, 3, 3, 0], [91, 84, 6], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [8, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1], [6, 3, 5, 2, 9, 8, 1, 0, 3, 5, 2], [0, 2, 0, 2, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [61, 59, 84, 57, 93, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 0], [8, 7, 9, 0, 1, 9], [0, 5, 3, 3, 0], [45, 84, 6], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [0, 0, 2], [6, 32, 85]], "fitness": -0.09828571230173111, "mapping_values": [1, 9, 9, 6, 3, 3, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 2, 1, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.363304462320753, 3.030153766614949, 4.902846573303247, 8.032233655161436, 12.285364007275922, 17.97039921641775], "accuracy": [0.09377889335155487, 0.09945846349000931, 0.09668471664190292, 0.09840179979801178, 0.10236428678035736, 0.10170386731624603], "val_loss": [2.0900934764317105, 2.7702065195356096, 4.2821036747523715, 6.584317479814802, 9.648905072893415, 13.518445696149554], "val_accuracy": [0.10066666454076767, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [6, 3, 5, 2, 9, 6, 1, 0, 3, 5, 2], [1, 2, 2, 2, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [31, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 5, 3, 3, 0], [45, 84, 6], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [3, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [3, 0, 2], [6, 32, 85]], "fitness": -0.035999998450279236, "mapping_values": [1, 12, 12, 7, 5, 1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))))), tf.math.add(alpha, grad))), tf.math.subtract(grad, tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.302204551446109, 2.3013367069994124, 2.302358933128717, 2.3018482877058424, 2.300050417823625, 2.303148564566805], "accuracy": [0.08955223858356476, 0.09787346422672272, 0.09140139818191528, 0.09074098616838455, 0.10038304328918457, 0.08915598690509796], "val_loss": [1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056], "val_accuracy": [0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856]}}]