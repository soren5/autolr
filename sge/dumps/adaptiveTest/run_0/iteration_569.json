[{"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1], [0, 3, 0, 2, 4, 1, 0, 0, 3, 5, 2, 8, 4, 1], [2, 2, 0, 2, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 5, 3, 3, 0], [45, 84, 6], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.8445714116096497, "mapping_values": [1, 9, 9, 5, 4, 1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.8933030077495028, 1.0014933477996157, 0.7255374403630328, 0.6512154144397454, 0.6180457662534657, 0.5652392435665884, 0.5241825891137831, 0.48772373150730525, 0.48639483365872754, 0.4596248049076916, 0.4486173176337164, 0.43350066619148625, 0.4146461007247401, 0.4085014287105342, 0.39914865670753996, 0.3733098131672518, 0.3643045785200043, 0.3515629308720653, 0.34153642945002416, 0.33236289303048633, 0.31400993551796674, 0.31696474238818806, 0.32648128598609605, 0.30459612121813173, 0.29021993663647644, 0.2666907500219288, 0.2755229328648919, 0.26548918171597197, 0.2646148925849617, 0.24964659506256523], "accuracy": [0.37405890226364136, 0.6446968913078308, 0.7294940948486328, 0.752740740776062, 0.7631752490997314, 0.7890635132789612, 0.8042530417442322, 0.8190463781356812, 0.8227446675300598, 0.8297450542449951, 0.839519202709198, 0.8339717388153076, 0.8455950617790222, 0.8525954484939575, 0.8490291833877563, 0.8614450097084045, 0.8702945709228516, 0.8714832663536072, 0.8735966086387634, 0.8782195448875427, 0.8821820020675659, 0.8841632604598999, 0.8799365758895874, 0.886672854423523, 0.8947299122810364, 0.9009377956390381, 0.8942015767097473, 0.9019944667816162, 0.9006736278533936, 0.906749427318573], "val_loss": [1.122988258089338, 0.5966858863830566, 0.5226023197174072, 0.5368416139057705, 0.500816992350987, 0.4249325820377895, 0.4028330956186567, 0.41260941539491924, 0.38281329189028057, 0.36500127826418194, 0.3713118519101824, 0.36057192938668386, 0.3540594833237784, 0.35122017349515644, 0.3285426071711949, 0.33011592285973684, 0.33141861643110004, 0.31136246238436016, 0.3086699332509722, 0.3142673373222351, 0.3209071670259748, 0.3256280677659171, 0.2992122343608311, 0.29881381137030466, 0.29556475366864887, 0.2950960568019322, 0.28680738380977083, 0.2992598329271589, 0.308334869997842, 0.3062916227749416], "val_accuracy": [0.5383333563804626, 0.7456666827201843, 0.7616666555404663, 0.7616666555404663, 0.762666642665863, 0.8136666417121887, 0.8209999799728394, 0.812333345413208, 0.8346666693687439, 0.8343333601951599, 0.8396666646003723, 0.8416666388511658, 0.8446666598320007, 0.8443333506584167, 0.8536666631698608, 0.8519999980926514, 0.8519999980926514, 0.862666666507721, 0.8616666793823242, 0.8556666374206543, 0.8606666922569275, 0.8536666631698608, 0.8646666407585144, 0.8666666746139526, 0.8740000128746033, 0.8726666569709778, 0.871999979019165, 0.8696666955947876, 0.8616666793823242, 0.8726666569709778]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1], [0, 3, 0, 2, 4, 1, 0, 0, 3, 5, 2, 8, 4, 1], [2, 2, 0, 2, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [51, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 5, 3, 3, 0], [38, 84, 6], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.8437142968177795, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 11, 8, 6, 2, 0, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)))))), tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.square(tf.math.add(sigma, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.0315950609484776, 1.0882279525626968, 0.7694223385602885, 0.6855924071778774, 0.6339223238974987, 0.5949693064348903, 0.5522172497074916, 0.5192970897086686, 0.4969068211083241, 0.477519456232701, 0.4545518281500432, 0.4321018774291197, 0.4352102253643623, 0.42433700209138825, 0.4103036661110912, 0.38724715108443813, 0.3765890578103497, 0.36534937137641676, 0.35184904383850957, 0.3483751590509204, 0.3299544823955409, 0.3267193227404097, 0.3263976560481677, 0.30648975668487577, 0.3005506985530153, 0.2872356120715949, 0.283631610009869, 0.27411499713169757, 0.27654951275489303, 0.2557319032832569, 0.26548548692867124, 0.24650035676718735, 0.2404557976602579, 0.23953032802990668, 0.23411808799932093, 0.22574650018860115, 0.22357840370964996, 0.21215197831301752, 0.20830862270551287, 0.19953016260115541, 0.1899458026967863, 0.19641786803895014, 0.19086153605091039, 0.1821782664241981], "accuracy": [0.31026285886764526, 0.6199973821640015, 0.7125874757766724, 0.7441553473472595, 0.7578919529914856, 0.7763835787773132, 0.7893276810646057, 0.807158887386322, 0.8210275769233704, 0.8238013386726379, 0.8341038227081299, 0.8412362933158875, 0.8411042094230652, 0.8475762605667114, 0.845859169960022, 0.858671247959137, 0.8598600029945374, 0.8672566413879395, 0.8702945709228516, 0.8732003569602966, 0.8811253309249878, 0.878351628780365, 0.884691596031189, 0.8877294659614563, 0.887201189994812, 0.8897107243537903, 0.8903711438179016, 0.8982961177825928, 0.8968431949615479, 0.9001452922821045, 0.8980319499969482, 0.9049002528190613, 0.9078060984611511, 0.9103156924247742, 0.9095231890678406, 0.9137498140335083, 0.9128252267837524, 0.9192973375320435, 0.9229956269264221, 0.9251089692115784, 0.9277506470680237, 0.9223352074623108, 0.9237881302833557, 0.9303922653198242], "val_loss": [0.9077672277178083, 0.6194907426834106, 0.5511593648365566, 0.5144279854638236, 0.4783768653869629, 0.45134886673518587, 0.43544398886816843, 0.4070197854723249, 0.3907806532723563, 0.36955193110874723, 0.3636476397514343, 0.3730455722127642, 0.34515087945120676, 0.34910817657198223, 0.3320027930395944, 0.3273029157093593, 0.3263070583343506, 0.30868210962840487, 0.3168166109493801, 0.31578637872423443, 0.30891765866960796, 0.30449619463511873, 0.3056233951023647, 0.2987362742424011, 0.30056811230523245, 0.29014767919267925, 0.28944763966969084, 0.29577164139066425, 0.28761145046779085, 0.29080324513571604, 0.2867489457130432, 0.29278085061482023, 0.2929577742304121, 0.28838647263390677, 0.29386658327920095, 0.2896393963268825, 0.2881094217300415, 0.28894697768347605, 0.28829685279301237, 0.28860518762043547, 0.3010022555078779, 0.2923342670713152, 0.3020146744591849, 0.2935687984739031], "val_accuracy": [0.6620000004768372, 0.7333333492279053, 0.7406666874885559, 0.7699999809265137, 0.7883333563804626, 0.7956666946411133, 0.8023333549499512, 0.8153333067893982, 0.82833331823349, 0.843999981880188, 0.843666672706604, 0.8293333053588867, 0.846666693687439, 0.8420000076293945, 0.8526666760444641, 0.8536666631698608, 0.8566666841506958, 0.8679999709129333, 0.8613333106040955, 0.8579999804496765, 0.8693333268165588, 0.8659999966621399, 0.8636666536331177, 0.8690000176429749, 0.8679999709129333, 0.8700000047683716, 0.8703333139419556, 0.8690000176429749, 0.8733333349227905, 0.8726666569709778, 0.874666690826416, 0.8733333349227905, 0.874666690826416, 0.8743333220481873, 0.8766666650772095, 0.8776666522026062, 0.8823333382606506, 0.8816666603088379, 0.8849999904632568, 0.8826666474342346, 0.8769999742507935, 0.8820000290870667, 0.8849999904632568, 0.8843333125114441]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 2, 4, 1, 0, 0, 3, 5, 2, 8, 4, 1], [0, 2, 0, 2, 0, 1, 0, 1, 2, 1, 3, 2, 0, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 82, 76, 57, 93, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 5, 3, 3, 0], [38, 84, 6], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.838857114315033, "mapping_values": [1, 11, 11, 6, 5, 3, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))), grad))), tf.math.add(alpha, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.031596365968203, 1.0883324484484402, 0.7686902319026141, 0.6849917772423716, 0.6329878116910483, 0.5942487046545711, 0.5518180091839897, 0.519461260227999, 0.4965875661289687, 0.4815340627886757, 0.457436436883935, 0.43406228822109927, 0.434185784419829, 0.42204317862662216, 0.40639028406225064, 0.3830649417074302, 0.3745278702900473, 0.3633889569196687, 0.3502958091164089, 0.34790590680617034, 0.32666822146462443, 0.32578975975851987, 0.32360353526611213, 0.308917956097314, 0.3015947437494218, 0.2933949902230533, 0.2886643946611681, 0.28066283031036476, 0.2829167894234731, 0.25995838476005184, 0.2666408423073083, 0.25098991992766156, 0.24483084342876807, 0.24277607056411535, 0.23061411988702132, 0.2298323046423425, 0.22573670263083195, 0.21345009946938062, 0.21356263641809758, 0.2055751976024804, 0.19507019526261568, 0.1900319539659043, 0.18791153332411165, 0.18471645735368564, 0.1828791691981066, 0.18515491475754756], "accuracy": [0.31039494276046753, 0.6197332143783569, 0.7129837274551392, 0.7450799345970154, 0.7576277852058411, 0.7777044177055359, 0.7898560166358948, 0.8087438941001892, 0.817989706993103, 0.8226125836372375, 0.8341038227081299, 0.8409721255302429, 0.8413683772087097, 0.850350022315979, 0.8510104417800903, 0.8533879518508911, 0.8647470474243164, 0.8656716346740723, 0.8708229064941406, 0.8734645247459412, 0.880729079246521, 0.8799365758895874, 0.8854840993881226, 0.8864086866378784, 0.889050304889679, 0.8891823887825012, 0.8902390599250793, 0.8944657444953918, 0.8953903317451477, 0.89988112449646, 0.8980319499969482, 0.9019944667816162, 0.909259021282196, 0.9056927561759949, 0.9089948534965515, 0.9129573106765747, 0.9141460657119751, 0.9174481630325317, 0.9189010858535767, 0.9206181764602661, 0.9252410531044006, 0.9249768853187561, 0.9251089692115784, 0.928411066532135, 0.9311847686767578, 0.9292035102844238], "val_loss": [0.9077918188912528, 0.61895523752485, 0.5507846730096, 0.513271723474775, 0.47815849099840435, 0.4515726736613682, 0.43362875495638165, 0.40587551253182547, 0.3942071369716099, 0.37344188349587576, 0.3682702439171927, 0.3685796175684248, 0.34667437417166574, 0.34853807517460417, 0.329566878931863, 0.32465808732169016, 0.3218743886266436, 0.30868278230939594, 0.3171054891177586, 0.3090065973145621, 0.30802297592163086, 0.305820746081216, 0.3016599416732788, 0.298272328717368, 0.29600759063448223, 0.2916051915713719, 0.29164390904562815, 0.29941965852464947, 0.2939771669251578, 0.29355702229908537, 0.28580531903675627, 0.28773378474371775, 0.2879112022263663, 0.2903795838356018, 0.29125867571149555, 0.29439948286329, 0.2859718118395124, 0.29124975204467773, 0.29462816034044537, 0.2897699645587376, 0.28940836020878385, 0.29736690861838205, 0.2943699359893799, 0.3048338464328221, 0.30350130796432495, 0.3039255142211914], "val_accuracy": [0.6620000004768372, 0.7323333621025085, 0.7419999837875366, 0.7706666588783264, 0.7879999876022339, 0.7973333597183228, 0.8053333163261414, 0.8196666836738586, 0.8253333568572998, 0.8383333086967468, 0.8386666774749756, 0.831333339214325, 0.8503333330154419, 0.8389999866485596, 0.856333315372467, 0.8560000061988831, 0.8573333621025085, 0.8629999756813049, 0.859333336353302, 0.862333357334137, 0.8629999756813049, 0.8656666874885559, 0.8676666617393494, 0.8659999966621399, 0.8730000257492065, 0.8679999709129333, 0.8743333220481873, 0.8676666617393494, 0.8709999918937683, 0.8730000257492065, 0.871666669845581, 0.8766666650772095, 0.8743333220481873, 0.8776666522026062, 0.875, 0.875333309173584, 0.8796666860580444, 0.8786666393280029, 0.8806666731834412, 0.8803333044052124, 0.8856666684150696, 0.8820000290870667, 0.8840000033378601, 0.8820000290870667, 0.8776666522026062, 0.8773333430290222]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [2, 3, 0, 2, 4, 1, 0, 0, 3, 5, 2, 8, 4, 1, 1, 2, 3, 3, 7, 4, 0, 5, 4, 4, 6, 0, 0, 3, 4, 5, 5], [0, 2, 0, 2, 0, 1, 0, 1, 2, 1, 3, 2, 0, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [84, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 5, 3, 3, 0], [45, 84, 6], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.8371428847312927, "mapping_values": [1, 52, 52, 31, 21, 8, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(grad)))))))))), tf.math.add(alpha, tf.math.add(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha)))))), tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)))))), tf.math.add(alpha, tf.math.subtract(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(grad, alpha)), grad), tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), tf.math.negative(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, grad))))))), tf.math.add(alpha, grad)), tf.math.multiply(grad, tf.math.add(alpha, tf.math.pow(grad, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.square(grad))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.8935699927225844, 1.002855523702349, 0.7242516138298227, 0.6494874277166514, 0.6216418065210422, 0.565012790177083, 0.5212540139753301, 0.4878972657974512, 0.4823765321186332, 0.454526387945284, 0.45388600679357777, 0.43352209525400576, 0.4113953792423762, 0.40859904625097426, 0.3980747338031592, 0.3744249455665223, 0.363632354627999, 0.35847432836408016, 0.3468492710398267, 0.3359815856217236, 0.31378580007287316, 0.32196985879720336, 0.3355387551059277, 0.30739289883530574, 0.29246236456147495, 0.2723343989687227, 0.2826886003075054, 0.2703712674148362, 0.26898374195033375, 0.25347065335141356, 0.2625773249049118, 0.257678803290201, 0.24037171994155, 0.23719701359867498, 0.23266504179248879, 0.23293581460886123, 0.22068812390005804, 0.2182966409055013, 0.2149487786745871, 0.22898112234894816, 0.20537038595803017, 0.19690937837313952, 0.19320256044253414], "accuracy": [0.3739268183708191, 0.6425835490226746, 0.7283053994178772, 0.7523444890975952, 0.763439416885376, 0.7907806038856506, 0.8063663840293884, 0.8161405324935913, 0.82683926820755, 0.8296129703521729, 0.8379341959953308, 0.8364813327789307, 0.847840428352356, 0.8498216867446899, 0.8511425256729126, 0.8663320541381836, 0.8656716346740723, 0.8685774803161621, 0.8685774803161621, 0.8746532797813416, 0.8836349248886108, 0.8848236799240112, 0.8753136992454529, 0.883238673210144, 0.8911636471748352, 0.8977677822113037, 0.8927486538887024, 0.8975036144256592, 0.9005415439605713, 0.9035794734954834, 0.9010698795318604, 0.901862382888794, 0.9078060984611511, 0.9097873568534851, 0.910711944103241, 0.9105798602104187, 0.9152027368545532, 0.915070652961731, 0.9189010858535767, 0.9126931428909302, 0.920089840888977, 0.9257693886756897, 0.9253731369972229], "val_loss": [1.1234019483838762, 0.5967690433774676, 0.5235646452222552, 0.5435459613800049, 0.5002798693520683, 0.42381255115781513, 0.40224073614392963, 0.39179530314036776, 0.3831009694508144, 0.366160375731332, 0.3721351282937186, 0.3594317351068769, 0.35482276337487356, 0.35173425504139494, 0.32822658334459576, 0.3241629685674395, 0.33467425618852886, 0.31465926340648104, 0.30388390166418894, 0.3119950975690569, 0.3206959877695356, 0.32823826585497173, 0.3028779796191624, 0.2986421414784023, 0.3002356546265738, 0.30446470635277884, 0.28852943011692594, 0.29431491238730295, 0.3058460695402963, 0.29610312836510794, 0.29904904535838533, 0.30598191704068867, 0.2919432095118931, 0.2913736956460135, 0.2903861573764256, 0.2848830648830959, 0.2999170081956046, 0.3004517214638846, 0.309796793120248, 0.29656299522944857, 0.30373787028448923, 0.29313428912843975, 0.320243239402771], "val_accuracy": [0.5379999876022339, 0.746666669845581, 0.7616666555404663, 0.7590000033378601, 0.7606666684150696, 0.8119999766349792, 0.8209999799728394, 0.8253333568572998, 0.8293333053588867, 0.8349999785423279, 0.8389999866485596, 0.8429999947547913, 0.8376666903495789, 0.8429999947547913, 0.8579999804496765, 0.8506666421890259, 0.8489999771118164, 0.8586666584014893, 0.8646666407585144, 0.8539999723434448, 0.8573333621025085, 0.8546666502952576, 0.8676666617393494, 0.8686666488647461, 0.8696666955947876, 0.8700000047683716, 0.871999979019165, 0.8730000257492065, 0.8673333525657654, 0.874666690826416, 0.8773333430290222, 0.8703333139419556, 0.8759999871253967, 0.874666690826416, 0.8759999871253967, 0.8793333172798157, 0.8723333477973938, 0.8809999823570251, 0.871666669845581, 0.8713333606719971, 0.8799999952316284, 0.8796666860580444, 0.8766666650772095]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0], [6, 3, 0, 2, 9, 6, 3, 5, 1, 5, 2, 9], [1, 2, 1, 2, 0, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [51, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 5, 3, 3, 0], [8, 84, 6], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.7234285473823547, "mapping_values": [1, 8, 8, 5, 3, 1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))))), tf.math.add(alpha, grad))), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.301993776069987, 2.298838400302263, 2.29192405436033, 2.2800901849996364, 2.266515066532049, 2.2486453084047553, 2.226686902380638, 2.202233742886625, 2.1710013504655623, 2.130456434060176, 2.078637006937505, 2.0172808470900474, 1.9399058604363233, 1.841337167213716, 1.7250754449660706, 1.629222511961759, 1.5325575194669327, 1.4435084366039468, 1.396756579658343, 1.3946374565807742, 1.363133112846695, 1.3720037565570167, 1.3741195024579287, 1.3300720801395653, 1.2596193761590009, 1.1949935922407282, 1.1470833245742087, 1.057571298017037, 0.9809026737034265, 0.9324540217964168, 0.9134959593865976, 0.9172848784896787, 0.9116186809782276, 0.9208064483078385, 0.9211741661697945, 0.9233602219490155, 0.9007551819105757, 0.8785251208331686, 0.8690576189072251], "accuracy": [0.09047681838274002, 0.10540219396352768, 0.11279883980751038, 0.15070664882659912, 0.19218069314956665, 0.2355038970708847, 0.27763834595680237, 0.31541407108306885, 0.33720776438713074, 0.37181350588798523, 0.3895126283168793, 0.39466384053230286, 0.4076079726219177, 0.4245145916938782, 0.4505349397659302, 0.4515916109085083, 0.47272488474845886, 0.5077268481254578, 0.5114251971244812, 0.5140668153762817, 0.5330867767333984, 0.5435213446617126, 0.5435213446617126, 0.5698058605194092, 0.5847312211990356, 0.6034870147705078, 0.6189407110214233, 0.637828528881073, 0.6518293619155884, 0.6567164063453674, 0.6618676781654358, 0.653150200843811, 0.6546030640602112, 0.6625280380249023, 0.6712455153465271, 0.6756042838096619, 0.6868313550949097, 0.6848500967025757, 0.6785101294517517], "val_loss": [1.9689926419939314, 1.96346800667899, 1.9545607566833496, 1.9425127165658134, 1.927572795322963, 1.90975250516619, 1.8885166985648019, 1.8625726018633162, 1.8296283994402205, 1.7870987483433314, 1.7320754187447684, 1.6612747056143624, 1.5721861294337682, 1.4652622086661202, 1.3455006735665458, 1.2237795080457414, 1.1129604748317175, 1.020462921687535, 0.9455614771161761, 0.8863885743277413, 0.8439242499215263, 0.8227214132036481, 0.804372923714774, 0.768197843006679, 0.7470502001898629, 0.7430555990764073, 0.729187182017735, 0.695541262626648, 0.6652754885809762, 0.6604085309164864, 0.6703310353415353, 0.6801004069192069, 0.6888978481292725, 0.6972630194255284, 0.7009920903614589, 0.6929763044629779, 0.6738082000187465, 0.6493513754435948, 0.6269539083753314], "val_accuracy": [0.049666665494441986, 0.0860000029206276, 0.1733333319425583, 0.28433331847190857, 0.34599998593330383, 0.37066665291786194, 0.39233332872390747, 0.41100001335144043, 0.42766666412353516, 0.44733333587646484, 0.46833333373069763, 0.48233333230018616, 0.4959999918937683, 0.5246666669845581, 0.5490000247955322, 0.5703333616256714, 0.5956666469573975, 0.628333330154419, 0.6576666831970215, 0.6726666688919067, 0.6743333339691162, 0.6713333129882812, 0.6700000166893005, 0.6973333358764648, 0.7026666402816772, 0.7039999961853027, 0.7113333344459534, 0.7099999785423279, 0.7163333296775818, 0.7266666889190674, 0.7129999995231628, 0.7046666741371155, 0.718666672706604, 0.7390000224113464, 0.7323333621025085, 0.7323333621025085, 0.7283333539962769, 0.7306666374206543, 0.7360000014305115]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1], [0, 3, 0, 2, 4, 1, 0, 0, 3, 5, 2, 8, 4, 1], [3, 2, 0, 2, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [51, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [4, 5, 3, 3, 0], [75, 84, 6], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.16428571939468384, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [4.086278743401274, 2.4134376318919863, 2.3434250308160123, 2.332172131478558, 2.3354098157891507, 2.3410837072123782], "accuracy": [0.17276449501514435, 0.10460969805717468, 0.10011887550354004, 0.10157178342342377, 0.09628847241401672, 0.10210011899471283], "val_loss": [2.0877908297947476, 1.988238743373326, 2.0017809186662947, 2.018983772822789, 2.0044200079781667, 1.9917141369410925], "val_accuracy": [0.1326666623353958, 0.10000000149011612, 0.09933333098888397, 0.10133333504199982, 0.10066666454076767, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 2, 6, 1, 0, 0, 3, 5, 2, 8, 4, 1], [1, 2, 0, 2, 1, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [51, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [2, 7, 9, 0, 1, 9], [3, 5, 3, 3, 0], [38, 84, 6], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.12885713577270508, "mapping_values": [1, 11, 11, 6, 5, 1, 3, 3, 1, 2, 0, 11, 8, 6, 2, 0, 2, 1, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))), grad))), tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(grad, tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)))))), tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.square(tf.math.add(sigma, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [164.07538908889282, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.12838461995124817, 0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [9520.644810267857, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10100000351667404, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1], [6, 3, 0, 2, 4, 6, 9, 4, 3, 5, 2], [0, 2, 0, 2, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [51, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [4, 5, 3, 3, 0], [48, 84, 6], [0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1], [3, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 0, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 5, 3, 2, 1], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.square(beta), tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [222802.67774274104, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09232597798109055, 0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1], [6, 5, 0, 2, 6, 6, 3, 0, 3, 5, 2, 9], [0, 2, 1, 2, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 82, 84, 57, 93, 59, 23, 22, 72, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 5, 3, 3, 0], [38, 84, 6], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [1, 4, 7, 6, 2, 5, 0, 9], [4, 4, 6], [64, 55], [1, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 5, 5, 3, 2, 2, 11, 7, 5, 2, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)))))), tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09087307006120682, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0], [6, 3, 0, 2, 9, 6, 3, 0, 3, 5, 2, 9], [1, 2, 0, 2, 1, 2, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [51, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 5, 3, 3, 0], [45, 84, 6], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 18, 12, 6, 3, 5, 5, 3, 2, 2, 11, 8, 6, 2, 0, 2, 1, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), grad)))), alpha)), grad)))), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)))))), tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.square(tf.math.add(sigma, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3027693370329847, 2.302701491815791, 2.3027482303598727, 2.302702518360348, 2.302709033570789, 2.302727507562402, 2.302716162698837, 2.302706362155324, 2.302691181149103], "accuracy": [0.09153348207473755, 0.09430722147226334, 0.09576013684272766, 0.09351472556591034, 0.09681680053472519, 0.09311848133802414, 0.0936468094587326, 0.09998679161071777, 0.09457138925790787], "val_loss": [1.973642144884382, 1.9736377171107702, 1.9736383301871163, 1.973637240273612, 1.973635264805385, 1.9736319950648717, 1.9736322675432478, 1.9736317225864954, 1.973639692578997], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.10133333504199982, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], [5, 6, 5, 2, 9, 6, 3, 0, 3, 5, 2, 9], [2, 2, 0, 2, 0, 1, 0, 1, 2, 1, 3, 2, 0, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [51, 90, 84, 57, 93, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 5, 3, 3, 0], [38, 84, 6], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [1, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 6, 3, 2, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [121.29945830104688, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.03645489364862442, 0.10394927859306335, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [278140598.85714287, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1], [0, 3, 0, 2, 4, 1, 0, 0, 3, 5, 2, 8, 4, 1], [2, 2, 0, 2, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [51, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 5, 3, 3, 0], [38, 84, 6], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1], [8, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 0, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 3, 2, 2, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.square(beta), tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], [6, 3, 9, 2, 4, 0, 1, 0, 3, 5, 2], [1, 2, 2, 2, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 5, 3, 3, 0], [45, 84, 6], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 5, 4, 1, 5, 5, 3, 2, 2, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.math.multiply(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [4.117769097167078, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.14740456640720367, 0.10130762308835983, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.024010590144566, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1], [0, 3, 0, 2, 4, 1, 0, 0, 3, 5, 2, 8, 5, 1, 4, 3, 9, 4], [0, 2, 0, 2, 0, 1, 0, 1, 2, 1, 3, 2, 0, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 5, 3, 3, 0], [38, 84, 6], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [0, 4, 6], [64, 55], [0, 1, 0, 1, 1], [9, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 20, 20, 13, 7, 4, 3, 3, 1, 2, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), tf.math.square(grad)))))))), tf.math.add(alpha, tf.math.add(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha)))))), tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302093118645685, 2.3025854263701193, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.0940430611371994, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0], [6, 3, 0, 2, 9, 6, 3, 0, 8, 6, 2, 9], [0, 2, 0, 2, 0, 1, 0, 1, 2, 1, 3, 2, 0, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [92, 36, 84, 57, 93, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 5, 3, 3, 0], [45, 84, 6], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 6, 6, 4, 2, 2, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06987188011407852, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1], [6, 3, 0, 2, 4, 6, 9, 4, 3, 5, 2], [0, 2, 0, 2, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 0, 3, 3, 0], [38, 84, 6], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 5, 3, 3, 1, 2, 2, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(alpha, grad))), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3026174527464165, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09470347315073013, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], [0, 4, 0, 8, 4, 1, 2, 0, 3, 5, 2, 8, 4, 1], [2, 2, 0, 2, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [63, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [2, 3, 3, 3, 0], [31, 84, 6], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [0, 0, 2], [6, 32, 85]], "fitness": -0.09828571230173111, "mapping_values": [1, 10, 10, 6, 4, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))))))), grad)), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3608902626506185, 3.0458146937220025, 4.887758570041135, 8.029702768034829, 12.38115894714162, 18.065613283724943], "accuracy": [0.09325055778026581, 0.09879804402589798, 0.10289261490106583, 0.09945846349000931, 0.10051512718200684, 0.09642054885625839], "val_loss": [2.0900934764317105, 2.7702065195356096, 4.2821036747523715, 6.584317479814802, 9.648905072893415, 13.518445696149554], "val_accuracy": [0.10066666454076767, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0], [6, 6, 0, 2, 9, 6, 3, 0, 3, 5, 2, 9], [0, 2, 0, 2, 2, 1, 0, 1, 2, 1, 3, 2, 0, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [51, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [1, 1, 3, 3, 0], [45, 84, 6], [0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [0, 0, 2], [6, 32, 85]], "fitness": -0.09828571230173111, "mapping_values": [1, 18, 18, 12, 6, 4, 3, 3, 1, 2, 0, 12, 8, 7, 1, 0, 2, 1, 1, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(grad))))), tf.math.add(grad, alpha))))), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(alpha, tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), sigma)), tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, grad))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3608902626506185, 3.0458146937220025, 4.887758570041135, 8.029702768034829, 12.38115894714162, 18.065613283724943], "accuracy": [0.09325055778026581, 0.09879804402589798, 0.10289261490106583, 0.09945846349000931, 0.10051512718200684, 0.09642054885625839], "val_loss": [2.0900934764317105, 2.7702065195356096, 4.2821036747523715, 6.584317479814802, 9.648905072893415, 13.518445696149554], "val_accuracy": [0.10066666454076767, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0], [0, 3, 0, 2, 4, 4, 0, 0, 3, 5, 2, 8, 4, 1, 6], [2, 2, 0, 2, 1, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 5, 3, 3, 0], [45, 84, 6], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [3, 0, 2], [6, 32, 85]], "fitness": -0.035999998450279236, "mapping_values": [1, 9, 9, 5, 4, 1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.302548649414671, 2.3030650871714204, 2.303573256958556, 2.3022658049926434, 2.302876068821137, 2.302366012941813], "accuracy": [0.08902391046285629, 0.09681680053472519, 0.08492933213710785, 0.09549596905708313, 0.09219389408826828, 0.09457138925790787], "val_loss": [1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056], "val_accuracy": [0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 3, 0, 2, 4, 1, 0, 0, 3, 5, 2, 8, 4, 1], [2, 2, 0, 2, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 0, 3, 3, 0], [38, 84, 6], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [3, 0, 2], [6, 32, 85]], "fitness": -0.035999998450279236, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.302548649414671, 2.3030650871714204, 2.303573256958556, 2.3022658049926434, 2.302876068821137, 2.302366012941813], "accuracy": [0.08902391046285629, 0.09681680053472519, 0.08492933213710785, 0.09549596905708313, 0.09219389408826828, 0.09457138925790787], "val_loss": [1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056], "val_accuracy": [0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856]}}]