[{"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [0, 3, 0, 2, 4, 1, 0, 0, 5, 0, 2, 8, 4, 1], [1, 2, 0, 2, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 35, 76, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.8497142791748047, "mapping_values": [1, 17, 17, 11, 6, 2, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(alpha, grad)), tf.math.add(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))), tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.square(tf.math.negative(grad))))))), tf.math.add(alpha, tf.math.add(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.0429579709987316, 1.078077292634417, 0.8096887727439396, 0.7046090397285574, 0.646756663707899, 0.5955329905836699, 0.5580375946752147, 0.5333772295139501, 0.49386996359888746, 0.4843680457809991, 0.46636491526607604, 0.45540592795538787, 0.43728552844703567, 0.4181356537831757, 0.3925459343901148, 0.38325172283661724, 0.38667955274642374, 0.36702339006153634, 0.35268002217471905, 0.34810278983227, 0.3423795882996756, 0.3384316536090976, 0.32236399327869414, 0.31509540133692915, 0.3063342184627439, 0.2902337073681456, 0.27947596518544], "accuracy": [0.3148857355117798, 0.6159027814865112, 0.7054550051689148, 0.7449478507041931, 0.7560427784919739, 0.7814027070999146, 0.7952714562416077, 0.8012151718139648, 0.8208954930305481, 0.8177255392074585, 0.8298771381378174, 0.8334434032440186, 0.8409721255302429, 0.8461233377456665, 0.8544445633888245, 0.8605204224586487, 0.8552370667457581, 0.8639545440673828, 0.8706908226013184, 0.8747853636741638, 0.8753136992454529, 0.8750495314598083, 0.883238673210144, 0.8848236799240112, 0.885219931602478, 0.8883898854255676, 0.8952582478523254], "val_loss": [0.91395218031747, 0.6736305270876203, 0.5662026235035488, 0.517701370375497, 0.5025710037776402, 0.4597024747303554, 0.4356961335454668, 0.41688419239861624, 0.4087051493780954, 0.3872215066637312, 0.3763216308185032, 0.37732901743480135, 0.34884755100522724, 0.34358703238623484, 0.33543287004743305, 0.33283852679388864, 0.32655092648097445, 0.32239138228552683, 0.32073213372911724, 0.3222756215504238, 0.3182081920760019, 0.3050520420074463, 0.3056951250348772, 0.3087356686592102, 0.29991841316223145, 0.2964431813785008, 0.29891444955553326], "val_accuracy": [0.6443333625793457, 0.7126666903495789, 0.7513333559036255, 0.7749999761581421, 0.7716666460037231, 0.7889999747276306, 0.7976666688919067, 0.809333324432373, 0.8240000009536743, 0.8256666660308838, 0.8339999914169312, 0.828000009059906, 0.8476666808128357, 0.8489999771118164, 0.8526666760444641, 0.8533333539962769, 0.8516666889190674, 0.8556666374206543, 0.8610000014305115, 0.8586666584014893, 0.8619999885559082, 0.8696666955947876, 0.859666645526886, 0.8646666407585144, 0.862666666507721, 0.8659999966621399, 0.8696666955947876]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1], [2, 3, 0, 2, 4, 1, 0, 6, 3, 4, 2, 8, 4, 1, 0, 8], [1, 2, 0, 2, 2, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 82, 76, 57, 60, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [1, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.8497142791748047, "mapping_values": [1, 28, 28, 16, 12, 2, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.pow(grad, tf.math.add(alpha, tf.math.add(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(grad))))), tf.math.add(alpha, grad))), grad)))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.negative(tf.math.add(alpha, grad)))), alpha)))), tf.math.add(alpha, grad))))), tf.math.sqrt(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.043871152339563, 1.083546858862989, 0.8116910687416866, 0.7037265998119565, 0.6468642107672963, 0.5983606566212606, 0.5561934220335818, 0.527747548290956, 0.4899243668416519, 0.4790047090074972, 0.4642877525239966, 0.4520046052687424, 0.43674817945443567, 0.4177041947566098, 0.38883452823826226, 0.3815694720855935, 0.3784273695503291, 0.35986567324162977, 0.34863729927880244, 0.3425314188940398, 0.33621249914468476, 0.3319652330023564, 0.3254368003167969, 0.3129082845619657, 0.30315608239649405, 0.28515643158514486, 0.2765939116493712], "accuracy": [0.3148857355117798, 0.6139215230941772, 0.705058753490448, 0.7420420050621033, 0.7574957013130188, 0.778232753276825, 0.7954035401344299, 0.802271842956543, 0.8216879963874817, 0.8236692547798157, 0.8302733898162842, 0.8370096683502197, 0.844010055065155, 0.8442742228507996, 0.8552370667457581, 0.8580108284950256, 0.8597279191017151, 0.8681812286376953, 0.8732003569602966, 0.8765024542808533, 0.8733324408531189, 0.8792761564254761, 0.8820499181747437, 0.8836349248886108, 0.8860124349594116, 0.8928807377815247, 0.8973715305328369], "val_loss": [0.9186878204345703, 0.6698086772646222, 0.5635125807353428, 0.5143730981009347, 0.5059524093355451, 0.4600910629544939, 0.43523710114615305, 0.4146920272282192, 0.4048258832522801, 0.3832287277494158, 0.37690440246037077, 0.374279396874564, 0.3523889354297093, 0.3399962442261832, 0.3370985303606306, 0.32802546875817434, 0.3302661521094186, 0.32339673382895334, 0.32035055330821444, 0.3178744912147522, 0.3123310463769095, 0.30322221347263884, 0.30939693110329763, 0.3124703935214451, 0.29707557814461844, 0.2958931837763105, 0.2957054717200143], "val_accuracy": [0.6460000276565552, 0.7163333296775818, 0.7543333172798157, 0.7713333368301392, 0.7643333077430725, 0.7900000214576721, 0.8036666512489319, 0.8116666674613953, 0.8233333230018616, 0.8296666741371155, 0.8323333263397217, 0.8259999752044678, 0.8393333554267883, 0.8573333621025085, 0.8506666421890259, 0.8579999804496765, 0.8529999852180481, 0.8566666841506958, 0.859333336353302, 0.8629999756813049, 0.8643333315849304, 0.8673333525657654, 0.8586666584014893, 0.8633333444595337, 0.8629999756813049, 0.8669999837875366, 0.8666666746139526]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1], [0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0], [2, 1, 8, 6, 4, 3, 0, 0, 3, 5, 2, 8, 4, 1, 0, 4, 0, 0], [2, 2, 1, 0, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 82, 76, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [1, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.8479999899864197, "mapping_values": [1, 3, 3, 1, 2, 0, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(grad, tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.0429579148187362, 1.0780747030562634, 0.8096750034411758, 0.7039225320097415, 0.6463379152163444, 0.5949591927524602, 0.5565934577055611, 0.5293772672940837, 0.4931707797805001, 0.48201232671092104, 0.46438191062927625, 0.45494246707616337, 0.43142623391448703, 0.4150158747934221, 0.3946286432377147, 0.3837909003991052, 0.3931096506636802, 0.366792389076179, 0.35538928057413377, 0.3528794144335487, 0.3478509992372878, 0.3417718928401276, 0.3321829850230282, 0.3189719439954207, 0.30694713563085185, 0.2930693101802632, 0.2795741664239082, 0.29215660786915293, 0.28229157010388806, 0.26541732694683545, 0.2600285958824944, 0.25370378717888364, 0.25431463321942255, 0.2569873600277084, 0.23888881819445962, 0.2327380823956788, 0.2202022852694212, 0.2236157252374909, 0.22467887478537013, 0.20942276814051308], "accuracy": [0.3148857355117798, 0.6156386137008667, 0.7063795924186707, 0.7452120184898376, 0.7567031979560852, 0.7824593782424927, 0.7954035401344299, 0.8024039268493652, 0.8210275769233704, 0.8214238286018372, 0.8304054737091064, 0.8330471515655518, 0.841500461101532, 0.8491612672805786, 0.8536521196365356, 0.8595958352088928, 0.8558974862098694, 0.8642187118530273, 0.8712190985679626, 0.8712190985679626, 0.8710870146751404, 0.8739928603172302, 0.8765024542808533, 0.884691596031189, 0.8821820020675659, 0.8879936337471008, 0.8973715305328369, 0.887201189994812, 0.8924844861030579, 0.9000132083892822, 0.9059569239616394, 0.9038436412811279, 0.9031832218170166, 0.9021265506744385, 0.9079381823539734, 0.9117686152458191, 0.9181085824966431, 0.913089394569397, 0.9142781496047974, 0.9202219247817993], "val_loss": [0.9139501367296491, 0.673612117767334, 0.5651264190673828, 0.5163911921637399, 0.5008741957800729, 0.46146839005606516, 0.43359482288360596, 0.41297920261110577, 0.40444345133645193, 0.38614061900547575, 0.37519846643720356, 0.36956681524004253, 0.3481403248650687, 0.34309634140559603, 0.33836446489606586, 0.3336121780531747, 0.32671797275543213, 0.3252648796354021, 0.31619867256709505, 0.31695531947272165, 0.3159262537956238, 0.31059246403830393, 0.3117957966668265, 0.30833219630377634, 0.2948992933545794, 0.2948939459664481, 0.30586800404957365, 0.2984939898763384, 0.29811140469142366, 0.3001713326999119, 0.28571419204984394, 0.3087291291781834, 0.29327753611973356, 0.2900926981653486, 0.2948274186679295, 0.2921647940363203, 0.29296536105019705, 0.2977969901902335, 0.2910353030477251, 0.2928716795785086], "val_accuracy": [0.6443333625793457, 0.7120000123977661, 0.7526666522026062, 0.7753333449363708, 0.7699999809265137, 0.7910000085830688, 0.7986666560173035, 0.8133333325386047, 0.8236666917800903, 0.8286666870117188, 0.8336666822433472, 0.8333333134651184, 0.8426666855812073, 0.8513333201408386, 0.8446666598320007, 0.8506666421890259, 0.8533333539962769, 0.8569999933242798, 0.8600000143051147, 0.8619999885559082, 0.8600000143051147, 0.859333336353302, 0.8586666584014893, 0.8613333106040955, 0.8690000176429749, 0.8706666827201843, 0.8640000224113464, 0.8726666569709778, 0.8696666955947876, 0.8723333477973938, 0.8769999742507935, 0.8726666569709778, 0.8740000128746033, 0.8799999952316284, 0.8836666941642761, 0.8816666603088379, 0.8799999952316284, 0.8790000081062317, 0.8809999823570251, 0.8826666474342346]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1], [5, 1, 6, 2, 4, 0, 0, 0, 0, 5, 2, 8, 4, 1], [1, 2, 2, 1, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [49, 82, 76, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [2, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.8462857007980347, "mapping_values": [1, 8, 8, 4, 4, 0, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.math.add(grad, grad)))), alpha)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.0429566534613226, 1.078228768899598, 0.8098694850440826, 0.7033392605355167, 0.6463575267190269, 0.5940647541555542, 0.5583246130087373, 0.5304027380306865, 0.4937582047403512, 0.4858381791971993, 0.46559411571514275, 0.4550330344601834, 0.43879103755843857, 0.41945946424030406, 0.39207075349469905, 0.3798319160772935, 0.38753222738589593, 0.3652255530992535, 0.34984171258271124, 0.3451895236205337, 0.3443581865306512, 0.3422868846351161, 0.3314163117415995, 0.31290640693299127, 0.3083885839870026], "accuracy": [0.3148857355117798, 0.6161669492721558, 0.705058753490448, 0.7429665923118591, 0.757099449634552, 0.7816668748855591, 0.7956677079200745, 0.8029322624206543, 0.8214238286018372, 0.8198388814926147, 0.8300092220306396, 0.8337075710296631, 0.8413683772087097, 0.8455950617790222, 0.8561616539955139, 0.8607845902442932, 0.8562937378883362, 0.8656716346740723, 0.8716153502464294, 0.8774270415306091, 0.8750495314598083, 0.8737286925315857, 0.8778232932090759, 0.887201189994812, 0.8812574148178101], "val_loss": [0.9139156000954765, 0.6741278512137276, 0.566332493509565, 0.518140367099217, 0.5011935915265765, 0.45958731855664936, 0.43624969891139437, 0.41597299916403635, 0.40413144656590055, 0.38856602566582815, 0.3742548567908151, 0.3739967516490391, 0.3499433823994228, 0.342538629259382, 0.3346568090575082, 0.3338105593408857, 0.3316894343921116, 0.3246075510978699, 0.31802687474659513, 0.3172465307371957, 0.3126770853996277, 0.3043132339205061, 0.3109391246523176, 0.31219650166375296, 0.29544072491782053], "val_accuracy": [0.6443333625793457, 0.7126666903495789, 0.753333330154419, 0.7736666798591614, 0.7713333368301392, 0.7913333177566528, 0.8003333210945129, 0.809333324432373, 0.8236666917800903, 0.8286666870117188, 0.8339999914169312, 0.8266666531562805, 0.8446666598320007, 0.8489999771118164, 0.8546666502952576, 0.8510000109672546, 0.8523333072662354, 0.8529999852180481, 0.862333357334137, 0.8656666874885559, 0.8636666536331177, 0.8650000095367432, 0.8586666584014893, 0.859000027179718, 0.8633333444595337]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [5, 7, 0, 2, 4, 1, 0, 0, 3, 5, 2, 8, 4, 1], [2, 2, 1, 2, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 82, 76, 57, 60, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [1, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.843999981880188, "mapping_values": [1, 4, 4, 2, 2, 0, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), grad)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.043867924131218, 1.0841664105531734, 0.8130109543341215, 0.7041299446320978, 0.6462108355078007, 0.5981853361363424, 0.5572679355915716, 0.5315437476278501, 0.4914806974467947, 0.48066644560486144, 0.46012489045962146, 0.4518817424451387, 0.43928179699495057, 0.4178880622374021, 0.39092553386189416, 0.38166329582306563, 0.38194422053229526, 0.3591634682802209, 0.35039748681093863, 0.3423060138605652, 0.33627500567595564, 0.33424676770720546, 0.32594997465823067, 0.31165007989656307, 0.30558613781537897, 0.28776384237624747, 0.27791153189134854, 0.28211962623666104, 0.27270020974578324, 0.25991392184037576, 0.25730992289361637, 0.2466785896428273, 0.23817529489083644, 0.24765464514316804, 0.224916445332716, 0.2228107039801055, 0.21063556189605384, 0.21690375804743667, 0.2217865729545322, 0.20666079153482075, 0.19755033681641765], "accuracy": [0.3148857355117798, 0.614317774772644, 0.7058512568473816, 0.7417778372764587, 0.7578919529914856, 0.7800818681716919, 0.796328067779541, 0.8013472557067871, 0.8226125836372375, 0.8227446675300598, 0.8329150676727295, 0.8370096683502197, 0.8393871188163757, 0.8471800088882446, 0.8573504090309143, 0.858671247959137, 0.860652506351471, 0.8673887252807617, 0.8732003569602966, 0.8771628737449646, 0.8747853636741638, 0.8796724081039429, 0.8819178342819214, 0.8840311765670776, 0.8865407705307007, 0.894069492816925, 0.8956544995307922, 0.8931449055671692, 0.898428201675415, 0.9001452922821045, 0.9038436412811279, 0.9063531756401062, 0.908730685710907, 0.9027869701385498, 0.908730685710907, 0.9170519113540649, 0.9203540086746216, 0.9189010858535767, 0.915070652961731, 0.9196935892105103, 0.9194294214248657], "val_loss": [0.9186607088361468, 0.6701443706239972, 0.5660737582615444, 0.5166170086179461, 0.5082330533436367, 0.45914372376033236, 0.4386225938796997, 0.419157658304487, 0.4074441535132272, 0.38124145780290875, 0.37316750628607614, 0.37858842951910837, 0.3560183218547276, 0.3449849401201521, 0.33816144296101164, 0.33081986222948345, 0.3288178529058184, 0.32528681414467947, 0.31596518414361136, 0.3202183587210519, 0.3178652950695583, 0.30584637607846943, 0.30925770316805157, 0.31897085905075073, 0.30172434874943327, 0.30274529116494314, 0.30030555384499685, 0.3001624175480434, 0.29675971610205515, 0.2975388169288635, 0.2912865025656564, 0.30117850644247873, 0.29298978192465647, 0.2957943081855774, 0.2945536034447806, 0.2941054957253592, 0.29256631646837505, 0.2972592030252729, 0.30734061343329294, 0.305790160383497, 0.30379070554460796], "val_accuracy": [0.6460000276565552, 0.715666651725769, 0.7526666522026062, 0.7723333239555359, 0.7639999985694885, 0.7873333096504211, 0.8013333082199097, 0.8090000152587891, 0.8206666707992554, 0.8383333086967468, 0.8346666693687439, 0.8246666789054871, 0.8366666436195374, 0.8489999771118164, 0.8496666550636292, 0.8546666502952576, 0.8556666374206543, 0.8566666841506958, 0.8619999885559082, 0.8619999885559082, 0.8640000224113464, 0.8643333315849304, 0.8586666584014893, 0.8576666712760925, 0.8600000143051147, 0.8713333606719971, 0.8636666536331177, 0.8730000257492065, 0.8636666536331177, 0.871666669845581, 0.8723333477973938, 0.874666690826416, 0.8736666440963745, 0.878000020980835, 0.8799999952316284, 0.8806666731834412, 0.8786666393280029, 0.8796666860580444, 0.8743333220481873, 0.8796666860580444, 0.8799999952316284]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1], [0, 3, 0, 2, 4, 1, 0, 0, 5, 5, 2, 8, 4, 1], [1, 2, 0, 2, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 82, 76, 57, 60, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [1, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.8385714292526245, "mapping_values": [1, 9, 9, 5, 4, 1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.0438690781199687, 1.0840958619020116, 0.8133686022468136, 0.7044106062770819, 0.6477307693959227, 0.5982842011742069, 0.5588420546128844, 0.5310240462904577, 0.4900890452404221, 0.48084700208739395, 0.46325333119855816, 0.4511435368569331, 0.4350163735466044, 0.4154728019376079, 0.3884847976543868, 0.3795189637439346, 0.3736781294729102, 0.3564989787318908, 0.35126819002897575, 0.34115635065071304, 0.3359091835818066, 0.33249772363382324, 0.3275105552335756, 0.3107675487780064, 0.30321884593392373, 0.2847563887607656, 0.2762943520214989, 0.28732959959784427, 0.26744977781297413, 0.25553289260515966, 0.2535818792912057, 0.24549195365253268, 0.24041266964135657, 0.2471441676206183, 0.2277887584455828, 0.22391772785277778, 0.21268627818281688, 0.2207554228915798, 0.2164394821193728, 0.20340475243993675, 0.19561461256227758, 0.19544638514030627, 0.18940121591240738, 0.18606356583833852, 0.1822127087410525, 0.17288718550212473, 0.17268975611454807, 0.1649348975515101, 0.1674363364802218, 0.15717716096627193, 0.14811233512485472, 0.1528897523061238, 0.14515315360357545, 0.15010168149982697, 0.14764614309758842, 0.14105377727613913, 0.1370104952806243], "accuracy": [0.3148857355117798, 0.6133931875228882, 0.7054550051689148, 0.7423061728477478, 0.7576277852058411, 0.7804781198501587, 0.793422281742096, 0.800290584564209, 0.8227446675300598, 0.8222163319587708, 0.8315942287445068, 0.8368775844573975, 0.8449346423149109, 0.8490291833877563, 0.857218325138092, 0.8614450097084045, 0.8622375130653381, 0.8688416481018066, 0.8696341514587402, 0.8754457831382751, 0.8774270415306091, 0.876370370388031, 0.8787478804588318, 0.8849557638168335, 0.8848236799240112, 0.8911636471748352, 0.8969752788543701, 0.8930128216743469, 0.8989565372467041, 0.9015982151031494, 0.9062210917472839, 0.9076740145683289, 0.9085986018180847, 0.9034473896026611, 0.9119006991386414, 0.9126931428909302, 0.9224672913551331, 0.9190331697463989, 0.91559898853302, 0.9220710396766663, 0.9220710396766663, 0.9236560463905334, 0.927882730960846, 0.9288073182106018, 0.9299960136413574, 0.9305243492126465, 0.9348831176757812, 0.9360718727111816, 0.937260627746582, 0.9387134909629822, 0.9447893500328064, 0.9409589171409607, 0.9418835043907166, 0.9399022459983826, 0.9421476721763611, 0.9404305815696716, 0.9454497694969177], "val_loss": [0.9186511039733887, 0.6701158966336932, 0.5655047723225185, 0.5147884402956281, 0.5078309774398804, 0.4601107154573713, 0.439700722694397, 0.4191229087965829, 0.4060082265308925, 0.3855257204600743, 0.37441961254392353, 0.37116565874644686, 0.3491866673742022, 0.34447899035045076, 0.3344686967985971, 0.33008753401892527, 0.3307948112487793, 0.3237478562763759, 0.3186430335044861, 0.3202266607965742, 0.3146815129688808, 0.3066219857760838, 0.3126655561583383, 0.31529721191951204, 0.29861168350492207, 0.2958438651902335, 0.30705346379961285, 0.29478191477911814, 0.29945686885288786, 0.2981606721878052, 0.2901208571025303, 0.29707344089235577, 0.29923861367361887, 0.298676678112575, 0.29083784988948275, 0.292098377432142, 0.2967915790421622, 0.30099781921931673, 0.3082520365715027, 0.30726555415562223, 0.3064031686101641, 0.310158942426954, 0.29148065192358835, 0.3003516367503575, 0.305614173412323, 0.31255934068134855, 0.3024992857660566, 0.3219421420778547, 0.31301116943359375, 0.3169357010296413, 0.3202205555779593, 0.31463161536625456, 0.3206164411136082, 0.3229966333934239, 0.33276112590517315, 0.3287636637687683, 0.33375430958611624], "val_accuracy": [0.6460000276565552, 0.7149999737739563, 0.7536666393280029, 0.7713333368301392, 0.7630000114440918, 0.7866666913032532, 0.8019999861717224, 0.8113333582878113, 0.8220000267028809, 0.8343333601951599, 0.831333339214325, 0.8273333311080933, 0.8443333506584167, 0.8493333458900452, 0.8539999723434448, 0.8533333539962769, 0.8539999723434448, 0.8583333492279053, 0.8613333106040955, 0.8646666407585144, 0.8646666407585144, 0.8646666407585144, 0.8569999933242798, 0.8606666922569275, 0.8683333396911621, 0.8709999918937683, 0.8616666793823242, 0.8713333606719971, 0.8703333139419556, 0.8713333606719971, 0.874666690826416, 0.8730000257492065, 0.8730000257492065, 0.8763333559036255, 0.8796666860580444, 0.8803333044052124, 0.8740000128746033, 0.8769999742507935, 0.8763333559036255, 0.8813333511352539, 0.8803333044052124, 0.878333330154419, 0.8853333592414856, 0.8856666684150696, 0.8853333592414856, 0.8870000243186951, 0.8859999775886536, 0.8843333125114441, 0.8856666684150696, 0.8849999904632568, 0.8883333206176758, 0.8893333077430725, 0.8893333077430725, 0.8843333125114441, 0.8853333592414856, 0.8883333206176758, 0.8823333382606506]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [5, 3, 0, 2, 4, 1, 0, 0, 3, 5, 2, 8, 4, 1], [2, 2, 1, 2, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 82, 76, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [1, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [1, 0, 2], [6, 32, 85]], "fitness": -0.22914285957813263, "mapping_values": [1, 1, 1, 0, 1, 0, 6, 6, 4, 2, 2, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.787566902819815, 2.4830206854783343, 2.2418000171087233, 2.341015284134806, 2.303941831266277, 2.3029528872495346, 2.3034237846328662, 2.3033393779372213], "accuracy": [0.17236824333667755, 0.12957337498664856, 0.149649977684021, 0.11847840249538422, 0.09694888442754745, 0.09866596013307571, 0.09536388516426086, 0.1018359512090683], "val_loss": [1.9081042153494698, 1.974482876913888, 2.0622895104544505, 1.9745873042515345, 1.9737364224025182, 1.9739353997366769, 1.973771572113037, 1.973682131086077], "val_accuracy": [0.21299999952316284, 0.10066666454076767, 0.23800000548362732, 0.10000000149011612, 0.10066666454076767, 0.10000000149011612, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1], [0, 3, 0, 8, 4, 1, 0, 0, 3, 5, 2, 6, 4, 1], [2, 2, 1, 0, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 82, 76, 57, 60, 59, 23, 22, 72, 1], [1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [3, 3, 3, 3, 0], [39, 84, 6], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [1, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.12971428036689758, "mapping_values": [1, 8, 8, 5, 3, 0, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, alpha))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(grad, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.301788340186745, 2.299409998752784, 2.2992970205931034, 2.3008647698452918, 2.302285346687588, 2.3027006854250165, 2.3028714259727963, 2.3031535866616064], "accuracy": [0.09232597798109055, 0.10659094154834747, 0.11478008329868317, 0.120459645986557, 0.10632677376270294, 0.10091137140989304, 0.09985470771789551, 0.09787346422672272], "val_loss": [1.9683169637407576, 1.9693632807050432, 1.9713294165475028, 1.9730822699410575, 1.9736240250723702, 1.9739230019705636, 1.9741268157958984, 1.9743360791887556], "val_accuracy": [0.09166666865348816, 0.14433333277702332, 0.16233333945274353, 0.11900000274181366, 0.1003333330154419, 0.1003333330154419, 0.10000000149011612, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0], [0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [5, 3, 0, 2, 4, 1, 0, 0, 3, 5, 2, 8, 4, 1], [2, 2, 0, 2, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 82, 76, 57, 60, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [5, 3, 3, 3, 0], [38, 84, 6], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [1, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.11800000071525574, "mapping_values": [1, 5, 5, 3, 2, 0, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.multiply(grad, tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3018965470461783, 2.3000848960914255, 2.2997360411825243, 2.301258929952607, 2.3023959767501965, 2.3026717521920417, 2.3028999445004126, 2.3032544750059443], "accuracy": [0.09153348207473755, 0.10302469879388809, 0.11293092370033264, 0.11636507511138916, 0.10381719470024109, 0.1006472036242485, 0.10011887550354004, 0.09589222073554993], "val_loss": [1.968810762677874, 1.9699091230119978, 1.9717323439461845, 1.9732540675571986, 1.9735990933009557, 1.973921775817871, 1.9741830144609724, 1.9745140075683594], "val_accuracy": [0.08399999886751175, 0.13699999451637268, 0.15800000727176666, 0.11299999803304672, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [0, 4, 0, 2, 4, 1, 0, 0, 5, 5, 2, 8, 4, 1, 8, 7, 1, 1, 5], [1, 2, 0, 2, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [97, 82, 76, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [3, 3, 3, 3, 0], [38, 84, 6], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [1, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.11028571426868439, "mapping_values": [1, 30, 30, 19, 11, 2, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.math.square(tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(grad)))))))))), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(alpha)))), grad), alpha)))), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.302003165466627, 2.300792532007472, 2.300218093853428, 2.3016379834670024, 2.302510680807202, 2.3027321126215083, 2.303056431011895, 2.303668350827629], "accuracy": [0.09140139818191528, 0.09985470771789551, 0.10976093262434006, 0.1158367469906807, 0.10236428678035736, 0.1006472036242485, 0.09998679161071777, 0.09826971590518951], "val_loss": [1.9693147795540946, 1.9705040795462472, 1.9721405165536063, 1.973432949611119, 1.9736360141209193, 1.9740144184657507, 1.9744252477373396, 1.9752142769949776], "val_accuracy": [0.07966666668653488, 0.13199999928474426, 0.1469999998807907, 0.10700000077486038, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0], [0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [2, 1, 0, 2, 4, 0, 0, 0, 3, 5, 2, 8, 4, 1], [2, 2, 1, 2, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 82, 76, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 59, 6], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [1, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [1, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 3, 3, 0, 5, 5, 3, 2, 2, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, grad)))), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09351472556591034, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1], [0, 3, 0, 2, 4, 1, 0, 0, 5, 5, 2, 8, 4, 1], [1, 2, 0, 2, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 82, 76, 57, 60, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [2, 3, 3, 3, 0], [38, 84, 6], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [1, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [1, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 9, 5, 2, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))))), tf.math.negative(tf.math.negative(grad))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(beta, tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1], [2, 3, 0, 6, 4, 3, 0, 0, 0, 1, 2, 8, 4, 9, 0, 4, 8, 0], [1, 2, 0, 2, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [97, 82, 76, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [1, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 2, 6, 6, 4, 2, 2, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))))), tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07819310575723648, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [2, 1, 9, 2, 4, 0, 0, 0, 0, 5, 2, 8, 4, 1], [0, 1, 2, 2, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 82, 76, 57, 60, 59, 23, 22, 72, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [1, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [1, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 12, 5, 3, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.subtract(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.negative(tf.math.square(tf.math.add(tf.math.sqrt(alpha), tf.math.add(alpha, grad))))))), grad)), tf.math.add(alpha, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [8, 1, 6, 2, 4, 0, 0, 0, 0, 5, 2, 8, 4, 1], [1, 2, 2, 1, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [70, 35, 76, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [2, 4, 6], [64, 55], [1, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 11, 6, 1, 5, 5, 3, 2, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.subtract(tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.negative(alpha), grad)), tf.math.add(alpha, grad)), tf.math.negative(tf.math.negative(tf.math.negative(tf.math.square(alpha))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0804385170340538, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [2, 3, 0, 2, 2, 1, 0, 6, 3, 2, 2, 8, 4, 1], [1, 2, 0, 2, 1, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 82, 76, 57, 60, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [1, 0, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [1, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 10, 9, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(grad, grad))))))))), alpha))), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3025480150278956, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [5, 5, 0, 2, 4, 1, 0, 0, 3, 5, 2, 8, 4, 1], [1, 2, 0, 2, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 82, 76, 57, 60, 59, 23, 22, 72, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [1, 4, 6], [64, 55], [0, 1, 0, 1, 1], [2, 7, 5, 2, 9, 3, 9], [2, 0, 2], [35, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 0, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(beta, tf.math.add(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [2.302466715300135, 2.302522177489017, 2.3025134033011154, 2.3025291929344505, 2.30252258621108, 2.3025080575730112, 2.3025296181893036, 2.302513956063144, 2.3025114506998743, 2.3025168956562103, 2.3025265552143868], "accuracy": [0.10513802617788315, 0.10513802617788315, 0.10077928751707077, 0.09998679161071777, 0.10342095047235489, 0.09998679161071777, 0.10289261490106583, 0.10579843819141388, 0.09998679161071777, 0.10342095047235489, 0.10421344637870789], "val_loss": [1.9736392838614327, 1.97364228112357, 1.9736388751438685, 1.9736364909580775, 1.973639692578997, 1.973637308393206, 1.9736337661743164, 1.973635128566197, 1.9736334936959403, 1.9736368996756417, 1.9736374446323939], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10133333504199982, 0.10066666454076767, 0.10000000149011612, 0.10133333504199982, 0.10000000149011612, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1], [0, 3, 0, 2, 2, 1, 0, 0, 5, 5, 2, 8, 4, 1], [1, 1, 0, 2, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 82, 76, 57, 60, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [1, 4, 6], [64, 55], [1, 1, 0, 1, 1], [2, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 9, 5, 2, 5, 5, 3, 2, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))), tf.math.negative(tf.math.negative(grad))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [0, 3, 0, 2, 4, 1, 0, 0, 5, 5, 2, 8, 4, 1], [1, 2, 0, 2, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 82, 76, 57, 60, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [1, 4, 6], [64, 55], [0, 0, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.09914285689592361, "mapping_values": [1, 7, 7, 4, 3, 1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.square(beta), tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.364861212606837, 5731180147.258084, NaN, NaN, NaN, NaN], "accuracy": [0.09509972482919693, 0.10289261490106583, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.115835189819336, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1], [2, 1, 6, 2, 4, 0, 0, 0, 0, 5, 2, 8, 4, 1], [1, 2, 2, 1, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 35, 76, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [2, 4, 6], [64, 55], [0, 1, 0, 1, 1], [3, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.05714285746216774, "mapping_values": [1, 9, 9, 4, 5, 1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.subtract(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, grad), grad), alpha)), tf.math.add(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.math.add(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [2.303038437730837, 2.3034616050750447, 2.300686327127213, 2.3010975621742045, 2.301652242478882, 2.3020175299104713, 2.299924296316233, 2.301644484034115, 2.3020788877238028, 2.3005477880458507, 2.301879319154575, 2.301177540191995, 2.301820876465781, 2.300264790703387, 2.300788552234233, 2.3003677255867054, 2.301226820786395, 2.3008374616438765, 2.3007327297879816, 2.301090551231988], "accuracy": [0.08942015469074249, 0.09060890227556229, 0.09034473448991776, 0.0952318087220192, 0.09417514503002167, 0.09272222965955734, 0.0956280529499054, 0.09087307006120682, 0.08902391046285629, 0.09800554811954498, 0.09192973375320435, 0.09906221181154251, 0.09681680053472519, 0.09906221181154251, 0.10157178342342377, 0.1002509593963623, 0.09787346422672272, 0.0944393053650856, 0.09721305221319199, 0.09470347315073013], "val_loss": [1.9709956986563546, 1.970883846282959, 1.9707221303667342, 1.9705710411071777, 1.9704307147434779, 1.9704171589442663, 1.9704695429120744, 1.9705823489597865, 1.970618520464216, 1.9705850056239538, 1.9704788752964564, 1.9703408649989538, 1.9702403885977608, 1.9702316692897253, 1.9703057152884347, 1.9704324177333288, 1.9705773081098283, 1.9707561901637487, 1.9709375926426478, 1.9711354119437081], "val_accuracy": [0.03799999877810478, 0.041333332657814026, 0.043666668236255646, 0.04699999839067459, 0.05166666582226753, 0.05299999937415123, 0.056333333253860474, 0.05666666850447655, 0.057999998331069946, 0.06233333423733711, 0.06366666406393051, 0.0689999982714653, 0.07066666334867477, 0.07199999690055847, 0.07466666400432587, 0.07333333045244217, 0.07066666334867477, 0.0689999982714653, 0.06733333319425583, 0.0663333311676979]}}]