[{"genotype": [[0], [1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0], [1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1], [1, 5, 4, 2, 2, 9, 2, 2, 2, 5, 3, 0, 4, 1, 5, 5, 7, 6, 2, 8, 8, 8, 1, 4, 5, 3, 6, 3, 0, 5, 6, 5, 9, 1, 0, 8, 2, 3, 2, 8, 3, 0, 7, 8, 0, 6, 4, 1, 7, 9, 3, 8, 4, 2, 7, 5, 2, 0, 3, 4, 9, 7, 1, 3, 5, 6], [1, 1, 0, 0, 0, 2, 2, 0, 2, 1, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2, 0, 0, 0, 1, 1, 3, 1, 1, 0, 1], [83, 51, 17, 17, 60, 59, 23, 22, 72, 1, 45, 37, 82, 42, 99], [1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 43, 6], [1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 0, 1], [1, 0, 7, 1, 8, 2, 2, 1], [1, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.8500000238418579, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.0295779272203416, 1.0978417616825156, 0.7889132050790209, 0.6846284817679368, 0.6437195181185307, 0.5803657062514079, 0.552896761891077, 0.5304233110489516, 0.49464148340869524, 0.4852842186199849, 0.47031615134621374, 0.4454084725553774, 0.4224435398882847, 0.41476120824480667, 0.4019666312393054, 0.3791707529919007, 0.3822262963016098, 0.3724522844494263, 0.3562883080398213, 0.3431849238454012, 0.33664644538387883, 0.32726928625581064, 0.30908695518332796, 0.3206991131444885, 0.3064413307018882, 0.2944568039293633, 0.29395379579345926, 0.2878853071477545, 0.2805174217484237, 0.2739404120882662, 0.2630781502322813, 0.2568382089951444, 0.2422618747088163, 0.24466129388941152, 0.23677160528003421, 0.22106447603527454, 0.22284344225440908, 0.21584561647260037, 0.21587097417480045, 0.20727698660411728, 0.2085547206711539, 0.19551185688259518, 0.18944589244754104, 0.19579372994022096, 0.18282465492855557, 0.17907604355310422, 0.18000816072116768, 0.17096766168966332, 0.16205557301618861, 0.1709652509037939, 0.17556422949624556, 0.16258975614087143], "accuracy": [0.32584863901138306, 0.6161669492721558, 0.7010962963104248, 0.739928662776947, 0.757099449634552, 0.7829877138137817, 0.7985734939575195, 0.8064984679222107, 0.813498854637146, 0.8222163319587708, 0.8269713521003723, 0.8378021121025085, 0.8445383906364441, 0.8486329317092896, 0.852859616279602, 0.8634262084960938, 0.8556333184242249, 0.8626337051391602, 0.8698983192443848, 0.8717474341392517, 0.8729361891746521, 0.8794082403182983, 0.886672854423523, 0.8815215826034546, 0.8829745054244995, 0.8936732411384583, 0.889578640460968, 0.8948619961738586, 0.8926165699958801, 0.8975036144256592, 0.9009377956390381, 0.8997490406036377, 0.9074098467826843, 0.9038436412811279, 0.9119006991386414, 0.9152027368545532, 0.9152027368545532, 0.9166556596755981, 0.9165235757827759, 0.9203540086746216, 0.9183727502822876, 0.9243164658546448, 0.9262977242469788, 0.923920214176178, 0.9295997619628906, 0.930788516998291, 0.9299960136413574, 0.9336943626403809, 0.937260627746582, 0.9325056076049805, 0.9326376914978027, 0.9369964599609375], "val_loss": [0.911637680871146, 0.644595810345241, 0.5449381044932774, 0.5032633372715541, 0.4829226221357073, 0.44423769201551166, 0.42651087045669556, 0.4042248044695173, 0.3936627507209778, 0.39224151202610563, 0.37534035955156597, 0.35802111455372404, 0.3505171537399292, 0.3516390493937901, 0.33658695220947266, 0.3294295072555542, 0.3321308067866734, 0.3250692571912493, 0.31085982492991854, 0.3124967472893851, 0.30528524943760466, 0.30190007175718037, 0.30833379711423603, 0.3014781560216631, 0.29963964223861694, 0.2913673520088196, 0.2947258012635367, 0.3020681824002947, 0.2959522604942322, 0.292753849710737, 0.29305507455553326, 0.2893202304840088, 0.3039404664720808, 0.2902810829026358, 0.2884035451071603, 0.29585507086345125, 0.2858632802963257, 0.2937098571232387, 0.2844180805342538, 0.29607856273651123, 0.28722829478127615, 0.29294532537460327, 0.29890417201178415, 0.2970592975616455, 0.2993736777986799, 0.3015002863747733, 0.29295103890555246, 0.30645519495010376, 0.30749863386154175, 0.2959447077342442, 0.30064062561307636, 0.3160806894302368], "val_accuracy": [0.6546666622161865, 0.7236666679382324, 0.7593333125114441, 0.7666666507720947, 0.7846666574478149, 0.793666660785675, 0.8069999814033508, 0.8196666836738586, 0.828000009059906, 0.8256666660308838, 0.8323333263397217, 0.8433333039283752, 0.8463333249092102, 0.8489999771118164, 0.8516666889190674, 0.8536666631698608, 0.8523333072662354, 0.8573333621025085, 0.8586666584014893, 0.8656666874885559, 0.8650000095367432, 0.8666666746139526, 0.8629999756813049, 0.8693333268165588, 0.8679999709129333, 0.8656666874885559, 0.8686666488647461, 0.8663333058357239, 0.8730000257492065, 0.874666690826416, 0.8726666569709778, 0.8769999742507935, 0.874666690826416, 0.8726666569709778, 0.8769999742507935, 0.8806666731834412, 0.8759999871253967, 0.8793333172798157, 0.8820000290870667, 0.8799999952316284, 0.8806666731834412, 0.8830000162124634, 0.878000020980835, 0.8806666731834412, 0.8776666522026062, 0.8816666603088379, 0.8843333125114441, 0.8823333382606506, 0.8836666941642761, 0.8836666941642761, 0.8830000162124634, 0.8840000033378601]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 1, 4, 1, 2, 5, 2, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 1, 0, 2, 2, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 48, 17, 17, 60, 59, 23, 22, 72, 1], [1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 43, 6], [0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 0, 1], [5, 0, 7, 1, 8, 2, 2, 1], [1, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.845714271068573, "mapping_values": [1, 15, 15, 8, 7, 1, 3, 3, 1, 2, 1, 2, 2, 1, 1, 0, 2, 1, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.subtract(tf.math.pow(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, grad))), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.0295777383214055, 1.0978740298705503, 0.7897174777041148, 0.684732884668545, 0.6439054401212789, 0.5793067905542605, 0.5517006886003827, 0.529278043321473, 0.4946781782512856, 0.4840413411618413, 0.47069754138079145, 0.44705300082100413, 0.4214351064674512, 0.41454244146115904, 0.40031107688198914, 0.3790742196954552, 0.37933903388957524, 0.37207278654544174, 0.3579756245046575, 0.34185441869471317, 0.33422327591931705, 0.32955606496880446, 0.3107656063444311, 0.31838423576589275, 0.3040065576710233, 0.2866678595180761, 0.28575278059476716, 0.28398281260252217, 0.277869193691068, 0.26429310576231757, 0.26309259413192776, 0.25826987351377356, 0.23983382294600303, 0.2406520885743202, 0.23592989564949668, 0.2121125185482569, 0.21289674091403668, 0.21034376119515522, 0.2123384408159751, 0.19971518821767323, 0.20355297197574135, 0.19456212622709027, 0.18801218763302818, 0.1892593654903202, 0.17990063724264635, 0.17365323431054755, 0.17852257490315537], "accuracy": [0.32584863901138306, 0.6164311170578003, 0.7010962963104248, 0.7400607466697693, 0.7586844563484192, 0.7843085527420044, 0.7975168228149414, 0.804649293422699, 0.8145555257797241, 0.8259146809577942, 0.8253863453865051, 0.8389908671379089, 0.845859169960022, 0.8502179384231567, 0.8532558679580688, 0.8609166741371155, 0.8603883385658264, 0.86118084192276, 0.8717474341392517, 0.873860776424408, 0.8768987059593201, 0.8805969953536987, 0.8850878477096558, 0.8812574148178101, 0.884691596031189, 0.8932769894599915, 0.8916919827461243, 0.895918607711792, 0.8908994793891907, 0.9008057117462158, 0.902390718460083, 0.8990886211395264, 0.91124027967453, 0.9056927561759949, 0.9111081957817078, 0.9187690019607544, 0.9169198274612427, 0.9182406663894653, 0.9181085824966431, 0.9236560463905334, 0.9194294214248657, 0.9222031235694885, 0.9285431504249573, 0.926429808139801, 0.9282789826393127, 0.9363360404968262, 0.932769775390625], "val_loss": [0.9116247040884835, 0.644384503364563, 0.545789395059858, 0.5046764441898891, 0.48155530861445833, 0.44382660729544504, 0.4251172883169992, 0.4060649105480739, 0.39724228211811613, 0.3932775173868452, 0.37443224021366667, 0.35755458899906706, 0.3461815459387643, 0.3547125373567854, 0.3349924768720354, 0.32680305412837435, 0.3349837745938982, 0.32763494764055523, 0.30996315819876535, 0.3056455339704241, 0.30810461725507465, 0.30076341118131367, 0.3064528618540083, 0.2999755229268755, 0.2953233633722578, 0.2839059318814959, 0.30504729066576275, 0.29779888902391705, 0.28792658022471834, 0.2915686454091753, 0.2894191060747419, 0.2937961220741272, 0.29950941460473196, 0.29011804716927664, 0.2864777445793152, 0.29226487023489817, 0.29182333605630056, 0.28769008602414814, 0.2846290298870632, 0.2884214861052377, 0.2850820081574576, 0.2836047581263951, 0.3063912647111075, 0.3046356013842991, 0.30224078042166574, 0.3023316519601004, 0.2947093503815787], "val_accuracy": [0.6546666622161865, 0.7236666679382324, 0.7563333511352539, 0.765999972820282, 0.7853333353996277, 0.79666668176651, 0.8090000152587891, 0.8203333616256714, 0.8243333101272583, 0.8240000009536743, 0.8353333473205566, 0.8410000205039978, 0.8496666550636292, 0.8486666679382324, 0.8489999771118164, 0.8529999852180481, 0.8476666808128357, 0.8566666841506958, 0.859666645526886, 0.8690000176429749, 0.8679999709129333, 0.8666666746139526, 0.8643333315849304, 0.8676666617393494, 0.8696666955947876, 0.8733333349227905, 0.8693333268165588, 0.8696666955947876, 0.8766666650772095, 0.8740000128746033, 0.8756666779518127, 0.8733333349227905, 0.875, 0.8769999742507935, 0.8799999952316284, 0.8806666731834412, 0.8766666650772095, 0.8776666522026062, 0.8809999823570251, 0.8816666603088379, 0.8790000081062317, 0.887333333492279, 0.8759999871253967, 0.8843333125114441, 0.8793333172798157, 0.8836666941642761, 0.8870000243186951]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [1, 5, 4, 1, 2, 5, 2, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5, 0, 3, 3, 3, 5, 1, 8, 8, 1, 0, 3, 9], [2, 1, 0, 0, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 51, 17, 17, 60, 59, 23, 22, 72, 1], [1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 43, 6], [1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 0, 1], [1, 0, 7, 1, 8, 2, 2, 1], [1, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.8445714116096497, "mapping_values": [1, 8, 8, 4, 4, 2, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))))), tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.029577722575891, 1.0978859268978145, 0.7893768359232005, 0.6850803167812733, 0.6436854547529078, 0.5782481595242044, 0.5496522967038515, 0.5290047538719787, 0.49506372731391074, 0.48443551915212474, 0.4703253888655584, 0.44795539136717677, 0.4253283612535394, 0.41385972865143345, 0.39878585938181715, 0.37486509187362294, 0.378537714847437, 0.3700831060152264, 0.3513661917206035, 0.3420241634253072, 0.3348650199988137, 0.3238064238203515, 0.3104874907136987, 0.3148658409716667, 0.3002279927316138, 0.2868688250805141, 0.28705881137448597, 0.2809630058004147, 0.276490191832478, 0.2677182309568645, 0.2624963470863203, 0.2584172611412292, 0.24090990517842, 0.24245745327218868, 0.24019902191141956, 0.21480255385533836, 0.21892285975230888, 0.21510216911014485, 0.21307430650264894, 0.20907631076566296, 0.19996590389197355, 0.1909628297398985, 0.18199192638591516, 0.18524469049056255, 0.1752592508311222, 0.16621182661140915, 0.17274087790280224, 0.16851581524840561, 0.16344715329508314, 0.1589616999618602, 0.15870324906348993, 0.1536665521576861, 0.1507927666561809, 0.15610060841730794, 0.1583314980431287, 0.15188702343398586], "accuracy": [0.32584863901138306, 0.6165632009506226, 0.7012283802032471, 0.7391361594200134, 0.759609043598175, 0.7849689722061157, 0.7997622489929199, 0.8050455451011658, 0.8138951063156128, 0.8271034359931946, 0.82683926820755, 0.8370096683502197, 0.8446704745292664, 0.8495575189590454, 0.8521991968154907, 0.8643507957458496, 0.8618412613868713, 0.8601241707801819, 0.8708229064941406, 0.8714832663536072, 0.8761062026023865, 0.885219931602478, 0.8869370222091675, 0.8835028409957886, 0.8841632604598999, 0.8949940800666809, 0.8879936337471008, 0.8953903317451477, 0.8924844861030579, 0.9015982151031494, 0.9006736278533936, 0.9017302989959717, 0.908730685710907, 0.9078060984611511, 0.9051644206047058, 0.9170519113540649, 0.9152027368545532, 0.9206181764602661, 0.9146744012832642, 0.9203540086746216, 0.9236560463905334, 0.9265618920326233, 0.9319772720336914, 0.9282789826393127, 0.9326376914978027, 0.9344868659973145, 0.9311847686767578, 0.9373927116394043, 0.937656819820404, 0.9392418265342712, 0.9393739104270935, 0.9401664137840271, 0.9418835043907166, 0.9393739104270935, 0.9406947493553162, 0.9362039566040039], "val_loss": [0.9116247381482806, 0.6441789524895805, 0.5459374700273786, 0.5041627543313163, 0.48160999161856516, 0.44335693972451345, 0.424517069544111, 0.40654960700443815, 0.39534331219536917, 0.3923105682645525, 0.37841507366725374, 0.35786804131099154, 0.34660461970738005, 0.34988661323274883, 0.33811931950705393, 0.32712760993412565, 0.33919397422245573, 0.323365432875497, 0.3092197094644819, 0.3082531435149057, 0.3080612761633737, 0.3020067811012268, 0.3028907264981951, 0.30060372182301115, 0.29803742681230816, 0.28613509450639996, 0.3045591711997986, 0.29557702371052336, 0.2947566253798349, 0.2945494907242911, 0.3003669125693185, 0.30083117314747404, 0.3034622584070478, 0.2872682213783264, 0.28633603879383634, 0.29888675042561125, 0.28639683553150724, 0.2891909394945417, 0.28835741111210417, 0.29177580560956684, 0.2894676412854876, 0.29560393946511404, 0.30362326758248465, 0.295034612928118, 0.30287206172943115, 0.31384624753679546, 0.29895356723240446, 0.3178804687091282, 0.3071461660521371, 0.30211525303976877, 0.304256728717259, 0.3202029551778521, 0.3258759379386902, 0.32429552929741995, 0.33209850106920513, 0.3228203909737723], "val_accuracy": [0.6546666622161865, 0.7233333587646484, 0.7566666603088379, 0.7649999856948853, 0.7856666445732117, 0.7929999828338623, 0.8096666932106018, 0.8176666498184204, 0.8273333311080933, 0.8270000219345093, 0.8316666483879089, 0.8370000123977661, 0.8479999899864197, 0.8489999771118164, 0.8546666502952576, 0.8569999933242798, 0.8510000109672546, 0.8579999804496765, 0.8606666922569275, 0.8646666407585144, 0.8629999756813049, 0.8666666746139526, 0.8679999709129333, 0.8653333187103271, 0.8706666827201843, 0.8700000047683716, 0.8679999709129333, 0.8693333268165588, 0.8723333477973938, 0.8713333606719971, 0.8706666827201843, 0.8676666617393494, 0.8740000128746033, 0.8730000257492065, 0.8776666522026062, 0.8796666860580444, 0.8796666860580444, 0.8793333172798157, 0.8806666731834412, 0.8790000081062317, 0.8766666650772095, 0.8786666393280029, 0.878333330154419, 0.8856666684150696, 0.878000020980835, 0.8799999952316284, 0.8870000243186951, 0.8806666731834412, 0.8830000162124634, 0.8836666941642761, 0.887666642665863, 0.8859999775886536, 0.8786666393280029, 0.8866666555404663, 0.8736666440963745, 0.8870000243186951]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1], [1, 5, 4, 1, 2, 5, 2, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5, 0, 3, 3, 3, 5, 1, 8, 8, 1, 0, 3, 9], [2, 1, 0, 0, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [83, 51, 17, 17, 60, 59, 23, 22, 72, 1], [1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 43, 6], [1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 0, 1], [1, 0, 7, 1, 8, 2, 2, 1], [1, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.843999981880188, "mapping_values": [1, 59, 59, 37, 22, 7, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(tf.math.add(alpha, grad), alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))))))))), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.sqrt(alpha), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))))), tf.math.sqrt(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.square(tf.math.add(alpha, grad)))))))))), tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(grad, grad)), tf.math.square(tf.math.add(alpha, tf.math.subtract(grad, grad))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), grad))), tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)))))))))))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.029577841737944, 1.0978882007705317, 0.7891229463212478, 0.684021398360152, 0.6443591909307168, 0.5812904922804104, 0.5511262866452763, 0.5283292990082905, 0.49494152274728215, 0.4849485724892803, 0.47216585706395403, 0.4460102417260869, 0.4214864785503387, 0.4156334099044039, 0.39554174644143086, 0.37843401174834373, 0.38161724399204, 0.37259336366015433, 0.35339066591308166, 0.3413123382301441, 0.3380297036250317, 0.32428471067200215, 0.3103656833394801, 0.3202383863478761, 0.30257947440821936, 0.28870073794578566, 0.2898322136851507, 0.28642087989416515, 0.27955337634585425, 0.2698582595467898, 0.26187624383076635, 0.25673918354985203, 0.23892262492591143, 0.24534828657597568, 0.23922695043363812, 0.2177715523879699, 0.21788549064416865, 0.21873157869681487, 0.21573683106195438, 0.20622994369598285, 0.20461019800992894], "accuracy": [0.32584863901138306, 0.6164311170578003, 0.7009642124176025, 0.7407211661338806, 0.7580240368843079, 0.7828556299209595, 0.7977809906005859, 0.8075551390647888, 0.8140271902084351, 0.8253863453865051, 0.8264430165290833, 0.8372738361358643, 0.8467837572097778, 0.8507462739944458, 0.8578787446022034, 0.8589354157447815, 0.8590674996376038, 0.8609166741371155, 0.8691058158874512, 0.8735966086387634, 0.8710870146751404, 0.8804649114608765, 0.8841632604598999, 0.882710337638855, 0.885219931602478, 0.8932769894599915, 0.8879936337471008, 0.8942015767097473, 0.8944657444953918, 0.8971073627471924, 0.9033153057098389, 0.9008057117462158, 0.9074098467826843, 0.9035794734954834, 0.9080702662467957, 0.9138818979263306, 0.917580246925354, 0.91559898853302, 0.9152027368545532, 0.9203540086746216, 0.921938955783844], "val_loss": [0.9116365909576416, 0.6448233127593994, 0.5451877628053937, 0.5040046998432705, 0.4816232068198068, 0.44405404159000944, 0.42510553768702913, 0.4051119770322527, 0.3956088934625898, 0.39354311568396433, 0.375651947089604, 0.3579309412411281, 0.3500127707208906, 0.35072048221315655, 0.33465468883514404, 0.3277460421834673, 0.33889191491263254, 0.319751364844186, 0.3083880543708801, 0.3142655236380441, 0.3084616320473807, 0.30483879361833843, 0.3134058117866516, 0.3070533956800188, 0.295877320425851, 0.29005225215639385, 0.30507713556289673, 0.2932040350777762, 0.29320140395845684, 0.29375202315194265, 0.2970261744090489, 0.28941469533102854, 0.2995649916785104, 0.2919213090624128, 0.28823305879320416, 0.2938911148480007, 0.2900024482182094, 0.2896150691168649, 0.2883334074701582, 0.29016376393181936, 0.2927279642650059], "val_accuracy": [0.6546666622161865, 0.7229999899864197, 0.7580000162124634, 0.765666663646698, 0.7863333225250244, 0.7946666479110718, 0.8066666722297668, 0.8176666498184204, 0.82833331823349, 0.8273333311080933, 0.8326666951179504, 0.8403333425521851, 0.846666693687439, 0.8456666469573975, 0.8523333072662354, 0.8526666760444641, 0.843999981880188, 0.859333336353302, 0.8616666793823242, 0.8659999966621399, 0.8616666793823242, 0.8673333525657654, 0.8619999885559082, 0.8653333187103271, 0.8709999918937683, 0.8653333187103271, 0.8696666955947876, 0.875, 0.8733333349227905, 0.8726666569709778, 0.8743333220481873, 0.8759999871253967, 0.8773333430290222, 0.8723333477973938, 0.8759999871253967, 0.8816666603088379, 0.8756666779518127, 0.875333309173584, 0.8799999952316284, 0.8796666860580444, 0.8759999871253967]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1], [1, 5, 4, 1, 2, 5, 2, 2, 3, 5, 2, 0, 4, 1, 5, 5, 6, 6, 2, 8, 1, 8, 1, 6, 5, 0, 3, 3, 4, 5, 1, 8, 8, 1, 0, 3, 6, 3, 4, 1, 9, 2], [2, 1, 0, 0, 0, 2, 2, 0, 1, 2, 2, 0, 1, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [81, 51, 17, 17, 60, 59, 23, 22, 72, 1], [1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 43, 6], [1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 0, 1], [1, 0, 7, 1, 8, 2, 2, 1], [1, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.842285692691803, "mapping_values": [1, 69, 69, 42, 27, 9, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), alpha)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))))))))), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))))))), tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.sqrt(alpha), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(alpha))), tf.math.negative(grad)))))))), tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), grad)), grad)), tf.math.square(tf.math.subtract(grad, grad))))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), grad))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)))))))))))), tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(alpha, tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, grad), grad)))), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.0295924774770016, 1.098916099355237, 0.7889122810456353, 0.6845029040948668, 0.6466132654663185, 0.5822148699613059, 0.5488215938629711, 0.5270458632110053, 0.49366786665038476, 0.4826479021505578, 0.47301916944399613, 0.44776485386210946, 0.4267188621518351, 0.4149041145177896, 0.40266932393376853, 0.3799707307209034, 0.38275167428270984, 0.3727699861298494, 0.35560194453417177, 0.34194869630057434, 0.33556442114859997, 0.3209142175254222, 0.31400431498733605, 0.32127019187887945, 0.3036455580657893, 0.2863651969885987, 0.286592578178604, 0.2885123482627199, 0.2841511144299218, 0.2760808805488183, 0.26642556547362806, 0.26179300369666536, 0.24451114426845133, 0.2444618896659591, 0.24269319263982767, 0.2242557301048621, 0.2213348253445461, 0.21219025291881352, 0.21282945893160687, 0.20795783543622945, 0.2031840569114704, 0.194312498170261, 0.18958357574051365, 0.18741482104395107, 0.1856916836243831, 0.18094782610776292, 0.17777100208767369, 0.17075672312506185, 0.16566251053187858, 0.16270112748261628, 0.16503925717557189, 0.16185486408988986, 0.15054564648190383, 0.1508483681042968], "accuracy": [0.3257165551185608, 0.6166952848434448, 0.7004358768463135, 0.7384757399559021, 0.7580240368843079, 0.7816668748855591, 0.7998943328857422, 0.806630551815033, 0.8165367841720581, 0.8267071843147278, 0.8249900937080383, 0.8385946154594421, 0.8436138033866882, 0.8532558679580688, 0.8492933511734009, 0.8602562546730042, 0.8549728989601135, 0.8605204224586487, 0.8689737319946289, 0.8704266548156738, 0.8779553771018982, 0.8829745054244995, 0.884691596031189, 0.8799365758895874, 0.8860124349594116, 0.8938053250312805, 0.8918240666389465, 0.8948619961738586, 0.8901069760322571, 0.8985602855682373, 0.8993527889251709, 0.897899866104126, 0.9035794734954834, 0.9038436412811279, 0.9078060984611511, 0.9141460657119751, 0.913089394569397, 0.9181085824966431, 0.9207502603530884, 0.9191652536392212, 0.9237881302833557, 0.9241843819618225, 0.9272223114967346, 0.9272223114967346, 0.9285431504249573, 0.9311847686767578, 0.9329018592834473, 0.9350152015686035, 0.9371285438537598, 0.9384493231773376, 0.9358077049255371, 0.9359397888183594, 0.9402984976768494, 0.9426760077476501], "val_loss": [0.9112800530024937, 0.6440834147589547, 0.5434444972446987, 0.5028687715530396, 0.4858173302241734, 0.44538916860307964, 0.4243699482509068, 0.40596369334629606, 0.39367728573935373, 0.3935201168060303, 0.3728167584964207, 0.358902565070561, 0.35025979791368755, 0.35076444489615305, 0.3358460068702698, 0.32804010595594135, 0.3350436176572527, 0.32441619464329313, 0.3089241811207363, 0.3074331709316799, 0.3053513169288635, 0.3038275582449777, 0.3087575691086905, 0.30110715116773334, 0.2961694598197937, 0.28907655818121775, 0.2968155997140067, 0.3049534984997341, 0.29452780314854216, 0.29889999117170063, 0.2958841749600002, 0.29819189650671823, 0.30566872869219097, 0.2892459971564157, 0.2904959150723049, 0.2980582458632333, 0.29238154206957134, 0.2870377387319292, 0.2929081235613142, 0.2879149317741394, 0.2898364577974592, 0.2925706590924944, 0.2969030312129429, 0.3094461900847299, 0.3043885997363499, 0.308483498437064, 0.30303903988429476, 0.31009693656648907, 0.3071332062993731, 0.30384799412318636, 0.307391277381352, 0.30387449264526367, 0.31545473848070416, 0.3223690986633301], "val_accuracy": [0.6546666622161865, 0.7233333587646484, 0.7549999952316284, 0.7683333158493042, 0.784333348274231, 0.7956666946411133, 0.8073333501815796, 0.8213333487510681, 0.8320000171661377, 0.824999988079071, 0.8370000123977661, 0.846666693687439, 0.8473333120346069, 0.8493333458900452, 0.8506666421890259, 0.8539999723434448, 0.8506666421890259, 0.856333315372467, 0.8573333621025085, 0.8673333525657654, 0.8659999966621399, 0.8659999966621399, 0.8613333106040955, 0.8679999709129333, 0.8686666488647461, 0.8669999837875366, 0.8696666955947876, 0.8673333525657654, 0.871666669845581, 0.871666669845581, 0.8656666874885559, 0.871999979019165, 0.8713333606719971, 0.8723333477973938, 0.8759999871253967, 0.8763333559036255, 0.8763333559036255, 0.8820000290870667, 0.8809999823570251, 0.8823333382606506, 0.8786666393280029, 0.8826666474342346, 0.8830000162124634, 0.8830000162124634, 0.8823333382606506, 0.878333330154419, 0.8840000033378601, 0.8806666731834412, 0.8863333463668823, 0.8843333125114441, 0.8863333463668823, 0.8859999775886536, 0.8816666603088379, 0.8863333463668823]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [1, 5, 4, 1, 2, 5, 2, 2, 2, 5, 2, 0, 4, 0, 5, 5, 7, 6, 2, 8, 2, 8, 1, 6, 5, 0, 3, 3, 3, 1, 2, 8, 3, 1, 0, 3, 9], [0, 1, 0, 0, 2, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 1, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [83, 51, 17, 17, 60, 59, 23, 22, 72, 1], [1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 43, 6], [1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 0, 1], [1, 0, 7, 1, 8, 2, 2, 1], [1, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.8402857184410095, "mapping_values": [1, 60, 60, 36, 24, 9, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 50, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.square(tf.math.pow(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), tf.math.negative(grad)))))))), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.math.square(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.sqrt(alpha), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.add(grad, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))))), tf.math.sqrt(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.square(tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(grad, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(alpha, grad), grad))), grad)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32))), grad)), alpha))))))))))))))))), tf.math.multiply(tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.0295919761870596, 1.0988225487512668, 0.7889156937914092, 0.6844663727773164, 0.6471056131528684, 0.5827091401358008, 0.5492415679774941, 0.5264232128508228, 0.4958671074478208, 0.4847075171269729, 0.47110130971984276, 0.4478626790583299, 0.4271920424812364, 0.41271423001992247, 0.40001211337535575, 0.3746577983975741, 0.37988620663063954, 0.3706691475584365, 0.3581672544610688, 0.344668407910819, 0.3395049699687089, 0.3247643204657094, 0.3107001587085248, 0.32017193460870713, 0.30554620095956375, 0.2889796400649625, 0.28602452941653184, 0.2845462637413069, 0.2739913223237252, 0.26841640587748], "accuracy": [0.3257165551185608, 0.6164311170578003, 0.7010962963104248, 0.7384757399559021, 0.7568352818489075, 0.7808743715286255, 0.7989697456359863, 0.8059701323509216, 0.816008448600769, 0.8260467648506165, 0.8274996876716614, 0.8366134166717529, 0.8438779711723328, 0.8549728989601135, 0.8520671129226685, 0.8628978729248047, 0.8569541573524475, 0.8618412613868713, 0.8714832663536072, 0.8709549307823181, 0.8741249442100525, 0.8833707571029663, 0.8838990926742554, 0.8819178342819214, 0.8841632604598999, 0.8948619961738586, 0.8905032277107239, 0.8965790271759033, 0.8931449055671692, 0.8989565372467041], "val_loss": [0.9112775325775146, 0.64398912021092, 0.5436102492468697, 0.5033636093139648, 0.4853192908423288, 0.44383234637124197, 0.4242955105645316, 0.4071026529584612, 0.3937419056892395, 0.3892994523048401, 0.3769887089729309, 0.35749121223177227, 0.34757502589906963, 0.3459303379058838, 0.3359764984675816, 0.32713454961776733, 0.3376205137797764, 0.3234882780483791, 0.3119852542877197, 0.30902508326939176, 0.31016076462609427, 0.2984029906136649, 0.30606928042003084, 0.30375135796410696, 0.29627510479518343, 0.28757284368787495, 0.2933143973350525, 0.2958025336265564, 0.29875220571245464, 0.29468928064618793], "val_accuracy": [0.6543333530426025, 0.7229999899864197, 0.7556666731834412, 0.7676666378974915, 0.7846666574478149, 0.7950000166893005, 0.8056666851043701, 0.8163333535194397, 0.82833331823349, 0.8303333520889282, 0.8323333263397217, 0.8413333296775818, 0.8476666808128357, 0.8506666421890259, 0.8489999771118164, 0.856333315372467, 0.8503333330154419, 0.8583333492279053, 0.8583333492279053, 0.8636666536331177, 0.8646666407585144, 0.8683333396911621, 0.8643333315849304, 0.8690000176429749, 0.871666669845581, 0.8703333139419556, 0.8709999918937683, 0.8679999709129333, 0.8703333139419556, 0.8706666827201843]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1], [1, 5, 4, 1, 2, 5, 2, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 3, 8, 8, 8, 1, 6, 5, 0, 3, 4, 3, 0, 1, 8, 8, 1, 0, 3, 9], [2, 1, 0, 0, 1, 2, 2, 2, 1, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [83, 41, 17, 17, 60, 59, 23, 22, 72, 1], [1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 43, 6], [1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 0, 1], [1, 0, 7, 1, 8, 2, 2, 1], [1, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.8402857184410095, "mapping_values": [1, 46, 46, 28, 18, 4, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 52, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.pow(tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(grad)), tf.math.sqrt(grad)), tf.math.add(alpha, alpha)))))))))))), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.sqrt(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.square(tf.math.add(alpha, grad)))))))), tf.math.negative(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.pow(grad, grad)))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.0295920167160135, 1.0987840109119609, 0.7891723165391159, 0.6850682455298923, 0.6458735863971294, 0.5829023574683739, 0.5507648292549565, 0.527072037636974, 0.4938719087682459, 0.48399032952133314, 0.46894123662558873, 0.44577352064333853, 0.4247966247456122, 0.41641481826727683, 0.4038997499454039, 0.37646415848159487, 0.3795837217499284, 0.3685363038317434, 0.3539703220439987, 0.34035750221362154, 0.3320768264149001, 0.3183725282477035, 0.3121216426538423, 0.31853200756028155, 0.307357581052105, 0.2927085596926854, 0.29033967899435376, 0.287122497103076, 0.2776908893603155, 0.2731075695107059, 0.2630904122681241, 0.2532373429202857, 0.23696262164359017, 0.24522207037309188, 0.23419417982143323, 0.21146586226977693, 0.21210666539142822, 0.2045874633687189, 0.20950695871716368, 0.20740798155684528, 0.20028983364566882, 0.19243208798694889, 0.18713499733981612, 0.18981717495224842, 0.18060719244366136, 0.18262811132850995, 0.18064078601430736], "accuracy": [0.3257165551185608, 0.6165632009506226, 0.7005679607391357, 0.737022876739502, 0.7564390301704407, 0.7833839654922485, 0.7975168228149414, 0.8067626357078552, 0.8150838613510132, 0.8255184292793274, 0.8273676037788391, 0.8368775844573975, 0.8455950617790222, 0.8514066934585571, 0.8512746095657349, 0.8622375130653381, 0.8607845902442932, 0.8644828796386719, 0.8667283058166504, 0.8698983192443848, 0.8747853636741638, 0.8836349248886108, 0.8816536664962769, 0.8805969953536987, 0.8854840993881226, 0.891559898853302, 0.8878615498542786, 0.8928807377815247, 0.8923524022102356, 0.9002773761749268, 0.8994848728179932, 0.9021265506744385, 0.9095231890678406, 0.9049002528190613, 0.9100515246391296, 0.9177123308181763, 0.9178444147109985, 0.9207502603530884, 0.9198256731033325, 0.9210143685340881, 0.9224672913551331, 0.9260335564613342, 0.926429808139801, 0.9240522980690002, 0.9318451881408691, 0.9295997619628906, 0.9290714859962463], "val_loss": [0.9112753868103027, 0.6439923899514335, 0.5438052415847778, 0.5028225864682879, 0.48626300266810824, 0.4450475828988211, 0.42726778984069824, 0.4066716262272426, 0.3935867633138384, 0.3890303203037807, 0.37425363063812256, 0.3586026004382542, 0.34766184432165964, 0.35197229044778006, 0.3419864092554365, 0.3288903832435608, 0.3340512769562857, 0.31880747420447214, 0.3137909770011902, 0.3073100447654724, 0.30393992151532856, 0.2976251414843968, 0.2997377174241202, 0.30228064741407124, 0.3000805974006653, 0.2886764918054853, 0.30173912218638826, 0.2977452448436192, 0.2931666374206543, 0.29952857324055265, 0.29108287606920513, 0.29499911410467966, 0.3034864068031311, 0.2878214716911316, 0.290320200579507, 0.2966215355055673, 0.29097414016723633, 0.289984975542341, 0.2932323898587908, 0.29128496987479074, 0.28924472842897686, 0.28536002125058857, 0.293059093611581, 0.3024361899920872, 0.3093929375920977, 0.29671187911714825, 0.2990656409944807], "val_accuracy": [0.6543333530426025, 0.7250000238418579, 0.7563333511352539, 0.768666684627533, 0.784333348274231, 0.7956666946411133, 0.8059999942779541, 0.8220000267028809, 0.8293333053588867, 0.8266666531562805, 0.8330000042915344, 0.843666672706604, 0.8500000238418579, 0.8479999899864197, 0.8446666598320007, 0.8536666631698608, 0.8506666421890259, 0.8600000143051147, 0.859333336353302, 0.862666666507721, 0.8663333058357239, 0.8659999966621399, 0.8656666874885559, 0.8693333268165588, 0.8666666746139526, 0.8659999966621399, 0.8736666440963745, 0.8696666955947876, 0.8690000176429749, 0.871999979019165, 0.874666690826416, 0.875, 0.8726666569709778, 0.8730000257492065, 0.8756666779518127, 0.8813333511352539, 0.8786666393280029, 0.8813333511352539, 0.8826666474342346, 0.8769999742507935, 0.8806666731834412, 0.8870000243186951, 0.8823333382606506, 0.8806666731834412, 0.8793333172798157, 0.8813333511352539, 0.8843333125114441]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1], [1, 5, 4, 5, 2, 5, 9, 2, 9, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 3, 1, 6, 3, 5, 8, 8, 4], [1, 1, 0, 0, 0, 2, 2, 0, 2, 0, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 51, 17, 17, 73, 59, 23, 22, 72, 1], [1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 43, 6], [1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 0, 1], [1, 0, 7, 1, 8, 2, 2, 1], [1, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.8377143144607544, "mapping_values": [1, 13, 13, 10, 3, 3, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.pow(tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(alpha, alpha), alpha)))), tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.square(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.0295789859802214, 1.097988652405155, 0.7894654424120296, 0.684393079997904, 0.6432151505267222, 0.5797938943940572, 0.5511461012808402, 0.5271031269622816, 0.49612594284968464, 0.48308956019236915, 0.473786224750968, 0.44754425297796196, 0.42511440264613415, 0.4135840208090181, 0.40231501662483965, 0.377172037264328, 0.38027673260237577, 0.36933629988458855, 0.3551044288470115, 0.3449553244377817, 0.33240664685092125, 0.32256116516412825, 0.3081243568683234, 0.31565567721166093, 0.30479850314863605, 0.2915462446510359, 0.2902707397237099, 0.28516625090911957, 0.27811679477862333, 0.2741757813083844, 0.2615503956573735, 0.2543884606653311, 0.23788736678936445, 0.24407265688709814, 0.23647723814295174, 0.2193932573730132, 0.21980576438399008, 0.21353126207732914, 0.21468155413547196, 0.20362866971321456, 0.20121466243161565, 0.19478971946587448, 0.18527375659993328, 0.18773100754533226, 0.17846541578475872, 0.16846993990491457, 0.17734563376067133], "accuracy": [0.32584863901138306, 0.6165632009506226, 0.7022850513458252, 0.7387399077415466, 0.759609043598175, 0.7854973077774048, 0.7972526550292969, 0.8068947196006775, 0.8133667707443237, 0.8256505131721497, 0.824329674243927, 0.8396512866020203, 0.8471800088882446, 0.8536521196365356, 0.8506141901016235, 0.8613129258155823, 0.8595958352088928, 0.8626337051391602, 0.8676528930664062, 0.8720116019248962, 0.8749174475669861, 0.8819178342819214, 0.8844274282455444, 0.8858803510665894, 0.8820499181747437, 0.8898428082466125, 0.8897107243537903, 0.8969752788543701, 0.893541157245636, 0.8975036144256592, 0.9010698795318604, 0.9025228023529053, 0.9108440279960632, 0.9070135951042175, 0.9096552729606628, 0.9165235757827759, 0.9165235757827759, 0.9162594079971313, 0.9132214784622192, 0.9225993752479553, 0.9237881302833557, 0.9224672913551331, 0.9266939759254456, 0.9280148148536682, 0.9301280975341797, 0.9356756210327148, 0.9310526847839355], "val_loss": [0.9116252149854388, 0.6442081076758248, 0.5450990200042725, 0.504145690373012, 0.4820641449519566, 0.44395266260419575, 0.4250438043049404, 0.40671730041503906, 0.3936061603682382, 0.39386927230017527, 0.3764996698924473, 0.35964847462517874, 0.3495045474597386, 0.35114866495132446, 0.33697750738688875, 0.32675608566829134, 0.3352227977343968, 0.3228558727673122, 0.31311592885426115, 0.30629790680749075, 0.3048270344734192, 0.29785006386893137, 0.3033286929130554, 0.2969772730554853, 0.29681704725537983, 0.2907954454421997, 0.296124415738242, 0.29600527456828524, 0.29395450013024466, 0.2917838437216623, 0.29516890219279696, 0.2969392793519156, 0.3013248528753008, 0.2957479272569929, 0.28205748966761995, 0.29696272952216013, 0.28914904594421387, 0.2948248216084072, 0.28313478401729036, 0.2947009376117161, 0.287402834211077, 0.2858517936297825, 0.3018969552857535, 0.30295062916619436, 0.3043567027364458, 0.3096058538981846, 0.29953521490097046], "val_accuracy": [0.6543333530426025, 0.7236666679382324, 0.7573333382606506, 0.765333354473114, 0.7856666445732117, 0.79666668176651, 0.8100000023841858, 0.8183333277702332, 0.8299999833106995, 0.8233333230018616, 0.8320000171661377, 0.8416666388511658, 0.846666693687439, 0.8500000238418579, 0.8500000238418579, 0.8546666502952576, 0.8506666421890259, 0.8576666712760925, 0.8586666584014893, 0.8666666746139526, 0.8686666488647461, 0.8673333525657654, 0.8646666407585144, 0.8696666955947876, 0.8696666955947876, 0.8663333058357239, 0.8743333220481873, 0.8709999918937683, 0.8766666650772095, 0.8736666440963745, 0.8740000128746033, 0.8769999742507935, 0.8726666569709778, 0.8773333430290222, 0.8813333511352539, 0.8823333382606506, 0.8793333172798157, 0.8803333044052124, 0.8833333253860474, 0.8796666860580444, 0.8830000162124634, 0.8880000114440918, 0.8756666779518127, 0.8809999823570251, 0.8796666860580444, 0.8820000290870667, 0.8836666941642761]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [1, 5, 4, 5, 2, 5, 2, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 1, 0, 0, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 51, 17, 17, 60, 59, 23, 22, 72, 1], [1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 1, 3, 3, 0], [38, 43, 6], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [1, 0, 7, 1, 8, 2, 2, 1], [1, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [0, 1, 2], [12, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 5, 5, 2, 3, 1, 4, 2, 2, 0, 0, 2, 1, 1, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.square(tf.math.pow(grad, tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))))), tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, tf.math.negative(sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [3.4390523062406073, 14.644472684748122, 40.4100249344253, 84.46233325595979, 152.20515838328794, 246.37917311253597], "accuracy": [0.09668471664190292, 0.09774138033390045, 0.10738343745470047, 0.09932637959718704, 0.09021265059709549, 0.10408136248588562], "val_loss": [5.022316523960659, 16.82879420689174, 38.94046129499163, 73.97979082380023, 125.08245849609375, 195.65036010742188], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 4, 1, 2, 5, 2, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 1, 0, 0, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 51, 17, 17, 60, 59, 23, 22, 72, 1], [0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [5, 3, 9, 0, 1, 9], [0, 0, 3, 3, 0], [38, 43, 6], [1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 0, 1], [1, 0, 7, 1, 8, 2, 2, 1], [1, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.302481726412256, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [1, 5, 4, 5, 2, 5, 2, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 1, 0, 0, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [83, 51, 17, 17, 60, 59, 23, 22, 72, 1], [1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 43, 6], [1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 0, 1], [1, 0, 7, 1, 8, 2, 2, 1], [1, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [4, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 5, 2, 3, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.pow(grad, tf.math.add(alpha, tf.math.square(alpha)))), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.pow(beta, tf.math.add(alpha, beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [1, 3, 4, 1, 2, 5, 2, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 1, 0, 1, 2, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 39, 17, 17, 60, 59, 23, 22, 72, 1], [0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 1, 1, 0, 1, 1, 0], [4, 3, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 43, 6], [0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [3, 0, 7, 1, 8, 2, 2, 1], [1, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 5, 5, 3, 2, 2, 4, 2, 2, 0, 0, 2, 1, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(grad, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.negative(sigma)), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [1, 4, 4, 1, 2, 5, 2, 2, 2, 5, 3, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5, 2, 3, 3, 5, 8, 1, 9, 0, 2, 8], [1, 1, 2, 0, 0, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [97, 51, 17, 17, 60, 59, 23, 22, 72, 1], [1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 43, 6], [1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 0, 1], [1, 0, 7, 1, 8, 2, 2, 1], [1, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 57, 57, 35, 22, 6, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.pow(tf.math.pow(alpha, tf.math.subtract(alpha, tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.add(alpha, grad)), tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.add(alpha, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))), tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(grad, tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.sqrt(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))), grad)))))))))))), tf.math.add(alpha, tf.math.subtract(tf.math.sqrt(tf.math.add(alpha, grad)), tf.math.subtract(grad, tf.math.divide_no_nan(grad, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), grad)), tf.math.square(tf.math.sqrt(tf.math.add(alpha, grad)))), tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))))))))), tf.math.subtract(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(tf.math.sqrt(grad), grad)))), lambda shape,  alpha, beta, grad: tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.302481726412256, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1], [1, 9, 6, 1, 2, 2, 2, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5, 2, 4, 1, 3, 2, 9, 4, 4, 7, 6, 5, 1, 1, 6, 0, 6], [2, 1, 0, 0, 0, 2, 2, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 74, 17, 17, 60, 59, 23, 22, 72, 1], [1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 43, 6], [1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 0, 1], [1, 0, 7, 1, 8, 2, 2, 1], [1, 7, 0, 6], [64, 55], [0, 0, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 70, 70, 41, 29, 9, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 5, 3, 2, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(tf.math.add(alpha, grad), alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))))))), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.square(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.sqrt(alpha), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.add(alpha, grad)))), tf.math.subtract(tf.math.divide_no_nan(grad, tf.math.square(grad)), tf.math.add(tf.math.add(alpha, grad), grad)))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.multiply(grad, grad)), tf.math.add(tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), grad))), grad))))))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad))), tf.math.negative(tf.math.add(alpha, grad)))), tf.math.divide_no_nan(alpha, grad)))), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.square(beta), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1], [1, 5, 4, 1, 2, 9, 2, 2, 2, 5, 2, 8, 1, 1, 9, 5, 1, 6, 2, 8, 1, 8, 1, 6, 5, 0, 3, 3, 3, 5, 1, 8, 8, 1, 0, 3, 9], [2, 1, 0, 2, 2, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 1, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 48, 17, 47, 60, 59, 23, 22, 72, 1], [1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 43, 6], [1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [1, 0, 7, 1, 8, 2, 2, 1], [1, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 40, 40, 25, 15, 5, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.pow(tf.math.subtract(tf.math.add(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.square(grad)))), tf.math.add(tf.math.add(alpha, grad), tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.add(alpha, tf.math.square(tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.sqrt(alpha), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.square(tf.math.add(alpha, grad)))))))))))), lambda shape,  alpha, beta, grad: tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.302481726412256, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [1, 3, 2, 1, 2, 5, 2, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 1, 0, 1, 2, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 39, 17, 17, 60, 59, 23, 22, 72, 1], [1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0], [6, 3, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 43, 6], [0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [2, 0, 7, 1, 8, 2, 2, 1], [1, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 7, 7, 1, 1, 1, 0, 1, 1, 4, 2, 2, 0, 0, 2, 1, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.multiply(grad, alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha)), grad)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.negative(sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.302481726412256, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [1, 5, 4, 5, 2, 5, 2, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 1, 0, 0, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 39, 17, 17, 60, 59, 23, 22, 72, 1], [1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 43, 6], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 1], [0, 0, 7, 1, 8, 2, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.09571428596973419, "mapping_values": [1, 3, 3, 1, 2, 0, 5, 5, 2, 3, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, grad), alpha), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), grad), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3017666750832193, 2.3019394428659785, 2.3004580421722354, 2.3001303551864978, 2.2996883264795316, 2.298646179345841, 2.299783769899025, 2.299062525670227, 2.300143528923052, 2.301208546321941, 2.3012668669200167], "accuracy": [0.09298639744520187, 0.09311848133802414, 0.09813763201236725, 0.09496764093637466, 0.1026284471154213, 0.11108175665140152, 0.10553427785634995, 0.10751552134752274, 0.10130762308835983, 0.0940430611371994, 0.08955223858356476], "val_loss": [1.9707112993512834, 1.9699705668858118, 1.9693055152893066, 1.969074317387172, 1.9690107618059431, 1.9693828310285295, 1.9702578953334264, 1.9709572110857283, 1.9714108194623674, 1.9719485555376326, 1.9725050245012556], "val_accuracy": [0.041333332657814026, 0.05166666582226753, 0.06533333659172058, 0.08500000089406967, 0.11299999803304672, 0.1276666671037674, 0.11900000274181366, 0.10966666787862778, 0.09733333438634872, 0.0729999989271164, 0.06666667014360428]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [1, 5, 4, 1, 2, 5, 2, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5, 0, 3, 3, 3, 5, 1, 8, 8, 1, 0, 3, 9], [2, 1, 0, 0, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [83, 51, 17, 17, 60, 59, 23, 22, 72, 1], [1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 4, 3, 3, 0], [38, 43, 6], [1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 0, 1], [1, 0, 7, 1, 8, 2, 2, 1], [1, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.09542857110500336, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 2, 3, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.301766657101842, 2.30193875910127, 2.3004562920898004, 2.3001333689094454, 2.299699766666441, 2.298656471401331, 2.299797769141408, 2.299075913262358, 2.3001456972378405, 2.301207448796605, 2.3012717519343693], "accuracy": [0.09298639744520187, 0.09311848133802414, 0.09813763201236725, 0.09536388516426086, 0.10276053100824356, 0.11081759631633759, 0.10566636174917221, 0.10791176557540894, 0.10117553919553757, 0.09417514503002167, 0.08902391046285629], "val_loss": [1.9707110268729073, 1.9699694088527135, 1.9693053790501185, 1.9690844672066825, 1.9690215247017997, 1.9693967955453056, 1.970273699079241, 1.9709599358694894, 1.9714091845921107, 1.9719538007463728, 1.9725100653512138], "val_accuracy": [0.041333332657814026, 0.05166666582226753, 0.06533333659172058, 0.08500000089406967, 0.11266666650772095, 0.12800000607967377, 0.11800000071525574, 0.10899999737739563, 0.09666666388511658, 0.0716666653752327, 0.06700000166893005]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [1, 5, 6, 1, 2, 5, 2, 2, 2, 5, 2, 0, 4, 2, 5, 5, 7, 6, 2, 8, 1, 5, 1, 6, 5, 7, 2, 5, 5, 1, 4, 1, 2, 8, 6, 7, 8, 3, 3, 1, 4, 4, 3, 8, 9], [2, 1, 0, 2, 0, 2, 2, 2, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 48, 17, 17, 60, 59, 23, 22, 72, 1], [1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 43, 6], [1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [1, 0, 7, 1, 8, 2, 2, 1], [1, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.0754285678267479, "mapping_values": [1, 75, 75, 45, 30, 6, 5, 5, 2, 3, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.negative(tf.math.add(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))))))), grad)), tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))))), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))))))), tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.sqrt(alpha), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))))), tf.math.square(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.add(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.subtract(grad, grad)))))), grad))), tf.math.add(alpha, tf.math.pow(grad, grad)))))))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.add(alpha, grad)))))), tf.math.multiply(grad, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, grad))))), tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha))), grad))), tf.math.add(alpha, grad)))))), tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)))))), grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.301776555676927, 2.302119664039909, 2.300985830114534, 2.300996030909022, 2.3007470577337235, 2.2995696228099396, 2.3012294512320315, 2.298418043437903, 2.299368437774713, 2.301072058503213, 2.3001288879249926, 2.3002379803436463, 2.2993510758572913, 2.30016524460117, 2.2998575759270974, 2.300274919477893, 2.2998801746451543], "accuracy": [0.09298639744520187, 0.09272222965955734, 0.09628847241401672, 0.09074098616838455, 0.09496764093637466, 0.09853387624025345, 0.09166556596755981, 0.10051512718200684, 0.09734513610601425, 0.09959053993225098, 0.09840179979801178, 0.09774138033390045, 0.1018359512090683, 0.09734513610601425, 0.10038304328918457, 0.09813763201236725, 0.10038304328918457], "val_loss": [1.9707587105887276, 1.970268930707659, 1.9698880740574427, 1.9696766308375768, 1.9695255415780204, 1.9695179121834892, 1.9695615087236678, 1.9696274484906877, 1.9696154594421387, 1.9695415496826172, 1.969449724469866, 1.969468593597412, 1.9696343285696847, 1.9698986325945174, 1.9701617104666573, 1.9703950200762068, 1.9706319400242396], "val_accuracy": [0.04066666588187218, 0.04633333161473274, 0.05400000140070915, 0.05833333358168602, 0.06499999761581421, 0.06866666674613953, 0.07266666740179062, 0.07866666465997696, 0.08566666394472122, 0.08933333307504654, 0.09300000220537186, 0.09333333373069763, 0.09200000017881393, 0.09000000357627869, 0.08299999684095383, 0.08033332973718643, 0.07566666603088379]}}, {"genotype": [[0], [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 5, 4, 1, 2, 1, 2, 5, 6, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [1, 1, 2, 1, 0, 0, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [51, 76, 17, 30, 60, 59, 23, 22, 72, 1], [1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [2, 0, 3, 3, 0], [9, 43, 6], [1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 0, 1], [1, 0, 7, 1, 8, 2, 2, 1], [1, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.035999998450279236, "mapping_values": [1, 15, 15, 8, 7, 2, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.square(tf.math.pow(tf.math.add(alpha, alpha), tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(tf.math.subtract(tf.math.add(alpha, grad), alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.multiply(beta, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3018602097684746, 2.3027094526534, 2.3021105091569605, 2.3026404077854643, 2.3029403628894856, 2.301884576644817], "accuracy": [0.09245806187391281, 0.09166556596755981, 0.09126931428909302, 0.08691058307886124, 0.09034473448991776, 0.08849557489156723], "val_loss": [1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056], "val_accuracy": [0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856]}}]