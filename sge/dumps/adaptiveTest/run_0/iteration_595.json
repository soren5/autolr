[{"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 1, 6, 9, 8, 0, 0, 2, 0, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 0, 0, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 13, 17, 60, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 1, 1, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [2, 4, 0], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.843999981880188, "mapping_values": [1, 8, 8, 5, 3, 3, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))))), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.040039285173065, 1.0756255551777054, 0.8006330896850433, 0.7097951050416244, 0.6558592107475174, 0.5992474726335704, 0.5499460426351225, 0.5332764990026484, 0.4935474965345937, 0.48071120067468454, 0.4595001456901587, 0.446058400964315, 0.43064893155270534, 0.4166445065294164, 0.3938248078734285, 0.38175469795159533, 0.3839996422971512, 0.3616367180892867, 0.35399726120598357, 0.3436463034352953, 0.32473535143530774, 0.31875973125458895, 0.3096655528181028, 0.30562977456004153, 0.2904680877030408, 0.29215112296054235, 0.2807585628883572, 0.27771633805190693, 0.274112442197612, 0.2633133323287699, 0.25499008505406745, 0.24825120947466803, 0.24008862184944438, 0.23640957746712318, 0.22538814313730401, 0.2301868600769601, 0.21712560431320496, 0.21282406561662176, 0.20832612435453368, 0.2024330273063947, 0.1958321416914156, 0.19351746111994075, 0.18696141763173388, 0.18811282033909896, 0.17873364292737626, 0.1685035949243987, 0.16133979859014844, 0.16464355622599422, 0.15819541950149307], "accuracy": [0.3147536516189575, 0.6194690465927124, 0.7003037929534912, 0.7342491149902344, 0.752740740776062, 0.7729493975639343, 0.7878747582435608, 0.7997622489929199, 0.8121780753135681, 0.826310932636261, 0.833179235458374, 0.8393871188163757, 0.8391229510307312, 0.8474441766738892, 0.856689989566803, 0.8588033318519592, 0.8556333184242249, 0.8656716346740723, 0.8664641380310059, 0.8714832663536072, 0.8800686597824097, 0.8816536664962769, 0.8919561505317688, 0.887201189994812, 0.889578640460968, 0.8928807377815247, 0.8953903317451477, 0.8986923694610596, 0.8981640338897705, 0.9009377956390381, 0.8986923694610596, 0.9029190540313721, 0.9113723635673523, 0.9109761118888855, 0.9163914918899536, 0.9100515246391296, 0.9202219247817993, 0.919561505317688, 0.9194294214248657, 0.920089840888977, 0.9233918786048889, 0.9222031235694885, 0.9290714859962463, 0.9276185631752014, 0.9322414398193359, 0.9325056076049805, 0.9371285438537598, 0.9368643760681152, 0.9409589171409607], "val_loss": [0.92186096736363, 0.6544870138168335, 0.5617714439119611, 0.5179874045508248, 0.48458458696092876, 0.45469352177211214, 0.4273275647844587, 0.40433700595583233, 0.39421216930661884, 0.3738914132118225, 0.3655427268573216, 0.3697509935923985, 0.3453233667782375, 0.33768194913864136, 0.335586530821664, 0.3254039117268154, 0.3247811368533543, 0.31779253482818604, 0.3199955565588815, 0.31265802894319805, 0.30792356388909475, 0.29651823214122225, 0.30392132486615864, 0.30109613282339914, 0.3020122987883432, 0.2927009548459734, 0.29491714920316425, 0.29856627328055246, 0.28516983134405954, 0.29283089297158377, 0.2974678533417838, 0.28615476403917584, 0.29522708484104704, 0.2886380212647574, 0.29221843821661814, 0.29939197642462595, 0.29086350543158396, 0.28237779651369366, 0.2878877009664263, 0.3013169595173427, 0.30126865421022686, 0.2968513625008719, 0.2991641419274466, 0.2952916622161865, 0.2967176011630467, 0.30496911491666523, 0.3080044984817505, 0.29307751996176584, 0.32119469131742207], "val_accuracy": [0.6456666588783264, 0.7223333120346069, 0.7443333268165588, 0.7566666603088379, 0.7793333530426025, 0.7879999876022339, 0.8029999732971191, 0.8213333487510681, 0.8193333148956299, 0.8389999866485596, 0.8426666855812073, 0.8363333344459534, 0.8493333458900452, 0.8546666502952576, 0.8516666889190674, 0.8546666502952576, 0.8519999980926514, 0.8650000095367432, 0.859000027179718, 0.8646666407585144, 0.8640000224113464, 0.8733333349227905, 0.8683333396911621, 0.8683333396911621, 0.8730000257492065, 0.8743333220481873, 0.8733333349227905, 0.8703333139419556, 0.878333330154419, 0.8723333477973938, 0.8686666488647461, 0.8790000081062317, 0.8796666860580444, 0.8843333125114441, 0.8756666779518127, 0.8786666393280029, 0.8820000290870667, 0.8849999904632568, 0.8856666684150696, 0.8853333592414856, 0.8870000243186951, 0.8830000162124634, 0.8846666812896729, 0.8880000114440918, 0.8849999904632568, 0.8836666941642761, 0.8856666684150696, 0.887333333492279, 0.8849999904632568]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 1, 6, 9, 2, 0, 0, 2, 0, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 0, 0, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 13, 31, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [2, 3, 4], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.8420000076293945, "mapping_values": [1, 10, 10, 6, 4, 3, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(grad, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))))), alpha)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.03928850357165, 1.0664594567699077, 0.7986748374810607, 0.7112810063151132, 0.6559629342370518, 0.6012521282147423, 0.5488290739585349, 0.5344670626859246, 0.4988230213024959, 0.4873966728108922, 0.460260276080532, 0.4430739675625015, 0.43270683777078806, 0.41704717005295855, 0.395696044605894, 0.3830237832594982, 0.37854589891707685, 0.36338975235550175, 0.35552956738004027, 0.3486495878419006, 0.32724307157249816, 0.3178055399893266, 0.317233763130318, 0.3073710341652576, 0.2941088288207615, 0.2972862160539646, 0.28227476477071894, 0.2771488156741904, 0.2751186453017576, 0.2688677245599719, 0.25865782459792114, 0.253082059795169], "accuracy": [0.3143574297428131, 0.6214502453804016, 0.6993792057037354, 0.7378153204917908, 0.7530049085617065, 0.7744023203849792, 0.789459764957428, 0.7991018295288086, 0.8145555257797241, 0.8230088353157043, 0.8310658931732178, 0.8425571322441101, 0.8401796221733093, 0.8454629778862, 0.8565579056739807, 0.8560295701026917, 0.8582749962806702, 0.8664641380310059, 0.8660678863525391, 0.8730682730674744, 0.8794082403182983, 0.8812574148178101, 0.8865407705307007, 0.883238673210144, 0.8857482671737671, 0.8901069760322571, 0.8938053250312805, 0.8971073627471924, 0.8965790271759033, 0.8976356983184814, 0.904768168926239, 0.9019944667816162], "val_loss": [0.9158623218536377, 0.6478017568588257, 0.5625659738268171, 0.5191407884870257, 0.4891678946358817, 0.4581560066768101, 0.4278297850063869, 0.40921436888831003, 0.3971060684749058, 0.3789744717734201, 0.3670783979552133, 0.36943444183894564, 0.35219199316842215, 0.3399102176938738, 0.33653695242745535, 0.3286834784916469, 0.32567094905035837, 0.31623411178588867, 0.31741052865982056, 0.312156081199646, 0.30489557129996164, 0.2991571511541094, 0.2948126367160252, 0.3003909843308585, 0.30691341842923847, 0.293275032724653, 0.28841082538877216, 0.2934680070195879, 0.2860105889184134, 0.30190119573048185, 0.29995611735752653, 0.29285756179264616], "val_accuracy": [0.6466666460037231, 0.7226666808128357, 0.7453333139419556, 0.7573333382606506, 0.7746666669845581, 0.7870000004768372, 0.8013333082199097, 0.8206666707992554, 0.8203333616256714, 0.8379999995231628, 0.843666672706604, 0.8393333554267883, 0.847000002861023, 0.8519999980926514, 0.8516666889190674, 0.8566666841506958, 0.8533333539962769, 0.8600000143051147, 0.8556666374206543, 0.862666666507721, 0.862666666507721, 0.8663333058357239, 0.8706666827201843, 0.8690000176429749, 0.8640000224113464, 0.871999979019165, 0.8769999742507935, 0.8743333220481873, 0.8766666650772095, 0.8743333220481873, 0.8666666746139526, 0.874666690826416]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 1, 6, 9, 2, 0, 0, 2, 0, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 0, 0, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 13, 17, 60, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [2, 4, 0], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.8391428589820862, "mapping_values": [1, 17, 17, 11, 6, 4, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))))), tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.square(alpha))), tf.math.add(alpha, tf.math.add(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.0400388791592303, 1.075646185053023, 0.8000913184269497, 0.7084447725211876, 0.6572159974172902, 0.5990488130528897, 0.5507011315007299, 0.5325684637016294, 0.4951792544204451, 0.48257642326621397, 0.45967931438666987, 0.4422717738334198, 0.43054680512282417, 0.4198210718113402, 0.39776177134937096, 0.3871140271610257, 0.37585394381453346, 0.36150329361943173, 0.35440146551471047, 0.3478084798100728, 0.3227359535018325, 0.31649430530135186, 0.3142105957315803, 0.31372284123201916, 0.29422455628109395, 0.29840539368057706, 0.2826023802088394, 0.277014764156938, 0.2756265096416594, 0.26584981648976447, 0.25563505821578525, 0.251835542283101, 0.24295867752003836, 0.2358216114126696, 0.23042213352105054, 0.23256609691699356, 0.2184874300809663, 0.20714771097299367, 0.20503148526492576, 0.20023815725512903, 0.19154878374395307, 0.192451995357688, 0.18935415809456194, 0.18275950028518126, 0.17467974390273144, 0.16625558442530017, 0.16377167629055642, 0.16213781857503137, 0.15692811123825037, 0.15869978423942713], "accuracy": [0.31462156772613525, 0.6199973821640015, 0.7009642124176025, 0.7347774505615234, 0.7500990629196167, 0.7746664881706238, 0.7911768555641174, 0.8009510040283203, 0.8129705190658569, 0.8227446675300598, 0.8329150676727295, 0.8384625315666199, 0.8401796221733093, 0.8450667262077332, 0.8549728989601135, 0.8558974862098694, 0.8599920868873596, 0.8669924736022949, 0.8681812286376953, 0.8720116019248962, 0.8784837126731873, 0.8829745054244995, 0.8853520154953003, 0.8848236799240112, 0.8858803510665894, 0.8902390599250793, 0.895918607711792, 0.8969752788543701, 0.8977677822113037, 0.9009377956390381, 0.8981640338897705, 0.9029190540313721, 0.9079381823539734, 0.91124027967453, 0.9117686152458191, 0.91124027967453, 0.9165235757827759, 0.9202219247817993, 0.9211464524269104, 0.9233918786048889, 0.9247127175331116, 0.9255052208900452, 0.9253731369972229, 0.930260181427002, 0.9326376914978027, 0.935279369354248, 0.9369964599609375, 0.9377889037132263, 0.9371285438537598, 0.936732292175293], "val_loss": [0.9218329020908901, 0.6541446106774467, 0.5615794318062919, 0.514958211353847, 0.48585850851876394, 0.45632292543138775, 0.4252245766775949, 0.4027610421180725, 0.39553011315209524, 0.37602382046835764, 0.36278098821640015, 0.36725243500300814, 0.35075606618608746, 0.33832722902297974, 0.3395887953894479, 0.327207122530256, 0.32488966839654104, 0.31578115054539274, 0.31841312987463816, 0.3117558445249285, 0.3081203188214983, 0.2990807294845581, 0.30232993194035124, 0.30633143867765156, 0.3049996410097395, 0.2916892170906067, 0.2985864792551313, 0.30209427220480783, 0.2861347368785313, 0.2933170795440674, 0.3054442490850176, 0.288082344191415, 0.2988634875842503, 0.28969100543430876, 0.2936959181513105, 0.2983957018171038, 0.2879466244152614, 0.28902080229350496, 0.2888462543487549, 0.29781991243362427, 0.29791917971202303, 0.3026854395866394, 0.29351229327065603, 0.3005587032863072, 0.29171247141701834, 0.30023730652672903, 0.31176375491278513, 0.29898531096322195, 0.3094474417822702, 0.3102934615952628], "val_accuracy": [0.6456666588783264, 0.7210000157356262, 0.7436666488647461, 0.7606666684150696, 0.778333306312561, 0.7870000004768372, 0.8033333420753479, 0.8233333230018616, 0.8209999799728394, 0.8403333425521851, 0.8479999899864197, 0.8356666564941406, 0.843999981880188, 0.8516666889190674, 0.8529999852180481, 0.8566666841506958, 0.8550000190734863, 0.8616666793823242, 0.859666645526886, 0.8643333315849304, 0.8636666536331177, 0.8709999918937683, 0.8633333444595337, 0.8656666874885559, 0.8659999966621399, 0.878333330154419, 0.8683333396911621, 0.8723333477973938, 0.8763333559036255, 0.8790000081062317, 0.8690000176429749, 0.875333309173584, 0.878000020980835, 0.8803333044052124, 0.8763333559036255, 0.8830000162124634, 0.8776666522026062, 0.8830000162124634, 0.8836666941642761, 0.8856666684150696, 0.8843333125114441, 0.8856666684150696, 0.8856666684150696, 0.878333330154419, 0.8896666765213013, 0.8856666684150696, 0.8809999823570251, 0.887666642665863, 0.887666642665863, 0.8889999985694885]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1], [1, 1, 0, 2, 6, 0, 0, 0, 0, 5, 2, 8, 4, 1], [0, 2, 2, 1, 0, 2, 2, 1, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 13, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [13, 84, 6], [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1], [1, 6, 7, 1, 8, 5, 0, 9], [4, 4, 4], [25, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.7471428513526917, "mapping_values": [1, 10, 10, 5, 5, 2, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.subtract(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), alpha)), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.300485961771975, 2.2915167840023742, 2.271191279870203, 2.242753478498538, 2.203519790652185, 2.144760499682645, 2.0506073702690135, 1.9080604274338104, 1.7148247323157748, 1.5471751363821284, 1.4629654299864885, 1.4135510363299786, 1.3277629142298186, 1.211497166342251, 1.0925275008628996, 0.9850697262317686, 0.9549804926076034, 0.9320249872956499, 0.9285333274362141, 0.900658544744908, 0.8548829500323447, 0.8478831753691725, 0.8440099237790559, 0.8503120644941873, 0.8462689913589846, 0.8318672494456248, 0.8033640193051163, 0.7951471485466202, 0.7905096372419959, 0.7714806023117668, 0.753051692185196, 0.7559057900682338, 0.7449552203292278, 0.7427125450500707, 0.7294981422488558, 0.7159746520633569, 0.706986477661284, 0.702473275319161, 0.698446833556748, 0.6920257559415923, 0.6894959138447756, 0.6741588466029834, 0.6729945766218838, 0.6776077266319506, 0.6663398387850614, 0.654568644546798, 0.6425708229704588, 0.6403116817015226, 0.6454414734672231, 0.6353544407453928, 0.6248073100319408, 0.6111268050099692, 0.6085813176898026, 0.6010871479429699, 0.5955280479879711, 0.5871430626319872, 0.5824333015072064, 0.5802773096227312, 0.5806375373671037, 0.5607594455222191, 0.5554992283151103, 0.5538881130426977, 0.552506129101771, 0.5510084965304298, 0.5438197922429483, 0.5524664693709457], "accuracy": [0.09087307006120682, 0.1158367469906807, 0.17738740146160126, 0.2456742823123932, 0.30801743268966675, 0.35583147406578064, 0.37947431206703186, 0.4138158857822418, 0.42808082699775696, 0.45885616540908813, 0.4917448163032532, 0.5090476870536804, 0.5476158857345581, 0.5848633050918579, 0.6207898855209351, 0.6391493678092957, 0.633469820022583, 0.650640606880188, 0.663848876953125, 0.6711134314537048, 0.6811517477035522, 0.6820763349533081, 0.6812838315963745, 0.6799629926681519, 0.6847180128097534, 0.6942279934883118, 0.7043983340263367, 0.6976621150970459, 0.7045304179191589, 0.7049266695976257, 0.7065116763114929, 0.7067758440971375, 0.715889573097229, 0.7185312509536743, 0.7206445932388306, 0.7290979027748108, 0.7268524765968323, 0.7283053994178772, 0.7285695672035217, 0.7359662055969238, 0.7368907928466797, 0.7453441023826599, 0.748778223991394, 0.7461365461349487, 0.752212405204773, 0.7601373791694641, 0.7585523724555969, 0.7631752490997314, 0.7660810947418213, 0.7627789974212646, 0.7716285586357117, 0.7708360552787781, 0.7663452625274658, 0.7689869403839111, 0.7737419009208679, 0.7825914621353149, 0.78113853931427, 0.7849689722061157, 0.7837802171707153, 0.7926297783851624, 0.7924976944923401, 0.7951393723487854, 0.7977809906005859, 0.7956677079200745, 0.7935543656349182, 0.7940827012062073], "val_loss": [1.9654811450413294, 1.9506410190037318, 1.9273456164768763, 1.8952985491071428, 1.8502131189618791, 1.7796012333461217, 1.662259885243007, 1.4747240202767509, 1.236766713006156, 1.023519652230399, 0.8879151344299316, 0.8383630173546928, 0.7723312377929688, 0.7702522959027972, 0.7036873272487095, 0.6897624731063843, 0.6995008332388741, 0.6994108131953648, 0.6850603648594448, 0.6488406658172607, 0.6199698277882167, 0.6137703657150269, 0.6078772374561855, 0.6030551706041608, 0.6004639523369926, 0.5786574057170323, 0.567468387739999, 0.5634036234446934, 0.5519960437502179, 0.5524088144302368, 0.5541404145104545, 0.5474060944148472, 0.5424602712903704, 0.5411652156284877, 0.5349831410816738, 0.5259345769882202, 0.5197042567389352, 0.5160371916634696, 0.512640220778329, 0.5094723531178066, 0.5075140169688633, 0.505691647529602, 0.50194137437003, 0.4973562955856323, 0.4940133605684553, 0.4902281420571463, 0.48572094099862234, 0.48096273626599995, 0.47587118829999653, 0.4710266249520438, 0.46858179569244385, 0.46713830743517193, 0.46268599373953684, 0.45567495482308523, 0.45014144693102154, 0.44672862121037077, 0.44303975786481586, 0.43782797881535124, 0.431940564087459, 0.42754203932625906, 0.42522335052490234, 0.42409963267190115, 0.4225054553576878, 0.4191484366144453, 0.4153859615325928, 0.4119880199432373], "val_accuracy": [0.07233333587646484, 0.2133333384990692, 0.3440000116825104, 0.3889999985694885, 0.4129999876022339, 0.45100000500679016, 0.47699999809265137, 0.5163333415985107, 0.5766666531562805, 0.6309999823570251, 0.6673333048820496, 0.6420000195503235, 0.6899999976158142, 0.6890000104904175, 0.70333331823349, 0.7083333134651184, 0.7013333439826965, 0.7146666646003723, 0.7129999995231628, 0.7229999899864197, 0.7326666712760925, 0.7183333039283752, 0.7206666469573975, 0.7260000109672546, 0.7229999899864197, 0.7429999709129333, 0.7480000257492065, 0.746666669845581, 0.7566666603088379, 0.7490000128746033, 0.7416666746139526, 0.7476666569709778, 0.7606666684150696, 0.7616666555404663, 0.7683333158493042, 0.7699999809265137, 0.7689999938011169, 0.7666666507720947, 0.7720000147819519, 0.7699999809265137, 0.7720000147819519, 0.7706666588783264, 0.7720000147819519, 0.7766666412353516, 0.7789999842643738, 0.781000018119812, 0.7876666784286499, 0.7886666655540466, 0.7903333306312561, 0.7906666398048401, 0.7906666398048401, 0.7940000295639038, 0.79666668176651, 0.7993333339691162, 0.8013333082199097, 0.8016666769981384, 0.8006666898727417, 0.8056666851043701, 0.8086666464805603, 0.8119999766349792, 0.8140000104904175, 0.8140000104904175, 0.8133333325386047, 0.8100000023841858, 0.8103333115577698, 0.8133333325386047]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [3, 1, 6, 9, 2, 0, 0, 2, 0, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5, 9, 6, 5, 4, 4, 6, 5, 2, 7, 8, 4, 8, 4], [2, 2, 2, 1, 0, 2, 2, 1, 1, 2, 2, 0, 2, 2, 2, 2, 2, 1, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 13, 57, 60, 59, 23, 22, 72, 1], [1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1], [1, 4, 7, 1, 8, 5, 0, 9], [2, 2, 0], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.691428542137146, "mapping_values": [1, 18, 18, 12, 6, 2, 3, 3, 1, 2, 1, 3, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, grad)))), tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.square(alpha))), tf.math.add(alpha, tf.math.add(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(grad))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.031758931208721, 1.1928949467557344, 0.8713561371490389, 0.7749714969864391, 0.7006043106841059, 0.6383813197712589, 0.5958041995114276, 0.5696131019560164, 0.5484407088264042, 0.5281143492207535, 0.5305825691527978, 0.5043349769436342, 0.496794632452354, 0.48929489696140793, 0.47111926976605617, 0.46444493445974094, 0.47338496615637593, 0.46126288625117323], "accuracy": [0.3019416332244873, 0.5968828201293945, 0.6732267737388611, 0.7045304179191589, 0.7364945411682129, 0.7577598690986633, 0.7750627398490906, 0.7840443849563599, 0.7915731072425842, 0.8000264167785645, 0.7973847389221191, 0.8119139075279236, 0.8168009519577026, 0.8175934553146362, 0.8206313848495483, 0.8269713521003723, 0.8212917447090149, 0.8278959393501282], "val_loss": [0.8966349193028041, 0.6659009456634521, 0.5938273668289185, 0.5109493902751377, 0.5050487007413592, 0.4689081055777414, 0.4387891207422529, 0.42094220433916363, 0.40050641127995085, 0.4139694997242519, 0.39174321719578337, 0.38618972471782137, 0.3730646627289908, 0.37800753116607666, 0.39109387568065096, 0.3973040836197989, 0.3995458653994969, 0.4279795799936567], "val_accuracy": [0.6456666588783264, 0.7053333520889282, 0.7366666793823242, 0.7663333415985107, 0.7683333158493042, 0.7866666913032532, 0.7979999780654907, 0.812666654586792, 0.8240000009536743, 0.8190000057220459, 0.8299999833106995, 0.82833331823349, 0.843666672706604, 0.8343333601951599, 0.8413333296775818, 0.8410000205039978, 0.8396666646003723, 0.8346666693687439]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [9, 2, 5, 3, 2, 1, 0, 0, 0, 2, 6, 8, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 2, 0, 1, 0, 0, 0, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [69, 82, 13, 57, 60, 59, 23, 22, 72, 1], [1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [2, 4, 0], [64, 55], [0, 1, 0, 1, 1], [3, 7, 5, 2, 9, 3, 9], [1, 0, 2], [6, 32, 85]], "fitness": -0.6094285845756531, "mapping_values": [1, 1, 1, 1, 0, 1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.add(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [1.9641179995781803, 1.1305245085556777, 0.8850336081914583, 0.7687668465132003, 0.7113882748757245, 0.6739433912978338, 0.6592195781466669, 0.6498931728223721, 0.6231989126872425, 0.6167562979323564, 0.6360295280694112, 0.6093126843949004, 0.6016270263068129, 0.586098209765483, 0.5716300270954505, 0.5798586582258912, 0.5972195804126983, 0.5772948853485557, 0.584267720735588], "accuracy": [0.2921674847602844, 0.6067890524864197, 0.6816800832748413, 0.7121912837028503, 0.7380794882774353, 0.7567031979560852, 0.7508915662765503, 0.7592127919197083, 0.76542067527771, 0.7717606425285339, 0.7519482374191284, 0.7721568942070007, 0.7781006693840027, 0.7681944370269775, 0.7825914621353149, 0.7913089394569397, 0.7759873270988464, 0.7938185334205627, 0.7795535326004028], "val_loss": [0.8624859877995082, 0.6805544240134103, 0.6024325915745327, 0.5657909597669329, 0.536624584879194, 0.4779956340789795, 0.4863300153187343, 0.47219869068690706, 0.45152166911533903, 0.44360876083374023, 0.4635775089263916, 0.4617359808513096, 0.4312363692692348, 0.41570680482046946, 0.42534815413611277, 0.44107535907200407, 0.4140991483415876, 0.4295374836240496, 0.46436023712158203], "val_accuracy": [0.656000018119812, 0.7170000076293945, 0.7480000257492065, 0.7526666522026062, 0.7670000195503235, 0.7863333225250244, 0.7910000085830688, 0.7776666879653931, 0.7956666946411133, 0.8059999942779541, 0.7923333048820496, 0.7876666784286499, 0.8109999895095825, 0.8299999833106995, 0.8276666402816772, 0.8173333406448364, 0.8220000267028809, 0.8236666917800903, 0.8133333325386047]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1], [3, 1, 8, 8, 2, 0, 0, 2, 6, 5, 2, 0, 4, 1, 5, 5, 7, 6, 4, 8, 1, 5, 1, 1, 5, 8, 3, 4, 4, 4, 6, 6, 9, 2, 6, 4, 4, 9, 1, 5, 1, 7, 5, 9, 6, 7, 2, 7, 4, 0, 4, 6, 3, 2, 8, 0, 0], [2, 0, 0, 1, 0, 0, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 2, 3, 2, 2, 2, 3, 2, 0, 3], [27, 82, 13, 57, 60, 83, 2, 38, 72, 1, 56], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [22, 84, 6], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [2, 4, 0], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.30399999022483826, "mapping_values": [1, 9, 9, 5, 4, 2, 5, 5, 3, 2, 2, 7, 6, 3, 3, 1, 2, 1, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.add(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), alpha)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, beta), tf.math.add(sigma, grad))), tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.517749562192319, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.20116232335567474, 0.11913882195949554, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [54.62544686453683, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.29733332991600037, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 1, 6, 9, 1, 0, 6, 4, 0, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5, 3, 5, 7, 9, 4, 5, 9], [2, 0, 0, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [72, 82, 13, 17, 60, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [2, 4, 0], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.19285714626312256, "mapping_values": [1, 48, 48, 32, 16, 8, 5, 5, 3, 2, 2, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))))), tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, alpha))))))), tf.math.add(alpha, tf.math.pow(tf.math.subtract(tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.square(grad)))))))), tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.subtract(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.sqrt(grad)))), grad), tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(grad))), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.pow(grad, grad)))))))))))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.4102051636924235, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1912561058998108, 0.14357416331768036, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.524965558733259, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 1, 6, 9, 2, 0, 0, 2, 0, 0, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 0, 0, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 14, 79, 17, 60, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [2, 4, 0], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 5, 4, 3, 6, 6, 4, 2, 2, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), alpha)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07449477910995483, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 2, 4, 3, 4, 0, 2, 0, 6, 2, 6, 8, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 2, 2, 1, 0, 2, 2, 1, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 13, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 1, 1, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [2, 4, 0], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.302802084648315, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 2, 1, 3, 2, 2, 0, 0, 0, 2, 6, 8, 2, 0, 5, 5, 0, 9, 2, 9, 1, 8, 1, 6, 5, 8, 6, 3, 9, 1, 5, 0], [2, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 13, 57, 60, 59, 23, 22, 72, 1], [1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [4, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [2, 4, 0], [37, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 27, 27, 18, 9, 1, 3, 3, 1, 2, 1, 12, 9, 8, 1, 1, 2, 1, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(grad, grad)), tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))))))))))), tf.math.sqrt(grad))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, beta), sigma)), tf.math.add(sigma, tf.math.add(sigma, sigma)))), tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1], [0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [3, 2, 6, 3, 2, 0, 0, 0, 0, 2, 6, 8, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [1, 3, 0, 0, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 36, 13, 57, 60, 59, 23, 22, 72, 1], [0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [91, 84, 6], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1], [1, 4, 7, 2, 5, 2, 0, 9, 9], [4, 4, 0], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 3, 4, 2, 5, 5, 3, 2, 2, 13, 10, 8, 2, 1, 2, 1, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, grad), tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.square(sigma)), sigma)), tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))), tf.math.add(sigma, grad))))), sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.1402389843073682e+26, 96.12207300183385, 24478.978894331576, 6283768.22804121, 1600492671.095496, 404940162623.2308, 106269977750465.11], "accuracy": [0.08757099509239197, 0.09668471664190292, 0.09787346422672272, 0.09985470771789551, 0.09945846349000931, 0.10276053100824356, 0.09668471664190292], "val_loss": [NaN, 929.99755859375, 238029.95535714287, 60824864.0, 15542718464.0, 3971677384118.857, 1014892680633197.8], "val_accuracy": [0.09833333641290665, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [0, 4, 6, 3, 2, 5, 6, 6, 2, 5, 2, 8, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [0, 2, 0, 0, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 13, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [61, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 1, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [2, 4, 0], [57, 55], [0, 1, 0, 1, 1], [2, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 5, 5, 3, 2, 2, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(beta, tf.math.add(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 2, 4, 3, 5, 0, 2, 2, 0, 2, 6, 8, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [1, 2, 0, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [80, 37, 13, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [2, 4, 0], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 16, 9, 7, 2, 1, 1, 0, 1, 1, 9, 6, 4, 2, 0, 2, 1, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha))), tf.math.negative(tf.math.add(tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))))))))), lambda shape,  alpha, beta, grad: tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, beta))), tf.math.add(sigma, tf.math.add(sigma, sigma)))), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.302802084648315, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 9, 6, 3, 2, 2, 0, 0, 3, 2, 6, 3, 4, 1, 5, 5, 0, 6, 2, 3, 1, 8, 1, 6, 5, 8, 6, 3, 9, 1, 5, 0], [2, 2, 0, 1, 0, 0, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 13, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 0, 1, 1, 0, 1, 1, 0], [8, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 6, 7, 6, 8, 5, 0, 9], [2, 4, 0], [3, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 47, 47, 29, 18, 7, 4, 4, 3, 1, 2, 7, 5, 3, 2, 0, 2, 1, 1, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), grad)), tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))), tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.pow(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.square(alpha))))))), tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(tf.math.add(grad, grad), tf.math.multiply(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))))))))), tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.subtract(grad, tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)))))))))))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, beta), sigma)), tf.math.add(sigma, grad))), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1], [0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 1, 2, 6, 2, 9, 0, 2, 0, 5, 2, 0, 4, 1, 5, 5, 1, 6, 8, 8, 1, 8, 1, 6, 5], [2, 2, 0, 1, 1, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 24, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [4, 7, 9, 0, 1, 9], [1, 3, 3, 3, 0], [13, 84, 6], [0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [2, 3, 4], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 3, 3, 1, 2, 0, 3, 2, 1, 1, 0, 2, 1, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(grad, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 2, 6, 3, 2, 9, 0, 5, 0, 2, 6, 8, 4, 2, 5, 5, 0, 6, 2, 8, 1, 8, 1, 1, 5, 8, 6, 3, 9, 1, 5, 0], [2, 2, 0, 1, 1, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 13, 37, 60, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [3, 4, 7, 2, 8, 5, 0, 9], [2, 3, 4], [25, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 9, 5, 2, 1, 1, 0, 1, 1, 3, 2, 1, 1, 0, 2, 1, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(grad, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))), tf.math.negative(tf.math.square(tf.math.add(alpha, alpha))))), tf.math.negative(tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.302802084648315, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 1, 9, 9, 2, 0, 0, 8, 0, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [1, 2, 0, 1, 1, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 13, 57, 60, 59, 23, 22, 72, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [13, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [2, 3, 4], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [0, 0, 2], [6, 32, 85]], "fitness": -0.09828571230173111, "mapping_values": [1, 5, 5, 4, 1, 2, 6, 6, 4, 2, 2, 1, 0, 0, 0, 0, 2, 1, 1, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3656501697590167, 3.052195490658354, 4.916360040870498, 8.061224218435795, 12.347909756812752, 17.9465220044113], "accuracy": [0.08875974267721176, 0.09377889335155487, 0.09866596013307571, 0.09589222073554993, 0.10117553919553757, 0.09985470771789551], "val_loss": [2.0900934764317105, 2.7702065195356096, 4.2821036747523715, 6.584317479814802, 9.648905072893415, 13.518445696149554], "val_accuracy": [0.10066666454076767, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 2, 4, 3, 2, 0, 2, 1, 0, 2, 6, 8, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [1, 2, 0, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 37, 13, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 1, 1, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [2, 4, 0], [3, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [0, 0, 2], [6, 32, 85]], "fitness": -0.09828571230173111, "mapping_values": [1, 12, 12, 6, 6, 2, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha))), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3656501697590167, 3.052195490658354, 4.916360040870498, 8.061224218435795, 12.347909756812752, 17.9465220044113], "accuracy": [0.08875974267721176, 0.09377889335155487, 0.09866596013307571, 0.09589222073554993, 0.10117553919553757, 0.09985470771789551], "val_loss": [2.0900934764317105, 2.7702065195356096, 4.2821036747523715, 6.584317479814802, 9.648905072893415, 13.518445696149554], "val_accuracy": [0.10066666454076767, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1], [4, 2, 6, 3, 2, 2, 0, 6, 0, 2, 6, 2, 4, 1, 2, 3, 6, 6, 1, 8, 1, 8, 1, 6, 5, 8, 6, 3, 9, 1, 5, 0, 3, 5, 6, 9, 4, 0, 7], [2, 2, 0, 1, 0, 0, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 13, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [2, 3, 3, 3, 0], [38, 84, 6], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1], [3, 4, 7, 2, 8, 5, 0, 9], [2, 4, 0], [3, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.035999998450279236, "mapping_values": [1, 65, 65, 39, 26, 10, 3, 3, 1, 2, 0, 5, 4, 2, 2, 0, 2, 1, 1, 0], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(grad, grad), tf.math.add(alpha, tf.math.negative(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))))))), tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(tf.math.sqrt(alpha), grad), tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))))), tf.math.sqrt(tf.math.subtract(grad, tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.square(tf.math.add(alpha, grad))))))), tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), grad)))))))), tf.math.add(alpha, tf.math.subtract(tf.math.square(grad), grad))), tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad))))))), grad), tf.math.pow(tf.math.add(alpha, tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.add(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, beta), tf.math.add(sigma, grad))), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3020067463744947, 2.302828556636951, 2.3022433820575094, 2.3026485879895806, 2.303002253499533, 2.3033057945499866], "accuracy": [0.08796724677085876, 0.08955223858356476, 0.09245806187391281, 0.0886276587843895, 0.09140139818191528, 0.09008057415485382], "val_loss": [1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056], "val_accuracy": [0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856]}}]