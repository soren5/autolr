[{"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 1, 6, 9, 8, 0, 0, 2, 0, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 0, 0, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 13, 17, 60, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 1, 1, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [2, 4, 0], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.8511428833007812, "mapping_values": [1, 8, 8, 5, 3, 3, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))))), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.032069130297177, 1.0734391909044936, 0.7934744281775726, 0.7006038910897653, 0.6458326630257911, 0.5973231742379216, 0.5681659676348135, 0.5364394899703224, 0.5078676556158438, 0.4759095758337465, 0.45505070954014076, 0.4338459578235592, 0.427182628379884, 0.4048189068191701, 0.404532642585569, 0.37606442073049356, 0.37573289966082546, 0.3605843742313229, 0.3520079953889994, 0.34116308151959207, 0.32908268462807005, 0.3169290272078856, 0.31815527222254464, 0.3091049524794921, 0.2990024272343108, 0.2946930908452975, 0.28576581244061827, 0.2760296320367278, 0.27878242336669223, 0.2695267394808982, 0.2563492161659847, 0.2538143882480957, 0.24612476197153177, 0.2360724182908939, 0.2370871628307789, 0.21755121753019285, 0.21997224490018397, 0.21402820342126508, 0.2132998314264066, 0.21033054804757853, 0.2006513040831155], "accuracy": [0.3151499032974243, 0.6247523427009583, 0.7042662501335144, 0.739400327205658, 0.76106196641922, 0.7736098170280457, 0.7878747582435608, 0.8061022162437439, 0.8127063512802124, 0.8251221776008606, 0.833179235458374, 0.8413683772087097, 0.8459912538528442, 0.852331280708313, 0.8565579056739807, 0.8623695969581604, 0.8617091774940491, 0.8688416481018066, 0.8673887252807617, 0.8746532797813416, 0.8802007436752319, 0.8776912093162537, 0.8811253309249878, 0.8835028409957886, 0.889578640460968, 0.8874653577804565, 0.8924844861030579, 0.89988112449646, 0.8923524022102356, 0.8953903317451477, 0.9030511379241943, 0.9075419306755066, 0.9071456789970398, 0.9108440279960632, 0.9100515246391296, 0.9199577569961548, 0.9161273241043091, 0.9169198274612427, 0.9158631563186646, 0.919561505317688, 0.9228635430335999], "val_loss": [0.8959132262638637, 0.6286940063749041, 0.5646325349807739, 0.5135202578135899, 0.47389558383396696, 0.466079694884164, 0.43656902653830393, 0.42342174904687063, 0.3995529753821237, 0.3751278689929417, 0.368464503969465, 0.3570501889501299, 0.34097009897232056, 0.34640562534332275, 0.3362233638763428, 0.3244350978306362, 0.31760174036026, 0.3248076779501779, 0.3155402881758554, 0.3198292425700596, 0.31208386591502596, 0.30297055414744783, 0.30180067675454275, 0.3015680568558829, 0.2998140369142805, 0.30903656993593487, 0.3057750974382673, 0.3147634523255484, 0.2975540501730783, 0.29478790930339266, 0.2892325690814427, 0.29688204186303274, 0.2930707505771092, 0.2899326852389744, 0.2874244451522827, 0.2906345639910017, 0.2909014991351536, 0.2994191476276943, 0.29689892700740267, 0.29098096915653776, 0.30250372205461773], "val_accuracy": [0.6626666784286499, 0.7229999899864197, 0.7453333139419556, 0.7633333206176758, 0.781000018119812, 0.7919999957084656, 0.8003333210945129, 0.8140000104904175, 0.8233333230018616, 0.8386666774749756, 0.8393333554267883, 0.8426666855812073, 0.856333315372467, 0.8450000286102295, 0.8526666760444641, 0.856333315372467, 0.8603333234786987, 0.8610000014305115, 0.8653333187103271, 0.8616666793823242, 0.8603333234786987, 0.8650000095367432, 0.8659999966621399, 0.8683333396911621, 0.8686666488647461, 0.8656666874885559, 0.8686666488647461, 0.862333357334137, 0.8730000257492065, 0.8736666440963745, 0.8773333430290222, 0.878333330154419, 0.8759999871253967, 0.8793333172798157, 0.878000020980835, 0.8809999823570251, 0.8809999823570251, 0.8709999918937683, 0.8793333172798157, 0.878333330154419, 0.8809999823570251]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [2, 1, 1, 9, 8, 0, 0, 2, 0, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 0, 0, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 13, 17, 60, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [2, 4, 0], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.845714271068573, "mapping_values": [1, 9, 9, 6, 3, 3, 3, 3, 1, 2, 1, 12, 10, 8, 2, 1, 2, 1, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, beta), tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.sqrt(sigma)), sigma)))), tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.032069289893711, 1.0734412574166587, 0.7934308396732298, 0.7007531722176737, 0.6469285125273283, 0.5981591840493224, 0.568816925800393, 0.5386212594426303, 0.5107499897172973, 0.47500668727269874, 0.4558665245405325, 0.43577698350204624, 0.4292868529769329, 0.4057744173223568, 0.4033201608628235, 0.37782602837025575, 0.37485655118382727, 0.3619751358044823, 0.3556508588485431, 0.34443245809847545, 0.33374133675389084, 0.3246724725265576, 0.3205962998480325, 0.30807581044789617, 0.30098883068604065, 0.2945921879599769, 0.28910155013929884, 0.2772115954570546, 0.28133949959802435, 0.2735411588266431, 0.2592625794803084, 0.2607200526014972, 0.24528280635866365, 0.24006174628359214, 0.2305666082952599, 0.2123224854433872, 0.21950717548479445, 0.2168327260522826, 0.21533253555127171, 0.2158159243688135, 0.20759396774224664], "accuracy": [0.3151499032974243, 0.6248844265937805, 0.7045304179191589, 0.7391361594200134, 0.7611940503120422, 0.7744023203849792, 0.7887993454933167, 0.807158887386322, 0.8138951063156128, 0.8260467648506165, 0.8308017253875732, 0.8429533839225769, 0.8444063067436218, 0.8514066934585571, 0.8535200357437134, 0.8610487580299377, 0.8626337051391602, 0.8713511824607849, 0.8673887252807617, 0.8730682730674744, 0.8755778670310974, 0.873860776424408, 0.878879964351654, 0.882710337638855, 0.8899748921394348, 0.8901069760322571, 0.8908994793891907, 0.8976356983184814, 0.8919561505317688, 0.8943336606025696, 0.9038436412811279, 0.9051644206047058, 0.9041078090667725, 0.91124027967453, 0.9166556596755981, 0.9203540086746216, 0.9141460657119751, 0.915070652961731, 0.915070652961731, 0.920089840888977, 0.9192973375320435], "val_loss": [0.8959156785692487, 0.6284677812031337, 0.564636196408953, 0.5138729810714722, 0.47466262749263216, 0.46711879117148264, 0.43684111322675434, 0.42453111921037945, 0.40227494069508146, 0.3781313385282244, 0.3701105202947344, 0.3571885313306536, 0.34412579025541035, 0.3439142107963562, 0.33367644037519184, 0.32203733921051025, 0.31894815819604055, 0.3284239002636501, 0.31003507546016146, 0.3134629470961435, 0.3090182287352426, 0.3076813817024231, 0.3006650720323835, 0.3002431648118155, 0.2977460537637983, 0.30224221093314035, 0.31187652690070017, 0.3101996864591326, 0.2985697644097464, 0.29128133399145945, 0.28888469082968576, 0.2956709691456386, 0.29474141768046785, 0.2892800399235317, 0.2860156808580671, 0.2921647088868277, 0.2908942699432373, 0.3075879556792123, 0.30144418137414114, 0.29162844589778353, 0.30426505633762907], "val_accuracy": [0.6626666784286499, 0.7239999771118164, 0.7456666827201843, 0.7636666893959045, 0.778333306312561, 0.7913333177566528, 0.8003333210945129, 0.812333345413208, 0.8213333487510681, 0.8356666564941406, 0.8366666436195374, 0.8479999899864197, 0.8556666374206543, 0.8500000238418579, 0.8546666502952576, 0.8550000190734863, 0.8610000014305115, 0.8543333411216736, 0.8666666746139526, 0.8666666746139526, 0.8606666922569275, 0.8619999885559082, 0.8673333525657654, 0.8656666874885559, 0.8703333139419556, 0.8676666617393494, 0.8646666407585144, 0.859000027179718, 0.8723333477973938, 0.8759999871253967, 0.8769999742507935, 0.8786666393280029, 0.8759999871253967, 0.8803333044052124, 0.8786666393280029, 0.8826666474342346, 0.8803333044052124, 0.8706666827201843, 0.8759999871253967, 0.875333309173584, 0.8809999823570251]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 1, 6, 9, 8, 0, 0, 2, 0, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 0, 0, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [79, 82, 13, 31, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 0, 1, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [2, 3, 4], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.8448571562767029, "mapping_values": [1, 8, 8, 5, 3, 3, 3, 3, 1, 2, 1, 9, 6, 4, 2, 0, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))))), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, beta), tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.add(sigma, sigma)), tf.math.add(sigma, sigma))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.031246115408396, 1.0802983470470708, 0.8015320927648654, 0.705034470128314, 0.6542118246119808, 0.6017499087572004, 0.57525777481393, 0.5430237769828639, 0.5079387828674236, 0.4778320584291197, 0.4550467345259839, 0.4349933893429274, 0.4316189146635476, 0.4007656459936833, 0.3978981115932651, 0.3814299587702093, 0.37850130037734886, 0.366860878068411, 0.35505664648554347, 0.34379639232383824, 0.32867609457868263, 0.3235318272058061, 0.3178948780186912, 0.31053133628718244, 0.29915762113747013, 0.2926970716748397, 0.28312731837048555, 0.27803474498572933, 0.28016943146114603], "accuracy": [0.3147536516189575, 0.6254127621650696, 0.7034738063812256, 0.7364945411682129, 0.7580240368843079, 0.7734777331352234, 0.7825914621353149, 0.805177628993988, 0.8129705190658569, 0.8253863453865051, 0.8330471515655518, 0.8413683772087097, 0.8422929644584656, 0.8562937378883362, 0.8570862412452698, 0.8599920868873596, 0.8634262084960938, 0.8663320541381836, 0.8664641380310059, 0.8710870146751404, 0.8761062026023865, 0.8775591254234314, 0.8816536664962769, 0.8811253309249878, 0.8877294659614563, 0.8922203183174133, 0.8918240666389465, 0.8971073627471924, 0.8922203183174133], "val_loss": [0.8882842063903809, 0.6299976621355329, 0.5700029305049351, 0.515619056565421, 0.48003275053841726, 0.47174928869519916, 0.4358171394893101, 0.42596739530563354, 0.4038389580590384, 0.3777321066175188, 0.37140380484717234, 0.36159262486866545, 0.34264581544058664, 0.3383304902485439, 0.33548725502831594, 0.32412272691726685, 0.32414201327732634, 0.33053758314677645, 0.31446973766599384, 0.3120852879115513, 0.3139631577900478, 0.3029218316078186, 0.30765193700790405, 0.3041350671223232, 0.3027812583105905, 0.3085084216935294, 0.31066809381757465, 0.30931220735822407, 0.3033664567129953], "val_accuracy": [0.6626666784286499, 0.7246666550636292, 0.7440000176429749, 0.7643333077430725, 0.7756666541099548, 0.7863333225250244, 0.7953333258628845, 0.8166666626930237, 0.8209999799728394, 0.8386666774749756, 0.8333333134651184, 0.8453333377838135, 0.8529999852180481, 0.8486666679382324, 0.8533333539962769, 0.8566666841506958, 0.8576666712760925, 0.8506666421890259, 0.8619999885559082, 0.862333357334137, 0.859000027179718, 0.8659999966621399, 0.8619999885559082, 0.8690000176429749, 0.8673333525657654, 0.8676666617393494, 0.8679999709129333, 0.8666666746139526, 0.8676666617393494]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 1, 6, 9, 2, 0, 0, 2, 0, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 0, 0, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 13, 17, 60, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [2, 4, 0], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.8431428670883179, "mapping_values": [1, 9, 9, 5, 4, 3, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.0320690133237505, 1.0734185212638794, 0.7933889230827157, 0.6998466599367046, 0.6469800100193016, 0.5978616121076338, 0.568285077420586, 0.5373994581782193, 0.5099632118545299, 0.4755722985700956, 0.45595554896255036, 0.43442849724551924, 0.42917723150505854, 0.4057375662015996, 0.40603337246492127, 0.37987472357656726, 0.37310467413419335, 0.3606725453724242, 0.3527752128275331, 0.34301854008539334, 0.32882466902035007, 0.3234975586249576, 0.3174190425468143, 0.30733339930364817], "accuracy": [0.3151499032974243, 0.6252806782722473, 0.7045304179191589, 0.7395324110984802, 0.7613261342048645, 0.7734777331352234, 0.7887993454933167, 0.8038568496704102, 0.8129705190658569, 0.8272355198860168, 0.8315942287445068, 0.8416325449943542, 0.8433496356010437, 0.8502179384231567, 0.8541803956031799, 0.8613129258155823, 0.8650112152099609, 0.8704266548156738, 0.8661999702453613, 0.8746532797813416, 0.8794082403182983, 0.8774270415306091, 0.8815215826034546, 0.8821820020675659], "val_loss": [0.8959158148084369, 0.6281885930470058, 0.5643015078135899, 0.5143360921314785, 0.47464631284986225, 0.4660554953983852, 0.4374995061329433, 0.4267950654029846, 0.401043917451586, 0.3777955855642046, 0.369226336479187, 0.3569508535521371, 0.34309520040239605, 0.34503700903483797, 0.33392250537872314, 0.3232473390442984, 0.3161211609840393, 0.3238802637372698, 0.3132103255816868, 0.30960727589471, 0.31251262766974314, 0.30964845418930054, 0.303912137235914, 0.2998482159205845], "val_accuracy": [0.6626666784286499, 0.7229999899864197, 0.7463333606719971, 0.7630000114440918, 0.7799999713897705, 0.7913333177566528, 0.8013333082199097, 0.812666654586792, 0.8223333358764648, 0.8360000252723694, 0.8346666693687439, 0.8483333587646484, 0.8510000109672546, 0.8446666598320007, 0.8529999852180481, 0.8560000061988831, 0.8600000143051147, 0.8543333411216736, 0.8690000176429749, 0.8629999756813049, 0.859666645526886, 0.8629999756813049, 0.8646666407585144, 0.8679999709129333]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1], [1, 1, 0, 2, 6, 0, 0, 0, 0, 5, 2, 8, 4, 1], [0, 2, 2, 1, 0, 2, 2, 1, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 13, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [13, 84, 6], [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1], [1, 6, 7, 1, 8, 5, 0, 9], [4, 4, 4], [25, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.7402856945991516, "mapping_values": [1, 1, 1, 0, 1, 1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3007790249068867, 2.2912950608645604, 2.2707447882231437, 2.2429365439106994, 2.202950775253302, 2.143370737662295, 2.0484638582084, 1.8982105670021259, 1.717273606190891, 1.53273709101243, 1.4288476115724178, 1.4154270922487375, 1.345347993755857, 1.2164840102589378, 1.0867629494759636, 0.9738039929931978, 0.9560675108043856, 0.9367611836196724, 0.9250584042083319, 0.897688592610783, 0.8704589903945101, 0.8647348019566912, 0.8491628059479917, 0.8479799973163245, 0.8407738829537658, 0.8213889977526057, 0.820756728426183, 0.7918252773398909, 0.778777421607223, 0.7662716118682567, 0.7531328142248266, 0.7486391661898052, 0.7495598287205135, 0.7292717645795291, 0.7208454105375686, 0.7190833820516974, 0.7186249349457697, 0.7179756543781496, 0.7010410239179735, 0.6971059773009546, 0.6876650672263757, 0.6880833929036319, 0.680301451561804, 0.6678920317918019, 0.6651845145077517, 0.6702098307230406, 0.6517281471352457, 0.6425378193251917, 0.6425421472474994, 0.6340745868164519, 0.6199537951712281, 0.6254978137340024, 0.6122573297635644, 0.6098635328790657, 0.6019893450476254, 0.6009203019458321, 0.5893990965866378, 0.58483758947837, 0.5840628779858741, 0.5669675725263108, 0.5722688157891301, 0.568592794488497, 0.5619374395377286, 0.5543915283379223, 0.5490916268920949, 0.5560255451697431, 0.5356079938153171, 0.5391170626397713, 0.5374900031524359, 0.5337238653287786, 0.52273492291304, 0.516245398192657, 0.5192979045114844, 0.5094406438100576, 0.5207984344031218], "accuracy": [0.09509972482919693, 0.11795007437467575, 0.17355699837207794, 0.24263638257980347, 0.3074890971183777, 0.3543785512447357, 0.387399286031723, 0.4135517179965973, 0.4391758143901825, 0.4682340621948242, 0.5012547969818115, 0.5159159898757935, 0.540219247341156, 0.5856558084487915, 0.6190727949142456, 0.6462818384170532, 0.6351869106292725, 0.6427156329154968, 0.6699247360229492, 0.674679696559906, 0.6822084188461304, 0.6836613416671753, 0.6790384650230408, 0.6798309087753296, 0.6857746839523315, 0.689869225025177, 0.698190450668335, 0.7061154246330261, 0.7038700580596924, 0.7046625018119812, 0.7123233675956726, 0.713379979133606, 0.7170783281326294, 0.7256637215614319, 0.7234182953834534, 0.7288337349891663, 0.7253995537757874, 0.7316074371337891, 0.737022876739502, 0.7401928305625916, 0.7400607466697693, 0.7440232634544373, 0.7429665923118591, 0.7471932172775269, 0.7460044622421265, 0.7440232634544373, 0.7508915662765503, 0.7524765729904175, 0.7532690763473511, 0.7537974119186401, 0.7621186375617981, 0.7648923397064209, 0.7677981853485107, 0.7656848430633545, 0.7712323069572449, 0.7745344042778015, 0.7778365015983582, 0.7815347909927368, 0.7804781198501587, 0.7861577272415161, 0.7869502305984497, 0.7824593782424927, 0.7881389260292053, 0.7968564033508301, 0.793950617313385, 0.7954035401344299, 0.7989697456359863, 0.7994980812072754, 0.7980451583862305, 0.7975168228149414, 0.8026680946350098, 0.8024039268493652, 0.8064984679222107, 0.8080834746360779, 0.8083476424217224], "val_loss": [1.9654889787946428, 1.9505421093532018, 1.927055835723877, 1.89488342830113, 1.8494180951799666, 1.777503558567592, 1.6588851043156214, 1.4698098387037004, 1.2314490250178747, 1.0186330590929304, 0.8801083224160331, 0.8371894189289638, 0.7761346272059849, 0.7684476205280849, 0.7063172715050834, 0.6914420809064593, 0.7052786350250244, 0.7014655896595546, 0.6822336060660226, 0.6458716562816075, 0.6260967424937657, 0.6167057752609253, 0.6127315929957798, 0.6097843647003174, 0.5958841187613351, 0.5758578096117292, 0.5656682082584926, 0.5676846504211426, 0.5635042360850743, 0.5555490595953805, 0.5565141609736851, 0.5564233064651489, 0.5488846302032471, 0.5421567644391742, 0.5395126853670392, 0.5343502759933472, 0.5276121071406773, 0.5215459040233067, 0.5164255925587246, 0.511512279510498, 0.5064379317419869, 0.4996269260134016, 0.494977525302342, 0.4962151731763567, 0.49768119198935373, 0.4935739551271711, 0.4830998011997768, 0.4745440993990217, 0.4713904687336513, 0.46997698715754915, 0.4663009302956717, 0.46295503207615446, 0.4633171388081142, 0.4645284925188337, 0.4607484681265695, 0.4518119437353952, 0.4457803113119943, 0.44204809835978914, 0.43620985746383667, 0.4320046731403896, 0.4320150188037327, 0.4304298758506775, 0.4249229686600821, 0.42289137840270996, 0.4224936195782253, 0.41792718853269306, 0.41371781485421316, 0.4140419363975525, 0.4121576632772173, 0.4057281868798392, 0.40194722584315706, 0.4036902870450701, 0.4047758834702628, 0.4023553303309849, 0.4000712207385472], "val_accuracy": [0.07133333384990692, 0.2133333384990692, 0.34700000286102295, 0.3916666805744171, 0.4143333435058594, 0.44600000977516174, 0.47866666316986084, 0.5136666893959045, 0.5709999799728394, 0.625333309173584, 0.6639999747276306, 0.6449999809265137, 0.6853333115577698, 0.6959999799728394, 0.6996666789054871, 0.6990000009536743, 0.6880000233650208, 0.7226666808128357, 0.7183333039283752, 0.7260000109672546, 0.7239999771118164, 0.7260000109672546, 0.7246666550636292, 0.7273333072662354, 0.7303333282470703, 0.7436666488647461, 0.7523333430290222, 0.746999979019165, 0.7480000257492065, 0.7536666393280029, 0.7556666731834412, 0.7549999952316284, 0.7576666474342346, 0.7593333125114441, 0.7596666812896729, 0.7609999775886536, 0.7613333463668823, 0.7710000276565552, 0.7733333110809326, 0.7726666927337646, 0.7760000228881836, 0.7766666412353516, 0.7766666412353516, 0.7789999842643738, 0.7746666669845581, 0.7753333449363708, 0.7806666493415833, 0.7886666655540466, 0.7910000085830688, 0.7916666865348816, 0.7940000295639038, 0.7940000295639038, 0.7896666526794434, 0.7896666526794434, 0.7916666865348816, 0.7960000038146973, 0.8006666898727417, 0.8006666898727417, 0.8023333549499512, 0.8023333549499512, 0.8043333292007446, 0.8063333630561829, 0.8056666851043701, 0.8063333630561829, 0.809333324432373, 0.8116666674613953, 0.8140000104904175, 0.8166666626930237, 0.8173333406448364, 0.8213333487510681, 0.8159999847412109, 0.8119999766349792, 0.812666654586792, 0.8173333406448364, 0.8209999799728394]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 2, 6, 9, 2, 8, 0, 2, 0, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 0, 0, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [88, 73, 13, 31, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [20, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [2, 4, 0], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.2985714375972748, "mapping_values": [1, 10, 10, 6, 4, 3, 5, 5, 3, 2, 2, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(grad, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))))), alpha)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.8225733103643176, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.17170783877372742, 0.11596883088350296, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [176666.7544642857, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.164000004529953, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 1, 6, 9, 2, 0, 0, 2, 0, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 0, 0, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 13, 31, 60, 59, 23, 22, 72, 1], [1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [3, 3, 3, 3, 0], [52, 84, 6], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [2, 3, 4], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10457143187522888, "mapping_values": [1, 10, 10, 6, 4, 3, 3, 3, 1, 2, 0, 7, 6, 3, 3, 0, 2, 1, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(grad, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))))), alpha)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, beta), tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, sigma), tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.30136999755157, 2.299375703132951, 2.299976739145273, 2.3015456402763133, 2.3023195511723835, 2.3025773363878006, 2.302833215829136], "accuracy": [0.09311848133802414, 0.10051512718200684, 0.10474177449941635, 0.0936468094587326, 0.10487385839223862, 0.10672302544116974, 0.10038304328918457], "val_loss": [1.968951633998326, 1.9697252682277135, 1.9718665395464217, 1.9730454172406877, 1.9735779081072127, 1.973747730255127, 1.9738811084202357], "val_accuracy": [0.08399999886751175, 0.13966666162014008, 0.10266666859388351, 0.10533333569765091, 0.10066666454076767, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [5, 2, 4, 3, 4, 0, 2, 0, 6, 2, 6, 8, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5, 5, 7, 6, 2, 2, 6, 9, 4, 3, 9, 8, 1, 7, 5], [2, 0, 0, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 13, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [2, 4, 0], [64, 55], [1, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 63, 63, 39, 24, 10, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))))), tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha))))), tf.math.add(alpha, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.sqrt(alpha), tf.math.add(alpha, grad)), tf.math.subtract(grad, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))))))))))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(grad, tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(grad, grad), tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)))))), tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))), grad))))))), tf.math.subtract(tf.math.add(tf.math.add(alpha, grad), tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [32.8462603663126, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0330207385122776, 0.10302469879388809, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [18859.65792410714, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 1, 6, 9, 2, 0, 0, 2, 0, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 2, 0, 2, 0, 0, 0, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [69, 69, 13, 57, 60, 59, 23, 22, 72, 1], [0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [2, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [2, 3, 4], [64, 55], [0, 1, 0, 1, 1], [2, 7, 5, 2, 9, 3, 9], [1, 0, 0], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 6, 4, 2, 3, 3, 1, 2, 1, 7, 6, 3, 3, 0, 5, 2, 3, 2], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32))))), grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, beta), tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, sigma), tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.add(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3024116526379355, 2.3022506101933518, 2.3025759882253665, 2.303979033476578, 2.3105399308502554, 2.3450203997788726], "accuracy": [0.10381719470024109, 0.10434553027153015, 0.10196803510189056, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9736455508640833, 1.9737358774457658, 1.9742016111101424, 1.9766380446297782, 1.9895950044904436, 2.0648386819022044], "val_accuracy": [0.10133333504199982, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 1, 6, 9, 2, 0, 0, 2, 0, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 0, 0, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 13, 17, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [2, 4, 0], [64, 55], [0, 1, 0, 1, 1], [2, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 6, 4, 3, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(beta, tf.math.add(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [88378.63061833712, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.03275657072663307, 0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [9.935115894840174e+16, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 1, 6, 9, 2, 0, 0, 2, 0, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 0, 2, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 13, 31, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [2, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [2, 3, 4], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 23, 23, 15, 8, 4, 3, 3, 1, 2, 1, 7, 6, 3, 3, 0, 2, 1, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(grad, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))))), grad))), tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.square(tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.math.add(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, beta), tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, sigma), tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.303131007058604, 2.30331952473302, 2.3035605406291952, 2.303949931861072, 2.306135237004385, 2.3127410982767067], "accuracy": [0.09285431355237961, 0.09774138033390045, 0.09972262382507324, 0.10289261490106583, 0.09959053993225098, 0.09708096832036972], "val_loss": [1.9739016805376326, 1.9743547439575195, 1.975094999585833, 1.9763879094805037, 1.9794636453901018, 1.9864768981933594], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [3, 1, 6, 5, 2, 0, 0, 2, 0, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5, 9, 6, 5, 4, 4, 6, 5, 2, 7, 8, 4, 8, 4], [2, 2, 2, 1, 0, 1, 2, 1, 1, 2, 2, 0, 2, 2, 2, 2, 2, 1, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 13, 57, 60, 59, 23, 22, 72, 1], [1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1], [1, 4, 7, 1, 8, 5, 0, 9], [2, 2, 0], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 32, 32, 20, 12, 2, 5, 5, 3, 2, 2, 3, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, grad))))), tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.square(tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.math.add(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(alpha))))))))))))), tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.sqrt(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3028166060434465, 2.302667950595044, 2.302668879706358, 2.3026435407019563, 2.302660871411768, 2.3026463276894966], "accuracy": [0.09338264167308807, 0.09826971590518951, 0.09496764093637466, 0.09615638852119446, 0.0944393053650856, 0.09919429570436478], "val_loss": [1.973649297441755, 1.9736522265842982, 1.973672662462507, 1.9736554963248116, 1.9736394201006209, 1.9736460958208357], "val_accuracy": [0.10133333504199982, 0.09933333098888397, 0.09833333641290665, 0.09833333641290665, 0.10066666454076767, 0.1003333330154419]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1], [6, 1, 0, 8, 2, 0, 0, 2, 6, 5, 2, 0, 4, 1, 5, 5, 7, 6, 4, 8, 1, 5, 1, 1, 5, 8, 3, 4, 4, 4, 6, 6, 9, 2, 6, 4, 4, 9, 1, 5, 1, 7, 5, 9, 6, 7, 2, 7, 4, 0, 4, 6, 3, 2, 8, 0, 0], [2, 0, 0, 1, 0, 0, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 2, 3, 2, 2, 2, 3, 2, 0, 3], [27, 82, 13, 57, 60, 83, 2, 38, 72, 1, 56], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [22, 84, 6], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1], [5, 6, 7, 2, 8, 5, 0, 9], [2, 4, 0], [64, 55], [0, 0, 0, 1, 1], [9, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 2, 3, 3, 1, 2, 1, 2, 2, 1, 1, 0, 1, 1, 0, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.subtract(tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3019853508341757, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 1, 8, 8, 2, 0, 0, 2, 6, 5, 2, 0, 4, 1, 5, 5, 7, 6, 4, 8, 1, 5, 1, 1, 5, 8, 3, 4, 4, 4, 6, 6, 9, 2, 6, 4, 4, 9, 1, 5, 1, 7, 5, 9, 6, 7, 2, 7, 4, 0, 4, 6, 3, 2, 8, 0, 0], [2, 0, 0, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 13, 31, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [79, 84, 6], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], [1, 0, 1, 1, 0, 1, 1, 1, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [2, 4, 0], [60, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 6, 4, 2, 5, 5, 3, 2, 2, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))))))), alpha)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.210167068217364e+27, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.12415797263383865, 0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 1, 6, 9, 3, 0, 0, 2, 0, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 0, 0, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 13, 17, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [60, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [2, 3, 4], [64, 55], [0, 1, 0, 1, 1], [2, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(beta, tf.math.add(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07832518965005875, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1], [1, 1, 7, 2, 6, 0, 0, 0, 0, 5, 2, 8, 4, 1, 6, 8, 0], [0, 2, 2, 1, 0, 2, 2, 1, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [69, 82, 13, 57, 60, 59, 23, 22, 72, 1], [1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [2, 4, 0], [64, 55], [0, 1, 0, 1, 1], [3, 7, 5, 2, 9, 3, 9], [1, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 27, 27, 17, 10, 2, 5, 5, 3, 2, 2, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)))))))), grad), tf.math.negative(tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(alpha))))))), tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.add(alpha, alpha)))))), tf.math.sqrt(tf.math.add(alpha, tf.math.negative(grad))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.add(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09470347315073013, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1], [7, 4, 6, 3, 2, 5, 6, 6, 2, 5, 2, 8, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [0, 2, 2, 1, 0, 2, 2, 1, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 13, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 0, 9, 0, 1, 9], [5, 3, 3, 3, 0], [61, 84, 6], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 1, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [2, 4, 0], [57, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.09857142716646194, "mapping_values": [1, 19, 19, 10, 9, 2, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.pow(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, alpha)))), tf.math.square(tf.math.add(alpha, alpha)))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.301459902486372, 2.3000523848792485, 2.300628075305544, 2.301958297048782, 2.302448033467732, 2.3026487918939917, 2.3029585661212324], "accuracy": [0.09298639744520187, 0.09708096832036972, 0.09959053993225098, 0.09126931428909302, 0.10685510188341141, 0.10540219396352768, 0.09998679161071777], "val_loss": [1.969404833657401, 1.9703843934195382, 1.9723553657531738, 1.9732133320399694, 1.9736154420035226, 1.9738240923200334, 1.9740372385297502], "val_accuracy": [0.07966666668653488, 0.12600000202655792, 0.08933333307504654, 0.10533333569765091, 0.10133333504199982, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 1, 6, 9, 8, 0, 0, 2, 0, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [0, 2, 2, 1, 0, 0, 0, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [44, 82, 13, 17, 60, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 4, 3, 3, 0], [38, 84, 6], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [2, 4, 0], [64, 55], [0, 1, 0, 1, 1], [3, 7, 5, 2, 9, 3, 9], [1, 0, 2], [6, 32, 85]], "fitness": -0.0454285703599453, "mapping_values": [1, 8, 8, 5, 3, 2, 3, 3, 1, 2, 1, 5, 4, 2, 2, 0, 5, 2, 3, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, grad)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, beta), sigma)), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.add(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [2.3023183362799835, 2.3027684744307235, 2.301994859959707, 2.3033473987337496, 2.303488229385787, 2.302108808956315, 2.3013557150788735, 2.3009674843543904, 2.3027891450790507, 2.300704862904224, 2.3018472341419827, 2.301884646775338, 2.302095582881671, 2.301516223624555, 2.3015603640642874, 2.3024393615312015, 2.3026163267846815, 2.3010249638900686, 2.301458288350708, 2.3021254672696796, 2.3021013880638854, 2.3026638674682487], "accuracy": [0.09087307006120682, 0.08611807972192764, 0.09008057415485382, 0.08440100401639938, 0.08889182657003403, 0.0886276587843895, 0.08875974267721176, 0.09338264167308807, 0.09047681838274002, 0.09126931428909302, 0.09325055778026581, 0.09628847241401672, 0.09245806187391281, 0.09060890227556229, 0.09496764093637466, 0.08770307898521423, 0.0936468094587326, 0.09325055778026581, 0.09311848133802414, 0.09021265059709549, 0.09245806187391281, 0.08968432247638702], "val_loss": [1.9710264887128557, 1.9710047585623605, 1.970977783203125, 1.9709183829171317, 1.9708632741655623, 1.9708448818751745, 1.970804078238351, 1.9707753998892648, 1.9707410676138741, 1.9707249232700892, 1.9707290104457311, 1.9707134110586983, 1.97071259362357, 1.9707224709647042, 1.9707320077078683, 1.9707280567714147, 1.9707302365984236, 1.9707730157034737, 1.970794745853969, 1.9708177702767509, 1.9708514213562012, 1.9708630698067802], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03799999877810478, 0.04100000113248825, 0.0416666679084301, 0.0416666679084301, 0.04233333468437195, 0.04333333298563957, 0.044333335012197495, 0.04466666653752327, 0.045666664838790894, 0.045666664838790894, 0.045666664838790894, 0.04800000041723251, 0.04933333396911621, 0.049666665494441986, 0.05000000074505806, 0.04933333396911621, 0.04866666719317436, 0.049666665494441986, 0.049666665494441986, 0.05000000074505806]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 1, 4, 9, 2, 0, 0, 2, 0, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 2, 2, 2, 0, 2, 2, 1, 1, 2, 2, 0, 2, 2, 2, 2, 2, 1, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 13, 31, 60, 59, 23, 22, 72, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [2, 3, 4], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [3, 0, 2], [6, 32, 85]], "fitness": -0.035999998450279236, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 3, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.3023044861161304, 2.302767904632048, 2.3020304509945015, 2.3034861255646257, 2.303691234508006, 2.3023032565804016], "accuracy": [0.09074098616838455, 0.0866464152932167, 0.08955223858356476, 0.08506141602993011, 0.08915598690509796, 0.08968432247638702], "val_loss": [1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056], "val_accuracy": [0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0], [0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 1, 6, 9, 3, 0, 0, 2, 0, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 0, 0, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 13, 31, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [6, 7, 9, 0, 1, 9], [2, 0, 3, 3, 0], [41, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [2, 3, 4], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.035999998450279236, "mapping_values": [1, 23, 23, 15, 8, 5, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))))), tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.square(tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.math.add(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))))))))))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3023044861161304, 2.302767904632048, 2.3020304509945015, 2.3034861255646257, 2.303691234508006, 2.3023032565804016], "accuracy": [0.09074098616838455, 0.0866464152932167, 0.08955223858356476, 0.08506141602993011, 0.08915598690509796, 0.08968432247638702], "val_loss": [1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056], "val_accuracy": [0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856]}}]