[{"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 9, 6, 8, 8, 0, 0, 3, 0, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 0, 0, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [14, 82, 13, 17, 60, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1], [6, 3, 7, 1, 8, 5, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.8485714197158813, "mapping_values": [1, 3, 3, 1, 2, 1, 5, 5, 3, 2, 2, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.065522591782095, 1.1147868759549289, 0.8004803914892171, 0.7096621492015782, 0.6548623496656956, 0.6295902307527004, 0.5956039013974088, 0.5734909553774092, 0.557033251383994, 0.5375087273717635, 0.5226019476194108, 0.4923535881655296, 0.4861385221407949, 0.4796138550816053, 0.4746777949205967, 0.45087949712168446, 0.43588275579791486, 0.4292558256023517, 0.4146992486615333, 0.40898915946585956, 0.40164878098814477, 0.3866467299029623, 0.3849730899250188, 0.3702101037762405, 0.3670943970961137, 0.36067468637268163, 0.3574457893108947, 0.3515029911706161, 0.3464781204038025, 0.33422613827276226, 0.3290607508981957, 0.31998096865244735, 0.3149312504837463, 0.31499458642967026, 0.31246400254986084], "accuracy": [0.29665830731391907, 0.5988640785217285, 0.7079645991325378, 0.7320036888122559, 0.7526086568832397, 0.7647602558135986, 0.778232753276825, 0.7891955971717834, 0.7913089394569397, 0.8013472557067871, 0.8099326491355896, 0.8202351331710815, 0.822348415851593, 0.8248580098152161, 0.8267071843147278, 0.8319904804229736, 0.8437458872795105, 0.8421608805656433, 0.8475762605667114, 0.8548408150672913, 0.8531237840652466, 0.859199583530426, 0.8582749962806702, 0.8636903762817383, 0.8631620407104492, 0.8669924736022949, 0.8676528930664062, 0.8714832663536072, 0.8737286925315857, 0.8800686597824097, 0.8798044919967651, 0.8795403242111206, 0.8835028409957886, 0.885219931602478, 0.880729079246521], "val_loss": [0.976757253919329, 0.661652854510716, 0.573129483631679, 0.5185695205415998, 0.5173228808811733, 0.4759244067328317, 0.45426084314073834, 0.4604641710008894, 0.4296858140400478, 0.4161734666143145, 0.40904052768434795, 0.39195798124585834, 0.40137670721326557, 0.38587422030312674, 0.3738177418708801, 0.36090692452022005, 0.3609310303415571, 0.35124631438936504, 0.3443819795336042, 0.35136394841330393, 0.3368285724094936, 0.3385960374559675, 0.32650546516690937, 0.3254865322794233, 0.3252485564776829, 0.32502756799970356, 0.32530183451516287, 0.3266853519848415, 0.3181538496698652, 0.3067630784852164, 0.31071509633745464, 0.3068686808858599, 0.30799572808401926, 0.30188425949641634, 0.29861168350492207], "val_accuracy": [0.6389999985694885, 0.7149999737739563, 0.7350000143051147, 0.7713333368301392, 0.7630000114440918, 0.7786666750907898, 0.7963333129882812, 0.7850000262260437, 0.8086666464805603, 0.8090000152587891, 0.8199999928474426, 0.8209999799728394, 0.815666675567627, 0.8253333568572998, 0.8386666774749756, 0.8423333168029785, 0.8433333039283752, 0.8443333506584167, 0.8463333249092102, 0.8446666598320007, 0.8539999723434448, 0.8500000238418579, 0.8560000061988831, 0.8573333621025085, 0.8539999723434448, 0.8556666374206543, 0.8510000109672546, 0.8546666502952576, 0.8616666793823242, 0.8686666488647461, 0.859666645526886, 0.8663333058357239, 0.8666666746139526, 0.8653333187103271, 0.8683333396911621]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [4, 5, 2, 5, 8, 0, 0, 2, 8, 5, 9, 2, 4, 1, 5, 5, 7, 6, 9, 8, 1, 8, 1, 6, 5], [2, 0, 0, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [14, 82, 13, 17, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 0], [3, 4, 9, 0, 1, 9], [3, 0, 3, 3, 0], [38, 84, 6], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1], [6, 3, 7, 1, 8, 5, 2, 1], [5, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.7068571448326111, "mapping_values": [1, 10, 10, 7, 3, 2, 5, 5, 3, 2, 2, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.square(tf.math.add(tf.math.square(tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))))))), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.037922060673877, 1.1756417398927643, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.3131686747074127, 0.5946374535560608, 0.25795799493789673, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [0.9230618817465646, 0.6659245661326817, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.6466666460037231, 0.715666651725769, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 3, 6, 8, 8, 0, 0, 4, 0, 1, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [0, 0, 2, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [88, 82, 13, 17, 60, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 0, 0, 1, 0, 1, 1, 0], [3, 3, 1, 0, 1, 9], [0, 3, 3, 3, 0], [59, 89, 6], [0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [6, 3, 7, 1, 8, 5, 2, 1], [4, 7, 0, 6], [64, 55], [1, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.19599999487400055, "mapping_values": [1, 9, 9, 5, 4, 2, 10, 10, 6, 4, 2, 7, 4, 3, 1, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))), grad), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.subtract(grad, grad)))), tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, grad))), sigma)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [3.954013582076442, 2.309677644601635, 2.3026401272003976, 2.3061650391693176, 2.3034256960123507, 2.3031001602732637, 2.303260581021957, 2.3030867074947032], "accuracy": [0.18557654321193695, 0.1010434553027153, 0.10593052208423615, 0.11372341960668564, 0.10011887550354004, 0.09589222073554993, 0.08902391046285629, 0.09272222965955734], "val_loss": [1.9838883536202567, 1.9756129128592355, 1.9685262952532088, 1.9740801538739885, 1.9737027032034737, 1.9737934385027205, 1.9736957550048828, 1.973619052342006], "val_accuracy": [0.09933333098888397, 0.09866666793823242, 0.13433332741260529, 0.10000000149011612, 0.10000000149011612, 0.09933333098888397, 0.10000000149011612, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 3, 6, 8, 8, 0, 0, 4, 0, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [1, 0, 2, 1, 2, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [14, 53, 13, 17, 60, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 3, 2, 0, 1, 9], [3, 3, 3, 3, 0], [38, 84, 6], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1], [6, 3, 7, 1, 8, 5, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10199999809265137, "mapping_values": [1, 15, 15, 10, 5, 1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.square(grad))), alpha)))), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.multiply(grad, tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.301896373877011, 2.299822843526695, 2.300381702281512, 2.301854248359266, 2.3023361046206223, 2.302538088110885, 2.302871407487562], "accuracy": [0.09430722147226334, 0.10276053100824356, 0.10434553027153015, 0.0944393053650856, 0.09576013684272766, 0.10170386731624603, 0.09998679161071777], "val_loss": [1.969156333378383, 1.9706104823521204, 1.9723825454711914, 1.9732469149998255, 1.9735001155308314, 1.9737779753548759, 1.973982606615339], "val_accuracy": [0.08666666597127914, 0.1223333328962326, 0.11033333092927933, 0.07966666668653488, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [8, 3, 6, 8, 8, 0, 0, 4, 0, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [0, 0, 2, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [14, 82, 13, 17, 60, 59, 23, 22, 72, 1], [1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0], [0, 1, 0, 0, 0, 1, 0, 1, 1, 0], [3, 3, 1, 0, 1, 9], [0, 5, 3, 3, 0], [38, 84, 6], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [6, 3, 7, 1, 8, 5, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 10, 10, 6, 4, 2, 11, 7, 6, 1, 0, 2, 1, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.negative(grad), tf.math.add(beta, tf.math.subtract(grad, grad)))), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)), tf.math.add(sigma, tf.math.subtract(sigma, sigma)))), tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.square(sigma)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [544.310970259034, 2.6571971154799563e+29, 4.204915094558259, 8.546340423662587, 14.407778336718067, 20.968645817347646], "accuracy": [0.04675736278295517, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [24749131483.42857, 2.647231101989746, 5.500538417271206, 10.14188711983817, 15.593194144112724, 21.428961072649276], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 3, 6, 8, 8, 0, 0, 4, 0, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [0, 0, 2, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [88, 82, 13, 17, 60, 59, 23, 22, 72, 1], [1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 0, 0, 1, 0, 1, 1, 0], [2, 3, 9, 0, 1, 9], [0, 0, 3, 3, 0], [38, 84, 6], [1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [6, 3, 7, 1, 8, 5, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 15, 10, 5, 3, 6, 6, 4, 2, 3, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, grad)), tf.math.negative(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.square(alpha))), tf.math.add(alpha, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.302874514014572, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 9, 6, 8, 8, 0, 0, 3, 0, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 0, 0, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [14, 82, 13, 17, 60, 59, 23, 22, 72, 1], [1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [7, 3, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1], [5, 7, 7, 1, 8, 5, 2, 1], [0, 7, 0, 6], [60, 55], [0, 0, 0, 1, 1, 0, 0, 1], [7, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 1, 8, 5, 3, 2], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.add(tf.math.square(beta), tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [31414.382251256207, 2.3203740858083797, 2.37841296627411, 2.6463849815033083, 3.5086016387294516, 4.799636948456649], "accuracy": [0.0944393053650856, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.981325966971261, 2.0053486142839705, 2.116124698093959, 2.6017627716064453, 3.638011796133859, 4.776381083897182], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 3, 6, 8, 8, 0, 3, 4, 0, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [1, 0, 0, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [88, 82, 13, 17, 60, 59, 23, 22, 72, 1], [1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [1, 1, 0, 0, 1, 1, 0, 1, 1, 0], [6, 3, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 38, 6], [1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1], [6, 3, 7, 1, 8, 5, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 40, 40, 25, 15, 5, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.multiply(tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha))))), tf.math.negative(tf.math.add(alpha, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.sqrt(alpha), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.subtract(grad, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(grad))))))))))))), lambda shape,  alpha, beta, grad: tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.302874514014572, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 3, 6, 8, 8, 0, 5, 4, 0, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [1, 0, 0, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 46, 13, 17, 60, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 0], [3, 0, 2, 0, 1, 9], [3, 0, 3, 3, 0], [38, 84, 6], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [6, 3, 3, 2, 8, 3, 2, 1], [5, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 15, 10, 5, 3, 6, 6, 3, 3, 1, 16, 10, 8, 2, 0, 2, 1, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.square(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))))), alpha)))), tf.math.add(alpha, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(grad, tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.sqrt(sigma)), sigma)))), sigma)), tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, grad), sigma)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.05573900416493416, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 3, 4, 8, 2, 0, 0, 1, 0, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 0, 0, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [14, 82, 13, 17, 60, 59, 23, 22, 72, 1], [1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1], [3, 3, 1, 6, 1, 9], [0, 0, 3, 3, 0], [38, 84, 61, 11], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [6, 3, 2, 1, 8, 3, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 12, 7, 3, 11, 11, 6, 5, 4, 14, 8, 7, 1, 0, 2, 1, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.multiply(tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))))), tf.math.negative(tf.math.subtract(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.square(tf.math.add(alpha, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))))), tf.math.add(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(grad, grad))))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)), tf.math.add(sigma, tf.math.subtract(sigma, sigma)))), tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, tf.math.add(sigma, sigma)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.303352169939524, 2.3025851429508597, 21061109460.2407, 4037087257315.022, 39079831785901.02, 156561031156210.28, 418862405174007.56, 877139997027159.1], "accuracy": [0.09509972482919693, 0.09998679161071777, 0.09774138033390045, 0.09998679161071777, 0.09932637959718704, 0.09998679161071777, 0.09840179979801178, 0.10091137140989304], "val_loss": [1.973644392830985, 1.973644392830985, 265291581732.57144, 9601302621622.857, 54817816838144.0, 172676173791232.0, 403201712680374.9, 786763517788160.0], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 3, 6, 8, 8, 0, 0, 2, 0, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [1, 0, 0, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 13, 17, 60, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0], [1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [3, 0, 3, 3, 0], [38, 84, 6], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [0, 3, 6, 1, 2, 3, 2, 1], [4, 7, 0, 6], [64, 55], [1, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [0, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 23, 23, 15, 8, 4, 1, 1, 0, 1, 0, 8, 5, 4, 1, 0, 1, 0, 1, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.negative(tf.math.add(alpha, tf.math.negative(alpha)))))), tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, alpha)))), tf.math.negative(tf.math.add(alpha, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))))), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, grad), sigma)), tf.math.add(sigma, tf.math.subtract(sigma, sigma)))))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.30277164176691, 2.3025856782983496, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 9, 6, 8, 8, 0, 0, 3, 0, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 2, 0, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [14, 82, 13, 17, 60, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [1, 1, 1, 0, 0, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1], [6, 3, 7, 1, 8, 5, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.302874514014572, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 2, 6, 8, 8, 0, 0, 4, 0, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [1, 0, 0, 1, 2, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [14, 98, 13, 17, 60, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 0], [3, 2, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1], [6, 3, 7, 1, 8, 5, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 23, 23, 15, 8, 3, 5, 5, 3, 2, 2, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.negative(tf.math.add(alpha, tf.math.negative(alpha)))))), tf.math.add(alpha, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.add(alpha, alpha), tf.math.negative(tf.math.add(alpha, grad))))), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3029197111357758, 2.3026656108745858, 2.3026794868295912, 2.3026637983139495, 2.302675636830882, 2.302677898201661, 2.302655584981271], "accuracy": [0.08968432247638702, 0.09430722147226334, 0.09311848133802414, 0.09642054885625839, 0.09100515395402908, 0.09998679161071777, 0.09642054885625839], "val_loss": [1.9736499105181013, 1.9736379895891463, 1.973660945892334, 1.973656381879534, 1.9736369677952357, 1.9736347879682268, 1.9736457552228654], "val_accuracy": [0.09933333098888397, 0.10133333504199982, 0.09833333641290665, 0.10000000149011612, 0.10133333504199982, 0.10133333504199982, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 9, 6, 8, 8, 0, 0, 3, 0, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [0, 0, 0, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [14, 82, 13, 17, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 0, 3, 3, 0], [38, 38, 78], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [2, 3, 7, 1, 8, 3, 2, 1], [4, 7, 0, 6], [64, 55], [1, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [0, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 2, 5, 5, 3, 2, 3, 14, 8, 7, 1, 0, 1, 0, 1, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)), tf.math.add(sigma, tf.math.subtract(sigma, sigma)))), tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, tf.math.add(sigma, sigma)))))))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.30277164176691, 2.3025856782983496, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 3, 6, 8, 8, 0, 0, 9, 0, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [1, 1, 2, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [14, 82, 13, 17, 60, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1], [6, 3, 7, 1, 8, 5, 2, 1], [4, 7, 0, 6], [64, 55], [0, 0, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.09885714203119278, "mapping_values": [1, 11, 11, 8, 3, 1, 5, 5, 3, 2, 2, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, tf.math.negative(alpha))))), tf.math.add(alpha, grad)), tf.math.negative(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.square(beta), tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.364897958134238, 246.46880390936624, NaN, NaN, NaN, NaN], "accuracy": [0.09100515395402908, 0.09232597798109055, 0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.1091651916503906, 173812109.7142857, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.1003333330154419, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 0, 6, 1, 8, 0, 6, 4, 0, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [0, 0, 2, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 13, 17, 60, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0], [3, 3, 9, 3, 1, 9], [0, 3, 3, 3, 0], [24, 77, 6], [1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [6, 3, 7, 1, 8, 3, 2, 1], [4, 7, 0, 6], [64, 55], [1, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.09457142651081085, "mapping_values": [1, 10, 10, 6, 4, 2, 5, 5, 3, 2, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))), grad), tf.math.add(alpha, tf.math.negative(alpha))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.317555084928876, 2.443274705795139, 4.561984191434006, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06445647776126862, 0.01373662706464529, 0.01862369477748871, 0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.0247182846069336, 2.2812791551862444, 26.927610669817245, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.006666666828095913, 0.004333333112299442, 0.10000000149011612, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 9, 6, 8, 8, 0, 0, 3, 0, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [1, 0, 0, 1, 0, 1, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [14, 82, 13, 17, 60, 59, 23, 22, 72, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [3, 5, 3, 3, 0], [38, 84, 6], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1], [6, 3, 7, 1, 8, 5, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.06714285910129547, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.302440567007784, 2.3016534364612395, 2.2999134370443324, 2.3004286699228285, 2.301180026062318, 2.3020513543615313, 2.3000420443905565, 2.2996004268619537, 2.300139675838222, 2.2993226139505447, 2.3003792750474847, 2.300056348875482, 2.2996475790721895], "accuracy": [0.09126931428909302, 0.09298639744520187, 0.09919429570436478, 0.09668471664190292, 0.08836349099874496, 0.09457138925790787, 0.09932637959718704, 0.09866596013307571, 0.09985470771789551, 0.10276053100824356, 0.09470347315073013, 0.09417514503002167, 0.09655263274908066], "val_loss": [1.9704345975603377, 1.9700178418840681, 1.9698247228349959, 1.9698829650878906, 1.9700118473597936, 1.9699643680027552, 1.969902856009347, 1.969874450138637, 1.9698457717895508, 1.9699750627790178, 1.970158508845738, 1.9702949523925781, 1.9705580983843123], "val_accuracy": [0.04633333161473274, 0.055666666477918625, 0.06066666543483734, 0.06333333253860474, 0.06599999964237213, 0.06733333319425583, 0.07000000029802322, 0.07400000095367432, 0.07400000095367432, 0.07333333045244217, 0.07133333384990692, 0.06966666877269745, 0.06933332979679108]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 9, 6, 8, 8, 0, 0, 3, 0, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 0, 0, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [14, 82, 13, 17, 60, 59, 23, 22, 72, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 0], [3, 3, 7, 0, 1, 9], [1, 3, 3, 3, 0], [38, 84, 6], [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1], [6, 3, 7, 1, 8, 5, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.06599999964237213, "mapping_values": [1, 1, 1, 0, 1, 0, 8, 8, 4, 4, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.negative(grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.302781965439393, 2.3025266458140767, 2.301041227274441, 2.3017456885483822, 2.302321104876763, 2.3034278764826763, 2.3009675065870567, 2.3004436474025303, 2.3013237748935222, 2.300330208938482, 2.3010203029658767, 2.3005505303476212, 2.2991459063251716, 2.299659898173713, 2.3005943433121447, 2.30050719557437, 2.2984009974384825, 2.3010522388999393, 2.299769163289169, 2.2998543392791566, 2.2997561511330837, 2.299815613942265, 2.300376138037159, 2.299298430289008, 2.297951339935315, 2.297998222330416, 2.298067265623801, 2.2976301885662047, 2.29960593763454, 2.2978841520618563, 2.2978652482806825, 2.298281040677872, 2.2994373304465063, 2.2974887493500353, 2.2974871336398204, 2.2984233671537777, 2.298008575635957, 2.296751117095373, 2.2978480759077633, 2.297171531147441, 2.2981899234329344, 2.2982185698456186, 2.2971523200768083, 2.2972083601260684, 2.2977689478013494, 2.297054541817966, 2.297055737910222, 2.297049287035953, 2.296310730991961, 2.29781288647806, 2.295307459974207, 2.2958286572535593, 2.295213243886071, 2.2954346080891384, 2.2958882639137603, 2.2948926685193682, 2.2957378668855006, 2.297545324305911, 2.2946425122576084, 2.295249822164618, 2.296536894963166, 2.295204392986023, 2.2951483111481674, 2.2944348065639923, 2.2961763253600576, 2.294321645882309, 2.29479735899973, 2.294573589354427, 2.2942370602546385, 2.2942677259350717, 2.2941005278131223, 2.294550042032109, 2.2954175300948325, 2.2945961994722364, 2.294863722469545, 2.294707274849483, 2.2930646878916274, 2.294176722183802, 2.294673910198935, 2.2937299300808367, 2.2942382139599697, 2.2944298252185824, 2.293553843867935, 2.2943236583165048, 2.2932398537162304, 2.293985583070184, 2.2947587871186217, 2.2940502239807232, 2.2944655026017777, 2.2940873400630606, 2.2920937694027566, 2.2939129720951636, 2.293021068313512, 2.2930991103888156, 2.2923404687998112, 2.293890298459949, 2.292543324150697, 2.29111573960976, 2.2934798756925545, 2.292594749158195], "accuracy": [0.08968432247638702, 0.09272222965955734, 0.09602430462837219, 0.09100515395402908, 0.08955223858356476, 0.09430722147226334, 0.09126931428909302, 0.09285431355237961, 0.09721305221319199, 0.0948355570435524, 0.09232597798109055, 0.09126931428909302, 0.09866596013307571, 0.1006472036242485, 0.09602430462837219, 0.09100515395402908, 0.09853387624025345, 0.0956280529499054, 0.09959053993225098, 0.0948355570435524, 0.09589222073554993, 0.09351472556591034, 0.09496764093637466, 0.10196803510189056, 0.10474177449941635, 0.09615638852119446, 0.1014397069811821, 0.09813763201236725, 0.09747721254825592, 0.10289261490106583, 0.10408136248588562, 0.10368511080741882, 0.10302469879388809, 0.10711926966905594, 0.09866596013307571, 0.10751552134752274, 0.1018359512090683, 0.10077928751707077, 0.10500594228506088, 0.10553427785634995, 0.10117553919553757, 0.10447761416435242, 0.107647605240345, 0.11002509295940399, 0.1018359512090683, 0.09919429570436478, 0.109232597053051, 0.10460969805717468, 0.10289261490106583, 0.09985470771789551, 0.10685510188341141, 0.108440101146698, 0.11108175665140152, 0.1072513535618782, 0.10817593336105347, 0.10949676483869553, 0.11108175665140152, 0.10328886657953262, 0.11398758739233017, 0.11411966383457184, 0.10408136248588562, 0.10672302544116974, 0.10830801725387573, 0.11055342853069305, 0.10540219396352768, 0.11002509295940399, 0.11161009222269058, 0.10738343745470047, 0.11015717685222626, 0.11359133571386337, 0.11134592443704605, 0.1162329912185669, 0.10606260597705841, 0.11161009222269058, 0.1080438494682312, 0.11068551242351532, 0.11676132678985596, 0.11676132678985596, 0.1138555034995079, 0.11293092370033264, 0.1154404953122139, 0.11557257920503616, 0.11068551242351532, 0.11068551242351532, 0.11161009222269058, 0.11359133571386337, 0.1142517477273941, 0.11478008329868317, 0.11742173880338669, 0.11187426000833511, 0.11847840249538422, 0.11742173880338669, 0.11094967275857925, 0.1146479994058609, 0.11002509295940399, 0.10791176557540894, 0.11372341960668564, 0.11742173880338669, 0.11570466309785843, 0.11636507511138916], "val_loss": [1.97083956854684, 1.9706595284598214, 1.9705043520246233, 1.97034638268607, 1.9702132769993372, 1.9700758797781808, 1.9699303763253349, 1.9697917529514857, 1.9696521077837263, 1.9695134162902832, 1.969371727534703, 1.969252041407994, 1.9691204343523299, 1.9689837183271135, 1.9688476834978377, 1.9687398501804896, 1.9686284746442522, 1.9685040201459612, 1.9683772495814733, 1.9682600838797433, 1.9681401252746582, 1.968040943145752, 1.9679349490574427, 1.967832360948835, 1.9677230971200126, 1.9676158768790108, 1.9675025939941406, 1.9674007552010673, 1.967306273324149, 1.967212540762765, 1.9671103613717216, 1.9669994626726424, 1.9668971470424108, 1.9668094771248954, 1.9667186055864607, 1.9666250773838587, 1.9665238516671317, 1.9664313452584403, 1.9663378851754325, 1.9662490572248186, 1.9661596843174525, 1.9660710607256209, 1.9659694944109236, 1.9658798490251814, 1.9657885006495885, 1.9657007626124792, 1.9655957221984863, 1.965496403830392, 1.9654107093811035, 1.965325014931815, 1.9652399335588728, 1.9651604379926408, 1.9650652749197823, 1.9649780818394251, 1.9648854391915458, 1.9648047174726213, 1.9647201810564314, 1.964644227709089, 1.964568751198905, 1.9644977705819267, 1.9644342831202917, 1.964357512337821, 1.9642891202654158, 1.964202608380999, 1.9641329901559013, 1.9640532221112932, 1.9639720235552107, 1.963904653276716, 1.9638314928327287, 1.9637577193123954, 1.9636860574994768, 1.9636079243251257, 1.9635287012372697, 1.9634524072919572, 1.963388102395194, 1.9633150781903947, 1.9632411003112793, 1.9631686891828264, 1.9631016595023019, 1.9630249568394251, 1.9629524094717843, 1.9628848348345076, 1.9628067016601562, 1.9627302033560616, 1.962662696838379, 1.9625937598092216, 1.962531498500279, 1.9624593598502023, 1.962388379233224, 1.9623125621250697, 1.962240219116211, 1.9621766635349818, 1.9620999608721053, 1.9620308194841658, 1.9619612012590681, 1.9618926729474748, 1.9618239402770996, 1.9617557525634766, 1.9616939680916923, 1.9616264615740096], "val_accuracy": [0.03933333232998848, 0.0403333343565464, 0.0416666679084301, 0.0430000014603138, 0.04399999976158142, 0.04466666653752327, 0.04500000178813934, 0.04600000008940697, 0.047333333641290665, 0.04899999871850014, 0.04933333396911621, 0.05000000074505806, 0.05000000074505806, 0.05066666752099991, 0.05166666582226753, 0.05233333259820938, 0.0533333346247673, 0.05366666615009308, 0.05433333292603493, 0.054666668176651, 0.05533333495259285, 0.05533333495259285, 0.056333333253860474, 0.0573333315551281, 0.0573333315551281, 0.05833333358168602, 0.058666665107011795, 0.059333331882953644, 0.06066666543483734, 0.06233333423733711, 0.06233333423733711, 0.06333333253860474, 0.06366666406393051, 0.06433333456516266, 0.06466666609048843, 0.06499999761581421, 0.06499999761581421, 0.06533333659172058, 0.06599999964237213, 0.0663333311676979, 0.06666667014360428, 0.06866666674613953, 0.07000000029802322, 0.07066666334867477, 0.0716666653752327, 0.07199999690055847, 0.07233333587646484, 0.07199999690055847, 0.07333333045244217, 0.07400000095367432, 0.07433333247900009, 0.07500000298023224, 0.07533333450555801, 0.07599999755620956, 0.07666666805744171, 0.07733333110809326, 0.07800000160932541, 0.07800000160932541, 0.07833333313465118, 0.07833333313465118, 0.0793333351612091, 0.07966666668653488, 0.07999999821186066, 0.07966666668653488, 0.0806666687130928, 0.08233333379030228, 0.08299999684095383, 0.08299999684095383, 0.0833333358168602, 0.08433333039283752, 0.08500000089406967, 0.08533333241939545, 0.0860000029206276, 0.08733333647251129, 0.08833333104848862, 0.08933333307504654, 0.09033333510160446, 0.09099999815225601, 0.09166666865348816, 0.09200000017881393, 0.09233333170413971, 0.09333333373069763, 0.09399999678134918, 0.09433333575725555, 0.09433333575725555, 0.09433333575725555, 0.09533333033323288, 0.09566666930913925, 0.09600000083446503, 0.09733333438634872, 0.0976666659116745, 0.09799999743700027, 0.09799999743700027, 0.09866666793823242, 0.09966666996479034, 0.10000000149011612, 0.10066666454076767, 0.10100000351667404, 0.10133333504199982, 0.10166666656732559]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 2, 6, 8, 8, 0, 5, 4, 0, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 0, 0, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [88, 81, 13, 17, 60, 59, 23, 22, 72, 1], [1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 0], [3, 3, 1, 0, 1, 9], [0, 3, 3, 3, 0], [38, 38, 6], [0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [6, 3, 7, 1, 8, 5, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.035999998450279236, "mapping_values": [1, 15, 15, 10, 5, 3, 8, 8, 4, 4, 1, 7, 4, 3, 1, 0, 2, 1, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.square(alpha))), tf.math.add(alpha, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.negative(grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, grad))), sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3028535279521, 2.302784074456574, 2.301469275822587, 2.3023506544206627, 2.303049931137585, 2.304320905596242], "accuracy": [0.08981640636920929, 0.09272222965955734, 0.09576013684272766, 0.09034473448991776, 0.08757099509239197, 0.09272222965955734], "val_loss": [1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056], "val_accuracy": [0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 9, 6, 8, 8, 0, 0, 3, 0, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 0, 0, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [14, 82, 13, 17, 60, 59, 23, 22, 72, 1], [1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [2, 3, 3, 3, 0], [38, 84, 6], [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1], [6, 3, 7, 1, 8, 5, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.035999998450279236, "mapping_values": [1, 3, 3, 2, 1, 1, 6, 6, 4, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta)))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3028535279521, 2.302784074456574, 2.301469275822587, 2.3023506544206627, 2.303049931137585, 2.304320905596242], "accuracy": [0.08981640636920929, 0.09272222965955734, 0.09576013684272766, 0.09034473448991776, 0.08757099509239197, 0.09272222965955734], "val_loss": [1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056], "val_accuracy": [0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856]}}]