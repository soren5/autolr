[{"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1], [6, 3, 0, 2, 9, 6, 1, 0, 3, 5, 2], [1, 2, 2, 2, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 5, 3, 3, 0], [45, 84, 6], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.8468571305274963, "mapping_values": [1, 16, 16, 10, 6, 2, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))))), tf.math.add(alpha, grad))), tf.math.subtract(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.square(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.154391740023767, 2.082110681113093, 1.3786331269058019, 0.8103523644332196, 0.7049374279092883, 0.6374937652864507, 0.6075928337255001, 0.5627062086101063, 0.5562730231037576, 0.5393516700171115, 0.506475994985621, 0.4921642749962349, 0.4926417536621222, 0.4709990105577322, 0.46267232821208454, 0.4550821818554044, 0.4374361699322794, 0.43334649720322327, 0.42667787470018953, 0.4215242830895477, 0.40745516828951533, 0.4077595348261162, 0.3894716448488489, 0.37353960143702614, 0.36734415825568073, 0.36408719946726864, 0.3575893679015971, 0.34964951492965085, 0.34504598700343625, 0.346954372663382, 0.3318878538958731, 0.3244172334080564, 0.31731679513627326, 0.31152395323251514, 0.31465900421394505, 0.30770249205604916, 0.2981624696957295, 0.2949052420998955, 0.2919810257803857, 0.2912218601649164, 0.28440447717121703], "accuracy": [0.3197728097438812, 0.31726324558258057, 0.5352001190185547, 0.7062475085258484, 0.7367587089538574, 0.761590301990509, 0.7770439982414246, 0.7928939461708069, 0.793422281742096, 0.8033285140991211, 0.8148196935653687, 0.8203672170639038, 0.817989706993103, 0.8260467648506165, 0.8321225643157959, 0.8329150676727295, 0.8383304476737976, 0.8418967127799988, 0.8473120927810669, 0.8454629778862, 0.8465195894241333, 0.8516708612442017, 0.8512746095657349, 0.8615770936012268, 0.8595958352088928, 0.8647470474243164, 0.8685774803161621, 0.8730682730674744, 0.8697662353515625, 0.8683133125305176, 0.8779553771018982, 0.8808611631393433, 0.878351628780365, 0.8858803510665894, 0.8809932470321655, 0.8858803510665894, 0.8898428082466125, 0.8836349248886108, 0.8922203183174133, 0.8898428082466125, 0.8869370222091675], "val_loss": [1.9393031256539481, 1.6106276512145996, 0.6487328324999128, 0.5418116876057216, 0.4993416241237095, 0.504544564655849, 0.4421100786754063, 0.4205468126705715, 0.41663767610277447, 0.4067725794655936, 0.4093295420919146, 0.3945575271333967, 0.38360062667301725, 0.38656015055520193, 0.3665871705327715, 0.36447096722466604, 0.3715998274939401, 0.3532278367451259, 0.35343700647354126, 0.3539063675062997, 0.350475549697876, 0.3460442508969988, 0.3311831184795925, 0.3420280473572867, 0.33173062971660067, 0.331012487411499, 0.32290991715022493, 0.3202628323010036, 0.34091077532087055, 0.32280521733420237, 0.32015434333256315, 0.3150050384657724, 0.31516352721623014, 0.3113495537212917, 0.3222335236413138, 0.31132047516959055, 0.3135461892400469, 0.3126834034919739, 0.31992667061941965, 0.31872972420283724, 0.30756148270198275], "val_accuracy": [0.21799999475479126, 0.37933334708213806, 0.7206666469573975, 0.7536666393280029, 0.7833333611488342, 0.762333333492279, 0.8003333210945129, 0.809333324432373, 0.8100000023841858, 0.8216666579246521, 0.8146666884422302, 0.8209999799728394, 0.8343333601951599, 0.8243333101272583, 0.8399999737739563, 0.8386666774749756, 0.8336666822433472, 0.8420000076293945, 0.8413333296775818, 0.847000002861023, 0.8496666550636292, 0.8506666421890259, 0.8603333234786987, 0.8496666550636292, 0.8556666374206543, 0.8586666584014893, 0.8573333621025085, 0.8629999756813049, 0.8510000109672546, 0.8616666793823242, 0.8616666793823242, 0.8629999756813049, 0.8659999966621399, 0.8640000224113464, 0.8659999966621399, 0.8726666569709778, 0.8640000224113464, 0.8666666746139526, 0.862666666507721, 0.8659999966621399, 0.871999979019165]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [6, 3, 0, 2, 9, 6, 2, 0, 3, 5, 2], [0, 2, 0, 2, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [51, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 5, 3, 3, 0], [45, 84, 6], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [7, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.8391428589820862, "mapping_values": [1, 16, 16, 10, 6, 4, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(grad, tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.square(grad))))), tf.math.add(alpha, grad)))), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.153934484365169, 2.113901233597517, 1.4435144341884745, 0.8147499984627969, 0.7097069652419694, 0.6426292124945238, 0.6037752443631532, 0.5763622406073502, 0.5539386045301374, 0.5350218538232783, 0.512114265311931, 0.4991297480090419, 0.49365989168904884, 0.4733415591584504, 0.4527985519106992, 0.4494408247469596, 0.4326801593230306, 0.42315448731432, 0.4283132810618474, 0.42312143995163226, 0.4109328045640025, 0.4002168933004672, 0.38258016861708505, 0.3747469516218362, 0.3758468543927368, 0.3661629461955558, 0.35542507664701645, 0.34648919705827524, 0.3379423951767282, 0.3480266688041967, 0.3364330795084906, 0.32398782192424713, 0.31875688936243973, 0.30492840417781447, 0.30042303865769315, 0.3029169541080126, 0.29468353522719803, 0.28229534202059103, 0.28876524841654744, 0.28866601594923164, 0.2750400218075891, 0.271919481864679, 0.2691465130831351], "accuracy": [0.3197728097438812, 0.304979532957077, 0.5045568346977234, 0.707040011882782, 0.7388719916343689, 0.7633073329925537, 0.7783648371696472, 0.7901201844215393, 0.7955356240272522, 0.8041210174560547, 0.8144234418869019, 0.8170651197433472, 0.8181217908859253, 0.8256505131721497, 0.8363492488861084, 0.8339717388153076, 0.843481719493866, 0.8412362933158875, 0.8470479249954224, 0.8469158411026001, 0.8470479249954224, 0.8539162874221802, 0.8577466607093811, 0.8585391640663147, 0.8574824929237366, 0.8610487580299377, 0.8713511824607849, 0.8709549307823181, 0.8697662353515625, 0.8687095642089844, 0.871879518032074, 0.8802007436752319, 0.8803328275680542, 0.8878615498542786, 0.8865407705307007, 0.8842953443527222, 0.8891823887825012, 0.8945978283882141, 0.8922203183174133, 0.8936732411384583, 0.8951261639595032, 0.8980319499969482, 0.8985602855682373], "val_loss": [1.9387947491237096, 1.8202934265136719, 0.6459836789539882, 0.5435701438358852, 0.524942125592913, 0.5025929893766131, 0.44475369794028147, 0.42116713523864746, 0.4129072002002171, 0.41128104073660715, 0.41070648602076937, 0.38738432100840975, 0.38421001604625155, 0.3898037075996399, 0.3602335453033447, 0.3604952267238072, 0.37072260890688213, 0.3531581333705357, 0.3522638593401228, 0.3550530842372349, 0.34628647565841675, 0.3369554025786264, 0.33342444045203073, 0.3491264922278268, 0.33174565860203337, 0.32532248326710295, 0.3211959259850638, 0.3168127451624189, 0.33590308257511686, 0.3290760602269854, 0.3256180116108486, 0.3196095483643668, 0.3137296863964626, 0.3181706837245396, 0.3155056493622916, 0.31985838072640554, 0.30633645398276194, 0.30119372265679495, 0.31294427599225727, 0.30803896699632916, 0.30874726602009367, 0.2974678874015808, 0.31909029824393137], "val_accuracy": [0.21833333373069763, 0.3019999861717224, 0.722000002861023, 0.7506666779518127, 0.7763333320617676, 0.7646666765213013, 0.7946666479110718, 0.8086666464805603, 0.8176666498184204, 0.8199999928474426, 0.8106666803359985, 0.828000009059906, 0.8326666951179504, 0.8240000009536743, 0.840666651725769, 0.843999981880188, 0.8333333134651184, 0.8429999947547913, 0.8410000205039978, 0.8376666903495789, 0.8463333249092102, 0.846666693687439, 0.8510000109672546, 0.8420000076293945, 0.8550000190734863, 0.859000027179718, 0.8566666841506958, 0.8600000143051147, 0.8496666550636292, 0.8553333282470703, 0.8616666793823242, 0.8643333315849304, 0.8663333058357239, 0.862666666507721, 0.8653333187103271, 0.8646666407585144, 0.8706666827201843, 0.8786666393280029, 0.8703333139419556, 0.8683333396911621, 0.8730000257492065, 0.875, 0.8696666955947876]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [6, 3, 0, 2, 9, 6, 2, 0, 3, 5, 2], [0, 2, 0, 2, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [51, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 5, 3, 3, 0], [45, 84, 6], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [7, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.836571455001831, "mapping_values": [1, 15, 15, 9, 6, 4, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.negative(tf.math.add(alpha, grad)), tf.math.multiply(grad, tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.1544330583949525, 2.082407225801677, 1.3754491901841728, 0.8206495244615444, 0.7131239038574351, 0.6686260281473875, 0.6120153146412992, 0.5785199624200019, 0.5727013071939662, 0.5521351562483499, 0.5215420423166831, 0.4975002239314462, 0.4916813765510891, 0.4804171092317183, 0.46199687904039977, 0.46040390199044157, 0.44682554900055754, 0.4406610407007054, 0.43353523159889956, 0.43034056442335944, 0.41482943740849637, 0.4031778573438775, 0.3906498565815223, 0.37996825726198213, 0.36964095260772284, 0.3754411391995571, 0.3576055324198847, 0.3569040847193091, 0.35449611427777356, 0.3447563228133553, 0.3339963085096211, 0.32209808547199836, 0.3293618372898722, 0.3118918117019148, 0.3206647079673662, 0.3019727686841522, 0.3018547859229369, 0.2918920463157478, 0.2911971390735456, 0.292313153599515, 0.2826007083658655, 0.2806498464332233, 0.2738453778868196, 0.27195934003228606, 0.276095680596255, 0.26413942036800664, 0.2535925250972314], "accuracy": [0.3197728097438812, 0.31765949726104736, 0.5345396995544434, 0.7079645991325378, 0.7362303733825684, 0.7500990629196167, 0.7712323069572449, 0.7882710099220276, 0.7865539789199829, 0.8026680946350098, 0.8103289008140564, 0.817989706993103, 0.8198388814926147, 0.826310932636261, 0.8325188159942627, 0.8334434032440186, 0.8356888294219971, 0.8380662798881531, 0.8421608805656433, 0.8397833704948425, 0.843481719493866, 0.8500858545303345, 0.8514066934585571, 0.8585391640663147, 0.8581429123878479, 0.8628978729248047, 0.870030403137207, 0.868049144744873, 0.8647470474243164, 0.8712190985679626, 0.8780874609947205, 0.8823140859603882, 0.8753136992454529, 0.8829745054244995, 0.8794082403182983, 0.8821820020675659, 0.8865407705307007, 0.8865407705307007, 0.8916919827461243, 0.8912957310676575, 0.8930128216743469, 0.8956544995307922, 0.8971073627471924, 0.8943336606025696, 0.8981640338897705, 0.9021265506744385, 0.9021265506744385], "val_loss": [1.9393508774893624, 1.6179767676762171, 0.6479254961013794, 0.5468633004597255, 0.5504843677793231, 0.48897600173950195, 0.4550524779728481, 0.4311380216053554, 0.4231545329093933, 0.421681353024074, 0.40218740701675415, 0.39125010796955656, 0.3797145485877991, 0.38755094153540476, 0.3652673193386623, 0.36807931321007864, 0.3736204760415213, 0.35522715534482685, 0.35858156851359774, 0.364728535924639, 0.3595087102481297, 0.3449189322335379, 0.33369711467197966, 0.34381161417279926, 0.3332847271646772, 0.32455131837299894, 0.3249560764857701, 0.33287620544433594, 0.32703432015010286, 0.3185477001326425, 0.32115353856767925, 0.32837737458092825, 0.3202863505908421, 0.31430632727486746, 0.3168953997748239, 0.3125350390161787, 0.3159831166267395, 0.312385482447488, 0.3141826220921108, 0.30810672896248953, 0.3220395360674177, 0.29862364700862337, 0.3190671375819615, 0.3110208937100002, 0.3006715859685625, 0.3127825345311846, 0.31059543575559345], "val_accuracy": [0.21799999475479126, 0.36633333563804626, 0.7149999737739563, 0.7593333125114441, 0.7436666488647461, 0.7753333449363708, 0.7903333306312561, 0.7993333339691162, 0.8133333325386047, 0.8143333196640015, 0.8136666417121887, 0.8240000009536743, 0.8320000171661377, 0.8266666531562805, 0.8393333554267883, 0.8413333296775818, 0.8316666483879089, 0.8420000076293945, 0.8379999995231628, 0.8429999947547913, 0.8393333554267883, 0.8456666469573975, 0.8519999980926514, 0.8463333249092102, 0.8560000061988831, 0.8573333621025085, 0.8569999933242798, 0.8523333072662354, 0.8550000190734863, 0.862333357334137, 0.859000027179718, 0.8576666712760925, 0.859666645526886, 0.8616666793823242, 0.8676666617393494, 0.8690000176429749, 0.8606666922569275, 0.8696666955947876, 0.8636666536331177, 0.8663333058357239, 0.8613333106040955, 0.8740000128746033, 0.8693333268165588, 0.871999979019165, 0.8713333606719971, 0.8666666746139526, 0.8726666569709778]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [6, 3, 0, 0, 9, 1, 2, 0, 3, 5, 2], [0, 2, 0, 2, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [51, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 5, 3, 3, 0], [45, 84, 6], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.8342857360839844, "mapping_values": [1, 9, 9, 6, 3, 3, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.154436199688058, 2.0850664754632504, 1.372187744750795, 0.8225407549781003, 0.6979380939237004, 0.6670872134350515, 0.6077062474927095, 0.574529353291556, 0.562075315488879, 0.5480914547254129, 0.5208725618601254, 0.49315295411044296, 0.49196562094616614, 0.48300332194699774, 0.4598473425412836, 0.45031904329114886, 0.4451106244570481, 0.4374197221206967, 0.43180175661143216, 0.4185086111106956, 0.4077151656749147, 0.4035599457707466, 0.397183729369863, 0.38227079803004255, 0.37877020622446017, 0.3697848582524413, 0.3535973926057212, 0.3502166955903411, 0.34140284721405123, 0.35010795214345913, 0.34051251678324457, 0.3190070265209544, 0.32255015578630214, 0.3114111735371708, 0.31784245845758524, 0.3090891803748509, 0.30296901661989756, 0.29521271063273435, 0.2885803223530126, 0.2862117778568409, 0.28207595613906256, 0.28220029657291085, 0.2698490278414763, 0.2745540540342113, 0.263754318596082, 0.2605867466205745], "accuracy": [0.3197728097438812, 0.3159424066543579, 0.5295205116271973, 0.7043983340263367, 0.7415136694908142, 0.7483819723129272, 0.7774402499198914, 0.7915731072425842, 0.7903843522071838, 0.7997622489929199, 0.8120459914207458, 0.8204993009567261, 0.8215559124946594, 0.824329674243927, 0.8350284099578857, 0.8366134166717529, 0.8368775844573975, 0.8403117060661316, 0.8492933511734009, 0.8481045961380005, 0.8465195894241333, 0.852331280708313, 0.8496896028518677, 0.8589354157447815, 0.8537842035293579, 0.8601241707801819, 0.8710870146751404, 0.8697662353515625, 0.8683133125305176, 0.8668603897094727, 0.8720116019248962, 0.8792761564254761, 0.8754457831382751, 0.8831065893173218, 0.880729079246521, 0.8821820020675659, 0.8841632604598999, 0.8878615498542786, 0.8918240666389465, 0.8886540532112122, 0.8914278149604797, 0.8948619961738586, 0.8994848728179932, 0.8956544995307922, 0.9025228023529053, 0.9019944667816162], "val_loss": [1.9392479487827845, 1.636871610369001, 0.65907883644104, 0.5379447766712734, 0.544532128742763, 0.4811192750930786, 0.449236375944955, 0.4265943850789751, 0.4169220583779471, 0.4118326561791556, 0.40116980246135164, 0.3952730894088745, 0.3867240037236895, 0.3918495944568089, 0.35795161553791593, 0.36685862711497713, 0.3756101727485657, 0.3594517026628767, 0.35119347061429707, 0.35358344657080515, 0.35616915566580637, 0.3551721487726484, 0.3394479581287929, 0.34758863278797697, 0.33575877973011564, 0.3283885717391968, 0.3258622799600874, 0.3255255733217512, 0.3408877764429365, 0.3327774831226894, 0.3164992162159511, 0.3205658197402954, 0.3221745065280369, 0.317486652306148, 0.331109208720071, 0.31298788104738506, 0.3116395132882254, 0.3190802676337106, 0.3078620263508388, 0.30541194336754934, 0.30227049759456087, 0.3052360841206142, 0.32166383947644916, 0.31632896832057406, 0.3030422840799604, 0.3037745101111276], "val_accuracy": [0.21833333373069763, 0.35066667199134827, 0.7286666631698608, 0.7593333125114441, 0.7166666388511658, 0.7733333110809326, 0.7943333387374878, 0.8069999814033508, 0.8169999718666077, 0.8193333148956299, 0.812333345413208, 0.8166666626930237, 0.831333339214325, 0.8220000267028809, 0.8413333296775818, 0.843666672706604, 0.8339999914169312, 0.8373333215713501, 0.8370000123977661, 0.847000002861023, 0.843999981880188, 0.8393333554267883, 0.8500000238418579, 0.8450000286102295, 0.8536666631698608, 0.8573333621025085, 0.856333315372467, 0.8619999885559082, 0.8486666679382324, 0.8603333234786987, 0.8666666746139526, 0.8603333234786987, 0.8603333234786987, 0.8619999885559082, 0.8610000014305115, 0.8700000047683716, 0.8659999966621399, 0.8663333058357239, 0.8713333606719971, 0.8669999837875366, 0.874666690826416, 0.8713333606719971, 0.8673333525657654, 0.8713333606719971, 0.8736666440963745, 0.8706666827201843]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [7, 3, 0, 2, 9, 6, 2, 0, 3, 5, 2], [1, 3, 0, 2, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [51, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 5, 3, 3, 0], [53, 84, 6], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [7, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [3, 0, 2], [6, 32, 85]], "fitness": -0.3837142884731293, "mapping_values": [1, 3, 3, 1, 2, 0, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), grad)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [3.555696643968662, 2.253275618498367, 2.338278813022648, 2.2666330084966364, 2.3408789355379165, 2.2947349212330566, 2.27514853396861, 2.241800046883491, 2.3050289151218544, 2.3037821327013472, 2.303690004814822, 2.3029139483089947], "accuracy": [0.17078325152397156, 0.1578391194343567, 0.09628847241401672, 0.1620657742023468, 0.11887465417385101, 0.12217672914266586, 0.13142253458499908, 0.19059570133686066, 0.09655263274908066, 0.09959053993225098, 0.09232597798109055, 0.10117553919553757], "val_loss": [1.9830382892063685, 2.1441193989345004, 1.9736952781677246, 1.8996287073407854, 1.9728964396885462, 1.9114268847874232, 1.9322436877659388, 1.9758824620928084, 1.9740969794137138, 1.97379698072161, 1.973714828491211, 1.9737285205296107], "val_accuracy": [0.09833333641290665, 0.09933333098888397, 0.13766667246818542, 0.21833333373069763, 0.15533334016799927, 0.1263333261013031, 0.3096666634082794, 0.10000000149011612, 0.1003333330154419, 0.1003333330154419, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [6, 2, 0, 2, 9, 6, 2, 0, 3, 5, 2, 8, 1, 8, 4, 6, 2, 8, 2, 2, 9, 0, 9], [0, 0, 2, 2, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [51, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 5, 3, 3, 0], [45, 84, 6], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [7, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.3742857277393341, "mapping_values": [1, 15, 15, 9, 6, 4, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(tf.math.negative(tf.math.add(alpha, grad)), tf.math.multiply(grad, tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.1954866543327576, 1.9028062319569756, 1.293971277010707, 1.2392523762824246, 1.3378617755331619, 1.5241369501222723, 2.9421803263184447, 2.604492229162631, 378.1290111549306], "accuracy": [0.32545238733291626, 0.3739268183708191, 0.5708624720573425, 0.5900145173072815, 0.5458987951278687, 0.4858010709285736, 0.37947431206703186, 0.09959053993225098, 0.10328886657953262], "val_loss": [1.9498618670872279, 0.9957629271915981, 1.0128758294241769, 0.7748103822980609, 1.2572328363146101, 0.8128957578114101, 2.5973314557756697, 2.0187597274780273, 572463963.4285715], "val_accuracy": [0.36766666173934937, 0.6193333268165588, 0.6470000147819519, 0.6660000085830688, 0.460999995470047, 0.6656666398048401, 0.11100000143051147, 0.09833333641290665, 0.1263333261013031]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [6, 3, 0, 2, 9, 6, 2, 0, 3, 5, 2], [1, 2, 0, 2, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [51, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [6, 7, 9, 0, 1, 9], [0, 5, 3, 3, 0], [45, 84, 6], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [7, 4, 6], [64, 55], [0, 1, 0, 1, 1], [2, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.12114285677671432, "mapping_values": [1, 3, 3, 1, 2, 0, 3, 3, 1, 2, 1, 11, 8, 6, 2, 0, 5, 2, 3, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)))))), tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.square(tf.math.add(sigma, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(beta, tf.math.add(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [5.404221418360496e+26, 2.271036526928234e+28, 1.672596307474055e+29, 6.582706105248311e+29, 1.8282761858668263e+30, 4.087651196628669e+30], "accuracy": [0.10011887550354004, 0.09430722147226334, 0.10170386731624603, 0.0956280529499054, 0.09879804402589798, 0.10328886657953262], "val_loss": [3.3777741577518954e+27, 5.404451740104428e+28, 2.7360057265752936e+29, 8.647129476435015e+29, 2.1111156403698728e+30, 4.377610026038912e+30], "val_accuracy": [0.09066666662693024, 0.09066666662693024, 0.09066666662693024, 0.09066666662693024, 0.09066666662693024, 0.09066666662693024]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [6, 3, 0, 2, 9, 6, 2, 0, 3, 5, 2], [2, 0, 0, 2, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [51, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [3, 5, 3, 3, 0], [45, 84, 6], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [1, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 6, 2, 9, 3, 9], [2, 0, 2, 0], [6, 32, 85]], "fitness": -0.10542856901884079, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 11, 8, 6, 2, 0, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(grad, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, tf.math.add(tf.math.add(sigma, alpha), tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)))))), tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.square(tf.math.add(sigma, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3019021320116284, 2.2982143410413243, 2.300155620879784, 2.3019191975039957, 2.302432578993417, 2.3024563373056277, 2.302753718364445], "accuracy": [0.09219389408826828, 0.10645885765552521, 0.09325055778026581, 0.07357019931077957, 0.08638224750757217, 0.10038304328918457, 0.10011887550354004], "val_loss": [1.9688752038138253, 1.9699642317635673, 1.9719367027282715, 1.9733388083321708, 1.973395688193185, 1.973656245640346, 1.973977702004569], "val_accuracy": [0.07599999755620956, 0.1106666699051857, 0.04933333396911621, 0.09133332967758179, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [6, 3, 0, 0, 9, 1, 2, 0, 3, 5, 2], [1, 2, 0, 2, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [51, 82, 84, 57, 93, 59, 23, 22, 72, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 5, 3, 3, 0], [45, 84, 6], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [7, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 3, 2, 2, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3023102287256707, 2.3026439368590985, 2.3026753399649538, 2.302646697394175, 2.3026555851702173, 2.302663312060974, 2.302667198557785], "accuracy": [0.09272222965955734, 0.09840179979801178, 0.09800554811954498, 0.09206181764602661, 0.09998679161071777, 0.09998679161071777, 0.09655263274908066], "val_loss": [1.9736452102661133, 1.9736523628234863, 1.9736635344369071, 1.9736643518720354, 1.973675114767892, 1.9736834934779577, 1.9736760684422083], "val_accuracy": [0.10000000149011612, 0.1003333330154419, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [6, 2, 0, 2, 9, 6, 2, 0, 3, 5, 2, 8, 1, 8, 4, 6, 2, 8, 2, 2, 9, 0, 9], [0, 0, 0, 2, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [45, 74, 25, 57, 93, 59, 23, 22, 72, 1], [0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 1, 3, 3, 0], [85, 84, 6], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [7, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 5, 5, 3, 2, 2, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1466208.6264241696, 2.3025851429508597, NaN, NaN, NaN, NaN], "accuracy": [0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 8, 3, 2, 9, 6, 9, 0, 3, 5, 2], [0, 0, 0, 2, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [51, 93, 84, 57, 93, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 1, 3, 3, 0], [67, 84, 6], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [7, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 7, 3, 5, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.multiply(tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1], [6, 3, 0, 2, 9, 6, 2, 0, 3, 5, 2], [0, 2, 0, 2, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [51, 82, 18, 57, 93, 59, 23, 22, 72, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [2, 5, 3, 3, 0], [95, 84, 6], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [7, 4, 6], [64, 55], [0, 1, 0, 1, 1], [2, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 18, 11, 7, 5, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 5, 2, 3, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(grad, tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(grad)))))), tf.math.add(alpha, grad)))), tf.math.add(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(beta, tf.math.add(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [2.3020243095195903, 2.302584954004687, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [6, 3, 0, 2, 9, 6, 2, 0, 3, 5, 2], [0, 2, 0, 2, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [51, 82, 84, 57, 93, 59, 23, 22, 72, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 5, 3, 3, 0], [45, 84, 6], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [1, 0, 0, 1, 1, 0, 1, 1], [0, 7, 3, 2, 9, 3, 9], [2, 0, 2, 0], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 8, 5, 3, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.negative(tf.math.add(alpha, grad)), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.05996565893292427, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [6, 3, 2, 0, 0, 1, 2, 0, 3, 5, 2], [0, 0, 0, 2, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [51, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 0, 1, 1, 0, 1, 1, 0], [1, 3, 8, 0, 1, 9], [0, 5, 3, 3, 0], [45, 84, 6], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [7, 4, 6], [64, 55], [0, 1, 0, 1, 1], [6, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 6, 6, 3, 3, 1, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.multiply(tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(beta, tf.math.add(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [6, 8, 0, 2, 9, 6, 2, 0, 3, 5, 2], [1, 0, 0, 2, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [62, 59, 84, 57, 93, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 5, 3, 3, 0], [45, 84, 6], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [6, 4, 6], [64, 55], [0, 1, 0, 1, 1], [6, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(beta, tf.math.add(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.11081759631633759, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [9, 3, 0, 2, 9, 6, 2, 0, 3, 5, 2], [2, 0, 0, 2, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [51, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 5, 3, 3, 0], [45, 84, 6], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [1, 4, 6], [64, 55], [0, 1, 0, 1, 0, 0, 0, 1], [0, 7, 0, 2, 9, 3, 9], [1, 0, 2, 0], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.302247023774554, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [6, 3, 0, 2, 9, 6, 2, 0, 3, 5, 2], [0, 3, 0, 2, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [25, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 5, 3, 3, 0], [45, 84, 6], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [7, 4, 6], [64, 55], [0, 1, 0, 1, 1], [8, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1], [6, 3, 2, 2, 0, 6, 2, 0, 3, 5, 2, 5, 3, 8, 0, 7, 3, 4, 7, 1], [0, 2, 0, 2, 2, 2, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [51, 82, 84, 57, 93, 59, 23, 22, 72, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 5, 3, 3, 0], [45, 84, 6], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [1, 1, 0, 1, 1], [2, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 35, 35, 20, 15, 4, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(grad, tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), grad)))), tf.math.add(alpha, grad))))))), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(alpha)))), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, alpha)))))))), tf.math.multiply(grad, tf.math.pow(tf.math.add(tf.math.add(alpha, grad), grad), tf.math.add(alpha, tf.math.subtract(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.05996565893292427, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [6, 3, 0, 2, 9, 6, 2, 0, 3, 5, 2], [1, 2, 0, 2, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [51, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [4, 5, 3, 3, 0], [45, 84, 6], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [7, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.09685714542865753, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.multiply(grad, tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.302010119095171, 2.2989240749841824, 2.3006134533595572, 2.3022544361958968, 2.3024753555252, 2.3025433066152328, 2.302867580382831], "accuracy": [0.09179764986038208, 0.10276053100824356, 0.09192973375320435, 0.07370228320360184, 0.0886276587843895, 0.10011887550354004, 0.09998679161071777], "val_loss": [1.9693733624049596, 1.9705098015921456, 1.9722933088030135, 1.9734301567077637, 1.9734627178737096, 1.9737449373517717, 1.974031720842634], "val_accuracy": [0.07199999690055847, 0.10499999672174454, 0.050333332270383835, 0.09533333033323288, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1], [6, 3, 0, 2, 9, 6, 2, 0, 3, 2, 2], [0, 2, 0, 2, 2, 2, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [51, 82, 95, 57, 93, 59, 23, 22, 72, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 5, 3, 3, 0], [25, 84, 6], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [7, 4, 6], [64, 55], [1, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.010857142508029938, "mapping_values": [1, 15, 15, 9, 6, 3, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(tf.math.add(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.negative(tf.math.add(alpha, grad)), tf.math.multiply(grad, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.309066242435432, 2.324052606890498, 2.342733464142146, 2.3663420900771364, 2.3947784025214682, 2.4309193963592612], "accuracy": [0.07555144280195236, 0.0536256767809391, 0.03209615498781204, 0.025095760822296143, 0.018755778670310974, 0.013208295218646526], "val_loss": [1.985288347516741, 2.001138687133789, 2.0195835658482144, 2.042141914367676, 2.0709331376211986, 2.110417297908238], "val_accuracy": [0.010333333164453506, 0.008333333767950535, 0.006666666828095913, 0.006000000052154064, 0.00566666666418314, 0.00566666666418314]}}]