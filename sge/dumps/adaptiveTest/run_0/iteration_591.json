[{"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 1, 6, 3, 2, 0, 0, 0, 0, 5, 2, 8, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 1, 0, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 13, 17, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [2, 4, 0], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.8357142806053162, "mapping_values": [1, 19, 19, 12, 7, 2, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))), tf.math.negative(alpha))), tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, grad), tf.math.sqrt(tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.034079507546355, 1.1321503930025096, 0.8151237696326562, 0.71166578556773, 0.6538554229882446, 0.6031707556271959, 0.5680072179024545, 0.5288540926812237, 0.5189254396564185, 0.48181660382219543, 0.46651402788155305, 0.45176713963572723, 0.4377520119454237, 0.4137559471632968, 0.39821537731975815, 0.3825183377888193, 0.3747550322198282, 0.36493276651462053, 0.35142559122100814, 0.34242879143401755, 0.3452270138753388, 0.32295887538502166, 0.32442646712485934, 0.3167880039330975, 0.30434280718952167, 0.29098496551542646, 0.27562236038173554, 0.2710389257217395, 0.2701632606335257, 0.2615074505462402, 0.25803537814215016], "accuracy": [0.32043322920799255, 0.5999207496643066, 0.6966054439544678, 0.7290979027748108, 0.7510236501693726, 0.7741381525993347, 0.7907806038856506, 0.8037247657775879, 0.8090080618858337, 0.8236692547798157, 0.8298771381378174, 0.834632158279419, 0.837537944316864, 0.8499537706375122, 0.8544445633888245, 0.8599920868873596, 0.8658037185668945, 0.8705587387084961, 0.8685774803161621, 0.8751816153526306, 0.8710870146751404, 0.8794082403182983, 0.8803328275680542, 0.8850878477096558, 0.8898428082466125, 0.8908994793891907, 0.897899866104126, 0.8968431949615479, 0.89988112449646, 0.9017302989959717, 0.9000132083892822], "val_loss": [0.905620643070766, 0.6464244638170514, 0.5723441668919155, 0.5197364602770124, 0.49092682770320345, 0.4683082103729248, 0.44518710885729107, 0.43258780241012573, 0.4046760967799595, 0.3962056977408273, 0.3809441157749721, 0.39553053038460867, 0.3621609721864973, 0.34210251910345896, 0.3318838817732675, 0.32477275814328876, 0.32085410186222624, 0.3231790576662336, 0.31988132851464407, 0.33282120738710674, 0.3076447333608355, 0.304633583341326, 0.2979254296847752, 0.29341546978269306, 0.28946806703295025, 0.29107663461140226, 0.29549568040030344, 0.286785398210798, 0.28846159151622225, 0.2933730823653085, 0.28788563183375765], "val_accuracy": [0.6416666507720947, 0.7139999866485596, 0.7570000290870667, 0.7643333077430725, 0.7710000276565552, 0.7829999923706055, 0.7910000085830688, 0.8100000023841858, 0.8213333487510681, 0.8186666369438171, 0.8320000171661377, 0.8176666498184204, 0.8426666855812073, 0.8486666679382324, 0.8586666584014893, 0.8556666374206543, 0.8560000061988831, 0.8606666922569275, 0.859000027179718, 0.8586666584014893, 0.8650000095367432, 0.8683333396911621, 0.871999979019165, 0.8736666440963745, 0.8736666440963745, 0.8799999952316284, 0.8733333349227905, 0.8796666860580444, 0.8793333172798157, 0.8799999952316284, 0.8799999952316284]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [8, 1, 6, 3, 2, 0, 0, 0, 0, 5, 2, 8, 4, 1], [2, 2, 0, 1, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 13, 57, 60, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [43, 84, 6], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0], [1, 4, 7, 2, 8, 5, 0, 4], [2, 4, 0], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.8354285955429077, "mapping_values": [1, 4, 4, 2, 2, 0, 3, 3, 1, 2, 1, 12, 9, 7, 2, 0, 2, 1, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, beta), tf.math.add(sigma, tf.math.sqrt(sigma)))), sigma)), tf.math.add(sigma, tf.math.square(tf.math.add(sigma, grad))))), tf.math.add(sigma, tf.math.negative(sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.9950832624823394, 1.5300372169317271, 0.8761754104049057, 0.7055292175572231, 0.6268802508780702, 0.5748335606843064, 0.5562013610085444, 0.5184156095913892, 0.5049528128726686, 0.48573777001641916, 0.4567303804594843, 0.4307451930658267, 0.43732384997840096, 0.42452447446046676, 0.405595401935983, 0.39438609048879664, 0.39667383587402893, 0.3739448844394538, 0.36358378108985956, 0.3672600304130959, 0.3539945430617685, 0.3308886471063611, 0.3343893704381617, 0.3279128340666462, 0.31399426481837467, 0.3107841108941509, 0.31033979968198966, 0.30814390103531364, 0.295841961201581, 0.2856192133367148, 0.27690672452864534, 0.2720240404333153, 0.2600214444706075, 0.2569864085203684, 0.26619972958777005], "accuracy": [0.351340651512146, 0.4714040458202362, 0.6853784322738647, 0.7364945411682129, 0.7619865536689758, 0.7884030938148499, 0.7992339134216309, 0.8129705190658569, 0.8138951063156128, 0.8197067975997925, 0.8372738361358643, 0.8465195894241333, 0.8405758738517761, 0.8426892161369324, 0.852331280708313, 0.8570862412452698, 0.8569541573524475, 0.8632941246032715, 0.8656716346740723, 0.8672566413879395, 0.8688416481018066, 0.8770307898521423, 0.8698983192443848, 0.8772949576377869, 0.884691596031189, 0.8838990926742554, 0.8831065893173218, 0.8860124349594116, 0.8901069760322571, 0.8947299122810364, 0.8992207050323486, 0.8985602855682373, 0.9022586345672607, 0.9078060984611511, 0.8997490406036377], "val_loss": [1.6430480480194092, 0.7406721796308245, 0.5567260810307094, 0.5202042034694127, 0.4649993010929653, 0.4470511334283011, 0.42013526814324514, 0.4250516636031015, 0.4123520425387791, 0.39363718032836914, 0.36345644508089336, 0.3708299568721226, 0.3499146785054888, 0.34031988041741507, 0.3415463992527553, 0.33427962235042025, 0.3227204169545855, 0.3245458517755781, 0.3284779361316136, 0.3220823662621634, 0.3140267644609724, 0.31615902696337017, 0.3017685668809073, 0.31471163034439087, 0.305303726877485, 0.29733578647886005, 0.30379484380994526, 0.3074609807559422, 0.3009783795901707, 0.29416838714054655, 0.30037942102977205, 0.2913288048335484, 0.3029794267245701, 0.2991532172475542, 0.31400265863963533], "val_accuracy": [0.39666667580604553, 0.6846666932106018, 0.7429999709129333, 0.7549999952316284, 0.7826666831970215, 0.800000011920929, 0.8106666803359985, 0.8066666722297668, 0.8173333406448364, 0.8223333358764648, 0.8363333344459534, 0.8333333134651184, 0.8479999899864197, 0.8500000238418579, 0.8503333330154419, 0.8476666808128357, 0.8579999804496765, 0.8529999852180481, 0.8556666374206543, 0.8606666922569275, 0.8673333525657654, 0.8636666536331177, 0.871999979019165, 0.8669999837875366, 0.8643333315849304, 0.8730000257492065, 0.862333357334137, 0.8646666407585144, 0.8676666617393494, 0.8763333559036255, 0.8686666488647461, 0.8730000257492065, 0.875, 0.8713333606719971, 0.8713333606719971]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [3, 1, 6, 3, 2, 0, 0, 0, 0, 5, 2, 8, 4, 1], [1, 3, 0, 1, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 13, 57, 60, 59, 23, 22, 72, 1], [0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [2, 4, 0], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.7937142848968506, "mapping_values": [1, 15, 15, 9, 6, 2, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.math.negative(alpha)))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.2129728026031708, 1.6588455272498714, 1.2179119329977786, 1.0316655412011253, 0.9488443642197315, 0.8557701088402486, 0.813474247736182, 0.796760971764091, 0.7606894591811657, 0.7336898818543212, 0.7096208376875643, 0.7019000153232323, 0.6705170953121041, 0.6674515129537032, 0.648298822484075, 0.6498532722087946, 0.6269200548771712, 0.6260915651706861, 0.6180527710706771, 0.6314782419335084, 0.6159309448268137, 0.6147238651932412, 0.5861286491277652, 0.5870817880022087, 0.5751039696454593], "accuracy": [0.24765552580356598, 0.4819706678390503, 0.5757495760917664, 0.6247523427009583, 0.6505085229873657, 0.6866992712020874, 0.6988508701324463, 0.7063795924186707, 0.7181349992752075, 0.726192057132721, 0.7339849472045898, 0.7360982894897461, 0.7466648817062378, 0.752740740776062, 0.7537974119186401, 0.7563069462776184, 0.7598732113838196, 0.7564390301704407, 0.7647602558135986, 0.7548540234565735, 0.7688548564910889, 0.761590301990509, 0.7775723338127136, 0.7757231593132019, 0.7839123010635376], "val_loss": [1.6679181030818395, 0.9736510344914028, 0.807381442614964, 0.7071335656302316, 0.6606891325541905, 0.6188595294952393, 0.6024787085396903, 0.5871751308441162, 0.5667331899915423, 0.5359152555465698, 0.5492156914302281, 0.5082640647888184, 0.5035823583602905, 0.5007025344031197, 0.5156230585915702, 0.4758736916950771, 0.47472574029650005, 0.4655987705503191, 0.4727118866784232, 0.4667767456599644, 0.48447362014225553, 0.4662227971213205, 0.455193247113909, 0.4678983347756522, 0.4775936944144113], "val_accuracy": [0.5766666531562805, 0.6233333349227905, 0.6836666464805603, 0.7110000252723694, 0.7200000286102295, 0.7233333587646484, 0.7243333458900452, 0.7286666631698608, 0.7403333187103271, 0.7793333530426025, 0.7476666569709778, 0.7896666526794434, 0.7683333158493042, 0.7739999890327454, 0.7703333497047424, 0.781000018119812, 0.7956666946411133, 0.7990000247955322, 0.7986666560173035, 0.8083333373069763, 0.7749999761581421, 0.7870000004768372, 0.8073333501815796, 0.7923333048820496, 0.7829999923706055]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1], [3, 1, 6, 3, 2, 0, 0, 0, 6, 5, 2, 8, 4, 1], [0, 3, 0, 1, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [71, 82, 13, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [13, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0, 1, 0, 1], [9, 5, 7, 8, 8, 5, 0, 9], [2, 3, 4], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.7062857151031494, "mapping_values": [1, 14, 14, 8, 6, 3, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.subtract(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, alpha))), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.negative(grad))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3020066436822497, 2.2907018660869203, 2.270260166293673, 2.243247667056159, 2.2020959544884073, 2.145150331536997, 2.0541133491858483, 1.9059037783551824, 1.7131891872085805, 1.5454838751738869, 1.4724958900762288, 1.403875103527135, 1.3648577756916984, 1.2065001823300336, 1.0829223142780602, 0.9714995434712174, 0.9357940265137553, 0.9302052389424412, 0.9166323342548149, 0.8886093160873391, 0.8631054131566824, 0.8607816599410806, 0.8445987157565948], "accuracy": [0.09470347315073013, 0.1228371411561966, 0.17355699837207794, 0.24686303734779358, 0.313300758600235, 0.35279354453086853, 0.381719708442688, 0.4115704596042633, 0.4395720660686493, 0.4679698944091797, 0.48448026180267334, 0.5175009965896606, 0.540219247341156, 0.583938717842102, 0.6227710843086243, 0.6388852000236511, 0.6425835490226746, 0.6505085229873657, 0.6629242897033691, 0.6800950765609741, 0.6796988248825073, 0.6763967871665955, 0.6833971738815308], "val_loss": [1.9655748776027135, 1.9508706501552038, 1.9274864196777344, 1.8952335630144392, 1.8498587608337402, 1.779695987701416, 1.663114309310913, 1.476032052721296, 1.2362869467054094, 1.0242838859558105, 0.8830100127628872, 0.8369886364255633, 0.7658989770071847, 0.7607219389506749, 0.7023119926452637, 0.6888902187347412, 0.6981558288846698, 0.6926865237099784, 0.674447911126273, 0.6410130943570819, 0.6191251448222569, 0.6092011758259365, 0.6059512070247105], "val_accuracy": [0.0716666653752327, 0.21533332765102386, 0.34299999475479126, 0.382999986410141, 0.4103333353996277, 0.4429999887943268, 0.476666659116745, 0.515666663646698, 0.5763333439826965, 0.6286666393280029, 0.6646666526794434, 0.6473333239555359, 0.6886666417121887, 0.6940000057220459, 0.706333339214325, 0.7059999704360962, 0.6949999928474426, 0.7329999804496765, 0.7293333411216736, 0.7276666760444641, 0.7283333539962769, 0.7293333411216736, 0.7213333249092102]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [3, 1, 6, 3, 2, 0, 0, 0, 0, 5, 2, 8, 4, 1], [0, 1, 1, 2, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 13, 57, 60, 59, 23, 22, 72, 1], [1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [28, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [2, 4, 0], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [74, 32, 85]], "fitness": -0.6945714354515076, "mapping_values": [1, 3, 3, 1, 2, 1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), alpha), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.2744898297893466, 2.0218719613078155, 1.4534153862242623, 1.2052402040426522, 0.9329307487124009, 0.8636279124956027, 0.8450330613532071, 0.7705459467738989, 0.7572561120549213, 0.7278824227833398, 0.6891943326227543, 0.670272972589754, 0.644419411658107, 0.6006548365014908, 0.6035886970587914, 0.5798110995924374, 0.5804658699674913, 0.5386545145752534, 0.5399045591199434, 0.5321110524773488, 0.5226365289967121, 0.5032220514632172, 0.48614339872736106, 0.4971510108239017, 0.47749008051928055, 0.47094259217525153, 0.47321265837488363, 0.4526240173749416, 0.44801634437907817, 0.4274329507371391, 0.42672206528544854, 0.422653359653392, 0.42186418059967795, 0.4062701487514431, 0.4008529511866017, 0.40042372091004497, 0.39518523841344483], "accuracy": [0.16232994198799133, 0.3879276216030121, 0.5005943775177002, 0.6032228469848633, 0.6560559868812561, 0.6839255094528198, 0.6996433734893799, 0.7049266695976257, 0.7147008180618286, 0.737022876739502, 0.7397965788841248, 0.7423061728477478, 0.750231146812439, 0.7751948237419128, 0.7696473598480225, 0.7791573405265808, 0.7882710099220276, 0.7931581139564514, 0.7882710099220276, 0.7998943328857422, 0.8038568496704102, 0.8037247657775879, 0.8145555257797241, 0.8104609847068787, 0.8208954930305481, 0.8216879963874817, 0.8238013386726379, 0.8277638554573059, 0.8330471515655518, 0.8378021121025085, 0.8363492488861084, 0.8392550349235535, 0.8426892161369324, 0.8461233377456665, 0.848368763923645, 0.8502179384231567, 0.8537842035293579], "val_loss": [1.8682554108755929, 1.317906141281128, 0.8291903904506138, 0.6647012233734131, 0.6767524310520717, 0.5981526715414864, 0.5642724888665336, 0.5634511879512242, 0.5548642873764038, 0.5314916542598179, 0.48952318940843853, 0.4573363406317575, 0.47895337854112896, 0.4646791730608259, 0.4528892551149641, 0.4546046427318028, 0.43269392422267366, 0.44330207790647236, 0.4135296940803528, 0.42156887905938284, 0.39980064971106394, 0.3950952887535095, 0.3899689827646528, 0.391734174319676, 0.3795004316738674, 0.3837434564317976, 0.37063173736844746, 0.3720922555242266, 0.37491387128829956, 0.3728574514389038, 0.3629607473100935, 0.3651733824184963, 0.36442192111696514, 0.3599316477775574, 0.3615146705082485, 0.3663448180471148, 0.3629797101020813], "val_accuracy": [0.3933333456516266, 0.5429999828338623, 0.6583333611488342, 0.718666672706604, 0.7286666631698608, 0.7273333072662354, 0.7453333139419556, 0.7509999871253967, 0.7593333125114441, 0.7583333253860474, 0.7823333144187927, 0.7956666946411133, 0.7756666541099548, 0.7950000166893005, 0.8036666512489319, 0.7933333516120911, 0.8063333630561829, 0.7893333435058594, 0.8169999718666077, 0.8146666884422302, 0.8140000104904175, 0.8203333616256714, 0.8299999833106995, 0.8276666402816772, 0.8366666436195374, 0.8393333554267883, 0.8456666469573975, 0.843999981880188, 0.8473333120346069, 0.843999981880188, 0.8523333072662354, 0.8613333106040955, 0.8560000061988831, 0.8560000061988831, 0.8529999852180481, 0.8526666760444641, 0.8543333411216736]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [3, 1, 6, 3, 2, 0, 0, 0, 0, 5, 2, 8, 4, 1], [0, 3, 0, 1, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 13, 57, 60, 59, 23, 22, 72, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1], [1, 4, 7, 2, 8, 5, 0, 9], [2, 4, 0, 6], [65, 55], [0, 0, 0, 1, 1, 1], [2, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.1322857141494751, "mapping_values": [1, 3, 3, 1, 2, 1, 3, 3, 1, 2, 1, 12, 11, 7, 4, 1, 6, 3, 3, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, beta))), sigma)), tf.math.add(sigma, tf.math.square(tf.math.add(sigma, grad))))), tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.add(tf.math.square(beta), tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.3105669928233166, 2.307208829914275, 2.3083554210443666, 2.3104748387992373, 2.313863215492449, 2.3218755555143447, 2.342550258122541, 6.019292134335485, NaN, NaN, NaN, NaN], "accuracy": [0.06194690242409706, 0.0734381154179573, 0.07515519857406616, 0.08994849026203156, 0.08809932321310043, 0.09642054885625839, 0.09853387624025345, 0.10711926966905594, 0.10487385839223862, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9774247578212194, 1.978065354483468, 1.9801675932747977, 1.9823603630065918, 1.9861561911446708, 1.99664306640625, 2.0387517384120395, 1410.2501046316963, NaN, NaN, NaN, NaN], "val_accuracy": [0.02033333294093609, 0.02500000037252903, 0.07366666942834854, 0.04633333161473274, 0.06833333522081375, 0.15399999916553497, 0.17366667091846466, 0.10133333504199982, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [8, 1, 6, 3, 2, 0, 0, 0, 0, 5, 2, 8, 4, 1], [0, 1, 1, 2, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 13, 57, 60, 59, 23, 22, 72, 1], [0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [98, 84, 6], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0], [9, 4, 7, 2, 8, 5, 0, 9], [2, 4, 0], [64, 55], [1, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [74, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 3, 3, 1, 2, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07475894689559937, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0], [0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 1, 8, 3, 2, 0, 0, 2, 4, 5, 2, 8, 4, 1, 6, 3, 5, 4, 1, 4], [0, 1, 0, 1, 1, 2, 2, 1, 2, 1, 2, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [76, 82, 13, 17, 60, 59, 23, 22, 72, 1], [1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [2, 4, 0], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 33, 33, 19, 14, 4, 6, 6, 4, 2, 2, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))), tf.math.negative(alpha)))), tf.math.add(tf.math.pow(alpha, tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, grad), tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)), grad))))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.pow(alpha, grad))), tf.math.add(alpha, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))), tf.math.subtract(grad, tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07396645098924637, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [3, 1, 6, 3, 2, 0, 0, 0, 4, 5, 2, 8, 4, 1], [0, 3, 0, 1, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 13, 57, 60, 59, 23, 22, 72, 1], [1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [7, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [2, 4, 0], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3031615429645074, 2.304422340058002, 2.3038289116484187, 2.305464255858595, 2.3060270272792684, 2.3075759386295154], "accuracy": [0.0936468094587326, 0.09919429570436478, 0.09668471664190292, 0.09642054885625839, 0.1006472036242485, 0.09721305221319199], "val_loss": [1.9736679622105189, 1.9744261332920618, 1.9749385288783483, 1.97514431817191, 1.975592953818185, 1.9774391991751534], "val_accuracy": [0.10133333504199982, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.10066666454076767, 0.10000000149011612]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1], [3, 1, 6, 3, 2, 6, 3, 6, 4, 5, 2, 8, 4, 1], [0, 2, 1, 2, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [96, 82, 13, 57, 60, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [0, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [43, 84, 6], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0], [1, 4, 9, 2, 8, 5, 0, 4], [2, 4, 0], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [74, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 8, 9, 2, 2, 2, 1, 1, 1, 5, 4, 3, 1, 1, 2, 1, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.subtract(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(alpha, grad)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), alpha)), tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, beta))), tf.math.add(sigma, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [498621992.85321045, 73368477572.1083, 1249365113042.724, 8832330503830.334, 39235453776825.805, 129810392070043.1], "accuracy": [0.09932637959718704, 0.09721305221319199, 0.09681680053472519, 0.10474177449941635, 0.0940430611371994, 0.09655263274908066], "val_loss": [4041722733.714286, 217807206107.42856, 2337691514587.4287, 12744304923209.143, 47736319339958.86, 140805824352841.16], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [3, 1, 6, 3, 2, 0, 0, 0, 4, 5, 2, 8, 4, 1], [0, 3, 0, 1, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [60, 82, 13, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [2, 4, 0], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 5, 5, 3, 2, 2, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3022542375189956, 2.302585832919301, 2.302585813111444, 2.302585913756772, 2.302585868567146, 2.302585797901277], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9736470494951521, 1.9736470494951521, 1.973647117614746, 1.973647117614746, 1.973647117614746, 1.973646913255964], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [3, 1, 6, 3, 2, 0, 0, 0, 0, 5, 2, 8, 4, 1], [0, 0, 0, 1, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 13, 57, 60, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [7, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [2, 6, 0], [20, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 2, 3, 3, 1, 2, 1, 9, 6, 4, 2, 0, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, beta), tf.math.add(sigma, tf.math.add(sigma, sigma)))), sigma)), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3025594645991316, 2.30303716111602, 2.302941454683454, 2.303002072048225, 2.302914830593149, 2.3030779221589777, 2.3028624621774103], "accuracy": [0.09708096832036972, 0.09192973375320435, 0.09655263274908066, 0.09549596905708313, 0.09893012791872025, 0.09800554811954498, 0.09655263274908066], "val_loss": [1.9737367630004883, 1.9736762728009904, 1.973641804286412, 1.9736296789986747, 1.9737073353358678, 1.973759378705706, 1.9737535885402135], "val_accuracy": [0.09833333641290665, 0.10133333504199982, 0.10133333504199982, 0.10066666454076767, 0.09933333098888397, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [8, 1, 6, 3, 2, 0, 0, 0, 0, 5, 2, 8, 4, 1], [2, 2, 0, 1, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 13, 57, 60, 59, 23, 22, 72, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [43, 84, 6], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0], [1, 4, 7, 2, 8, 5, 0, 4, 9], [2, 4, 0], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 1, 14, 12, 9, 3, 2, 2, 1, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, beta), tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.square(sigma)))))), tf.math.add(sigma, grad))), tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), sigma)))))), tf.math.add(sigma, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.302247842541303, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1], [6, 1, 6, 3, 2, 0, 0, 0, 5, 5, 2, 8, 4, 1], [2, 2, 0, 1, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 13, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [51, 84, 6], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0], [9, 5, 7, 8, 8, 5, 0, 9], [2, 4, 0], [64, 55], [0, 0, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 8, 6, 2, 3, 3, 1, 2, 1, 1, 1, 1, 0, 1, 5, 3, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(grad, grad)), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), alpha)), tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))))), grad)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.square(beta), tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.4131097315860193, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09074098616838455, 0.09615638852119446, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [4.1675278799874445, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 1, 6, 8, 2, 6, 0, 0, 8, 5, 2, 8, 4, 1], [2, 1, 0, 1, 0, 2, 1, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 13, 17, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0, 1, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [2, 3, 4], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 12, 7, 2, 5, 5, 3, 2, 2, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, alpha))), tf.math.negative(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.square(alpha))))), tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))), grad)))), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3022542375189956, 2.302585832919301, 2.302585813111444, 2.302585913756772, 2.302585868567146, 2.302585797901277], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9736470494951521, 1.9736470494951521, 1.973647117614746, 1.973647117614746, 1.973647117614746, 1.973646913255964], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [3, 1, 6, 4, 9, 0, 1, 0, 0, 5, 2, 8, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 1, 0, 1, 0, 2, 1, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [40, 82, 13, 57, 60, 59, 23, 22, 72, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [3, 3, 3, 3, 0], [43, 84, 6], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 2, 7, 2, 8, 5, 0, 9, 2], [2, 4, 0], [64, 55], [1, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 11, 6, 3, 1, 1, 0, 1, 0, 14, 10, 9, 1, 1, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.subtract(grad, alpha)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.negative(tf.math.add(alpha, tf.math.negative(alpha))), tf.math.square(tf.math.add(alpha, tf.math.add(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.square(sigma)))), sigma)), tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(sigma, tf.math.add(sigma, sigma)))), tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07475894689559937, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [3, 1, 6, 3, 2, 0, 0, 0, 0, 5, 2, 8, 4, 1], [0, 3, 0, 1, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 13, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0, 1, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [2, 4, 0], [64, 55], [0, 0, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.09885714203119278, "mapping_values": [1, 3, 3, 1, 2, 1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.square(beta), tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3629049535566677, 4.3240055149226, NaN, NaN, NaN, NaN], "accuracy": [0.09192973375320435, 0.09681680053472519, 0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.1076723507472446, 10.39192499433245, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.1003333330154419, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1], [5, 2, 6, 3, 2, 0, 6, 0, 0, 5, 2, 8, 4, 1], [0, 3, 0, 1, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [56, 82, 13, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0, 1, 0, 1], [9, 5, 7, 8, 8, 5, 0, 9], [2, 3, 4], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.07171428203582764, "mapping_values": [1, 4, 4, 2, 2, 1, 5, 5, 3, 2, 2, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.add(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.389267475471804, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.23022057116031647, 0.09496764093637466, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [16.102324894496373, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10566666722297668, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [3, 1, 6, 3, 2, 0, 0, 0, 0, 5, 2, 8, 4, 1], [1, 3, 0, 1, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 13, 57, 60, 59, 23, 22, 72, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 1, 3, 3, 0], [38, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [2, 4, 0], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.035999998450279236, "mapping_values": [1, 3, 3, 1, 2, 0, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3034908362131516, 2.3021031784548374, 2.3016487248994735, 2.3030387233544682, 2.301771152225767, 2.302723100140992], "accuracy": [0.09153348207473755, 0.08981640636920929, 0.08770307898521423, 0.09153348207473755, 0.08585391938686371, 0.09074098616838455], "val_loss": [1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056], "val_accuracy": [0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [8, 1, 6, 3, 2, 0, 0, 0, 0, 5, 2, 8, 4, 1], [2, 2, 0, 1, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 13, 57, 60, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [5, 3, 3, 3, 0], [38, 84, 6], [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1], [1, 4, 7, 8, 9, 5, 0, 4], [2, 4, 0], [64, 55], [0, 1, 0, 1, 1], [5, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.035999998450279236, "mapping_values": [1, 2, 2, 1, 1, 0, 3, 3, 1, 2, 0, 8, 5, 4, 1, 0, 2, 1, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.multiply(grad, tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, beta), sigma)), tf.math.add(sigma, tf.math.sqrt(sigma)))), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.square(beta)", "other_info": {"loss": [2.303489905086412, 2.302113207560237, 2.3017401848612775, 2.3034165699122022, 2.303068015301752, 2.3051724848950688], "accuracy": [0.09153348207473755, 0.08981640636920929, 0.0874389111995697, 0.08849557489156723, 0.08281600475311279, 0.08466517180204391], "val_loss": [1.970996584211077, 1.9710307121276855, 1.9712223325456892, 1.9718570028032576, 1.9727937153407507, 1.973727021898542], "val_accuracy": [0.038333334028720856, 0.03799999877810478, 0.038333334028720856, 0.035999998450279236, 0.03166666626930237, 0.027666667476296425]}}]