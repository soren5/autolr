[{"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 6, 1, 2, 5, 9, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 1, 0, 2, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [92, 82, 17, 17, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 43, 6], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [3, 2, 7, 1, 8, 2, 2, 1], [1, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.8485714197158813, "mapping_values": [1, 10, 10, 7, 3, 2, 3, 3, 1, 2, 1, 5, 3, 2, 1, 0, 2, 1, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, alpha))), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.0372836653582564, 1.1362698165464395, 0.8191290960776697, 0.7143047235865776, 0.6382543968093111, 0.5885824919801897, 0.5540595667126975, 0.5244004667836598, 0.49207060127808766, 0.47014395484614446, 0.45594018400148423, 0.440474588971616, 0.43187872983004516, 0.4088369829071165, 0.4088655138854983, 0.37935400313830975, 0.3820119239571954, 0.36885356055180224, 0.35147488500621293, 0.3431597860332462, 0.3346326337821448, 0.32798203256750275, 0.3256008872904278, 0.3184615726980157, 0.30822031785862053, 0.3008716271270331, 0.2776516955313886, 0.29025953601868143, 0.2870666063409739, 0.2800027248216516, 0.26788377496528903, 0.26173634149489416, 0.2461575171801361, 0.23953482962720635, 0.23932666870518257, 0.21735885258891469, 0.22006984444940567, 0.2183945433354381, 0.20326778344222504, 0.19979718790243584, 0.20253390191670784, 0.19271488913636653, 0.1879034206505386, 0.19079992031818052], "accuracy": [0.3203011453151703, 0.615770697593689, 0.6993792057037354, 0.735569953918457, 0.7598732113838196, 0.778232753276825, 0.7887993454933167, 0.8043851256370544, 0.8177255392074585, 0.8264430165290833, 0.8329150676727295, 0.8408400416374207, 0.844010055065155, 0.8531237840652466, 0.8457271456718445, 0.8623695969581604, 0.8613129258155823, 0.8622375130653381, 0.8684453964233398, 0.8754457831382751, 0.8780874609947205, 0.8770307898521423, 0.8790120482444763, 0.8835028409957886, 0.884691596031189, 0.8881257176399231, 0.8927486538887024, 0.8918240666389465, 0.894069492816925, 0.8926165699958801, 0.901862382888794, 0.9000132083892822, 0.9058248400688171, 0.9063531756401062, 0.909259021282196, 0.917580246925354, 0.9211464524269104, 0.9149385690689087, 0.9237881302833557, 0.9270902276039124, 0.9211464524269104, 0.9252410531044006, 0.9233918786048889, 0.9248448014259338], "val_loss": [0.92343156678336, 0.6479262283870152, 0.5696100166865757, 0.5160350118364606, 0.48210018021719797, 0.45519590377807617, 0.4256942442485264, 0.4120047858783177, 0.384916433266231, 0.37715246847697664, 0.3595034054347447, 0.3504427415984018, 0.34857594115393503, 0.3511400393077305, 0.3288009592464992, 0.3241270184516907, 0.3234731469835554, 0.3215656706265041, 0.3122571621622358, 0.3052188328334263, 0.3063638210296631, 0.2989197713988168, 0.31773983580725534, 0.31150446619306293, 0.3022442715508597, 0.29400971106120516, 0.2948571869305202, 0.29406739132744925, 0.29351517132350374, 0.3002722007887704, 0.28817555734089445, 0.30021783283778597, 0.29428213834762573, 0.287746148450034, 0.2824849230902536, 0.29723778792790007, 0.28764998061316355, 0.2903266208512442, 0.2807993633406503, 0.29533456904547556, 0.2867679255349295, 0.2985152687345232, 0.3000960179737636, 0.29129486424582346], "val_accuracy": [0.6296666860580444, 0.718999981880188, 0.7540000081062317, 0.7699999809265137, 0.7703333497047424, 0.7900000214576721, 0.8096666932106018, 0.8116666674613953, 0.8256666660308838, 0.8343333601951599, 0.846666693687439, 0.8486666679382324, 0.846666693687439, 0.8420000076293945, 0.8516666889190674, 0.8583333492279053, 0.8573333621025085, 0.8556666374206543, 0.8643333315849304, 0.8650000095367432, 0.8616666793823242, 0.8696666955947876, 0.8569999933242798, 0.859333336353302, 0.8640000224113464, 0.8709999918937683, 0.871999979019165, 0.8706666827201843, 0.8700000047683716, 0.8713333606719971, 0.878000020980835, 0.8686666488647461, 0.8766666650772095, 0.8816666603088379, 0.8813333511352539, 0.8820000290870667, 0.8833333253860474, 0.8806666731834412, 0.8870000243186951, 0.8813333511352539, 0.8843333125114441, 0.8836666941642761, 0.8840000033378601, 0.8866666555404663]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 6, 3, 9, 1, 2, 2, 2, 1, 2, 0, 4, 1, 5, 2, 7, 6, 2, 8, 0, 8, 1, 6, 5], [0, 2, 2, 0, 2, 2, 0, 0, 1, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [92, 82, 17, 17, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 43, 6], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [3, 2, 7, 1, 8, 2, 2, 1], [1, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.8431428670883179, "mapping_values": [1, 15, 15, 9, 6, 3, 3, 3, 1, 2, 1, 5, 3, 2, 1, 0, 2, 1, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), grad)), tf.math.add(tf.math.add(alpha, tf.math.add(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), tf.math.add(alpha, grad)))))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.0372837214910153, 1.1361989307680687, 0.819076968772993, 0.7144411340397205, 0.6382748896356712, 0.5880356111767081, 0.5539951933499387, 0.5227468667910824, 0.49042904095138934, 0.46677139155805825, 0.4566937172653779, 0.4447075159967599, 0.43179768322717405, 0.4081534800110964, 0.4098281682663432, 0.3794006516652856, 0.38193488356034516, 0.3640348265207581, 0.34428475152988003, 0.3441432101804315, 0.33471239935751873, 0.3243792623679053, 0.31746141052973537, 0.3118136603291229, 0.30564873159254513, 0.2970389192524115, 0.2737427165109594, 0.2859141120207135, 0.2860116205470846, 0.27959031834184783, 0.2652319158939023, 0.2639189395040427, 0.24985338178104208, 0.24184605483176796, 0.24266855523980227, 0.21628641879884494, 0.2196667559898572, 0.22165831540868802, 0.20403860986681505, 0.19479828831258625, 0.20371488379118954, 0.19720291071453933, 0.18238065020283215, 0.18475250605744237], "accuracy": [0.3203011453151703, 0.615770697593689, 0.7000396251678467, 0.7354378700256348, 0.7606657147407532, 0.7769119143486023, 0.7884030938148499, 0.8038568496704102, 0.8186501264572144, 0.8277638554573059, 0.8313300609588623, 0.8404437899589539, 0.8433496356010437, 0.8539162874221802, 0.8465195894241333, 0.8625016212463379, 0.8619733452796936, 0.8660678863525391, 0.872407853603363, 0.8750495314598083, 0.8779553771018982, 0.8796724081039429, 0.8845595121383667, 0.8838990926742554, 0.8857482671737671, 0.8883898854255676, 0.8968431949615479, 0.8926165699958801, 0.8939374089241028, 0.8931449055671692, 0.9034473896026611, 0.9039757251739502, 0.9056927561759949, 0.9074098467826843, 0.9049002528190613, 0.9210143685340881, 0.9179764986038208, 0.9170519113540649, 0.9229956269264221, 0.9286752343177795, 0.9207502603530884, 0.923920214176178, 0.9256373047828674, 0.9273543953895569], "val_loss": [0.9234303065708706, 0.6472942658833095, 0.5695518936429705, 0.5159586327416557, 0.48167414324624197, 0.45372322627476286, 0.4258313093866621, 0.41328575781413485, 0.38588444675718037, 0.3792139547211783, 0.3600135956491743, 0.35308062178747995, 0.3481289488928659, 0.3526254211153303, 0.3351304105349949, 0.32089559520993916, 0.32300845214298796, 0.32421315567834036, 0.3143223694392613, 0.3074360489845276, 0.30554736512047903, 0.2997722881180899, 0.3110093985285078, 0.3071011219705854, 0.3008739522525242, 0.2939712830952236, 0.29667459215436665, 0.29188802412578035, 0.29094784600394114, 0.30507437671933857, 0.2964913674763271, 0.3068750160081046, 0.2850843753133501, 0.28824637617383686, 0.2839658686092922, 0.29197829961776733, 0.2848217487335205, 0.2885884472302028, 0.2841975433485849, 0.30216496331351145, 0.29025853531701223, 0.2965595381600516, 0.3015508566583906, 0.29243798766817364], "val_accuracy": [0.6296666860580444, 0.7193333506584167, 0.7536666393280029, 0.7703333497047424, 0.7716666460037231, 0.7910000085830688, 0.8100000023841858, 0.8113333582878113, 0.8259999752044678, 0.8333333134651184, 0.8433333039283752, 0.846666693687439, 0.8456666469573975, 0.8393333554267883, 0.8483333587646484, 0.8556666374206543, 0.8576666712760925, 0.8583333492279053, 0.8636666536331177, 0.8629999756813049, 0.8640000224113464, 0.8693333268165588, 0.8606666922569275, 0.859666645526886, 0.8653333187103271, 0.8706666827201843, 0.8733333349227905, 0.8709999918937683, 0.8743333220481873, 0.8726666569709778, 0.8726666569709778, 0.8636666536331177, 0.8830000162124634, 0.8740000128746033, 0.8796666860580444, 0.8830000162124634, 0.8840000033378601, 0.8840000033378601, 0.8886666893959045, 0.8803333044052124, 0.8799999952316284, 0.8866666555404663, 0.8823333382606506, 0.8846666812896729]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 3, 0, 2, 1, 5, 0, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [0, 1, 0, 0, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [6, 33, 13, 17, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 5, 3, 3, 0], [38, 43, 6], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1], [5, 3, 7, 1, 8, 2, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.8408571481704712, "mapping_values": [1, 1, 1, 0, 1, 1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.037283800171351, 1.136264472676306, 0.8191287826946966, 0.715123954552701, 0.6388009235276648, 0.5887000342370213, 0.5540913005137188, 0.5247727229870416, 0.4915022947225809, 0.4687912612700774, 0.45520508510167995, 0.44461510708823004, 0.43258584136141603, 0.40831632391179257, 0.40996444247748637, 0.38005332500549466, 0.37966699932292625, 0.364088018009644, 0.3455960880952693, 0.3423205181009592, 0.33576737523960665, 0.3292564305379296, 0.32213061540165533, 0.3140362263465869, 0.3030135607352551, 0.2957833937571395, 0.2748078052527743, 0.286028326880332, 0.2855190011913656, 0.2775765083107289, 0.26937518106743236, 0.2691213157214446, 0.2506943738786473, 0.24777142393740176, 0.2476220843168754, 0.22294069830736132, 0.2197059865530692, 0.22589632182852815, 0.20837549108673853, 0.20071186667514626, 0.19984252429074614, 0.1933907886041768, 0.18225379012650061, 0.1871654955174992, 0.18879812215817146, 0.18386940462060844, 0.1785943888796004, 0.16971449159738206, 0.1611073455928166], "accuracy": [0.3203011453151703, 0.6156386137008667, 0.700171709060669, 0.7367587089538574, 0.7602694630622864, 0.7769119143486023, 0.7909126877784729, 0.8045172095298767, 0.8183859586715698, 0.8264430165290833, 0.8339717388153076, 0.8411042094230652, 0.8448025584220886, 0.8533879518508911, 0.8451988101005554, 0.8622375130653381, 0.8636903762817383, 0.8634262084960938, 0.8734645247459412, 0.8762382864952087, 0.8767666220664978, 0.8750495314598083, 0.8812574148178101, 0.8840311765670776, 0.8862766027450562, 0.8919561505317688, 0.8956544995307922, 0.8942015767097473, 0.8942015767097473, 0.8922203183174133, 0.9006736278533936, 0.8948619961738586, 0.9033153057098389, 0.9038436412811279, 0.9029190540313721, 0.9154669046401978, 0.9154669046401978, 0.9132214784622192, 0.9223352074623108, 0.9206181764602661, 0.9228635430335999, 0.9233918786048889, 0.925901472568512, 0.9276185631752014, 0.9309206008911133, 0.9290714859962463, 0.9311847686767578, 0.9322414398193359, 0.9408268332481384], "val_loss": [0.9234305790492466, 0.6473948614937919, 0.5698942456926618, 0.5171347175325666, 0.48259838989802767, 0.4544309377670288, 0.4259466528892517, 0.41589490856443134, 0.3851125240325928, 0.3774529440062387, 0.3606446215084621, 0.35426305873053415, 0.35305599655423847, 0.34988311358860563, 0.3353453704289028, 0.3223540868077959, 0.32389756611415316, 0.3223165529114859, 0.31438255310058594, 0.31046921014785767, 0.3059638738632202, 0.30585575103759766, 0.3120835082871573, 0.30668510709490093, 0.30274477175303866, 0.29408147505351473, 0.2939030272620065, 0.2863881843430655, 0.2935881188937596, 0.3016715220042637, 0.2894160577229091, 0.3029423015458243, 0.2848963737487793, 0.2910632746560233, 0.2830044542040144, 0.2964440073285784, 0.28705700806209017, 0.2940381680216108, 0.2820296883583069, 0.29772448539733887, 0.29173424414225985, 0.2982997213091169, 0.3018289123262678, 0.28765577929360525, 0.2991892525127956, 0.3080520374434335, 0.30911000285829815, 0.30179435866219656, 0.29566129616328646], "val_accuracy": [0.6296666860580444, 0.7193333506584167, 0.7536666393280029, 0.7696666717529297, 0.7693333625793457, 0.7913333177566528, 0.8103333115577698, 0.8086666464805603, 0.8259999752044678, 0.8343333601951599, 0.846666693687439, 0.8460000157356262, 0.8450000286102295, 0.8410000205039978, 0.847000002861023, 0.856333315372467, 0.8579999804496765, 0.8556666374206543, 0.8606666922569275, 0.8606666922569275, 0.862666666507721, 0.8659999966621399, 0.8586666584014893, 0.8603333234786987, 0.862666666507721, 0.8663333058357239, 0.874666690826416, 0.8700000047683716, 0.8693333268165588, 0.8673333525657654, 0.875, 0.8673333525657654, 0.8790000081062317, 0.8733333349227905, 0.8759999871253967, 0.8799999952316284, 0.8809999823570251, 0.8796666860580444, 0.8830000162124634, 0.8790000081062317, 0.8833333253860474, 0.8856666684150696, 0.8833333253860474, 0.887666642665863, 0.8823333382606506, 0.8786666393280029, 0.8830000162124634, 0.8859999775886536, 0.887333333492279]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 0, 6, 0, 2, 5, 9, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [0, 1, 0, 0, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [92, 82, 17, 17, 60, 59, 23, 22, 72, 1], [0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 3, 3, 3, 0], [47, 43, 6], [1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1], [5, 3, 7, 1, 8, 2, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.8031428456306458, "mapping_values": [1, 9, 9, 7, 2, 2, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, alpha)))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.0480453855940035, 1.8145696288480293, 1.3704040174266334, 1.123756713847348, 1.0087427499114467, 0.8974519274206745, 0.837586169087923, 0.7894412788102781, 0.7392062650475094, 0.7042499030853512, 0.7160650357483967, 0.680505465003147, 0.6713398020139318, 0.6398802507728272, 0.62029486633232, 0.6330536027090692, 0.5979436500244735, 0.5906024287405456, 0.5600486046618254, 0.5591621570788071, 0.550390805243627, 0.5575432842591215, 0.5337490330849656, 0.5504073592508316, 0.5182949306076512, 0.503569085773397, 0.493128874991249, 0.5042529919081046, 0.4785678583192252, 0.47228657835982557, 0.5042146253052042, 0.491812555907409, 0.46953118088349, 0.46114868992008884], "accuracy": [0.3214899003505707, 0.4231937527656555, 0.5160480737686157, 0.5860520601272583, 0.6322810649871826, 0.6627922058105469, 0.6765288710594177, 0.7120591998100281, 0.7190595865249634, 0.7194558382034302, 0.7407211661338806, 0.7504953145980835, 0.7436270117759705, 0.7491744756698608, 0.767401933670044, 0.7586844563484192, 0.7738739848136902, 0.7766477465629578, 0.7865539789199829, 0.7877426743507385, 0.7911768555641174, 0.7876105904579163, 0.8017435073852539, 0.7991018295288086, 0.8037247657775879, 0.8120459914207458, 0.8128384351730347, 0.8117818236351013, 0.819970965385437, 0.819442629814148, 0.8140271902084351, 0.8175934553146362, 0.8241975903511047, 0.8260467648506165], "val_loss": [1.2085342747824532, 1.2310676234109061, 1.0080163138253349, 0.7571599313191005, 0.7702252013342721, 0.6584588970456805, 0.6297014270509992, 0.5741128580910819, 0.5698953696659633, 0.5730041946683612, 0.5621334995542254, 0.522043125970023, 0.5344308614730835, 0.5043895414897374, 0.49698844977787565, 0.4952108519417899, 0.5258773394993373, 0.49306014605930876, 0.4851323195866176, 0.48151845591408865, 0.5219471795218331, 0.4647378751209804, 0.48022384302956717, 0.4763710158211844, 0.4201563426426479, 0.4217144676617214, 0.4430635826928275, 0.40884333848953247, 0.38519409724644255, 0.42654548372541157, 0.4469294718333653, 0.44216915539332796, 0.3969027314867292, 0.39385323013578144], "val_accuracy": [0.5609999895095825, 0.5189999938011169, 0.5376666784286499, 0.6793333292007446, 0.6660000085830688, 0.6890000104904175, 0.7173333168029785, 0.7446666955947876, 0.7246666550636292, 0.7516666650772095, 0.7620000243186951, 0.7599999904632568, 0.762666642665863, 0.7603333592414856, 0.7806666493415833, 0.778333306312561, 0.7549999952316284, 0.765666663646698, 0.7606666684150696, 0.7823333144187927, 0.753000020980835, 0.7826666831970215, 0.7823333144187927, 0.7853333353996277, 0.8086666464805603, 0.8046666383743286, 0.7963333129882812, 0.8096666932106018, 0.824999988079071, 0.8056666851043701, 0.8059999942779541, 0.8006666898727417, 0.8196666836738586, 0.8243333101272583]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 6, 0, 2, 1, 2, 4, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [0, 0, 2, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [43, 33, 13, 17, 60, 59, 23, 22, 72, 1], [1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 5, 3, 3, 0], [38, 43, 6], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [3, 2, 7, 1, 8, 2, 2, 1], [1, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.7088571190834045, "mapping_values": [1, 3, 3, 2, 1, 1, 3, 3, 1, 2, 1, 5, 3, 2, 1, 0, 2, 1, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.0236298922991094, 1.1891475666893503, 0.8688721840470742, 0.7881909912257005, 0.7053502250766364, 0.6670238445022748, 0.6179916148944034, 0.5961729270308765, 0.5734394312125345, 0.5479894655255625, 0.534527690537208, 0.5100015505878697, 0.5119945820823967, 0.4940959214337545, 0.49874010677776004, 0.49314835660918327, 0.476795315018199, 0.4900573312708762, 0.49164373288773716, 0.5082768441081095, 0.502701370006917], "accuracy": [0.31765949726104736, 0.5982036590576172, 0.6802271604537964, 0.7124554514884949, 0.7256637215614319, 0.7473253011703491, 0.763439416885376, 0.7725531458854675, 0.7814027070999146, 0.802800178527832, 0.7991018295288086, 0.8013472557067871, 0.8112534880638123, 0.8136309385299683, 0.8088759779930115, 0.813498854637146, 0.8198388814926147, 0.8193105459213257, 0.813498854637146, 0.8103289008140564, 0.8087438941001892], "val_loss": [0.8750395093645368, 0.6417954138347081, 0.615323509488787, 0.5418609040124076, 0.5137723514011928, 0.48223895686013357, 0.45557641983032227, 0.43796922479357037, 0.41584817852292744, 0.4058065244129726, 0.4089903746332441, 0.40300847802843365, 0.3930621998650687, 0.4132654241153172, 0.3934990423066275, 0.4311389071600778, 0.41898988825934275, 0.41792935132980347, 0.4648095539637974, 0.42931961161749704, 0.4546715532030378], "val_accuracy": [0.6493333578109741, 0.7210000157356262, 0.7390000224113464, 0.7329999804496765, 0.7620000243186951, 0.7833333611488342, 0.7963333129882812, 0.8133333325386047, 0.8173333406448364, 0.8256666660308838, 0.8166666626930237, 0.8299999833106995, 0.8363333344459534, 0.8323333263397217, 0.8309999704360962, 0.8370000123977661, 0.8363333344459534, 0.8203333616256714, 0.8243333101272583, 0.8159999847412109, 0.8236666917800903]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 3, 0, 2, 4, 5, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 3, 0, 0, 0, 0, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [92, 82, 17, 17, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 0, 3, 3, 0], [38, 43, 6], [1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [5, 3, 7, 1, 8, 2, 2, 1], [4, 7, 0, 6], [64, 55], [0, 0, 0, 1, 1], [0, 7, 0, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.24228571355342865, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 2, 3, 2, 1, 0, 0, 0, 0, 5, 3, 2, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.negative(beta), alpha))", "other_info": {"loss": [2.6491297857400182, 2.2810981066440155, 1.9764426095075462e+25, NaN, NaN, NaN, NaN], "accuracy": [0.21384228765964508, 0.13551710546016693, 0.10711926966905594, 0.10157178342342377, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9756970405578613, 1.8842004367283411, 5.286714482289568e+20, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.2280000001192093, 0.1003333330154419, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 3, 0, 2, 1, 5, 0, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [0, 1, 0, 0, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [92, 82, 17, 17, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 2, 3, 3, 0], [0, 43, 6], [1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [5, 3, 7, 1, 8, 2, 2, 1], [4, 7, 0, 6], [64, 55], [0, 0, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 5, 3, 2, 0], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.square(beta), alpha))", "other_info": {"loss": [2.3024273099144765, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 6, 0, 2, 5, 9, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 1, 0, 2, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [92, 82, 17, 17, 60, 59, 23, 22, 72, 1], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [4, 3, 3, 3, 0], [46, 43, 6], [1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 1], [3, 2, 7, 1, 8, 2, 2, 1], [1, 7, 0, 6], [64, 55], [0, 0, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 5, 3, 2, 0], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.square(beta), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.17355699837207794, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], [5, 5, 6, 8, 2, 1, 2, 4, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5, 9, 2, 2, 9, 4, 6, 7, 0, 4, 5, 6, 2, 9], [2, 1, 0, 2, 1, 2, 2, 0, 1, 0, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [69, 33, 13, 17, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [7, 3, 9, 0, 1, 9], [0, 0, 3, 3, 0], [38, 43, 6], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [5, 3, 7, 1, 8, 2, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [8, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 59, 59, 38, 21, 8, 3, 3, 1, 2, 2, 2, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 56, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.subtract(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.square(tf.math.add(alpha, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, alpha)))), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.subtract(grad, tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))))), alpha), tf.math.sqrt(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))), grad)))), tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), grad)), tf.math.add(tf.math.negative(tf.math.add(alpha, grad)), grad)))))))))))))), tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))), grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 6, 0, 2, 5, 9, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [0, 0, 2, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [92, 82, 17, 17, 60, 59, 23, 22, 72, 1], [1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 3, 3, 3, 0], [47, 43, 6], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1], [5, 3, 7, 1, 8, 2, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [0, 1, 2], [12, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [3.4693758957862477, 14.737434456235366, 40.59930399666845, 85.54220380922901, 149.75013894748852, 247.6334820647738], "accuracy": [0.1010434553027153, 0.09985470771789551, 0.10011887550354004, 0.09681680053472519, 0.09919429570436478, 0.10460969805717468], "val_loss": [5.022316523960659, 16.82879420689174, 38.94046129499163, 73.97979082380023, 125.08245849609375, 195.65036010742188], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 6, 0, 2, 5, 9, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 1, 0, 2, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [92, 82, 17, 17, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 43, 6], [0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [3, 2, 7, 1, 8, 2, 2, 1], [1, 7, 0, 6], [64, 55], [0, 0, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 2, 3, 1, 5, 3, 2, 1, 0, 5, 3, 2, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), grad)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, alpha), sigma)), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.square(beta), alpha))", "other_info": {"loss": [1.6466479189314115e+28, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.17857614159584045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 9, 6, 0, 2, 1, 2, 4, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [0, 0, 2, 1, 0, 0, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [43, 33, 89, 17, 60, 59, 23, 22, 72, 1], [1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [4, 3, 9, 0, 1, 9], [0, 1, 3, 3, 0], [38, 43, 6], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [3, 3, 7, 1, 8, 2, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 2, 0, 1, 3, 3, 1, 2, 1, 3, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 6, 3, 9, 1, 2, 2, 2, 1, 2, 0, 4, 1, 5, 2, 7, 6, 2, 8, 0, 8, 1, 6, 5], [0, 2, 2, 2, 2, 2, 0, 0, 1, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [92, 82, 1, 17, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 43, 6], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [3, 3, 7, 1, 8, 2, 2, 1], [1, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [8, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 1, 3, 3, 1, 2, 1, 5, 3, 2, 1, 0, 2, 1, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [9, 5, 6, 3, 9, 1, 2, 2, 2, 1, 2, 0, 4, 1, 5, 2, 7, 6, 2, 8, 0, 8, 1, 6, 5], [0, 2, 2, 0, 2, 2, 0, 0, 1, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [92, 82, 17, 17, 60, 59, 23, 22, 72, 1], [1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 43, 6], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [3, 3, 7, 1, 8, 2, 2, 1], [4, 7, 0, 6], [64, 55], [0, 0, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 5, 5, 2, 3, 1, 5, 3, 2, 1, 0, 5, 3, 2, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), grad)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.square(beta), alpha))", "other_info": {"loss": [2.3024273099144765, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 4, 6, 0, 2, 1, 2, 4, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [0, 0, 2, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [30, 33, 13, 17, 60, 59, 23, 22, 72, 1], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [4, 3, 9, 0, 1, 9], [0, 3, 3, 3, 0], [9, 43, 6], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1], [5, 3, 7, 1, 8, 2, 2, 1], [4, 7, 0, 6], [64, 55], [0, 0, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 21, 21, 12, 9, 4, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 5, 3, 2, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.pow(tf.math.add(alpha, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), tf.math.square(tf.math.add(alpha, grad))))))), tf.math.add(tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.square(beta), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1022322028875351, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 6, 0, 2, 5, 9, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [0, 1, 0, 0, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [6, 33, 13, 17, 60, 59, 23, 22, 72, 1], [0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [2, 3, 3, 3, 0], [74, 43, 6], [0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1], [5, 3, 7, 1, 8, 2, 2, 1], [1, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [7, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.09828571230173111, "mapping_values": [1, 1, 1, 0, 1, 1, 5, 5, 3, 2, 1, 1, 1, 0, 1, 0, 5, 2, 3, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), beta), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(beta, tf.math.add(alpha, beta))", "other_info": {"loss": [2.3648436833460886, 3.0620165360271496, 4.934605310243811, 8.08644254165728, 12.183296427451515, 17.933326861263502], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09866596013307571, 0.09708096832036972, 0.10011887550354004, 0.10527011007070541], "val_loss": [2.0900934764317105, 2.7702065195356096, 4.2821036747523715, 6.584317479814802, 9.648905072893415, 13.518445696149554], "val_accuracy": [0.10066666454076767, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 6, 3, 9, 1, 2, 2, 2, 1, 2, 0, 4, 1, 5, 2, 7, 6, 2, 8, 0, 8, 1, 6, 5, 7, 9, 2, 6, 5, 1], [0, 2, 2, 0, 2, 2, 0, 0, 1, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [92, 82, 17, 17, 60, 59, 23, 22, 72, 1], [1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 0, 1, 1, 0], [5, 3, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 43, 6], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1], [3, 2, 7, 1, 8, 2, 2, 1], [1, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.07571428269147873, "mapping_values": [1, 50, 50, 31, 19, 8, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(alpha, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))))), tf.math.negative(tf.math.add(alpha, grad)))), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.sqrt(alpha), grad), tf.math.negative(tf.math.add(alpha, grad)))), tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))))))))))))), tf.math.add(alpha, tf.math.add(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), tf.math.square(tf.math.add(alpha, tf.math.subtract(grad, grad))))))))))))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.302676198410399, 2.3033275220687317, 2.304072864397941, 2.30206875230469, 2.3012807321050905, 2.3021848814882038, 2.300748595062768, 2.301403175554791, 2.3017773681769613, 2.3014967012651026, 2.299002031372397, 2.299620229995419, 2.299812225853967, 2.3005261120464287, 2.3006928742695574, 2.300190351170288, 2.3001518312808686, 2.3008933766422617, 2.300300430612258, 2.3009129560319677, 2.301015108520675, 2.3010334138463375, 2.3010806204730714, 2.300881158941851, 2.300456809329949], "accuracy": [0.09245806187391281, 0.08981640636920929, 0.09100515395402908, 0.09272222965955734, 0.09734513610601425, 0.08968432247638702, 0.09417514503002167, 0.09140139818191528, 0.09602430462837219, 0.09140139818191528, 0.09813763201236725, 0.09879804402589798, 0.09826971590518951, 0.09285431355237961, 0.09959053993225098, 0.09351472556591034, 0.09813763201236725, 0.09747721254825592, 0.09642054885625839, 0.09826971590518951, 0.10011887550354004, 0.09879804402589798, 0.09866596013307571, 0.09932637959718704, 0.09893012791872025], "val_loss": [1.9709688595363073, 1.970883778163365, 1.9707543509347099, 1.9706016949244909, 1.9704391615731376, 1.9702792167663574, 1.9701358931405204, 1.9700327600751604, 1.96995632989066, 1.96992370060512, 1.9699822153363908, 1.9700983592442103, 1.9702613013131278, 1.9704126630510603, 1.9704651151384627, 1.9704920904976981, 1.970555101122175, 1.9706666128976005, 1.9708115032741003, 1.970961025782994, 1.9711106845310755, 1.9712460381644112, 1.9713563237871443, 1.9714868409293038, 1.9716195378984724], "val_accuracy": [0.03866666555404663, 0.038333334028720856, 0.04100000113248825, 0.043666668236255646, 0.04399999976158142, 0.04600000008940697, 0.05066666752099991, 0.0533333346247673, 0.055666666477918625, 0.05766666680574417, 0.05966666713356972, 0.06300000101327896, 0.06599999964237213, 0.0676666647195816, 0.07233333587646484, 0.07866666465997696, 0.0846666693687439, 0.08633333444595337, 0.08900000154972076, 0.09233333170413971, 0.09099999815225601, 0.09033333510160446, 0.08799999952316284, 0.08299999684095383, 0.0820000022649765]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 6, 0, 8, 5, 9, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 0, 2, 0, 2, 2, 0, 0, 1, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [92, 82, 17, 17, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [3, 3, 3, 3, 0], [38, 43, 6], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [3, 2, 7, 1, 8, 2, 2, 1], [1, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.06542856991291046, "mapping_values": [1, 8, 8, 7, 1, 1, 3, 3, 1, 2, 0, 10, 7, 5, 2, 0, 2, 1, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)))))))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, alpha), tf.math.add(sigma, grad))), tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, tf.math.sqrt(sigma)))), sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3016725011300796, 2.300928167867906, 2.301218878843403, 2.3022120273848565, 2.30223192656596, 2.302686825184034, 2.303025717811499, 2.303939408787395, 2.306256261972184], "accuracy": [0.09192973375320435, 0.09509972482919693, 0.09219389408826828, 0.09311848133802414, 0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9696331024169922, 1.970524719783238, 1.972348758152553, 1.9733239582606725, 1.9736236844744002, 1.9738516807556152, 1.974290098462786, 1.9753993579319544, 1.9792957305908203], "val_accuracy": [0.06599999964237213, 0.0976666659116745, 0.06700000166893005, 0.10199999809265137, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 6, 0, 2, 5, 9, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 1, 0, 2, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [92, 82, 17, 17, 60, 59, 23, 22, 72, 1], [0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [2, 2, 3, 3, 0], [38, 43, 6], [1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [3, 2, 7, 1, 8, 2, 2, 1], [1, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.035999998450279236, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 2, 3, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.302687582858187, 2.303415849712373, 2.3043047487775112, 2.3024480486464083, 2.301904456049554, 2.303035203413232], "accuracy": [0.09245806187391281, 0.08981640636920929, 0.09047681838274002, 0.09232597798109055, 0.09470347315073013, 0.0874389111995697], "val_loss": [1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056], "val_accuracy": [0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 6, 0, 2, 5, 9, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 1, 0, 2, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [92, 82, 17, 17, 60, 59, 23, 22, 72, 1], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 43, 6], [0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [3, 2, 7, 1, 8, 2, 2, 1], [1, 7, 0, 6], [64, 55], [1, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.0357142873108387, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 2, 3, 1, 5, 2, 2, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, tf.math.add(sigma, sigma)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.302727045431554, 2.3035605428020762, 2.3045686999678594, 2.3027939204731322, 2.3023826178463933, 2.3036223398207865], "accuracy": [0.09232597798109055, 0.08875974267721176, 0.09074098616838455, 0.09192973375320435, 0.0940430611371994, 0.08770307898521423], "val_loss": [1.9710698808942522, 1.9711562565394811, 1.9712495803833008, 1.9713354110717773, 1.971423762185233, 1.9715144974844796], "val_accuracy": [0.036666665226221085, 0.03533333167433739, 0.03433333337306976, 0.033666666597127914, 0.03333333507180214, 0.03233333304524422]}}]