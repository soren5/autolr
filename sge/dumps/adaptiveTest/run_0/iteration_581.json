[{"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [3, 1, 6, 3, 2, 0, 0, 0, 0, 5, 2, 8, 4, 1], [0, 2, 0, 2, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 76, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [2, 4, 0], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.8514285683631897, "mapping_values": [1, 9, 9, 4, 5, 3, 3, 3, 1, 2, 1, 10, 8, 5, 3, 1, 2, 1, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(alpha, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, beta), tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)))), sigma)), tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.044408037300044, 1.0945038628490011, 0.7999874773341683, 0.7183889810671471, 0.6476697480406161, 0.5976673478085713, 0.5601468972990683, 0.5302544461816387, 0.503526484717499, 0.48186201380700827, 0.46623113367220886, 0.44607282719749425, 0.4296386087528073, 0.42335755944157544, 0.4108752551300493, 0.3901868042078599, 0.37629842749518677, 0.3745258661970376, 0.3522032207076607, 0.34636582824469336, 0.33323234131134355, 0.32249967701336524, 0.31855932174892854, 0.31811363480393723, 0.309297956334381, 0.2998461249860019, 0.2901260205043258, 0.27471419047205564, 0.2695761016095083, 0.26505244267717437, 0.25806194995537945, 0.25751346164312755, 0.25289972358730256, 0.2504322423934622], "accuracy": [0.30920618772506714, 0.6085061430931091, 0.7047945857048035, 0.7300224304199219, 0.7537974119186401, 0.7783648371696472, 0.7902522683143616, 0.8021397590637207, 0.8119139075279236, 0.8234050869941711, 0.8300092220306396, 0.8360850811004639, 0.8466516733169556, 0.8421608805656433, 0.8518029451370239, 0.8589354157447815, 0.8595958352088928, 0.8594637513160706, 0.871879518032074, 0.8716153502464294, 0.8780874609947205, 0.8809932470321655, 0.8808611631393433, 0.8792761564254761, 0.8869370222091675, 0.8841632604598999, 0.8910315632820129, 0.8948619961738586, 0.8969752788543701, 0.8989565372467041, 0.900409460067749, 0.9012019634246826, 0.9046360850334167, 0.9062210917472839], "val_loss": [0.9078028883252826, 0.6264928749629429, 0.5640734945024762, 0.5283339875085014, 0.48956925528390066, 0.4597787175859724, 0.4389005388532366, 0.41340069259916035, 0.39667898416519165, 0.37572418791907175, 0.3725255812917437, 0.3572752731187003, 0.35761537722178866, 0.33935483012880596, 0.3339002387864249, 0.33899972268513273, 0.3261204787663051, 0.3169369101524353, 0.31960478850773405, 0.3134099670818874, 0.30805366379874094, 0.3053903409412929, 0.3067762425967625, 0.3199112755911691, 0.30372473171779085, 0.298143880707877, 0.29663894857679096, 0.2905997037887573, 0.2914994273866926, 0.2971166798046657, 0.30147545678274973, 0.2859774317060198, 0.29078497205461773, 0.28826126882008146], "val_accuracy": [0.6306666731834412, 0.7319999933242798, 0.7406666874885559, 0.7630000114440918, 0.7786666750907898, 0.7839999794960022, 0.7923333048820496, 0.8116666674613953, 0.8199999928474426, 0.8353333473205566, 0.8353333473205566, 0.8463333249092102, 0.8393333554267883, 0.847000002861023, 0.8543333411216736, 0.843999981880188, 0.856333315372467, 0.8610000014305115, 0.8569999933242798, 0.8600000143051147, 0.8619999885559082, 0.8640000224113464, 0.862333357334137, 0.8553333282470703, 0.8640000224113464, 0.8730000257492065, 0.8723333477973938, 0.8766666650772095, 0.8793333172798157, 0.8669999837875366, 0.8679999709129333, 0.875333309173584, 0.8756666779518127, 0.875]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [4, 3, 0, 2, 4, 1, 2, 0, 5, 0, 2, 8, 4, 1], [0, 2, 0, 2, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 35, 76, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.8485714197158813, "mapping_values": [1, 17, 17, 10, 7, 3, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(grad, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)))))), tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.square(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.negative(grad))), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.0444065959871467, 1.0947331508483553, 0.7997627671305624, 0.7190051882604898, 0.6490409460758663, 0.5987334175510429, 0.562443093549873, 0.5309321627861253, 0.5027929617271857, 0.4825459272791256, 0.4667676891341831, 0.44840306088893234, 0.4344796200414863, 0.42699434214878423, 0.4125156270286206, 0.3914368412380032, 0.3754232058459269, 0.37649027402327595, 0.35934924024396236, 0.3507279123155873, 0.33601846619840187, 0.3297522419660382, 0.31597774706779924, 0.31840139740037093, 0.31502925913095503, 0.30743651197744226, 0.2948721906315649, 0.2786643888735894, 0.273191778568654, 0.26301219868283654, 0.25717217179258595, 0.2637866456762769, 0.2521663630926661, 0.2504329379121972, 0.24275599051035154, 0.2381936529462584, 0.22997442317511255, 0.22027837800477332, 0.21611818813723407, 0.20373942076238769, 0.19759821077151116, 0.19982991992773838, 0.19730444503238315], "accuracy": [0.30920618772506714, 0.6085061430931091, 0.7037379741668701, 0.7290979027748108, 0.7544577717781067, 0.7795535326004028, 0.7893276810646057, 0.8045172095298767, 0.8109893202781677, 0.8239334225654602, 0.828820526599884, 0.834632158279419, 0.8428213000297546, 0.8400475382804871, 0.8518029451370239, 0.8617091774940491, 0.8613129258155823, 0.8570862412452698, 0.8698983192443848, 0.8692378997802734, 0.8728041052818298, 0.8784837126731873, 0.8829745054244995, 0.8820499181747437, 0.883238673210144, 0.882710337638855, 0.8883898854255676, 0.8943336606025696, 0.8927486538887024, 0.8996169567108154, 0.9031832218170166, 0.9019944667816162, 0.9043719172477722, 0.9046360850334167, 0.9054285883903503, 0.9054285883903503, 0.9121648669242859, 0.9141460657119751, 0.9181085824966431, 0.9243164658546448, 0.9249768853187561, 0.9257693886756897, 0.9270902276039124], "val_loss": [0.9077592236655099, 0.6260907309395927, 0.5632986511502948, 0.5285729851041522, 0.4919800247464861, 0.45962837764195036, 0.43708917072841097, 0.41514516728264944, 0.39968763078962055, 0.377240036215101, 0.37447209869112286, 0.3575990455491202, 0.3579234225409372, 0.3429215465273176, 0.33230396679469515, 0.3389427832194737, 0.3281903437205723, 0.3193011113575527, 0.32405742577144075, 0.31425500767571585, 0.3117972356932504, 0.30645449672426495, 0.3050545709473746, 0.3156430040087019, 0.3103116239820208, 0.2998217855181013, 0.29295053652354647, 0.2943674070494516, 0.2928756816046579, 0.2994105475289481, 0.2976114409310477, 0.2848225491387503, 0.2905837723187038, 0.28583593879427227, 0.28978264331817627, 0.2968178391456604, 0.28868794441223145, 0.2957188827650888, 0.2800817830221994, 0.29727792739868164, 0.290476850100926, 0.2896254232951573, 0.30250485454286846], "val_accuracy": [0.6309999823570251, 0.7300000190734863, 0.7419999837875366, 0.7646666765213013, 0.7743333578109741, 0.7823333144187927, 0.7950000166893005, 0.812333345413208, 0.8190000057220459, 0.8349999785423279, 0.8360000252723694, 0.8496666550636292, 0.8410000205039978, 0.8483333587646484, 0.8550000190734863, 0.8443333506584167, 0.8513333201408386, 0.8569999933242798, 0.8483333587646484, 0.8606666922569275, 0.859666645526886, 0.8636666536331177, 0.8583333492279053, 0.856333315372467, 0.8610000014305115, 0.8653333187103271, 0.8723333477973938, 0.8690000176429749, 0.8733333349227905, 0.8696666955947876, 0.8723333477973938, 0.8786666393280029, 0.8803333044052124, 0.8796666860580444, 0.8763333559036255, 0.8713333606719971, 0.878333330154419, 0.8833333253860474, 0.8830000162124634, 0.8769999742507935, 0.8823333382606506, 0.8813333511352539, 0.8740000128746033]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [0, 3, 0, 2, 4, 1, 1, 0, 5, 9, 2, 8, 4, 1], [2, 2, 1, 0, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 35, 76, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [1, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.8471428751945496, "mapping_values": [1, 9, 9, 5, 4, 1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.negative(grad), tf.math.add(alpha, tf.math.add(tf.math.pow(grad, alpha), tf.math.add(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.0444079180907546, 1.0945891491284445, 0.7995591952091887, 0.7188221745172338, 0.6475579788451497, 0.5983365688499065, 0.5594801262991382, 0.5302959276369896, 0.5041456863848981, 0.4806384908020882, 0.4632914435468282, 0.4388666465541926, 0.42744587048280036, 0.4177690930315186, 0.4079837099656516, 0.38927391934719197, 0.37480700226224345, 0.3693445259357062, 0.3534630555415969, 0.34827119008094376, 0.3398111018490845, 0.3253023846589374, 0.3170097854592151, 0.3193445311813244, 0.3152645428962302, 0.30747870143378464, 0.29944349017834165, 0.2818796700214776, 0.27477217229554807, 0.2633941025919587, 0.25671255098649176, 0.2541872161907873, 0.2524009982096662, 0.2526772140023762, 0.23940208057300086, 0.23841289547275102, 0.22884957341588233, 0.2219835174373427, 0.21552133665478793, 0.20257434398113006, 0.20558909309963744, 0.2026151358203456, 0.20054497363041138], "accuracy": [0.3090741038322449, 0.6079778075218201, 0.7040021419525146, 0.7305507659912109, 0.7537974119186401, 0.7770439982414246, 0.7922335267066956, 0.805177628993988, 0.8096684813499451, 0.8211596608161926, 0.8323867321014404, 0.8387266993522644, 0.8466516733169556, 0.8470479249954224, 0.8495575189590454, 0.8622375130653381, 0.8610487580299377, 0.8607845902442932, 0.8708229064941406, 0.8710870146751404, 0.8708229064941406, 0.8776912093162537, 0.8821820020675659, 0.8840311765670776, 0.8849557638168335, 0.8838990926742554, 0.886672854423523, 0.8961827754974365, 0.8947299122810364, 0.8988244533538818, 0.8994848728179932, 0.901862382888794, 0.9027869701385498, 0.9031832218170166, 0.9054285883903503, 0.9070135951042175, 0.9142781496047974, 0.9126931428909302, 0.9203540086746216, 0.9232597947120667, 0.9235239624977112, 0.9232597947120667, 0.9262977242469788], "val_loss": [0.9077597005026681, 0.6257522446768624, 0.562989490372794, 0.527630124773298, 0.49062507493155344, 0.4573316403797695, 0.4387005397251674, 0.4149278998374939, 0.3982416646821158, 0.37539113419396536, 0.36819192341395784, 0.35726782253810335, 0.3487809215273176, 0.3391567213194711, 0.3340279459953308, 0.341852068901062, 0.3195614814758301, 0.31772335938044954, 0.3201999068260193, 0.31814639057431904, 0.3092253633907863, 0.30147613797869, 0.3076039808137076, 0.3170374206134251, 0.30579339606421335, 0.2996287090437753, 0.29307221514838083, 0.2912067004612514, 0.29330265522003174, 0.29811414650508333, 0.2883372902870178, 0.2856209874153137, 0.29041969776153564, 0.2881371889795576, 0.290982186794281, 0.29173846755708965, 0.28935758556638447, 0.28839780603136334, 0.2775167226791382, 0.29453357628413607, 0.28611143997737337, 0.29240159477506367, 0.295250483921596], "val_accuracy": [0.6309999823570251, 0.7303333282470703, 0.7416666746139526, 0.7643333077430725, 0.7776666879653931, 0.7839999794960022, 0.7953333258628845, 0.8106666803359985, 0.8209999799728394, 0.8353333473205566, 0.8403333425521851, 0.8429999947547913, 0.8473333120346069, 0.8446666598320007, 0.8500000238418579, 0.843999981880188, 0.8569999933242798, 0.859333336353302, 0.8533333539962769, 0.8606666922569275, 0.8610000014305115, 0.8666666746139526, 0.8613333106040955, 0.859333336353302, 0.8669999837875366, 0.8679999709129333, 0.8693333268165588, 0.871666669845581, 0.878000020980835, 0.8740000128746033, 0.8790000081062317, 0.8756666779518127, 0.8799999952316284, 0.8809999823570251, 0.878333330154419, 0.8769999742507935, 0.8793333172798157, 0.8866666555404663, 0.8786666393280029, 0.878000020980835, 0.8793333172798157, 0.8790000081062317, 0.874666690826416]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [2, 3, 0, 2, 4, 1, 2, 0, 5, 0, 2, 8, 4, 2, 4, 2, 9, 8, 2, 3, 7, 9, 9, 2, 7, 5, 2, 0, 9, 7, 1], [0, 2, 0, 2, 0, 2, 2, 2, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 35, 76, 57, 60, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.8454285860061646, "mapping_values": [1, 47, 47, 31, 16, 9, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.negative(grad)))), tf.math.add(alpha, tf.math.add(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))))), tf.math.sqrt(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(alpha)), tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.negative(tf.math.add(alpha, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad))), tf.math.add(tf.math.add(alpha, tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, grad)))))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.045371534786267, 1.095336747041956, 0.7965086110752052, 0.7157166403172244, 0.649374381032492, 0.5975663689353982, 0.5605831010946902, 0.5313231674136266, 0.5014440631428729, 0.4838511748021667, 0.4634477686825335, 0.4401969442341101, 0.42503515989662966, 0.4127438158769145, 0.3995979828384842, 0.3876574078350649, 0.3756196492926918, 0.3708176795462607, 0.3519670415973273, 0.3396511953370824, 0.3314609170951989, 0.32352050184699693, 0.3092050906091145, 0.3083768292795067, 0.308575410014524, 0.2971809087546274, 0.29668904982852645, 0.2839260118047968, 0.2726394521514611, 0.2616821566096953, 0.25384574856551534, 0.2570286496652982, 0.24581113046721823, 0.2439536738113846, 0.2320635705524983, 0.22087846710154124, 0.22077091642461197, 0.21328412262070148, 0.20485013609415254, 0.19820862490274901, 0.19365054880701996, 0.18938479645062337, 0.18489434452081133, 0.1857487494269886, 0.17627512068717613, 0.1756219529752104, 0.1663717745931598, 0.1644346666291185, 0.15986747971819912, 0.16943092006127658], "accuracy": [0.30880993604660034, 0.6073173880577087, 0.7030775547027588, 0.7294940948486328, 0.7540615797042847, 0.7758552432060242, 0.7895918488502502, 0.8041210174560547, 0.8127063512802124, 0.8207634687423706, 0.8333113193511963, 0.842028796672821, 0.8499537706375122, 0.8479725122451782, 0.8539162874221802, 0.8598600029945374, 0.8603883385658264, 0.8627657890319824, 0.8721436858177185, 0.8765024542808533, 0.8768987059593201, 0.8790120482444763, 0.8821820020675659, 0.8858803510665894, 0.8857482671737671, 0.8874653577804565, 0.8873332738876343, 0.8918240666389465, 0.8952582478523254, 0.8977677822113037, 0.9017302989959717, 0.9001452922821045, 0.9055606722831726, 0.9082023501396179, 0.9066173434257507, 0.9171839952468872, 0.9152027368545532, 0.9194294214248657, 0.9214106202125549, 0.9265618920326233, 0.9277506470680237, 0.9297318458557129, 0.9286752343177795, 0.9229956269264221, 0.9314489364624023, 0.934751033782959, 0.9362039566040039, 0.9355435371398926, 0.9392418265342712, 0.9317131042480469], "val_loss": [0.9122928891863141, 0.6234398399080548, 0.5641916479383197, 0.525836638041905, 0.4883976663861956, 0.4552523578916277, 0.43691310712269377, 0.4167964288166591, 0.4004019413675581, 0.3785544293267386, 0.3678011042731149, 0.35322695119040354, 0.3484814933368138, 0.3368191804204668, 0.3316098281315395, 0.3343317082950047, 0.3271249106952122, 0.3193862097603934, 0.3164989011628287, 0.3138248750141689, 0.3029357280050005, 0.30152489457811626, 0.3033341424805777, 0.3190955775124686, 0.30181011983326506, 0.2989297934940883, 0.3013972214290074, 0.2935345002583095, 0.28892885787146433, 0.29321261814662386, 0.2961195281573704, 0.2877224939210074, 0.28295853308268953, 0.2905485715184893, 0.29389653887067524, 0.30032975333077566, 0.2917774404798235, 0.29534893376486643, 0.281342659677778, 0.2996812377657209, 0.2885675089699881, 0.29222664662769865, 0.2903944509369986, 0.3137741429465158, 0.29330127579825266, 0.3004436833517892, 0.3026369554655893, 0.3296044724328177, 0.31696854318891254, 0.31082938398633686], "val_accuracy": [0.6296666860580444, 0.7226666808128357, 0.7323333621025085, 0.7603333592414856, 0.7726666927337646, 0.7856666445732117, 0.7956666946411133, 0.8103333115577698, 0.8180000185966492, 0.8353333473205566, 0.8376666903495789, 0.847000002861023, 0.8473333120346069, 0.8453333377838135, 0.8519999980926514, 0.8493333458900452, 0.8519999980926514, 0.8553333282470703, 0.8546666502952576, 0.862333357334137, 0.8646666407585144, 0.8663333058357239, 0.8633333444595337, 0.8536666631698608, 0.8669999837875366, 0.8703333139419556, 0.8709999918937683, 0.8743333220481873, 0.878000020980835, 0.8740000128746033, 0.8686666488647461, 0.875, 0.8809999823570251, 0.8799999952316284, 0.8773333430290222, 0.8756666779518127, 0.8776666522026062, 0.8840000033378601, 0.8840000033378601, 0.8769999742507935, 0.8773333430290222, 0.8846666812896729, 0.8849999904632568, 0.878000020980835, 0.8870000243186951, 0.8859999775886536, 0.8836666941642761, 0.8763333559036255, 0.8740000128746033, 0.8826666474342346]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1], [5, 7, 0, 2, 4, 1, 0, 0, 3, 5, 2, 8, 4, 1], [2, 2, 1, 0, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 35, 76, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [1, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.8391428589820862, "mapping_values": [1, 9, 9, 5, 4, 1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.0444068725571074, 1.0947436090898772, 0.7996499518739738, 0.7194646715157382, 0.6485290342333956, 0.5981255668564684, 0.5609690516167597, 0.5302170058440507, 0.5037753631126738, 0.4803817652597907, 0.4663767361047324, 0.4446965513952404, 0.429390377254219, 0.42314357696003396, 0.40998905151984033, 0.39335450291114005, 0.37520958535376164, 0.3738121403568945, 0.35215197038089974, 0.34761672076406164, 0.3322947644412699, 0.3243470589411714, 0.31624382680763957, 0.32089094946161156, 0.31444389419218083, 0.3019819343212872, 0.29066417965087843, 0.2756495912805477, 0.27394486393564493, 0.26375702242565635, 0.25151858019901224, 0.2578715444193729], "accuracy": [0.30920618772506714, 0.6085061430931091, 0.7041342258453369, 0.7300224304199219, 0.7536653280258179, 0.7792893648147583, 0.7923656105995178, 0.8012151718139648, 0.8119139075279236, 0.8227446675300598, 0.828820526599884, 0.837537944316864, 0.8473120927810669, 0.8436138033866882, 0.8514066934585571, 0.8602562546730042, 0.8625016212463379, 0.8602562546730042, 0.8696341514587402, 0.8754457831382751, 0.8770307898521423, 0.8802007436752319, 0.8819178342819214, 0.8817857503890991, 0.8817857503890991, 0.8850878477096558, 0.8918240666389465, 0.8967111110687256, 0.8953903317451477, 0.8994848728179932, 0.9029190540313721, 0.9019944667816162], "val_loss": [0.9077628680637905, 0.6260549851826259, 0.5632295267922538, 0.527672256742205, 0.4921127217156546, 0.4594318355832781, 0.4373820424079895, 0.41563111543655396, 0.39786807128361296, 0.376526483467647, 0.3697670442717416, 0.3593455467905317, 0.3545510768890381, 0.3396153620311192, 0.33627424921308247, 0.3414073075566973, 0.327536370073046, 0.314797111919948, 0.32006492785045076, 0.3062919037682669, 0.30939626693725586, 0.3058361496244158, 0.30361390113830566, 0.3234695451600211, 0.30198767355510164, 0.29392837626593454, 0.29242558990206036, 0.2924215112413679, 0.29632216691970825, 0.29217452662331717, 0.29740060227257864, 0.2855097396033151], "val_accuracy": [0.6309999823570251, 0.7303333282470703, 0.7413333058357239, 0.7636666893959045, 0.7760000228881836, 0.7829999923706055, 0.7956666946411133, 0.8116666674613953, 0.8203333616256714, 0.8356666564941406, 0.8370000123977661, 0.8463333249092102, 0.8410000205039978, 0.8433333039283752, 0.8523333072662354, 0.8476666808128357, 0.8539999723434448, 0.8613333106040955, 0.856333315372467, 0.8613333106040955, 0.8579999804496765, 0.8619999885559082, 0.8656666874885559, 0.8516666889190674, 0.8666666746139526, 0.8726666569709778, 0.8766666650772095, 0.8723333477973938, 0.8763333559036255, 0.8733333349227905, 0.8743333220481873, 0.875333309173584]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1], [5, 7, 9, 2, 4, 1, 0, 0, 3, 5, 2, 8, 4, 1], [2, 2, 1, 0, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 82, 76, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [42, 84, 6], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [1, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.8308571577072144, "mapping_values": [1, 4, 4, 3, 1, 1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(grad, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.9081070964614462, 1.188727788079007, 0.7852813139048077, 0.6852346598401345, 0.6135379087025888, 0.5737245230784332, 0.5384829192034966, 0.5062164799561826, 0.4752418173223895, 0.46518761090409755, 0.4454857808306642, 0.42378571474430915, 0.4249311914108275, 0.4156862221743846, 0.3866958339665276, 0.3773372247234516, 0.36431856267031204, 0.3599368304608599, 0.34377146599755987, 0.3415522970118464, 0.3270640635471523, 0.3284877082179204], "accuracy": [0.3595297932624817, 0.6048077940940857, 0.709021270275116, 0.7413815855979919, 0.774270236492157, 0.7849689722061157, 0.8012151718139648, 0.8175934553146362, 0.8290846943855286, 0.833179235458374, 0.8367455005645752, 0.8459912538528442, 0.8445383906364441, 0.8454629778862, 0.8581429123878479, 0.8613129258155823, 0.8648791313171387, 0.8665962219238281, 0.8691058158874512, 0.8761062026023865, 0.8812574148178101, 0.8757099509239197], "val_loss": [1.140946899141584, 0.6542370319366455, 0.5590955189296177, 0.5068824461528233, 0.4645742518561227, 0.4488197224480765, 0.4203727756227766, 0.39304734979357037, 0.3836219991956438, 0.3651492851121085, 0.37277861152376446, 0.36655603987830027, 0.3490892563547407, 0.3342702899660383, 0.3330604774611337, 0.3321513703891209, 0.3159985201699393, 0.31788805552891325, 0.32229627881731304, 0.33848297595977783, 0.3143583025251116, 0.3148997255734035], "val_accuracy": [0.5796666741371155, 0.6980000138282776, 0.7390000224113464, 0.7663333415985107, 0.7873333096504211, 0.796999990940094, 0.8076666593551636, 0.82833331823349, 0.8299999833106995, 0.8426666855812073, 0.8349999785423279, 0.8363333344459534, 0.843999981880188, 0.8533333539962769, 0.8550000190734863, 0.8526666760444641, 0.8619999885559082, 0.8613333106040955, 0.8529999852180481, 0.8489999771118164, 0.8600000143051147, 0.8583333492279053]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1], [1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [5, 3, 0, 2, 4, 0, 0, 0, 3, 5, 2, 8, 4, 1, 3, 9, 1, 2, 9], [1, 2, 0, 1, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 82, 76, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [3, 3, 3, 3, 0], [41, 84, 6], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1], [2, 4, 7, 8, 8, 5, 0, 9], [2, 4, 3], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.7351428866386414, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 3, 2, 1, 11, 8, 7, 1, 0, 2, 1, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.square(sigma)))))), sigma)), tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, beta))))), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.9139716525544517, 0.9625607122755825, 0.7520528080330832, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.35345396399497986, 0.6556597352027893, 0.7223616242408752, 0.43785497546195984, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [0.7998252936771938, 0.6038327387401036, 0.5137967893055507, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.6753333210945129, 0.7406666874885559, 0.7616666555404663, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [4, 7, 0, 2, 4, 1, 0, 0, 3, 5, 2, 8, 4, 1], [2, 2, 1, 2, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 82, 76, 57, 60, 59, 23, 22, 72, 1], [1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [3, 3, 3, 3, 0], [38, 84, 6], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.7077142596244812, "mapping_values": [1, 6, 6, 3, 3, 0, 5, 5, 3, 2, 1, 11, 8, 6, 2, 0, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(tf.math.add(alpha, grad), grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)))))), tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.square(tf.math.add(sigma, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.0712881093137945, 1.1065091088054013, 0.8766587457054122, 1.0012385862976758, NaN, NaN, NaN, NaN], "accuracy": [0.3059041202068329, 0.6098269820213318, 0.698190450668335, 0.6719059348106384, 0.16549994051456451, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [0.985649824142456, 0.7084091220583234, 0.5928153480802264, 1.4039794036320277, NaN, NaN, NaN, NaN], "val_accuracy": [0.6453333497047424, 0.7173333168029785, 0.7336666584014893, 0.5106666684150696, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [9, 3, 8, 2, 4, 6, 0, 9, 5, 3, 2, 8, 4, 1], [1, 2, 0, 2, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 82, 76, 57, 60, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [3, 1, 3, 3, 0], [56, 84, 6], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.multiply(grad, tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08717474341392517, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0], [5, 1, 6, 3, 4, 0, 0, 0, 0, 5, 3, 8, 4, 1, 1, 6, 5, 3, 8], [1, 2, 0, 1, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 82, 76, 57, 60, 59, 23, 22, 72, 1], [1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [2, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 29, 29, 18, 11, 2, 5, 5, 3, 2, 2, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.math.add(alpha, alpha)))), tf.math.add(alpha, grad))), tf.math.negative(tf.math.negative(tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(alpha)))))))), tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(alpha)), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, alpha)))))), grad))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.302634187708945, 2.302585989272259, 2.302586003569186, 2.3025859438307044, 2.3025858365092784, 2.302585886422559], "accuracy": [0.09589222073554993, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.97364718573434, 1.97364718573434, 1.973647117614746, 1.973647117614746, 1.973647117614746, 1.973646981375558], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1], [5, 1, 6, 3, 4, 0, 0, 0, 0, 5, 2, 8, 4, 1], [0, 2, 0, 2, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 35, 76, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [8, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 5, 5, 3, 1, 1, 0, 1, 1, 12, 9, 7, 2, 0, 2, 1, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.pow(grad, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.sqrt(sigma)), sigma)))), tf.math.add(sigma, tf.math.square(tf.math.add(sigma, grad))))), tf.math.add(sigma, tf.math.negative(sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1], [0, 3, 0, 8, 4, 1, 0, 0, 3, 5, 2, 6, 4, 1], [2, 0, 1, 0, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 35, 76, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 5, 3, 1, 5, 5, 3, 2, 2, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(grad, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), alpha))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3026359151493305, 2.302586341373452, 2.3025863278008187, 2.3025863667237303, 2.3025863450264117, 2.3025862566940756], "accuracy": [0.09589222073554993, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9736480031694685, 1.9736480031694685, 1.9736480031694685, 1.9736480031694685, 1.9736480031694685, 1.9736480031694685], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1], [5, 1, 6, 3, 4, 0, 0, 0, 0, 5, 2, 8, 4, 1], [1, 2, 0, 1, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [49, 82, 76, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [2, 4, 6], [64, 55], [0, 1, 0, 1, 1], [9, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 3, 3, 1, 3, 3, 1, 2, 1, 11, 8, 6, 2, 0, 1, 1, 0, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, tf.math.add(tf.math.add(sigma, beta), tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)))))), tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.square(tf.math.add(sigma, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3018529450400567, 2.3025851744418886, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1], [5, 6, 6, 3, 4, 0, 0, 0, 0, 5, 2, 8, 4, 1], [1, 2, 0, 2, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 20, 76, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [0, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [0, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 4, 4, 1, 2, 2, 1, 1, 1, 1, 1, 0, 1, 1, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)), tf.math.multiply(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [14290862534.743837, 2.888839187602328e+17, 9.203347649015844e+24, NaN, NaN, NaN], "accuracy": [0.09642054885625839, 0.10117553919553757, 0.10236428678035736, 0.09972262382507324, 0.09998679161071777, 0.09998679161071777], "val_loss": [816779324854.8572, 1.450194044483063e+19, 2.140752028451623e+26, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1], [0, 3, 0, 2, 4, 1, 0, 0, 5, 0, 1, 8, 4, 1], [1, 2, 0, 0, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 2, 76, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 2, 3, 3, 0], [38, 84, 6], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 5, 4, 2, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(grad, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, grad: tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3026212316698733, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [0, 3, 0, 2, 4, 1, 0, 0, 5, 0, 2, 8, 4, 1], [1, 2, 0, 2, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 35, 76, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 11, 6, 2, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.subtract(alpha, grad), tf.math.add(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))), tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.square(tf.math.negative(grad))))))), tf.math.add(alpha, tf.math.add(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3026212316698733, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1], [5, 4, 6, 3, 4, 0, 0, 0, 0, 5, 2, 8, 4, 1], [1, 2, 2, 1, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 35, 76, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [75, 84, 6], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [2, 4, 6], [64, 55], [0, 0, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 5, 5, 3, 2, 2, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.square(beta), tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10949676483869553, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1], [0, 0, 0, 8, 4, 1, 0, 0, 3, 5, 2, 6, 4, 1], [2, 2, 1, 0, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 35, 76, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [3, 3, 3, 3, 0], [45, 84, 6], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [1, 4, 6], [64, 55], [0, 1, 0, 1, 1], [1, 7, 5, 2, 9, 3, 9], [1, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 0, 5, 5, 3, 2, 1, 1, 1, 0, 1, 0, 5, 2, 3, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.negative(grad)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(alpha, tf.math.add(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [4.459082790380658e+31, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07951393723487854, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [4, 3, 0, 2, 6, 1, 5, 0, 5, 0, 2, 8, 4, 1], [0, 2, 0, 2, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 35, 76, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [95, 84, 6], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 16, 10, 6, 3, 3, 3, 1, 2, 1, 12, 10, 7, 3, 0, 2, 1, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)))))), tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.square(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.negative(grad))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.sqrt(sigma)), sigma)))), tf.math.add(sigma, tf.math.square(tf.math.add(sigma, grad))))), tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [3.528762121494058, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.19191652536392212, 0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9837901932852608, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [0, 3, 1, 2, 4, 1, 0, 0, 5, 0, 2, 8, 4, 1], [0, 2, 2, 2, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 35, 76, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 0], [4, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [0, 0, 2], [6, 32, 85]], "fitness": -0.09828571230173111, "mapping_values": [1, 16, 16, 10, 6, 2, 5, 5, 3, 2, 2, 1, 1, 0, 1, 0, 2, 1, 1, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(grad, grad)), tf.math.add(alpha, grad))), tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.math.square(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.negative(grad)))))))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3663554012405403, 3.029288105630226, 4.911253464519545, 8.04188223934413, 12.277930379874356, 17.954307332692004], "accuracy": [0.0940430611371994, 0.10038304328918457, 0.10513802617788315, 0.10157178342342377, 0.09998679161071777, 0.09840179979801178], "val_loss": [2.0900934764317105, 2.7702065195356096, 4.2821036747523715, 6.584317479814802, 9.648905072893415, 13.518445696149554], "val_accuracy": [0.10066666454076767, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}]