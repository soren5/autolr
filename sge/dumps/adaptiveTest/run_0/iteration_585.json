[{"genotype": [[0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [3, 1, 6, 3, 2, 0, 0, 0, 0, 5, 2, 8, 4, 1], [0, 2, 0, 1, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 13, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [2, 4, 0], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.8482857346534729, "mapping_values": [1, 3, 3, 1, 2, 1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.0390906742204526, 1.0853504198196777, 0.7738492777948729, 0.691723576996226, 0.6356233533000933, 0.5960386545351704, 0.5603949878398753, 0.5318457722081296, 0.49926350407549386, 0.4830817776254738, 0.4588979812401192, 0.4490331361251595, 0.42945113711983157, 0.420812611932752, 0.4037089565403001, 0.38102761503019195, 0.3758230045557872, 0.3669885963402278, 0.34270786025489186, 0.3476004160240956, 0.3366643111420156, 0.3282737593530522, 0.3246258920674405, 0.31328110286052974, 0.3032995070039384, 0.29323876390619646], "accuracy": [0.3073570132255554, 0.6153744459152222, 0.7136441469192505, 0.7499669790267944, 0.7643640041351318, 0.7823272943496704, 0.7922335267066956, 0.7988376617431641, 0.81112140417099, 0.8255184292793274, 0.8334434032440186, 0.837537944316864, 0.8401796221733093, 0.8432175517082214, 0.8499537706375122, 0.8594637513160706, 0.8607845902442932, 0.8631620407104492, 0.8728041052818298, 0.8706908226013184, 0.8757099509239197, 0.8758420348167419, 0.8775591254234314, 0.885219931602478, 0.886672854423523, 0.8931449055671692], "val_loss": [0.9550027506692069, 0.6173955712999616, 0.5616923230034965, 0.5158087696347918, 0.49386254378727507, 0.4612384183066232, 0.4296864782060896, 0.41437162671770367, 0.3964820844786508, 0.3834886976650783, 0.36908855608531405, 0.36919995716639925, 0.3517388701438904, 0.3418660419327872, 0.3346278326851981, 0.34199040276663645, 0.3254497902733939, 0.3194860134805952, 0.31982759066990446, 0.31315278155463083, 0.3115250383104597, 0.3034603340285165, 0.30631778069904875, 0.30157223769596647, 0.30028858355113436, 0.3075345584324428], "val_accuracy": [0.6209999918937683, 0.7350000143051147, 0.7463333606719971, 0.7756666541099548, 0.7796666622161865, 0.7929999828338623, 0.8066666722297668, 0.809333324432373, 0.8213333487510681, 0.8326666951179504, 0.8433333039283752, 0.8376666903495789, 0.843666672706604, 0.8516666889190674, 0.8533333539962769, 0.8513333201408386, 0.8600000143051147, 0.8640000224113464, 0.859000027179718, 0.8696666955947876, 0.8700000047683716, 0.8653333187103271, 0.8653333187103271, 0.8669999837875366, 0.8690000176429749, 0.8690000176429749]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [3, 1, 6, 3, 2, 0, 0, 0, 0, 5, 2, 8, 4, 1], [0, 2, 0, 2, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 76, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [2, 4, 0], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.843999981880188, "mapping_values": [1, 9, 9, 4, 5, 3, 3, 3, 1, 2, 1, 10, 8, 5, 3, 1, 2, 1, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(alpha, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, beta), tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)))), sigma)), tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.0390908720628413, 1.0853847245089272, 0.7736525959846382, 0.691355084919454, 0.6341952450397291, 0.5955518004979597, 0.5598637649270096, 0.5313711755027892, 0.49815291099387105, 0.4807010958530427, 0.46229152307613036, 0.448423633663142, 0.4294237476361347, 0.42193839273999445, 0.4060019324712624, 0.38304723159370324, 0.37686021867098823, 0.3673269193697725, 0.34238767239710816, 0.349507726883419, 0.33983832413510023, 0.32656601491369325, 0.32314351318361517, 0.31407704640766887, 0.3046975325221761, 0.2923736022235443], "accuracy": [0.3073570132255554, 0.6153744459152222, 0.7147008180618286, 0.7474573850631714, 0.7655527591705322, 0.7790252566337585, 0.7940827012062073, 0.7971205711364746, 0.8123101592063904, 0.8257825970649719, 0.8321225643157959, 0.8364813327789307, 0.8396512866020203, 0.8457271456718445, 0.8519350290298462, 0.8598600029945374, 0.8590674996376038, 0.86553955078125, 0.8728041052818298, 0.8698983192443848, 0.8725399374961853, 0.8799365758895874, 0.8829745054244995, 0.882710337638855, 0.8842953443527222, 0.8911636471748352], "val_loss": [0.9550042833600726, 0.6176343645368304, 0.5614971773965018, 0.5150983163288662, 0.493427004132952, 0.4601261786052159, 0.43098654065813335, 0.41609466075897217, 0.3962817021778652, 0.3851859654699053, 0.3680746214730399, 0.37164992094039917, 0.35274135214941843, 0.33908452306474957, 0.3322062151772635, 0.34307502848761423, 0.3267081890787397, 0.32012743609292166, 0.3178191525595529, 0.3144225478172302, 0.3090187651770456, 0.30323590551103863, 0.30611634254455566, 0.30234531845365253, 0.2975699390683855, 0.3077602131026132], "val_accuracy": [0.6209999918937683, 0.7336666584014893, 0.7463333606719971, 0.7760000228881836, 0.7773333191871643, 0.8006666898727417, 0.8059999942779541, 0.8106666803359985, 0.8220000267028809, 0.8270000219345093, 0.8383333086967468, 0.8360000252723694, 0.8446666598320007, 0.8513333201408386, 0.8536666631698608, 0.8513333201408386, 0.8586666584014893, 0.8613333106040955, 0.8653333187103271, 0.8659999966621399, 0.8683333396911621, 0.8650000095367432, 0.8673333525657654, 0.8656666874885559, 0.8666666746139526, 0.8673333525657654]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [6, 3, 7, 9, 4, 1, 2, 0, 5, 0, 2, 8, 4, 1], [0, 2, 0, 2, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 76, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [2, 4, 0], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.8325714468955994, "mapping_values": [1, 19, 19, 12, 7, 4, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.pow(grad, tf.math.subtract(tf.math.add(alpha, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.square(tf.math.add(alpha, tf.math.negative(grad))))), tf.math.add(alpha, tf.math.add(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))))))), tf.math.sqrt(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.039090325583273, 1.0857112964839353, 0.7740474346370241, 0.6922414517909654, 0.6357878468307789, 0.5957712705943721, 0.5569362444034295, 0.5280868715976035, 0.49914002144546116, 0.4815745443763073, 0.4579098430630585, 0.44629961786772737, 0.4300166784520351, 0.42133529825752847, 0.40622081903103807, 0.38652951229108307, 0.3780320173698, 0.36602437668598686, 0.34396179949586986, 0.3463795821247257, 0.3374500733521857, 0.32587601217091783, 0.3196743205593184, 0.3114636406103665, 0.2965271307366824, 0.2915804610591224, 0.2868439863622779, 0.2877548069348346, 0.27899110203468885, 0.2679316261779552, 0.25806142427760376, 0.25109589627555584, 0.2456906001782137, 0.242336717980523, 0.23584398121850175, 0.2204792747593134, 0.2256413259664153, 0.23192320460963636, 0.21659756185844384, 0.20999069978154455, 0.20462926306650228, 0.20259849284901643, 0.19505106384854007, 0.1901370407867079, 0.18966957056023237, 0.18638111509627764, 0.18552130155472976, 0.17087410292164398, 0.16762766142043267, 0.17035935270024202, 0.15988740730224238, 0.16541720077291125, 0.16432793958627032, 0.16492917811936705, 0.1563543026134905, 0.14976392315166534], "accuracy": [0.3073570132255554, 0.6151102781295776, 0.713908314704895, 0.7491744756698608, 0.7621186375617981, 0.7786290049552917, 0.7938185334205627, 0.8001585006713867, 0.8129705190658569, 0.8265751004219055, 0.835160493850708, 0.8380662798881531, 0.8407079577445984, 0.8479725122451782, 0.852859616279602, 0.8607845902442932, 0.8609166741371155, 0.8644828796386719, 0.8729361891746521, 0.8705587387084961, 0.8735966086387634, 0.8775591254234314, 0.8841632604598999, 0.8864086866378784, 0.8897107243537903, 0.8920882344245911, 0.8947299122810364, 0.8912957310676575, 0.8943336606025696, 0.8988244533538818, 0.9037115573883057, 0.9072777628898621, 0.9115044474601746, 0.9100515246391296, 0.9115044474601746, 0.9142781496047974, 0.9146744012832642, 0.9121648669242859, 0.9177123308181763, 0.920089840888977, 0.9214106202125549, 0.9227314591407776, 0.9229956269264221, 0.9288073182106018, 0.9294676780700684, 0.9261656403541565, 0.9294676780700684, 0.9343547821044922, 0.9358077049255371, 0.9355435371398926, 0.9385814070701599, 0.9364681243896484, 0.9360718727111816, 0.9380530714988708, 0.939109742641449, 0.9400343298912048], "val_loss": [0.9549938270023891, 0.6183977808271136, 0.5604687077658517, 0.5160347393580845, 0.49441960879734587, 0.46459623745509554, 0.4279508079801287, 0.4134545155933925, 0.3972655364445278, 0.3845264571053641, 0.3679222805159433, 0.3670138120651245, 0.3500281146594456, 0.3446815695081438, 0.3381182295935495, 0.33736651284354074, 0.3243591274533953, 0.3226226142474583, 0.31568507637296406, 0.3137439063617161, 0.3092900940350124, 0.30532537187848774, 0.3104070595332554, 0.3019964354378836, 0.2968741144452776, 0.31141488892691477, 0.31061236347470966, 0.2911791886602129, 0.2974203143801008, 0.29625937768391203, 0.29236564465931486, 0.29304884161267963, 0.28804621526173185, 0.2913511395454407, 0.2894653081893921, 0.30346291405814035, 0.29904408965791973, 0.3131386297089713, 0.2931111880711147, 0.2930385725838797, 0.3033038377761841, 0.3024111475263323, 0.2987056204250881, 0.302889347076416, 0.29464456864765715, 0.31583088636398315, 0.31408912794930594, 0.31050524541309904, 0.3113798839705331, 0.3086655480521066, 0.31381911039352417, 0.3321032864706857, 0.3133161323411124, 0.3185908453805106, 0.3073820812361581, 0.3187154105731419], "val_accuracy": [0.6209999918937683, 0.734000027179718, 0.7459999918937683, 0.7730000019073486, 0.7756666541099548, 0.7906666398048401, 0.8103333115577698, 0.8130000233650208, 0.824999988079071, 0.8346666693687439, 0.8413333296775818, 0.8373333215713501, 0.8453333377838135, 0.8503333330154419, 0.8539999723434448, 0.8500000238418579, 0.8573333621025085, 0.8640000224113464, 0.8633333444595337, 0.8646666407585144, 0.8673333525657654, 0.8646666407585144, 0.8683333396911621, 0.8676666617393494, 0.8683333396911621, 0.8629999756813049, 0.8640000224113464, 0.8733333349227905, 0.871999979019165, 0.8726666569709778, 0.875, 0.875333309173584, 0.8743333220481873, 0.875, 0.8756666779518127, 0.8706666827201843, 0.8740000128746033, 0.8683333396911621, 0.8799999952316284, 0.8813333511352539, 0.8823333382606506, 0.8820000290870667, 0.8799999952316284, 0.8826666474342346, 0.8790000081062317, 0.878333330154419, 0.8833333253860474, 0.8833333253860474, 0.887666642665863, 0.8776666522026062, 0.8889999985694885, 0.8759999871253967, 0.8826666474342346, 0.8883333206176758, 0.8826666474342346, 0.8840000033378601]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [3, 1, 6, 3, 2, 0, 0, 0, 0, 5, 2, 8, 4, 1], [0, 2, 3, 2, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 76, 57, 60, 59, 23, 22, 72, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 5, 3, 3, 0], [38, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [2, 4, 0], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.7868571281433105, "mapping_values": [1, 1, 1, 0, 1, 1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.2226181685286837, 1.7208625699361837, 1.2740408158525893, 1.0773105567645687, 0.9569030752145478, 0.9178758782953744, 0.8388039660948206, 0.8250629026514114, 0.7747845586186087, 0.7685800922655426, 0.7435214841024137, 0.720642865743336, 0.6973719662993954, 0.7062568996466225, 0.6788651263000565, 0.6729364200212133, 0.6532592964824228, 0.6309344125713544, 0.6453758013042178, 0.6353929628313115, 0.6287056832438872, 0.6183235312276559, 0.6043368656842181, 0.6061123789907714, 0.6361620174328476, 0.5915526131187936], "accuracy": [0.24844802916049957, 0.4593845009803772, 0.5406154990196228, 0.6124686598777771, 0.651168942451477, 0.6651697158813477, 0.6892088055610657, 0.696209192276001, 0.7156254053115845, 0.713379979133606, 0.7194558382034302, 0.7338528633117676, 0.7417778372764587, 0.7349095344543457, 0.7452120184898376, 0.7477215528488159, 0.7557786107063293, 0.7683265209197998, 0.76106196641922, 0.7621186375617981, 0.763967752456665, 0.7721568942070007, 0.7757231593132019, 0.7701756954193115, 0.7611940503120422, 0.7754589915275574], "val_loss": [1.7017642770494734, 1.0544267041342599, 0.8679381438664028, 0.7149690219334194, 0.6989268405096871, 0.626619781766619, 0.6105013745171683, 0.5726034641265869, 0.5846511806760516, 0.5422789880207607, 0.5535220588956561, 0.5400358438491821, 0.5392593145370483, 0.5354078156607491, 0.49410622460501535, 0.5041356086730957, 0.4890325239726475, 0.4849844830376761, 0.48170951434544157, 0.4865611791610718, 0.4628568376813616, 0.4576337848390852, 0.4612112215587071, 0.45479599067143034, 0.45996834550585064, 0.4611712864467076], "val_accuracy": [0.48533332347869873, 0.5559999942779541, 0.6033333539962769, 0.6773333549499512, 0.6736666560173035, 0.7406666874885559, 0.7266666889190674, 0.7559999823570251, 0.7463333606719971, 0.7540000081062317, 0.7633333206176758, 0.7723333239555359, 0.750333309173584, 0.7546666860580444, 0.7833333611488342, 0.7796666622161865, 0.7733333110809326, 0.7879999876022339, 0.7770000100135803, 0.765999972820282, 0.8029999732971191, 0.7910000085830688, 0.7906666398048401, 0.7943333387374878, 0.7940000295639038, 0.7910000085830688]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [2, 8, 0, 4, 6, 4, 6, 3, 5, 4, 8, 6, 4, 5, 0, 2, 9, 1, 1, 4, 2, 9, 9, 6, 7, 4, 2, 1, 9, 7, 1, 9, 0, 2, 1, 6, 3, 6, 1, 4, 2, 4, 9], [2, 2, 0, 2, 2, 2, 2, 1, 2, 1, 3, 0, 2, 1, 3, 2, 2, 1, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 76, 57, 60, 59, 41, 22, 72, 1, 89, 20, 57, 4], [0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.7834285497665405, "mapping_values": [1, 52, 52, 34, 18, 7, 3, 3, 1, 2, 1, 3, 2, 1, 1, 0, 2, 1, 1, 0], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), tf.math.multiply(tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), grad)), tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))))), tf.math.subtract(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.pow(alpha, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)))))))))))), tf.math.add(alpha, alpha)))), grad)), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))))), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), tf.math.negative(tf.math.add(alpha, grad)))), tf.math.add(alpha, alpha))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))), alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.2156921891393977, 1.662985802263616, 1.215368157758248, 1.0346687737158056, 0.9113449489577509, 0.9252133691992663, 0.8019028340804972, 0.7806349151547968, 0.7554229481219301, 0.7350689064021974, 0.728419357491774, 0.7000723488342493, 0.6829582924352204, 0.6811508925567922, 0.6606020078588518, 0.650019409893967, 0.6391698904340419, 0.6205034568451179, 0.6316296399198644, 0.6232357847692157, 0.6182714855319804, 0.6051168374302932, 0.5962419566965185, 0.5913437894149275, 0.6072324464869395, 0.5806498015482727], "accuracy": [0.2550521790981293, 0.47391360998153687, 0.561880886554718, 0.6268656849861145, 0.6711134314537048, 0.6602826714515686, 0.7058512568473816, 0.7112666964530945, 0.7224937081336975, 0.7276449799537659, 0.7251353859901428, 0.7425703406333923, 0.7458723783493042, 0.7461365461349487, 0.7523444890975952, 0.7548540234565735, 0.7618544697761536, 0.7724210619926453, 0.7664773464202881, 0.767401933670044, 0.7683265209197998, 0.7758552432060242, 0.7755910754203796, 0.7777044177055359, 0.7770439982414246, 0.7823272943496704], "val_loss": [1.6678779806409563, 1.0102612631661552, 0.833864688873291, 0.6756085157394409, 0.6574822493961879, 0.6043249368667603, 0.5840716361999512, 0.5648992572511945, 0.5555332047598702, 0.5632581199918475, 0.5309968335287911, 0.5236914839063372, 0.5317422492163522, 0.5119630779538836, 0.48492961270468576, 0.48915466240474154, 0.48105153015681673, 0.4787293331963675, 0.47648746626717703, 0.4859409843172346, 0.45529396193368094, 0.4573239428656442, 0.4616429465157645, 0.44452474798474995, 0.4478417634963989, 0.4443471942629133], "val_accuracy": [0.5013333559036255, 0.5666666626930237, 0.6129999756813049, 0.7139999866485596, 0.7136666774749756, 0.7419999837875366, 0.753000020980835, 0.753000020980835, 0.750333309173584, 0.7369999885559082, 0.7716666460037231, 0.7776666879653931, 0.7523333430290222, 0.7633333206176758, 0.7876666784286499, 0.7839999794960022, 0.7850000262260437, 0.7886666655540466, 0.7820000052452087, 0.768666684627533, 0.8026666641235352, 0.7910000085830688, 0.7873333096504211, 0.7993333339691162, 0.7986666560173035, 0.8016666769981384]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1], [0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [3, 1, 6, 3, 2, 0, 0, 0, 0, 5, 2, 8, 4, 1], [0, 3, 0, 2, 1, 2, 2, 2, 2, 1, 3, 0, 2, 1, 1, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 76, 57, 60, 59, 23, 22, 72, 1], [1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.7182857394218445, "mapping_values": [1, 16, 16, 10, 6, 2, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.negative(alpha))))))), tf.math.add(alpha, tf.math.square(grad)))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.0416315870041926, 1.1841827794435145, 0.9143679479031027, 0.8437203083764513, 0.7182066092685134, 0.6689160815036025, 0.6394444927720818, 0.622667659810663, 0.6171779704210449, 0.5663691086303667, 0.5656183764698672, 0.5386379981525916, 0.5236576397059033, 0.5107468007861379, 0.5040595648098521, 0.49037298362142673, 0.4994503812720007, 0.5000099402613345, 0.5202417778631857, 0.5382832720405343, 0.556103029979801], "accuracy": [0.3175274133682251, 0.6058644652366638, 0.6672830581665039, 0.6890767216682434, 0.7250033020973206, 0.7532690763473511, 0.7582882046699524, 0.7593448758125305, 0.767401933670044, 0.7866860628128052, 0.7903843522071838, 0.8000264167785645, 0.8004226684570312, 0.8024039268493652, 0.8128384351730347, 0.817461371421814, 0.8105930685997009, 0.8169330358505249, 0.7996301651000977, 0.7928939461708069, 0.8014793395996094], "val_loss": [0.8986921991620745, 0.6913211005074638, 0.6430468048368182, 0.5674962827137539, 0.5176779542650495, 0.4895582028797695, 0.47135775429861887, 0.4672623702457973, 0.4375689285142081, 0.4360452379499163, 0.42952728271484375, 0.43406568254743305, 0.4149708151817322, 0.4139274614197867, 0.41354866538728985, 0.4059520959854126, 0.4270755478313991, 0.4337517704282488, 0.4611018214906965, 0.4434241907937186, 0.4872350352151053], "val_accuracy": [0.6493333578109741, 0.6953333616256714, 0.722000002861023, 0.7323333621025085, 0.7680000066757202, 0.7883333563804626, 0.7853333353996277, 0.7933333516120911, 0.8069999814033508, 0.8136666417121887, 0.812666654586792, 0.8190000057220459, 0.8266666531562805, 0.8289999961853027, 0.828000009059906, 0.8333333134651184, 0.8323333263397217, 0.8236666917800903, 0.8173333406448364, 0.831333339214325, 0.8236666917800903]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1], [0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [6, 3, 0, 2, 4, 1, 2, 0, 5, 0, 2, 8, 4, 1], [0, 2, 0, 2, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 14, 76, 57, 60, 52, 23, 22, 20, 1, 9, 57, 57], [1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.7148571610450745, "mapping_values": [1, 8, 8, 4, 4, 2, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.041631796025896, 1.1840466861286498, 0.9142030205834952, 0.8442356803586942, 0.7168463495397738, 0.6659194973591784, 0.638117316880514, 0.6238801277403377, 0.6086820515706445, 0.5653266132846249, 0.5616972725767075, 0.5389634816244435, 0.5407811399495612, 0.5279537795746032, 0.5267000190727683, 0.524010618483118, 0.5291301629342077, 0.5406650558454549, 0.5471833722545109, 0.5073832591936305], "accuracy": [0.3175274133682251, 0.6058644652366638, 0.6674151420593262, 0.6888125538825989, 0.724210798740387, 0.7531369924545288, 0.7582882046699524, 0.759080708026886, 0.7663452625274658, 0.7872143983840942, 0.7898560166358948, 0.7996301651000977, 0.7911768555641174, 0.7980451583862305, 0.8049134612083435, 0.8082155585289001, 0.7928939461708069, 0.7964601516723633, 0.7960638999938965, 0.8079513907432556], "val_loss": [0.8986932550157819, 0.6913220371518817, 0.6423625094549996, 0.5672638075692313, 0.5145825488226754, 0.48903586183275494, 0.47532050950186594, 0.4636744941983904, 0.42859390803745817, 0.41802931683404104, 0.430137574672699, 0.4243775350706918, 0.41276248012270245, 0.41147060905184063, 0.41450497933796476, 0.41688538449151175, 0.4381317326000759, 0.4175072056906564, 0.43126578841890606, 0.4344095161982945], "val_accuracy": [0.6493333578109741, 0.6943333148956299, 0.721666693687439, 0.7336666584014893, 0.7680000066757202, 0.7913333177566528, 0.7836666703224182, 0.7933333516120911, 0.8113333582878113, 0.8193333148956299, 0.8116666674613953, 0.8146666884422302, 0.8240000009536743, 0.8293333053588867, 0.8383333086967468, 0.8246666789054871, 0.8273333311080933, 0.8236666917800903, 0.8309999704360962, 0.8259999752044678]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [3, 1, 6, 3, 2, 0, 0, 0, 0, 5, 2, 8, 4, 1], [3, 2, 2, 2, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 76, 57, 60, 59, 23, 22, 72, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [2, 3, 3, 3, 0], [38, 84, 6], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [1, 6, 0], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [1, 0, 2], [6, 32, 85]], "fitness": -0.1120000034570694, "mapping_values": [1, 3, 3, 1, 2, 0, 6, 6, 4, 2, 1, 10, 8, 5, 3, 1, 2, 1, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(grad, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, alpha), tf.math.add(sigma, grad))), tf.math.add(sigma, tf.math.add(sigma, sigma)))), tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.302818825373702, 2.297856286973088, 2.2994189707358372, 2.3012726889184405, 2.302136314921391, 2.302418987843276, 2.3025762396182494], "accuracy": [0.08730682730674744, 0.10791176557540894, 0.10817593336105347, 0.09126931428909302, 0.09919429570436478, 0.10011887550354004, 0.09985470771789551], "val_loss": [1.9680828366960799, 1.9691393715994698, 1.971536500113351, 1.9731063842773438, 1.9735209601266044, 1.9736580848693848, 1.973682131086077], "val_accuracy": [0.08166666328907013, 0.10966666787862778, 0.08766666799783707, 0.10333333164453506, 0.09866666793823242, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [3, 1, 6, 3, 2, 0, 0, 0, 0, 5, 2, 8, 4, 1], [0, 2, 0, 3, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 46, 57, 60, 59, 23, 22, 72, 1], [1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 1, 0, 1], [7, 4, 7, 2, 8, 5, 0, 9], [2, 4, 0], [64, 55], [1, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 16, 10, 6, 3, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.add(alpha, tf.math.square(grad)))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [371.69627846765826, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.04253070801496506, 0.1018359512090683, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [203165353.14285713, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1], [6, 3, 8, 2, 4, 1, 2, 0, 5, 0, 2, 8, 4, 1, 4, 6, 2, 8, 8, 7, 5, 5, 2, 4, 2, 8, 2, 3, 6, 8, 4, 5, 5], [0, 2, 1, 0, 2, 2, 2, 2, 2, 1, 3, 1, 2, 1, 1, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 76, 57, 60, 59, 23, 22, 72, 1], [0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [2, 4, 0], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [1, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 11, 8, 2, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad)), tf.math.add(alpha, alpha))), tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), grad)))))), tf.math.add(alpha, grad))))), grad)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [6, 3, 0, 2, 4, 1, 2, 0, 5, 0, 2, 8, 4, 1], [0, 2, 0, 2, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 76, 57, 60, 59, 23, 22, 72, 1], [1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 4, 4, 2, 5, 5, 3, 2, 2, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))), tf.math.add(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3040648004272124, 2.3026470657762297, 2.3026696159351205, 2.3026665259723917, 2.3026526696362972, 2.3026583781725445, 2.302645542996041, 2.3026671661850076], "accuracy": [0.09311848133802414, 0.09998679161071777, 0.09377889335155487, 0.09694888442754745, 0.09998679161071777, 0.09615638852119446, 0.0956280529499054, 0.09998679161071777], "val_loss": [1.9736542701721191, 1.9736463682992118, 1.9736434391566686, 1.973630087716239, 1.9736475944519043, 1.973649161202567, 1.9736595153808594, 1.9736723899841309], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.10133333504199982, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [4, 3, 0, 2, 4, 1, 2, 0, 5, 0, 2, 8, 4, 1], [0, 2, 0, 2, 0, 2, 2, 2, 2, 1, 3, 0, 2, 2, 1, 2, 2, 0, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 44, 76, 57, 60, 50, 63, 61, 72, 1, 73], [1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [1, 3, 3, 3, 0], [72, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 4, 4, 2, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, alpha), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0866464152932167, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [4, 3, 0, 2, 4, 1, 1, 0, 5, 9, 2, 8, 4, 1], [0, 2, 0, 2, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 76, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [2, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [7, 4, 0], [64, 55], [0, 0, 0, 1, 1], [9, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3033747762154277, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [3, 2, 6, 3, 2, 0, 0, 0, 0, 5, 2, 8, 4, 1], [0, 2, 2, 2, 0, 2, 2, 2, 2, 1, 3, 0, 2, 0, 1, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 85, 62, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [72, 84, 6], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [2, 4, 0], [64, 55], [0, 1, 0, 1, 1], [6, 7, 5, 2, 9, 3, 9], [2, 0, 2], [74, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 4, 5, 2, 3, 3, 1, 2, 1, 12, 10, 7, 3, 1, 5, 2, 3, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, beta), tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.sqrt(sigma)), sigma)))), tf.math.add(sigma, tf.math.square(tf.math.add(sigma, grad))))), tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(beta, tf.math.add(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06815480440855026, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [2, 8, 0, 4, 6, 4, 6, 3, 5, 4, 8, 6, 4, 5, 0, 2, 9, 1, 1, 4, 2, 9, 9, 2, 7, 6, 2, 1, 2, 7, 1, 9, 9, 9, 2, 6, 3, 6, 0, 4, 2, 4, 4], [0, 2, 0, 2, 0, 2, 2, 2, 2, 1, 3, 0, 2, 1, 1, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 44, 25, 98, 33, 52, 23, 22, 20, 1, 9, 45, 57], [1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [1, 2, 3, 3, 0], [38, 84, 6], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 68, 68, 43, 25, 13, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 53, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, grad), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))), tf.math.add(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.add(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, grad))))), tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha)))), tf.math.add(alpha, grad))), tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, grad), grad), tf.math.negative(tf.math.add(alpha, grad))))))), tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), grad))))))))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0], [2, 3, 0, 4, 5, 2, 6, 0, 5, 4, 8, 6, 8, 1, 2, 2, 3, 1, 1, 2, 2, 9, 9, 2, 7, 4, 2, 1, 4, 7, 1, 1, 9, 9], [0, 2, 0, 2, 0, 1, 2, 2, 2, 1, 3, 0, 2, 1, 1, 2, 0, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 76, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 0, 3, 3, 0], [38, 84, 6], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [2, 4, 0], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [1, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 5, 5, 3, 2, 3, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.3039730470634927, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [3, 1, 4, 5, 2, 0, 0, 0, 0, 5, 2, 8, 4, 1], [0, 2, 0, 2, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 76, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [2, 4, 0], [64, 55], [0, 1, 0, 1, 1], [8, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 2, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.subtract(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [6, 3, 0, 2, 4, 1, 2, 0, 5, 0, 2, 8, 4, 1, 6, 1, 9, 1, 4, 8], [0, 3, 1, 2, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 76, 57, 60, 59, 23, 22, 72, 1], [1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [1, 5, 3, 3, 0], [38, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [1, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 33, 33, 20, 13, 4, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(alpha, tf.math.pow(grad, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.negative(grad)))), tf.math.add(alpha, tf.math.add(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))))), tf.math.sqrt(tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, alpha), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(grad, alpha)))), grad)), tf.math.pow(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(grad))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, alpha), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [2, 8, 0, 4, 6, 4, 6, 3, 5, 4, 8, 6, 4, 5, 0, 2, 9, 1, 1, 4, 2, 9, 9, 2, 7, 4, 2, 1, 9, 7, 1, 9, 9, 9, 2, 6, 3, 6, 1, 4, 2, 4, 9], [1, 3, 0, 2, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 76, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 5, 3, 3, 0], [38, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [1, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 0, 5, 5, 3, 2, 2, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.sqrt(alpha)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.12812046706676483, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [6, 6, 8, 2, 4, 1, 2, 0, 5, 0, 2, 8, 4, 1], [0, 2, 0, 1, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [88, 82, 76, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [27, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [2, 4, 0], [64, 55], [0, 1, 0, 1, 1], [1, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.09828571230173111, "mapping_values": [1, 3, 3, 1, 2, 1, 5, 5, 3, 2, 2, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(beta, tf.math.add(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [2.36269447032282, 3.0465574588883966, 4.903374445074664, 8.043937596316193, 12.338093685955814, 17.85209353598999], "accuracy": [0.09060890227556229, 0.09668471664190292, 0.10276053100824356, 0.09602430462837219, 0.09787346422672272, 0.10249637067317963], "val_loss": [2.090091977800642, 2.770197936466762, 4.282082148960659, 6.584279469081333, 9.64884512765067, 13.518359592982701], "val_accuracy": [0.10066666454076767, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}]