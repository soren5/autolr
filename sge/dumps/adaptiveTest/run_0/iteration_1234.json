[{"genotype": [[0], [1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0], [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1], [6, 2, 1, 8, 3, 9, 3, 0, 5, 6, 8, 0, 2, 3, 9, 5, 7, 5, 1, 8, 9, 8, 1, 6, 5, 0, 3, 3, 3, 5, 1, 8, 8, 1, 0, 3, 9], [2, 3, 2, 0, 0, 2, 1, 0, 2, 1, 1, 1, 1, 1, 0, 2, 0, 0, 2, 0, 2, 2, 2, 0, 2, 2, 1, 2, 3, 3, 2, 2], [96, 64, 17, 0, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 1, 0], [3, 3, 7, 7, 8, 9], [4, 0, 0, 3, 0], [38, 77, 6], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [8, 8, 7, 1, 8, 2, 2, 1], [3, 0, 0, 6], [54, 55], [0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 0, 9, 2, 2, 9, 0, 7, 6, 7, 3, 6, 1, 3, 4, 2, 2, 4, 9, 8, 0, 7, 7, 3, 4, 2, 2, 2, 7, 0, 3, 1, 0, 2, 6, 2, 8, 7, 4, 0, 9, 0, 3, 2, 9, 4, 5, 1, 7, 3, 3, 7, 1, 2, 5, 2, 4, 4, 4, 4, 2, 8, 8, 4, 6, 2, 8, 8], [2, 0, 0, 1, 3, 2, 1, 3, 2, 2, 1, 0, 2, 3, 2, 3, 3, 1, 3, 3, 2, 2, 2, 2, 3, 1, 3, 1, 1, 1, 2, 0, 0, 1, 1, 1, 3, 2, 3, 1, 1, 2, 0, 0, 1, 3, 0], [11, 32, 85, 18, 26, 46]], "fitness": -0.8500000238418579, "mapping_values": [1, 3, 3, 1, 2, 0, 3, 3, 1, 2, 1, 3, 2, 2, 0, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(grad, tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.sqrt(sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.0445994363091233, 1.0754355695568543, 0.7872362415221515, 0.7041491513018595, 0.6642957978701437, 0.5967111585320042, 0.5621750224630169, 0.5314309811115013, 0.5065822325614402, 0.4823284856064791, 0.46713402871647214, 0.4461048499995597, 0.4281748723021714, 0.41495126030779217, 0.40876275444263793, 0.39718607764407204, 0.374772533504734, 0.36701239847614153, 0.3579620335040989, 0.352084802685318, 0.343963809135237, 0.3346170395230888, 0.3279317236414297, 0.31274266212907026, 0.2986341465371333, 0.2985337838410481, 0.2853234277039534, 0.28058649332468866, 0.2802694233976036], "accuracy": [0.31039494276046753, 0.6205257177352905, 0.7025492191314697, 0.7327961921691895, 0.7535332441329956, 0.7784969210624695, 0.7885351777076721, 0.800290584564209, 0.8150838613510132, 0.8220842480659485, 0.8289526104927063, 0.8389908671379089, 0.8413683772087097, 0.8466516733169556, 0.8512746095657349, 0.8562937378883362, 0.860652506351471, 0.8676528930664062, 0.8664641380310059, 0.8664641380310059, 0.8693699836730957, 0.8776912093162537, 0.8784837126731873, 0.8874653577804565, 0.8910315632820129, 0.8899748921394348, 0.8947299122810364, 0.895918607711792, 0.8926165699958801], "val_loss": [0.9071666172572544, 0.6367801598140171, 0.5600319589887347, 0.5250829798834664, 0.4827857528414045, 0.45599607058933805, 0.4351533055305481, 0.4365609458514622, 0.3993165237562997, 0.3881830998829433, 0.3736485924039568, 0.36429697275161743, 0.3505153145108904, 0.3408669999667576, 0.3530002747263227, 0.3452230266162327, 0.32549188818250385, 0.323576169354575, 0.32036047322409494, 0.33334875106811523, 0.31522042410714285, 0.3172865850584848, 0.30624015842165264, 0.2928208368165152, 0.31166745935167584, 0.29987508058547974, 0.2939386027199881, 0.2925276245389666, 0.28660679715020315], "val_accuracy": [0.6596666574478149, 0.7350000143051147, 0.7393333315849304, 0.7670000195503235, 0.7756666541099548, 0.7903333306312561, 0.8053333163261414, 0.8013333082199097, 0.8243333101272583, 0.8263333439826965, 0.8370000123977661, 0.8399999737739563, 0.8503333330154419, 0.8526666760444641, 0.8370000123977661, 0.8496666550636292, 0.8533333539962769, 0.859000027179718, 0.8610000014305115, 0.8519999980926514, 0.8640000224113464, 0.8629999756813049, 0.8629999756813049, 0.871666669845581, 0.8686666488647461, 0.8653333187103271, 0.8679999709129333, 0.8650000095367432, 0.8709999918937683]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1], [6, 2, 1, 8, 3, 9, 3, 0, 5, 6, 8, 0, 2, 3, 9, 5, 7, 5, 1, 8, 9, 8, 1, 6, 5, 0, 3, 3, 3, 5, 1, 8, 8, 1, 0, 3, 9], [1, 0, 2, 0, 0, 2, 1, 0, 2, 1, 1, 1, 1, 1, 0, 2, 0, 0, 2, 0, 2, 2, 2, 0, 2, 2, 1, 2, 3, 3, 2, 2], [96, 64, 17, 0, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 1, 0], [3, 3, 7, 7, 8, 9], [4, 0, 0, 3, 0], [38, 77, 6], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1], [8, 8, 7, 1, 8, 2, 2, 1], [3, 0, 0, 6], [54, 55], [0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 0, 9, 2, 2, 9, 0, 7, 6, 7, 3, 6, 1, 3, 4, 2, 2, 4, 9, 8, 0, 7, 7, 3, 4, 2, 2, 2, 7, 0, 3, 1, 0, 2, 6, 2, 8, 7, 4, 0, 9, 0, 3, 2, 9, 4, 5, 1, 7, 3, 3, 7, 1, 2, 5, 2, 4, 4, 4, 4, 2, 8, 8, 4, 6, 2, 8, 8], [2, 0, 0, 1, 3, 2, 1, 3, 2, 2, 1, 0, 2, 3, 2, 3, 3, 1, 3, 3, 2, 2, 2, 2, 3, 1, 3, 1, 1, 1, 2, 0, 0, 1, 1, 1, 3, 2, 3, 1, 1, 2, 0, 0, 1, 3, 0], [11, 32, 85, 18, 26, 46]], "fitness": -0.8411428332328796, "mapping_values": [1, 13, 13, 8, 5, 4, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(alpha)), tf.math.multiply(tf.math.add(alpha, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))))), tf.math.negative(tf.math.add(alpha, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.0445996882373536, 1.075396886339214, 0.7873291143998179, 0.7032858719993906, 0.6638351301270832, 0.596792106347518, 0.5607011055099241, 0.5313774756098215, 0.5073403004547545, 0.48292155429404, 0.4680911266273118, 0.44681437301550714, 0.4306569314195086, 0.4156059122883869, 0.4100949502088894, 0.393711027334143, 0.37531657889140924, 0.37223715380103817, 0.3567589240508104, 0.3479290654701469, 0.3390872674674217, 0.33191302607654977, 0.3289824939910935, 0.31283007939856017, 0.297344448386623, 0.29707562465630566, 0.29071370510377303, 0.2849326535238645, 0.28331521075509714], "accuracy": [0.31039494276046753, 0.6201294660568237, 0.7022850513458252, 0.7334566116333008, 0.7515519857406616, 0.7778365015983582, 0.7878747582435608, 0.800818920135498, 0.8153480291366577, 0.8228767514228821, 0.829216718673706, 0.8384625315666199, 0.8428213000297546, 0.8485008478164673, 0.8502179384231567, 0.8565579056739807, 0.8634262084960938, 0.8659358024597168, 0.8689737319946289, 0.8714832663536072, 0.8742570281028748, 0.874389111995697, 0.8796724081039429, 0.8861445188522339, 0.8894465565681458, 0.8891823887825012, 0.889578640460968, 0.893541157245636, 0.8923524022102356], "val_loss": [0.9071703638349261, 0.6370514971869332, 0.5591329847063337, 0.5242598737989154, 0.48063925334385466, 0.45749577454158236, 0.43261963980538504, 0.4362582394054958, 0.3976484537124634, 0.38812155382973806, 0.3756424103464399, 0.36094060114451815, 0.3497887338910784, 0.34381890296936035, 0.35001478024891447, 0.34519279854638235, 0.3278205820492336, 0.3296353816986084, 0.3161944491522653, 0.320365309715271, 0.310911442552294, 0.31051805189677645, 0.302869371005467, 0.29138390507016865, 0.3028708185468401, 0.2948130624634879, 0.2962080069950649, 0.29129200322287424, 0.29259360688073294], "val_accuracy": [0.6596666574478149, 0.7353333234786987, 0.7419999837875366, 0.7680000066757202, 0.7766666412353516, 0.7900000214576721, 0.8096666932106018, 0.8006666898727417, 0.8203333616256714, 0.8266666531562805, 0.8306666612625122, 0.843999981880188, 0.8529999852180481, 0.8493333458900452, 0.8393333554267883, 0.8476666808128357, 0.8529999852180481, 0.8576666712760925, 0.8583333492279053, 0.8616666793823242, 0.859666645526886, 0.8633333444595337, 0.8679999709129333, 0.8733333349227905, 0.871666669845581, 0.8706666827201843, 0.8713333606719971, 0.8686666488647461, 0.871999979019165]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1], [6, 2, 1, 8, 3, 9, 3, 0, 5, 6, 8, 0, 2, 3, 9, 5, 7, 5, 1, 8, 9, 8, 1, 6, 5, 0, 3, 3, 3, 5, 1, 8, 8, 1, 0, 3, 9], [1, 1, 2, 0, 0, 2, 1, 0, 2, 1, 1, 1, 1, 1, 0, 2, 0, 0, 2, 0, 2, 2, 2, 0, 2, 2, 1, 2, 3, 3, 2, 2], [96, 50, 17, 0, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 0], [3, 3, 7, 7, 8, 9], [4, 0, 0, 3, 0], [38, 77, 6], [1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1], [8, 8, 7, 1, 8, 2, 2, 1], [3, 0, 0, 6], [54, 55], [0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 0, 9, 2, 2, 9, 0, 7, 6, 7, 3, 6, 1, 3, 4, 2, 2, 4, 9, 8, 0, 7, 7, 3, 4, 2, 2, 2, 7, 0, 3, 1, 0, 2, 6, 2, 8, 7, 4, 0, 9, 0, 3, 2, 9, 4, 5, 1, 7, 3, 3, 7, 1, 2, 5, 2, 4, 4, 4, 4, 2, 8, 8, 4, 6, 2, 8, 8], [2, 0, 0, 1, 3, 2, 1, 3, 2, 2, 1, 0, 2, 3, 2, 3, 3, 1, 3, 3, 2, 2, 2, 2, 3, 1, 3, 1, 1, 1, 2, 0, 0, 1, 1, 1, 3, 2, 3, 1, 1, 2, 0, 0, 1, 3, 0], [11, 32, 85, 18, 26, 46]], "fitness": -0.840571403503418, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 4, 5, 3, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.add(beta, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.046481243670656, 1.0770862116128415, 0.7887102748188503, 0.7065062589649165, 0.6714877143212912, 0.6022126749049656, 0.5678261517769846, 0.5406609709157982, 0.5152357873222564, 0.48678166134765893, 0.47111552536463963, 0.4506635846809515, 0.4354190095469873, 0.4210568356114041, 0.4142003139768058, 0.40156791654512974, 0.38114943942137525, 0.3719461244551765, 0.3649006222004841, 0.3596886100943503, 0.3476749999081344, 0.33966967084813726, 0.3323616723555458, 0.3235105053781125, 0.3041072400561602, 0.29926577526123893, 0.28786006321870516, 0.2879863114499334, 0.2883042651136963], "accuracy": [0.30999869108200073, 0.6188086271286011, 0.7004358768463135, 0.7342491149902344, 0.7503632307052612, 0.7763835787773132, 0.7840443849563599, 0.8001585006713867, 0.8119139075279236, 0.8231409192085266, 0.8284242749214172, 0.8343679904937744, 0.8412362933158875, 0.8425571322441101, 0.8454629778862, 0.8549728989601135, 0.8601241707801819, 0.86553955078125, 0.8622375130653381, 0.8697662353515625, 0.8726720213890076, 0.8770307898521423, 0.8770307898521423, 0.8803328275680542, 0.8923524022102356, 0.8899748921394348, 0.8952582478523254, 0.896446943283081, 0.8912957310676575], "val_loss": [0.9110991614205497, 0.6405638456344604, 0.5604833364486694, 0.5333097662244525, 0.4820139578410557, 0.46530146258217947, 0.44283183983394075, 0.4445218358721052, 0.4064652579171317, 0.39522085019520353, 0.3709032450403486, 0.3629845806530544, 0.3574751445225307, 0.3455833281789507, 0.3603301814624241, 0.3466475350516183, 0.32583997930799213, 0.31968609775815693, 0.3260393738746643, 0.3289216331073216, 0.31391009262629915, 0.3156042524746486, 0.3096727728843689, 0.29291798387254986, 0.30465561151504517, 0.2966088908059256, 0.298151433467865, 0.2951409987040928, 0.2903153215135847], "val_accuracy": [0.6589999794960022, 0.7336666584014893, 0.7419999837875366, 0.7649999856948853, 0.7786666750907898, 0.7906666398048401, 0.7983333468437195, 0.7946666479110718, 0.8173333406448364, 0.8246666789054871, 0.8336666822433472, 0.843666672706604, 0.8523333072662354, 0.8516666889190674, 0.8393333554267883, 0.8460000157356262, 0.8569999933242798, 0.8603333234786987, 0.8606666922569275, 0.8546666502952576, 0.8619999885559082, 0.8663333058357239, 0.8636666536331177, 0.8736666440963745, 0.8730000257492065, 0.8673333525657654, 0.8693333268165588, 0.8683333396911621, 0.8736666440963745]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1], [6, 2, 1, 6, 0, 9, 3, 0, 5, 6, 8, 0, 2, 3, 9, 5, 7, 5, 1, 8, 9, 8, 1, 6, 5, 0, 3, 3, 3, 5, 1, 8, 8, 1, 0, 3, 9], [1, 1, 2, 0, 0, 2, 1, 0, 2, 1, 1, 1, 1, 1, 0, 2, 0, 0, 2, 0, 2, 2, 2, 0, 2, 2, 1, 2, 3, 3, 2, 2], [96, 64, 17, 0, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 1, 0], [3, 3, 7, 7, 8, 9], [4, 0, 0, 3, 0], [38, 77, 6], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1], [8, 8, 7, 1, 8, 2, 2, 1], [1, 0, 0, 6], [54, 55], [0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 0, 9, 2, 2, 9, 0, 7, 6, 7, 3, 6, 1, 3, 4, 2, 2, 4, 9, 8, 0, 7, 7, 3, 4, 2, 2, 2, 7, 0, 3, 1, 0, 2, 6, 2, 8, 7, 4, 0, 9, 0, 3, 2, 9, 4, 5, 1, 7, 3, 3, 7, 1, 2, 5, 2, 4, 4, 4, 4, 2, 8, 8, 4, 6, 2, 8, 8], [2, 0, 0, 1, 3, 2, 1, 3, 2, 2, 1, 0, 2, 3, 2, 3, 3, 1, 3, 3, 2, 2, 2, 2, 3, 1, 3, 1, 1, 1, 2, 0, 0, 1, 1, 1, 3, 2, 3, 1, 1, 2, 0, 0, 1, 3, 0], [11, 32, 85, 18, 26, 46]], "fitness": -0.8362857103347778, "mapping_values": [1, 13, 13, 8, 5, 3, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.negative(tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))))), tf.math.negative(tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.0445993118250865, 1.0753641086184604, 0.7862672070313155, 0.7023096071447222, 0.6657016892096842, 0.5980471561471815, 0.5596863900815271, 0.5317044683758294, 0.5054883636133688, 0.4839815969212716, 0.46740442012137645, 0.44699595467667336, 0.42778223321942005, 0.4134996331930003, 0.4066471338681478, 0.39668451838284874, 0.37524972268540263, 0.36716491200857476, 0.3583052354426731, 0.35380658347136495, 0.3422770845364145, 0.33775679146955356, 0.3262097280826299, 0.31438672898814285, 0.3000296137045088, 0.30035083023249404, 0.2843627334152781, 0.28658431964055375, 0.2832685112047819, 0.2615710614560822, 0.2694770564035953, 0.26478026691972306, 0.25108494538444304, 0.24475521723497592, 0.23982507198667166, 0.23229536156904082, 0.2295743540832789, 0.2278262826752716, 0.2198700766226619, 0.20849794325354928, 0.20546476555939727, 0.20753253347066572, 0.19907165958684245, 0.20057371825967812], "accuracy": [0.31039494276046753, 0.6197332143783569, 0.7004358768463135, 0.7333245277404785, 0.7530049085617065, 0.7766477465629578, 0.7878747582435608, 0.8013472557067871, 0.8156121969223022, 0.8236692547798157, 0.8277638554573059, 0.8368775844573975, 0.8454629778862, 0.8496896028518677, 0.8518029451370239, 0.8560295701026917, 0.8603883385658264, 0.8665962219238281, 0.869502067565918, 0.870030403137207, 0.873860776424408, 0.874389111995697, 0.8775591254234314, 0.8874653577804565, 0.8886540532112122, 0.8883898854255676, 0.8923524022102356, 0.8949940800666809, 0.8920882344245911, 0.9031832218170166, 0.8982961177825928, 0.897899866104126, 0.9015982151031494, 0.9052965044975281, 0.9089948534965515, 0.9128252267837524, 0.9115044474601746, 0.9133535623550415, 0.915070652961731, 0.9218068718910217, 0.9171839952468872, 0.9199577569961548, 0.9237881302833557, 0.9215427041053772], "val_loss": [0.9071502685546875, 0.6369572877883911, 0.557645423071725, 0.524522202355521, 0.4831263167517526, 0.45273475987570627, 0.4365429537636893, 0.4346036740711757, 0.39820113352366854, 0.38989672490528654, 0.3760588083948408, 0.36077381883348736, 0.35014759642737253, 0.34267216069357737, 0.34770905120032175, 0.3436909658568246, 0.32551495518003193, 0.32143865312848774, 0.31943065779549734, 0.32567197935921804, 0.31686017342976164, 0.3128757561956133, 0.305624042238508, 0.2950750504221235, 0.30695693833487375, 0.29825977768216816, 0.29258233308792114, 0.2942661813327244, 0.2900564840861729, 0.29961033378328594, 0.2915663293429783, 0.28910028082983835, 0.2940477132797241, 0.29929144041878836, 0.28638401201793123, 0.28484416007995605, 0.2901053598948887, 0.29207803521837505, 0.28286783184323994, 0.28170521770204815, 0.29341982092176166, 0.28642276355198454, 0.30438527890614103, 0.3054063745907375], "val_accuracy": [0.6600000262260437, 0.7353333234786987, 0.7463333606719971, 0.7670000195503235, 0.7760000228881836, 0.7963333129882812, 0.8056666851043701, 0.8040000200271606, 0.8243333101272583, 0.828000009059906, 0.8320000171661377, 0.843666672706604, 0.8516666889190674, 0.8483333587646484, 0.843666672706604, 0.8460000157356262, 0.8556666374206543, 0.862666666507721, 0.8619999885559082, 0.8566666841506958, 0.8606666922569275, 0.862333357334137, 0.8666666746139526, 0.8686666488647461, 0.8703333139419556, 0.8709999918937683, 0.8730000257492065, 0.8656666874885559, 0.875, 0.8696666955947876, 0.8733333349227905, 0.8733333349227905, 0.875, 0.8773333430290222, 0.8790000081062317, 0.8790000081062317, 0.8769999742507935, 0.8790000081062317, 0.8846666812896729, 0.8790000081062317, 0.8793333172798157, 0.8846666812896729, 0.8766666650772095, 0.8796666860580444]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1], [6, 2, 1, 8, 3, 9, 3, 0, 5, 6, 8, 0, 2, 3, 9, 5, 7, 5, 1, 8, 9, 8, 1, 6, 5, 0, 3, 3, 3, 5, 1, 8, 8, 1, 0, 3, 9], [1, 1, 2, 0, 0, 2, 1, 0, 2, 1, 1, 1, 1, 1, 0, 2, 0, 0, 2, 0, 2, 2, 2, 0, 2, 2, 1, 2, 3, 3, 2, 2], [96, 64, 17, 0, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 1, 0], [3, 3, 7, 7, 8, 9], [4, 0, 0, 3, 0], [38, 77, 6], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1], [8, 8, 7, 1, 8, 2, 2, 1], [3, 0, 0, 6], [54, 55], [0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 0, 9, 2, 2, 9, 0, 7, 6, 7, 3, 6, 1, 3, 4, 2, 2, 4, 9, 8, 0, 7, 7, 3, 4, 2, 2, 2, 7, 0, 3, 1, 0, 2, 6, 2, 8, 7, 4, 0, 9, 0, 3, 2, 9, 4, 5, 1, 7, 3, 3, 7, 1, 2, 5, 2, 4, 4, 4, 4, 2, 8, 8, 4, 6, 2, 8, 8], [2, 0, 0, 1, 3, 2, 1, 3, 2, 2, 1, 0, 2, 3, 2, 3, 3, 1, 3, 3, 2, 2, 2, 2, 3, 1, 3, 1, 1, 1, 2, 0, 0, 1, 1, 1, 3, 2, 3, 1, 1, 2, 0, 0, 1, 3, 0], [11, 32, 85, 18, 26, 46]], "fitness": -0.8360000252723694, "mapping_values": [1, 13, 13, 8, 5, 3, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(alpha)), tf.math.multiply(tf.math.add(alpha, alpha), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))))), tf.math.negative(tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.044598965659952, 1.0752948989186069, 0.7861049225726825, 0.7011381074925928, 0.6644956842783246, 0.5962133240217955, 0.5574051808207152, 0.5285514902051383, 0.5056141918526822, 0.48296600634143844, 0.46684659629560277, 0.44808933291185205, 0.4308072995153857, 0.41387986718403774, 0.40869501947553605, 0.3898014781686372, 0.3753782969188098, 0.3709799789788779, 0.3606841657116366, 0.3485936677852689, 0.34146104065135263, 0.33128117228606124, 0.32635104508605284, 0.31047843071321973, 0.29648378338276543, 0.29662269208614206, 0.2837759241837678, 0.28442417336114884, 0.28121546607574277, 0.26083667129730864, 0.26101685502446953, 0.25351772042958964, 0.24998136538642665, 0.24360587577290146, 0.23608697213359464, 0.22982127463001978, 0.22831764345659697, 0.23129466178394847, 0.22563614836104118, 0.21278927510149365, 0.20403358365259372, 0.20510092135181737, 0.19367893735344668, 0.19342535552709583, 0.19070343000108478, 0.18543457453906842, 0.17603679907485684, 0.1721100088348163, 0.1604013707537488, 0.1724869288142961, 0.1664308329728994, 0.15545122734803754, 0.1573499050736821, 0.15358792767155013, 0.14437099577783516], "accuracy": [0.31039494276046753, 0.6199973821640015, 0.6984546184539795, 0.7333245277404785, 0.752740740776062, 0.7790252566337585, 0.7869502305984497, 0.800818920135498, 0.8138951063156128, 0.8214238286018372, 0.8293488025665283, 0.8383304476737976, 0.8418967127799988, 0.8469158411026001, 0.8518029451370239, 0.8543124794960022, 0.8632941246032715, 0.8654074668884277, 0.8651432991027832, 0.871879518032074, 0.8705587387084961, 0.8780874609947205, 0.8780874609947205, 0.8879936337471008, 0.8920882344245911, 0.8886540532112122, 0.8956544995307922, 0.8951261639595032, 0.8926165699958801, 0.9012019634246826, 0.8988244533538818, 0.8997490406036377, 0.9025228023529053, 0.9089948534965515, 0.9101836085319519, 0.9140139818191528, 0.9129573106765747, 0.9113723635673523, 0.909259021282196, 0.9163914918899536, 0.9192973375320435, 0.9223352074623108, 0.9233918786048889, 0.9252410531044006, 0.9252410531044006, 0.924448549747467, 0.9331660270690918, 0.9319772720336914, 0.9373927116394043, 0.9305243492126465, 0.9318451881408691, 0.9369964599609375, 0.9383172392845154, 0.939638078212738, 0.941619336605072], "val_loss": [0.9071449211665562, 0.6371908358165196, 0.5565354653767177, 0.5258235590798515, 0.4801360879625593, 0.4546600069318499, 0.4319725377219064, 0.43280052287237986, 0.40021439109529766, 0.3872111013957432, 0.37378786291394916, 0.3643599493162973, 0.35369988850184847, 0.3447494166237967, 0.34481872831072125, 0.3389988456453596, 0.3267715403011867, 0.32610598632267546, 0.3155792014939444, 0.3280536787850516, 0.3089409129960196, 0.31734213658741545, 0.30259649242673603, 0.29374323572431293, 0.30648343903677805, 0.3008295978818621, 0.29449710675648283, 0.2957942656108311, 0.2876037870134626, 0.2905572993414743, 0.28989884683064054, 0.2974319117409842, 0.2933870383671352, 0.2861508386475699, 0.28815031903130667, 0.2843519789831979, 0.2923469202859061, 0.2940232583454677, 0.2911944474492754, 0.2857853174209595, 0.29730829170772005, 0.2835838198661804, 0.29933089869362967, 0.30678707361221313, 0.2989101069314139, 0.29181564705712454, 0.29276623896190096, 0.2985156604221889, 0.2990096296582903, 0.2905188032558986, 0.32891866139003206, 0.3130783864430019, 0.2971972141947065, 0.3172749621527536, 0.3094284875052316], "val_accuracy": [0.6600000262260437, 0.7353333234786987, 0.7476666569709778, 0.7683333158493042, 0.778333306312561, 0.7916666865348816, 0.8096666932106018, 0.8069999814033508, 0.8193333148956299, 0.8296666741371155, 0.8373333215713501, 0.8429999947547913, 0.8503333330154419, 0.8493333458900452, 0.8483333587646484, 0.8523333072662354, 0.8579999804496765, 0.8600000143051147, 0.862333357334137, 0.859666645526886, 0.8659999966621399, 0.8653333187103271, 0.8636666536331177, 0.8726666569709778, 0.8730000257492065, 0.8663333058357239, 0.8709999918937683, 0.8600000143051147, 0.875333309173584, 0.8743333220481873, 0.871999979019165, 0.8669999837875366, 0.8743333220481873, 0.8773333430290222, 0.8786666393280029, 0.8796666860580444, 0.8799999952316284, 0.8766666650772095, 0.8799999952316284, 0.8790000081062317, 0.8806666731834412, 0.8823333382606506, 0.8776666522026062, 0.8830000162124634, 0.8826666474342346, 0.8856666684150696, 0.8853333592414856, 0.8823333382606506, 0.8836666941642761, 0.8880000114440918, 0.8843333125114441, 0.8830000162124634, 0.8856666684150696, 0.8856666684150696, 0.8870000243186951]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0], [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1], [6, 2, 1, 8, 3, 9, 3, 0, 5, 6, 8, 0, 2, 3, 9, 5, 7, 5, 1, 8, 9, 8, 1, 6, 5, 0, 3, 3, 3, 5, 1, 8, 8, 1, 0, 3, 9], [1, 1, 2, 0, 0, 2, 1, 0, 2, 1, 1, 1, 1, 1, 0, 2, 0, 0, 2, 0, 2, 2, 2, 0, 2, 2, 1, 2, 3, 3, 2, 2], [96, 64, 17, 0, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 0], [3, 3, 7, 7, 8, 9], [4, 0, 0, 3, 0], [38, 77, 6], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1], [8, 8, 7, 1, 8, 2, 2, 1], [3, 0, 0, 6], [54, 55], [0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 0, 9, 2, 2, 9, 0, 7, 6, 7, 3, 6, 1, 3, 4, 2, 2, 4, 9, 8, 0, 7, 7, 3, 4, 2, 2, 2, 7, 0, 3, 1, 0, 2, 6, 2, 8, 7, 4, 0, 9, 0, 3, 2, 9, 4, 5, 1, 7, 3, 3, 7, 1, 2, 5, 2, 4, 4, 4, 4, 2, 8, 8, 4, 6, 2, 8, 8], [2, 0, 0, 1, 3, 2, 1, 3, 2, 2, 1, 0, 2, 3, 2, 3, 3, 1, 3, 3, 2, 2, 2, 2, 3, 1, 3, 1, 1, 1, 2, 0, 0, 1, 1, 1, 3, 2, 3, 1, 1, 2, 0, 0, 1, 3, 0], [11, 32, 85, 18, 26, 46]], "fitness": -0.8322857022285461, "mapping_values": [1, 3, 3, 1, 2, 0, 9, 9, 4, 5, 3, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.add(beta, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.0464828514766227, 1.0771219787139776, 0.7886186616138271, 0.7069273384066778, 0.6737347322684301, 0.6019055272893284, 0.5674282850889781, 0.5386377293963427, 0.5155072692536156, 0.4898681472305451, 0.47157933345607495, 0.4552980972602304, 0.43644471546646596, 0.42211998342727675, 0.4163253411695926, 0.40183155130574794, 0.37907989481972065, 0.37209896948186083, 0.3629064532224418, 0.3592687684940766, 0.3484271112851589, 0.33988971793892486, 0.32918330841627513, 0.32190536737064124, 0.3063183167370917, 0.30401167969079523, 0.29017352454808126, 0.28619867375876057, 0.2843984958675512, 0.26897650663060063], "accuracy": [0.30999869108200073, 0.6184123754501343, 0.700171709060669, 0.7322678565979004, 0.7518161535263062, 0.7766477465629578, 0.7843085527420044, 0.8006868362426758, 0.8132346868515015, 0.8186501264572144, 0.8296129703521729, 0.8338396549224854, 0.8408400416374207, 0.8453308939933777, 0.8451988101005554, 0.8562937378883362, 0.8626337051391602, 0.8636903762817383, 0.8622375130653381, 0.867520809173584, 0.8679170608520508, 0.8729361891746521, 0.8767666220664978, 0.8849557638168335, 0.8873332738876343, 0.883238673210144, 0.8912957310676575, 0.89552241563797, 0.8916919827461243, 0.9017302989959717], "val_loss": [0.9111406462533134, 0.6406182050704956, 0.5602247374398368, 0.5380841834204537, 0.4845318964549473, 0.46451238223484587, 0.44139048031398226, 0.4451968329293387, 0.4103816492216928, 0.39672213792800903, 0.3750108395303999, 0.36560717650822233, 0.3546141726630075, 0.34571112053734915, 0.3594126786504473, 0.3493766869817461, 0.32841733523777555, 0.3208256959915161, 0.32109675237110685, 0.3338076983179365, 0.3157057251249041, 0.31351785148893085, 0.3057997737612043, 0.2963748403957912, 0.3024229662758963, 0.2955381955419268, 0.2927822300365993, 0.29475983551570345, 0.28956304277692524, 0.29715429885046823], "val_accuracy": [0.6589999794960022, 0.7323333621025085, 0.7450000047683716, 0.7599999904632568, 0.7773333191871643, 0.7913333177566528, 0.8016666769981384, 0.7963333129882812, 0.8163333535194397, 0.8213333487510681, 0.8299999833106995, 0.8446666598320007, 0.8536666631698608, 0.8483333587646484, 0.8376666903495789, 0.8473333120346069, 0.8556666374206543, 0.8610000014305115, 0.8573333621025085, 0.8539999723434448, 0.8586666584014893, 0.8616666793823242, 0.8656666874885559, 0.8696666955947876, 0.8730000257492065, 0.8666666746139526, 0.8703333139419556, 0.8676666617393494, 0.8713333606719971, 0.8656666874885559]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1], [6, 9, 1, 6, 2, 9, 3, 0, 5, 6, 8, 0, 2, 3, 9, 5, 7, 5, 1, 8, 9, 8, 1, 6, 5, 0, 3, 3, 3, 5, 1, 8, 8, 1, 0, 3, 9], [1, 0, 2, 0, 0, 2, 1, 0, 2, 1, 1, 1, 1, 1, 0, 2, 0, 0, 2, 0, 2, 2, 2, 0, 2, 2, 1, 2, 3, 3, 2, 2], [96, 32, 17, 0, 60, 59, 23, 22, 72, 1], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 1, 0], [3, 3, 7, 7, 8, 9], [4, 0, 0, 3, 0], [38, 77, 6], [1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1], [8, 8, 7, 1, 8, 2, 2, 1], [3, 0, 0, 6], [54, 55], [0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 0, 9, 2, 2, 9, 0, 7, 6, 7, 3, 6, 1, 3, 4, 2, 2, 4, 9, 8, 0, 7, 7, 3, 4, 2, 2, 2, 7, 0, 3, 1, 0, 2, 6, 2, 8, 7, 4, 0, 9, 0, 3, 2, 9, 4, 5, 1, 7, 3, 3, 7, 1, 2, 5, 2, 4, 4, 4, 4, 2, 8, 8, 4, 6, 2, 8, 8], [2, 0, 0, 1, 3, 2, 1, 3, 2, 2, 1, 0, 2, 3, 2, 3, 3, 1, 3, 3, 2, 2, 2, 2, 3, 1, 3, 1, 1, 1, 2, 0, 0, 1, 1, 1, 3, 2, 3, 1, 1, 2, 0, 0, 1, 3, 0], [11, 32, 85, 18, 26, 46]], "fitness": -0.7654285430908203, "mapping_values": [1, 3, 3, 2, 1, 1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.2173438909236136, 1.7185146935848024, 1.274192064114849, 1.0952271036641348, 0.948540730530544, 0.9357846609007145, 0.8558785957257824, 0.801523311664683, 0.7603226664154175, 0.7450580026778751, 0.7712975545188361, 0.7164236042147157, 0.7107557125567697, 0.7004649805244816, 0.6945253920955051], "accuracy": [0.24924051761627197, 0.46612071990966797, 0.5634658336639404, 0.6098269820213318, 0.6579051613807678, 0.6593580842018127, 0.6942279934883118, 0.7073041796684265, 0.7172104120254517, 0.7202483415603638, 0.713379979133606, 0.7305507659912109, 0.7306828498840332, 0.7322678565979004, 0.7434949278831482], "val_loss": [1.695542676108224, 1.023599284035819, 0.8060509307043893, 0.7170920201710292, 0.6701602424894061, 0.6497644186019897, 0.6115732192993164, 0.56953307560512, 0.5457324470792498, 0.5374682630811419, 0.5633755241121564, 0.5745243685586112, 0.5285595996039254, 0.5477360486984253, 0.5168703113283429], "val_accuracy": [0.5013333559036255, 0.6243333220481873, 0.6766666769981384, 0.7110000252723694, 0.7113333344459534, 0.7250000238418579, 0.7363333106040955, 0.762333333492279, 0.762666642665863, 0.7646666765213013, 0.7436666488647461, 0.7300000190734863, 0.7583333253860474, 0.7483333349227905, 0.762333333492279]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1], [8, 4, 1, 1, 3, 9, 3, 4, 1, 6, 8, 0, 2, 3, 9, 5, 7, 5, 1, 8, 9, 8, 1, 6, 5, 0, 3, 3, 3, 5, 1, 8, 8, 1, 0, 3, 9], [2, 3, 2, 0, 0, 2, 0, 0, 2, 1, 1, 1, 1, 1, 0, 2, 0, 0, 2, 0, 2, 2, 2, 0, 2, 2, 1, 2, 3, 3, 2, 2], [96, 64, 17, 0, 60, 59, 23, 22, 72, 1], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 1, 0], [3, 3, 7, 7, 8, 9], [4, 0, 0, 3, 0], [13, 24, 61], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1], [8, 8, 7, 1, 8, 2, 2, 1], [3, 0, 0, 6], [54, 55], [0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 0, 9, 2, 2, 9, 0, 7, 6, 7, 3, 6, 1, 3, 4, 2, 2, 4, 9, 8, 0, 7, 7, 3, 4, 2, 2, 2, 7, 0, 3, 1, 0, 2, 6, 2, 8, 7, 4, 0, 9, 0, 3, 2, 9, 4, 5, 1, 7, 3, 3, 7, 1, 2, 5, 2, 4, 4, 4, 4, 2, 8, 8, 4, 6, 2, 8, 8], [2, 0, 0, 1, 3, 2, 1, 3, 2, 2, 1, 0, 2, 3, 2, 3, 3, 1, 3, 3, 2, 2, 2, 2, 3, 1, 3, 1, 1, 1, 2, 0, 0, 1, 1, 1, 3, 2, 3, 1, 1, 2, 0, 0, 1, 3, 0], [11, 32, 85, 18, 26, 46]], "fitness": -0.49228572845458984, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3013374275456426, 2.3014634899443736, 2.2994938707937416, 2.29613433352173, 2.297020673279466, 2.2946591032431534, 2.295447949767349, 2.2919824415934227, 2.2902467272867693, 2.290359814468392, 2.290043508214501, 2.2888601914908295, 2.2880300783667, 2.2855973701278027, 2.285117424584619, 2.2821712667412055, 2.2826551953012038, 2.2799022776843407, 2.278792007614073, 2.27710993937718, 2.2763180233909153, 2.275576212969533, 2.2726314754030095, 2.273183264043967, 2.2723067694840227, 2.2700693109457157, 2.268571702417775, 2.2661287380546518, 2.2667015721501613, 2.2636638781366534, 2.2637712606554254, 2.2637218326200284, 2.2612011912885897, 2.257388116850152, 2.2582413265340127, 2.256154397632688, 2.254779966012, 2.251980454898734, 2.2521732650523045, 2.2496943424689912, 2.24870387598697, 2.2467098205537686, 2.2456757165437455, 2.244270293688368, 2.241583248407235, 2.2407531418332396, 2.2395495200091036, 2.2378370212667797, 2.2374374143451576, 2.2333743317787595, 2.232404380001491, 2.2302682016189026, 2.2281708883618823, 2.2246003395310323, 2.224368844002686, 2.2244713423573628, 2.222835653666823, 2.219720513167839, 2.2196102575335632, 2.2155779091720773, 2.2143389856527196, 2.2127523655904646, 2.2106420177872375, 2.2076847914140365, 2.2069575651494064, 2.204261035053816, 2.204002611294808, 2.2002216135238406, 2.199336698010865, 2.1956399799007325, 2.1916674240594998, 2.192034662297342, 2.189465413019878, 2.185611439828214, 2.1830363843293314, 2.1805820666000653, 2.180763088212966, 2.1761343750609163, 2.1764774759605245, 2.171644925787748, 2.1672049005191245, 2.166667498491696, 2.1615663428489857, 2.161488081785068, 2.158052252047822, 2.1533712245186387, 2.1532864156510647, 2.1470289901735415, 2.1453014438524853, 2.143820504155913, 2.1391890554726634, 2.1345099324264294, 2.132878437774088, 2.1283165041198346, 2.125098206442361, 2.12408581640994, 2.1215712674903893, 2.1171952654672666, 2.1098762586714805, 2.1082515378968907], "accuracy": [0.09074098616838455, 0.09826971590518951, 0.09972262382507324, 0.10302469879388809, 0.10711926966905594, 0.11055342853069305, 0.10857218503952026, 0.11293092370033264, 0.11781799048185349, 0.11702549457550049, 0.12098798155784607, 0.12534672021865845, 0.12534672021865845, 0.13129045069217682, 0.12640337646007538, 0.1460837423801422, 0.14172500371932983, 0.15017831325531006, 0.15612204372882843, 0.16431118547916412, 0.15810328722000122, 0.16417910158634186, 0.17038699984550476, 0.1670849323272705, 0.16589617729187012, 0.17316074669361115, 0.18121780455112457, 0.18478403985500336, 0.18095363676548004, 0.19561484456062317, 0.1954827606678009, 0.1896711140871048, 0.19574692845344543, 0.2090873122215271, 0.20882314443588257, 0.2082948088645935, 0.20882314443588257, 0.22176727652549744, 0.22018226981163025, 0.22520142793655396, 0.22982433438301086, 0.23761722445487976, 0.2347113937139511, 0.23840972781181335, 0.2366926372051239, 0.2390701323747635, 0.24144762754440308, 0.25214633345603943, 0.24580636620521545, 0.25544843077659607, 0.2587504982948303, 0.2616563141345978, 0.2693171203136444, 0.27578920125961304, 0.27222296595573425, 0.26535463333129883, 0.270109623670578, 0.2859595715999603, 0.2728833854198456, 0.2915070652961731, 0.28701624274253845, 0.29282790422439575, 0.2876766622066498, 0.3027341067790985, 0.29362040758132935, 0.3035266101360321, 0.29705455899238586, 0.30418702960014343, 0.30339452624320984, 0.31184783577919006, 0.3155461549758911, 0.3159424066543579, 0.310130774974823, 0.3199048936367035, 0.3255844712257385, 0.3185840845108032, 0.32320696115493774, 0.33007529377937317, 0.32624489068984985, 0.3333773612976074, 0.3389248549938202, 0.33826443552970886, 0.34341567754745483, 0.3385286033153534, 0.3427552580833435, 0.3549068868160248, 0.3459252417087555, 0.3521331250667572, 0.35120856761932373, 0.3461894094944, 0.3605864346027374, 0.35662394762039185, 0.3535860478878021, 0.35662394762039185, 0.3609826862812042, 0.3625676929950714, 0.3626997768878937, 0.3689076602458954, 0.3719455897808075, 0.3711530864238739], "val_loss": [1.9697634152003698, 1.9685398510524206, 1.9673220770699638, 1.966104234967913, 1.964895452771868, 1.9636807441711426, 1.9624695096697127, 1.9612476485116142, 1.9600470406668526, 1.958841051374163, 1.957639557974679, 1.9564275741577148, 1.9552384104047502, 1.9540252004350935, 1.952831200190953, 1.9516166959490096, 1.9504122052873885, 1.9492193630763464, 1.947993278503418, 1.946753910609654, 1.9455243519374303, 1.9442853927612305, 1.9430440493992396, 1.9418046815054757, 1.9405529839651925, 1.9392850739615304, 1.9380057198660714, 1.936723300388881, 1.9354347501482283, 1.9341352326529366, 1.9328275408063615, 1.9315064293997628, 1.930178506033761, 1.9288150242396764, 1.9274611473083496, 1.9261011396135603, 1.9247229439871651, 1.9233172280447823, 1.9219163485935755, 1.92047153200422, 1.9190255573817663, 1.9175725664411272, 1.9160991396222795, 1.9146056856427873, 1.913088321685791, 1.9115487507411413, 1.9100031852722168, 1.9084340504237585, 1.9068643024989538, 1.9052469389779227, 1.9036339351109095, 1.9019816262381417, 1.9002997534615653, 1.898594788142613, 1.8968757220676966, 1.8951462336948939, 1.893392699105399, 1.891599518912179, 1.8898062705993652, 1.8879714693341936, 1.8861018589564733, 1.884211880820138, 1.8823174749101912, 1.880363600594657, 1.878387791769845, 1.876371247427804, 1.8743404660906111, 1.872265066419329, 1.8701725006103516, 1.8680105209350586, 1.865823541368757, 1.8636321340288435, 1.8613671575273787, 1.8590779985700334, 1.856745992388044, 1.854377065386091, 1.851987361907959, 1.8495533125741142, 1.847102097102574, 1.8445607594081335, 1.8420028686523438, 1.8394124167306083, 1.8367555482046944, 1.8340815816606795, 1.8313467843191964, 1.8285515648978097, 1.8257549830845423, 1.8228778157915388, 1.8199713570731026, 1.8170014108930315, 1.8139871869768416, 1.8109146526881628, 1.8078456606183733, 1.804671151297433, 1.8014767510550362, 1.798253399985177, 1.7949779374258858, 1.79162631716047, 1.7882027626037598, 1.7847513471330916], "val_accuracy": [0.04500000178813934, 0.05233333259820938, 0.058666665107011795, 0.06566666811704636, 0.07433333247900009, 0.0833333358168602, 0.09433333575725555, 0.10366666316986084, 0.11733333021402359, 0.12566666305065155, 0.13500000536441803, 0.15166667103767395, 0.16200000047683716, 0.17399999499320984, 0.18799999356269836, 0.19699999690055847, 0.20633333921432495, 0.22200000286102295, 0.23499999940395355, 0.24699999392032623, 0.2549999952316284, 0.26466667652130127, 0.2736666798591614, 0.2826666533946991, 0.28966665267944336, 0.296999990940094, 0.3033333420753479, 0.3100000023841858, 0.3160000145435333, 0.32066667079925537, 0.3269999921321869, 0.3323333263397217, 0.33666667342185974, 0.3386666774749756, 0.3440000116825104, 0.3486666679382324, 0.3526666760444641, 0.3569999933242798, 0.3583333194255829, 0.36133334040641785, 0.3686666786670685, 0.3713333308696747, 0.37466666102409363, 0.37566667795181274, 0.37833333015441895, 0.3816666603088379, 0.38600000739097595, 0.38733333349227905, 0.38999998569488525, 0.3916666805744171, 0.39399999380111694, 0.39666667580604553, 0.40066665410995483, 0.4026666581630707, 0.406333327293396, 0.40933331847190857, 0.41233333945274353, 0.4156666696071625, 0.4169999957084656, 0.41866666078567505, 0.4203333258628845, 0.42100000381469727, 0.4230000078678131, 0.4266666769981384, 0.429666668176651, 0.43033334612846375, 0.43166667222976685, 0.4350000023841858, 0.43700000643730164, 0.4390000104904175, 0.4416666626930237, 0.44333332777023315, 0.4449999928474426, 0.4466666579246521, 0.4480000138282776, 0.4493333399295807, 0.45133334398269653, 0.4533333480358124, 0.4546666741371155, 0.4543333351612091, 0.4556666612625122, 0.4566666781902313, 0.4586666524410248, 0.4593333303928375, 0.46133333444595337, 0.4633333384990692, 0.46533334255218506, 0.4663333296775818, 0.46833333373069763, 0.4716666638851166, 0.4763333201408386, 0.476666659116745, 0.476666659116745, 0.47833332419395447, 0.4803333282470703, 0.4830000102519989, 0.4846666753292084, 0.4866666793823242, 0.4893333315849304, 0.49000000953674316]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0], [0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1], [6, 2, 5, 8, 3, 9, 8, 0, 5, 6, 8, 0, 2, 3, 9, 5, 7, 5, 1, 8, 9, 8, 1, 6, 5, 0, 3, 3, 3, 5, 1, 8, 8, 1, 0, 3, 9], [2, 2, 2, 0, 0, 2, 1, 0, 2, 1, 1, 1, 1, 1, 0, 2, 0, 0, 2, 0, 2, 2, 2, 0, 2, 2, 1, 2, 3, 3, 2, 2], [96, 64, 17, 0, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 1, 0], [3, 3, 7, 7, 8, 9], [4, 0, 0, 3, 0], [38, 77, 6], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1], [8, 8, 7, 1, 8, 2, 2, 1], [3, 0, 0, 6], [54, 55], [0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [2, 0, 9, 2, 2, 9, 0, 7, 6, 7, 3, 6, 1, 3, 4, 2, 2, 4, 9, 8, 0, 7, 7, 3, 4, 2, 2, 2, 7, 0, 3, 1, 0, 2, 6, 2, 8, 7, 4, 0, 9, 0, 3, 2, 9, 4, 5, 1, 7, 3, 3, 7, 1, 2, 5, 2, 4, 4, 4, 4, 2, 8, 8, 4, 6, 2, 8, 8], [2, 0, 0, 1, 3, 2, 1, 3, 2, 2, 1, 0, 2, 3, 2, 3, 3, 1, 3, 3, 2, 2, 2, 2, 3, 1, 3, 1, 1, 1, 2, 0, 0, 1, 1, 1, 3, 2, 3, 1, 1, 2, 0, 0, 1, 3, 0], [11, 32, 85, 18, 26, 46]], "fitness": -0.11971428245306015, "mapping_values": [1, 7, 7, 4, 3, 0, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.square(grad), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.add(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3025722503977017, 2.3076210637622268, 2.386695144167351, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09760929644107819, 0.09377889335155487, 0.1014397069811821, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9749958174569267, 1.9850775854928153, 3.418825558253697, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.12733332812786102, 0.09966666996479034, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1], [6, 2, 1, 0, 3, 3, 4, 0, 5, 6, 8, 0, 2, 3, 9, 5, 7, 5, 1, 8, 9, 8, 1, 6, 5, 0, 3, 3, 3, 5, 1, 8, 8, 1, 0, 3, 9], [1, 0, 2, 1, 2, 2, 1, 0, 2, 1, 1, 1, 1, 1, 0, 2, 0, 0, 2, 0, 2, 2, 2, 0, 2, 2, 1, 2, 3, 3, 2, 2], [96, 64, 17, 0, 60, 59, 23, 22, 72, 1], [1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 1, 0], [3, 3, 7, 7, 8, 9], [4, 0, 0, 3, 0], [38, 77, 6], [1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1], [8, 8, 7, 1, 8, 2, 2, 1], [3, 0, 0, 6], [54, 55], [0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [8, 0, 9, 2, 2, 9, 0, 7, 6, 7, 3, 6, 1, 3, 4, 2, 2, 4, 9, 8, 0, 7, 7, 3, 4, 2, 2, 2, 7, 0, 3, 1, 0, 2, 6, 2, 8, 7, 4, 0, 9, 0, 3, 2, 9, 4, 5, 1, 7, 3, 3, 7, 1, 2, 5, 2, 4, 4, 4, 4, 2, 8, 8, 4, 6, 2, 8, 8], [2, 0, 0, 1, 3, 2, 1, 3, 2, 2, 1, 0, 2, 3, 2, 3, 3, 1, 3, 3, 2, 2, 2, 2, 3, 1, 3, 1, 1, 1, 2, 0, 0, 1, 1, 1, 3, 2, 3, 1, 1, 2, 0, 0, 1, 3, 0], [11, 32, 85, 18, 26, 46]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 18, 10, 8, 2, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.negative(alpha), tf.math.multiply(tf.math.add(alpha, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, alpha))), tf.math.negative(tf.math.add(alpha, grad)))))), grad), tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1], [6, 2, 1, 8, 3, 9, 3, 0, 5, 6, 8, 0, 2, 3, 9, 5, 7, 5, 1, 8, 9, 8, 1, 6, 5, 0, 3, 3, 3, 5, 1, 8, 8, 1, 0, 3, 9], [2, 3, 2, 0, 0, 2, 1, 0, 2, 1, 1, 1, 1, 1, 0, 2, 0, 0, 2, 0, 2, 2, 2, 0, 2, 2, 1, 2, 3, 3, 2, 2], [96, 64, 17, 0, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 1, 0], [0, 3, 7, 7, 8, 9], [4, 0, 0, 3, 0], [38, 77, 6], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [2, 8, 7, 1, 8, 2, 2, 1], [3, 0, 0, 6], [54, 55], [0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 0, 9, 2, 2, 9, 0, 7, 6, 7, 3, 6, 1, 3, 4, 2, 2, 4, 9, 8, 0, 7, 7, 3, 4, 2, 2, 2, 7, 0, 3, 1, 0, 2, 6, 2, 8, 7, 4, 0, 9, 0, 3, 2, 9, 4, 5, 1, 7, 3, 3, 7, 1, 2, 5, 2, 4, 4, 4, 4, 2, 8, 8, 4, 6, 2, 8, 8], [2, 0, 0, 1, 3, 2, 1, 3, 2, 2, 1, 0, 2, 3, 2, 3, 3, 1, 3, 3, 2, 2, 2, 2, 3, 1, 3, 1, 1, 1, 2, 0, 0, 1, 1, 1, 3, 2, 3, 1, 1, 2, 0, 0, 1, 3, 0], [11, 32, 85, 18, 26, 46]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 6, 4, 2, 2, 2, 1, 1, 0, 3, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(grad, tf.math.sqrt(tf.math.add(alpha, grad)))), tf.math.multiply(tf.math.add(alpha, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07053229212760925, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1], [3, 2, 1, 8, 3, 9, 3, 0, 5, 6, 8, 0, 2, 3, 9, 5, 7, 5, 1, 8, 9, 8, 1, 6, 5, 0, 3, 3, 3, 5, 1, 8, 8, 1, 0, 3, 9], [1, 1, 2, 0, 0, 2, 1, 0, 2, 1, 1, 1, 1, 1, 0, 2, 0, 0, 2, 0, 2, 2, 2, 0, 2, 2, 1, 2, 3, 3, 2, 2], [96, 64, 17, 0, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 1, 0], [3, 3, 7, 7, 8, 9], [4, 0, 0, 3, 0], [38, 77, 6], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1], [8, 8, 7, 1, 8, 2, 2, 1], [3, 0, 0, 6], [54, 55], [1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 0, 9, 2, 2, 9, 0, 7, 6, 7, 3, 6, 1, 3, 4, 2, 2, 4, 9, 8, 0, 7, 7, 3, 4, 2, 2, 2, 7, 0, 3, 1, 0, 2, 6, 2, 8, 7, 4, 0, 9, 0, 3, 2, 9, 4, 5, 1, 7, 3, 3, 7, 1, 2, 5, 2, 4, 4, 4, 4, 2, 8, 8, 4, 6, 2, 8, 8], [2, 0, 0, 1, 3, 2, 1, 3, 2, 2, 1, 0, 2, 3, 2, 3, 3, 1, 3, 3, 2, 2, 2, 2, 3, 1, 3, 1, 1, 1, 2, 0, 0, 1, 1, 1, 3, 2, 3, 1, 1, 2, 0, 0, 1, 3, 0], [11, 32, 85, 18, 26, 46]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 8, 5, 3, 9, 9, 4, 5, 3, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(alpha)), tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))))), tf.math.negative(tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.add(beta, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.4489459102778244, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.03077532723546028, 0.08928807079792023, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [3.6262910025460378, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.03466666489839554, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0], [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1], [6, 2, 1, 8, 3, 9, 3, 0, 5, 6, 8, 0, 2, 3, 9, 5, 7, 5, 1, 8, 9, 8, 1, 6, 5, 0, 3, 3, 3, 5, 1, 8, 8, 1, 0, 3, 9], [1, 1, 2, 0, 0, 2, 1, 0, 2, 1, 1, 1, 1, 1, 0, 2, 0, 0, 2, 0, 2, 2, 2, 0, 2, 2, 1, 2, 3, 3, 2, 2], [96, 64, 17, 0, 60, 59, 23, 22, 72, 1], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0], [0, 1, 0, 1, 0, 1, 1, 1, 0, 0], [3, 3, 7, 7, 8, 9], [4, 1, 0, 3, 0], [38, 77, 6], [1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1], [8, 8, 7, 1, 8, 2, 2, 1], [3, 0, 0, 6], [54, 55], [0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [1, 0, 9, 2, 2, 9, 0, 7, 6, 7, 3, 6, 1, 3, 4, 2, 2, 4, 9, 8, 0, 7, 7, 3, 4, 2, 2, 2, 7, 0, 3, 1, 0, 2, 6, 2, 8, 7, 4, 0, 9, 0, 3, 2, 9, 4, 5, 1, 7, 3, 3, 7, 1, 2, 5, 2, 4, 4, 4, 4, 2, 8, 8, 4, 6, 2, 8, 8], [2, 0, 0, 1, 3, 2, 1, 3, 2, 2, 1, 0, 2, 3, 2, 3, 3, 1, 3, 3, 2, 2, 2, 2, 3, 1, 3, 1, 1, 1, 2, 0, 0, 1, 1, 1, 3, 2, 3, 1, 1, 2, 0, 0, 1, 3, 0], [11, 32, 85, 18, 26, 46]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 7, 7, 3, 4, 1, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [3.0095798759853456, 10.205953168988685, 26.884959221264122, 54.53641518978411, 94.80794535425156, 151.2002058249612], "accuracy": [0.09853387624025345, 0.10315678268671036, 0.09853387624025345, 0.10817593336105347, 0.10210011899471283, 0.10130762308835983], "val_loss": [3.8182405744280135, 11.442135402134486, 25.38975034441267, 46.96089717320034, 77.68674795968192, 119.32506888253349], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1], [6, 2, 2, 2, 6, 7, 3, 0, 5, 6, 8, 0, 2, 3, 9, 5, 7, 5, 1, 8, 9, 8, 1, 6, 5, 0, 3, 3, 3, 5, 1, 8, 8, 1, 0, 3, 9], [2, 3, 2, 0, 0, 0, 1, 1, 2, 1, 1, 1, 1, 1, 0, 2, 0, 0, 2, 0, 2, 2, 2, 0, 2, 2, 1, 2, 3, 3, 2, 2], [74, 72, 17, 0, 60, 59, 23, 22, 72, 1], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 1, 0], [3, 3, 7, 7, 8, 9], [4, 0, 0, 3, 0], [38, 77, 6], [1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1], [8, 8, 7, 1, 8, 2, 2, 1], [3, 0, 0, 6], [54, 55], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 0, 9, 2, 2, 9, 0, 7, 6, 7, 3, 6, 1, 3, 4, 2, 2, 4, 9, 8, 0, 7, 7, 3, 4, 2, 2, 2, 7, 0, 3, 1, 0, 2, 6, 2, 8, 7, 4, 0, 9, 0, 3, 2, 9, 4, 5, 1, 7, 3, 3, 7, 1, 2, 5, 2, 4, 4, 4, 4, 2, 8, 8, 4, 6, 2, 8, 8], [2, 0, 0, 1, 3, 2, 1, 3, 2, 2, 1, 0, 2, 3, 2, 3, 3, 1, 3, 3, 2, 2, 2, 2, 3, 1, 3, 1, 1, 1, 2, 0, 0, 1, 1, 1, 3, 2, 3, 1, 1, 2, 0, 0, 1, 3, 0], [11, 32, 85, 18, 26, 46]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 16, 8, 8, 3, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(grad, tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(beta))", "other_info": {"loss": [2.4461176171829955, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.030643243342638016, 0.09430722147226334, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [3.386509759085519, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.023333333432674408, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1], [6, 4, 1, 8, 3, 9, 5, 6, 1, 6, 8, 0, 2, 3, 9, 5, 7, 5, 1, 8, 9, 8, 1, 6, 5, 0, 3, 3, 3, 5, 1, 8, 8, 1, 0, 3, 9], [3, 1, 2, 0, 0, 0, 1, 0, 2, 1, 1, 1, 1, 1, 0, 2, 0, 0, 2, 0, 2, 2, 2, 0, 2, 2, 1, 2, 3, 3, 2, 2], [96, 64, 10, 0, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0], [1, 0, 1, 1, 0, 0, 1, 1, 1, 0], [4, 3, 7, 7, 8, 9], [5, 0, 0, 3, 0], [38, 49, 61], [1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1], [8, 8, 7, 1, 8, 2, 2, 1], [3, 0, 0, 6], [54, 55], [1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 0, 9, 2, 2, 9, 0, 7, 6, 7, 3, 6, 1, 3, 4, 2, 2, 4, 9, 8, 0, 7, 7, 3, 4, 2, 2, 2, 7, 0, 3, 1, 0, 2, 6, 2, 8, 7, 4, 0, 9, 0, 3, 2, 9, 4, 5, 1, 7, 3, 3, 7, 1, 2, 5, 2, 4, 4, 4, 4, 2, 8, 8, 4, 6, 2, 8, 8], [2, 0, 0, 1, 3, 2, 1, 3, 2, 2, 1, 0, 2, 3, 2, 3, 3, 1, 3, 3, 2, 2, 2, 2, 3, 1, 3, 1, 1, 1, 2, 0, 0, 1, 1, 1, 3, 2, 3, 1, 1, 2, 0, 0, 1, 3, 0], [11, 32, 85, 18, 26, 46]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 11, 7, 4, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(grad, tf.math.add(alpha, tf.math.subtract(tf.math.sqrt(alpha), tf.math.add(alpha, grad)))), tf.math.multiply(tf.math.add(alpha, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07053229212760925, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0], [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1], [6, 2, 1, 8, 3, 9, 3, 0, 5, 6, 8, 0, 2, 3, 9, 5, 7, 5, 1, 8, 9, 8, 1, 6, 5, 0, 3, 3, 3, 5, 1, 8, 8, 1, 0, 3, 9], [2, 3, 2, 0, 0, 2, 1, 0, 2, 1, 1, 1, 1, 1, 0, 2, 0, 0, 2, 0, 2, 2, 2, 0, 2, 2, 1, 2, 3, 3, 2, 2], [96, 64, 17, 0, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 1, 0], [3, 3, 7, 7, 8, 9], [4, 1, 0, 3, 0], [38, 77, 6], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1], [8, 8, 7, 1, 8, 2, 2, 1], [3, 0, 0, 6], [54, 55], [0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 0, 9, 2, 2, 9, 0, 7, 6, 7, 3, 6, 1, 3, 4, 2, 2, 4, 9, 8, 0, 7, 7, 3, 4, 2, 2, 2, 7, 0, 3, 1, 0, 2, 6, 2, 8, 7, 4, 0, 9, 0, 3, 2, 9, 4, 5, 1, 7, 3, 3, 7, 1, 2, 5, 2, 4, 4, 4, 4, 2, 8, 8, 4, 6, 2, 8, 8], [2, 0, 0, 1, 3, 2, 1, 3, 2, 2, 1, 0, 2, 3, 2, 3, 3, 1, 3, 3, 2, 2, 2, 2, 3, 1, 3, 1, 1, 1, 2, 0, 0, 1, 1, 1, 3, 2, 3, 1, 1, 2, 0, 0, 1, 3, 0], [11, 32, 85, 18, 26, 46]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06987188011407852, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1], [6, 2, 1, 8, 3, 9, 3, 0, 5, 6, 8, 0, 2, 3, 9, 5, 7, 5, 1, 8, 9, 8, 1, 6, 5, 0, 3, 3, 3, 5, 1, 8, 8, 1, 0, 3, 9], [1, 1, 2, 0, 0, 2, 1, 0, 2, 1, 1, 1, 1, 1, 0, 2, 0, 0, 2, 0, 2, 2, 2, 0, 2, 2, 1, 2, 3, 3, 2, 2], [96, 64, 24, 0, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 1, 0], [3, 3, 7, 7, 8, 9], [4, 1, 0, 3, 0], [38, 77, 6], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [5, 8, 7, 1, 8, 2, 2, 1], [3, 0, 0, 6], [54, 55], [0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 0, 9, 2, 2, 9, 0, 7, 6, 7, 3, 6, 1, 3, 4, 2, 2, 4, 9, 8, 0, 7, 7, 3, 4, 2, 2, 2, 7, 0, 3, 1, 0, 2, 6, 2, 8, 7, 4, 0, 9, 0, 3, 2, 9, 4, 5, 1, 7, 3, 3, 7, 1, 2, 5, 2, 4, 4, 4, 4, 2, 8, 8, 4, 6, 2, 8, 8], [2, 0, 0, 1, 3, 2, 1, 3, 2, 2, 1, 0, 2, 3, 2, 3, 3, 1, 3, 3, 2, 2, 2, 2, 3, 1, 3, 1, 1, 1, 2, 0, 0, 1, 1, 1, 3, 2, 3, 1, 1, 2, 0, 0, 1, 3, 0], [11, 32, 85, 18, 26, 46]], "fitness": -0.035999998450279236, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 3, 2, 2, 0, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.math.sqrt(sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.30187089716234, 2.3033009724547093, 2.3026177783321633, 2.300553305494535, 2.3026946895016405, 2.301628563303627], "accuracy": [0.08849557489156723, 0.09391097724437714, 0.09219389408826828, 0.09325055778026581, 0.09325055778026581, 0.0936468094587326], "val_loss": [1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056], "val_accuracy": [0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1], [8, 2, 1, 8, 3, 8, 6, 5, 5, 6, 8, 0, 2, 3, 9, 5, 7, 5, 1, 8, 9, 8, 1, 6, 5, 0, 3, 3, 3, 5, 1, 8, 8, 1, 0, 3, 9], [2, 3, 2, 0, 0, 2, 1, 0, 2, 1, 1, 1, 1, 1, 0, 2, 0, 0, 2, 0, 2, 2, 2, 0, 2, 2, 1, 2, 3, 3, 2, 2], [96, 64, 17, 0, 60, 59, 23, 22, 72, 1], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 1, 0], [3, 3, 7, 7, 8, 9], [3, 2, 0, 3, 0], [38, 77, 6], [1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1], [8, 8, 7, 1, 8, 2, 2, 1], [3, 0, 0, 6], [54, 55], [0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 0, 9, 2, 2, 9, 0, 7, 6, 7, 3, 6, 1, 3, 4, 2, 2, 4, 9, 8, 0, 7, 7, 3, 4, 2, 2, 2, 7, 0, 3, 1, 0, 2, 6, 2, 8, 7, 4, 0, 9, 0, 3, 2, 9, 4, 5, 1, 7, 3, 3, 7, 1, 2, 5, 2, 4, 4, 4, 4, 2, 8, 8, 4, 6, 2, 8, 8], [2, 0, 0, 1, 3, 2, 1, 3, 2, 2, 1, 0, 2, 3, 2, 3, 3, 1, 3, 3, 2, 2, 2, 2, 3, 1, 3, 1, 1, 1, 2, 0, 0, 1, 1, 1, 3, 2, 3, 1, 1, 2, 0, 0, 1, 3, 0], [11, 32, 85, 18, 26, 46]], "fitness": -0.035999998450279236, "mapping_values": [1, 7, 7, 4, 3, 0, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(grad)), grad)), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.30187089716234, 2.3033009724547093, 2.3026177783321633, 2.300553305494535, 2.3026946895016405, 2.301628563303627], "accuracy": [0.08849557489156723, 0.09391097724437714, 0.09219389408826828, 0.09325055778026581, 0.09325055778026581, 0.0936468094587326], "val_loss": [1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056], "val_accuracy": [0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1], [6, 8, 1, 8, 3, 9, 3, 4, 1, 6, 8, 0, 2, 3, 9, 5, 7, 5, 1, 8, 9, 8, 1, 6, 5, 0, 3, 3, 3, 5, 1, 8, 8, 1, 0, 3, 9], [2, 3, 2, 0, 0, 2, 0, 0, 2, 1, 1, 1, 1, 1, 0, 2, 0, 0, 2, 0, 2, 2, 2, 0, 2, 2, 1, 2, 3, 3, 2, 2], [96, 64, 17, 0, 60, 59, 23, 22, 72, 1], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 1, 0], [3, 3, 7, 7, 8, 9], [3, 0, 0, 3, 0], [38, 24, 61], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1], [8, 8, 7, 1, 8, 2, 2, 1], [3, 0, 0, 6], [54, 55], [0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [3, 0, 9, 2, 2, 9, 0, 7, 6, 7, 3, 6, 1, 3, 4, 2, 2, 4, 9, 8, 0, 7, 7, 3, 4, 2, 2, 2, 7, 0, 3, 1, 0, 2, 6, 2, 8, 7, 4, 0, 9, 0, 3, 2, 9, 4, 5, 1, 7, 3, 3, 7, 1, 2, 5, 2, 4, 4, 4, 4, 2, 8, 8, 4, 6, 2, 8, 8], [2, 0, 0, 1, 3, 2, 1, 3, 2, 2, 1, 0, 2, 3, 2, 3, 3, 1, 3, 3, 2, 2, 2, 2, 3, 1, 3, 1, 1, 1, 2, 0, 0, 1, 1, 1, 3, 2, 3, 1, 1, 2, 0, 0, 1, 3, 0], [11, 32, 85, 18, 26, 46]], "fitness": -0.0357142873108387, "mapping_values": [1, 15, 15, 9, 6, 3, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.subtract(tf.math.sqrt(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))), grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3019006390849346, 2.303402613466127, 2.3027905355339366, 2.300797902991381, 2.303009324306195, 2.302014462054445], "accuracy": [0.0882314071059227, 0.09391097724437714, 0.09206181764602661, 0.09311848133802414, 0.09219389408826828, 0.09232597798109055], "val_loss": [1.9710675648280553, 1.9711350032261439, 1.9712023053850447, 1.9712700162615096, 1.9713373865400041, 1.9714048930576868], "val_accuracy": [0.03733333200216293, 0.03633333370089531, 0.03533333167433739, 0.03500000014901161, 0.03466666489839554, 0.03466666489839554]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1], [6, 2, 1, 2, 3, 9, 3, 0, 6, 6, 8, 0, 2, 3, 9, 5, 7, 5, 1, 8, 9, 8, 1, 6, 5, 0, 3, 3, 3, 5, 1, 8, 8, 1, 0, 3, 9], [1, 2, 2, 2, 0, 2, 1, 0, 2, 1, 1, 1, 1, 1, 0, 2, 0, 0, 2, 0, 2, 2, 2, 0, 2, 2, 1, 2, 3, 3, 2, 2], [2, 15, 38, 0, 60, 59, 23, 22, 72, 1], [0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0], [0, 1, 0, 1, 0, 1, 1, 1, 1, 0], [3, 3, 7, 7, 8, 9], [5, 0, 0, 3, 0], [38, 24, 6], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1], [8, 8, 7, 1, 8, 2, 2, 1], [3, 0, 0, 6], [54, 55], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 0, 9, 2, 2, 9, 0, 7, 6, 7, 3, 6, 1, 3, 4, 2, 2, 4, 9, 8, 0, 7, 7, 3, 4, 2, 2, 2, 7, 0, 3, 1, 0, 2, 6, 2, 8, 7, 4, 0, 9, 0, 3, 2, 9, 4, 5, 1, 7, 3, 3, 7, 1, 2, 5, 2, 4, 4, 4, 4, 2, 8, 8, 4, 6, 2, 8, 8], [2, 0, 0, 1, 3, 2, 1, 3, 2, 2, 1, 0, 2, 3, 2, 3, 3, 1, 3, 3, 2, 2, 2, 2, 3, 1, 3, 1, 1, 1, 2, 0, 0, 1, 1, 1, 3, 2, 3, 1, 1, 2, 0, 0, 1, 3, 0], [11, 32, 85, 18, 26, 46]], "fitness": -0.03228571265935898, "mapping_values": [1, 13, 13, 7, 6, 2, 7, 7, 3, 4, 2, 1, 1, 0, 1, 0, 3, 2, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.add(alpha, grad), tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(beta))", "other_info": {"loss": [2.3023330911181117, 2.3049687951263924, 2.305485384449463, 2.3046635472306862, 2.3081039137859793, 2.308295915816769], "accuracy": [0.08730682730674744, 0.08994849026203156, 0.08572183549404144, 0.08611807972192764, 0.08241976052522659, 0.07911768555641174], "val_loss": [1.9720782552446638, 1.9732112884521484, 1.9743552207946777, 1.9755278314862932, 1.9767424719674247, 1.9779635156903947], "val_accuracy": [0.03166666626930237, 0.027000000700354576, 0.02266666665673256, 0.019999999552965164, 0.01733333244919777, 0.014666666276752949]}}]