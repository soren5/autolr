[{"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 6, 0, 2, 1, 2, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [0, 2, 0, 0, 2, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [69, 33, 13, 17, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 5, 3, 3, 0], [38, 43, 6], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [5, 3, 7, 1, 8, 2, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.8482857346534729, "mapping_values": [1, 17, 17, 10, 7, 3, 3, 3, 1, 2, 1, 2, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), grad), tf.math.add(alpha, grad)))), tf.math.square(tf.math.add(alpha, grad)))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.041407979521942, 1.106755124099219, 0.7905684546976514, 0.7095070489251839, 0.657919240586746, 0.5918110403733058, 0.5579324602891803, 0.5203363263784949, 0.490057032787096, 0.46812796075078617, 0.4569155850296779, 0.43665131442361993, 0.432108193214748, 0.41345467520286033, 0.39334028331421905, 0.389155303506079, 0.3755035692902919, 0.36331946384385594, 0.3513714634802174, 0.3448607215571476, 0.334731774488539, 0.333457831839025, 0.3338691749868455, 0.3226803179272823, 0.3063980441177841, 0.30559850552724166, 0.2952154213765577, 0.28866541862346085, 0.28775012210107925, 0.2737995527990742, 0.2686929512749794, 0.25656834550781527, 0.24752354618738104], "accuracy": [0.30260202288627625, 0.6079778075218201, 0.7104741930961609, 0.7391361594200134, 0.757099449634552, 0.7821952104568481, 0.7957997918128967, 0.8113855719566345, 0.8170651197433472, 0.8342359066009521, 0.8293488025665283, 0.8425571322441101, 0.8388587832450867, 0.8533879518508911, 0.8516708612442017, 0.8568220734596252, 0.8601241707801819, 0.868049144744873, 0.8685774803161621, 0.8730682730674744, 0.8749174475669861, 0.8754457831382751, 0.8799365758895874, 0.8796724081039429, 0.885219931602478, 0.8823140859603882, 0.8882578015327454, 0.8931449055671692, 0.8898428082466125, 0.8951261639595032, 0.898428201675415, 0.8986923694610596, 0.9037115573883057], "val_loss": [0.9285337584359306, 0.6291748625891549, 0.5905150856290545, 0.5257629156112671, 0.4864081995827811, 0.4518824304853167, 0.4315166728837149, 0.4107006532805307, 0.3854240434510367, 0.379218476159232, 0.38226682799203054, 0.3688229833330427, 0.36742756196430754, 0.3426203046526228, 0.3352358341217041, 0.3305133410862514, 0.33316195011138916, 0.3228014366967337, 0.3165694219725473, 0.30863592454365324, 0.31231433153152466, 0.3112559829439436, 0.30783078500202726, 0.3080512114933559, 0.2961029069764273, 0.305873623916081, 0.29364012820380075, 0.2875919682638986, 0.29164708512169973, 0.2927860532488142, 0.2901126742362976, 0.2928467733519418, 0.30131109271730694], "val_accuracy": [0.6443333625793457, 0.7286666631698608, 0.7316666841506958, 0.7616666555404663, 0.7846666574478149, 0.7983333468437195, 0.8090000152587891, 0.8140000104904175, 0.8316666483879089, 0.8379999995231628, 0.8256666660308838, 0.831333339214325, 0.8353333473205566, 0.8510000109672546, 0.8503333330154419, 0.8533333539962769, 0.8496666550636292, 0.8556666374206543, 0.8576666712760925, 0.8616666793823242, 0.8650000095367432, 0.862333357334137, 0.8640000224113464, 0.8669999837875366, 0.8693333268165588, 0.8683333396911621, 0.8726666569709778, 0.8776666522026062, 0.8743333220481873, 0.875333309173584, 0.8756666779518127, 0.874666690826416, 0.8703333139419556]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 6, 0, 2, 5, 9, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 1, 0, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [92, 82, 13, 17, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 43, 6], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [3, 3, 7, 1, 8, 2, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.845714271068573, "mapping_values": [1, 17, 17, 12, 5, 3, 3, 3, 1, 2, 1, 5, 3, 2, 1, 0, 2, 1, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(alpha, tf.math.add(grad, tf.math.square(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, alpha))))), tf.math.negative(tf.math.add(alpha, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.041408046975726, 1.1067019154162314, 0.790456498311637, 0.7092187251664895, 0.6584432152961113, 0.5923804154784656, 0.5587623650922814, 0.521378982383593, 0.4887810331278347, 0.47017849820983754, 0.4576644459341999, 0.4378400691086826, 0.43159280858885707, 0.4122818667599554, 0.39131051328723554, 0.3872553088039597, 0.38221696170723246, 0.3635953606914898, 0.3529026995182604, 0.34871757770526235, 0.3369607805670402, 0.33246962261820323, 0.33518626118033806, 0.314309917062643, 0.29870891062464805, 0.30073796610050607, 0.2945213065667317, 0.2861461181367283, 0.2790466537998022, 0.26897299450307616, 0.27077241127580115, 0.26299591871056466, 0.24752647039314318, 0.2443980649517134, 0.23431623694509673, 0.22878787156109323, 0.21977929932534845, 0.22231868668562071, 0.22777123152304318, 0.22696762500603154, 0.21645195770178646], "accuracy": [0.30260202288627625, 0.6081098914146423, 0.7104741930961609, 0.7384757399559021, 0.7560427784919739, 0.78113853931427, 0.7952714562416077, 0.8125742673873901, 0.8181217908859253, 0.8345000743865967, 0.8308017253875732, 0.8397833704948425, 0.8428213000297546, 0.8532558679580688, 0.8543124794960022, 0.8580108284950256, 0.8593316674232483, 0.8651432991027832, 0.8714832663536072, 0.8687095642089844, 0.8786157965660095, 0.8747853636741638, 0.8745211958885193, 0.8831065893173218, 0.887201189994812, 0.8844274282455444, 0.889578640460968, 0.8928807377815247, 0.8928807377815247, 0.8973715305328369, 0.8967111110687256, 0.898428201675415, 0.9070135951042175, 0.9043719172477722, 0.9096552729606628, 0.9138818979263306, 0.9170519113540649, 0.9173160791397095, 0.9129573106765747, 0.9126931428909302, 0.9166556596755981], "val_loss": [0.9285332475389753, 0.6291710649217878, 0.5906874963215419, 0.5258085387093681, 0.48638553278786795, 0.4525214944566999, 0.4322572776249477, 0.41006829057421, 0.38334814991269794, 0.37716484921319143, 0.3837389860834394, 0.36280847447259085, 0.36244830914906095, 0.33775516067232403, 0.3344841088567461, 0.33642520223345074, 0.330038275037493, 0.31986463921410696, 0.3162115642002651, 0.3114294409751892, 0.3112767594201224, 0.31080107178006855, 0.3016879899161203, 0.3058481642178127, 0.29082865374428885, 0.3030742236546108, 0.2913593735013689, 0.290537212576185, 0.2952338286808559, 0.29230179105486187, 0.2916219319616045, 0.28872982944761005, 0.30125377007893156, 0.2892958010946001, 0.291032680443355, 0.2861047812870571, 0.3000867026192801, 0.3021456173488072, 0.3149549961090088, 0.2991587945393154, 0.30200253214154926], "val_accuracy": [0.6443333625793457, 0.7289999723434448, 0.731333315372467, 0.762333333492279, 0.7856666445732117, 0.7950000166893005, 0.8059999942779541, 0.8130000233650208, 0.8330000042915344, 0.8373333215713501, 0.8276666402816772, 0.8379999995231628, 0.8366666436195374, 0.8486666679382324, 0.8513333201408386, 0.8516666889190674, 0.8560000061988831, 0.8603333234786987, 0.859666645526886, 0.8603333234786987, 0.8616666793823242, 0.862333357334137, 0.8643333315849304, 0.8690000176429749, 0.8723333477973938, 0.874666690826416, 0.8769999742507935, 0.8726666569709778, 0.8769999742507935, 0.8743333220481873, 0.8793333172798157, 0.874666690826416, 0.8706666827201843, 0.875, 0.878333330154419, 0.8849999904632568, 0.8803333044052124, 0.8759999871253967, 0.8723333477973938, 0.8816666603088379, 0.8763333559036255]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 6, 0, 2, 1, 5, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [0, 2, 1, 0, 0, 2, 0, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [69, 33, 13, 17, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 5, 3, 3, 0], [38, 43, 6], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [5, 3, 7, 1, 8, 2, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.8428571224212646, "mapping_values": [1, 6, 6, 4, 2, 1, 3, 3, 1, 2, 1, 2, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(grad))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.041408044739863, 1.1067561070050829, 0.7905957907922453, 0.7097200436945431, 0.6585661072646622, 0.590972047448237, 0.5582400504718635, 0.5206498260889165, 0.490360346881705, 0.4678092776524503, 0.4575100240375482, 0.4392134058925816, 0.43398672984323766, 0.4141850907096238, 0.3920712926053667, 0.38821229468940066, 0.3800105637980333, 0.3584976289502508, 0.3479176059162549, 0.3447083631731405, 0.33393827503493684, 0.32938279793514724, 0.33207254750837883, 0.3185232798216476, 0.3007247448361167, 0.2987272522043574, 0.29555373214821945, 0.2856829208492241, 0.28130517916129233, 0.2722547450133004, 0.2661634842441885, 0.26151702099858243, 0.248010117986246, 0.2456773571043187, 0.23794820355606935, 0.23258961143353202, 0.2227066274584245, 0.21783980759277224, 0.21337763744102195, 0.2098289260385122, 0.20876968092355336, 0.19401273642312486, 0.19194766355346554, 0.20043435190898898, 0.19272463007917054, 0.18091958650012516, 0.18113462327769278, 0.1760470102554803, 0.17926195132190745, 0.1770694318673142], "accuracy": [0.30260202288627625, 0.6079778075218201, 0.7107383608818054, 0.7388719916343689, 0.7568352818489075, 0.7816668748855591, 0.7960638999938965, 0.8108572363853455, 0.8181217908859253, 0.8347642421722412, 0.8315942287445068, 0.841500461101532, 0.8411042094230652, 0.8491612672805786, 0.8536521196365356, 0.8558974862098694, 0.8598600029945374, 0.8692378997802734, 0.8725399374961853, 0.8709549307823181, 0.8765024542808533, 0.8749174475669861, 0.8794082403182983, 0.878879964351654, 0.8861445188522339, 0.8829745054244995, 0.8897107243537903, 0.8945978283882141, 0.8912957310676575, 0.8967111110687256, 0.9005415439605713, 0.898428201675415, 0.9078060984611511, 0.9074098467826843, 0.9060890078544617, 0.9085986018180847, 0.9157310724258423, 0.9186369180679321, 0.9210143685340881, 0.921938955783844, 0.9203540086746216, 0.9252410531044006, 0.9266939759254456, 0.9236560463905334, 0.9261656403541565, 0.9282789826393127, 0.927882730960846, 0.9335622787475586, 0.9309206008911133, 0.9315810203552246], "val_loss": [0.9285332475389753, 0.6291633333478656, 0.5911622388022286, 0.5262981482914516, 0.4863377468926566, 0.4530360017504011, 0.43288201093673706, 0.41338675362723215, 0.38781854084559847, 0.37765540395464214, 0.3809225218636649, 0.37235186781202045, 0.3671979137829372, 0.3382335049765451, 0.3350360904421125, 0.3295418109212603, 0.33076678003583637, 0.32176933118275236, 0.3141550932611738, 0.3056731734957014, 0.3071697865213667, 0.3158049924033029, 0.308840879372188, 0.3057746376310076, 0.29319844927106586, 0.29900875261851717, 0.2921487092971802, 0.29405771834509714, 0.29597226211002897, 0.287241314138685, 0.29516613483428955, 0.28850548607962473, 0.3030895335333688, 0.29530201639447895, 0.29279336759022306, 0.29061546495982576, 0.2938887391771589, 0.2974455441747393, 0.29731705359050203, 0.29387112174715313, 0.29939456496919903, 0.3036606226648603, 0.2969456740788051, 0.30718765939985004, 0.2928373047283718, 0.30013575724193026, 0.30168854338782175, 0.30791719470705303, 0.30964394978114534, 0.312194892338344], "val_accuracy": [0.6443333625793457, 0.7286666631698608, 0.7310000061988831, 0.7603333592414856, 0.7860000133514404, 0.7990000247955322, 0.8063333630561829, 0.8143333196640015, 0.8276666402816772, 0.8386666774749756, 0.8263333439826965, 0.8293333053588867, 0.8339999914169312, 0.8486666679382324, 0.8503333330154419, 0.8543333411216736, 0.8546666502952576, 0.8573333621025085, 0.8600000143051147, 0.8600000143051147, 0.8629999756813049, 0.8586666584014893, 0.8646666407585144, 0.8673333525657654, 0.8726666569709778, 0.8666666746139526, 0.8740000128746033, 0.8773333430290222, 0.871999979019165, 0.8790000081062317, 0.8766666650772095, 0.8796666860580444, 0.8733333349227905, 0.8763333559036255, 0.8776666522026062, 0.8830000162124634, 0.8796666860580444, 0.8776666522026062, 0.8796666860580444, 0.8846666812896729, 0.8773333430290222, 0.8820000290870667, 0.8809999823570251, 0.8806666731834412, 0.8886666893959045, 0.8833333253860474, 0.8846666812896729, 0.8813333511352539, 0.8809999823570251, 0.8849999904632568]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 6, 0, 4, 5, 2, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [0, 1, 0, 0, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [3, 33, 13, 17, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 5, 3, 3, 0], [38, 43, 6], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [3, 3, 7, 1, 8, 2, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.8391428589820862, "mapping_values": [1, 15, 15, 9, 6, 4, 3, 3, 1, 2, 1, 3, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(tf.math.add(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.041408283063969, 1.1067374036013253, 0.7910666783188848, 0.7103250745013248, 0.6592088869187684, 0.5914279738390182, 0.5569779132933838, 0.5215502559406536, 0.48680784535870936, 0.4683324191091933, 0.45589197358246164, 0.43967978181367884, 0.4301479948809307, 0.40792445310779835, 0.38959461859172884, 0.3862934448479378, 0.376606816420261, 0.3608764957372365, 0.3526889778769106, 0.3427532963615131, 0.33544819982233554, 0.33207722101323656, 0.32932657808392135, 0.31617684382268735, 0.30360536210966177, 0.2992954613600803, 0.293984932197855, 0.2855458246631834, 0.2831041485783667, 0.26816134952503723, 0.2642122892781712, 0.2589392409785517, 0.24744898689389938, 0.2445142240477685, 0.23372063738653262, 0.22632840154130365, 0.21838113853346008, 0.2105538495688973, 0.2099665042242716, 0.2074449595628303, 0.2029584823696605, 0.19004409409997455], "accuracy": [0.30260202288627625, 0.6083740592002869, 0.7106062769889832, 0.7378153204917908, 0.7580240368843079, 0.7819310426712036, 0.7922335267066956, 0.8112534880638123, 0.8189142942428589, 0.8333113193511963, 0.8310658931732178, 0.8401796221733093, 0.844010055065155, 0.8549728989601135, 0.8562937378883362, 0.8562937378883362, 0.8640866279602051, 0.8685774803161621, 0.8720116019248962, 0.8698983192443848, 0.8753136992454529, 0.8746532797813416, 0.8759741187095642, 0.8805969953536987, 0.8887861371040344, 0.8854840993881226, 0.8910315632820129, 0.894069492816925, 0.8934090733528137, 0.8972394466400146, 0.9009377956390381, 0.89988112449646, 0.9075419306755066, 0.9085986018180847, 0.9097873568534851, 0.9122969508171082, 0.9189010858535767, 0.9185048341751099, 0.9191652536392212, 0.9199577569961548, 0.9243164658546448, 0.9247127175331116], "val_loss": [0.9285354614257812, 0.6291251863752093, 0.5910577092851911, 0.5273080553327288, 0.48692340510232107, 0.4531733819416591, 0.4318421483039856, 0.40680175168173655, 0.3877675107547215, 0.37523612805775236, 0.3820848379816328, 0.3579560262816293, 0.35357474429266794, 0.33908415692193167, 0.3319418600627354, 0.3311528818947928, 0.3268067411014012, 0.3197373492377145, 0.3188733884266445, 0.3049499647957938, 0.3154389262199402, 0.3103092057364328, 0.3072219491004944, 0.3077134149415152, 0.2941074882234846, 0.30130782297679354, 0.2878713607788086, 0.29349093777792795, 0.2964364545685904, 0.29099851846694946, 0.28776910475322176, 0.28948135886873516, 0.2959691286087036, 0.28474460329328266, 0.2922925182751247, 0.2904204641069685, 0.2916931084224156, 0.30028596946171354, 0.2945463572229658, 0.29062364782605854, 0.3037557772227696, 0.30261204072407316], "val_accuracy": [0.6443333625793457, 0.7286666631698608, 0.7323333621025085, 0.7586666941642761, 0.7866666913032532, 0.7963333129882812, 0.8066666722297668, 0.8199999928474426, 0.8259999752044678, 0.8393333554267883, 0.8259999752044678, 0.8373333215713501, 0.8443333506584167, 0.8473333120346069, 0.8539999723434448, 0.8546666502952576, 0.8576666712760925, 0.8606666922569275, 0.8603333234786987, 0.8600000143051147, 0.8600000143051147, 0.8600000143051147, 0.8673333525657654, 0.8659999966621399, 0.8736666440963745, 0.8703333139419556, 0.8743333220481873, 0.871999979019165, 0.871999979019165, 0.8769999742507935, 0.878333330154419, 0.8769999742507935, 0.8763333559036255, 0.8809999823570251, 0.8796666860580444, 0.8830000162124634, 0.8856666684150696, 0.8790000081062317, 0.8843333125114441, 0.8856666684150696, 0.878333330154419, 0.8820000290870667]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 6, 9, 2, 4, 9, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [0, 2, 0, 0, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [69, 33, 13, 17, 60, 59, 23, 22, 72, 1], [0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 5, 3, 3, 0], [38, 43, 6], [1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1], [5, 3, 7, 1, 8, 2, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.7945713996887207, "mapping_values": [1, 3, 3, 2, 1, 1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.2111676606866175, 1.6551333680806017, 1.2025948528915333, 1.0186429230874918, 0.9381506933968821, 0.8582053424234735, 0.8186286734142765, 0.7705448287872669, 0.750481202326525, 0.7410899059978128, 0.7050726257924942, 0.6961940431544463, 0.6743777546632591, 0.6866353485546784, 0.6523665468359919, 0.6509509053936944, 0.6375075637499071, 0.630102945277877, 0.6248799682356316, 0.6150443303413426, 0.5991640825313175, 0.5925635861966273, 0.5918528125144707, 0.5854623105783882], "accuracy": [0.2522784173488617, 0.4760269522666931, 0.5801082849502563, 0.6433760523796082, 0.6627922058105469, 0.6933034062385559, 0.6970016956329346, 0.7181349992752075, 0.7195879220962524, 0.7250033020973206, 0.7420420050621033, 0.7380794882774353, 0.7489103078842163, 0.7424382567405701, 0.757099449634552, 0.7556465268135071, 0.7556465268135071, 0.7604015469551086, 0.7677981853485107, 0.7696473598480225, 0.778761088848114, 0.7751948237419128, 0.7771760821342468, 0.7840443849563599], "val_loss": [1.665766750063215, 0.9497567244938442, 0.8586597272327968, 0.6920651027134487, 0.6455037253243583, 0.5936778443200248, 0.5929816790989467, 0.5830187286649432, 0.5563969271523612, 0.5357529946735927, 0.5302662338529315, 0.5114973953792027, 0.5286884989057269, 0.5023899078369141, 0.48026110444750103, 0.5046162945883614, 0.4821570941380092, 0.47728512968335834, 0.46381560393742155, 0.46431398391723633, 0.4605344363621303, 0.4836114134107317, 0.4548915113721575, 0.4452580043247768], "val_accuracy": [0.5476666688919067, 0.668666660785675, 0.6463333368301392, 0.7149999737739563, 0.7266666889190674, 0.7509999871253967, 0.7516666650772095, 0.7490000128746033, 0.7649999856948853, 0.7613333463668823, 0.7599999904632568, 0.7699999809265137, 0.7670000195503235, 0.7829999923706055, 0.7883333563804626, 0.7753333449363708, 0.7839999794960022, 0.7839999794960022, 0.8026666641235352, 0.7956666946411133, 0.7993333339691162, 0.7839999794960022, 0.7903333306312561, 0.8016666769981384]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 6, 0, 2, 5, 9, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 0, 0, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [52, 64, 13, 17, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 3, 3, 3, 0], [23, 43, 6], [0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [2, 4, 7, 1, 8, 2, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.7697142958641052, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 5, 2, 2, 0, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.pow(sigma, sigma)), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.2919508690343413, 2.2201183546394043, 2.021893811594336, 1.5970588703165596, 1.38427070827532, 1.170258156383483, 0.9482998379374917, 0.8930578692604002, 0.839921620213014, 0.8086834581237443, 0.7836228579877154, 0.7595805054831388, 0.7130488801500061, 0.7058741633430086, 0.6912530783759195, 0.6640093812711361, 0.6593670406046797, 0.6359825330860092, 0.6283114033919347, 0.6077399704088199, 0.5921099251838581, 0.5853476233218466, 0.5620226846269062, 0.5523544259201093, 0.5322473301879325, 0.5330839002798451, 0.5217445768920769, 0.5028906808576847, 0.4977870903483093, 0.49457706423042597, 0.493893054380015, 0.48085764699198896, 0.47621557083049265, 0.46157020623295647, 0.4655521132879568, 0.4564727621189655, 0.44348196290298586, 0.44285810659385516, 0.43364012005968083, 0.420109801127249, 0.4158266402034082, 0.4175432799845292, 0.39602890664229634, 0.395337916407776, 0.39110813513959103, 0.3831937180856877, 0.3756522929010264, 0.37763580814517644, 0.36674897666966927, 0.3576137654147742, 0.36160536220816575, 0.35523841928544536, 0.34573855838283113, 0.3410303499192893, 0.33266248127976744, 0.3395951553508039, 0.3315397226586869, 0.323800727164095, 0.32010697825646844, 0.3198675241814849, 0.31437593158430444, 0.3035878841123718, 0.29325024834193764, 0.3007642198996128, 0.3031382379971475, 0.29223230822038154, 0.2844106266842133, 0.28098147247036326, 0.2728105099792289, 0.27105391416819247, 0.2678442555742336, 0.2661946597132055, 0.25612750749633045, 0.25170940905120537, 0.25126571581112067, 0.25753682871473277], "accuracy": [0.11596883088350296, 0.27684587240219116, 0.3870030343532562, 0.45344075560569763, 0.5292563438415527, 0.5967507362365723, 0.6436402201652527, 0.6732267737388611, 0.6783780455589294, 0.6929071545600891, 0.6993792057037354, 0.7063795924186707, 0.7223616242408752, 0.7296261787414551, 0.7380794882774353, 0.7423061728477478, 0.7471932172775269, 0.7552502751350403, 0.7585523724555969, 0.7677981853485107, 0.7676661014556885, 0.7766477465629578, 0.785629391670227, 0.7903843522071838, 0.7947431206703186, 0.7971205711364746, 0.8045172095298767, 0.8075551390647888, 0.8061022162437439, 0.8078193068504333, 0.8123101592063904, 0.8141592741012573, 0.8186501264572144, 0.8284242749214172, 0.8272355198860168, 0.8317263126373291, 0.8348963260650635, 0.8317263126373291, 0.8359529972076416, 0.8384625315666199, 0.8432175517082214, 0.842028796672821, 0.8485008478164673, 0.8481045961380005, 0.8527275323867798, 0.8524633646011353, 0.8578787446022034, 0.8558974862098694, 0.8603883385658264, 0.8634262084960938, 0.8631620407104492, 0.8625016212463379, 0.869502067565918, 0.8741249442100525, 0.8741249442100525, 0.8714832663536072, 0.8734645247459412, 0.876370370388031, 0.878351628780365, 0.8796724081039429, 0.8780874609947205, 0.8821820020675659, 0.8889182209968567, 0.8865407705307007, 0.8838990926742554, 0.8854840993881226, 0.8891823887825012, 0.8923524022102356, 0.8961827754974365, 0.894069492816925, 0.8965790271759033, 0.8990886211395264, 0.8960506916046143, 0.9017302989959717, 0.898428201675415, 0.897899866104126], "val_loss": [1.9311672619410925, 1.8180864197867257, 1.476883820125035, 0.9652934414999825, 0.7906251634870257, 0.680182831627982, 0.6799044949667794, 0.6381416491099766, 0.5864964553288051, 0.5682566336223057, 0.5599221161433628, 0.5336802176066807, 0.5316932371684483, 0.5353425911494664, 0.5212067706244332, 0.5050699029650006, 0.4956649882452829, 0.4844870056424822, 0.475980315889631, 0.46321604933057514, 0.4631058658872332, 0.45080324581691195, 0.4444929361343384, 0.43262224537985666, 0.4272703358105251, 0.4258794529097421, 0.415301365511758, 0.4093570368630545, 0.4061917577471052, 0.40072539874485563, 0.391602167061397, 0.38957308871405466, 0.3827129176684788, 0.3788964918681553, 0.37440816845212666, 0.3708023428916931, 0.3656217285564968, 0.3640751668385097, 0.3598320995058332, 0.36009142228535246, 0.3528498666627066, 0.35036721399852205, 0.3486118401799883, 0.35031942810331074, 0.3454711948122297, 0.3401369111878531, 0.3376132334981646, 0.33762070110866, 0.3376073752130781, 0.3394651583262852, 0.33870175906590055, 0.3351116180419922, 0.328378541128976, 0.322174608707428, 0.3240320086479187, 0.32507021938051495, 0.32441126448767527, 0.32524519307272776, 0.3229808381625584, 0.31872776576450895, 0.31544103792735506, 0.31137182882853914, 0.3130215661866324, 0.315949763570513, 0.31477353402546476, 0.3134585108075823, 0.3145960143634251, 0.31319667611803326, 0.31450181347983225, 0.31363299063273836, 0.312720102923257, 0.31258078132356915, 0.3139470900808062, 0.31474876403808594, 0.31660570417131695, 0.3164222921643938], "val_accuracy": [0.3346666693687439, 0.4203333258628845, 0.5143333077430725, 0.656000018119812, 0.67166668176651, 0.7116666436195374, 0.7293333411216736, 0.7296666502952576, 0.734666645526886, 0.746999979019165, 0.7480000257492065, 0.7616666555404663, 0.765999972820282, 0.7663333415985107, 0.7693333625793457, 0.7756666541099548, 0.7806666493415833, 0.7933333516120911, 0.7913333177566528, 0.7929999828338623, 0.8006666898727417, 0.8026666641235352, 0.800000011920929, 0.8066666722297668, 0.8163333535194397, 0.8166666626930237, 0.8180000185966492, 0.8140000104904175, 0.8193333148956299, 0.8203333616256714, 0.8233333230018616, 0.8270000219345093, 0.8349999785423279, 0.8333333134651184, 0.8356666564941406, 0.8383333086967468, 0.8396666646003723, 0.8393333554267883, 0.8446666598320007, 0.8433333039283752, 0.8463333249092102, 0.8399999737739563, 0.8479999899864197, 0.8476666808128357, 0.8486666679382324, 0.8486666679382324, 0.8533333539962769, 0.8536666631698608, 0.8489999771118164, 0.8550000190734863, 0.8550000190734863, 0.8583333492279053, 0.8583333492279053, 0.8610000014305115, 0.859000027179718, 0.8619999885559082, 0.862666666507721, 0.8666666746139526, 0.8663333058357239, 0.8676666617393494, 0.8650000095367432, 0.8693333268165588, 0.8706666827201843, 0.8713333606719971, 0.8696666955947876, 0.8706666827201843, 0.8733333349227905, 0.8726666569709778, 0.8723333477973938, 0.8736666440963745, 0.875333309173584, 0.8726666569709778, 0.8733333349227905, 0.8703333139419556, 0.871999979019165, 0.8726666569709778]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 4, 0, 2, 1, 2, 2, 1, 0, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [0, 2, 1, 0, 0, 2, 1, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [70, 33, 13, 17, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 5, 3, 3, 0], [6, 43, 6], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [2, 3, 7, 1, 8, 2, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.6811428666114807, "mapping_values": [1, 1, 1, 0, 1, 1, 3, 3, 1, 2, 1, 3, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3014647276677698, 2.298680662904134, 2.2951253018185858, 2.2867477864416723, 2.276452490650762, 2.2671187371153323, 2.2504013905734936, 2.233406086324496, 2.213483656685602, 2.1893683058978417, 2.1567583319659343, 2.1182967886838457, 2.071696408845808, 1.9951492760868246, 1.9087915449346518, 1.8103012116735386, 1.7082139591200163, 1.6274907684534012, 1.5320279686568419, 1.490339438472174, 1.4615048888714999, 1.423893691463367, 1.3839006324596, 1.277302829281781, 1.2341330573700833, 1.1823909209782595, 1.0891456866324176, 1.0279512757386482, 0.996575344799217, 0.9774953231615019, 0.9517687276495824, 0.9402595799770086], "accuracy": [0.09325055778026581, 0.10130762308835983, 0.109232597053051, 0.1320829540491104, 0.1546691358089447, 0.18399155139923096, 0.23497556149959564, 0.26218464970588684, 0.2930920720100403, 0.32320696115493774, 0.3494914770126343, 0.3564918637275696, 0.36124685406684875, 0.38105931878089905, 0.3933430314064026, 0.401400089263916, 0.410910040140152, 0.42966583371162415, 0.46572446823120117, 0.47827234864234924, 0.4897635579109192, 0.5122177004814148, 0.5287280678749084, 0.5546162724494934, 0.5768062472343445, 0.5952978730201721, 0.6186765432357788, 0.6250165104866028, 0.6174877882003784, 0.6184123754501343, 0.6324131488800049, 0.6411306262016296], "val_loss": [1.9696472031729562, 1.9659275327410017, 1.95992340360369, 1.9516900607517786, 1.9412856783185686, 1.928766863686698, 1.9139701298304967, 1.8965978622436523, 1.8758561270577567, 1.850106988634382, 1.8167929649353027, 1.7715163912091936, 1.708733183997018, 1.6235565458025252, 1.5162130423954554, 1.3913395064217704, 1.2551960604531425, 1.1213182040623255, 1.0074035440172469, 0.921109846660069, 0.881993123463222, 0.868586574281965, 0.8066083192825317, 0.7875172240393502, 0.7912638187408447, 0.7652594191687447, 0.7186711004802159, 0.7024113280432565, 0.7154135874339512, 0.7088400636400495, 0.7046336957386562, 0.7019614832741874], "val_accuracy": [0.04600000008940697, 0.06800000369548798, 0.11833333224058151, 0.19966666400432587, 0.2906666696071625, 0.3413333296775818, 0.36899998784065247, 0.3889999985694885, 0.4033333361148834, 0.4166666567325592, 0.43433332443237305, 0.4480000138282776, 0.46033334732055664, 0.4776666760444641, 0.49266666173934937, 0.5293333530426025, 0.5720000267028809, 0.5979999899864197, 0.6383333206176758, 0.6660000085830688, 0.6573333144187927, 0.6293333172798157, 0.6766666769981384, 0.6833333373069763, 0.6890000104904175, 0.6869999766349792, 0.6963333487510681, 0.6946666836738586, 0.6636666655540466, 0.6803333163261414, 0.6949999928474426, 0.6956666707992554]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 8, 3, 0, 3, 9, 1, 8, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [0, 0, 0, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [22, 82, 13, 17, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 3, 3, 3, 0], [81, 43, 6], [1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [2, 3, 7, 1, 8, 2, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.4034285843372345, "mapping_values": [1, 3, 3, 2, 1, 1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.2893809129407363, 2.2511843800812414, 2.321589346464835, 2.2531865398566704, 2.4841233408288903, NaN, NaN, NaN, NaN], "accuracy": [0.20697398483753204, 0.1694624274969101, 0.18518029153347015, 0.1702549159526825, 0.13221503794193268, 0.1026284471154213, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.8885587283543177, 1.9743670736040388, 1.9775924682617188, 2.3414123398917064, 1.974238327571324, NaN, NaN, NaN, NaN], "val_accuracy": [0.29233333468437195, 0.11833333224058151, 0.1003333330154419, 0.3473333418369293, 0.10000000149011612, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 6, 0, 2, 5, 9, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [0, 2, 0, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [12, 82, 13, 17, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [6, 3, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 43, 6], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [2, 3, 7, 1, 8, 2, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.15942856669425964, "mapping_values": [1, 6, 6, 4, 2, 1, 3, 3, 1, 2, 1, 3, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32), tf.math.negative(grad)))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.0760419376269412e+24, 4.881828136162776e+26, 5.400859605307527e+27, 2.363727327150877e+28, 7.167858724557283e+28, 1.6605141740571172e+29], "accuracy": [0.09774138033390045, 0.12336547672748566, 0.12230881303548813, 0.12561088800430298, 0.12019548565149307, 0.11438383162021637], "val_loss": [2.746049982834417e+25, 1.3026147456476704e+27, 8.281810585185373e+27, 2.891741453097119e+28, 7.469384876022796e+28, 1.6056351511405858e+29], "val_accuracy": [0.16766667366027832, 0.16333332657814026, 0.1653333306312561, 0.16500000655651093, 0.1653333306312561, 0.1666666716337204]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 6, 3, 0, 3, 9, 1, 8, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 0, 0, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [52, 64, 13, 17, 60, 59, 23, 22, 72, 1], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [5, 3, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 43, 6], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [3, 3, 7, 1, 8, 2, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 0, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.302812602651936, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 6, 6, 2, 1, 2, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [0, 2, 0, 0, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [53, 33, 13, 17, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 5, 3, 3, 0], [38, 43, 6], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [5, 3, 7, 1, 8, 2, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [1, 1, 2], [12, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 21, 21, 12, 9, 5, 3, 3, 1, 2, 1, 2, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.add(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.square(tf.math.add(alpha, grad))), tf.math.add(tf.math.add(alpha, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 0, 0, 2, 5, 9, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 1, 0, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [92, 82, 13, 17, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [8, 3, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 43, 6], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [3, 3, 7, 1, 8, 2, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 1, 5, 3, 2, 1, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [1, 5, 6, 6, 2, 1, 2, 2, 2, 5, 2, 0, 5, 1, 0, 5, 7, 6, 1, 8, 1, 8, 1, 6, 5], [2, 1, 0, 2, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [92, 82, 44, 17, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [3, 1, 3, 3, 0], [38, 43, 6], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [3, 3, 7, 1, 8, 2, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [2, 7, 5, 2, 9, 3, 9], [0, 1, 2], [12, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 33, 33, 19, 14, 4, 3, 3, 1, 2, 0, 5, 3, 2, 1, 0, 5, 2, 3, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(tf.math.square(tf.math.add(alpha, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.subtract(alpha, tf.math.add(alpha, tf.math.negative(tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.subtract(grad, tf.math.add(alpha, grad)), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), grad)))))))), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09694888442754745, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 5, 8, 0, 2, 5, 6, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 2, 0, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [92, 82, 13, 17, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 43, 6], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [0, 3, 7, 1, 8, 2, 2, 1], [4, 7, 0, 6], [64, 55], [0, 0, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 40, 40, 25, 15, 4, 3, 3, 1, 2, 1, 2, 1, 1, 0, 0, 5, 3, 2, 0], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.square(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.negative(alpha))), tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))))), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))))))))))))), tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.sqrt(alpha), grad), tf.math.subtract(grad, tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.sqrt(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.square(grad))))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.square(beta), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 6, 0, 2, 1, 2, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 0, 0, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [92, 82, 13, 17, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 43, 6], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [2, 4, 7, 1, 8, 2, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [4, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 7, 4, 3, 1, 0, 5, 2, 3, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.pow(sigma, sigma)), tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(beta, tf.math.add(alpha, beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 6, 0, 2, 1, 2, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [0, 2, 0, 0, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [92, 82, 13, 17, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 0, 1, 1, 0], [4, 3, 9, 0, 1, 9], [0, 5, 3, 3, 0], [90, 43, 6], [1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [5, 3, 7, 1, 8, 2, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 5, 5, 2, 3, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 6, 0, 2, 5, 4, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 1, 0, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [92, 82, 13, 17, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [8, 3, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 43, 6], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [3, 3, 7, 1, 8, 2, 2, 1], [2, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 40, 40, 25, 15, 4, 2, 2, 1, 1, 1, 5, 3, 2, 1, 0, 2, 1, 1, 0], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.add(grad, tf.math.square(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))))))), alpha), tf.math.negative(tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))))), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))))))))), tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.sqrt(alpha), grad), tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))))), tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(grad, tf.math.divide_no_nan(grad, tf.math.square(tf.math.add(alpha, grad))))))))))))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, beta))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 6, 0, 2, 1, 9, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 0, 0, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [52, 64, 13, 17, 60, 59, 23, 22, 72, 1], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 0, 1, 1, 0], [1, 3, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 43, 6], [1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1], [6, 3, 7, 1, 8, 2, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 0, 5, 5, 2, 3, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.square(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), grad)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07674019038677216, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 1, 6, 0, 2, 5, 9, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [0, 2, 0, 2, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [69, 33, 13, 17, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 5, 3, 3, 0], [38, 43, 6], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [5, 3, 7, 1, 8, 2, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.05828571319580078, "mapping_values": [1, 23, 23, 15, 8, 5, 5, 5, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.square(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), grad))), tf.math.negative(tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))))))))))), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), grad)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.301745171339725, 2.3010140904472047, 2.3020612313652618, 2.3015709306900574, 2.3022328791065996, 2.3030656442477198, 2.3019732801338875, 2.301567155608506, 2.3020375776977398, 2.3020201212757407, 2.302534973805591, 2.3029440567556736, 2.303077879803544, 2.302909191053746, 2.302679452567352, 2.3026228024423903, 2.3025470114402986, 2.3025513161694637, 2.3026561449547454], "accuracy": [0.09311848133802414, 0.0940430611371994, 0.08942015469074249, 0.08994849026203156, 0.08400475233793259, 0.08255184441804886, 0.08968432247638702, 0.09298639744520187, 0.09100515395402908, 0.08955223858356476, 0.08757099509239197, 0.08545766770839691, 0.09377889335155487, 0.10130762308835983, 0.10474177449941635, 0.10645885765552521, 0.10091137140989304, 0.10077928751707077, 0.09972262382507324], "val_loss": [1.9707657269069128, 1.9705683163234167, 1.970912047794887, 1.9718309129987444, 1.972261565072196, 1.9722402436392648, 1.97261381149292, 1.9729530470711845, 1.9732131958007812, 1.9734454154968262, 1.97357177734375, 1.9737091064453125, 1.973731449672154, 1.9736981391906738, 1.9736161913190569, 1.9735730034964425, 1.9736104692731584, 1.9736809049333846, 1.9737727301461356], "val_accuracy": [0.0416666679084301, 0.04699999839067459, 0.050333332270383835, 0.052000001072883606, 0.05999999865889549, 0.06866666674613953, 0.06199999898672104, 0.057999998331069946, 0.05900000035762787, 0.06066666543483734, 0.07733333110809326, 0.08966666460037231, 0.10133333504199982, 0.10999999940395355, 0.109333336353302, 0.10333333164453506, 0.10100000351667404, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 6, 0, 2, 1, 9, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 0, 0, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [92, 82, 13, 17, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 5, 3, 3, 0], [38, 43, 6], [1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [2, 3, 7, 1, 8, 2, 2, 1], [4, 7, 0, 6], [64, 55], [1, 1, 0, 1, 1], [2, 7, 5, 2, 9, 3, 9], [3, 1, 2], [12, 32, 85]], "fitness": -0.035999998450279236, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3018395404112795, 2.3014990001102054, 2.302876249926044, 2.301780745526819, 2.3012784025562345, 2.3040366566743296], "accuracy": [0.09285431355237961, 0.09338264167308807, 0.08809932321310043, 0.09034473448991776, 0.09100515395402908, 0.08809932321310043], "val_loss": [1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056], "val_accuracy": [0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856]}}]