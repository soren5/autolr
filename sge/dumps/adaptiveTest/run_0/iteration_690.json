[{"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 6, 0, 2, 5, 9, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 1, 0, 2, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [92, 82, 17, 17, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 43, 6], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [3, 2, 7, 1, 8, 2, 2, 1], [1, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.8494285941123962, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 5, 3, 2, 1, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.0373115859657087, 1.058735693537123, 0.776043076100146, 0.6922471766789292, 0.6319960610442362, 0.5945120356527255, 0.5555657028380386, 0.5294048109736031, 0.5073579519085676, 0.4768184889277699, 0.4609678515889122, 0.44135563566212044, 0.4268287489828637, 0.41603543652976116, 0.40624611968723945, 0.3918264056980933, 0.392148509619652, 0.37752028732110227, 0.35919710451333814, 0.3572869187750128, 0.3394791695931805, 0.33547266852098323, 0.3173541084784149, 0.30187669877819556, 0.298345413816257, 0.2929152124089619, 0.29643738862624525, 0.2760673954998261, 0.26857229181567926, 0.25749758318540933, 0.2540720950764373, 0.25286184325902816, 0.24701450614566423, 0.23677112462655697], "accuracy": [0.3183199167251587, 0.6301677227020264, 0.7022850513458252, 0.7392682433128357, 0.7629110813140869, 0.7778365015983582, 0.7935543656349182, 0.8012151718139648, 0.8115176558494568, 0.8236692547798157, 0.8356888294219971, 0.8393871188163757, 0.845859169960022, 0.8515387773513794, 0.8506141901016235, 0.8570862412452698, 0.8552370667457581, 0.858671247959137, 0.8717474341392517, 0.868049144744873, 0.8758420348167419, 0.8784837126731873, 0.8824461698532104, 0.8883898854255676, 0.8894465565681458, 0.8922203183174133, 0.8882578015327454, 0.89552241563797, 0.8938053250312805, 0.9035794734954834, 0.9058248400688171, 0.9006736278533936, 0.909259021282196, 0.910711944103241], "val_loss": [0.9136837550571987, 0.6008411645889282, 0.5711604867662702, 0.5119907855987549, 0.4755361761365618, 0.4476163216999599, 0.4348582369940622, 0.40914798634392874, 0.40383351700646536, 0.385035582951137, 0.3684291158403669, 0.3576857703072684, 0.35725326197487967, 0.3493468846593584, 0.3390070881162371, 0.3556841271264212, 0.34208876746041433, 0.3299327663012913, 0.330170954976763, 0.32490687710898264, 0.31672470910208567, 0.3150710463523865, 0.309791019984654, 0.30979239089148386, 0.2992251855986459, 0.31298454318727764, 0.29363131523132324, 0.3011493171964373, 0.29505216223852976, 0.2998135600771223, 0.3079795922551836, 0.300535832132612, 0.30577659606933594, 0.2848627652440752], "val_accuracy": [0.6579999923706055, 0.7329999804496765, 0.7300000190734863, 0.7743333578109741, 0.7900000214576721, 0.7979999780654907, 0.8009999990463257, 0.8169999718666077, 0.8216666579246521, 0.8330000042915344, 0.8383333086967468, 0.8423333168029785, 0.8426666855812073, 0.8456666469573975, 0.8489999771118164, 0.8413333296775818, 0.8510000109672546, 0.8523333072662354, 0.8550000190734863, 0.8566666841506958, 0.8579999804496765, 0.8646666407585144, 0.8650000095367432, 0.8606666922569275, 0.8673333525657654, 0.862333357334137, 0.8763333559036255, 0.8723333477973938, 0.8793333172798157, 0.871999979019165, 0.8659999966621399, 0.8733333349227905, 0.875333309173584, 0.878000020980835]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 6, 0, 2, 1, 2, 4, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [0, 0, 2, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [69, 33, 13, 17, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 5, 3, 3, 0], [38, 43, 6], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [5, 3, 7, 1, 8, 2, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.845714271068573, "mapping_values": [1, 3, 3, 2, 1, 1, 3, 3, 1, 2, 1, 2, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(alpha, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.03731157697502, 1.0587305854403222, 0.7761863817344835, 0.6913053423516613, 0.6318531623527185, 0.5948861225437667, 0.5558506304073674, 0.5269509164050366, 0.5045255009902231, 0.47389620368144675, 0.46049786391448444, 0.44248001274494464, 0.42638623721532504, 0.4168529558994231, 0.40428082007836547, 0.3892783769495562, 0.388687744970886, 0.37161344817254394, 0.34903330739777966, 0.35452556340859126, 0.3367325803111211, 0.3333357900003196, 0.3156449619009983, 0.30398759849319335, 0.29871818133947353, 0.2889258891340134, 0.2883272079893343, 0.2748185409971783, 0.26667069462170423, 0.2585691841381447, 0.25340441316897605, 0.255233653819698], "accuracy": [0.3183199167251587, 0.6301677227020264, 0.7025492191314697, 0.739928662776947, 0.7605336308479309, 0.7784969210624695, 0.7946110367774963, 0.8035926818847656, 0.8125742673873901, 0.8231409192085266, 0.8333113193511963, 0.837141752243042, 0.8457271456718445, 0.8507462739944458, 0.8502179384231567, 0.8577466607093811, 0.8543124794960022, 0.8654074668884277, 0.8767666220664978, 0.8658037185668945, 0.8742570281028748, 0.8751816153526306, 0.8842953443527222, 0.8889182209968567, 0.891559898853302, 0.8938053250312805, 0.8949940800666809, 0.8944657444953918, 0.895918607711792, 0.9026548862457275, 0.9083344340324402, 0.9014661312103271], "val_loss": [0.9136834485190255, 0.6008340801511493, 0.5706244707107544, 0.5125223909105573, 0.4760694333485195, 0.4468825033732823, 0.43419206142425537, 0.40825198377881733, 0.4005487135478428, 0.3855851633208139, 0.3700946058545794, 0.3589430791991098, 0.35876968928745817, 0.3443245717457363, 0.3414068988391331, 0.34894509826387676, 0.3389160803386143, 0.32225861719676424, 0.3322033967290606, 0.32127961942127775, 0.312707143170493, 0.3105448228972299, 0.3075793300356184, 0.3135657480784825, 0.2975581969533648, 0.3055116534233093, 0.2917887142726353, 0.3011539237839835, 0.2953297070094517, 0.2977931669780186, 0.30159338882991243, 0.30108784777777536], "val_accuracy": [0.6579999923706055, 0.7329999804496765, 0.7316666841506958, 0.7733333110809326, 0.7906666398048401, 0.7960000038146973, 0.8003333210945129, 0.8183333277702332, 0.8216666579246521, 0.8316666483879089, 0.8403333425521851, 0.8429999947547913, 0.8429999947547913, 0.8513333201408386, 0.8489999771118164, 0.8443333506584167, 0.8543333411216736, 0.856333315372467, 0.8526666760444641, 0.856333315372467, 0.859000027179718, 0.8653333187103271, 0.8659999966621399, 0.8633333444595337, 0.8643333315849304, 0.8676666617393494, 0.8786666393280029, 0.8703333139419556, 0.8743333220481873, 0.871666669845581, 0.8736666440963745, 0.871999979019165]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 6, 0, 2, 1, 2, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [0, 2, 0, 0, 2, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [69, 33, 13, 17, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 5, 3, 3, 0], [38, 43, 6], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [5, 3, 7, 1, 8, 2, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.8285714387893677, "mapping_values": [1, 17, 17, 10, 7, 3, 3, 3, 1, 2, 1, 2, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), grad), tf.math.add(alpha, grad)))), tf.math.square(tf.math.add(alpha, grad)))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.0373107990206445, 1.0587538881324554, 0.7759708009690751, 0.6938479439756574, 0.6323705227415024, 0.5947276602772642, 0.5568270081258831, 0.528866100793092, 0.5047247115536893, 0.4762936379844644, 0.4630651474038387, 0.4451609783129465, 0.4281080108804631, 0.4167620382564352, 0.40574478819275483, 0.38978109513968523, 0.39693965488389626, 0.375596492435513, 0.3568837133617197, 0.36145391968955864, 0.3416476878846216, 0.335633445917387, 0.3159185676070221, 0.30367713993834217, 0.3029189270052219, 0.2917198129514929, 0.29373778810417334, 0.273221518885206, 0.2654588538752319, 0.2593782229816216, 0.2562079924940984, 0.2551851410120076, 0.24625124406301271, 0.23940017403329383, 0.24216639466525666, 0.23466279315257257, 0.231291168901379, 0.22117111242135534, 0.2167588832741794], "accuracy": [0.3183199167251587, 0.6300356388092041, 0.7022850513458252, 0.7386078238487244, 0.7611940503120422, 0.7788931727409363, 0.7954035401344299, 0.8035926818847656, 0.8142913579940796, 0.8235371708869934, 0.8317263126373291, 0.8372738361358643, 0.8426892161369324, 0.8470479249954224, 0.8512746095657349, 0.8569541573524475, 0.8461233377456665, 0.8613129258155823, 0.874389111995697, 0.8654074668884277, 0.8739928603172302, 0.8776912093162537, 0.8804649114608765, 0.887597382068634, 0.8865407705307007, 0.8922203183174133, 0.887201189994812, 0.8973715305328369, 0.8980319499969482, 0.9031832218170166, 0.9017302989959717, 0.9017302989959717, 0.9091269373893738, 0.9051644206047058, 0.9075419306755066, 0.9097873568534851, 0.9108440279960632, 0.9152027368545532, 0.9163914918899536], "val_loss": [0.9136730602809361, 0.6008986745561872, 0.5731317145483834, 0.5143017428261893, 0.47546398639678955, 0.4486464943204607, 0.43368135179792133, 0.408489465713501, 0.4023141860961914, 0.3896616952759879, 0.3691984329904829, 0.3569531100136893, 0.3625160711152213, 0.34772774151393343, 0.3374406950814383, 0.35185742378234863, 0.3450673988887242, 0.3314597521509443, 0.32728263310023714, 0.3216331686292376, 0.3113994428089687, 0.31395729950496126, 0.3076302238873073, 0.31343650817871094, 0.29769788469587055, 0.30661878415516447, 0.29195877483912874, 0.3036246044295175, 0.2911657691001892, 0.29591767277036396, 0.30176968233925955, 0.2986047863960266, 0.30506278787340435, 0.2835435952459063, 0.2993770241737366, 0.3010066832814898, 0.2899517927850996, 0.29871422052383423, 0.2891425830977304], "val_accuracy": [0.6579999923706055, 0.7326666712760925, 0.7286666631698608, 0.7733333110809326, 0.784333348274231, 0.7973333597183228, 0.7986666560173035, 0.8166666626930237, 0.8209999799728394, 0.8286666870117188, 0.8363333344459534, 0.8460000157356262, 0.8410000205039978, 0.8486666679382324, 0.8500000238418579, 0.8379999995231628, 0.8513333201408386, 0.8519999980926514, 0.8533333539962769, 0.8606666922569275, 0.8643333315849304, 0.8653333187103271, 0.8640000224113464, 0.8616666793823242, 0.8696666955947876, 0.8653333187103271, 0.8736666440963745, 0.8676666617393494, 0.878333330154419, 0.8733333349227905, 0.8709999918937683, 0.8736666440963745, 0.8743333220481873, 0.8859999775886536, 0.8723333477973938, 0.8733333349227905, 0.8833333253860474, 0.8823333382606506, 0.8856666684150696]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 6, 3, 2, 1, 2, 2, 2, 2, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [0, 2, 0, 0, 2, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [69, 33, 13, 17, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 5, 3, 3, 0], [38, 43, 6], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [5, 3, 7, 1, 8, 2, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.819428563117981, "mapping_values": [1, 38, 38, 22, 16, 5, 3, 3, 1, 2, 1, 2, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(tf.math.add(alpha, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), grad), tf.math.add(alpha, grad)))), tf.math.add(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha)))))), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.divide_no_nan(grad, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, grad))))), tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))))))))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.037311525266751, 1.0587581169288771, 0.776037861689632, 0.6917040595178827, 0.6305581012721295, 0.5950658668962846, 0.5545145593236198, 0.5271003341961373, 0.5055257833991241, 0.47542156076166747, 0.4594055526425983, 0.43939761526360094, 0.42522800688683127, 0.4178725582591893, 0.4060196749656397, 0.3898457370736832], "accuracy": [0.3183199167251587, 0.6299035549163818, 0.7020208835601807, 0.739928662776947, 0.7646281719207764, 0.7795535326004028, 0.7952714562416077, 0.8045172095298767, 0.81112140417099, 0.8252542614936829, 0.8356888294219971, 0.839519202709198, 0.8436138033866882, 0.8502179384231567, 0.8511425256729126, 0.8593316674232483], "val_loss": [0.9136824948447091, 0.6009299073900495, 0.5705931867871966, 0.5116291386740548, 0.4750256197793143, 0.4456667900085449, 0.43581080436706543, 0.4089522361755371, 0.40170013904571533, 0.3852617229734148, 0.366295405796596, 0.3566328372274126, 0.35877940484455656, 0.3481427771704538, 0.33762181656701223, 0.35525591884340557], "val_accuracy": [0.6579999923706055, 0.7326666712760925, 0.7296666502952576, 0.7726666927337646, 0.7896666526794434, 0.7983333468437195, 0.7986666560173035, 0.8186666369438171, 0.8223333358764648, 0.8326666951179504, 0.8479999899864197, 0.8456666469573975, 0.8403333425521851, 0.8479999899864197, 0.8479999899864197, 0.8370000123977661]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 3, 0, 2, 1, 5, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [0, 3, 0, 0, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [6, 33, 13, 17, 60, 59, 23, 22, 72, 1], [0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 5, 3, 3, 0], [38, 43, 6], [1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1], [5, 3, 7, 1, 8, 2, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.7491428852081299, "mapping_values": [1, 15, 15, 9, 6, 4, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.subtract(tf.math.square(tf.math.add(alpha, grad)), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, tf.math.add(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.2107857888825992, 1.6451002227600304, 1.2194782769470607, 1.041667104775108, 0.9244506537103382, 0.8625380995959779, 0.822245667182601, 0.7757238400862627, 0.769335454056024, 0.7428295041953946, 0.719470299033441, 0.7003865968423701], "accuracy": [0.2513538599014282, 0.47866860032081604, 0.5653150081634521, 0.6242240071296692, 0.6584334969520569, 0.6865671873092651, 0.6911900639533997, 0.7127195596694946, 0.7140403985977173, 0.7153612375259399, 0.726192057132721, 0.7326641082763672], "val_loss": [1.659308910369873, 0.9478912353515625, 0.7743372576577323, 0.6910562004361834, 0.674846853528704, 0.6545043502535138, 0.5776957784380231, 0.6357275077274868, 0.5645088979176113, 0.5542865650994437, 0.5399859292166573, 0.5516162770135062], "val_accuracy": [0.5823333263397217, 0.6620000004768372, 0.6896666884422302, 0.7160000205039978, 0.7129999995231628, 0.7066666483879089, 0.7576666474342346, 0.7099999785423279, 0.749666690826416, 0.7486666440963745, 0.7483333349227905, 0.7483333349227905]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 6, 0, 2, 1, 3, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [0, 2, 0, 0, 2, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [69, 33, 13, 17, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 3, 3, 3, 0], [47, 43, 6], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [5, 3, 7, 1, 8, 2, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.4408571422100067, "mapping_values": [1, 17, 17, 10, 7, 3, 3, 3, 1, 2, 1, 2, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(tf.math.subtract(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(alpha, tf.math.add(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), grad)), tf.math.add(alpha, grad))), tf.math.square(tf.math.add(alpha, grad))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.1104621278800355, 2.0802521308210657, 1.9772220693795342, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.2810725271701813, 0.33839651942253113, 0.3276977837085724, 0.1438383311033249, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.6568427426474435, 1.956965718950544, 4.780643277709172e+17, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.35866665840148926, 0.18199999630451202, 0.43666666746139526, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 6, 0, 2, 5, 9, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [0, 1, 0, 0, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [88, 33, 13, 17, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 0, 1, 1, 1, 0, 1, 1, 0], [6, 3, 9, 0, 1, 9], [0, 5, 3, 3, 0], [38, 43, 6], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1], [3, 3, 7, 1, 8, 2, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.10028571635484695, "mapping_values": [1, 9, 9, 7, 2, 2, 5, 5, 2, 3, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, alpha)))))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.8051392971220905e+18, 2.1797581003237168e+21, 3.343434594184849e+21, 4.204429351947829e+22, 8.03347847618473e+22, 4.458291967406244e+22, 1.8344700790723068e+23, 1.961549163023875e+23, 5.7188814665756495e+23, 1.2912700174655342e+24], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.1002509593963623, 0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09985470771789551, 0.1002509593963623], "val_loss": [7.611815758092861e+20, 8.647605562686764e+21, 5.708933381069772e+21, 8.283608476096875e+22, 8.364984017763833e+22, 1.145422361422186e+23, 1.5165325603293906e+23, 7.86336802150087e+23, 4.831231816518087e+23, 8.461847001056783e+23], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.10066666454076767, 0.10000000149011612, 0.10166666656732559, 0.10100000351667404, 0.10133333504199982, 0.10000000149011612, 0.10100000351667404, 0.10166666656732559]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 6, 0, 2, 2, 9, 4, 6, 5, 2, 9, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 1, 0, 1, 2, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [92, 82, 13, 17, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [5, 3, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 43, 6], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [3, 3, 7, 1, 8, 2, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 7, 3, 2, 2, 2, 1, 1, 1, 3, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(grad, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)))), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3026538563757177, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 6, 0, 2, 1, 5, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [0, 2, 0, 0, 2, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [69, 33, 13, 17, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 2, 3, 3, 0], [38, 43, 6], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [5, 3, 7, 1, 8, 2, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [0, 1, 2], [12, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 8, 5, 3, 3, 3, 1, 2, 1, 2, 1, 1, 0, 0, 2, 1, 1, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, grad)), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))), tf.math.add(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), grad))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [3.449204311867148, 14.547675477767177, 40.140328299588276, 85.1202597365545, 151.54774662733803, 250.54421385590112], "accuracy": [0.09800554811954498, 0.10011887550354004, 0.10210011899471283, 0.09668471664190292, 0.09668471664190292, 0.09972262382507324], "val_loss": [5.022316523960659, 16.82879420689174, 38.94046129499163, 73.97979082380023, 125.08245849609375, 195.65036010742188], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 6, 0, 2, 5, 9, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [0, 2, 0, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [12, 82, 13, 17, 60, 59, 23, 22, 72, 1], [0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 0, 1, 1, 0], [6, 3, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 43, 6], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1], [3, 3, 7, 1, 8, 2, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 5, 5, 2, 3, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), grad), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3026538563757177, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 6, 9, 2, 4, 2, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 1, 0, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [92, 82, 13, 17, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 5, 3, 3, 0], [38, 43, 6], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1], [5, 3, 7, 1, 8, 2, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [0, 1, 2], [12, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 40, 40, 25, 15, 5, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(tf.math.add(tf.math.add(grad, tf.math.square(tf.math.add(alpha, tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))))), alpha), tf.math.negative(tf.math.add(alpha, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.sqrt(alpha), tf.math.add(alpha, grad)), tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))))), tf.math.sqrt(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.square(tf.math.add(alpha, grad))))))))))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [3.449204311867148, 14.547675477767177, 40.140328299588276, 85.1202597365545, 151.54774662733803, 250.54421385590112], "accuracy": [0.09800554811954498, 0.10011887550354004, 0.10210011899471283, 0.09668471664190292, 0.09668471664190292, 0.09972262382507324], "val_loss": [5.022316523960659, 16.82879420689174, 38.94046129499163, 73.97979082380023, 125.08245849609375, 195.65036010742188], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 6, 5, 2, 1, 5, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [0, 2, 1, 0, 0, 2, 0, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [78, 33, 13, 17, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [9, 3, 9, 0, 1, 9], [0, 5, 3, 3, 0], [38, 43, 6], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [5, 3, 7, 1, 8, 2, 2, 1], [4, 7, 0, 6], [64, 55], [0, 0, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 1, 1, 0, 1, 2, 1, 1, 0, 0, 5, 3, 2, 0], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.square(beta), alpha))", "other_info": {"loss": [2.3026538563757177, 10697266.1291125, 40622774339.28834, 1603923517216.0212, 19398494800448.99, 134448969573623.38, 647896512828364.2], "accuracy": [0.09826971590518951, 0.10315678268671036, 0.10117553919553757, 0.09668471664190292, 0.09642054885625839, 0.09932637959718704, 0.10077928751707077], "val_loss": [1.973644392830985, 564381476.5714285, 180521678555.42856, 3859945919049.143, 34748426916425.145, 197031480899291.44, 832144372325229.8], "val_accuracy": [0.09833333641290665, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 6, 0, 2, 5, 9, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [0, 2, 0, 0, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [92, 82, 49, 17, 60, 59, 23, 22, 72, 1], [1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [4, 3, 9, 0, 1, 9], [3, 5, 3, 3, 0], [25, 43, 6], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [3, 3, 7, 1, 8, 2, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 16, 11, 5, 5, 3, 3, 1, 2, 0, 5, 4, 2, 2, 0, 2, 1, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.square(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, tf.math.add(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, grad), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 2, 6, 0, 2, 1, 5, 6, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [0, 2, 1, 0, 0, 2, 0, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [69, 33, 13, 17, 60, 59, 23, 22, 72, 1], [1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 5, 3, 3, 0], [38, 43, 6], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [5, 3, 7, 1, 8, 2, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 4, 1, 1, 0, 1, 1, 2, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.divide_no_nan(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.square(grad), tf.math.add(alpha, alpha))), tf.math.divide_no_nan(tf.math.add(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))))))), tf.math.square(tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3026538563757177, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 1, 0, 2, 6, 6, 2, 9, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 1, 0, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [92, 82, 13, 17, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 3, 3, 3, 0], [49, 43, 6], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [3, 3, 7, 1, 8, 2, 2, 1], [4, 7, 0, 6], [64, 55], [1, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 5, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, grad))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06485272943973541, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 4, 0, 2, 1, 2, 2, 1, 0, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [0, 2, 1, 0, 0, 2, 1, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [70, 33, 13, 17, 60, 59, 23, 22, 72, 1], [1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 5, 3, 3, 0], [6, 43, 6], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [2, 3, 7, 1, 8, 2, 2, 1], [4, 7, 0, 6], [64, 55], [0, 0, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 3, 3, 1, 2, 1, 5, 3, 2, 1, 0, 5, 3, 2, 0], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.multiply(sigma, sigma)), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.square(beta), alpha))", "other_info": {"loss": [2.3026538563757177, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 6, 0, 2, 1, 2, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [0, 2, 0, 0, 2, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [85, 33, 13, 17, 60, 59, 23, 22, 72, 1], [1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 43, 6], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [5, 3, 7, 1, 8, 2, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.09371428936719894, "mapping_values": [1, 3, 3, 2, 1, 1, 5, 5, 2, 3, 1, 2, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(alpha, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3016138281473912, 2.3016784115553124, 2.3008270178331185, 2.300395500800078, 2.29943530544739, 2.2992666989836508, 2.298651898903948, 2.3000129009234733, 2.300431748265367, 2.3010133972351876, 2.301349123912071], "accuracy": [0.09285431355237961, 0.0944393053650856, 0.0948355570435524, 0.09470347315073013, 0.10302469879388809, 0.10500594228506088, 0.10685510188341141, 0.10976093262434006, 0.1010434553027153, 0.09549596905708313, 0.09166556596755981], "val_loss": [1.970743111201695, 1.9700518335614885, 1.9692584446498327, 1.9689219338553292, 1.968794277736119, 1.969266619001116, 1.9701788766043526, 1.9709507397242956, 1.971519606454032, 1.9719868387494768, 1.9723736899239677], "val_accuracy": [0.041999999433755875, 0.052000001072883606, 0.06666667014360428, 0.08533333241939545, 0.10533333569765091, 0.11966666579246521, 0.11133333295583725, 0.10566666722297668, 0.10366666316986084, 0.10000000149011612, 0.09033333510160446]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [3, 5, 6, 0, 2, 1, 2, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5, 7, 9, 0], [0, 2, 0, 0, 2, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [69, 33, 1, 17, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 5, 3, 3, 0], [70, 43, 6], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [3, 3, 7, 1, 8, 2, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.087714284658432, "mapping_values": [1, 45, 45, 28, 17, 6, 3, 3, 1, 2, 1, 3, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(grad, tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.square(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), tf.math.add(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(alpha, tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(grad, tf.math.add(alpha, grad)), tf.math.sqrt(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)))))))))))))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(grad)), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.negative(grad))))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [3.047414590685422, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.18531237542629242, 0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9911114828927177, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.12700000405311584, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 6, 0, 4, 5, 2, 2, 2, 5, 2, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [0, 1, 0, 0, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [3, 33, 13, 17, 60, 59, 23, 22, 72, 1], [1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [0, 5, 3, 3, 0], [38, 43, 6], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1], [5, 3, 7, 1, 8, 2, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [3, 7, 5, 2, 9, 3, 9], [2, 1, 2], [12, 32, 85]], "fitness": -0.07342857122421265, "mapping_values": [1, 1, 1, 0, 1, 1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 5, 2, 3, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.math.add(alpha, beta))", "other_info": {"loss": [2.301665883542304, 2.3020317280187017, 2.3022712183319864, 2.303550881228474, 2.302295730917319, 2.302256827530151, 2.302417533335637, 2.303353975698098, 2.3031654058745383, 2.302638951451346], "accuracy": [0.09245806187391281, 0.09377889335155487, 0.09100515395402908, 0.08294808864593506, 0.0948355570435524, 0.09100515395402908, 0.08757099509239197, 0.07660810649394989, 0.06445647776126862, 0.07158895581960678], "val_loss": [1.9708617074148995, 1.970691204071045, 1.971609388078962, 1.9721103395734514, 1.9718245097569056, 1.9732204845973425, 1.9740241595676966, 1.9737554277692522, 1.9733029774257116, 1.9731470516749792], "val_accuracy": [0.03866666555404663, 0.04466666653752327, 0.04833333194255829, 0.06499999761581421, 0.07633333653211594, 0.0729999989271164, 0.050333332270383835, 0.03200000151991844, 0.03633333370089531, 0.04533333331346512]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [5, 5, 6, 0, 2, 5, 9, 2, 2, 4, 6, 0, 4, 1, 5, 5, 7, 6, 2, 8, 1, 8, 1, 6, 5], [2, 1, 0, 1, 0, 2, 2, 0, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [92, 82, 13, 17, 60, 59, 23, 22, 72, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0], [3, 3, 9, 0, 1, 9], [3, 3, 3, 3, 0], [38, 43, 6], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [3, 3, 7, 1, 8, 2, 2, 1], [4, 7, 0, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [3, 1, 2], [12, 32, 85]], "fitness": -0.035999998450279236, "mapping_values": [1, 15, 15, 10, 5, 3, 3, 3, 1, 2, 0, 7, 4, 3, 1, 0, 2, 1, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.square(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))))))))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.301703279327959, 2.3023894304581103, 2.3027443945951087, 2.3024705627795616, 2.3028563673092215, 2.302493770691571], "accuracy": [0.09259014576673508, 0.09576013684272766, 0.09232597798109055, 0.08770307898521423, 0.09100515395402908, 0.09060890227556229], "val_loss": [1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056], "val_accuracy": [0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856]}}]