[{"genotype": [[0], [1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1], [5, 6, 4, 1, 3, 0, 9, 8, 9, 0, 2, 0, 2, 0, 9, 5, 7, 5, 1, 8, 9, 8, 1, 6, 5, 0, 3, 3, 3, 5, 1, 8, 8, 1, 0, 3, 9], [2, 2, 2, 2, 2, 2, 1, 0, 2, 1, 1, 1, 1, 1, 0, 2, 0, 0, 2, 0, 2, 2, 2, 0, 2, 2, 1, 2, 3, 3, 2, 2], [99, 18, 29, 0, 4, 59, 23, 22, 72, 1], [1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0], [3, 2, 5, 1, 2, 9], [0, 4, 2, 3, 0], [40, 19, 6, 99], [1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [3, 2, 1, 9, 8, 2, 2, 1], [3, 0, 0, 6], [16, 55], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 0, 9, 2, 2, 9, 0, 7, 6, 7, 3, 6, 1, 3, 4, 2, 2, 4, 9, 8, 0, 7, 7, 3, 4, 2, 2, 2, 7, 0, 3, 1, 0, 2, 6, 2, 8, 7, 4, 0, 9, 0, 3, 2, 9, 4, 5, 1, 7, 3, 3, 7, 1, 2, 5, 2, 4, 4, 4, 4, 2, 8, 8, 4, 6, 2, 8, 8], [2, 0, 0, 1, 3, 2, 1, 3, 2, 2, 1, 0, 2, 3, 2, 3, 3, 1, 3, 3, 2, 2, 2, 2, 3, 1, 3, 1, 1, 1, 2, 0, 0, 1, 1, 1, 3, 2, 3, 1, 1, 2, 0, 0, 1, 3, 0], [11, 32, 85, 18, 26, 46]], "fitness": -0.8465714454650879, "mapping_values": [1, 8, 8, 4, 4, 0, 5, 5, 2, 3, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.divide_no_nan(tf.math.pow(tf.math.subtract(tf.math.add(alpha, grad), grad), tf.math.add(alpha, grad)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.9420938067479676, 1.006221502031302, 0.7411275559239431, 0.6520750751868215, 0.6001164687465541, 0.5607523407682279, 0.5274230709181108, 0.506589496864729, 0.47522232187989366, 0.45299795201473136, 0.43566157365235764, 0.4241266853545462, 0.4124312911641722, 0.39352705128802884, 0.38404389268781025, 0.37038567272931233, 0.36041427563997447, 0.3436721538618776, 0.3328742651364051, 0.3176598388009367, 0.3187218352142594, 0.32243409625307096, 0.31351924059082725, 0.29638357256791215, 0.2815101352649326, 0.28005163928363713, 0.27936022308571556, 0.27425428522718015, 0.2637471181231404, 0.2556453447957726, 0.2496537160856093, 0.23582739913901318, 0.22749812572529257, 0.22576038988944075, 0.22178970132253867, 0.21691302046831243, 0.21300624039163363, 0.1992543095044015, 0.2005773825341401, 0.1989595030084215, 0.1872154994431173], "accuracy": [0.3473781645298004, 0.6445648074150085, 0.7285695672035217, 0.7557786107063293, 0.7730814814567566, 0.7886672616004944, 0.8039889335632324, 0.8141592741012573, 0.826310932636261, 0.8380662798881531, 0.8416325449943542, 0.8436138033866882, 0.848368763923645, 0.8543124794960022, 0.8589354157447815, 0.8628978729248047, 0.870030403137207, 0.8728041052818298, 0.8714832663536072, 0.882710337638855, 0.8835028409957886, 0.8800686597824097, 0.8808611631393433, 0.8874653577804565, 0.8972394466400146, 0.8961827754974365, 0.896446943283081, 0.8936732411384583, 0.9034473896026611, 0.9074098467826843, 0.9026548862457275, 0.9083344340324402, 0.9140139818191528, 0.9117686152458191, 0.9162594079971313, 0.9192973375320435, 0.9198256731033325, 0.9240522980690002, 0.9231277108192444, 0.9235239624977112, 0.927882730960846], "val_loss": [0.8547545330865043, 0.6061672823769706, 0.5377399751118251, 0.49258313860212055, 0.46516062532152447, 0.4270187871796744, 0.411060631275177, 0.3997465968132019, 0.38359573057719637, 0.37003699370792936, 0.3645737000874111, 0.35747153418404715, 0.33609488180705477, 0.36941990682056974, 0.3320782780647278, 0.32037369694028583, 0.3151249204363142, 0.30299806594848633, 0.305592451776777, 0.29942568710872103, 0.3098878945623125, 0.30363108430589947, 0.2936562384877886, 0.2953119533402579, 0.29433716194970266, 0.29804204191480366, 0.28774640389851164, 0.28944950444357737, 0.29197801862444195, 0.2890957679067339, 0.2934914231300354, 0.293598404952458, 0.28712643895830425, 0.2968906419617789, 0.2868165799549648, 0.30184268951416016, 0.28461068868637085, 0.3001041923250471, 0.2995848911149161, 0.2928942782538278, 0.31418693917138235], "val_accuracy": [0.6153333187103271, 0.734333336353302, 0.7613333463668823, 0.7683333158493042, 0.7853333353996277, 0.8069999814033508, 0.8169999718666077, 0.8246666789054871, 0.8330000042915344, 0.8410000205039978, 0.8413333296775818, 0.8326666951179504, 0.8526666760444641, 0.8356666564941406, 0.8523333072662354, 0.8543333411216736, 0.856333315372467, 0.862666666507721, 0.8610000014305115, 0.8646666407585144, 0.8576666712760925, 0.8629999756813049, 0.8666666746139526, 0.8726666569709778, 0.8703333139419556, 0.8726666569709778, 0.8713333606719971, 0.871666669845581, 0.8743333220481873, 0.8736666440963745, 0.8726666569709778, 0.8769999742507935, 0.8790000081062317, 0.8799999952316284, 0.8809999823570251, 0.8813333511352539, 0.8806666731834412, 0.8809999823570251, 0.8769999742507935, 0.8809999823570251, 0.8796666860580444]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1], [4, 4, 8, 3, 5, 4, 9, 8, 9, 0, 2, 0, 2, 0, 9, 5, 7, 5, 1, 8, 9, 8, 1, 6, 5, 0, 3, 3, 3, 5, 1, 8, 8, 1, 0, 3, 9], [2, 2, 2, 2, 2, 2, 1, 0, 2, 1, 1, 1, 1, 1, 0, 2, 0, 0, 2, 0, 2, 2, 2, 0, 2, 2, 1, 2, 3, 3, 2, 2], [99, 75, 29, 0, 4, 59, 23, 22, 72, 1], [0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0], [3, 0, 5, 1, 2, 9], [0, 0, 2, 3, 0], [33, 19, 6, 99], [1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [3, 2, 1, 9, 8, 2, 2, 1], [3, 0, 0, 6], [16, 55], [0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 0, 9, 2, 2, 9, 0, 7, 6, 7, 3, 6, 1, 3, 4, 2, 2, 4, 9, 8, 0, 7, 7, 3, 4, 2, 2, 2, 7, 0, 3, 1, 0, 2, 6, 2, 8, 7, 4, 0, 9, 0, 3, 2, 9, 4, 5, 1, 7, 3, 3, 7, 1, 2, 5, 2, 4, 4, 4, 4, 2, 8, 8, 4, 6, 2, 8, 8], [2, 0, 0, 1, 3, 2, 1, 3, 2, 2, 1, 0, 2, 3, 2, 3, 3, 1, 3, 3, 2, 2, 2, 2, 3, 1, 3, 1, 1, 1, 2, 0, 0, 1, 1, 1, 3, 2, 3, 1, 1, 2, 0, 0, 1, 3, 0], [11, 32, 85, 18, 26, 46]], "fitness": -0.1080000028014183, "mapping_values": [1, 8, 8, 4, 4, 0, 3, 3, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.math.pow(grad, tf.math.sqrt(tf.math.multiply(grad, grad)))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.301501252663496, 2.3024581045191823, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9734325408935547, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1], [5, 6, 4, 2, 3, 0, 9, 8, 9, 0, 2, 0, 2, 0, 9, 5, 7, 5, 1, 8, 9, 8, 1, 6, 5, 0, 3, 3, 3, 5, 1, 8, 8, 1, 0, 3, 9], [2, 2, 2, 2, 2, 2, 1, 0, 2, 1, 1, 1, 1, 1, 0, 2, 0, 0, 2, 0, 2, 2, 2, 0, 2, 2, 1, 2, 3, 3, 2, 2], [99, 18, 29, 0, 4, 59, 23, 22, 72, 1], [1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0], [3, 3, 5, 1, 2, 9], [0, 4, 3, 3, 0], [40, 19, 6, 99], [1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [3, 2, 1, 9, 8, 2, 2, 1], [3, 0, 0, 6], [16, 55], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 0, 9, 2, 2, 9, 0, 7, 6, 7, 3, 6, 1, 3, 4, 2, 2, 4, 9, 8, 0, 7, 7, 3, 4, 2, 2, 2, 7, 0, 3, 1, 0, 2, 6, 2, 8, 7, 4, 0, 9, 0, 3, 2, 9, 4, 5, 1, 7, 3, 3, 7, 1, 2, 5, 2, 4, 4, 4, 4, 2, 8, 8, 4, 6, 2, 8, 8], [2, 0, 0, 1, 3, 2, 1, 3, 2, 2, 1, 0, 2, 3, 2, 3, 3, 1, 3, 3, 2, 2, 2, 2, 3, 1, 3, 1, 1, 1, 2, 0, 0, 1, 1, 1, 3, 2, 3, 1, 1, 2, 0, 0, 1, 3, 0], [11, 32, 85, 18, 26, 46]], "fitness": -0.1014285683631897, "mapping_values": [1, 4, 4, 2, 2, 0, 5, 5, 2, 3, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.divide_no_nan(grad, tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.multiply(grad, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.302759899108669, 2.3025473643287677, 2.30015429444616, 2.2992038066754676, 2.2990268914612324, 2.298374730361971, 2.2994456392914753, 2.3007147790827944, 2.3011877901124884, 2.3017020226154723], "accuracy": [0.09060890227556229, 0.09153348207473755, 0.09628847241401672, 0.10011887550354004, 0.10460969805717468, 0.11293092370033264, 0.10487385839223862, 0.09536388516426086, 0.09311848133802414, 0.08638224750757217], "val_loss": [1.9704604148864746, 1.9694342613220215, 1.968566826411656, 1.968381472996303, 1.9688605581011092, 1.9701356887817383, 1.9710377284458704, 1.9715467180524553, 1.9720275061471122, 1.9725415366036552], "val_accuracy": [0.044333335012197495, 0.059333331882953644, 0.08133333176374435, 0.1080000028014183, 0.11966666579246521, 0.10499999672174454, 0.08900000154972076, 0.08033332973718643, 0.07400000095367432, 0.07500000298023224]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1], [5, 8, 4, 2, 3, 0, 9, 8, 9, 0, 2, 0, 2, 0, 9, 5, 7, 5, 1, 8, 9, 8, 1, 6, 5, 0, 3, 3, 3, 5, 1, 8, 8, 1, 0, 3, 9], [2, 2, 2, 2, 2, 2, 1, 0, 2, 1, 1, 1, 1, 1, 0, 2, 0, 0, 2, 0, 2, 2, 2, 0, 2, 2, 1, 2, 3, 3, 2, 2], [99, 18, 29, 0, 4, 59, 23, 22, 72, 1], [1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0], [3, 3, 5, 1, 2, 9], [0, 4, 3, 3, 0], [40, 19, 6, 99], [1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [3, 2, 1, 9, 8, 2, 2, 1], [3, 0, 0, 6], [16, 55], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 0, 9, 2, 2, 9, 0, 7, 6, 7, 3, 6, 1, 3, 4, 2, 2, 4, 9, 8, 0, 7, 7, 3, 4, 2, 2, 2, 7, 0, 3, 1, 0, 2, 6, 2, 8, 7, 4, 0, 9, 0, 3, 2, 9, 4, 5, 1, 7, 3, 3, 7, 1, 2, 5, 2, 4, 4, 4, 4, 2, 8, 8, 4, 6, 2, 8, 8], [2, 0, 0, 1, 3, 2, 1, 3, 2, 2, 1, 0, 2, 3, 2, 3, 3, 1, 3, 3, 2, 2, 2, 2, 3, 1, 3, 1, 1, 1, 2, 0, 0, 1, 1, 1, 3, 2, 3, 1, 1, 2, 0, 0, 1, 3, 0], [11, 32, 85, 18, 26, 46]], "fitness": -0.1014285683631897, "mapping_values": [1, 3, 3, 2, 1, 0, 5, 5, 2, 3, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.sqrt(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.multiply(grad, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.302759899108669, 2.302547395819796, 2.300154343918566, 2.299203932639583, 2.299027737058338, 2.2983778476904035, 2.2994487252233524, 2.300717338610634, 2.3011897830852286, 2.301703736546206], "accuracy": [0.09060890227556229, 0.09153348207473755, 0.09628847241401672, 0.10011887550354004, 0.10474177449941635, 0.11306300014257431, 0.10474177449941635, 0.09536388516426086, 0.09338264167308807, 0.08651433140039444], "val_loss": [1.9704604148864746, 1.9694342613220215, 1.968566826411656, 1.9683819498334612, 1.9688623292105538, 1.9701387541634696, 1.9710399082728796, 1.9715491022382463, 1.972029754093715, 1.9725424902779716], "val_accuracy": [0.044333335012197495, 0.059333331882953644, 0.08133333176374435, 0.1080000028014183, 0.11966666579246521, 0.10499999672174454, 0.08900000154972076, 0.08033332973718643, 0.07366666942834854, 0.07466666400432587]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1], [7, 1, 4, 1, 3, 0, 9, 8, 9, 0, 2, 0, 2, 0, 9, 5, 7, 5, 1, 8, 9, 8, 1, 6, 5, 0, 3, 3, 3, 5, 1, 8, 8, 1, 0, 3, 9], [2, 2, 2, 2, 2, 2, 1, 0, 2, 1, 1, 1, 1, 1, 0, 2, 0, 0, 2, 0, 2, 2, 2, 0, 2, 2, 1, 2, 3, 3, 2, 2], [99, 18, 29, 0, 4, 59, 23, 22, 72, 1], [1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0], [4, 5, 5, 1, 2, 9], [0, 0, 1, 3, 0], [29, 19, 6, 99], [1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [3, 2, 1, 9, 8, 2, 2, 1], [3, 0, 0, 6], [16, 55], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [4, 0, 9, 2, 2, 9, 0, 7, 6, 7, 3, 6, 1, 3, 4, 2, 2, 4, 9, 8, 0, 7, 7, 3, 4, 2, 2, 2, 7, 0, 3, 1, 0, 2, 6, 2, 8, 7, 4, 0, 9, 0, 3, 2, 9, 4, 5, 1, 7, 3, 3, 7, 1, 2, 5, 2, 4, 4, 4, 4, 2, 8, 8, 4, 6, 2, 8, 8], [2, 0, 0, 1, 3, 2, 1, 3, 2, 2, 1, 0, 2, 3, 2, 3, 3, 1, 3, 3, 2, 2, 2, 2, 3, 1, 3, 1, 1, 1, 2, 0, 0, 1, 1, 1, 3, 2, 3, 1, 1, 2, 0, 0, 1, 3, 0], [79, 32, 85, 18, 26, 46]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 3, 2, 2, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.square(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))))), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.pow(beta, tf.math.negative(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10302469879388809, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1], [5, 6, 4, 1, 3, 0, 9, 8, 9, 0, 2, 0, 2, 0, 9, 5, 7, 5, 1, 8, 9, 8, 1, 6, 5, 0, 3, 3, 3, 5, 1, 8, 8, 1, 0, 3, 9], [2, 2, 2, 2, 2, 2, 1, 0, 2, 1, 1, 1, 1, 1, 0, 2, 0, 0, 2, 0, 2, 2, 2, 0, 2, 2, 1, 2, 3, 3, 2, 2], [99, 18, 29, 0, 4, 59, 23, 22, 72, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0], [3, 2, 5, 1, 2, 9], [0, 4, 3, 3, 0], [40, 19, 6, 99], [0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 2, 1, 9, 8, 2, 2, 1], [3, 0, 0, 6], [16, 55], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 0, 9, 2, 2, 9, 0, 7, 6, 7, 3, 6, 1, 3, 4, 2, 2, 4, 9, 8, 0, 7, 7, 3, 4, 2, 2, 2, 7, 0, 3, 1, 0, 2, 6, 2, 8, 7, 4, 0, 9, 0, 3, 2, 9, 4, 5, 1, 7, 3, 3, 7, 1, 2, 5, 2, 4, 4, 4, 4, 2, 8, 8, 4, 6, 2, 8, 8], [2, 0, 0, 1, 3, 2, 1, 3, 2, 2, 1, 0, 2, 3, 2, 3, 3, 1, 3, 3, 2, 2, 2, 2, 3, 1, 3, 1, 1, 1, 2, 0, 0, 1, 1, 1, 3, 2, 3, 1, 1, 2, 0, 0, 1, 3, 0], [11, 32, 85, 18, 26, 46]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 3, 3, 0, 10, 10, 6, 4, 2, 5, 2, 2, 0, 0, 3, 3, 0, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.divide_no_nan(grad, tf.math.pow(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))), tf.math.subtract(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad))), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.add(sigma, sigma)), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3025954090262513, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0], [1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1], [7, 1, 4, 1, 3, 0, 9, 8, 9, 0, 2, 0, 2, 0, 9, 5, 7, 5, 1, 8, 9, 8, 1, 6, 5, 0, 3, 3, 3, 5, 1, 8, 8, 1, 0, 3, 9], [3, 2, 0, 2, 2, 2, 1, 0, 2, 1, 1, 1, 1, 1, 0, 2, 0, 0, 2, 0, 2, 2, 2, 0, 2, 2, 1, 2, 3, 3, 2, 2], [99, 18, 29, 0, 4, 59, 23, 22, 72, 1], [1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0], [5, 0, 8, 1, 1, 9], [0, 4, 2, 3, 0], [40, 19, 6, 99], [1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [3, 2, 1, 9, 8, 2, 2, 1], [3, 0, 0, 6], [16, 55], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [9, 0, 9, 2, 2, 9, 0, 7, 6, 7, 3, 6, 1, 3, 4, 2, 2, 4, 9, 8, 0, 7, 7, 3, 4, 2, 2, 2, 7, 0, 3, 1, 0, 2, 6, 2, 8, 7, 4, 0, 9, 0, 3, 2, 9, 4, 5, 1, 7, 3, 3, 7, 1, 2, 5, 2, 4, 4, 4, 4, 2, 8, 8, 4, 6, 2, 8, 8], [2, 0, 0, 1, 3, 2, 1, 3, 2, 2, 1, 0, 2, 3, 2, 3, 3, 1, 3, 3, 2, 2, 2, 2, 3, 1, 3, 1, 1, 1, 2, 0, 0, 1, 1, 1, 3, 2, 3, 1, 1, 2, 0, 0, 1, 3, 0], [11, 32, 85, 18, 26, 46]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 4, 4, 3, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3025954090262513, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1], [7, 1, 4, 3, 3, 0, 9, 8, 9, 0, 2, 0, 2, 0, 9, 5, 7, 5, 1, 8, 9, 8, 1, 6, 5, 0, 3, 3, 3, 5, 1, 8, 8, 1, 0, 3, 9], [2, 2, 2, 2, 2, 2, 1, 0, 2, 1, 1, 1, 1, 1, 0, 2, 0, 0, 2, 0, 2, 2, 2, 0, 2, 2, 1, 2, 3, 3, 2, 2], [99, 18, 29, 0, 4, 59, 23, 22, 72, 1], [1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0], [3, 2, 5, 1, 2, 9], [0, 4, 2, 3, 0], [40, 19, 6, 99], [1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [3, 2, 1, 9, 8, 2, 2, 1], [3, 0, 0, 6], [16, 55], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 0, 9, 2, 2, 9, 0, 7, 6, 7, 3, 6, 1, 3, 4, 2, 2, 4, 9, 8, 0, 7, 7, 3, 4, 2, 2, 2, 7, 0, 3, 1, 0, 2, 6, 2, 8, 7, 4, 0, 9, 0, 3, 2, 9, 4, 5, 1, 7, 3, 3, 7, 1, 2, 5, 2, 4, 4, 4, 4, 2, 8, 8, 4, 6, 2, 8, 8], [1, 0, 0, 1, 3, 2, 1, 3, 2, 2, 1, 0, 2, 3, 2, 3, 3, 1, 3, 3, 2, 2, 2, 2, 3, 1, 3, 1, 1, 1, 2, 0, 0, 1, 1, 1, 3, 2, 3, 1, 1, 2, 0, 0, 1, 3, 0], [11, 32, 85, 18, 26, 46]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 3, 4, 0, 10, 10, 6, 4, 2, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.subtract(grad, tf.math.pow(tf.math.add(alpha, grad), grad)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)))), grad), tf.math.subtract(tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, grad))), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10302469879388809, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0], [0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1], [0, 6, 4, 1, 3, 0, 9, 8, 9, 0, 2, 0, 2, 0, 9, 5, 7, 5, 1, 8, 9, 8, 1, 6, 5, 0, 3, 3, 3, 5, 1, 8, 8, 1, 0, 3, 9], [3, 2, 0, 2, 2, 2, 1, 0, 2, 1, 1, 1, 1, 1, 0, 2, 0, 0, 2, 0, 2, 2, 2, 0, 2, 2, 1, 2, 3, 3, 2, 2], [99, 18, 29, 0, 4, 59, 23, 22, 72, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1], [2, 2, 5, 1, 2, 9, 2], [0, 4, 5, 3, 3], [40, 19, 6, 99], [1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [3, 2, 1, 9, 8, 2, 2, 1], [3, 0, 0, 6], [16, 55], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [9, 0, 9, 2, 2, 9, 0, 7, 6, 7, 3, 6, 1, 3, 4, 2, 2, 4, 9, 8, 0, 7, 7, 3, 4, 2, 2, 2, 7, 0, 3, 1, 0, 2, 6, 2, 8, 7, 4, 0, 9, 0, 3, 2, 9, 4, 5, 1, 7, 3, 3, 7, 1, 2, 5, 2, 4, 4, 4, 4, 2, 8, 8, 4, 6, 2, 8, 8], [2, 0, 0, 1, 3, 2, 1, 3, 2, 2, 1, 0, 2, 3, 2, 3, 3, 1, 3, 3, 2, 2, 2, 2, 3, 1, 3, 1, 1, 1, 2, 0, 0, 1, 1, 1, 3, 2, 3, 1, 1, 2, 0, 0, 1, 3, 0], [96, 32, 85, 18, 26, 46]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 12, 12, 7, 5, 2, 1, 0, 0, 0, 0, 1, 1, 0, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.subtract(tf.math.add(beta, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), grad)))), tf.math.add(beta, grad))), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302735008756955, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10302469879388809, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1], [0, 6, 4, 1, 3, 0, 9, 8, 9, 0, 2, 0, 2, 0, 9, 5, 7, 5, 1, 8, 9, 8, 1, 6, 5, 0, 3, 3, 3, 5, 1, 8, 8, 1, 0, 3, 9], [1, 2, 3, 1, 2, 2, 1, 0, 2, 1, 1, 1, 1, 1, 0, 2, 0, 0, 2, 0, 2, 2, 2, 0, 2, 2, 1, 2, 3, 3, 2, 2], [99, 18, 29, 0, 4, 59, 23, 22, 72, 1], [1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0], [5, 2, 5, 1, 2, 9], [0, 4, 2, 3, 0], [40, 19, 6, 99], [0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [3, 2, 1, 9, 8, 2, 2, 1], [3, 0, 0, 6], [16, 55], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [9, 0, 9, 2, 2, 9, 0, 7, 6, 7, 3, 6, 1, 3, 4, 2, 2, 4, 9, 8, 0, 7, 7, 3, 4, 2, 2, 2, 7, 0, 3, 1, 0, 2, 6, 2, 8, 7, 4, 0, 9, 0, 3, 2, 9, 4, 5, 1, 7, 3, 3, 7, 1, 2, 5, 2, 4, 4, 4, 4, 2, 8, 8, 4, 6, 2, 8, 8], [2, 0, 0, 1, 3, 2, 1, 3, 2, 2, 1, 0, 2, 3, 2, 3, 3, 1, 3, 3, 2, 2, 2, 2, 3, 1, 3, 1, 1, 1, 2, 0, 0, 1, 1, 1, 3, 2, 3, 1, 1, 2, 0, 0, 1, 3, 0], [11, 32, 85, 18, 26, 46]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 3, 3, 0, 9, 9, 6, 3, 2, 7, 5, 3, 2, 1, 1, 1, 0, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.pow(tf.math.add(alpha, grad), grad))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.subtract(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), grad)))), tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, sigma))), tf.math.add(sigma, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3025954090262513, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1], [5, 5, 4, 2, 3, 0, 9, 8, 9, 0, 2, 0, 2, 0, 9, 5, 7, 5, 1, 8, 9, 8, 1, 6, 5, 0, 3, 3, 3, 5, 1, 8, 8, 1, 0, 3, 9], [2, 2, 2, 2, 2, 2, 1, 0, 2, 1, 1, 1, 1, 1, 0, 2, 0, 0, 2, 0, 2, 2, 2, 0, 2, 2, 1, 2, 3, 3, 2, 2], [99, 18, 29, 0, 4, 59, 23, 22, 72, 1], [0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0], [8, 3, 5, 1, 2, 9], [4, 4, 3, 3, 0], [7, 19, 6, 99], [1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [3, 2, 1, 9, 8, 2, 2, 1], [3, 0, 0, 6], [16, 55], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 0, 9, 2, 2, 9, 0, 7, 6, 7, 3, 6, 1, 3, 4, 2, 2, 4, 9, 8, 0, 7, 7, 3, 4, 2, 2, 2, 7, 0, 3, 1, 0, 2, 6, 2, 8, 7, 4, 0, 9, 0, 3, 2, 9, 4, 5, 1, 7, 3, 3, 7, 1, 2, 5, 2, 4, 4, 4, 4, 2, 8, 8, 4, 6, 2, 8, 8], [2, 0, 0, 1, 3, 2, 1, 3, 2, 2, 1, 0, 2, 3, 2, 3, 3, 1, 3, 3, 2, 2, 2, 2, 3, 1, 3, 1, 1, 1, 2, 0, 0, 1, 1, 1, 3, 2, 3, 1, 1, 2, 0, 0, 1, 3, 0], [11, 32, 85, 18, 26, 46]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 0, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.square(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10302469879388809, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0], [0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1], [5, 6, 4, 1, 3, 0, 9, 8, 9, 0, 2, 0, 2, 0, 9, 5, 7, 5, 1, 8, 9, 8, 1, 6, 5, 0, 3, 3, 3, 5, 1, 8, 8, 1, 0, 3, 9], [1, 2, 3, 2, 2, 2, 1, 0, 2, 1, 1, 1, 1, 1, 0, 2, 0, 0, 2, 0, 2, 2, 2, 0, 2, 2, 1, 2, 3, 3, 2, 2], [99, 18, 29, 0, 4, 59, 23, 22, 72, 1], [1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [3, 2, 5, 1, 2, 9, 7, 1, 3], [0, 4, 2, 3, 0, 5, 2], [40, 19, 53, 99], [1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [3, 2, 1, 9, 8, 2, 2, 1], [3, 0, 0, 6], [16, 55], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [9, 0, 9, 2, 2, 9, 0, 7, 6, 7, 3, 6, 1, 3, 4, 2, 2, 4, 9, 8, 0, 7, 7, 3, 4, 2, 2, 2, 7, 0, 3, 1, 0, 2, 6, 2, 8, 7, 4, 0, 9, 0, 3, 2, 9, 4, 5, 1, 7, 3, 3, 7, 1, 2, 5, 2, 4, 4, 4, 4, 2, 8, 8, 4, 6, 2, 8, 8], [2, 0, 0, 1, 3, 2, 1, 3, 2, 2, 1, 0, 2, 3, 2, 3, 3, 1, 3, 3, 2, 2, 2, 2, 3, 1, 3, 1, 1, 1, 2, 0, 0, 1, 1, 1, 3, 2, 3, 1, 1, 2, 0, 0, 1, 3, 0], [11, 32, 85, 18, 26, 46]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 0, 16, 16, 9, 7, 3, 1, 0, 0, 0, 0, 1, 1, 0, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.divide_no_nan(tf.math.add(alpha, alpha), grad)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.subtract(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), grad)))), tf.math.add(beta, beta))), tf.math.add(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))), beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3025954090262513, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1], [2, 6, 4, 2, 3, 0, 9, 8, 9, 0, 2, 0, 2, 0, 9, 5, 7, 5, 1, 8, 9, 8, 1, 6, 5, 0, 3, 3, 3, 5, 1, 8, 8, 1, 0, 3, 9], [2, 2, 2, 2, 2, 2, 1, 0, 2, 1, 1, 1, 1, 1, 0, 2, 0, 0, 2, 0, 2, 2, 2, 0, 2, 2, 1, 2, 3, 3, 2, 2], [99, 18, 29, 0, 4, 59, 23, 22, 72, 1], [1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [4, 2, 2, 1, 2, 9, 6, 8], [0, 4, 3, 3, 0, 2], [70, 19, 6, 99], [1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [3, 2, 1, 9, 8, 2, 2, 1], [3, 0, 0, 6], [16, 55], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 0, 9, 2, 2, 9, 0, 7, 6, 7, 3, 6, 1, 3, 4, 2, 2, 4, 9, 8, 0, 7, 7, 3, 4, 2, 2, 2, 7, 0, 3, 1, 0, 2, 6, 2, 8, 7, 4, 0, 9, 0, 3, 2, 9, 4, 5, 1, 7, 3, 3, 7, 1, 2, 5, 2, 4, 4, 4, 4, 2, 8, 8, 4, 6, 2, 8, 8], [0, 0, 0, 1, 3, 2, 1, 3, 2, 2, 1, 0, 2, 3, 2, 3, 3, 1, 3, 3, 2, 2, 2, 2, 3, 1, 3, 1, 1, 1, 2, 0, 0, 1, 1, 1, 3, 2, 3, 1, 1, 2, 0, 0, 1, 3, 0], [11, 32, 85, 18, 26, 46]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 12, 6, 6, 0, 14, 14, 8, 6, 3, 1, 0, 0, 0, 0, 2, 1, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.multiply(grad, grad)), tf.math.add(alpha, grad)), tf.math.negative(tf.math.add(alpha, grad)))), grad), grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), grad)), tf.math.add(beta, grad)), tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)))), beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [3.0200917460363867, 10.187206005549402, 26.702936634773653, 54.78996779401903, 95.25242865465069, 152.41263491341215], "accuracy": [0.09721305221319199, 0.10130762308835983, 0.09734513610601425, 0.09985470771789551, 0.09721305221319199, 0.10289261490106583], "val_loss": [3.8182405744280135, 11.442135402134486, 25.38975034441267, 46.96089717320034, 77.68674795968192, 119.32506888253349], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0], [0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1], [8, 6, 4, 2, 3, 0, 9, 8, 9, 0, 2, 0, 2, 0, 9, 5, 7, 5, 1, 8, 9, 8, 1, 6, 5, 0, 3, 3, 3, 5, 1, 8, 8, 1, 0, 3, 9], [3, 2, 0, 2, 2, 2, 1, 0, 2, 1, 1, 1, 1, 1, 0, 2, 0, 0, 2, 0, 2, 2, 2, 0, 2, 2, 1, 2, 3, 3, 2, 2], [99, 18, 29, 0, 4, 59, 23, 22, 72, 1], [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0], [6, 0, 5, 1, 2, 9], [0, 5, 3, 3, 0], [80, 19, 6, 99], [0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [3, 2, 1, 9, 8, 2, 2, 1], [3, 0, 0, 6], [16, 55], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 0, 9, 2, 2, 9, 0, 7, 6, 7, 3, 6, 1, 3, 4, 2, 2, 4, 9, 8, 0, 7, 7, 3, 4, 2, 2, 2, 7, 0, 3, 1, 0, 2, 6, 2, 8, 7, 4, 0, 9, 0, 3, 2, 9, 4, 5, 1, 7, 3, 3, 7, 1, 2, 5, 2, 4, 4, 4, 4, 2, 8, 8, 4, 6, 2, 8, 8], [2, 0, 0, 1, 3, 2, 1, 3, 2, 2, 1, 0, 2, 3, 2, 3, 3, 1, 3, 3, 2, 2, 2, 2, 3, 1, 3, 1, 1, 1, 2, 0, 0, 1, 1, 1, 3, 2, 3, 1, 1, 2, 0, 0, 1, 3, 0], [11, 32, 85, 18, 26, 46]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 4, 4, 2, 2, 1, 5, 4, 2, 2, 1, 2, 1, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, tf.math.add(tf.math.add(sigma, sigma), tf.math.add(sigma, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [3.0357605003174697e+27, 3.479870757015251e+29, 1.6274395275940135e+32, Infinity, NaN, NaN, NaN], "accuracy": [0.0820235088467598, 0.08400475233793259, 0.09998679161071777, 0.1010434553027153, 0.10091137140989304, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.4211741665530961e+28, 3.7801097517859796e+30, 1.5416929888155358e+33, NaN, NaN, NaN, NaN], "val_accuracy": [0.0573333315551281, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1], [7, 1, 4, 1, 9, 0, 9, 8, 9, 0, 2, 0, 2, 0, 9, 5, 7, 5, 1, 8, 9, 8, 1, 6, 5, 0, 3, 3, 3, 5, 1, 8, 8, 1, 0, 3, 9], [2, 2, 2, 2, 2, 2, 1, 0, 2, 1, 1, 1, 1, 1, 0, 2, 0, 0, 2, 0, 2, 2, 2, 0, 2, 2, 1, 2, 3, 3, 2, 2], [99, 18, 29, 0, 4, 59, 23, 22, 72, 1], [0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0], [1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1], [8, 2, 5, 5, 9, 9, 8], [0, 4, 2, 3, 0], [40, 19, 6, 99], [1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [3, 2, 1, 9, 8, 2, 2, 1], [3, 0, 0, 6], [16, 55], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [2, 0, 9, 2, 2, 9, 0, 7, 6, 7, 3, 6, 1, 3, 4, 2, 2, 4, 9, 8, 0, 7, 7, 3, 4, 2, 2, 2, 7, 0, 3, 1, 0, 2, 6, 2, 8, 7, 4, 0, 9, 0, 3, 2, 9, 4, 5, 1, 7, 3, 3, 7, 1, 2, 5, 2, 4, 4, 4, 4, 2, 8, 8, 4, 6, 2, 8, 8], [2, 0, 0, 1, 3, 2, 1, 3, 2, 2, 1, 0, 2, 3, 2, 3, 3, 1, 3, 3, 2, 2, 2, 2, 3, 1, 3, 1, 1, 1, 2, 0, 0, 1, 1, 1, 3, 2, 3, 1, 1, 2, 0, 0, 1, 3, 0], [11, 32, 85, 18, 26, 46]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 11, 8, 3, 2, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.subtract(tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32), tf.math.negative(grad)), tf.math.add(alpha, grad))), tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(beta, tf.math.negative(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2616236.5258223494, 50432686.12230881, 231862124.35451064, 652070194.1788403, 1388855123.5694096, 2562638748.9948487], "accuracy": [0.10091137140989304, 0.10091137140989304, 0.09787346422672272, 0.1006472036242485, 0.09721305221319199, 0.10276053100824356], "val_loss": [9892922.0, 78954550.85714285, 266262473.14285713, 630892178.2857143, 1231922651.4285715, 2128430153.142857], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0], [0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1], [2, 2, 0, 2, 2, 0, 9, 8, 9, 0, 2, 0, 2, 0, 9, 5, 7, 5, 1, 8, 9, 8, 1, 6, 5, 0, 3, 3, 3, 5, 1, 8, 8, 1, 0, 3, 9], [3, 2, 0, 2, 2, 2, 1, 0, 2, 1, 1, 1, 1, 1, 0, 2, 0, 0, 2, 0, 2, 2, 2, 0, 2, 2, 1, 2, 3, 3, 2, 2], [74, 18, 29, 0, 4, 59, 23, 22, 72, 1], [0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1], [3, 2, 5, 1, 2, 9, 1, 1, 0], [0, 4, 5, 3, 0, 2], [40, 19, 6, 99], [1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [3, 2, 1, 9, 8, 2, 2, 1], [3, 0, 0, 6], [16, 55], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [7, 0, 9, 2, 2, 9, 0, 7, 6, 7, 3, 6, 1, 3, 4, 2, 2, 4, 9, 8, 0, 7, 7, 3, 4, 2, 2, 2, 7, 0, 3, 1, 0, 2, 6, 2, 8, 7, 4, 0, 9, 0, 3, 2, 9, 4, 5, 1, 7, 3, 3, 7, 1, 2, 5, 2, 4, 4, 4, 4, 2, 8, 8, 4, 6, 2, 8, 8], [2, 0, 0, 1, 3, 2, 1, 3, 2, 2, 1, 0, 2, 3, 2, 3, 3, 1, 3, 3, 2, 2, 2, 2, 3, 1, 3, 1, 1, 1, 2, 0, 0, 1, 1, 1, 3, 2, 3, 1, 1, 2, 0, 0, 1, 3, 0], [11, 32, 85, 18, 26, 46]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 3, 3, 1, 15, 15, 9, 6, 3, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad)), tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32))))))), tf.math.negative(beta))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(beta, tf.math.negative(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [3.0200917460363867, 10.187206005549402, 26.702936634773653, 54.78996779401903, 95.25242865465069, 152.41263491341215], "accuracy": [0.09721305221319199, 0.10130762308835983, 0.09734513610601425, 0.09985470771789551, 0.09721305221319199, 0.10289261490106583], "val_loss": [3.8182405744280135, 11.442135402134486, 25.38975034441267, 46.96089717320034, 77.68674795968192, 119.32506888253349], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1], [5, 9, 4, 1, 3, 0, 9, 8, 9, 0, 2, 0, 2, 0, 9, 5, 7, 5, 1, 8, 9, 8, 1, 6, 5, 0, 3, 3, 3, 5, 1, 8, 8, 1, 0, 3, 9], [2, 1, 1, 3, 2, 2, 1, 0, 2, 1, 1, 1, 1, 1, 0, 2, 0, 0, 2, 0, 2, 2, 2, 0, 2, 2, 1, 2, 3, 3, 2, 2], [99, 18, 29, 0, 4, 59, 23, 22, 72, 1], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1], [1, 2, 5, 1, 2, 9, 7], [3, 4, 2, 3, 0], [40, 19, 6, 99], [1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [3, 2, 1, 9, 8, 2, 2, 1], [3, 0, 0, 6], [16, 55], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [2, 0, 9, 2, 2, 9, 0, 7, 6, 7, 3, 6, 1, 3, 4, 2, 2, 4, 9, 8, 0, 7, 7, 3, 4, 2, 2, 2, 7, 0, 3, 1, 0, 2, 6, 2, 8, 7, 4, 0, 9, 0, 3, 2, 9, 4, 5, 1, 7, 3, 3, 7, 1, 2, 5, 2, 4, 4, 4, 4, 2, 8, 8, 4, 6, 2, 8, 8], [2, 0, 0, 1, 3, 2, 1, 3, 2, 2, 1, 0, 2, 3, 2, 3, 3, 1, 3, 3, 2, 2, 2, 2, 3, 1, 3, 1, 1, 1, 2, 0, 0, 1, 1, 1, 3, 2, 3, 1, 1, 2, 0, 0, 1, 3, 0], [11, 32, 85, 18, 26, 46]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 2, 0, 1, 12, 12, 7, 5, 2, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.square(grad), tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.add(beta, beta))), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(beta, tf.math.negative(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10077928751707077, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1], [5, 6, 3, 1, 3, 0, 9, 8, 9, 0, 2, 0, 2, 0, 9, 5, 7, 5, 1, 8, 9, 8, 1, 6, 5, 0, 3, 3, 3, 5, 1, 8, 8, 1, 0, 3, 9], [0, 2, 2, 2, 2, 2, 1, 0, 2, 1, 1, 1, 1, 1, 0, 2, 0, 0, 2, 0, 2, 2, 2, 0, 2, 2, 1, 2, 3, 3, 2, 2], [99, 18, 29, 0, 4, 59, 23, 22, 72, 1], [1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0], [3, 3, 5, 1, 2, 9], [0, 4, 3, 3, 0], [40, 19, 6, 99], [1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [3, 2, 1, 9, 8, 2, 2, 1], [3, 0, 0, 6], [16, 55], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 0, 9, 2, 2, 9, 0, 7, 6, 7, 3, 6, 1, 3, 4, 2, 2, 4, 9, 8, 0, 7, 7, 3, 4, 2, 2, 2, 7, 0, 3, 1, 0, 2, 6, 2, 8, 7, 4, 0, 9, 0, 3, 2, 9, 4, 5, 1, 7, 3, 3, 7, 1, 2, 5, 2, 4, 4, 4, 4, 2, 8, 8, 4, 6, 2, 8, 8], [2, 0, 0, 1, 3, 2, 1, 3, 2, 2, 1, 0, 2, 3, 2, 3, 3, 1, 3, 3, 2, 2, 2, 2, 3, 1, 3, 1, 1, 1, 2, 0, 0, 1, 1, 1, 3, 2, 3, 1, 1, 2, 0, 0, 1, 3, 0], [11, 32, 85, 18, 26, 46]], "fitness": -0.0965714305639267, "mapping_values": [1, 8, 8, 4, 4, 1, 5, 5, 2, 3, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32), grad), grad), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.302761432847736, 2.302582036455341, 2.3002842963411037, 2.2994904699200855, 2.2993283781314395, 2.2986715183817337, 2.299667408248736, 2.3008864538434346, 2.3013267036536744, 2.301825975052291], "accuracy": [0.09060890227556229, 0.09140139818191528, 0.09576013684272766, 0.09906221181154251, 0.10355303436517715, 0.11068551242351532, 0.10355303436517715, 0.0948355570435524, 0.08994849026203156, 0.08598599582910538], "val_loss": [1.9704701559884208, 1.969508375440325, 1.9687705039978027, 1.9686738422938757, 1.9691643033708846, 1.970360619681222, 1.9711999211992537, 1.9716777120317732, 1.9721427645002092, 1.9726533889770508], "val_accuracy": [0.044333335012197495, 0.058666665107011795, 0.07999999821186066, 0.10366666316986084, 0.11733333021402359, 0.10266666859388351, 0.08666666597127914, 0.08166666328907013, 0.07199999690055847, 0.07066666334867477]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0], [0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1], [5, 6, 4, 1, 3, 0, 9, 8, 9, 0, 2, 0, 2, 0, 9, 5, 7, 5, 1, 8, 9, 8, 1, 6, 5, 0, 3, 3, 3, 5, 1, 8, 8, 1, 0, 3, 9], [2, 2, 2, 2, 2, 2, 1, 0, 2, 1, 1, 1, 1, 1, 0, 2, 0, 0, 2, 0, 2, 2, 2, 0, 2, 2, 1, 2, 3, 3, 2, 2], [99, 18, 29, 0, 4, 59, 23, 22, 72, 1], [1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0], [1, 1, 0, 1, 1, 0, 0, 1, 1, 0], [3, 4, 5, 1, 2, 9], [0, 4, 2, 3, 0], [69, 19, 6, 99], [1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [3, 2, 1, 9, 8, 2, 2, 1], [3, 0, 0, 6], [16, 55], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 0, 9, 2, 2, 9, 0, 7, 6, 7, 3, 6, 1, 3, 4, 2, 2, 4, 9, 8, 0, 7, 7, 3, 4, 2, 2, 2, 7, 0, 3, 1, 0, 2, 6, 2, 8, 7, 4, 0, 9, 0, 3, 2, 9, 4, 5, 1, 7, 3, 3, 7, 1, 2, 5, 2, 4, 4, 4, 4, 2, 8, 8, 4, 6, 2, 8, 8], [3, 0, 0, 1, 3, 2, 1, 3, 2, 2, 1, 0, 2, 3, 2, 3, 3, 1, 3, 3, 2, 2, 2, 2, 3, 1, 3, 1, 1, 1, 2, 0, 0, 1, 1, 1, 3, 2, 3, 1, 1, 2, 0, 0, 1, 3, 0], [11, 32, 85, 18, 26, 46]], "fitness": -0.035999998450279236, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(grad), lambda shape,  alpha, beta, grad: tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.302935919977686, 2.303815733818031, 2.302696377200347, 2.3028261413695144, 2.302987287954931, 2.3017108796877617], "accuracy": [0.08955223858356476, 0.08558975160121918, 0.0882314071059227, 0.08796724677085876, 0.09060890227556229, 0.09602430462837219], "val_loss": [1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056], "val_accuracy": [0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1], [5, 6, 2, 1, 3, 0, 9, 8, 9, 0, 2, 0, 2, 0, 9, 5, 7, 5, 1, 8, 9, 8, 1, 6, 5, 0, 3, 3, 3, 5, 1, 8, 8, 1, 0, 3, 9], [0, 2, 2, 0, 2, 2, 1, 0, 2, 1, 1, 1, 1, 1, 0, 2, 0, 0, 2, 0, 2, 2, 2, 0, 2, 2, 1, 2, 3, 3, 2, 2], [99, 18, 29, 0, 4, 59, 23, 22, 72, 1], [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0], [1, 1, 0, 1, 1, 0, 0, 1, 1, 0], [1, 2, 5, 1, 2, 9], [0, 4, 2, 3, 0], [40, 19, 6, 99], [1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [3, 2, 1, 9, 8, 2, 2, 1], [3, 0, 0, 6], [16, 55], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 0, 9, 2, 2, 9, 0, 7, 6, 7, 3, 6, 1, 3, 4, 2, 2, 4, 9, 8, 0, 7, 7, 3, 4, 2, 2, 2, 7, 0, 3, 1, 0, 2, 6, 2, 8, 7, 4, 0, 9, 0, 3, 2, 9, 4, 5, 1, 7, 3, 3, 7, 1, 2, 5, 2, 4, 4, 4, 4, 2, 8, 8, 4, 6, 2, 8, 8], [3, 0, 0, 1, 3, 2, 1, 3, 2, 2, 1, 0, 2, 3, 2, 3, 3, 1, 3, 3, 2, 2, 2, 2, 3, 1, 3, 1, 1, 1, 2, 0, 0, 1, 1, 1, 3, 2, 3, 1, 1, 2, 0, 0, 1, 3, 0], [11, 32, 85, 18, 26, 46]], "fitness": -0.035999998450279236, "mapping_values": [1, 8, 8, 4, 4, 2, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(alpha, grad), tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.302935919977686, 2.303815733818031, 2.302696377200347, 2.3028261413695144, 2.302987287954931, 2.3017108796877617], "accuracy": [0.08955223858356476, 0.08558975160121918, 0.0882314071059227, 0.08796724677085876, 0.09060890227556229, 0.09602430462837219], "val_loss": [1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056], "val_accuracy": [0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856]}}]