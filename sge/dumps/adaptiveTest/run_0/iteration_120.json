[{"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [1, 5, 0, 2, 9, 6, 2, 0, 3, 5, 2], [1, 0, 0, 3, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [70, 82, 84, 57, 93, 59, 23, 22, 72, 1], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1], [0, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 2, 9, 1, 9], [5, 0, 0, 2], [26, 57, 83], [0, 1, 0], [1], [8], [3], [], [0, 1, 0, 1, 1], [0, 4, 5, 2, 9], [2, 0, 2], [6, 32]], "fitness": -0.7599999904632568, "mapping_values": [1, 5, 5, 3, 2, 1, 5, 5, 2, 3, 2, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.negative(alpha))), tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, grad), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.2939874365691573, 2.2729143701162102, 2.248649120834667, 2.222379287157423, 2.1898737921769578, 2.145910783041391, 2.0886906810078276, 2.0197988960957405, 1.9326046103924777, 1.8335993972830469, 1.7329125511427408, 1.6198958447895597, 1.5215457149264269, 1.4393701200015383, 1.3650405660769596, 1.3018918387909701, 1.2316544804480476, 1.2070887138688915, 1.1823439040062467, 1.1393736159843997, 1.0833550349454586, 1.0726443064951263, 1.0487221501144703, 1.0302061007054664, 1.0100843154869186, 0.996632496206248, 0.9629011959164229, 0.9549295133713639, 0.9340411874486187, 0.9351584342067363, 0.920195105329024, 0.8999254012766011, 0.9005768863579474, 0.8840588369011769, 0.8840695611552918, 0.8669773442885974, 0.8576198303153124, 0.8459013830543178, 0.8392552333249077, 0.837571017675396, 0.8371299831795733, 0.8154373150286878, 0.8140254210975459, 0.8084695025237324, 0.8118565098374291, 0.7933542802191808, 0.8048962509202258, 0.7935901697537587, 0.7900795376122888, 0.7887946642180476, 0.7812427609446436, 0.7785389434470948, 0.771922750724006, 0.7654838908176853, 0.7479513578363901, 0.7558495379111487, 0.7528749705541875, 0.7554167815722872, 0.743501344754979], "accuracy": [0.11240258812904358, 0.16721701622009277, 0.22374852001667023, 0.27380794286727905, 0.31660282611846924, 0.3529256284236908, 0.3749834895133972, 0.4019284248352051, 0.43125081062316895, 0.4497424364089966, 0.4690265357494354, 0.4892352521419525, 0.5164443254470825, 0.5305771827697754, 0.5410117506980896, 0.5605600476264954, 0.5835424661636353, 0.588297426700592, 0.5908070206642151, 0.6019020080566406, 0.6194690465927124, 0.6269977688789368, 0.6283186078071594, 0.6383568644523621, 0.6450931429862976, 0.6493197679519653, 0.658961832523346, 0.6634526252746582, 0.6688680648803711, 0.6618676781654358, 0.6713775992393494, 0.6843217611312866, 0.6796988248825073, 0.6812838315963745, 0.683529257774353, 0.6894729733467102, 0.6897371411323547, 0.6947563290596008, 0.6973979473114014, 0.7014925479888916, 0.6964733600616455, 0.7033417224884033, 0.7069079279899597, 0.7020208835601807, 0.7083608508110046, 0.7124554514884949, 0.7080966830253601, 0.7150970697402954, 0.7132478952407837, 0.7086250185966492, 0.7189275026321411, 0.7215691208839417, 0.7172104120254517, 0.7246070504188538, 0.7256637215614319, 0.724739134311676, 0.7224937081336975, 0.7234182953834534, 0.7297582626342773], "val_loss": [1.9508037567138672, 1.930102825164795, 1.9063728196280343, 1.8771617071969169, 1.8399793079921178, 1.791637556893485, 1.7294582639421736, 1.6524037633623396, 1.560234580721174, 1.456824881689889, 1.3505050114222936, 1.2472890785762243, 1.1535378524235316, 1.0730794157300676, 1.0062764372144426, 0.951578174318586, 0.9026691913604736, 0.8657351902553013, 0.8347010101590838, 0.8063689129693168, 0.7826826402119228, 0.7604088272367205, 0.7428801740918841, 0.7264020953859601, 0.7134626763207572, 0.700707026890346, 0.687630261693682, 0.6765857594353812, 0.6676111391612461, 0.6583160161972046, 0.64900461265019, 0.6412818772452218, 0.6326187338147845, 0.6264599731990269, 0.6220084939684186, 0.6131471225193569, 0.6088844367436, 0.6019678626741681, 0.5986498934882027, 0.5920628479548863, 0.5899506466729301, 0.5856516701834542, 0.5807281562260219, 0.5760090521403721, 0.5720821789332798, 0.5690071753093174, 0.5656277452196393, 0.5635126318250384, 0.5590732267924717, 0.5571519987923759, 0.5541035107203892, 0.5512293066297259, 0.5478988715580532, 0.5438934905188424, 0.5409148250307355, 0.5387070349284581, 0.5363538946424212, 0.53677385193961, 0.5362504550388881], "val_accuracy": [0.2123333364725113, 0.33799999952316284, 0.3893333375453949, 0.4266666769981384, 0.44866666197776794, 0.47733333706855774, 0.5103333592414856, 0.5350000262260437, 0.5519999861717224, 0.5673333406448364, 0.5849999785423279, 0.6050000190734863, 0.6266666650772095, 0.6466666460037231, 0.6666666865348816, 0.6796666383743286, 0.6866666674613953, 0.6903333067893982, 0.6943333148956299, 0.7003333568572998, 0.6970000267028809, 0.7080000042915344, 0.7113333344459534, 0.7176666855812073, 0.7210000157356262, 0.7229999899864197, 0.7233333587646484, 0.7279999852180481, 0.7273333072662354, 0.737666666507721, 0.7350000143051147, 0.7393333315849304, 0.7443333268165588, 0.7450000047683716, 0.7450000047683716, 0.749666690826416, 0.7476666569709778, 0.7573333382606506, 0.7546666860580444, 0.7586666941642761, 0.7513333559036255, 0.7513333559036255, 0.7556666731834412, 0.7593333125114441, 0.7616666555404663, 0.7613333463668823, 0.7620000243186951, 0.7639999985694885, 0.7696666717529297, 0.7670000195503235, 0.7676666378974915, 0.7676666378974915, 0.7676666378974915, 0.7733333110809326, 0.7706666588783264, 0.7730000019073486, 0.7723333239555359, 0.7699999809265137, 0.7683333158493042]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [1, 8, 0, 2, 9, 6, 2, 0, 3, 5, 2], [0, 2, 0, 3, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [70, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 1], [6, 3, 7, 9, 1, 9], [4, 0, 0, 2], [26, 55, 83], [0, 1, 0], [1], [8], [0], [57], [0, 1, 0, 1, 1], [0, 4, 5, 2, 9], [2, 0, 2], [6, 32]], "fitness": -0.7397142648696899, "mapping_values": [1, 4, 4, 2, 2, 1, 9, 9, 5, 4, 3, 1, 1, 0, 1, 1, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(grad))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, beta)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.296768167944412, 2.2798761573875144, 2.2606242031484878, 2.241743893561, 2.2197047959008884, 2.191612503894206, 2.1565698847684405, 2.115949224471542, 2.0626597134286953, 2.0004809097040126, 1.9300068579392742, 1.8420769691530268, 1.7517705804809462, 1.6664786883758407, 1.5788318508289525, 1.4981745009598022, 1.4148200952838268, 1.369748811695979, 1.330475799553367, 1.2779206969655814, 1.21295824971701, 1.1929934388847083, 1.163302113603308, 1.1374303357413165, 1.1095805921417266, 1.092969828089073, 1.05293702577729, 1.041385272096854, 1.0178214692956091, 1.0139339726441383, 0.9964921785588152, 0.9719441150393956, 0.9706504479564334, 0.951265581185398, 0.9494357255345653, 0.9307072942975868, 0.918796743927473, 0.9055414086540126, 0.8966380466622542, 0.8933096979319727, 0.8912274982037719, 0.8677453005696489, 0.866032163086915, 0.8600497258384986, 0.8627671854701638, 0.8426639930431349, 0.8529202096797, 0.839819153152547, 0.8361778613945056, 0.8341676858926037, 0.8265618816138164, 0.8227960260757413, 0.8161801569938282, 0.807367023877212], "accuracy": [0.10460969805717468, 0.14898955821990967, 0.1962752640247345, 0.24025888741016388, 0.27922335267066956, 0.30986660718917847, 0.3401135802268982, 0.3641526997089386, 0.3909655213356018, 0.4091929793357849, 0.4212125241756439, 0.4399682879447937, 0.47364944219589233, 0.47972527146339417, 0.49531105160713196, 0.5163122415542603, 0.5436534285545349, 0.5473517179489136, 0.551050066947937, 0.5587108731269836, 0.5838066339492798, 0.5889578461647034, 0.5934486985206604, 0.5997886657714844, 0.6118082404136658, 0.6185444593429565, 0.629111111164093, 0.6357152462005615, 0.6450931429862976, 0.637432336807251, 0.6507726907730103, 0.6584334969520569, 0.6564522385597229, 0.6579051613807678, 0.6629242897033691, 0.6687359809875488, 0.6716417670249939, 0.6796988248825073, 0.6833971738815308, 0.681547999382019, 0.6796988248825073, 0.6873596906661987, 0.6917183995246887, 0.6859067678451538, 0.6880200505256653, 0.69673752784729, 0.6939638257026672, 0.6996433734893799, 0.6971337795257568, 0.6951525807380676, 0.7033417224884033, 0.7071720957756042, 0.7036058902740479, 0.7136441469192505], "val_loss": [1.9558797563825334, 1.9392265592302596, 1.9213564055306571, 1.9007923262459892, 1.8765051705496651, 1.846508502960205, 1.8093250138419015, 1.7634841373988561, 1.7075955186571394, 1.6406428813934326, 1.563831431525094, 1.4779092924935477, 1.3884741578783308, 1.2993168830871582, 1.2147322382245744, 1.1383145877293177, 1.0694258894239153, 1.0134051527295793, 0.9670813083648682, 0.9264416354043143, 0.8901124681745257, 0.8591782535825457, 0.8333271741867065, 0.8097480705806187, 0.7902509995869228, 0.7722938741956439, 0.7550797121865409, 0.7397043023790631, 0.7269197532108852, 0.715152450970241, 0.7039614234651838, 0.6927520717893328, 0.6827958311353411, 0.6739107710974557, 0.6670345408575875, 0.6585766928536552, 0.6518187693187169, 0.6439975670405796, 0.6382910013198853, 0.6306801523481097, 0.6259739569255284, 0.6213994707380023, 0.6156183140618461, 0.6110327754701886, 0.6051071030752999, 0.6013634715761457, 0.597469551222665, 0.5942285060882568, 0.5901323556900024, 0.5868879045758929, 0.5834234442029681, 0.5806918655123029, 0.5768805742263794, 0.5729296888623919], "val_accuracy": [0.15833333134651184, 0.29600000381469727, 0.3623333275318146, 0.398333340883255, 0.4259999990463257, 0.4449999928474426, 0.46700000762939453, 0.4933333396911621, 0.5203333497047424, 0.5366666913032532, 0.5529999732971191, 0.5673333406448364, 0.5799999833106995, 0.5896666646003723, 0.6083333492279053, 0.628000020980835, 0.6556666493415833, 0.6693333387374878, 0.6743333339691162, 0.6776666641235352, 0.6856666803359985, 0.6930000185966492, 0.6963333487510681, 0.699999988079071, 0.7039999961853027, 0.7059999704360962, 0.7080000042915344, 0.7129999995231628, 0.7160000205039978, 0.7203333377838135, 0.7193333506584167, 0.721666693687439, 0.7306666374206543, 0.7276666760444641, 0.7319999933242798, 0.734333336353302, 0.734000027179718, 0.7416666746139526, 0.7423333525657654, 0.7453333139419556, 0.7440000176429749, 0.7426666617393494, 0.7486666440963745, 0.7483333349227905, 0.7556666731834412, 0.7549999952316284, 0.7549999952316284, 0.7546666860580444, 0.7613333463668823, 0.7576666474342346, 0.7573333382606506, 0.7543333172798157, 0.7546666860580444, 0.7590000033378601]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [1, 8, 0, 2, 9, 6, 2, 0, 3, 5, 2], [1, 0, 0, 3, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [70, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 1, 1, 0, 0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 0, 0, 1, 1, 1], [6, 3, 7, 9, 1, 9], [4, 0, 0, 2], [36, 55, 6], [0, 1, 0], [1], [8], [3], [57], [0, 1, 0, 1, 1], [0, 4, 5, 2, 9], [2, 0, 2], [6, 32]], "fitness": -0.6642857193946838, "mapping_values": [1, 4, 4, 2, 2, 1, 7, 7, 4, 3, 3, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.sqrt(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.multiply(grad, tf.math.add(beta, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.0530020946115473, 1.2046975688911652, 0.9007166359150934, 0.8165551801840107, 0.713615566755818, 0.6696001483055389, 0.6458015663591374, 0.6010616314315116, 0.5761391509163413, 0.5620456245108965, 0.5610843776491388, 0.5458928906859314, 0.5350736111634758, 0.5451631579952091, 0.5258737358403259, 0.5086887188835418, 0.5159928878741478, 0.5127202813864038, 0.5371834332082313, 0.5349561030980288, 0.5520502698931633, 0.5533329102624881, 0.5654572799630594], "accuracy": [0.2996962070465088, 0.5904107689857483, 0.6630563735961914, 0.7014925479888916, 0.7326641082763672, 0.7467969655990601, 0.759609043598175, 0.7810064554214478, 0.7847048044204712, 0.7821952104568481, 0.7857614755630493, 0.7976489067077637, 0.7947431206703186, 0.7921014428138733, 0.8038568496704102, 0.8062343001365662, 0.8101968169212341, 0.8098005652427673, 0.800290584564209, 0.8016114234924316, 0.7931581139564514, 0.7975168228149414, 0.7942147850990295], "val_loss": [0.9285953044891357, 0.7333464622497559, 0.6241591657911029, 0.5314551762172154, 0.48338770866394043, 0.4831897360937936, 0.46957458768572125, 0.4643556220190866, 0.4255175164767674, 0.4379937393324716, 0.4293063793863569, 0.4061026743480137, 0.4179844260215759, 0.4135979839733669, 0.4130518777029855, 0.4148442489760263, 0.4195540802819388, 0.4173489042690822, 0.439093964440482, 0.4469385657991682, 0.42932179995945524, 0.4642979758126395, 0.44937173809323994], "val_accuracy": [0.6356666684150696, 0.6993333101272583, 0.706333339214325, 0.7509999871253967, 0.7706666588783264, 0.7896666526794434, 0.7903333306312561, 0.7919999957084656, 0.8133333325386047, 0.8106666803359985, 0.8083333373069763, 0.8133333325386047, 0.812333345413208, 0.8216666579246521, 0.8306666612625122, 0.8326666951179504, 0.8299999833106995, 0.8366666436195374, 0.8213333487510681, 0.8086666464805603, 0.8149999976158142, 0.8006666898727417, 0.8146666884422302]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [1, 8, 0, 2, 9, 6, 2, 0, 3, 5, 2], [0, 3, 0, 3, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [70, 82, 84, 57, 93, 59, 23, 22, 72, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 0, 1, 1, 1, 0, 0, 1, 0], [6, 3, 7, 9, 1, 9], [0, 0, 5, 0], [26, 55, 83], [0, 1, 0], [1], [8], [0], [57], [0, 1, 0, 1, 1], [0, 4, 5, 2, 9], [2, 0, 2], [6, 32]], "fitness": -0.11400000005960464, "mapping_values": [1, 15, 15, 10, 5, 3, 5, 5, 2, 3, 2, 1, 1, 0, 1, 1, 2, 1, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(grad, tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.square(grad))))), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.0220774231696369e+33, NaN, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1014397069811821, 0.10751552134752274, 0.1154404953122139, 0.11557257920503616, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.2884595587851623e+34, NaN, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10899999737739563, 0.13333334028720856, 0.164000004529953, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [1, 1, 0, 2, 9, 6, 2, 0, 3, 5, 2], [0, 2, 0, 3, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [70, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1], [1, 0, 1, 0, 0, 1, 0, 1, 0], [6, 3, 7, 9, 1, 9], [4, 0, 0, 4], [26, 55, 83], [0, 1, 0], [1], [8], [3], [], [0, 1, 0, 1, 1], [0, 4, 5, 2, 9], [2, 0, 2], [6, 32]], "fitness": -0.1062857136130333, "mapping_values": [1, 15, 15, 9, 6, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.negative(tf.math.add(alpha, grad)), tf.math.multiply(grad, tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [3.7054241883236703, 2.3410883153261146, 2.33799638333747, 2.312213397784996, 2.318488429203923, 2.3180536039123414, 2.325400302281327, 2.3229657380556654], "accuracy": [0.18663319945335388, 0.1286487877368927, 0.12640337646007538, 0.11530841141939163, 0.09708096832036972, 0.09945846349000931, 0.09589222073554993, 0.09787346422672272], "val_loss": [2.0014095987592424, 1.91843352999006, 1.9108178274972099, 1.9921071869986398, 1.9879958289010184, 1.9819887025015694, 1.9807821682521276, 1.9889193262372697], "val_accuracy": [0.1586666703224182, 0.15000000596046448, 0.16566666960716248, 0.09833333641290665, 0.10133333504199982, 0.10000000149011612, 0.09833333641290665, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [1, 8, 5, 2, 5, 5, 2, 5, 0, 5, 2], [0, 2, 0, 3, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [70, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1], [0, 0, 1, 1, 1, 0, 0, 1, 1], [6, 3, 7, 9, 1, 9], [3, 0, 4, 2], [26, 34], [1, 1, 0], [1], [8], [5], [], [0, 1, 0, 1, 1], [0, 4, 5, 2, 9], [2, 0, 2], [6, 32]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 5, 5, 2, 3, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(grad, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [9.221029204526172, 53.16794282658508, 150.66733592039307, 305.1882055723719, 517.2681602122304, 786.7481270405783], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [23.617026737758092, 86.84170750209263, 199.04002598353796, 360.3601335797991, 570.8668387276786, 830.5958600725446], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [1, 7, 0, 2, 9, 6, 2, 0, 3, 5, 2], [0, 3, 0, 3, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [58, 82, 84, 57, 93, 59, 23, 22, 72, 1], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [6, 3, 7, 9, 1, 9], [4, 0, 0, 2], [26, 34], [1, 1, 0], [0], [8], [5], [], [0, 1, 0, 1, 1], [1, 4, 5, 2, 9], [2, 0, 2], [6, 32]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(beta, tf.math.pow(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [1, 8, 0, 2, 9, 6, 2, 0, 3, 5, 2], [0, 2, 0, 3, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [70, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 0, 1, 0, 1, 1, 0, 0, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [6, 3, 7, 9, 1, 9], [4, 0, 0, 2], [26, 55, 83], [0, 1, 0], [1], [8], [0], [57], [0, 0, 0, 1, 1], [0, 4, 5, 2, 9], [0, 0, 2], [6, 32]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 5, 3, 2, 2], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.negative(tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(tf.math.square(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [274377180.3697039, 5381061456.9826975, 24593897704.90556, 68112619720.98587, 147472489544.90134, 269341499297.86395], "accuracy": [0.10593052208423615, 0.10130762308835983, 0.10513802617788315, 0.10276053100824356, 0.10117553919553757, 0.10355303436517715], "val_loss": [1046452845.7142857, 8367505993.142858, 28235688228.57143, 66923553938.28571, 130703687680.0, 225848585654.85715], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [1, 8, 0, 2, 9, 6, 2, 0, 3, 5, 2], [1, 3, 0, 3, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [70, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [6, 3, 7, 2, 1, 9, 3], [4, 0, 0, 2, 1, 2], [26, 55, 83], [0, 1, 0], [1], [8], [0], [29], [0, 1, 0, 1, 1], [0, 4, 5, 2, 9], [2, 0, 2], [6, 32]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 0, 13, 13, 7, 6, 3, 1, 1, 0, 1, 1, 2, 1, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, alpha), tf.math.sqrt(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, beta))), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.add(beta, alpha), beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [1, 5, 0, 2, 9, 6, 2, 0, 3, 5, 2], [0, 0, 0, 3, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [70, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [0, 0, 1, 1, 1, 0, 0, 1, 1], [6, 5, 7, 9, 1, 9], [5, 0, 0, 2], [26, 55, 83], [1, 1, 0], [1], [8], [0], [], [0, 1, 0, 1, 1], [0, 4, 5, 2, 9], [2, 0, 2], [6, 32]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 2, 4, 4, 2, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0936468094587326, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [1, 8, 0, 2, 9, 6, 2, 0, 3, 5, 2], [1, 2, 0, 3, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [70, 82, 84, 57, 93, 59, 23, 22, 72, 1], [0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 0, 1, 1], [6, 6, 7, 9, 1, 9], [4, 0, 0, 2], [26, 55, 14], [0, 1, 0], [0], [8], [0], [67], [0, 1, 0, 0, 1, 1], [7, 4, 5, 2, 9], [2, 1, 2], [6, 32]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 0, 7, 7, 4, 3, 3, 2, 1, 1, 0, 0, 6, 3, 3, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.sqrt(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(beta, tf.math.pow(tf.math.square(alpha), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1], [1, 8, 5, 2, 1, 5, 2, 5, 0, 4, 2], [0, 1, 0, 0, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [50, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [6, 3, 7, 9, 1, 9], [4, 0, 0, 2], [26, 34], [0, 1, 0], [1], [8], [5], [57], [1, 1, 0, 1, 1], [0, 4, 5, 2, 9], [2, 0, 2], [6, 32]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 9, 5, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.square(tf.math.add(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))))), grad))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07449477910995483, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [1, 6, 0, 2, 9, 6, 2, 0, 3, 5, 2], [0, 2, 0, 3, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [70, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 0, 1, 0, 1, 0, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 1, 1, 1], [2, 3, 7, 9, 1, 9], [4, 0, 3, 5], [26, 66, 83], [0, 1, 0], [1], [8], [5], [57], [0, 1, 0, 1, 1], [0, 4, 5, 2, 9], [2, 0, 2], [6, 32]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 2, 9, 9, 5, 4, 2, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, grad), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), grad)))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.13076211512088776, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [1, 3, 0, 2, 9, 6, 2, 0, 3, 5, 2], [2, 3, 0, 3, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [70, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 0, 1, 1, 1, 0, 0, 1, 1], [6, 6, 7, 9, 1, 9], [5, 0, 3, 2], [26, 34], [1, 1, 0], [0], [8], [3], [], [0, 1, 0, 1, 1], [0, 4, 5, 2, 9], [2, 0, 2], [6, 32]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 15, 9, 6, 3, 5, 5, 2, 3, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, grad), tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.negative(tf.math.add(alpha, grad)), tf.math.multiply(grad, tf.math.add(alpha, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.302650004015182, 2.3025943838358085, 2.302598142573516, 2.3025961739748317, 2.3026006119740305, 2.302599945434915, 2.3026120913357797, 2.3026040427641643], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.0944393053650856, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9736453465053014, 1.9736424854823522, 1.9736414636884416, 1.973640033176967, 1.9736392838614327, 1.973640033176967, 1.9736403737749373, 1.973639828818185], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [1, 1, 0, 2, 9, 6, 2, 0, 3, 5, 2], [2, 3, 0, 3, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [58, 82, 84, 57, 93, 59, 23, 22, 72, 1], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 1, 1], [6, 3, 7, 9, 1, 9], [4, 0, 0, 2], [26, 34], [1, 1, 0], [0], [8], [5], [], [1, 1, 0, 1, 1], [0, 4, 5, 2, 9], [2, 0, 2], [6, 32]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07475894689559937, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [1, 5, 0, 2, 9, 6, 2, 0, 3, 5, 2], [3, 2, 0, 3, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [70, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 0, 1, 0, 1, 0, 0, 1, 0, 1], [0, 0, 1, 0, 1, 0, 0, 1, 1], [6, 3, 7, 9, 1, 9], [4, 0, 0, 2], [84, 55, 83], [0, 1, 0], [1], [8], [0], [57], [0, 1, 0, 1, 1], [0, 4, 5, 2, 9], [2, 0, 2], [6, 32]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 0, 9, 9, 5, 4, 3, 1, 1, 0, 1, 1, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, grad), tf.math.square(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.add(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.subtract(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [8.04019345083465e+29, 4.0692407958961434e+30, 2.3205100960341647, 2.304282520110534, 2.3034035515208933, 2.303212044182675, 2.3032521261530876, 2.3032457487788798, 2.303231555425795, 2.3032263792453898], "accuracy": [0.15982036292552948, 0.09681680053472519, 0.0944393053650856, 0.09813763201236725, 0.09509972482919693, 0.09351472556591034, 0.0944393053650856, 0.09377889335155487, 0.09206181764602661, 0.09642054885625839], "val_loss": [NaN, 2.0079983983721053, 1.9761359351021903, 1.9740134647914342, 1.9736549513680595, 1.9738101278032576, 1.9738747051783971, 1.9736249787466866, 1.9736691202436174, 1.9737503187997], "val_accuracy": [0.09933333098888397, 0.09833333641290665, 0.10000000149011612, 0.09833333641290665, 0.10133333504199982, 0.10000000149011612, 0.10000000149011612, 0.10133333504199982, 0.10000000149011612, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [1, 8, 0, 2, 9, 6, 2, 0, 3, 5, 2], [0, 2, 0, 3, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [90, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 1, 1], [6, 3, 7, 9, 1, 9], [4, 0, 0, 3], [26, 55, 83], [0, 1, 0], [1], [8], [3], [], [0, 1, 0, 1, 1], [0, 4, 5, 2, 9], [0, 0, 2], [6, 32]], "fitness": -0.09828571230173111, "mapping_values": [1, 1, 1, 0, 1, 1, 7, 7, 4, 3, 3, 1, 1, 0, 1, 0, 2, 1, 1, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3560769189192934, 3.0558754682950275, 4.901531731589532, 7.954098811569687, 12.33423454993594, 17.807781930675816], "accuracy": [0.09615638852119446, 0.09694888442754745, 0.10540219396352768, 0.10342095047235489, 0.10011887550354004, 0.10487385839223862], "val_loss": [2.0900934764317105, 2.7702065195356096, 4.2821036747523715, 6.584317479814802, 9.648905072893415, 13.518445696149554], "val_accuracy": [0.10066666454076767, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [1, 6, 0, 2, 9, 6, 2, 0, 3, 5, 2], [0, 2, 0, 3, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [70, 82, 84, 57, 93, 59, 23, 22, 72, 1], [0, 1, 1, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 1, 1, 1], [6, 3, 7, 9, 1, 9], [4, 0, 2, 2], [26, 34], [1, 1, 0], [0], [8], [5], [], [0, 1, 0, 1, 1], [0, 4, 5, 2, 9], [0, 0, 2], [6, 32]], "fitness": -0.09828571230173111, "mapping_values": [1, 5, 5, 2, 3, 2, 7, 7, 3, 4, 1, 1, 0, 0, 0, 0, 2, 1, 1, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), beta), tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3560769189192934, 3.0558754682950275, 4.901531731589532, 7.954098811569687, 12.33423454993594, 17.807781930675816], "accuracy": [0.09615638852119446, 0.09694888442754745, 0.10540219396352768, 0.10342095047235489, 0.10011887550354004, 0.10487385839223862], "val_loss": [2.0900934764317105, 2.7702065195356096, 4.2821036747523715, 6.584317479814802, 9.648905072893415, 13.518445696149554], "val_accuracy": [0.10066666454076767, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [1, 5, 0, 2, 9, 6, 2, 0, 3, 5, 2], [1, 2, 0, 3, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [70, 82, 84, 57, 93, 59, 23, 22, 72, 1], [0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 1, 0, 0, 1, 1], [6, 3, 7, 9, 1, 9], [0, 0, 4, 5], [26, 55, 83], [0, 0, 0, 1], [0, 0, 1], [4, 8], [3], [], [1, 1, 0, 1, 1], [0, 4, 5, 2, 9], [2, 0, 2], [6, 32]], "fitness": -0.035999998450279236, "mapping_values": [1, 3, 3, 1, 2, 0, 9, 9, 5, 4, 3, 4, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, alpha), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, sigma))), sigma)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.30275578801784, 2.3030879478633457, 2.3016534860281186, 2.3028303345889465, 2.3035594628172436, 2.303200825976028], "accuracy": [0.09021265059709549, 0.08849557489156723, 0.08545766770839691, 0.08545766770839691, 0.08638224750757217, 0.08757099509239197], "val_loss": [1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056], "val_accuracy": [0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [1, 1, 0, 2, 9, 6, 2, 0, 3, 5, 2], [0, 2, 0, 3, 2, 0, 0, 1, 2, 1, 3, 2, 2, 0, 3, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [70, 82, 84, 57, 93, 59, 23, 22, 72, 1], [1, 0, 1, 0, 1, 0, 0, 1, 0, 1], [0, 0, 1, 1, 1, 0, 0, 1, 1], [6, 5, 7, 9, 1, 9], [2, 0, 3, 2], [26, 84, 83], [1, 1, 0], [0], [8], [5], [], [0, 0, 0, 1, 1], [0, 4, 5, 2, 9], [2, 0, 2], [6, 32]], "fitness": -0.035999998450279236, "mapping_values": [1, 1, 1, 0, 1, 1, 4, 4, 2, 2, 1, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(beta)), tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(tf.math.square(beta), tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.30275578801784, 2.3030879478633457, 2.3016534860281186, 2.3028303345889465, 2.3035594628172436, 2.303200825976028], "accuracy": [0.09021265059709549, 0.08849557489156723, 0.08545766770839691, 0.08545766770839691, 0.08638224750757217, 0.08757099509239197], "val_loss": [1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056, 1.970999104636056], "val_accuracy": [0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856]}}]