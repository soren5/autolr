[{"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [3, 1, 6, 3, 2, 0, 0, 0, 0, 5, 2, 8, 4, 1], [0, 2, 0, 2, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 76, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [2, 4, 0], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.8442857265472412, "mapping_values": [1, 9, 9, 4, 5, 3, 3, 3, 1, 2, 1, 10, 8, 5, 3, 1, 2, 1, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(alpha, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, beta), tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)))), sigma)), tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.0503807336017204, 1.1261876392531405, 0.8043037790742611, 0.7037439292306362, 0.6416043980624524, 0.6019128389551246, 0.5567392138694145, 0.5228729395267435, 0.5001635444579958, 0.48532166295693363, 0.46100951519231, 0.4402214762887714, 0.4287198516537154, 0.40770869600443777, 0.40039350440977367, 0.3767643314877899, 0.37631543698469566, 0.37269439746942723, 0.35791445189793947, 0.35044142720391014, 0.33691096913230384, 0.3275336850399606, 0.3180505024475145, 0.3076688996505712, 0.31248840603452427, 0.2994028735650513, 0.29661182122947893, 0.2793966303679764, 0.2838131154233816, 0.2778029193999099, 0.26497201420580313, 0.2505171460844601, 0.24745966340958278, 0.24762419344033895, 0.2486832535120443, 0.23916830838301303, 0.22505036871887674, 0.2212318336710938, 0.2223001582834148, 0.21410763623881035, 0.2113044149883356, 0.21116687159819483, 0.19937627367048436, 0.19223582286994376, 0.18783401623181284, 0.19495290500290122, 0.17468393714971797, 0.18204059663497227, 0.16290707987187136, 0.17054911650615898, 0.1706487824691364, 0.1695307349354883, 0.16233220175075935, 0.15610155610636067], "accuracy": [0.3043191134929657, 0.6102232336997986, 0.6940959095954895, 0.7386078238487244, 0.755118191242218, 0.7744023203849792, 0.7928939461708069, 0.8029322624206543, 0.8123101592063904, 0.8219521641731262, 0.832650899887085, 0.8380662798881531, 0.8428213000297546, 0.8512746095657349, 0.8545766472816467, 0.86553955078125, 0.8632941246032715, 0.8646149635314941, 0.8638224601745605, 0.8705587387084961, 0.8745211958885193, 0.8803328275680542, 0.8798044919967651, 0.8853520154953003, 0.8790120482444763, 0.8849557638168335, 0.889578640460968, 0.8945978283882141, 0.8905032277107239, 0.8927486538887024, 0.901862382888794, 0.9055606722831726, 0.9056927561759949, 0.9050323367118835, 0.9025228023529053, 0.9111081957817078, 0.9140139818191528, 0.9149385690689087, 0.9141460657119751, 0.917580246925354, 0.9170519113540649, 0.9166556596755981, 0.923920214176178, 0.9281468987464905, 0.925901472568512, 0.9255052208900452, 0.9310526847839355, 0.9277506470680237, 0.935279369354248, 0.9321093559265137, 0.9330339431762695, 0.9356756210327148, 0.9359397888183594, 0.9397701621055603], "val_loss": [0.9469567707606724, 0.6483410426548549, 0.5799233402524676, 0.5158211163112095, 0.4869693177086966, 0.4516160488128662, 0.43625496115003315, 0.41144971336637226, 0.3946592041424343, 0.38109407254627775, 0.3629796249525888, 0.3648936833654131, 0.3507222192628043, 0.34060780491147724, 0.3344422323363168, 0.32917435680116924, 0.3289437804903303, 0.3240493876593454, 0.3183981605938503, 0.30940345355442594, 0.30867757967540194, 0.31141092096056255, 0.3034656729016985, 0.3105567523411342, 0.30575346095221384, 0.30142209359577726, 0.2996160387992859, 0.29973649978637695, 0.2973691650799343, 0.28946306875773836, 0.2908896122659956, 0.29356870480946134, 0.2911318370274135, 0.2889769332749503, 0.293813305241721, 0.2930788738386972, 0.2989180088043213, 0.29600843361445833, 0.28947659049715313, 0.3017574208123343, 0.29891467094421387, 0.2898160219192505, 0.2966645530291966, 0.2925578696387155, 0.29581579140254427, 0.29714893443243845, 0.29997843503952026, 0.3022900564329965, 0.31558533225740704, 0.3057912162372044, 0.30478765283312115, 0.3053328735487802, 0.31269013030188425, 0.3053740773882185], "val_accuracy": [0.6313333511352539, 0.721666693687439, 0.7283333539962769, 0.7590000033378601, 0.784333348274231, 0.8013333082199097, 0.8113333582878113, 0.8153333067893982, 0.8216666579246521, 0.8299999833106995, 0.8423333168029785, 0.8373333215713501, 0.8446666598320007, 0.8483333587646484, 0.8500000238418579, 0.8536666631698608, 0.8543333411216736, 0.8539999723434448, 0.856333315372467, 0.8603333234786987, 0.8656666874885559, 0.8603333234786987, 0.8690000176429749, 0.8669999837875366, 0.859000027179718, 0.8676666617393494, 0.8629999756813049, 0.874666690826416, 0.871999979019165, 0.8759999871253967, 0.874666690826416, 0.874666690826416, 0.8763333559036255, 0.8726666569709778, 0.8773333430290222, 0.8763333559036255, 0.8793333172798157, 0.8820000290870667, 0.878333330154419, 0.8776666522026062, 0.8723333477973938, 0.8826666474342346, 0.8826666474342346, 0.8786666393280029, 0.8830000162124634, 0.8793333172798157, 0.8830000162124634, 0.8820000290870667, 0.8846666812896729, 0.8809999823570251, 0.8823333382606506, 0.8806666731834412, 0.8833333253860474, 0.8803333044052124]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [6, 3, 0, 2, 4, 1, 2, 0, 5, 0, 2, 8, 4, 1], [0, 2, 0, 2, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 76, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.8391428589820862, "mapping_values": [1, 8, 8, 4, 4, 2, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.negative(tf.math.add(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), grad)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.0503683142957434, 1.1279806322771813, 0.806533358730361, 0.7067337411033511, 0.6445473550002431, 0.6019995664136285, 0.5585938810814074, 0.5231372571388303, 0.4984333703365497, 0.4857862627013422, 0.46569262304641096, 0.4411850003140588, 0.4297919960392622, 0.40535700077142034, 0.39866752388958826, 0.3739271827456407, 0.369580866236807, 0.3725988778495171, 0.35933490165818904, 0.3503349284178797, 0.33258129456937274, 0.3293940187909773, 0.3163077196172987, 0.3108950670739175, 0.3101894587077611, 0.30007555332512603, 0.29108616796703135, 0.27310054871573375, 0.27867156428164025, 0.27584290628057856, 0.2699259850331238, 0.25573346724190243, 0.24793137584569006, 0.2471259199983298, 0.24376125738621074, 0.2430636568442469, 0.23245576968983164, 0.2238343183264646, 0.23178419991963575, 0.21539420197668518], "accuracy": [0.3043191134929657, 0.6098269820213318, 0.6914542317390442, 0.7387399077415466, 0.7499669790267944, 0.7741381525993347, 0.7901201844215393, 0.8025360107421875, 0.8145555257797241, 0.8215559124946594, 0.8272355198860168, 0.8360850811004639, 0.841500461101532, 0.8510104417800903, 0.8525954484939575, 0.8663320541381836, 0.8643507957458496, 0.8609166741371155, 0.8676528930664062, 0.8696341514587402, 0.8778232932090759, 0.8771628737449646, 0.8821820020675659, 0.8849557638168335, 0.882710337638855, 0.8835028409957886, 0.8912957310676575, 0.8972394466400146, 0.8930128216743469, 0.8972394466400146, 0.8971073627471924, 0.9027869701385498, 0.906749427318573, 0.9038436412811279, 0.9041078090667725, 0.9060890078544617, 0.91124027967453, 0.9132214784622192, 0.91124027967453, 0.9190331697463989], "val_loss": [0.9463401521955218, 0.6494296448571342, 0.5812028816768101, 0.5175482545580182, 0.48923451559884207, 0.4523370436259678, 0.4412672689982823, 0.41343335594449726, 0.395389335496085, 0.3830073390688215, 0.36348830802100046, 0.3623819351196289, 0.3542212503296988, 0.3366315024239676, 0.33278554677963257, 0.32505384513310026, 0.3301770431654794, 0.32677688768931795, 0.3182844008718218, 0.30377074650355745, 0.3144388880048479, 0.30970934459141325, 0.2979920080729893, 0.30002143553325106, 0.30192456926618305, 0.2926163247653416, 0.2995437298502241, 0.29797305379595074, 0.2963010328156607, 0.28477583612714497, 0.29244178533554077, 0.28832817929131643, 0.2950951797621591, 0.295085540839604, 0.29649917568479267, 0.29637900420597624, 0.30814526762281147, 0.30761308329445974, 0.28418127979551044, 0.3023690240723746], "val_accuracy": [0.6309999823570251, 0.7283333539962769, 0.7286666631698608, 0.7570000290870667, 0.7793333530426025, 0.8013333082199097, 0.8100000023841858, 0.8119999766349792, 0.8199999928474426, 0.831333339214325, 0.8426666855812073, 0.8383333086967468, 0.8426666855812073, 0.8510000109672546, 0.8516666889190674, 0.8560000061988831, 0.8556666374206543, 0.8553333282470703, 0.8566666841506958, 0.8640000224113464, 0.8616666793823242, 0.8603333234786987, 0.8666666746139526, 0.8656666874885559, 0.8629999756813049, 0.8706666827201843, 0.8709999918937683, 0.8736666440963745, 0.8723333477973938, 0.878333330154419, 0.8766666650772095, 0.875, 0.8703333139419556, 0.871999979019165, 0.8799999952316284, 0.8796666860580444, 0.8740000128746033, 0.8776666522026062, 0.8799999952316284, 0.8759999871253967]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [6, 3, 8, 2, 4, 1, 2, 0, 5, 0, 2, 8, 4, 1], [0, 3, 0, 2, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 76, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 5, 3, 3, 0], [38, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [2, 4, 0], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [1, 0, 2], [6, 32, 85]], "fitness": -0.7739999890327454, "mapping_values": [1, 8, 8, 4, 4, 2, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), grad))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.293004607606353, 2.272439106218315, 2.2494340778074213, 2.222540013841461, 2.1860111741940296, 2.1422270525873235, 2.087929075451701, 2.0116109926277668, 1.9231668008773586, 1.8245870869440914, 1.7202537318640192, 1.611804215836566, 1.5176530538249593, 1.4252263048715155, 1.3503669699216798, 1.3005640515404417, 1.247655798730408, 1.2030713377281061, 1.1673921204797344, 1.1315966136797844, 1.0999568195044482, 1.0729235496818272, 1.0500870992825284, 1.0290791245814344, 1.000866857533599, 0.9856001081058551, 0.9777924524259258, 0.9591063762054373, 0.9441032472964936, 0.9409984316351612, 0.9120349184538725, 0.9077343226124692, 0.9016122021506318, 0.8868853139713566, 0.8804633210064665, 0.8615838563862636, 0.8703048804479898, 0.853145850577044, 0.8421295197522399, 0.8362739622915709, 0.830318846817203, 0.8326996560771278, 0.8246592754512148, 0.8147528711374268, 0.8090202707608835, 0.8014647877920164, 0.7965984092081826, 0.7967751502455375, 0.7810486460311491, 0.7766013126158522, 0.7762233268677708, 0.7795306733885556, 0.7700368227692265, 0.7603566790883567, 0.7652162915648502, 0.753440473624791, 0.7526118578439722, 0.7390761179001953, 0.745781948923545, 0.7416168190484758, 0.734773666497156, 0.7215186493224504, 0.7294121339588495, 0.7314994019634452, 0.7300658005733437, 0.7247081491547553, 0.7193183761231258, 0.7106021734796196, 0.7146223586280475, 0.7042567074779097, 0.7091157852209885, 0.7005030209629873, 0.6992760205769567, 0.6994672187519994, 0.7098342143722481, 0.6914354233835603, 0.6962183058899565, 0.6960649319596341, 0.6970079676539056], "accuracy": [0.11676132678985596, 0.1666886806488037, 0.22216351330280304, 0.2719587981700897, 0.32360321283340454, 0.35503897070884705, 0.37564390897750854, 0.40443798899650574, 0.42689210176467896, 0.44710078835487366, 0.4674415588378906, 0.4991414546966553, 0.5079910159111023, 0.54220050573349, 0.5499933958053589, 0.5547483563423157, 0.5695416927337646, 0.5852595567703247, 0.5962224006652832, 0.6009774208068848, 0.6141856908798218, 0.628582775592804, 0.635451078414917, 0.641791045665741, 0.6458855867385864, 0.6499801874160767, 0.654999315738678, 0.655527651309967, 0.663848876953125, 0.6646413803100586, 0.6794346570968628, 0.6806234121322632, 0.681547999382019, 0.6860388517379761, 0.6841896772384644, 0.6901333928108215, 0.6886804699897766, 0.6933034062385559, 0.6985867023468018, 0.7038700580596924, 0.7013604640960693, 0.7013604640960693, 0.7038700580596924, 0.7080966830253601, 0.7047945857048035, 0.7079645991325378, 0.7038700580596924, 0.7098137736320496, 0.7150970697402954, 0.7145687341690063, 0.7154933214187622, 0.719852089881897, 0.7180029153823853, 0.7246070504188538, 0.72672039270401, 0.7271166443824768, 0.7238145470619202, 0.7271166443824768, 0.7302865982055664, 0.7234182953834534, 0.7297582626342773, 0.7359662055969238, 0.7308149337768555, 0.7316074371337891, 0.7329282760620117, 0.7320036888122559, 0.737947404384613, 0.7448157668113708, 0.7384757399559021, 0.7359662055969238, 0.7415136694908142, 0.7433628439903259, 0.7420420050621033, 0.7409853339195251, 0.7375511527061462, 0.744419515132904, 0.7445515990257263, 0.7421740889549255, 0.7433628439903259], "val_loss": [1.9507423809596471, 1.9297723770141602, 1.9057767731802804, 1.8760104860578264, 1.8376712799072266, 1.7883595057896204, 1.7258531706673759, 1.646791730608259, 1.5530526978628976, 1.4493523325238908, 1.3423354625701904, 1.2389447007860457, 1.1471332822527205, 1.0674925872257777, 1.0010206358773368, 0.9474165099007743, 0.9023449761526925, 0.8643310751233783, 0.8330026183809552, 0.8069030897957938, 0.781708802495684, 0.7611011437007359, 0.7431611163275582, 0.7278713158198765, 0.7130229984010968, 0.6997838190623692, 0.6883921793528965, 0.6776297773633685, 0.6670921700341361, 0.6582398414611816, 0.6495025328227452, 0.6434171029499599, 0.6363895961216518, 0.6283551624843052, 0.6238447598048619, 0.6148297275815692, 0.6092175415584019, 0.6051123653139386, 0.5974533217293876, 0.5922685861587524, 0.5893664189747402, 0.5844140223094395, 0.5820552962166923, 0.57743353503091, 0.5749452625002179, 0.5710265295846122, 0.5661385570253644, 0.562755857195173, 0.5590364933013916, 0.5555382626397269, 0.5523171254566738, 0.550520828792027, 0.548103962625776, 0.5454458509172712, 0.5417687552315849, 0.5405151673725673, 0.5374202387673515, 0.5352785587310791, 0.5321584088461739, 0.5293107032775879, 0.5275157519749233, 0.5282599244798932, 0.5248395034245082, 0.5227569341659546, 0.5200171300343105, 0.5188532216208321, 0.516439574105399, 0.514385461807251, 0.5117749146052769, 0.5114001035690308, 0.5125255755015782, 0.506761908531189, 0.506645679473877, 0.5036464078085763, 0.501794695854187, 0.5013182163238525, 0.5019722666059222, 0.49884157521384104, 0.5000897816249302], "val_accuracy": [0.2160000056028366, 0.3373333215713501, 0.39100000262260437, 0.42366665601730347, 0.4546666741371155, 0.4873333275318146, 0.5136666893959045, 0.5433333516120911, 0.5540000200271606, 0.5693333148956299, 0.5849999785423279, 0.5986666679382324, 0.6306666731834412, 0.6613333225250244, 0.6626666784286499, 0.6766666769981384, 0.6833333373069763, 0.6903333067893982, 0.6946666836738586, 0.6923333406448364, 0.7039999961853027, 0.7080000042915344, 0.7139999866485596, 0.7173333168029785, 0.721666693687439, 0.7213333249092102, 0.7246666550636292, 0.7283333539962769, 0.734666645526886, 0.734333336353302, 0.7393333315849304, 0.734333336353302, 0.734333336353302, 0.7433333396911621, 0.7419999837875366, 0.7490000128746033, 0.7506666779518127, 0.749666690826416, 0.7573333382606506, 0.7576666474342346, 0.7556666731834412, 0.7553333044052124, 0.7546666860580444, 0.7583333253860474, 0.7563333511352539, 0.7573333382606506, 0.7639999985694885, 0.762333333492279, 0.762333333492279, 0.7630000114440918, 0.7673333287239075, 0.7670000195503235, 0.7670000195503235, 0.7706666588783264, 0.7746666669845581, 0.7736666798591614, 0.7713333368301392, 0.7736666798591614, 0.7766666412353516, 0.7773333191871643, 0.7773333191871643, 0.7753333449363708, 0.7770000100135803, 0.7756666541099548, 0.778333306312561, 0.7799999713897705, 0.7786666750907898, 0.7789999842643738, 0.7799999713897705, 0.7836666703224182, 0.7793333530426025, 0.7816666960716248, 0.7816666960716248, 0.784333348274231, 0.7826666831970215, 0.7793333530426025, 0.7806666493415833, 0.784333348274231, 0.7820000052452087]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1], [4, 3, 0, 2, 2, 1, 2, 0, 5, 0, 2, 4, 4, 1, 6, 4, 3, 1, 6, 6, 4, 2, 6, 4, 9, 0, 5, 9, 1, 2, 0, 2, 2, 2, 9, 5, 0, 4, 2, 7, 4], [0, 2, 0, 2, 0, 2, 2, 2, 2, 1, 3, 0, 2, 2, 1, 2, 2, 0, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 44, 76, 57, 60, 50, 63, 61, 72, 1, 73], [1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.7185714244842529, "mapping_values": [1, 62, 62, 38, 24, 11, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 53, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.negative(tf.math.add(tf.math.add(alpha, grad), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, grad))))), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(grad, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.square(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))))))), grad)), tf.math.add(alpha, grad))), tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(alpha, grad)))))))))))))))), tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.019816541369439, 1.1304865538278797, 0.8613871359916458, 0.8036133826778802, 0.7251468307275057, 0.6466554545801959, 0.6602195740108241, 0.6195677509869661, 0.5935338774393137, 0.5773136723452492, 0.5707016993334202, 0.5720036964863047, 0.5404023386783068, 0.5166259927756561, 0.5103941844391737, 0.5103546480114717, 0.5512293790545933, 0.5426799524272863, 0.557518148324619, 0.6176018088548222, 0.6550262678159211, 0.6015843266367582], "accuracy": [0.30841368436813354, 0.6122044920921326, 0.6851142644882202, 0.7000396251678467, 0.722757875919342, 0.7629110813140869, 0.7519482374191284, 0.7681944370269775, 0.7755910754203796, 0.77677983045578, 0.7819310426712036, 0.7761194109916687, 0.7910447716712952, 0.8076872229576111, 0.8082155585289001, 0.8076872229576111, 0.7980451583862305, 0.8012151718139648, 0.7885351777076721, 0.7750627398490906, 0.7701756954193115, 0.778232753276825], "val_loss": [0.9008238996778216, 0.658522197178432, 0.6110640253339495, 0.5533953394208636, 0.5235965592520577, 0.5142382042748588, 0.48765982900347027, 0.4410794973373413, 0.4553901127406529, 0.44891961983272005, 0.4460638761520386, 0.44198604992457796, 0.42103075981140137, 0.42177601371492657, 0.4173258032117571, 0.4071676731109619, 0.4109905787876674, 0.41742864676884245, 0.48911338193076, 0.5311923537935529, 0.5178665774209159, 0.5204800367355347], "val_accuracy": [0.6316666603088379, 0.721666693687439, 0.7096666693687439, 0.7516666650772095, 0.7616666555404663, 0.7733333110809326, 0.7833333611488342, 0.8036666512489319, 0.8116666674613953, 0.8043333292007446, 0.7826666831970215, 0.8046666383743286, 0.8146666884422302, 0.8263333439826965, 0.8080000281333923, 0.8276666402816772, 0.828000009059906, 0.8243333101272583, 0.8059999942779541, 0.7933333516120911, 0.7996666431427002, 0.7823333144187927]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [2, 8, 0, 4, 6, 4, 6, 3, 5, 4, 8, 6, 4, 5, 0, 2, 9, 1, 1, 4, 2, 9, 9, 2, 7, 4, 2, 1, 9, 7, 1, 9, 9, 9, 2, 6, 3, 6, 1, 4, 2, 4, 9], [0, 2, 0, 2, 0, 2, 2, 2, 2, 1, 3, 0, 2, 1, 1, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 44, 76, 57, 60, 52, 23, 22, 20, 1, 9, 57, 57], [1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.6428571343421936, "mapping_values": [1, 65, 65, 43, 22, 13, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.multiply(tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))), tf.math.subtract(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))))))))))), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, alpha))), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)))))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha))))), tf.math.add(alpha, grad))))))), tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(grad, tf.math.pow(tf.math.add(alpha, grad), grad))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)))), grad))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.0204269624641307, 1.1373566170378666, 0.8629536463001606, 0.8019517002844493, 0.7250716428730891, 0.6517771348237141, 0.6440600625842932, 0.6094067357062286, 0.5708005190242031, 0.5423307582891502, 0.5505123434994498, 0.5392966807132635, 0.5098073769869066, 0.5201961516688418, 0.5134694230177022, 0.49533117514213376, 0.5075629042942983, 0.5332028606800497, 0.5022425112305788], "accuracy": [0.3082816004753113, 0.6115440726280212, 0.6832650899887085, 0.7004358768463135, 0.7219653725624084, 0.7581561207771301, 0.7512878179550171, 0.7671377658843994, 0.789459764957428, 0.7886672616004944, 0.7864218950271606, 0.7996301651000977, 0.8088759779930115, 0.8090080618858337, 0.8132346868515015, 0.8127063512802124, 0.809140145778656, 0.8090080618858337, 0.8075551390647888], "val_loss": [0.8935232162475586, 0.6545897211347308, 0.6066564832414899, 0.5451230151312692, 0.5040496417454311, 0.5048820291246686, 0.4677623340061733, 0.44800433090754915, 0.4234281693186079, 0.42541102852140156, 0.4340024505342756, 0.40317908355167936, 0.40890166589191984, 0.40073007345199585, 0.42457467317581177, 0.42132231167384554, 0.4198571613856724, 0.42118325403758455, 0.4589087963104248], "val_accuracy": [0.6396666765213013, 0.7260000109672546, 0.7136666774749756, 0.75, 0.768666684627533, 0.7770000100135803, 0.7883333563804626, 0.8009999990463257, 0.8069999814033508, 0.8100000023841858, 0.8106666803359985, 0.8243333101272583, 0.8246666789054871, 0.8370000123977661, 0.8263333439826965, 0.8336666822433472, 0.8270000219345093, 0.8199999928474426, 0.8206666707992554]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [6, 3, 0, 2, 4, 1, 2, 0, 5, 0, 2, 8, 4, 1], [0, 2, 0, 2, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 76, 57, 60, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [88, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.29171428084373474, "mapping_values": [1, 5, 5, 2, 3, 2, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.5100010584185166, 2.62718762064717, 2.2613506265808296, 2.4837650129461584, 2.3043136079282083, 2.3028199584524094, 2.3030458948694403], "accuracy": [0.1970677524805069, 0.15057456493377686, 0.14568749070167542, 0.1402720957994461, 0.09734513610601425, 0.09721305221319199, 0.1022322028875351], "val_loss": [3.6659351076398576, 1.7073427949632918, 1.9247260093688965, 1.975290366581508, 1.974043641771589, 1.973785740988595, 1.9736568587166923], "val_accuracy": [0.17466667294502258, 0.28733333945274353, 0.18266665935516357, 0.10000000149011612, 0.09933333098888397, 0.09933333098888397, 0.10000000149011612]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0], [2, 3, 0, 4, 5, 2, 6, 0, 5, 4, 8, 6, 8, 1, 2, 2, 3, 1, 1, 2, 2, 9, 9, 2, 7, 4, 2, 1, 4, 7, 1, 1, 9, 9], [0, 2, 0, 2, 0, 1, 2, 2, 2, 1, 3, 0, 2, 1, 1, 2, 0, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 76, 57, 60, 59, 38, 62, 68, 35], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.17657142877578735, "mapping_values": [1, 1, 1, 0, 1, 1, 5, 5, 3, 2, 2, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [3.3905161681381184, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.19152027368545532, 0.10328886657953262, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2877.315987723214, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [4, 3, 0, 2, 4, 1, 2, 0, 5, 0, 2, 8, 4, 1], [0, 2, 0, 2, 0, 2, 2, 2, 2, 1, 3, 0, 2, 0, 1, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 23, 76, 57, 60, 59, 23, 22, 72, 1], [1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [4, 3, 3, 3, 0], [72, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [6, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.16828571259975433, "mapping_values": [1, 8, 8, 4, 4, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.multiply(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(beta, tf.math.add(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [136876276.07732996, 97513184.52833179, 88437786.08374059, 85230889.99815084, 73269910.72777705, 63618249.4972923], "accuracy": [0.1406683325767517, 0.14291374385356903, 0.1208558976650238, 0.12336547672748566, 0.11372341960668564, 0.11372341960668564], "val_loss": [71198411.42857143, 48658528.0, 47651246.85714286, 40315533.71428572, 34093658.28571428, 32227635.42857143], "val_accuracy": [0.17100000381469727, 0.12133333086967468, 0.12133333086967468, 0.11666666716337204, 0.11500000208616257, 0.11233333498239517]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [3, 5, 6, 3, 2, 0, 0, 0, 0, 5, 2, 8, 4, 1], [0, 2, 0, 2, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 76, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [4, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [2, 4, 0], [64, 55], [0, 1, 0, 1, 1], [3, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.math.add(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [3, 1, 6, 3, 2, 0, 0, 0, 0, 5, 2, 8, 4, 1], [0, 2, 0, 0, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 95, 76, 57, 60, 59, 23, 22, 72, 1], [1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [1, 0, 0, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 2, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3024371980975222, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1], [6, 3, 0, 2, 4, 1, 2, 0, 5, 9, 2, 8, 4, 1], [0, 2, 0, 0, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 35, 76, 57, 60, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [4, 7, 9, 0, 1, 9], [3, 3, 3, 3, 0], [38, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [2, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 16, 10, 6, 5, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.pow(grad, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.square(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))), tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))))))), grad)), lambda shape,  alpha, beta, grad: tf.math.pow(grad, tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(beta, tf.math.add(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1], [2, 2, 0, 4, 5, 4, 6, 0, 5, 4, 8, 6, 4, 1, 1, 2, 9, 1, 1, 2, 2, 0, 9, 2, 7, 4, 2, 1, 9, 7, 1, 1, 9, 9], [0, 2, 0, 2, 0, 2, 2, 2, 2, 1, 3, 1, 2, 1, 1, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 88, 76, 70, 60, 52, 2, 22, 44, 1], [0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [0, 4, 6], [64, 55], [1, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 53, 53, 33, 20, 8, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.math.square(tf.math.add(alpha, tf.math.pow(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32))))), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.sqrt(tf.math.add(alpha, grad)), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, grad)))), tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(grad, tf.math.subtract(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.subtract(grad, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.add(alpha, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))), alpha)), tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, alpha)))), grad)), tf.math.add(alpha, alpha))), tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [888539.6923535576, 17056159.90278695, 78773369.20882314, 216953205.99128252, 468931024.1711795, 852068299.8768986], "accuracy": [0.10302469879388809, 0.09800554811954498, 0.09800554811954498, 0.10051512718200684, 0.1010434553027153, 0.10328886657953262], "val_loss": [3328143.214285714, 26532472.0, 89445001.14285715, 211897664.0, 413722523.4285714, 714754797.7142857], "val_accuracy": [0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [4, 3, 0, 2, 4, 1, 2, 0, 5, 0, 2, 8, 4, 1], [0, 2, 0, 2, 0, 2, 2, 2, 2, 1, 3, 0, 2, 0, 1, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 76, 57, 60, 59, 23, 22, 72, 1], [1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [74, 84, 6], [0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 3, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, grad: tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3024371980975222, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [4, 3, 0, 2, 4, 1, 1, 0, 5, 9, 2, 8, 4, 1], [0, 2, 0, 2, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 76, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 0, 1, 1, 0], [2, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3024371980975222, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 6, 3, 2, 0, 0, 1, 0, 5, 2, 2, 6, 1, 5, 4, 1, 1, 2, 4, 9, 6, 8, 9, 1, 2, 9, 2, 8, 6, 9, 0, 6, 7, 7, 0, 9], [0, 2, 0, 2, 0, 2, 1, 1, 2, 2, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 76, 57, 65, 59, 23, 22, 75, 1], [1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [1, 3, 3, 3, 0], [38, 84, 6], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 56, 56, 37, 19, 10, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 50, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.subtract(tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, alpha))))))))), tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, alpha), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32))), grad)))), tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), tf.math.add(alpha, grad)))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(tf.math.add(alpha, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))))))))), tf.math.add(alpha, grad))), grad), grad)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.multiply(alpha, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [6, 3, 0, 2, 4, 1, 2, 0, 5, 0, 2, 8, 4, 1], [0, 2, 0, 2, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [28, 82, 76, 57, 60, 59, 23, 22, 72, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 1, 3, 3, 0], [38, 84, 6], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 3, 5, 5, 3, 2, 2, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(grad, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)))), tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.square(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.negative(grad)))), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [4, 0, 9, 2, 4, 1, 2, 0, 5, 0, 2, 8, 4, 1, 0, 8, 4, 5, 6, 4, 6, 2, 2, 9, 5, 5, 8, 8, 8], [2, 2, 0, 2, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [27, 82, 8, 17, 60, 59, 23, 22, 72, 1], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 2, 3, 3, 0], [16, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [1, 0, 2], [6, 32, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 3, 1, 1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.09833333641290665]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [2, 3, 0, 4, 5, 4, 6, 0, 5, 4, 8, 6, 4, 1, 0, 2, 9, 1, 1, 2, 2, 9, 9, 2, 7, 4, 2, 1, 9, 7, 1, 1, 9, 9], [0, 1, 0, 2, 0, 2, 2, 2, 2, 1, 3, 0, 2, 1, 1, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 44, 76, 57, 60, 52, 23, 22, 72, 1], [1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 0, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.09885714203119278, "mapping_values": [1, 3, 3, 1, 2, 1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), alpha), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.square(beta), tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3652366910077136, 4.685857111767472, 637778935927.0115, 2.31275345195538, 2.31941712272638, 2.3200115234529686], "accuracy": [0.09457138925790787, 0.09642054885625839, 0.09655263274908066, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.111735071454729, 10.928383690970284, 1.9786713463919503, 1.987210750579834, 1.989297798701695, 1.987884862082345], "val_accuracy": [0.10066666454076767, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [3, 1, 6, 3, 2, 0, 0, 0, 0, 5, 2, 8, 4, 1], [3, 2, 1, 2, 0, 2, 2, 1, 2, 1, 3, 0, 2, 0, 3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [33, 23, 96, 57, 60, 59, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [0, 3, 3, 3, 0], [38, 84, 6], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1], [1, 4, 7, 2, 8, 5, 0, 9], [2, 4, 0], [64, 55], [0, 1, 0, 1, 1], [1, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.09828571230173111, "mapping_values": [1, 9, 9, 4, 5, 1, 3, 3, 1, 2, 1, 10, 8, 5, 3, 1, 5, 2, 3, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), alpha))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, beta), tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)))), sigma)), tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(beta, tf.math.add(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [2.3632030811733054, 3.056488297477201, 4.902097792972459, 8.005093624657643, 12.365771324123452, 15.191508040593805], "accuracy": [0.09470347315073013, 0.09681680053472519, 0.09893012791872025, 0.10170386731624603, 0.10170386731624603, 0.10368511080741882], "val_loss": [2.0900934764317105, 2.7702063832964217, 4.2821100779942105, 6.584338051932199, 8.982706887381417, 9.77975354875837], "val_accuracy": [0.10066666454076767, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [2, 3, 0, 4, 5, 4, 6, 0, 5, 4, 8, 6, 4, 1, 0, 2, 9, 1, 1, 2, 2, 9, 9, 2, 7, 4, 2, 1, 9, 7, 1, 1, 9, 9], [0, 2, 0, 2, 0, 2, 2, 2, 2, 1, 3, 0, 2, 1, 1, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 1, 2, 3, 3, 2, 2], [64, 44, 76, 57, 60, 52, 23, 22, 72, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0], [3, 7, 9, 0, 1, 9], [4, 3, 3, 3, 0], [38, 84, 6], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 4, 7, 6, 8, 5, 0, 9], [4, 4, 6], [64, 55], [0, 1, 0, 1, 1], [0, 7, 5, 2, 9, 3, 9], [2, 0, 2], [6, 32, 85]], "fitness": -0.0965714305639267, "mapping_values": [1, 1, 1, 0, 1, 1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.301242084173148, 2.301106225135792, 2.3010742312267456, 2.3024614135020163, 2.3026904370790744, 2.302951913767361, 2.3037945619899802], "accuracy": [0.09470347315073013, 0.09919429570436478, 0.10289261490106583, 0.08875974267721176, 0.10632677376270294, 0.10487385839223862, 0.09998679161071777], "val_loss": [1.9705157279968262, 1.971083641052246, 1.972569465637207, 1.9736896242414201, 1.9736880574907576, 1.9741898945399694, 1.9750426156180245], "val_accuracy": [0.06933332979679108, 0.11900000274181366, 0.10066666454076767, 0.10366666316986084, 0.10133333504199982, 0.1003333330154419, 0.1003333330154419]}}]