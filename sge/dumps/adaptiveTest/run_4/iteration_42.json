[{"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0], [1], [5, 2, 5], [3, 1, 1, 0], [96, 12, 93], [0], [1], [9, 5, 9, 0, 6, 4, 0, 2, 4], [2, 5, 0], [30], [0, 0, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [0, 3], [6, 7], [], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], [3, 1, 0, 2, 2, 2, 0], [1, 2, 0, 0, 3], [41, 60, 56, 45]], "fitness": -0.7822856903076172, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 6, 3, 3, 1], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.math.negative(alpha), beta), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.0895946882561827, 1.3904221835090436, 1.089790720382875, 0.9361389386592492, 0.8574567276646416, 0.7950515228964161, 0.7945368914257156, 0.7401382760002692, 0.7275760968788629, 0.7075285609482365, 0.6856964257147334, 0.662306778293323, 0.6397058521090497, 0.6603679730671429, 0.633525903797137, 0.6304849176327503, 0.6204951814200034], "accuracy": [0.3063003420829773, 0.5097081065177917, 0.616299033164978, 0.650640606880188, 0.6807554960250854, 0.7024171352386475, 0.6963412761688232, 0.7201162576675415, 0.7238145470619202, 0.7382115721702576, 0.7442874312400818, 0.7500990629196167, 0.76106196641922, 0.7497028112411499, 0.7536653280258179, 0.7629110813140869, 0.7598732113838196], "val_loss": [1.176715918949672, 0.7461951460157122, 0.7337211881365094, 0.606082388332912, 0.5913819755826678, 0.5506691762379238, 0.5323365586144584, 0.5760513714381627, 0.5437911408288139, 0.4959095205579485, 0.5300144468035016, 0.4743201051439558, 0.4965895584651402, 0.475643481527056, 0.47716428552355084, 0.5033570868628365, 0.4665543181555612], "val_accuracy": [0.5979999899864197, 0.7039999961853027, 0.6596666574478149, 0.7409999966621399, 0.7326666712760925, 0.7483333349227905, 0.7696666717529297, 0.7523333430290222, 0.7446666955947876, 0.7739999890327454, 0.746666669845581, 0.7900000214576721, 0.7763333320617676, 0.7873333096504211, 0.7856666445732117, 0.7730000019073486, 0.7873333096504211]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0], [1], [5, 2, 5, 8, 7, 8, 0], [1, 1, 1, 0], [96, 12, 93], [0], [0], [9, 5, 9, 0, 6, 4, 0, 2, 4], [2, 5, 0], [30], [0, 0, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [0, 3], [6, 7], [], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1], [3, 8, 5, 2, 2, 2, 3, 7, 3], [0, 2, 0, 0, 3, 2, 0], [41, 60, 56, 45]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.square(beta)))", "other_info": {"loss": [2.3031738633571632, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0], [1], [], [2, 1, 1, 0], [96, 12, 93], [0], [1], [9, 5, 9, 0, 6, 4, 0, 2, 4], [2, 5, 0], [30], [0, 0, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [0, 6], [7, 7], [], [0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1], [3, 1, 0, 2, 2, 2, 0], [0, 2, 0, 0, 3], [41, 60, 56, 45]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 2, 3, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.subtract(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [3205747.36719411, 60930333.402720906, 279298816.10566634, 765830684.9441289, 1676449621.276978, 3037708382.7446837], "accuracy": [0.10091137140989304, 0.10091137140989304, 0.10077928751707077, 0.09879804402589798, 0.10315678268671036, 0.09853387624025345], "val_loss": [11848754.0, 94576850.28571428, 318960704.0, 755775908.5714285, 1475798710.857143, 2549804690.285714], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1], [5, 2, 5, 4, 2, 0, 0, 7, 2, 1, 8, 5, 7, 4, 8, 6, 3], [1, 2, 1, 0, 0, 3, 2, 1, 2, 1, 0], [88, 38, 77], [0], [0, 0, 1, 1], [9, 5, 9, 0, 6, 4, 0, 2, 4], [3, 5, 0], [30], [1, 0, 0], [1, 1, 0, 0, 0, 0, 1], [0, 3], [6, 7], [], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0], [1, 1, 0, 2, 2, 2, 7, 2, 9, 6, 9], [0, 3, 3, 1, 3, 2, 0], [41, 60, 56, 45]], "fitness": -0.10000000149011612, "mapping_values": [1, 24, 24, 15, 9, 2, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 18, 11, 7, 4], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.pow(alpha, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.add(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.square(tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.math.add(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))))), grad))))))), tf.math.pow(tf.math.add(alpha, grad), tf.math.sqrt(tf.math.add(alpha, alpha)))))))), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.subtract(tf.math.negative(tf.math.add(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), sigma)), tf.math.add(tf.math.add(sigma, tf.math.add(tf.math.add(alpha, sigma), tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))), beta)), tf.math.divide_no_nan(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0], [1], [5, 2, 5], [3, 1, 1, 0], [96, 12, 93], [1], [1], [9, 5, 9, 0, 6, 4, 0, 2, 4], [2, 5, 0], [30], [0, 0, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [0, 3], [7, 7], [], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1], [3, 7, 0, 2, 2, 2, 0, 2, 9, 6, 5, 7, 0, 4, 9, 3, 3, 9, 9, 4, 8, 1], [1, 2, 0, 0, 3, 1, 3, 1, 1, 3], [58, 60, 56, 45, 13, 48]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 32, 22, 10, 6], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.add(tf.math.negative(tf.math.add(tf.math.add(tf.math.add(tf.math.negative(tf.math.add(alpha, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))), tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(sigma, tf.math.negative(alpha))))), tf.math.pow(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.multiply(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), sigma))), tf.math.pow(tf.math.sqrt(tf.math.subtract(alpha, alpha)), sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [1, 0, 1], [1], [5, 2, 5], [3, 1, 1, 0], [96, 12, 93], [1], [0], [9, 5, 9, 0, 6, 4, 0, 2, 4], [3, 5, 0], [30], [1, 0, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [0, 3], [4, 7], [], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], [0, 4, 0, 2, 2, 2, 0], [1, 2, 0, 0, 3], [20, 60, 56, 45]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 5, 3, 2, 0], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(tf.math.negative(alpha), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0], [0, 1], [5, 2, 5], [1, 1, 1, 0], [96, 12, 93], [0], [0], [9, 5, 9, 0, 6, 4, 0, 2, 4], [1, 5, 0], [30], [0, 0, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [0, 3], [4, 7], [], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1], [3, 7, 0, 2, 2, 2, 0, 4, 5, 6, 3, 7, 3, 4, 5, 6, 8, 4, 7, 7, 8, 2, 0, 3, 9, 6, 3, 7, 5, 5, 5, 0, 4, 3, 8, 4, 3, 2, 9], [3, 2, 0, 0, 3, 2, 2, 2, 0, 3, 1, 1, 2, 2, 2, 3, 3, 2, 0, 1, 1, 2, 2, 1], [58, 60, 56, 45, 7, 15]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 63, 39, 24, 6], "tree_depth": 33, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.add(tf.math.negative(sigma), tf.math.add(beta, tf.math.add(tf.math.add(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.pow(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.divide_no_nan(tf.math.multiply(tf.math.add(sigma, beta), tf.math.multiply(tf.math.pow(tf.math.square(tf.math.divide_no_nan(beta, tf.math.sqrt(beta))), tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), sigma)), tf.math.pow(tf.math.add(tf.math.add(tf.math.sqrt(tf.math.add(tf.math.negative(alpha), alpha)), beta), tf.math.multiply(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(beta, sigma))))))), tf.math.multiply(tf.math.add(tf.math.square(sigma), tf.math.square(beta)), tf.math.square(tf.math.negative(tf.math.pow(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.sqrt(alpha), tf.math.pow(tf.math.multiply(alpha, tf.math.add(beta, beta)), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))))))))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 1, 1, 1], [4, 7, 3, 0, 3], [1, 1, 1, 0], [96, 12, 93], [0], [1], [9, 5, 9, 0, 6, 4, 0, 2, 4], [2, 5, 0], [30], [0, 0, 0], [1, 1, 0, 0, 0, 0, 1], [5, 3], [6, 7], [], [1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1], [9, 0, 0, 2, 2, 2, 0, 3, 4, 0, 2, 5, 4, 2, 2, 2, 3, 6, 1, 6, 8, 0, 5, 2, 1, 2, 9], [1, 1, 0, 0, 3], [0, 60, 29, 46, 58, 96]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), alpha)), alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [112741589.61023086, 1580947700.8416326, 6646754411.931846, 17572539369.683266, 37646848515.584206, 67383840280.54841], "accuracy": [0.1010434553027153, 0.10091137140989304, 0.1006472036242485, 0.09879804402589798, 0.10315678268671036, 0.09853387624025345], "val_loss": [248024539.42857143, 1982609773.7142856, 6689498112.0, 15854570349.714285, 30963308251.42857, 53501729645.71429], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0], [1], [5, 2, 5], [3, 1, 1, 0], [96, 12, 93], [1], [1], [9, 5, 9, 0, 6, 4, 0, 2, 4], [0, 5, 0], [30], [0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [0, 3], [4, 7], [], [1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], [3, 7, 0, 2, 2, 2, 0], [1, 2, 0, 0, 3], [58, 60, 56, 45]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08255184441804886, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0], [1], [5, 2, 5], [0, 1, 1, 0], [96, 12, 93], [0], [0], [9, 5, 9, 0, 6, 4, 0, 2, 4], [1, 5, 0], [30], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [0, 3, 7, 2, 2, 3, 1, 6], [6, 7, 3, 4], [], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [3, 1, 0, 0, 2, 2, 0, 1, 2, 9, 4], [0, 2, 0, 3, 3, 1, 2, 1], [0, 60, 29, 45]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 12, 8, 6, 2, 0, 9, 5, 4, 2], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.multiply(sigma, sigma)), sigma)), sigma)), tf.math.add(sigma, grad))), tf.math.add(sigma, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.math.negative(tf.math.negative(tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))), beta), tf.math.add(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), sigma))", "other_info": {"loss": [2.3031758696506084, 2.302584760492315, 2.302584792361236, 2.3025864149679864, 2.302585646901794, 2.3025874240035313], "accuracy": [0.10011887550354004, 0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9736433710370744, 1.9736436435154505, 1.9736441203526087, 1.9736435072762626, 1.9736435072762626, 1.9736405100141252], "val_accuracy": [0.10433333367109299, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419, 0.1003333330154419]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0], [1], [5, 2, 5], [3, 1, 1, 0], [96, 12, 93], [1], [1], [9, 5, 9, 0, 6, 4, 0, 2, 4], [2, 5, 0], [30], [0, 0, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [0, 3], [6, 7], [], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1], [3, 6, 0, 2, 2, 2, 0, 5, 6, 9, 9], [1, 2, 0, 0, 3], [41, 60, 56, 45]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 16, 11, 5, 4], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.divide_no_nan(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.negative(beta), tf.math.square(tf.math.divide_no_nan(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))))), tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.120459645986557, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1], [5, 2, 5, 8, 7, 8, 0], [3, 1, 1, 0], [96, 12, 93], [0, 1, 0], [0, 1, 1], [3, 5, 9, 0, 6, 4, 0, 2, 4], [2, 5, 0], [78], [1, 0, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [0, 3], [4, 7], [], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [3, 8, 0, 5, 2, 2, 0, 7, 2], [0, 2, 0, 0, 3, 2, 0], [41, 60, 56, 45]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 7, 3, 0, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 15, 9, 6, 3], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.sqrt(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.math.negative(alpha)))))), alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.sqrt(tf.math.negative(tf.math.square(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(tf.math.negative(beta), tf.math.add(tf.math.add(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), sigma)), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0], [0, 1], [5, 2, 5], [3, 1, 1, 0], [96, 12, 93], [1], [1], [9, 5, 9, 0, 6, 4, 0, 2, 4], [2, 5, 0], [30], [0, 0, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [0, 3], [4, 7], [], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], [2, 1, 0, 2, 2, 2, 0], [1, 2, 0, 0, 3], [58, 60, 56, 45]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 6, 3, 3, 1], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.subtract(tf.math.negative(alpha), beta), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.303177381125518, 2.3025834019063502, 2.3025851211590678, 2.3025830315403604, 2.3025837157774345, 2.3025828522934244], "accuracy": [0.09694888442754745, 0.09747721254825592, 0.09998679161071777, 0.10077928751707077, 0.10553427785634995, 0.09628847241401672], "val_loss": [1.9736439159938268, 1.9736452783857072, 1.9736437116350447, 1.973641804286412, 1.973639965057373, 1.973637648991176], "val_accuracy": [0.10433333367109299, 0.1003333330154419, 0.09799999743700027, 0.1003333330154419, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0], [1], [5, 2, 5], [3, 1, 1, 0], [], [1], [1], [9, 5, 9, 0, 6, 4, 0, 2, 4], [2, 5, 0], [30], [1, 0, 0], [1, 1, 0, 0, 0, 0, 1], [0, 3], [6, 7], [], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 2, 2, 2, 0, 3, 4, 0, 2, 5, 4, 2, 2, 2, 3, 6, 1, 6, 8, 0, 5, 2, 1, 2, 9], [1, 2, 0, 0, 3, 1, 2, 0], [41, 60, 56, 45]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 19, 11, 8, 3], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.negative(tf.math.add(alpha, beta))), tf.math.add(tf.math.add(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.multiply(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), tf.math.pow(sigma, tf.math.negative(tf.math.add(alpha, beta)))))), tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0], [0, 1, 1], [2, 0, 7, 6, 6, 8, 9], [2, 1, 2, 3, 0, 0, 3], [96, 12, 93], [1], [1], [9, 5, 9, 0, 6, 4, 0, 2, 4], [2, 5, 0], [30], [0, 0, 1, 1, 1, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 1], [0, 3], [6, 7], [], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1], [3, 4, 6, 2, 2, 2, 0, 7, 4, 8, 4, 6], [2, 0, 0, 0, 3, 0, 1, 2, 0, 2, 2], [58, 60, 56, 45, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 23, 12, 11, 5], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.pow(tf.math.divide_no_nan(beta, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(tf.math.add(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), tf.math.pow(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))))), alpha), beta)), tf.math.sqrt(tf.math.pow(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(beta, beta))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 1], [1], [4, 7, 3, 0, 3], [0, 1, 1, 0], [73], [0], [1], [9, 5, 9, 0, 6, 4, 0, 2, 4], [1, 5, 0], [30], [0, 0, 1, 1, 1, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 1], [0, 3], [6, 7], [], [0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1], [3, 0, 0, 2, 2, 2, 0, 3, 4, 0, 2, 5, 4, 2, 2, 2, 3, 6, 1, 6, 8, 0, 5, 2, 1, 2, 9], [1, 2, 0, 0, 3], [41, 60, 56, 45]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 3, 2, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(alpha), tf.math.negative(beta))", "other_info": {"loss": [1204632027.285571, 22972215871.095497, 105405011504.62343, 289145268406.0505, 633122380329.7256, 1147383256960.0508], "accuracy": [0.1010434553027153, 0.10091137140989304, 0.10077928751707077, 0.09893012791872025, 0.10315678268671036, 0.09853387624025345], "val_loss": [4461340964.571428, 35679614683.42857, 120406872649.14285, 285392399798.8571, 557392817590.8572, 963177236772.5714], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 1], [1], [4, 7, 3, 0, 3], [3, 1, 1, 0], [96, 12, 93], [0, 1, 1, 1], [0, 1, 0, 0], [7, 5, 9, 0, 6, 4, 0, 2, 4], [1, 5, 0], [30], [0, 0, 0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 1], [0, 3], [6, 7], [], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0], [8, 0, 0, 2, 2, 2, 0, 3, 4, 0, 2, 5, 4, 2, 2, 2, 3, 6, 1, 6, 8, 0, 5, 2, 1, 2, 9], [1, 2, 3, 0, 3, 2, 0, 1, 3, 3, 3, 1, 0, 2, 3], [41, 60, 56, 45]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 4, 4, 3, 1, 1, 2, 2, 1, 1, 0, 37, 22, 15, 3], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(alpha, tf.math.square(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.negative(beta), tf.math.multiply(tf.math.pow(sigma, tf.math.negative(tf.math.add(tf.math.square(tf.math.pow(tf.math.add(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(tf.math.multiply(sigma, beta), tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), alpha)), tf.math.divide_no_nan(tf.math.subtract(sigma, sigma), sigma))), alpha))), tf.math.divide_no_nan(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(beta)))), tf.math.negative(sigma))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0], [0, 1], [5, 2, 5], [3, 1, 1, 0], [96, 12, 93], [1], [1], [9, 5, 9, 0, 6, 4, 0, 2, 4], [2, 5, 0], [30], [0, 0, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [0, 3], [6, 7], [], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1], [3, 1, 0, 2, 2, 2, 0], [1, 2, 0, 0, 3], [41, 60, 56, 45]], "fitness": -0.06485714018344879, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 6, 3, 3, 1], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.math.negative(alpha), beta), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.303417761312295, 2.3013798769486185, 2.3031704630818366, 2.3026380436594587, 2.3011364010047637, 2.302526273338188, 2.3013163711637032, 2.301222342069296, 2.301356796858695, 2.3019722534003844, 2.302495456721253, 2.3005387412086216, 2.2992676906361478, 2.30146981126455, 2.3016715584461322, 2.30055102708711, 2.3014227048737608, 2.300004395857904, 2.300706332842467, 2.2996796539761624, 2.3026699395999146, 2.300255820074448, 2.3002336021774026, 2.301415146239571, 2.2999613137371773, 2.2991305520868006, 2.301177387019631, 2.3002309590408814, 2.3004213112566716, 2.3002000328666576, 2.301641916476063, 2.300771032231847, 2.3004958336741588, 2.2991052783633017, 2.301160120551518, 2.3007813140842437, 2.2998305792664304, 2.3004080281517747, 2.3004967232327402, 2.299341969722455, 2.300504323687016, 2.3016784740020224, 2.299393068010529, 2.3009377016509136, 2.300613740400285, 2.2998238358719947, 2.300739645627291, 2.3005719149290624, 2.3002943105512466, 2.300701560251087, 2.299426126158894, 2.2994280936553917, 2.3005427931907896, 2.299625156609421, 2.299726786063631, 2.2994677301222195, 2.299917033886661, 2.3000077804821895, 2.3001435570760314, 2.2991735664703246, 2.2996955354373374, 2.2990909589516284, 2.2991932224777036, 2.2996480372351678, 2.2992484182839728, 2.2991941223968335, 2.2990489121929465, 2.3001725867030456, 2.2989065428577504, 2.3000001298627044], "accuracy": [0.08981640636920929, 0.09417514503002167, 0.08981640636920929, 0.09338264167308807, 0.09509972482919693, 0.09179764986038208, 0.08942015469074249, 0.09338264167308807, 0.09060890227556229, 0.09113723784685135, 0.09866596013307571, 0.09074098616838455, 0.0948355570435524, 0.0936468094587326, 0.09430722147226334, 0.09219389408826828, 0.09074098616838455, 0.09245806187391281, 0.09655263274908066, 0.09589222073554993, 0.08849557489156723, 0.0956280529499054, 0.09628847241401672, 0.0940430611371994, 0.09589222073554993, 0.09919429570436478, 0.09430722147226334, 0.09747721254825592, 0.09391097724437714, 0.09826971590518951, 0.09087307006120682, 0.09417514503002167, 0.09589222073554993, 0.09826971590518951, 0.0956280529499054, 0.09576013684272766, 0.09932637959718704, 0.09826971590518951, 0.09166556596755981, 0.09734513610601425, 0.0952318087220192, 0.09325055778026581, 0.09602430462837219, 0.09576013684272766, 0.09866596013307571, 0.09272222965955734, 0.09496764093637466, 0.09747721254825592, 0.10249637067317963, 0.09338264167308807, 0.10619468986988068, 0.09576013684272766, 0.09721305221319199, 0.1006472036242485, 0.09932637959718704, 0.09747721254825592, 0.09708096832036972, 0.09417514503002167, 0.09351472556591034, 0.09972262382507324, 0.09879804402589798, 0.09747721254825592, 0.1010434553027153, 0.10236428678035736, 0.1018359512090683, 0.1014397069811821, 0.10157178342342377, 0.09893012791872025, 0.10606260597705841, 0.09536388516426086], "val_loss": [1.969372000013079, 1.9692869186401367, 1.9691917555672782, 1.9690983636038644, 1.9690534727913993, 1.9689954348972865, 1.9689525876726424, 1.9688780648367745, 1.96881137575422, 1.9687580381120955, 1.9686857632228307, 1.9686644417898995, 1.9686555862426758, 1.9686156681605749, 1.9685962540762765, 1.9685972077505929, 1.9685564722333635, 1.9685723440987724, 1.968564237867083, 1.9685478891645158, 1.9685440063476562, 1.968564578465053, 1.968564714704241, 1.9685666901724679, 1.9685734340122767, 1.968592711857387, 1.9686079025268555, 1.9686177117483956, 1.9686439377920968, 1.9686599458966936, 1.9686761583600725, 1.9686737741742815, 1.9686950956072127, 1.9687151908874512, 1.9687087876456124, 1.9687322889055525, 1.9687437329973494, 1.968754495893206, 1.9687583105904716, 1.9687707083565849, 1.9687865121023995, 1.9687822205679757, 1.9687818118504115, 1.9687580381120955, 1.9687466621398926, 1.9687525204249792, 1.968717302594866, 1.9687085832868303, 1.968698229108538, 1.968658787863595, 1.9686572892325265, 1.9686484336853027, 1.9686264991760254, 1.968625749860491, 1.9686202321733748, 1.9686215264456612, 1.9686119215829032, 1.9686059951782227, 1.9685970033918108, 1.968597343989781, 1.9686097417558943, 1.9686168261936732, 1.9686264310564314, 1.968641894204276, 1.9686579704284668, 1.9686743872506278, 1.9686898503984724, 1.9687010901314872, 1.9687322207859583, 1.96875034059797], "val_accuracy": [0.03933333232998848, 0.03999999910593033, 0.04066666588187218, 0.04266666620969772, 0.04266666620969772, 0.0430000014603138, 0.04333333298563957, 0.04500000178813934, 0.045666664838790894, 0.04633333161473274, 0.04633333161473274, 0.046666666865348816, 0.04866666719317436, 0.04866666719317436, 0.05000000074505806, 0.049666665494441986, 0.050333332270383835, 0.052000001072883606, 0.05133333429694176, 0.05133333429694176, 0.05166666582226753, 0.05233333259820938, 0.05400000140070915, 0.054999999701976776, 0.05533333495259285, 0.05533333495259285, 0.05533333495259285, 0.056333333253860474, 0.05666666850447655, 0.056333333253860474, 0.05666666850447655, 0.057999998331069946, 0.05900000035762787, 0.059333331882953644, 0.059333331882953644, 0.05833333358168602, 0.05999999865889549, 0.061666667461395264, 0.06233333423733711, 0.06333333253860474, 0.06400000303983688, 0.06533333659172058, 0.06566666811704636, 0.06599999964237213, 0.06666667014360428, 0.0676666647195816, 0.06966666877269745, 0.070333331823349, 0.07133333384990692, 0.07233333587646484, 0.07266666740179062, 0.07266666740179062, 0.07366666942834854, 0.07433333247900009, 0.07566666603088379, 0.07566666603088379, 0.07533333450555801, 0.07566666603088379, 0.07699999958276749, 0.07766667008399963, 0.07733333110809326, 0.07666666805744171, 0.07633333653211594, 0.07666666805744171, 0.07833333313465118, 0.07733333110809326, 0.07633333653211594, 0.07633333653211594, 0.07666666805744171, 0.07633333653211594]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 0, 7, 6, 6, 8, 9, 6, 5, 1, 2, 1, 5, 3, 4, 2, 9, 6], [3, 1, 1, 0, 0, 2, 3, 3, 3, 3, 0], [96, 12, 93, 89, 45], [0], [0], [9, 5, 9, 0, 6, 4, 0, 2, 4], [4, 5, 0], [30], [0, 0, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0], [0, 3], [6, 7], [], [0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1], [3, 1, 0, 2, 2, 2, 0], [2, 2, 0, 0, 3], [58, 60, 56, 45]], "fitness": -0.03685714304447174, "mapping_values": [1, 29, 29, 18, 11, 5, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 5, 2, 3, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(grad, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(alpha)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), alpha)))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), grad)), tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), grad)), grad)), tf.math.divide_no_nan(tf.math.add(alpha, grad), grad)))), tf.math.add(alpha, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(beta, beta), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3034899460247495, 2.301569896997037, 2.30351726143761, 2.303127632794867, 2.301672448130678, 2.30318281861848], "accuracy": [0.08955223858356476, 0.09351472556591034, 0.08902391046285629, 0.09219389408826828, 0.09351472556591034, 0.09153348207473755], "val_loss": [1.9694886888776506, 1.9694886888776506, 1.9694886888776506, 1.9694886888776506, 1.9694886888776506, 1.9694886888776506], "val_accuracy": [0.03866666555404663, 0.03866666555404663, 0.03866666555404663, 0.03866666555404663, 0.03866666555404663, 0.03866666555404663]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0], [1], [5, 2, 5], [3, 1, 1, 0], [96, 12, 93], [1], [1], [9, 5, 9, 0, 6, 4, 0, 2, 4], [2, 5, 0], [30], [0, 0, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [0, 3], [6, 7], [], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1], [3, 7, 0, 2, 2, 2, 0, 1], [1, 2, 0, 0, 3, 1, 2], [41, 60, 56, 45]], "fitness": -0.03685714304447174, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 15, 8, 7, 2], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.add(tf.math.negative(alpha), tf.math.add(beta, tf.math.add(tf.math.add(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.subtract(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), sigma))), alpha))), beta)", "other_info": {"loss": [2.3034899460247495, 2.301569896997037, 2.30351726143761, 2.303127632794867, 2.301672448130678, 2.30318281861848], "accuracy": [0.08955223858356476, 0.09351472556591034, 0.08902391046285629, 0.09219389408826828, 0.09351472556591034, 0.09153348207473755], "val_loss": [1.9694886888776506, 1.9694886888776506, 1.9694886888776506, 1.9694886888776506, 1.9694886888776506, 1.9694886888776506], "val_accuracy": [0.03866666555404663, 0.03866666555404663, 0.03866666555404663, 0.03866666555404663, 0.03866666555404663, 0.03866666555404663]}}]