[{"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 6, 3, 9, 5, 1, 6, 2, 1, 2, 2, 9, 4, 2, 2, 6, 2, 4, 3, 4, 4, 8, 2, 3, 4, 2, 7, 7, 2, 6, 8, 7, 6, 7], [0, 1, 2, 1, 2, 0, 2, 2, 1, 0, 2, 2, 3, 3, 2, 2, 1, 0, 2, 2, 1, 0, 1, 3, 3, 3, 2, 2], [71, 60, 5, 49, 29, 73, 46, 33, 24], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 8, 5, 1, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 2, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [42, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.8382856845855713, "mapping_values": [1, 62, 62, 34, 28, 7, 7, 7, 4, 3, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.add(alpha, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.add(alpha, tf.math.add(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32), alpha)), tf.math.add(alpha, grad)))), tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))), tf.math.pow(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)))), tf.math.pow(grad, tf.math.add(alpha, tf.math.multiply(grad, grad))))), tf.math.add(alpha, tf.math.pow(tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.multiply(grad, tf.math.add(alpha, tf.math.pow(grad, grad))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), tf.math.add(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, grad))))))), grad))))))))))), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, grad)))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.sqrt(tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [1.8958546529120426, 1.0160974729818486, 0.7520883759455894, 0.6412853053327502, 0.5885557663391894, 0.5433290299328799, 0.4980875865311875, 0.4845062447789323, 0.45490791689466253, 0.449701402866294, 0.42828765234785343, 0.3941605512287481, 0.38503766801882855, 0.37724255333408435, 0.36126185365718955, 0.355952707523872, 0.3497259385156562, 0.331334533932785, 0.3116046085199896, 0.30140774277348986, 0.298170405403498, 0.2840611112824741, 0.28127285775932354, 0.27386415706980166, 0.28557189304704883, 0.2668861177036586, 0.25804369354118933, 0.24055939377054894, 0.2339542061149515, 0.2433437267432769, 0.2277933052010178], "accuracy": [0.360190212726593, 0.6244881749153137, 0.7148329019546509, 0.757099449634552, 0.7732135653495789, 0.7954035401344299, 0.8096684813499451, 0.8191784620285034, 0.8317263126373291, 0.8277638554573059, 0.8466516733169556, 0.8564258217811584, 0.8581429123878479, 0.8643507957458496, 0.8667283058166504, 0.8669924736022949, 0.8697662353515625, 0.8784837126731873, 0.8835028409957886, 0.8849557638168335, 0.8873332738876343, 0.8914278149604797, 0.8910315632820129, 0.8971073627471924, 0.8920882344245911, 0.8951261639595032, 0.8982961177825928, 0.9084665179252625, 0.9119006991386414, 0.9071456789970398, 0.9125610589981079], "val_loss": [0.9330112252916608, 0.6017704691205706, 0.5022448812212262, 0.4650829689843314, 0.425442704132625, 0.3936332975115095, 0.37150036437170847, 0.37135791778564453, 0.34987335545676096, 0.3387840134756906, 0.32734629086085726, 0.31823520149503437, 0.3258664182254246, 0.3133512394768851, 0.3060354249817984, 0.31168081930705477, 0.3026154041290283, 0.2939974750791277, 0.2895273651395525, 0.29908999374934603, 0.2925843596458435, 0.2965842740876334, 0.2825376902307783, 0.29573670455387663, 0.28871607780456543, 0.2767083389418466, 0.2761685252189636, 0.2868903534752982, 0.2979464445795332, 0.280682487147195, 0.30964062895093647], "val_accuracy": [0.5613333582878113, 0.7366666793823242, 0.7713333368301392, 0.7916666865348816, 0.8180000185966492, 0.8270000219345093, 0.8410000205039978, 0.8383333086967468, 0.8579999804496765, 0.862333357334137, 0.8646666407585144, 0.8686666488647461, 0.8723333477973938, 0.874666690826416, 0.8776666522026062, 0.8679999709129333, 0.8709999918937683, 0.878333330154419, 0.8790000081062317, 0.8763333559036255, 0.8776666522026062, 0.8813333511352539, 0.8806666731834412, 0.8769999742507935, 0.8786666393280029, 0.887666642665863, 0.8849999904632568, 0.8856666684150696, 0.8823333382606506, 0.8840000033378601, 0.8796666860580444]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 9, 3, 9, 5, 1, 6, 2, 8, 2, 2, 9, 4, 2, 2, 6, 2, 4, 3, 4, 4, 8, 2, 3, 2, 2, 6, 7, 2, 6, 8, 7, 6, 7], [0, 2, 2, 1, 2, 0, 2, 2, 1, 0, 2, 2, 3, 3, 2, 2, 1, 0, 2, 2, 1, 0, 1, 3, 2, 3, 2, 2], [71, 60, 5, 49, 29, 73, 46, 33, 24], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 8, 5, 1, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 2, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [42, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.8382856845855713, "mapping_values": [1, 3, 3, 2, 1, 2, 7, 7, 4, 3, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.sqrt(tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [1.8958475502679502, 1.016037386988825, 0.752347993316935, 0.640731006423795, 0.5878570610348575, 0.5425074100258203, 0.49537119017049164, 0.4867289194798095, 0.4568314094270115, 0.4530240089516079, 0.4298038850008867, 0.39665373491022204, 0.38169467484222, 0.37896408119599706, 0.3648128934532282, 0.3549926383832915, 0.34707761958306416, 0.33676795835240547, 0.3189326002377057, 0.3038500346653749, 0.2993905462797969, 0.2840719222471368, 0.283805163493797, 0.2767363925966463], "accuracy": [0.360190212726593, 0.6247523427009583, 0.7152291536331177, 0.7574957013130188, 0.7736098170280457, 0.7968564033508301, 0.8125742673873901, 0.8193105459213257, 0.8300092220306396, 0.8278959393501282, 0.8466516733169556, 0.8553691506385803, 0.8582749962806702, 0.8610487580299377, 0.8648791313171387, 0.868049144744873, 0.8692378997802734, 0.8706908226013184, 0.8786157965660095, 0.8844274282455444, 0.8865407705307007, 0.8911636471748352, 0.8919561505317688, 0.8952582478523254], "val_loss": [0.9329120772225517, 0.6015066249029977, 0.5020932810647147, 0.465927106993539, 0.4262823292187282, 0.39275350740977694, 0.3767816424369812, 0.3684068237032209, 0.35156679153442383, 0.3353176883288792, 0.32745571647371563, 0.31715371779033114, 0.32825309889657156, 0.31132451977048603, 0.30503917591912405, 0.30633861677987234, 0.3125693202018738, 0.2939679707799639, 0.28696524245398386, 0.29543737854276386, 0.2957598737307957, 0.293395323412759, 0.28318478379930767, 0.2850411023412432], "val_accuracy": [0.5613333582878113, 0.7353333234786987, 0.7706666588783264, 0.7900000214576721, 0.8223333358764648, 0.8299999833106995, 0.8379999995231628, 0.8416666388511658, 0.8513333201408386, 0.8683333396911621, 0.8650000095367432, 0.8653333187103271, 0.8693333268165588, 0.8763333559036255, 0.8743333220481873, 0.8706666827201843, 0.8643333315849304, 0.8803333044052124, 0.8833333253860474, 0.8773333430290222, 0.8730000257492065, 0.8806666731834412, 0.8823333382606506, 0.8799999952316284]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0], [3, 6, 3, 9, 5, 1, 6, 2, 1, 2, 2, 9, 4, 2, 2, 2, 2, 4, 3, 4, 0, 8, 2, 3, 4, 5, 7, 7, 2, 6, 8, 8, 6, 7], [0, 1, 1, 2, 2, 1, 2, 2, 1, 0, 2, 2, 0, 3, 2, 2, 1, 0, 2, 2, 1, 0, 1, 2, 1, 0, 0], [87, 60, 5, 53, 26, 73, 46, 33, 24], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 8, 5, 0, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 2, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [42, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.8282856941223145, "mapping_values": [1, 3, 3, 1, 2, 1, 8, 8, 5, 3, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.sqrt(tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [1.9016012562547835, 1.0897940221463904, 0.7818409069937612, 0.6581666270550672, 0.5993866868668449, 0.5559262700793198, 0.503437706145943, 0.4962899537921629, 0.46337328693177393, 0.45592208386742916, 0.43989947829122444, 0.4132412494236625, 0.3819228012516766, 0.3824150611569837, 0.37536242633384875, 0.3628292459310117, 0.3541992183028274, 0.3572474794459617, 0.3272463923920226, 0.30752749744423347, 0.31214547937084197, 0.29992198746485593, 0.296272952283268, 0.28196859258182644, 0.2874597978432889, 0.2733791492768188, 0.2648564498020815, 0.24564530809384452, 0.24849392920673452, 0.25395997512011464, 0.23784147361407837, 0.2435698680212595, 0.22440791473121313, 0.21612678081871828, 0.21135169177904986, 0.1981536854295179, 0.20574218461250884], "accuracy": [0.3572843670845032, 0.6103553175926208, 0.6993792057037354, 0.7541936039924622, 0.7754589915275574, 0.7897239327430725, 0.8124422430992126, 0.8146876096725464, 0.8274996876716614, 0.8255184292793274, 0.8403117060661316, 0.847840428352356, 0.8581429123878479, 0.858671247959137, 0.858671247959137, 0.8632941246032715, 0.8691058158874512, 0.8640866279602051, 0.8758420348167419, 0.8873332738876343, 0.8796724081039429, 0.8865407705307007, 0.889578640460968, 0.8926165699958801, 0.8912957310676575, 0.893541157245636, 0.8965790271759033, 0.9056927561759949, 0.9041078090667725, 0.9002773761749268, 0.9080702662467957, 0.9049002528190613, 0.9170519113540649, 0.919561505317688, 0.919561505317688, 0.9229956269264221, 0.9208822846412659], "val_loss": [0.9956691946302142, 0.6249908379146031, 0.524596129144941, 0.48057624271937777, 0.44921839237213135, 0.39865834372384207, 0.38576250416891916, 0.3742209928376334, 0.3462783864566258, 0.34257293598992483, 0.3447595919881548, 0.31964802742004395, 0.3269581454140799, 0.3198382258415222, 0.3134385943412781, 0.30584308930805754, 0.34200880357197355, 0.30283606903893606, 0.2912471294403076, 0.29920488595962524, 0.2921289716448103, 0.2903979335512434, 0.2851661103112357, 0.294502249785832, 0.2925854240145002, 0.28472902945109774, 0.2914892520223345, 0.28715220519474577, 0.30333430426461355, 0.2939578039305551, 0.31098716599600656, 0.27884367534092497, 0.28717741795948576, 0.2943862932068961, 0.29718609367098126, 0.29775041341781616, 0.28655835560389925], "val_accuracy": [0.5573333501815796, 0.721666693687439, 0.7516666650772095, 0.7829999923706055, 0.8029999732971191, 0.8273333311080933, 0.8356666564941406, 0.8363333344459534, 0.8573333621025085, 0.8636666536331177, 0.8523333072662354, 0.8686666488647461, 0.8679999709129333, 0.8703333139419556, 0.8723333477973938, 0.8723333477973938, 0.8453333377838135, 0.871666669845581, 0.8799999952316284, 0.8830000162124634, 0.875333309173584, 0.8799999952316284, 0.8816666603088379, 0.8836666941642761, 0.878333330154419, 0.8836666941642761, 0.8799999952316284, 0.8866666555404663, 0.8773333430290222, 0.8813333511352539, 0.875, 0.887333333492279, 0.8846666812896729, 0.8823333382606506, 0.8863333463668823, 0.8870000243186951, 0.8859999775886536]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0], [3, 6, 9, 9, 5, 1, 9, 2, 1, 2, 4, 6, 4, 2, 2, 6, 9, 4, 3, 4, 4, 1, 8, 3, 4, 2, 9, 7, 2, 6, 8, 7, 6, 7], [1, 1, 2, 1, 2, 0, 2, 2, 1, 0, 2, 2, 3, 2, 2, 2, 1, 2, 2, 2, 1, 0, 1, 3, 3, 2, 0, 2], [26, 60, 5, 53, 26, 73, 46, 33, 24], [1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 8, 5, 1, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 2, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [42, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.7962856888771057, "mapping_values": [1, 1, 1, 0, 1, 0, 13, 13, 8, 5, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.sqrt(tf.math.square(tf.math.subtract(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), tf.math.negative(tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, beta)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.2234542351892643, 1.5350824301631112, 0.9936552946325999, 0.8157370425549165, 0.7588600567098559, 0.7036976017783173, 0.6568072196625133, 0.636100032302477, 0.6108114019187844, 0.5712335842979299, 0.5553029983224115, 0.5265706465968901, 0.5086084237117273, 0.48741835377015114, 0.46837912720145014, 0.4641117344931085, 0.446091658738248, 0.43821879041634215, 0.42745283422390107, 0.41987316475930453, 0.4067940591758095, 0.38902053682559423, 0.38259628487537095, 0.3712551780601046, 0.36256491253011025, 0.3524240455481323, 0.34715409896723615, 0.3340436210603667, 0.3414114917337052], "accuracy": [0.2324659824371338, 0.48514068126678467, 0.6493197679519653, 0.6931713223457336, 0.7131158113479614, 0.7321357727050781, 0.7481178045272827, 0.755118191242218, 0.7681944370269775, 0.7840443849563599, 0.7917051911354065, 0.7981772422790527, 0.8095363974571228, 0.8158763647079468, 0.8226125836372375, 0.8259146809577942, 0.8333113193511963, 0.8399154543876648, 0.8407079577445984, 0.8449346423149109, 0.8512746095657349, 0.8576145768165588, 0.8573504090309143, 0.8622375130653381, 0.8621054291725159, 0.8683133125305176, 0.8746532797813416, 0.8784837126731873, 0.8780874609947205], "val_loss": [1.6282634394509452, 0.7241692202431815, 0.6367337874003819, 0.5608669860022408, 0.5301460368292672, 0.5026622329439435, 0.470784136227199, 0.44723664011274067, 0.4267101458140782, 0.4196193643978664, 0.39280965498515535, 0.3893271173749651, 0.37640938588551115, 0.3609668953078134, 0.3489407215799604, 0.35346860545022146, 0.34023609331675936, 0.33566101108278545, 0.32353561265128, 0.31636872461863924, 0.31668853759765625, 0.30852198600769043, 0.30519323689596994, 0.2947484084538051, 0.29507566349846975, 0.2952268123626709, 0.2959139176777431, 0.29930383818490164, 0.29111574377332416], "val_accuracy": [0.4866666793823242, 0.6909999847412109, 0.7239999771118164, 0.746999979019165, 0.7713333368301392, 0.7683333158493042, 0.7953333258628845, 0.8016666769981384, 0.8073333501815796, 0.8130000233650208, 0.8230000138282776, 0.8293333053588867, 0.8433333039283752, 0.8433333039283752, 0.8546666502952576, 0.8479999899864197, 0.8553333282470703, 0.8516666889190674, 0.8646666407585144, 0.8643333315849304, 0.8690000176429749, 0.8713333606719971, 0.8756666779518127, 0.8790000081062317, 0.8740000128746033, 0.874666690826416, 0.8733333349227905, 0.8766666650772095, 0.8723333477973938]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 6, 9, 9, 5, 1, 9, 2, 1, 2, 4, 6, 4, 2, 2, 6, 9, 4, 3, 4, 4, 1, 8, 3, 4, 2, 9, 7, 2, 6, 8, 7, 6, 7], [0, 1, 2, 1, 2, 0, 2, 2, 1, 0, 2, 2, 3, 3, 2, 2, 1, 0, 2, 2, 1, 0, 1, 3, 3, 3, 2, 2], [26, 60, 5, 53, 26, 73, 46, 33, 24], [1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 8, 5, 1, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 2, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [27, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.6740000247955322, "mapping_values": [1, 4, 4, 3, 1, 2, 7, 7, 4, 3, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(grad, tf.math.sqrt(tf.math.square(tf.math.subtract(beta, tf.math.add(beta, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.278031991032278, 2.0862225875280096, 1.56276540624908, 1.3008639813099303, 0.9448438374326371, 0.8817766678567891, 0.8253326572919676, 0.8006918294208397, 0.7653435903958452, 0.7615810328895988, 0.7257152910104061, 0.6983682945293914, 0.6830002351869068, 0.6494920053549447, 0.6385406207225861, 0.6047335488842526, 0.6095539694291536, 0.5834578836535765, 0.5786102671649053, 0.5516704371568786, 0.5400854207584178, 0.5369940287543168, 0.538841563728523, 0.5187613999508218, 0.5148863144885154, 0.5068537240109628, 0.49400568999209343, 0.4722771515479067, 0.47515054357097514, 0.4605812961044974, 0.45846382031083627, 0.4480854747687758, 0.4543342169690614, 0.4446049538491314, 0.44696820612832966, 0.43210341003057334, 0.42137253795789925], "accuracy": [0.1546691358089447, 0.3626997768878937, 0.4807819426059723, 0.5692775249481201, 0.658961832523346, 0.6843217611312866, 0.6972658634185791, 0.7029454708099365, 0.713908314704895, 0.7152291536331177, 0.7226257920265198, 0.7353057861328125, 0.7372870445251465, 0.7576277852058411, 0.7585523724555969, 0.7643640041351318, 0.7714964747428894, 0.7827235460281372, 0.7824593782424927, 0.7901201844215393, 0.7913089394569397, 0.7954035401344299, 0.7955356240272522, 0.8076872229576111, 0.8112534880638123, 0.8049134612083435, 0.8131026029586792, 0.8195747137069702, 0.8198388814926147, 0.8272355198860168, 0.8286884427070618, 0.8290846943855286, 0.8280280232429504, 0.8335754871368408, 0.8297450542449951, 0.8418967127799988, 0.8438779711723328], "val_loss": [1.8863160269601005, 1.4772821835109167, 0.8274773870195661, 0.6828095742634365, 0.6929761682237897, 0.5863376685551235, 0.5716255562646049, 0.5608948639460972, 0.5669290167944772, 0.5195904459272113, 0.5126847709928241, 0.47893706389835905, 0.4628751959119524, 0.4624791315623692, 0.44666593415396555, 0.43150680405753, 0.4219951799937657, 0.4238297939300537, 0.41481776748384747, 0.39091003792626516, 0.3806468503815787, 0.38032524074826923, 0.37648160117013113, 0.37175174270357403, 0.36417438302721294, 0.3522676314626421, 0.3581360493387495, 0.35245620352881296, 0.35314429657799856, 0.35687829766954693, 0.34378738914217266, 0.330849289894104, 0.34165894985198975, 0.3311148200716291, 0.33627355098724365, 0.34982019662857056, 0.33935682262693134], "val_accuracy": [0.4166666567325592, 0.5386666655540466, 0.6779999732971191, 0.7106666564941406, 0.7443333268165588, 0.7379999756813049, 0.75, 0.7483333349227905, 0.7526666522026062, 0.7683333158493042, 0.7676666378974915, 0.784333348274231, 0.800000011920929, 0.7983333468437195, 0.8106666803359985, 0.8116666674613953, 0.8159999847412109, 0.8173333406448364, 0.8256666660308838, 0.8299999833106995, 0.8316666483879089, 0.8396666646003723, 0.8420000076293945, 0.8536666631698608, 0.8473333120346069, 0.8536666631698608, 0.8539999723434448, 0.8516666889190674, 0.8506666421890259, 0.8523333072662354, 0.8550000190734863, 0.8646666407585144, 0.8613333106040955, 0.8586666584014893, 0.859000027179718, 0.8586666584014893, 0.8616666793823242]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 9, 0, 9, 5, 1, 6, 2, 1, 2, 2, 9, 4, 2, 5, 2, 2, 4, 3, 4, 0, 8, 2, 8, 4, 5, 7, 7, 2, 6, 8, 8, 6, 7], [0, 1, 1, 2, 2, 1, 2, 2, 1, 0, 2, 1, 0, 3, 2, 2, 2, 0, 2, 2, 1, 0, 1, 2, 1, 0, 0], [71, 60, 5, 35, 29, 73, 46, 33, 24], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [2, 8, 5, 5, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 2, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [42, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.245142862200737, "mapping_values": [1, 3, 3, 2, 1, 2, 6, 6, 4, 2, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.sqrt(tf.math.square(tf.math.add(beta, tf.math.square(tf.math.add(beta, beta))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.1955290139233195, 2.375316087895097, 2.609930635931438, 2.7019167022304513, 2.785231829602815, 2.9130246778756965, NaN], "accuracy": [0.2141064554452896, 0.10355303436517715, 0.15651829540729523, 0.1014397069811821, 0.09153348207473755, 0.09972262382507324, 0.1018359512090683], "val_loss": [1.9737700053623743, 2.1561222076416016, 2.2921299934387207, 2.3473902429853166, 2.4862057822091237, 2.802504403250558, NaN], "val_accuracy": [0.09733333438634872, 0.18700000643730164, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10100000351667404, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0], [3, 6, 1, 9, 5, 1, 6, 0, 1, 2, 2, 9, 4, 2, 2, 6, 2, 4, 3, 4, 4, 8, 2, 3, 1, 2, 7, 7, 2, 6, 8, 7, 6, 7, 5, 5, 4, 8, 1, 9, 0, 7, 8, 8, 7, 8, 4, 7, 2, 9, 7, 6, 3, 7, 3, 5, 5], [3, 1, 2, 1, 2, 0, 2, 2, 1, 0, 2, 0, 3, 3, 2, 2, 1, 0, 2, 2, 1, 0, 1, 3, 3, 3, 2, 2, 1, 3, 2, 0, 0, 3, 0, 2, 3], [71, 60, 87, 89, 29, 73, 46, 33, 24, 93, 89, 38, 20], [1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 1, 0, 1, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 0, 5, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [42, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 1], [9, 3], [0, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 8, 8, 4, 4, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(tf.math.negative(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(beta, grad), beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [1168765539.1648824, 22851054027.048473, 107463473522.86356, 295077767906.2105, 616083368429.6732, 1155285077886.6982], "accuracy": [0.09866596013307571, 0.10447761416435242, 0.09642054885625839, 0.0948355570435524, 0.09840179979801178, 0.1002509593963623], "val_loss": [4464626980.571428, 35706215277.71429, 120496460361.14285, 285605990985.1429, 557810506605.7142, 963879857590.8572], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1], [3, 6, 3, 9, 5, 1, 6, 2, 1, 2, 2, 9, 4, 2, 2, 2, 2, 4, 3, 4, 0, 8, 2, 3, 4, 5, 7, 7, 2, 6, 8, 8, 6, 7], [0, 1, 2, 0, 1, 1, 2, 2, 2, 0, 2, 2, 0, 3, 2, 2, 1, 0, 2, 2, 1, 0, 1, 2, 1, 0, 0], [61, 97, 5, 88, 29, 29, 46, 2, 24], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 8, 5, 1, 9, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 2, 3, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [42, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [1, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 32, 32, 18, 14, 6, 8, 8, 6, 2, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), alpha)), tf.math.multiply(tf.math.add(alpha, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.subtract(grad, tf.math.add(tf.math.add(tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), alpha)), alpha)), tf.math.pow(grad, tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), grad))), tf.math.add(grad, tf.math.add(alpha, tf.math.pow(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), grad)))))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.sqrt(tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.square(beta))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1], [1, 9, 3, 9, 5, 1, 5, 3, 1, 2, 2, 9, 4, 2, 2, 2, 2, 4, 3, 2, 0, 8, 2, 3, 4, 5, 7, 7, 2, 6, 8, 8, 6, 7], [0, 1, 1, 2, 0, 1, 2, 1, 0, 0, 2, 2, 0, 3, 2, 2, 2, 0, 2, 2, 1, 0, 1, 2, 1, 0, 0], [71, 60, 5, 49, 29, 73, 46, 33, 24], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 8, 5, 1, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 2, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [42, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [2, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07555144280195236, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0], [3, 6, 3, 9, 5, 1, 6, 2, 1, 2, 2, 9, 1, 6, 2, 6, 2, 4, 3, 4, 4, 8, 2, 3, 9, 2, 8, 7, 2, 6, 8, 7, 6, 2], [0, 1, 2, 0, 2, 0, 1, 2, 1, 2, 2, 0, 3, 3, 2, 2, 1, 2, 2, 2, 1, 1, 1, 3, 3, 3, 2, 2], [71, 60, 74, 49, 29, 73, 46, 33, 24], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [3, 8, 5, 1, 2, 6, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 2, 1, 1, 2, 3, 1, 4, 3, 4, 1, 3, 3, 0], [42, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 33, 33, 19, 14, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), alpha)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, beta)))), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.add(alpha, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), alpha)))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))))), tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [3, 2, 3, 9, 5, 3, 6, 2, 1, 2, 2, 9, 4, 2, 2, 2, 2, 4, 6, 3, 0, 8, 2, 3, 4, 5, 8, 7, 2, 6, 4, 8, 6, 7, 4, 8, 6, 6, 0, 7, 5, 4, 7, 3, 8, 2, 4, 0, 2, 6, 5, 0, 6, 2, 4, 2, 6, 8, 9, 5, 9, 5], [0, 1, 1, 2, 2, 1, 2, 2, 1, 0, 2, 2, 0, 3, 0, 2, 1, 0, 1, 2, 1, 0, 0, 2, 1, 0, 0, 2, 0, 2, 2, 1, 1, 2, 0, 1, 2, 1, 2, 2], [65, 60, 87, 89, 47, 73, 4, 33, 24, 93, 89, 38, 20], [1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0], [3, 1, 9, 1, 2, 5, 0, 8, 3, 2, 7, 2, 7, 5, 2, 6, 4, 3, 9, 9, 3, 4, 5, 9, 1, 9], [3, 2, 0, 2, 3, 3, 1, 4, 2, 4, 1, 3, 3, 2], [42, 95, 54, 66, 83], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 88, 88, 52, 36, 13, 12, 12, 8, 4, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 50, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32), alpha)), tf.math.multiply(tf.math.add(alpha, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.subtract(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), grad), grad)), alpha)), tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))))), tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.negative(grad), tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.pow(tf.math.square(tf.math.add(alpha, grad)), tf.math.sqrt(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), grad)), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)), tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(grad, tf.math.sqrt(tf.math.divide_no_nan(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))))), tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), alpha))))), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), tf.math.negative(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.pow(tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(grad)), tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), grad)), tf.math.add(alpha, grad))), tf.math.add(alpha, alpha)), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.add(alpha, tf.math.negative(alpha))))))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.subtract(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(beta)), tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))), tf.math.negative(tf.math.add(beta, tf.math.sqrt(beta)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08770307898521423, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 6, 3, 9, 5, 1, 4, 2, 5, 2, 2, 9, 4, 2, 2, 8, 9, 4, 3, 4, 4, 8, 2, 3, 4, 2, 7, 7, 2, 6, 8, 7, 6, 7], [0, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 3, 3, 2, 2, 1, 0, 1, 2, 1, 0, 1, 3, 3, 3, 2, 2], [71, 60, 15, 73, 64, 73, 46, 33, 24], [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [9, 5, 6, 4, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 2, 0, 2, 3, 3, 1, 4, 3, 4, 1, 3, 3], [42, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 21, 21, 13, 8, 3, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), alpha)), tf.math.multiply(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))), tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), alpha)), tf.math.add(alpha, grad)))), tf.math.add(alpha, grad)), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))))))), lambda shape,  alpha, beta, grad: tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3029471008359734, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 6, 2, 0, 5, 1, 6, 2, 1, 9, 4, 1, 4, 1, 2, 6, 2, 4, 3, 5, 0, 5, 6, 3, 4, 2, 7, 7, 1, 6, 8, 7, 6, 7, 4, 7, 9, 1], [0, 2, 2, 1, 2, 2, 2, 2, 1, 2, 1, 2, 1, 3, 2, 1, 1, 0, 2, 2, 1, 0, 2, 2, 3, 1, 2, 3, 3], [71, 60, 15, 73, 29, 73, 46, 33, 24], [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 8, 5, 1, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 2, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [42, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [1, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 2, 7, 7, 4, 3, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), grad), tf.math.add(alpha, grad))))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.sqrt(tf.math.square(tf.math.subtract(beta, tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0], [3, 6, 9, 9, 5, 1, 9, 2, 1, 2, 4, 6, 4, 2, 2, 6, 9, 4, 3, 4, 4, 1, 8, 3, 4, 2, 9, 7, 2, 6, 8, 7, 6, 7], [0, 1, 2, 1, 2, 0, 2, 2, 1, 0, 2, 2, 3, 2, 2, 2, 1, 2, 2, 2, 1, 0, 1, 3, 3, 2, 0, 2], [71, 60, 18, 71, 29, 73, 46, 33, 24], [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [2, 8, 5, 1, 6, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 2, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [17, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 2, 9, 9, 5, 4, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), alpha)), tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, grad), tf.math.sqrt(tf.math.square(tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, beta), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [4799675009746216.0, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.12217672914266586, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1], [3, 6, 3, 9, 5, 1, 2, 2, 4, 8, 2, 9, 4, 2, 2, 3, 2, 4, 3, 9, 4, 8, 2, 9, 4, 2, 7, 7, 2, 6, 8, 7, 6, 7], [0, 1, 1, 2, 2, 1, 2, 2, 1, 0, 2, 2, 0, 3, 2, 2, 1, 0, 2, 2, 1, 0, 1, 2, 1, 0, 0], [71, 60, 5, 88, 29, 29, 46, 2, 24], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 8, 5, 1, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 2, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [42, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [4, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [2, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 38, 38, 24, 14, 7, 13, 13, 8, 5, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), alpha)), tf.math.multiply(tf.math.add(alpha, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.pow(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), grad))), tf.math.add(alpha, grad)), alpha)), tf.math.pow(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.multiply(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(grad, tf.math.add(alpha, tf.math.multiply(grad, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)))))), tf.math.pow(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad))))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.sqrt(tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(beta)), tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), tf.math.negative(tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, beta))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.4936104884774526e+31, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.051512349396944046, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], [3, 1, 3, 9, 5, 1, 6, 2, 8, 2, 2, 9, 4, 2, 2, 8, 2, 4, 3, 5, 6, 8, 2, 3, 4, 2, 2, 7, 2, 6, 8, 7, 6, 7, 0, 9], [0, 1, 2, 2, 2, 0, 2, 2, 1, 0, 2, 2, 3, 0, 2, 2, 1, 1, 1, 2, 1, 0, 1, 3, 3, 3, 2, 2], [13, 60, 5, 49, 29, 55, 46, 33, 24], [1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [1, 6, 5, 1, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 3, 1, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3, 0], [42, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.037142857909202576, "mapping_values": [1, 8, 8, 5, 3, 2, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), alpha)), tf.math.multiply(tf.math.add(alpha, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, grad), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3027594689727064, 2.3025209688948225, 2.303098291217722, 2.3043256632923654, 2.3007870269977437, 2.3023507455871908], "accuracy": [0.09100515395402908, 0.09008057415485382, 0.09206181764602661, 0.09087307006120682, 0.09298639744520187, 0.08994849026203156], "val_loss": [1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1], [3, 6, 9, 9, 5, 1, 9, 2, 1, 2, 4, 6, 4, 2, 2, 6, 9, 4, 3, 4, 4, 1, 8, 3, 4, 2, 9, 7, 2, 6, 8, 7, 6, 7], [2, 1, 1, 2, 2, 1, 2, 2, 1, 0, 2, 2, 0, 3, 2, 2, 1, 0, 2, 2, 1, 0, 1, 2, 1, 0, 0], [55, 60, 5, 53, 26, 73, 46, 33, 24], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [1, 8, 5, 5, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 2, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [42, 95, 54, 66], [1, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.037142857909202576, "mapping_values": [1, 5, 5, 3, 2, 1, 9, 9, 6, 3, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.divide_no_nan(grad, alpha), tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, grad), tf.math.sqrt(tf.math.square(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.square(beta), tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3027594689727064, 2.3025209688948225, 2.303098291217722, 2.3043256632923654, 2.3007870269977437, 2.3023507455871908], "accuracy": [0.09100515395402908, 0.09008057415485382, 0.09206181764602661, 0.09087307006120682, 0.09298639744520187, 0.08994849026203156], "val_loss": [1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0], [3, 6, 9, 9, 5, 1, 9, 2, 1, 2, 4, 6, 4, 2, 2, 6, 9, 4, 3, 4, 4, 1, 8, 3, 4, 2, 9, 7, 2, 6, 8, 7, 6, 7], [0, 1, 2, 1, 2, 0, 2, 2, 1, 0, 2, 2, 3, 2, 2, 2, 1, 2, 2, 2, 1, 0, 1, 3, 3, 2, 0, 2], [78, 60, 5, 53, 26, 73, 46, 33, 24], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 8, 4, 1, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [1, 2, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [42, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.037142857909202576, "mapping_values": [1, 3, 3, 1, 2, 1, 12, 12, 7, 5, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, beta))))), tf.math.square(tf.math.add(beta, tf.math.negative(beta)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3027594689727064, 2.3025209688948225, 2.303098291217722, 2.3043256632923654, 2.3007870269977437, 2.3023507455871908], "accuracy": [0.09100515395402908, 0.09008057415485382, 0.09206181764602661, 0.09087307006120682, 0.09298639744520187, 0.08994849026203156], "val_loss": [1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 3, 3, 9, 5, 1, 6, 2, 1, 2, 2, 9, 4, 2, 2, 6, 2, 4, 3, 4, 4, 8, 0, 3, 4, 2, 7, 7, 5, 2, 8, 7, 6, 7], [0, 1, 1, 2, 2, 1, 2, 2, 1, 0, 2, 2, 0, 3, 2, 2, 2, 2, 2, 2, 1, 0, 1, 2, 1, 0, 1, 1], [71, 60, 5, 49, 29, 73, 86, 33, 24], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 8, 5, 1, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 2, 1, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [42, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.037142857909202576, "mapping_values": [1, 20, 20, 12, 8, 3, 5, 5, 3, 2, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(alpha, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(alpha, grad)), tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.add(grad, alpha)), tf.math.add(alpha, grad)), tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))))))))), grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.sqrt(tf.math.square(tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3027594689727064, 2.3025209688948225, 2.303098291217722, 2.3043256632923654, 2.3007870269977437, 2.3023507455871908], "accuracy": [0.09100515395402908, 0.09008057415485382, 0.09206181764602661, 0.09087307006120682, 0.09298639744520187, 0.08994849026203156], "val_loss": [1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 6, 3, 9, 5, 1, 6, 2, 0, 2, 2, 9, 4, 2, 2, 6, 2, 4, 3, 9, 4, 8, 2, 3, 5, 2, 7, 8, 8, 6, 8, 7, 6, 7], [0, 1, 2, 1, 1, 0, 2, 2, 1, 0, 2, 2, 3, 3, 0, 2, 1, 0, 2, 2, 1, 0, 2, 2, 3, 1, 2, 2], [71, 60, 5, 49, 29, 73, 17, 33, 24], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 8, 5, 1, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 0, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [42, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [1, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.037142857909202576, "mapping_values": [1, 4, 4, 2, 2, 1, 7, 7, 4, 3, 2, 1, 1, 0, 1, 0, 3, 1, 2, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), alpha))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.sqrt(tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, sigma)", "other_info": {"loss": [2.3027594689727064, 2.3025209688948225, 2.303098291217722, 2.3043256632923654, 2.3007870269977437, 2.3023507455871908], "accuracy": [0.09100515395402908, 0.09008057415485382, 0.09206181764602661, 0.09087307006120682, 0.09298639744520187, 0.08994849026203156], "val_loss": [1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]