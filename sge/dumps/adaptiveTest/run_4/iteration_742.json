[{"genotype": [[0], [1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [1, 4, 8, 2, 3, 8, 6, 2, 5, 9, 4, 1, 4, 1, 2, 6, 2, 4, 3, 5, 0, 5, 6, 3, 4, 2, 7, 7, 1, 6, 8, 7, 6, 7, 4, 7, 9, 1], [1, 2, 2, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1, 3, 2, 1, 1, 0, 2, 2, 1, 0, 2, 2, 3, 1, 2, 3, 3], [35, 55, 80, 53, 26, 73, 46, 33, 24], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 1, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 3, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [42, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.8408571481704712, "mapping_values": [1, 10, 10, 5, 5, 1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha))), grad), tf.math.add(alpha, tf.math.add(grad, tf.math.multiply(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), grad)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [1.8815720847506077, 1.163254212434061, 0.8097842078812921, 0.6777415372015007, 0.6214138927586941, 0.5598880485883084, 0.528281389556903, 0.5101665593039137, 0.48951089248334756, 0.4814972849239243, 0.4403175028040267, 0.4088779005785786, 0.39864153950804215, 0.3742878997110184, 0.37786199310908875, 0.3578991520957483, 0.3498586195807305, 0.3345985506677105, 0.3223007939723441, 0.3194510257200023, 0.3110732281165525, 0.30749616617335146, 0.29629781296256036, 0.2868930921145497, 0.2750847392023326, 0.26983503317316493, 0.2654328641284018, 0.2512521424376654, 0.24720469073864448, 0.23515690180564428, 0.22848681067321372, 0.22582967227058892, 0.2292182862388617, 0.22146188415682405, 0.2064829225144004, 0.22726978217141502, 0.20720299267694856, 0.20313201558123867, 0.18653719783569322, 0.18704826838155197, 0.1872191351453752, 0.17964862993230846, 0.1801127378458927, 0.17134220361426175], "accuracy": [0.3691718280315399, 0.591731607913971, 0.6960771083831787, 0.7386078238487244, 0.7601373791694641, 0.7860256433486938, 0.7975168228149414, 0.8079513907432556, 0.8171972036361694, 0.8166688680648804, 0.8298771381378174, 0.8516708612442017, 0.8544445633888245, 0.8601241707801819, 0.8582749962806702, 0.8656716346740723, 0.8697662353515625, 0.8739928603172302, 0.8808611631393433, 0.8786157965660095, 0.8833707571029663, 0.8874653577804565, 0.8883898854255676, 0.8908994793891907, 0.8951261639595032, 0.8975036144256592, 0.8967111110687256, 0.9051644206047058, 0.9063531756401062, 0.9096552729606628, 0.9162594079971313, 0.9128252267837524, 0.910711944103241, 0.9125610589981079, 0.9229956269264221, 0.9076740145683289, 0.920089840888977, 0.9243164658546448, 0.9270902276039124, 0.9272223114967346, 0.9274864792823792, 0.9305243492126465, 0.9311847686767578, 0.9354114532470703], "val_loss": [1.1373245375497, 0.6554482153483799, 0.5211228813443866, 0.48070856503077913, 0.4574542897088187, 0.41765341588429045, 0.3873665843691145, 0.38693063599722727, 0.38674607447215487, 0.3517978531973703, 0.33959326573780607, 0.3247874975204468, 0.3177528551646641, 0.3295938628060477, 0.32851868867874146, 0.31345172439302715, 0.30835979325430735, 0.3029138616153172, 0.31170229400907246, 0.29767732109342304, 0.30184546538761686, 0.29161386830466135, 0.3042720641408648, 0.2977977820805141, 0.2978243998118809, 0.2938874193600246, 0.28905746766499113, 0.28880866936274935, 0.2870160937309265, 0.29063670124326435, 0.2923491341727121, 0.2959375296320234, 0.29001528876168386, 0.2897371138845171, 0.3041792852537973, 0.30139062234333586, 0.2945957865033831, 0.2977334601538522, 0.30626129252570017, 0.2990320069449289, 0.3044399108205523, 0.3115504724638803, 0.3077148880277361, 0.31457636186054777], "val_accuracy": [0.5759999752044678, 0.7026666402816772, 0.7713333368301392, 0.7823333144187927, 0.7956666946411133, 0.8190000057220459, 0.8333333134651184, 0.8360000252723694, 0.8223333358764648, 0.8566666841506958, 0.862333357334137, 0.8696666955947876, 0.8700000047683716, 0.8640000224113464, 0.8679999709129333, 0.8700000047683716, 0.8740000128746033, 0.8773333430290222, 0.8703333139419556, 0.8806666731834412, 0.8769999742507935, 0.8809999823570251, 0.8786666393280029, 0.8820000290870667, 0.8773333430290222, 0.8799999952316284, 0.8823333382606506, 0.8813333511352539, 0.8863333463668823, 0.8859999775886536, 0.8836666941642761, 0.8863333463668823, 0.8883333206176758, 0.8896666765213013, 0.8849999904632568, 0.8843333125114441, 0.8863333463668823, 0.8870000243186951, 0.890999972820282, 0.8893333077430725, 0.8896666765213013, 0.890999972820282, 0.8883333206176758, 0.890333354473114]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [1, 4, 8, 4, 3, 8, 6, 1, 5, 9, 4, 1, 4, 1, 2, 6, 2, 4, 3, 5, 0, 5, 6, 3, 4, 2, 7, 7, 1, 6, 8, 7, 6, 7, 4, 7, 9, 1], [0, 2, 2, 0, 0, 1, 0, 2, 1, 2, 1, 2, 1, 3, 2, 1, 1, 0, 2, 2, 1, 0, 2, 2, 3, 1, 2, 3, 3], [35, 43, 24, 53, 26, 73, 46, 33, 24], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 1, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 3, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [42, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.8342857360839844, "mapping_values": [1, 1, 1, 0, 1, 1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [1.8823001052189843, 1.187192705533823, 0.8043848391238015, 0.6783525173721722, 0.6182946911845083, 0.5626427556828831, 0.528889182335539, 0.5057703397568774, 0.4874641801923289, 0.4720974972518585, 0.4470857363359063, 0.41434493352708374, 0.4009109375074067, 0.37585444704511023, 0.3759907184299335, 0.3562334413108667, 0.34742295170472737, 0.3420022759714997, 0.32562993890211617, 0.3233384161915966, 0.31847321631303477, 0.30916826225243477, 0.2984072128189018, 0.28722001183317986, 0.2762222282205669, 0.2698207267672867, 0.27689019299028983], "accuracy": [0.3699643313884735, 0.5869766473770142, 0.6952846646308899, 0.7441553473472595, 0.76106196641922, 0.7858935594558716, 0.7956677079200745, 0.8095363974571228, 0.8164047002792358, 0.8219521641731262, 0.8321225643157959, 0.8488970994949341, 0.8539162874221802, 0.8597279191017151, 0.8618412613868713, 0.8667283058166504, 0.8687095642089844, 0.8728041052818298, 0.8812574148178101, 0.8779553771018982, 0.8816536664962769, 0.883238673210144, 0.8869370222091675, 0.8923524022102356, 0.8930128216743469, 0.8969752788543701, 0.8942015767097473], "val_loss": [1.1407544953482491, 0.6417396579469953, 0.5285824537277222, 0.47874792984553743, 0.4607323578425816, 0.41524124997002737, 0.39027575084141325, 0.3854366200310843, 0.3799592597143991, 0.35407408646174837, 0.33809217384883333, 0.32763672726494925, 0.31991712536130634, 0.3337539178984506, 0.32121373074395315, 0.3098984360694885, 0.3091687389782497, 0.2986627391406468, 0.31047717162540983, 0.306728047983987, 0.2973447356905256, 0.2880877000944955, 0.29385973726000103, 0.29347197498594013, 0.30265056235449656, 0.3023626038006374, 0.28405639103480745], "val_accuracy": [0.5713333487510681, 0.715666651725769, 0.768666684627533, 0.7910000085830688, 0.7940000295639038, 0.8226666450500488, 0.8256666660308838, 0.8410000205039978, 0.8256666660308838, 0.8450000286102295, 0.8616666793823242, 0.8726666569709778, 0.8736666440963745, 0.8606666922569275, 0.8650000095367432, 0.875333309173584, 0.8759999871253967, 0.8763333559036255, 0.8690000176429749, 0.8726666569709778, 0.8803333044052124, 0.8863333463668823, 0.878333330154419, 0.8830000162124634, 0.8759999871253967, 0.8759999871253967, 0.8816666603088379]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [1, 3, 8, 4, 3, 5, 3, 1, 5, 9, 4, 1, 4, 1, 2, 6, 3, 4, 3, 5, 6, 5, 6, 3, 4, 2, 6, 9, 1, 6, 8, 7, 6, 7, 4, 7, 9, 1], [0, 2, 2, 2, 2, 1, 0, 2, 1, 2, 2, 2, 1, 3, 2, 1, 1, 0, 2, 0, 1, 0, 2, 2, 3, 2, 2, 3, 3], [35, 48, 80, 53, 26, 73, 46, 33, 24], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 1, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 3, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [42, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.8317142724990845, "mapping_values": [1, 32, 32, 18, 14, 3, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), grad))), tf.math.add(alpha, tf.math.subtract(tf.math.square(grad), tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.pow(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad))))), tf.math.subtract(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), grad))), tf.math.multiply(grad, tf.math.add(alpha, tf.math.pow(alpha, tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [1.8822719018535843, 1.1822196222047576, 0.8042426478073912, 0.6785459595743093, 0.618787278368205, 0.5630778453731423, 0.5277786098293672, 0.5075888594679152, 0.4856169577902019, 0.4790586965462913, 0.4519824400758699, 0.4172090089292795, 0.40312434564240146, 0.38103343269859935, 0.38416310672463366, 0.36210477399772517, 0.353205001506949, 0.33698970204992473, 0.3237669866641814, 0.322456590511449, 0.3133732741731836, 0.3070559417842449, 0.30335480789577074, 0.2888468477538926, 0.2782086995590821, 0.26940188361369954], "accuracy": [0.36983224749565125, 0.5888257622718811, 0.6964733600616455, 0.7412495017051697, 0.7609298825263977, 0.7872143983840942, 0.7959318161010742, 0.8090080618858337, 0.8146876096725464, 0.8182538747787476, 0.8289526104927063, 0.844010055065155, 0.8492933511734009, 0.8562937378883362, 0.8584070801734924, 0.8619733452796936, 0.8683133125305176, 0.8725399374961853, 0.878879964351654, 0.8775591254234314, 0.8825782537460327, 0.8821820020675659, 0.8850878477096558, 0.8922203183174133, 0.8934090733528137, 0.8960506916046143], "val_loss": [1.1367316927228654, 0.6431735924312046, 0.5284649303981236, 0.4762922866003854, 0.4600047213690622, 0.41832259723118376, 0.38827972752707346, 0.382240218775613, 0.3761915053640093, 0.35670334100723267, 0.34401649236679077, 0.33475869042532785, 0.3244154964174543, 0.3399402584348406, 0.3254693491118295, 0.31154108898980276, 0.3091793145452227, 0.2970207503863743, 0.30497659955705914, 0.29706985609872, 0.2917361259460449, 0.29064944812229704, 0.2987415449959891, 0.29297224964414326, 0.3061671938214983, 0.2992211069379534], "val_accuracy": [0.5716666579246521, 0.7136666774749756, 0.7683333158493042, 0.7900000214576721, 0.7919999957084656, 0.82833331823349, 0.831333339214325, 0.8429999947547913, 0.8343333601951599, 0.8446666598320007, 0.859666645526886, 0.8663333058357239, 0.8709999918937683, 0.862333357334137, 0.8616666793823242, 0.8730000257492065, 0.8723333477973938, 0.8796666860580444, 0.8723333477973938, 0.8830000162124634, 0.8836666941642761, 0.8823333382606506, 0.8756666779518127, 0.878333330154419, 0.8756666779518127, 0.8776666522026062]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1], [1, 2, 1, 4, 3, 5, 6, 1, 5, 9, 4, 1, 4, 1, 2, 6, 2, 4, 3, 5, 0, 5, 6, 5, 9, 2, 7, 7, 1, 6, 8, 7, 6, 7, 6, 9, 4, 1, 7, 0, 9, 1, 4], [0, 2, 2, 2, 2, 1, 0, 2, 1, 2, 1, 2, 1, 3, 2, 2, 1, 0, 2, 2, 1, 0, 2, 2, 3, 1, 2, 3, 3], [35, 48, 80, 53, 26, 73, 46, 33, 24], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 2, 5, 1, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 3, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [42, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.8125714063644409, "mapping_values": [1, 71, 71, 43, 28, 8, 8, 8, 4, 4, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(alpha, tf.math.multiply(grad, tf.math.square(tf.math.add(alpha, grad)))), grad))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.pow(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)))), tf.math.multiply(grad, tf.math.add(alpha, tf.math.square(alpha)))))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.negative(tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(alpha, tf.math.add(alpha, grad)), tf.math.add(alpha, grad)))))))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)))))), tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, grad)))))))))), tf.math.add(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.subtract(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.add(tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.2247076716326672, 1.5555954366359477, 1.012149958830342, 0.844355757509508, 0.7693421529457632, 0.721972470175809, 0.6679254270437576, 0.6141371019937422, 0.5785910394197725, 0.5437858438786263, 0.5187528025693016, 0.49490201877895806, 0.48786616181306963, 0.48853024012928137, 0.474389714867038, 0.46704623754612445, 0.44899262318820876, 0.44160183799690367, 0.44325154276571854, 0.4550124389730692, 0.456863271884631, 0.47411437100187004, 0.45564488882181464, 0.47633546318407655, 0.4687838681369898], "accuracy": [0.23497556149959564, 0.48646149039268494, 0.6293752193450928, 0.67666095495224, 0.6995112895965576, 0.7218332886695862, 0.7408532500267029, 0.7652885913848877, 0.7746664881706238, 0.7877426743507385, 0.7964601516723633, 0.8123101592063904, 0.8144234418869019, 0.8083476424217224, 0.8181217908859253, 0.8235371708869934, 0.8285563588142395, 0.8381983637809753, 0.833179235458374, 0.8272355198860168, 0.8272355198860168, 0.8309338092803955, 0.8310658931732178, 0.8186501264572144, 0.8186501264572144], "val_loss": [1.6192817687988281, 0.7784553936549595, 0.6629973139081683, 0.5837288073131016, 0.5467970371246338, 0.5062687907900129, 0.47687339782714844, 0.44337098939078196, 0.4200349279812404, 0.40514532157352995, 0.3889410580907549, 0.3848429151943752, 0.3783817631857736, 0.4058050513267517, 0.37088916982923237, 0.36151491744177683, 0.3459426590374538, 0.3472996268953596, 0.35189491510391235, 0.33622544152396067, 0.3561626076698303, 0.35158657176154, 0.3612258519445147, 0.3506684899330139, 0.3860355956213815], "val_accuracy": [0.5073333382606506, 0.6886666417121887, 0.7179999947547913, 0.7493333220481873, 0.7646666765213013, 0.7739999890327454, 0.7803333401679993, 0.8040000200271606, 0.8159999847412109, 0.8296666741371155, 0.8336666822433472, 0.8410000205039978, 0.8493333458900452, 0.8383333086967468, 0.8460000157356262, 0.8483333587646484, 0.8610000014305115, 0.859000027179718, 0.8553333282470703, 0.8666666746139526, 0.859000027179718, 0.862666666507721, 0.8526666760444641, 0.859333336353302, 0.8416666388511658]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [7, 4, 8, 2, 4, 8, 6, 2, 5, 9, 4, 1, 4, 1, 2, 6, 2, 4, 3, 5, 0, 5, 6, 3, 4, 2, 7, 7, 1, 6, 8, 7, 6, 7, 4, 7, 9, 1], [1, 2, 2, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1, 3, 2, 1, 1, 0, 2, 2, 1, 0, 2, 2, 3, 1, 2, 3, 3], [35, 55, 80, 53, 26, 73, 46, 33, 24], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 1, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 3, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [42, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.7928571701049805, "mapping_values": [1, 10, 10, 5, 5, 1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha))), grad), tf.math.add(grad, tf.math.pow(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.0643247885396057, 1.5664683358544262, 1.1626084827712309, 0.9621258015488401, 0.9172293358490908, 0.8081336951117237, 0.8229556834897691, 0.7823992245122663, 0.7233496527031916, 0.743954192874076, 0.6952971941397222, 0.6798834030056012, 0.6706136363750247, 0.6782411206211034, 0.6612510707762264, 0.6130208401254233, 0.6528707724347516, 0.6094695317463364, 0.62272890631108, 0.5977790326789354], "accuracy": [0.3136970102787018, 0.46387532353401184, 0.579447865486145, 0.6557918190956116, 0.6604147553443909, 0.7004358768463135, 0.6935675740242004, 0.7013604640960693, 0.7334566116333008, 0.7246070504188538, 0.7407211661338806, 0.7477215528488159, 0.7481178045272827, 0.7427024245262146, 0.7544577717781067, 0.770439863204956, 0.7553823590278625, 0.7729493975639343, 0.7617223858833313, 0.7770439982414246], "val_loss": [1.341827358518328, 0.9332563877105713, 0.7671914781842913, 0.6828182595116752, 0.6043066126959664, 0.5911944423403058, 0.5516317742211478, 0.5685751778738839, 0.5499909775597709, 0.5165579489299229, 0.5002146789005825, 0.46841844490596224, 0.520460980279105, 0.4677992377962385, 0.4490137611116682, 0.5025385277611869, 0.4923507145472935, 0.47721099853515625, 0.4425373928887503, 0.46868949277060373], "val_accuracy": [0.3726666569709778, 0.5836666822433472, 0.6956666707992554, 0.6926666498184204, 0.7170000076293945, 0.7236666679382324, 0.7419999837875366, 0.737333357334137, 0.7486666440963745, 0.7633333206176758, 0.7699999809265137, 0.7940000295639038, 0.7720000147819519, 0.7946666479110718, 0.812666654586792, 0.7436666488647461, 0.7713333368301392, 0.7730000019073486, 0.7963333129882812, 0.793666660785675]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [1, 4, 8, 2, 3, 8, 6, 2, 5, 9, 4, 1, 4, 1, 2, 6, 2, 4, 3, 5, 0, 5, 6, 3, 4, 2, 7, 7, 1, 6, 8, 7, 6, 7, 4, 7, 9, 1], [1, 2, 2, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1, 3, 2, 1, 1, 0, 2, 2, 1, 0, 2, 2, 3, 1, 2, 3, 3], [78, 55, 80, 53, 26, 73, 46, 33, 24], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 1, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 3, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [42, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.758571445941925, "mapping_values": [1, 10, 10, 5, 5, 1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha))), grad), tf.math.add(alpha, tf.math.add(grad, tf.math.multiply(tf.math.add(alpha, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.068582583050041, 1.4947847152005065, 1.1771906446141496, 1.0045638348621353, 0.8711857063312729, 0.8809355389897093, 0.7854605004882234, 0.7529343675549918, 0.7691894114261542, 0.7264385841085202, 0.7293356024058519, 0.688616787115061, 0.6575539749233305, 0.6442277395115898], "accuracy": [0.32360321283340454, 0.4877823293209076, 0.5629374980926514, 0.6337339878082275, 0.674679696559906, 0.6647734642028809, 0.7046625018119812, 0.713379979133606, 0.7116629481315613, 0.7177387475967407, 0.7156254053115845, 0.7396644949913025, 0.7511557340621948, 0.7580240368843079], "val_loss": [1.584960869380406, 0.8527695110866002, 0.8050333772386823, 0.6768969808306012, 0.680428283555167, 0.5841772556304932, 0.5884853942053658, 0.6393717016492572, 0.5152473790305001, 0.5617422035762242, 0.5083616631371635, 0.5030136959893363, 0.4974538939339774, 0.5188079050609044], "val_accuracy": [0.37533333897590637, 0.6060000061988831, 0.6683333516120911, 0.6883333325386047, 0.6653333306312561, 0.7473333477973938, 0.7319999933242798, 0.7066666483879089, 0.7726666927337646, 0.7440000176429749, 0.7580000162124634, 0.7689999938011169, 0.7699999809265137, 0.762666642665863]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [1, 4, 8, 4, 3, 8, 6, 1, 5, 9, 4, 1, 4, 1, 2, 6, 2, 4, 3, 5, 0, 5, 6, 3, 4, 2, 7, 7, 1, 6, 8, 7, 6, 7, 4, 7, 9, 1], [0, 2, 2, 2, 2, 1, 0, 2, 1, 2, 1, 2, 1, 3, 2, 1, 1, 0, 2, 2, 1, 0, 2, 2, 3, 1, 2, 3, 3], [97, 55, 80, 53, 26, 73, 46, 33, 24], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 5, 5, 1, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 3, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [42, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.618571400642395, "mapping_values": [1, 10, 10, 5, 5, 1, 7, 7, 4, 3, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.add(alpha, tf.math.multiply(grad, grad)), tf.math.add(alpha, grad))), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.square(tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3019640526641174, 2.2986113802789303, 2.2977293331263136, 2.295730193560984, 2.293642665070471, 2.290635565756618, 2.2894355882002992, 2.286245403823883, 2.282874365177893, 2.281815659022051, 2.279978717559081, 2.2779857961493177, 2.274469400425282, 2.2709029968215364, 2.2701247952098087, 2.268403667043843, 2.267218010599713, 2.2636260199367313, 2.2618165712126053, 2.2594429231700865, 2.2551992165965173, 2.252155945521808, 2.250351299274048, 2.2461367627459903, 2.2432217464439463, 2.2419952084406916, 2.240532666842353, 2.2378499031444785, 2.2337605296628604, 2.231164038535579, 2.2247624497419305, 2.225127686189544, 2.2192071410627445, 2.2167477283369452, 2.2126712580209618, 2.209058906297957, 2.2082177831858627, 2.1991901871645063, 2.1980089442195547, 2.1934302523938847, 2.188777404202446, 2.184022315410402, 2.179161729939846, 2.172361420634054, 2.1671806770844184, 2.1623194543614033, 2.1578800515444554, 2.153999167379214, 2.147456919213233, 2.1410511712104636, 2.13079645828627, 2.1282699127333307, 2.118968225882715, 2.1099710578160153, 2.1029931090653076, 2.095461413089106, 2.090712854686178, 2.0819713335310572, 2.0721270594976646, 2.060464175496009, 2.052167091639192, 2.0409320864490375, 2.038985599852383, 2.0268487245682887, 2.0118612343719247, 2.0061668056333857, 1.995136397499938, 1.9820043705615384, 1.9733921461070076, 1.9501148390338532, 1.9434484963277863, 1.9318707528099832, 1.9200084542302314, 1.9054206822920217, 1.8943673970913135, 1.8822239942522947, 1.8712543766212941, 1.850733099013996, 1.8404613533323593, 1.8207685719738074, 1.8094861978049197, 1.797214014985857, 1.7810384501020244, 1.7655010273144498, 1.7509267298836104, 1.7375660284776981, 1.727902818050493, 1.713569027447603, 1.6981297606852517, 1.6781689496387375, 1.6681521970047029, 1.6548190688916862, 1.6455461976707981, 1.6270887612225813, 1.6131421644390693, 1.5990474270067478, 1.5842356039879109, 1.574703811528487, 1.5666889070031698, 1.5550756899750922], "accuracy": [0.09206181764602661, 0.09589222073554993, 0.09760929644107819, 0.10276053100824356, 0.11042134463787079, 0.11993131786584854, 0.1254788041114807, 0.13089419901371002, 0.14014001190662384, 0.14238542318344116, 0.15295206010341644, 0.15440496802330017, 0.16351869702339172, 0.17395325005054474, 0.1744815707206726, 0.175670325756073, 0.1814819723367691, 0.1950865089893341, 0.19442610442638397, 0.19614318013191223, 0.21080438792705536, 0.22031435370445251, 0.22454100847244263, 0.2242768406867981, 0.23616431653499603, 0.24316470324993134, 0.23576806485652924, 0.24382512271404266, 0.2561088502407074, 0.25795799493789673, 0.2813366651535034, 0.26495838165283203, 0.27777042984962463, 0.27816668152809143, 0.284110426902771, 0.2903183102607727, 0.28384625911712646, 0.29863953590393066, 0.29943203926086426, 0.3028661906719208, 0.3148857355117798, 0.3152819871902466, 0.3225465714931488, 0.32782986760139465, 0.33958524465560913, 0.33747193217277527, 0.3362831771373749, 0.33641526103019714, 0.34301942586898804, 0.3531897962093353, 0.3535860478878021, 0.35001981258392334, 0.3609826862812042, 0.3687755763530731, 0.3681151866912842, 0.3715493381023407, 0.3683793544769287, 0.37181350588798523, 0.3807951509952545, 0.3821159601211548, 0.38568219542503357, 0.39770177006721497, 0.3819838762283325, 0.3883238732814789, 0.40047550201416016, 0.39585259556770325, 0.3937392830848694, 0.4087967276573181, 0.40562674403190613, 0.4275524914264679, 0.41566503047943115, 0.41923126578330994, 0.42768457531929016, 0.42226919531822205, 0.43125081062316895, 0.4245145916938782, 0.42742040753364563, 0.43164706230163574, 0.4349491596221924, 0.4497424364089966, 0.442609965801239, 0.45225200057029724, 0.45647865533828735, 0.45264825224876404, 0.4621582329273224, 0.4637432396411896, 0.46123364567756653, 0.4589882493019104, 0.4617619812488556, 0.4756307005882263, 0.47708359360694885, 0.46347907185554504, 0.47193238139152527, 0.4819706678390503, 0.47906485199928284, 0.49412229657173157, 0.49491479992866516, 0.48910316824913025, 0.4962356388568878, 0.4909523129463196], "val_loss": [1.9683170999799455, 1.9662588664463587, 1.9642163685389928, 1.9621742112295968, 1.9601185662405831, 1.9580542019435339, 1.956002984728132, 1.9539299692426408, 1.9518303189958846, 1.94974912915911, 1.9476349694388253, 1.9455137934003557, 1.9433491570608956, 1.9411518914358956, 1.9389126641409737, 1.9366399220057897, 1.9343951770237513, 1.9320908273969377, 1.929725510733468, 1.9273619651794434, 1.924896580832345, 1.9224083764212472, 1.9198571613856725, 1.9172166415623255, 1.9145185606820243, 1.9117504528590612, 1.9089490345546178, 1.9061059270586287, 1.9031363214765276, 1.9000975745064872, 1.8969249725341797, 1.8937369755336217, 1.8903884206499373, 1.8869756971086775, 1.8834468296595983, 1.8797832897731237, 1.8760692051478796, 1.8721123422895158, 1.8681297302246094, 1.8639734131949288, 1.859645230429513, 1.855128356388637, 1.850435733795166, 1.8455544880458288, 1.8404427937098913, 1.8351524216788155, 1.82968384878976, 1.8240763119288854, 1.8181570598057337, 1.8120694841657365, 1.8056567055838448, 1.7991364342825753, 1.7922416414533342, 1.7850347927638464, 1.7776258332388741, 1.7699121747698103, 1.762096949986049, 1.7538197381155831, 1.745270115988595, 1.736365727015904, 1.7272377695356096, 1.7177113805498396, 1.7081101962498255, 1.6981735570090157, 1.687750952584403, 1.6771461282457625, 1.666137763432094, 1.6547752789088659, 1.6432055405208044, 1.6308760302407401, 1.618518590927124, 1.6058520248958044, 1.5929223128727503, 1.5795976434435164, 1.5661373138427734, 1.552495070866176, 1.538827589579991, 1.5246954645429338, 1.510570696422032, 1.495819432394845, 1.4811375141143799, 1.4663713659558977, 1.4515355314527238, 1.436464786529541, 1.421400512967791, 1.4063198907034737, 1.3914319447108678, 1.3765473025185722, 1.3617215156555176, 1.3466126918792725, 1.3317059789385115, 1.3169138772147042, 1.3025248731885637, 1.2880790914808, 1.2738965920039587, 1.25950060571943, 1.2452688217163086, 1.2318117277962821, 1.218606948852539, 1.205603803907122], "val_accuracy": [0.050333332270383835, 0.06733333319425583, 0.08399999886751175, 0.09733333438634872, 0.11433333158493042, 0.13500000536441803, 0.15966667234897614, 0.18000000715255737, 0.19966666400432587, 0.21699999272823334, 0.23333333432674408, 0.25066667795181274, 0.26766666769981384, 0.28333333134651184, 0.2966666519641876, 0.3089999854564667, 0.31966665387153625, 0.33266666531562805, 0.34066668152809143, 0.35199999809265137, 0.359333336353302, 0.367000013589859, 0.3736666738986969, 0.3763333261013031, 0.382999986410141, 0.3889999985694885, 0.3930000066757202, 0.3930000066757202, 0.39633333683013916, 0.40166667103767395, 0.40566667914390564, 0.4103333353996277, 0.4169999957084656, 0.4203333258628845, 0.4259999990463257, 0.43066665530204773, 0.4350000023841858, 0.437666654586792, 0.4399999976158142, 0.4403333365917206, 0.4436666667461395, 0.445333331823349, 0.4493333399295807, 0.45266667008399963, 0.45399999618530273, 0.4543333351612091, 0.45633333921432495, 0.460999995470047, 0.4646666646003723, 0.46833333373069763, 0.4729999899864197, 0.476666659116745, 0.4793333411216736, 0.48399999737739563, 0.4883333444595337, 0.49266666173934937, 0.49666666984558105, 0.5066666603088379, 0.5103333592414856, 0.5143333077430725, 0.5170000195503235, 0.5203333497047424, 0.5236666798591614, 0.527999997138977, 0.5329999923706055, 0.5360000133514404, 0.5393333435058594, 0.5423333048820496, 0.5450000166893005, 0.5493333339691162, 0.5533333420753479, 0.5550000071525574, 0.5586666464805603, 0.5616666674613953, 0.5676666498184204, 0.5720000267028809, 0.5759999752044678, 0.5793333053588867, 0.5816666483879089, 0.5839999914169312, 0.5846666693687439, 0.5873333215713501, 0.5926666855812073, 0.5960000157356262, 0.5973333120346069, 0.6000000238418579, 0.6000000238418579, 0.6033333539962769, 0.6036666631698608, 0.6039999723434448, 0.6076666712760925, 0.6079999804496765, 0.6100000143051147, 0.6133333444595337, 0.6143333315849304, 0.6183333396911621, 0.6209999918937683, 0.625, 0.6263333559036255, 0.628000020980835]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [1, 4, 8, 9, 3, 8, 6, 1, 5, 9, 4, 1, 4, 1, 2, 6, 2, 4, 3, 5, 0, 5, 6, 3, 4, 2, 7, 7, 1, 6, 8, 7, 6, 7, 4, 7, 9, 1], [0, 2, 2, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1, 3, 2, 1, 1, 0, 2, 2, 1, 0, 2, 2, 3, 1, 2, 3, 3], [35, 43, 24, 53, 26, 73, 46, 33, 24], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 0, 5, 1, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 3, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [42, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 6, 3, 2, 7, 7, 4, 3, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))), tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(grad, tf.math.sqrt(tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.negative(tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.4215035829971088, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.038304053246974945, 0.07568352669477463, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.7626423154558455, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.006000000052154064, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [1, 4, 8, 4, 3, 8, 6, 1, 5, 9, 4, 1, 4, 1, 2, 6, 2, 4, 3, 5, 0, 5, 6, 3, 4, 2, 7, 7, 1, 6, 8, 7, 6, 7, 4, 7, 9, 1], [0, 2, 2, 0, 0, 1, 0, 2, 1, 2, 1, 2, 1, 3, 2, 1, 1, 0, 2, 2, 1, 0, 2, 2, 3, 1, 2, 3, 3], [35, 43, 24, 53, 26, 73, 46, 33, 24], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 1, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 3, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [42, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 3, 3, 2, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [1183276475.3214257, 22825952931.858936, 105318304669.4006, 294040153479.55725, 627809149671.3501, 1150168979949.1323], "accuracy": [0.09919429570436478, 0.09813763201236725, 0.10593052208423615, 0.09351472556591034, 0.10011887550354004, 0.10117553919553757], "val_loss": [4464626980.571428, 35706215277.71429, 120496460361.14285, 285605990985.1429, 557810506605.7142, 963879857590.8572], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [1, 4, 8, 4, 3, 8, 6, 1, 5, 9, 4, 1, 4, 1, 2, 6, 2, 4, 3, 5, 0, 5, 6, 3, 4, 2, 7, 7, 1, 6, 8, 7, 6, 7, 4, 7, 9, 1], [1, 2, 2, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1, 3, 2, 1, 1, 0, 2, 2, 1, 0, 2, 2, 3, 1, 2, 3, 3], [97, 55, 80, 53, 26, 73, 46, 33, 24], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [2, 9, 5, 1, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 3, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [42, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 11, 6, 5, 1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(grad, tf.math.sqrt(tf.math.add(alpha, grad)))), tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, grad), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3036654410880586, 2.302916592925594, 2.3030544358347824, 2.3030408476447985, 2.303015284581727, 2.3030056385646924, 2.3029761879341146, 2.3029056311189033, 2.302973825760553, 2.3030293193774813, 2.3030009894811276], "accuracy": [0.09087307006120682, 0.09642054885625839, 0.09866596013307571, 0.0952318087220192, 0.09496764093637466, 0.09879804402589798, 0.09351472556591034, 0.09034473448991776, 0.09285431355237961, 0.09391097724437714, 0.09694888442754745], "val_loss": [1.9736239569527763, 1.9735221862792969, 1.9736319950648717, 1.9737005914960588, 1.9735948698861259, 1.9736593110220773, 1.9736390113830566, 1.9736804962158203, 1.9736995697021484, 1.9737035887581962, 1.973686831338065], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10300000011920929, 0.09733333438634872, 0.10066666454076767, 0.10366666316986084, 0.09666666388511658, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [1, 4, 8, 2, 0, 8, 6, 2, 5, 9, 4, 1, 4, 1, 2, 6, 2, 4, 3, 5, 0, 5, 6, 3, 4, 2, 7, 7, 1, 6, 8, 7, 6, 7, 4, 7, 9, 1], [1, 2, 2, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1, 3, 2, 1, 1, 0, 2, 2, 1, 0, 2, 2, 3, 1, 2, 3, 3], [93, 6, 65, 53, 26, 73, 46, 33, 24], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [3, 2, 5, 1, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 3, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [42, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 6, 4, 1, 27, 27, 15, 12, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.sqrt(alpha), tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))))), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.square(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))))), tf.math.negative(tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, beta)))))), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.add(alpha, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, grad))), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, alpha)))), grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1], [1, 2, 8, 0, 3, 5, 6, 1, 5, 9, 4, 1, 4, 1, 1, 6, 2, 4, 3, 5, 5, 1, 6, 3, 4, 0, 7, 7, 1, 6, 9, 5, 6, 7, 4, 7, 9, 1], [2, 2, 2, 2, 0, 1, 0, 1, 1, 2, 1, 2, 1, 3, 2, 1, 1, 0, 2, 2, 1, 0, 2, 2, 3, 1, 2, 3, 3], [35, 48, 80, 67, 26, 80, 46, 33, 24], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 1, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 3, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [87, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 6, 4, 0, 8, 8, 5, 3, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.negative(tf.math.add(alpha, tf.math.multiply(grad, tf.math.square(grad))))), grad)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10170386731624603, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [1, 4, 5, 4, 3, 8, 9, 1, 5, 9, 4, 1, 4, 1, 2, 6, 2, 4, 3, 5, 0, 5, 6, 3, 4, 2, 7, 7, 1, 6, 8, 7, 6, 7, 4, 7, 9, 1], [0, 2, 2, 0, 0, 1, 0, 2, 1, 2, 1, 2, 1, 3, 2, 1, 1, 0, 2, 2, 1, 0, 2, 2, 3, 1, 2, 3, 3], [35, 43, 24, 53, 26, 73, 46, 33, 24], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 3, 5, 1, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 3, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [42, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 8, 5, 4, 8, 8, 4, 4, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.add(alpha, tf.math.multiply(grad, tf.math.sqrt(tf.math.add(alpha, grad)))), tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.subtract(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.multiply(tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [1183276475.3214257, 22825952931.858936, 105318304669.4006, 294040153479.55725, 627809149671.3501, 1150168979949.1323], "accuracy": [0.09919429570436478, 0.09813763201236725, 0.10593052208423615, 0.09351472556591034, 0.10011887550354004, 0.10117553919553757], "val_loss": [4464626980.571428, 35706215277.71429, 120496460361.14285, 285605990985.1429, 557810506605.7142, 963879857590.8572], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [1, 4, 8, 4, 3, 8, 2, 1, 5, 9, 4, 1, 4, 1, 2, 6, 2, 4, 3, 5, 0, 5, 6, 3, 4, 2, 7, 7, 1, 6, 8, 7, 6, 7, 4, 7, 9, 1], [1, 2, 2, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1, 3, 2, 1, 1, 0, 2, 2, 1, 0, 2, 2, 3, 1, 2, 3, 3], [97, 55, 80, 53, 26, 73, 46, 33, 24], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [8, 9, 5, 1, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 3, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [42, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 7, 6, 1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha))), tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.sqrt(tf.math.add(alpha, grad)))), tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(grad, alpha)))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [1, 4, 8, 2, 3, 8, 6, 2, 5, 9, 4, 1, 4, 1, 2, 6, 2, 4, 3, 5, 0, 5, 6, 3, 4, 2, 7, 7, 1, 6, 8, 7, 6, 7, 4, 7, 9, 1], [1, 1, 2, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1, 3, 2, 1, 1, 0, 2, 2, 1, 0, 2, 2, 3, 1, 2, 3, 3], [35, 55, 80, 53, 26, 73, 46, 33, 24], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 0, 5, 1, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 3, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [42, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.0974285677075386, "mapping_values": [1, 32, 32, 18, 14, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha))), alpha)), tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, grad)), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.square(tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.subtract(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), alpha))), tf.math.add(grad, tf.math.add(alpha, tf.math.pow(alpha, tf.math.add(alpha, grad)))))))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.947177186570919, 19.519213768784333, 2.544688355732178, 5.260307402831846, 2.501728435155344, 2.52525334892933, 3.470966345850408, 2.516459273214999], "accuracy": [0.1966715157032013, 0.13089419901371002, 0.1006472036242485, 0.09259014576673508, 0.09813763201236725, 0.09536388516426086, 0.09589222073554993, 0.10117553919553757], "val_loss": [2.0678540638514926, 2.1299231392996654, 22.6659665788923, 2.178281443459647, 2.200387273515974, 11.880542755126953, 2.1194870131356374, 2.0993360110691617], "val_accuracy": [0.09733333438634872, 0.10000000149011612, 0.109333336353302, 0.10366666316986084, 0.10100000351667404, 0.09733333438634872, 0.10366666316986084, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [1, 4, 8, 4, 3, 8, 6, 1, 5, 9, 4, 1, 4, 1, 2, 6, 2, 4, 3, 5, 0, 5, 6, 3, 4, 2, 7, 7, 1, 6, 8, 7, 6, 7, 4, 7, 9, 1], [0, 2, 2, 2, 2, 1, 0, 2, 1, 2, 1, 2, 1, 3, 2, 1, 1, 0, 2, 2, 1, 0, 2, 2, 3, 1, 2, 3, 3], [35, 48, 80, 53, 26, 73, 46, 33, 24], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [5, 9, 5, 1, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 3, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [42, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.08799999952316284, "mapping_values": [1, 13, 13, 7, 6, 1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.add(alpha, tf.math.multiply(grad, tf.math.sqrt(tf.math.add(alpha, grad)))), grad))), tf.math.add(alpha, tf.math.divide_no_nan(grad, alpha)))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3018814916261796, 2.2990052119033244, 2.3010739976262937, 2.3023354170454997, 2.3027077046493734, 2.3031332107693085, 2.3042886251188337, 2.307409920224487, 2.3197635131158756], "accuracy": [0.09351472556591034, 0.10011887550354004, 0.09377889335155487, 0.08334434032440186, 0.09259014576673508, 0.10130762308835983, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9689404623849052, 1.9705591201782227, 1.972850935799735, 1.973456723349435, 1.9736643518720354, 1.974280766078404, 1.9758093016488212, 1.9806591442653112, 2.0116197722298756], "val_accuracy": [0.07633333653211594, 0.10366666316986084, 0.07233333587646484, 0.1106666699051857, 0.10633333027362823, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [1, 2, 3, 2, 3, 8, 6, 2, 5, 9, 4, 1, 4, 1, 2, 6, 2, 4, 3, 5, 0, 5, 6, 3, 4, 2, 7, 7, 1, 6, 8, 7, 6, 7, 4, 7, 9, 1], [1, 2, 2, 0, 1, 1, 0, 2, 1, 2, 1, 2, 1, 3, 2, 1, 1, 0, 2, 2, 1, 0, 2, 2, 3, 1, 2, 3, 3], [35, 55, 80, 53, 26, 73, 46, 33, 24], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 1, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 3, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [42, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.08742856979370117, "mapping_values": [1, 5, 5, 2, 3, 0, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3018814916261796, 2.299005400755024, 2.3010711594343407, 2.3023330329541816, 2.302705653449721, 2.3031349203227895, 2.304289106427718, 2.3074096997872857, 2.319762546026381], "accuracy": [0.09351472556591034, 0.10011887550354004, 0.09391097724437714, 0.08294808864593506, 0.09325055778026581, 0.1014397069811821, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9689405305044991, 1.9705583708626884, 1.9728479385375977, 1.9734554971967424, 1.973665714263916, 1.9742815835135323, 1.975809029170445, 1.980658667428153, 2.011617592402867], "val_accuracy": [0.07633333653211594, 0.10300000011920929, 0.07199999690055847, 0.1106666699051857, 0.10633333027362823, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [1, 4, 8, 4, 3, 8, 6, 1, 5, 9, 4, 1, 4, 1, 2, 6, 2, 4, 3, 5, 0, 5, 6, 3, 4, 2, 7, 7, 1, 6, 8, 7, 6, 7, 4, 7, 9, 1], [1, 2, 1, 1, 2, 2, 0, 2, 1, 2, 1, 2, 1, 3, 2, 1, 1, 0, 2, 2, 1, 0, 2, 2, 3, 1, 2, 3, 3], [97, 55, 80, 53, 26, 73, 46, 33, 24], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 1, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 3, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [42, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [3, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.037142857909202576, "mapping_values": [1, 13, 13, 7, 6, 0, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha))), tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.sqrt(tf.math.add(alpha, alpha)))), alpha)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), grad)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.302863969526995, 2.3017311508723886, 2.3030016421327, 2.3032331224193885, 2.3033590135384134, 2.3025341788145686], "accuracy": [0.09047681838274002, 0.08717474341392517, 0.08611807972192764, 0.08677849918603897, 0.08730682730674744, 0.09377889335155487], "val_loss": [1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [1, 2, 2, 8, 0, 5, 9, 2, 5, 9, 4, 1, 4, 1, 2, 6, 2, 4, 3, 5, 0, 5, 6, 3, 4, 2, 7, 7, 1, 6, 8, 7, 6, 7, 4, 7, 9, 1], [2, 2, 2, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1, 3, 2, 1, 1, 0, 2, 2, 1, 0, 2, 2, 3, 1, 2, 3, 3], [93, 6, 24, 53, 26, 73, 46, 33, 24], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [1, 9, 5, 1, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 3, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [42, 46, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [2, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.037142857909202576, "mapping_values": [1, 9, 9, 5, 4, 1, 3, 3, 1, 2, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(tf.math.add(alpha, grad), tf.math.add(grad, tf.math.add(alpha, tf.math.sqrt(grad)))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, grad), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.302863969526995, 2.3017311508723886, 2.3030016421327, 2.3032331224193885, 2.3033590135384134, 2.3025341788145686], "accuracy": [0.09047681838274002, 0.08717474341392517, 0.08611807972192764, 0.08677849918603897, 0.08730682730674744, 0.09377889335155487], "val_loss": [1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 4, 8, 2, 3, 8, 6, 2, 5, 1, 4, 1, 4, 1, 2, 6, 2, 4, 3, 5, 0, 5, 6, 3, 4, 2, 7, 7, 1, 6, 8, 7, 6, 7, 4, 7, 9, 1], [1, 2, 2, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1, 3, 2, 1, 1, 0, 2, 2, 1, 0, 2, 2, 3, 1, 2, 3, 3], [35, 48, 80, 53, 26, 73, 46, 33, 24], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 1, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 3, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [54, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 1], [2, 3], [2, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.037142857909202576, "mapping_values": [1, 17, 17, 10, 7, 2, 3, 3, 2, 1, 1, 5, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.pow(tf.math.add(alpha, tf.math.sqrt(alpha)), tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(alpha, grad), grad)), tf.math.add(alpha, tf.math.add(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), grad)))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.subtract(alpha, tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), sigma)), sigma)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.302863969526995, 2.3017311508723886, 2.3030016421327, 2.3032331224193885, 2.3033590135384134, 2.3025341788145686], "accuracy": [0.09047681838274002, 0.08717474341392517, 0.08611807972192764, 0.08677849918603897, 0.08730682730674744, 0.09377889335155487], "val_loss": [1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]