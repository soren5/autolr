[{"genotype": [[0], [1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [5, 3, 2, 4, 2, 1, 1, 1, 5, 3, 9, 3, 2, 6, 8, 4, 5, 6, 5, 5, 3, 9, 5, 3, 0, 2, 7, 2, 2, 0, 6, 0, 2, 3, 4, 5, 5, 5, 4, 0, 0, 1, 9, 3, 3, 8, 7, 7, 3, 9, 2, 2, 2, 3, 1, 3, 4, 7, 4, 2, 3, 2, 9, 1, 5, 8, 4, 8, 2, 6, 7, 9, 3], [1, 2, 2, 1, 0, 2, 0, 0, 1, 1, 2, 2, 1, 1, 1, 1, 1, 0, 2, 2, 0, 2, 2, 2, 3, 1, 2, 1, 1, 2, 2, 0, 3, 0, 3, 1, 2, 0, 0, 3, 1, 1, 1, 1, 2, 2, 3, 3, 0, 0, 0, 3, 2], [57, 30, 25, 45, 10, 73, 46, 33, 24, 64, 59], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1], [1, 2, 0, 3, 9, 4, 8], [5, 4, 3], [55], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.8379999995231628, "mapping_values": [1, 32, 32, 19, 13, 4, 3, 3, 2, 1, 1, 8, 6, 5, 1, 1, 2, 1, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.subtract(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.add(alpha, grad))), tf.math.multiply(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), alpha)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, alpha)), alpha)), tf.math.add(alpha, grad)))), grad)), alpha))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.math.multiply(sigma, sigma)))))), tf.math.add(sigma, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.8944196252617556, 1.0182796919256105, 0.756293219314543, 0.6648525478754533, 0.6006918336973214, 0.5634181624736768, 0.5242367147604204, 0.49707485136890045, 0.47162382950431336, 0.4571552963981759, 0.449946996672373, 0.4270986750369626, 0.4067859118562002, 0.39343407566694455, 0.38208844263036223, 0.3637326028108943, 0.3496020154166672, 0.3440404950690669, 0.3366742281078615, 0.3251016982054241, 0.3143522910564142, 0.3069441210340279, 0.29472980866059334, 0.2855295999064941, 0.28701878185238205, 0.2650596329981955, 0.26200509613389433, 0.25451968664411917, 0.2496032093643843, 0.24542610540547155], "accuracy": [0.3541143834590912, 0.6297714710235596, 0.7067758440971375, 0.7392682433128357, 0.767401933670044, 0.7807422876358032, 0.8053097128868103, 0.8074230551719666, 0.8203672170639038, 0.8249900937080383, 0.8329150676727295, 0.837537944316864, 0.850350022315979, 0.8511425256729126, 0.8599920868873596, 0.8617091774940491, 0.8687095642089844, 0.8676528930664062, 0.8693699836730957, 0.8775591254234314, 0.8813894987106323, 0.8848236799240112, 0.886672854423523, 0.8878615498542786, 0.8919561505317688, 0.8971073627471924, 0.9030511379241943, 0.8996169567108154, 0.9038436412811279, 0.9093911051750183], "val_loss": [0.8388525077274868, 0.6079261132649013, 0.5319431168692452, 0.4622687101364136, 0.442157370703561, 0.4054023878914969, 0.381255533014025, 0.3803636431694031, 0.3541862964630127, 0.358996433871133, 0.33886230843407766, 0.3441780550139291, 0.3315905673163278, 0.32252849851335796, 0.31615119321005686, 0.31372783865247456, 0.3084870662008013, 0.30561959743499756, 0.29567406858716694, 0.3045561909675598, 0.2999658925192697, 0.3075483185904367, 0.2926044889858791, 0.29803184952054707, 0.28544290576662334, 0.2887382337025234, 0.2903143678392683, 0.29097417422703337, 0.2840858357293265, 0.2771699343408857], "val_accuracy": [0.6456666588783264, 0.7206666469573975, 0.7576666474342346, 0.793666660785675, 0.7919999957084656, 0.8220000267028809, 0.840666651725769, 0.8379999995231628, 0.8523333072662354, 0.843999981880188, 0.8646666407585144, 0.8510000109672546, 0.8610000014305115, 0.8700000047683716, 0.8653333187103271, 0.8646666407585144, 0.8733333349227905, 0.875, 0.878333330154419, 0.8736666440963745, 0.8769999742507935, 0.8756666779518127, 0.8820000290870667, 0.8806666731834412, 0.890333354473114, 0.8856666684150696, 0.8833333253860474, 0.8820000290870667, 0.8863333463668823, 0.887666642665863]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 4, 1, 1, 4, 0, 1, 5, 3, 0, 3, 4, 3, 8, 9, 3, 4, 5, 5, 9, 2, 5, 3, 1, 2, 7, 2, 2, 2, 8, 4, 2, 3, 4, 8, 5, 5, 4, 0, 0, 1, 9, 3, 3, 8, 7, 7, 3, 9, 2, 2, 2, 3, 1, 3, 4, 7, 4, 2, 3, 2, 9, 1, 5, 8, 4, 8, 2, 6, 7, 9, 3], [2, 2, 0, 0, 0, 0, 2, 1, 1, 1, 1, 0, 2, 3, 1, 1, 1, 0, 2, 2, 2, 1, 0, 2, 3, 1, 2, 1, 3, 2, 2, 0, 2, 0, 3, 1, 2, 0, 0, 3, 1, 1, 1, 2, 2, 2, 3, 3, 0, 0, 0, 3, 2], [69, 77, 25, 29, 90, 73, 46, 33, 24, 64, 59, 34, 79], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1], [1, 2, 0, 3, 9, 4, 8], [5, 4, 3], [55], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.836571455001831, "mapping_values": [1, 32, 32, 19, 13, 6, 3, 3, 2, 1, 1, 6, 4, 3, 1, 0, 2, 1, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.math.pow(grad, tf.math.subtract(tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.negative(grad), tf.math.add(alpha, tf.math.subtract(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32), tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32))))), tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)))))))), tf.math.multiply(tf.math.pow(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, alpha))), tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))), tf.math.multiply(tf.math.pow(alpha, tf.math.add(alpha, alpha)), tf.math.square(tf.math.add(alpha, alpha)))))), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, grad))), tf.math.add(sigma, tf.math.negative(sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.894419906397915, 1.0180756523230954, 0.7571020148307765, 0.6640879934915163, 0.6028345513258785, 0.564303500730096, 0.5241255494684135, 0.49761495751916396, 0.4724173808354491, 0.45331497599246906, 0.44836073959539785, 0.4224311004634767, 0.4037152819503741, 0.39007163905527426, 0.3784140027540865, 0.3600500552937056, 0.3443280846695339, 0.3370234648258049, 0.3329847465023121, 0.3152280719902821, 0.31221618530001105, 0.3088768615643614, 0.29053439254443314, 0.2826346100289918], "accuracy": [0.3541143834590912, 0.6305639743804932, 0.7071720957756042, 0.7383436560630798, 0.7660810947418213, 0.7835160493850708, 0.8054417967796326, 0.8087438941001892, 0.8190463781356812, 0.8302733898162842, 0.832650899887085, 0.8413683772087097, 0.8475762605667114, 0.8473120927810669, 0.8577466607093811, 0.8652753829956055, 0.8696341514587402, 0.8725399374961853, 0.8728041052818298, 0.8813894987106323, 0.8825782537460327, 0.8828424215316772, 0.8899748921394348, 0.8920882344245911], "val_loss": [0.8388301645006452, 0.6096095357622419, 0.5344222443444389, 0.46205409935542513, 0.4469019515173776, 0.402621260711125, 0.38190276282174246, 0.37680998018809725, 0.35666721207754953, 0.3543743235724313, 0.3354851177760533, 0.34761424575533184, 0.33171763590403963, 0.3155896748815264, 0.3080307160105024, 0.31506701026644024, 0.3092270152909415, 0.30186842169080463, 0.2931394406727382, 0.29985906396593365, 0.30218335560389925, 0.30289522239140104, 0.29220053979328703, 0.29805893557412283], "val_accuracy": [0.6456666588783264, 0.7200000286102295, 0.7540000081062317, 0.7933333516120911, 0.7866666913032532, 0.8213333487510681, 0.8413333296775818, 0.8383333086967468, 0.8529999852180481, 0.843999981880188, 0.8703333139419556, 0.8493333458900452, 0.8606666922569275, 0.874666690826416, 0.8740000128746033, 0.8650000095367432, 0.871999979019165, 0.8733333349227905, 0.8816666603088379, 0.8756666779518127, 0.8776666522026062, 0.8736666440963745, 0.8796666860580444, 0.8803333044052124]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [5, 3, 4, 4, 2, 1, 1, 1, 5, 3, 6, 3, 2, 6, 8, 4, 3, 4, 5, 5, 3, 2, 5, 3, 1, 2, 7, 2, 2, 0, 6, 0, 2, 3, 4, 8, 5, 5, 4, 0, 0, 1, 9, 3, 3, 8, 7, 7, 3, 9, 2, 2, 2, 3, 1, 3, 4, 7, 4, 2, 3, 2, 9, 1, 5, 8, 4, 8, 2, 6, 7, 9, 3], [1, 2, 2, 1, 0, 2, 0, 0, 1, 1, 2, 2, 1, 1, 1, 1, 1, 0, 2, 2, 0, 2, 2, 2, 3, 1, 2, 1, 1, 2, 2, 0, 3, 0, 3, 1, 2, 0, 0, 3, 1, 1, 1, 1, 2, 2, 3, 3, 0, 0, 0, 3, 2], [57, 30, 25, 45, 10, 73, 46, 33, 24, 64, 59], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1], [1, 2, 0, 3, 9, 4, 8], [5, 4, 3], [55], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.8351428508758545, "mapping_values": [1, 68, 68, 39, 29, 5, 3, 3, 2, 1, 1, 6, 4, 3, 1, 0, 2, 1, 1, 0], "tree_depth": 50, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.pow(tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.subtract(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.add(alpha, grad))), tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.pow(tf.math.square(tf.math.square(tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))), alpha), tf.math.add(alpha, alpha))), grad))))))), grad)), alpha), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), grad))))))), tf.math.pow(tf.math.add(alpha, grad), grad)))), tf.math.sqrt(tf.math.add(alpha, tf.math.square(grad))))), tf.math.add(alpha, tf.math.square(alpha))))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), alpha)))), alpha))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, grad))), tf.math.add(sigma, tf.math.negative(sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.8944200119086072, 1.0181651829948923, 0.7559957085205595, 0.6645694822210756, 0.6021749692633325, 0.5634404951240314, 0.5227760558532387, 0.49833218191813455, 0.4722315917484607, 0.4575946483322658, 0.44863680331399336, 0.43045099978874607, 0.4117947434508301, 0.3909322864005374, 0.37749361300260603, 0.36323330248383134, 0.34948112949750615, 0.340302085422994, 0.33164937126795535, 0.31678856422148205, 0.31254324784226595, 0.30956027810017134, 0.29082303762183986, 0.2808249521001203, 0.28236897182093007, 0.2674165996641074, 0.26366937665922957, 0.2527529952678352, 0.2453800579949991, 0.2474816185435158, 0.23592364511131186, 0.22193022392539616, 0.21784558829464823, 0.2228246981288149, 0.210387607860984, 0.21585312034585896, 0.21068018505586183, 0.20777018668983496, 0.1903489678251808], "accuracy": [0.3541143834590912, 0.6305639743804932, 0.7069079279899597, 0.7396644949913025, 0.7671377658843994, 0.7815347909927368, 0.8058380484580994, 0.807158887386322, 0.8186501264572144, 0.8290846943855286, 0.8302733898162842, 0.8364813327789307, 0.8470479249954224, 0.8527275323867798, 0.8618412613868713, 0.8660678863525391, 0.8676528930664062, 0.8701624870300293, 0.8762382864952087, 0.8825782537460327, 0.8857482671737671, 0.8840311765670776, 0.8906353116035461, 0.891559898853302, 0.8914278149604797, 0.8976356983184814, 0.900409460067749, 0.9034473896026611, 0.9051644206047058, 0.9017302989959717, 0.9109761118888855, 0.9170519113540649, 0.9194294214248657, 0.9111081957817078, 0.917580246925354, 0.9178444147109985, 0.919561505317688, 0.9207502603530884, 0.927882730960846], "val_loss": [0.8388364825929914, 0.608082481792995, 0.5328543867383685, 0.4628148760114397, 0.44323303018297466, 0.40375166279929026, 0.3818907822881426, 0.3776433382715498, 0.3613917657307216, 0.3535523074013846, 0.3417641690799168, 0.34838866336005075, 0.33177742787769865, 0.31751708473478046, 0.31009747300829205, 0.31548322098595755, 0.31049290725163053, 0.30249897071293425, 0.29346773454121183, 0.2964328272002084, 0.29944381543568205, 0.3017215643610273, 0.2907482215336391, 0.29414879424231394, 0.2863213760512216, 0.29720650400434223, 0.2904977372714451, 0.2891624314444406, 0.2906819496835981, 0.2808713827814375, 0.280760611806597, 0.28790827308382305, 0.288341292313167, 0.2860430989946638, 0.29755496978759766, 0.29223782675606863, 0.29740482568740845, 0.29126947266714914, 0.29020616837910246], "val_accuracy": [0.6456666588783264, 0.7206666469573975, 0.7556666731834412, 0.7940000295639038, 0.7913333177566528, 0.8196666836738586, 0.843666672706604, 0.8379999995231628, 0.8496666550636292, 0.8496666550636292, 0.8663333058357239, 0.8510000109672546, 0.8606666922569275, 0.874666690826416, 0.8703333139419556, 0.8640000224113464, 0.8693333268165588, 0.8743333220481873, 0.8816666603088379, 0.8786666393280029, 0.8776666522026062, 0.8766666650772095, 0.8833333253860474, 0.8853333592414856, 0.8856666684150696, 0.8816666603088379, 0.8846666812896729, 0.8813333511352539, 0.8859999775886536, 0.8843333125114441, 0.8846666812896729, 0.8883333206176758, 0.8893333077430725, 0.8923333287239075, 0.8863333463668823, 0.8849999904632568, 0.8913333415985107, 0.890999972820282, 0.887666642665863]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [0, 3, 4, 4, 2, 1, 1, 1, 5, 3, 6, 3, 2, 6, 8, 4, 3, 4, 8, 5, 3, 2, 5, 1, 1, 2, 7, 2, 2, 0, 6, 2, 2, 3, 4, 8, 6, 5, 4, 0, 0, 1, 9, 3, 3, 8, 7, 7, 3, 9, 2, 2, 2, 3, 1, 3, 4, 7, 4, 2, 3, 2, 9, 1, 5, 8, 4, 8, 2, 6, 7, 9, 3, 6, 7, 5], [1, 2, 2, 1, 0, 2, 0, 0, 1, 1, 2, 2, 1, 1, 2, 1, 2, 0, 2, 2, 0, 2, 2, 2, 3, 2, 0, 2, 1, 2, 2, 0, 3, 0, 3, 1, 2, 0, 0, 3, 1, 1, 1, 1, 2, 2, 3, 3, 0, 0, 0, 3, 2], [85, 30, 25, 45, 47, 73, 46, 33, 24, 64, 59, 92, 28, 85, 2, 45, 40], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 1, 0, 0, 0, 0, 0, 1], [1, 2, 0, 3, 9, 4, 8], [5, 4, 3], [55], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.8345714211463928, "mapping_values": [1, 129, 129, 76, 53, 17, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 94, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.pow(tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.subtract(alpha, tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.multiply(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.pow(tf.math.add(alpha, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.sqrt(tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, alpha))), alpha)))))), grad))))), grad)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.add(alpha, tf.math.negative(alpha))), tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(grad))))))), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))))), tf.math.multiply(grad, tf.math.multiply(tf.math.sqrt(grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))), tf.math.add(tf.math.add(alpha, tf.math.multiply(grad, tf.math.subtract(tf.math.add(alpha, tf.math.multiply(grad, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))), tf.math.pow(grad, tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))))), tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)))))))), tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))))))), tf.math.add(alpha, alpha)))))))))))))), alpha), tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, alpha), grad), grad))))), tf.math.add(alpha, grad)))), grad), tf.math.add(alpha, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.add(tf.math.square(grad), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.8944194497779974, 1.0183361442081837, 0.7556082942403618, 0.6627916082210387, 0.6032413246766719, 0.5648202650566867, 0.5237119935877083, 0.49580933611626954, 0.47094766641526004, 0.45663882636705866, 0.4505634200831194, 0.4236958085380572, 0.41154113935441733, 0.3910408866222839, 0.3838064589591436, 0.3680692498182592, 0.351690284525005, 0.3435240704086494, 0.33799964576869074, 0.325698412660563, 0.31838400089399077, 0.31402936998989445, 0.2929249192430453, 0.28117207268194166, 0.28427471950494726, 0.2699005697318639, 0.2607854961947427, 0.25261815787621333, 0.2487195036796578, 0.2523471504871037, 0.23898880313006785, 0.22553049775241246, 0.223557124621187, 0.22384444217459243, 0.21469206029453045, 0.22260034652929958, 0.21853837422832695], "accuracy": [0.3541143834590912, 0.6306960582733154, 0.7065116763114929, 0.7397965788841248, 0.7656848430633545, 0.7823272943496704, 0.8049134612083435, 0.8074230551719666, 0.817461371421814, 0.8272355198860168, 0.8319904804229736, 0.8376700282096863, 0.8445383906364441, 0.8514066934585571, 0.8557654023170471, 0.8607845902442932, 0.8656716346740723, 0.8688416481018066, 0.8712190985679626, 0.8787478804588318, 0.8819178342819214, 0.8841632604598999, 0.8873332738876343, 0.8901069760322571, 0.8912957310676575, 0.8942015767097473, 0.9012019634246826, 0.9037115573883057, 0.9041078090667725, 0.9035794734954834, 0.9089948534965515, 0.9125610589981079, 0.9152027368545532, 0.9108440279960632, 0.9167877435684204, 0.9129573106765747, 0.9163914918899536], "val_loss": [0.8387413365500314, 0.6074405227388654, 0.5308421339307513, 0.4618351629802159, 0.4444878271647862, 0.4044925059591021, 0.38062672104154316, 0.379191517829895, 0.35810729435511995, 0.3601437636784145, 0.3338248133659363, 0.34952421699251446, 0.33206292561122347, 0.3199098450796945, 0.3131650005068098, 0.3133552925927298, 0.31257838010787964, 0.30787060941968647, 0.29031590053013395, 0.2992956723485674, 0.2960321477481297, 0.2989517194884164, 0.2940021753311157, 0.2898972715650286, 0.28570686067853657, 0.29606808934892925, 0.28360577140535626, 0.28125754424503874, 0.28357185636247906, 0.27606665236609323, 0.2808294892311096, 0.2855781487056187, 0.28614223854882376, 0.2812739440373012, 0.2893938251904079, 0.29003257410866873, 0.29280513525009155], "val_accuracy": [0.6443333625793457, 0.7203333377838135, 0.7573333382606506, 0.7933333516120911, 0.7883333563804626, 0.8233333230018616, 0.8420000076293945, 0.8353333473205566, 0.8510000109672546, 0.843666672706604, 0.8683333396911621, 0.8483333587646484, 0.8616666793823242, 0.8726666569709778, 0.8686666488647461, 0.8643333315849304, 0.8676666617393494, 0.8723333477973938, 0.8816666603088379, 0.875333309173584, 0.8773333430290222, 0.874666690826416, 0.8809999823570251, 0.8843333125114441, 0.8883333206176758, 0.8826666474342346, 0.8846666812896729, 0.8830000162124634, 0.8849999904632568, 0.8920000195503235, 0.8866666555404663, 0.8939999938011169, 0.8926666378974915, 0.890999972820282, 0.8899999856948853, 0.8899999856948853, 0.8856666684150696]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [9, 3, 4, 4, 2, 2, 4, 1, 5, 0, 0, 3, 9, 6, 6, 2, 3, 5, 5, 5, 9, 2, 5, 3, 1, 2, 7, 2, 2, 2, 8, 4, 2, 3, 4, 8, 5, 5, 4, 0, 0, 1, 9, 3, 3, 8, 7, 7, 3, 9, 2, 2, 2, 3, 1, 3, 4, 7, 4, 2, 3, 2, 9, 1, 5, 8, 4, 8, 2, 6, 7, 9, 3], [1, 2, 2, 1, 0, 2, 0, 0, 1, 1, 2, 2, 1, 1, 1, 1, 1, 0, 2, 2, 0, 2, 2, 2, 3, 1, 2, 1, 1, 2, 2, 0, 3, 0, 3, 1, 2, 0, 0, 3, 1, 1, 1, 1, 2, 2, 3, 3, 0, 0, 0, 3, 2], [57, 96, 25, 45, 10, 73, 46, 33, 24, 64, 59], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 6, 0, 3, 9, 4, 8], [5, 4, 3], [44], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.8339999914169312, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 2, 1, 1, 5, 2, 2, 0, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.8944191463776803, 1.0181214418928968, 0.7565360748064028, 0.6658539432481674, 0.6021866247071692, 0.5628487961466412, 0.5231816528330326, 0.4994478523691868, 0.46946604583147195, 0.45554283106993093, 0.4459129603366338, 0.4227685244359581, 0.4047325420940179, 0.3923831336360645, 0.3841227269356891, 0.3602961176311839, 0.34479880517562933, 0.33986767669080536, 0.3326705925736398, 0.32008550816113845, 0.3224327919064669, 0.3073826182071228, 0.29864007981304386, 0.2861959008398372, 0.2847767647908364, 0.26802563894426407, 0.2651189561564736, 0.2565146833756628, 0.25073829839423567, 0.2531877270015381, 0.23686429491337216, 0.22687737542750608, 0.2222217815293297, 0.2233477419692732, 0.21610950992217925, 0.220114885932104, 0.20860217341995982, 0.20579735469454394, 0.19047846314559413, 0.1977027981524706, 0.19351999605328668, 0.18311722277059783, 0.17141652196397744, 0.1754793735653292], "accuracy": [0.3541143834590912, 0.6308281421661377, 0.7080966830253601, 0.7392682433128357, 0.7683265209197998, 0.7835160493850708, 0.8068947196006775, 0.8090080618858337, 0.8215559124946594, 0.8278959393501282, 0.8313300609588623, 0.8387266993522644, 0.8481045961380005, 0.8491612672805786, 0.8551049828529358, 0.8673887252807617, 0.8721436858177185, 0.8720116019248962, 0.872407853603363, 0.8779553771018982, 0.8798044919967651, 0.8838990926742554, 0.8857482671737671, 0.8879936337471008, 0.8918240666389465, 0.8989565372467041, 0.9010698795318604, 0.9030511379241943, 0.9050323367118835, 0.9063531756401062, 0.9083344340324402, 0.9153348207473755, 0.9145423173904419, 0.9121648669242859, 0.9177123308181763, 0.9166556596755981, 0.9216747879981995, 0.9192973375320435, 0.927882730960846, 0.9194294214248657, 0.930260181427002, 0.9295997619628906, 0.9331660270690918, 0.9359397888183594], "val_loss": [0.8388012988226754, 0.6091694150652204, 0.5327230521610805, 0.46430839811052593, 0.44242399079459055, 0.4052485568182809, 0.37989834376743864, 0.37930794273103985, 0.3582743746893747, 0.3539162278175354, 0.33388952698026386, 0.34295659405844553, 0.3343290260859898, 0.3205580881663731, 0.3107169696262905, 0.3151093976838248, 0.313642612525395, 0.2967433844293867, 0.2928731441497803, 0.29816322667258127, 0.3004818984440395, 0.30994713306427, 0.2962442466190883, 0.2983037999698094, 0.2877410054206848, 0.293898948601314, 0.29133041415895733, 0.29122285331998554, 0.29389579807009014, 0.2813852088791983, 0.28748702151434763, 0.28823067460741314, 0.28999708380017963, 0.2906143580164228, 0.2957284450531006, 0.2854728783879961, 0.30309795481818064, 0.2963194080761501, 0.29374265670776367, 0.30039828164236887, 0.30290612152644564, 0.30193884883608135, 0.3178841471672058, 0.30251703943525043], "val_accuracy": [0.6456666588783264, 0.7203333377838135, 0.7559999823570251, 0.7913333177566528, 0.7913333177566528, 0.8216666579246521, 0.8426666855812073, 0.8343333601951599, 0.8586666584014893, 0.8503333330154419, 0.8700000047683716, 0.8543333411216736, 0.8583333492279053, 0.871999979019165, 0.8730000257492065, 0.8650000095367432, 0.8659999966621399, 0.8766666650772095, 0.8816666603088379, 0.8773333430290222, 0.875333309173584, 0.875333309173584, 0.8826666474342346, 0.8756666779518127, 0.8859999775886536, 0.8823333382606506, 0.8849999904632568, 0.8836666941642761, 0.8870000243186951, 0.887666642665863, 0.8836666941642761, 0.8859999775886536, 0.8870000243186951, 0.887333333492279, 0.8889999985694885, 0.8870000243186951, 0.8866666555404663, 0.8866666555404663, 0.8899999856948853, 0.8886666893959045, 0.8859999775886536, 0.8849999904632568, 0.8836666941642761, 0.887666642665863]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 4, 5, 2, 6, 1, 6, 6, 4, 9, 3, 4, 6, 1, 9, 3, 5, 5, 5, 9, 2, 5, 3, 1, 2, 7, 2, 2, 2, 8, 4, 2, 3, 4, 8, 9, 5, 4, 0, 0, 1, 9, 3, 9, 8, 7, 7, 3, 9, 2, 2, 2, 3, 1, 3, 4, 7, 4, 2, 0, 2, 9, 1, 5, 8, 4, 8, 2, 6, 7, 9, 3], [1, 2, 2, 2, 2, 2, 1, 0, 1, 1, 0, 2, 1, 1, 1, 1, 1, 0, 2, 2, 0, 2, 2, 2, 3, 1, 2, 1, 1, 2, 2, 0, 3, 0, 3, 1, 2, 0, 0, 3, 1, 1, 1, 1, 2, 2, 3, 3, 0, 0, 0, 3, 2], [93, 77, 25, 29, 90, 73, 46, 33, 24, 64, 59, 34, 79], [1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 1, 0, 0, 0, 0, 0, 1], [1, 5, 0, 3, 9, 4, 8], [5, 4, 3], [44], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.833142876625061, "mapping_values": [1, 32, 32, 19, 13, 4, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.subtract(tf.math.divide_no_nan(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.pow(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), grad)), tf.math.multiply(tf.math.add(alpha, grad), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.square(tf.math.square(tf.math.add(alpha, alpha))), alpha))))))), tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), grad)), alpha)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.8945213556604583, 1.0115071166114344, 0.7588213879623433, 0.6647153410141919, 0.6040296268548161, 0.5645764756353855, 0.5327762214577886, 0.505203801784785, 0.47316337758760096, 0.45675262517901366, 0.45519553898599846, 0.43176746382185527, 0.41370551463887206, 0.3931065651175683, 0.3864080920321452, 0.36751444401789524, 0.3564337618110706, 0.35431853388247314, 0.33805497479775737, 0.32351977384132935, 0.31976071205578144, 0.3204061331065292, 0.3024612671789508, 0.2846488015699884], "accuracy": [0.3533218801021576, 0.6367719173431396, 0.7065116763114929, 0.7382115721702576, 0.7683265209197998, 0.7810064554214478, 0.8010830879211426, 0.8016114234924316, 0.819970965385437, 0.8238013386726379, 0.8293488025665283, 0.8364813327789307, 0.8441421389579773, 0.8504821062088013, 0.8582749962806702, 0.8644828796386719, 0.8654074668884277, 0.8650112152099609, 0.8720116019248962, 0.878351628780365, 0.8817857503890991, 0.8758420348167419, 0.8857482671737671, 0.891559898853302], "val_loss": [0.8406145913260323, 0.6076617581503732, 0.5345496450151715, 0.4632091351917812, 0.4432856185095651, 0.4104532940047128, 0.38422428710120066, 0.380665055343083, 0.36029393332345144, 0.3625003184591021, 0.3439153603145054, 0.3529813289642334, 0.33517938000815256, 0.3178997210093907, 0.3088476317269461, 0.32020589283534456, 0.31280349833624704, 0.3059436423437936, 0.2894626940999712, 0.29551197801317486, 0.3028595617839268, 0.30682376452854704, 0.29419153928756714, 0.29464198861803326], "val_accuracy": [0.6463333368301392, 0.718666672706604, 0.753333330154419, 0.7883333563804626, 0.793666660785675, 0.8173333406448364, 0.8399999737739563, 0.8383333086967468, 0.856333315372467, 0.8420000076293945, 0.859000027179718, 0.8503333330154419, 0.859333336353302, 0.874666690826416, 0.8723333477973938, 0.862333357334137, 0.8696666955947876, 0.8723333477973938, 0.8823333382606506, 0.8793333172798157, 0.871666669845581, 0.8763333559036255, 0.8803333044052124, 0.8773333430290222]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 8, 5, 6, 6, 3, 6, 5, 4, 9, 3, 4, 6, 8, 4, 3, 5, 5, 5, 9, 2, 5, 3, 1, 2, 7, 2, 2, 2, 8, 4, 2, 3, 4, 8, 9, 5, 4, 0, 0, 1, 9, 3, 9, 8, 7, 7, 3, 9, 2, 2, 2, 3, 1, 3, 4, 7, 4, 2, 0, 2, 9, 1, 5, 8, 4, 8, 2, 6, 7, 9, 3], [2, 2, 1, 0, 0, 2, 1, 1, 0, 0, 1, 2, 2, 3, 1, 1, 1, 0, 2, 2, 2, 1, 0, 2, 2, 1, 2, 1, 3, 2, 2, 0, 2, 0, 3, 1, 2, 0, 0, 3, 1, 1, 1, 2, 2, 2, 3, 3, 0, 0, 0, 3, 2], [93, 77, 25, 29, 90, 73, 46, 33, 24, 64, 59, 34, 79], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [46, 95, 54, 66], [1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 1, 0, 0, 0, 0, 0, 1], [1, 5, 0, 3, 9, 4, 8], [5, 4, 3], [44], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.7837142944335938, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 2, 1, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.0596612264073646, 1.6850747975376004, 1.2743980711036433, 1.1515573152005003, 0.97251964136594, 0.896953496021633, 0.8712022390347965, 0.7610163582062536, 0.7292929187489854, 0.700803884118697, 0.6915625187667637, 0.6684689646966391, 0.6540368910888246, 0.6205602628349266, 0.610224054363882, 0.5990911875308355, 0.5934236053982116, 0.5623083569275752, 0.5556682046488559, 0.542473458862733, 0.5439023728446875, 0.5428405878109592, 0.5385110866927421], "accuracy": [0.3090741038322449, 0.4245145916938782, 0.5188218355178833, 0.601109504699707, 0.6547351479530334, 0.6671509742736816, 0.6584334969520569, 0.6975300312042236, 0.7148329019546509, 0.724210798740387, 0.737022876739502, 0.7374191284179688, 0.7446836829185486, 0.7481178045272827, 0.7568352818489075, 0.763439416885376, 0.7663452625274658, 0.7821952104568481, 0.7808743715286255, 0.7886672616004944, 0.7926297783851624, 0.7898560166358948, 0.7943468689918518], "val_loss": [1.865347044808524, 1.0926281384059362, 1.059173583984375, 0.7394545759473529, 0.7475277696337018, 0.7373890706471035, 0.6165961878640311, 0.5876453604016986, 0.5615420852388654, 0.5329448665891375, 0.5591040679386684, 0.5767237799508231, 0.49313982895442415, 0.44510505880628315, 0.4517351048333304, 0.47067928314208984, 0.4729797840118408, 0.4267920255661011, 0.43848276138305664, 0.4278373292514256, 0.4404898371015276, 0.47380164691380094, 0.42082550695964266], "val_accuracy": [0.41733333468437195, 0.47866666316986084, 0.512666642665863, 0.6880000233650208, 0.6676666736602783, 0.6596666574478149, 0.7093333601951599, 0.7326666712760925, 0.7450000047683716, 0.7509999871253967, 0.734666645526886, 0.7260000109672546, 0.7666666507720947, 0.8050000071525574, 0.7956666946411133, 0.7739999890327454, 0.7720000147819519, 0.8106666803359985, 0.7896666526794434, 0.8026666641235352, 0.8046666383743286, 0.7833333611488342, 0.8073333501815796]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 4, 5, 2, 6, 1, 0, 5, 9, 9, 3, 4, 6, 2, 4, 1, 5, 5, 5, 9, 2, 5, 3, 1, 2, 7, 2, 2, 2, 8, 4, 2, 3, 4, 8, 9, 5, 4, 0, 0, 1, 9, 3, 9, 8, 7, 7, 3, 9, 2, 2, 2, 3, 1, 3, 4, 7, 4, 2, 0, 2, 9, 1, 5, 8, 4, 8, 2, 6, 7, 9, 3], [1, 2, 0, 1, 0, 2, 0, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 3, 1, 2, 1, 3, 2, 2, 0, 3, 0, 3, 1, 2, 0, 0, 3, 1, 1, 1, 1, 2, 2, 3, 3, 0, 0, 0, 3, 2], [57, 96, 25, 45, 10, 73, 46, 33, 24, 64, 59], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 1, 0, 0, 0, 0, 0, 1], [1, 9, 0, 3, 9, 4, 8], [5, 4, 3], [55], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.36657142639160156, "mapping_values": [1, 16, 16, 11, 5, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.pow(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))))))), tf.math.negative(tf.math.add(alpha, tf.math.square(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.4205688992511516, 2.3589090171696063, 2.3042442725555317, 2.3023765159871963, 2.2747117235140637, 2.237226070209564, 2.318033583238849, 2.294452118253223, 2.277448641735848, 2.3001944597418347, 2.2317834243703873], "accuracy": [0.23616431653499603, 0.11279883980751038, 0.09602430462837219, 0.1002509593963623, 0.13049794733524323, 0.15876370668411255, 0.12970545887947083, 0.12389380484819412, 0.11557257920503616, 0.108440101146698, 0.18359529972076416], "val_loss": [2.1571896416800365, 1.973947252546038, 1.973494529724121, 1.9711027826581682, 1.6445040702819824, 1.6456855705806188, 1.9728877885001046, 1.9168784958975655, 1.973621095929827, 1.9613054139273507, 1.7157525335039412], "val_accuracy": [0.10333333164453506, 0.10066666454076767, 0.09733333438634872, 0.11900000274181366, 0.4243333339691162, 0.43933331966400146, 0.13899999856948853, 0.10166666656732559, 0.10733333230018616, 0.15066666901111603, 0.3356666564941406]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [4, 3, 4, 4, 2, 2, 4, 1, 5, 0, 0, 3, 9, 6, 6, 2, 3, 5, 5, 5, 9, 2, 5, 3, 1, 2, 7, 2, 2, 2, 8, 4, 2, 3, 4, 8, 5, 5, 4, 0, 0, 1, 9, 3, 3, 8, 7, 7, 3, 9, 2, 2, 2, 3, 1, 3, 4, 7, 4, 2, 3, 2, 9, 1, 5, 8, 4, 8, 2, 6, 7, 9, 3], [1, 2, 2, 2, 0, 2, 0, 0, 1, 1, 2, 2, 1, 1, 1, 1, 1, 0, 1, 1, 0, 2, 2, 2, 0, 1, 2, 1, 1, 2, 2, 0, 3, 0, 3, 1, 2, 0, 0, 3, 1, 1, 1, 1, 2, 2, 3, 3, 0, 0, 0, 3, 2], [57, 96, 25, 45, 10, 73, 46, 33, 24, 64, 59], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [11, 95, 54, 66], [1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 1, 0, 0, 0, 0, 0, 1], [1, 9, 0, 3, 9, 4, 8], [5, 4, 3], [90], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.1397142857313156, "mapping_values": [1, 22, 22, 13, 9, 4, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.subtract(tf.math.square(tf.math.add(alpha, grad)), tf.math.add(alpha, grad)), grad), tf.math.negative(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))), tf.math.multiply(tf.math.add(alpha, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [4.480784658144305, 2.423103608160506, 9.156865642275777, 2.4013297609791007, 2.6183242601662453, 10333.098613889415, 1.3621252427310218e+32, 2.876544508526527, 2.78535947064682, 2.780234705801921, 3.005887391308689], "accuracy": [0.1802932173013687, 0.11808215826749802, 0.11662924289703369, 0.1010434553027153, 0.09893012791872025, 0.10408136248588562, 0.10460969805717468, 0.10077928751707077, 0.09325055778026581, 0.09668471664190292, 0.09932637959718704], "val_loss": [2.08899348122733, 1.981560434613909, 2.047893524169922, 2.067256041935512, 2.066892692020961, 1434235511954.2856, 2.481649330684117, 2.3970974513462613, 2.234963689531599, 2.449652671813965, 2.4006919860839844], "val_accuracy": [0.10300000011920929, 0.1106666699051857, 0.10066666454076767, 0.09799999743700027, 0.09666666388511658, 0.13099999725818634, 0.09733333438634872, 0.0963333323597908, 0.10100000351667404, 0.09666666388511658, 0.10300000011920929]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 0, 4, 8, 1, 2, 1, 8, 6, 4, 3, 4, 4, 1, 4, 3, 9, 5, 5, 9, 2, 5, 3, 1, 2, 7, 2, 2, 2, 8, 4, 2, 3, 4, 8, 5, 5, 4, 0, 0, 1, 9, 3, 3, 8, 7, 7, 3, 9, 2, 2, 2, 3, 1, 3, 4, 7, 4, 2, 3, 2, 9, 1, 5, 8, 4, 8, 2, 6, 7, 9, 3], [2, 2, 1, 2, 1, 1, 2, 1, 0, 0, 1, 2, 2, 3, 1, 1, 1, 0, 2, 2, 2, 1, 0, 2, 2, 1, 2, 1, 3, 2, 2, 0, 2, 0, 3, 1, 2, 0, 0, 3, 1, 1, 1, 2, 2, 2, 3, 3, 0, 0, 0, 3, 2], [57, 96, 25, 45, 10, 73, 46, 33, 24, 64, 59], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [6, 1, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [11, 95, 54, 66], [0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1], [1, 9, 0, 3, 9, 4, 8], [5, 4, 3], [77], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.11828571557998657, "mapping_values": [1, 22, 22, 12, 10, 2, 1, 1, 0, 1, 0, 3, 2, 2, 0, 1, 2, 1, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.subtract(tf.math.add(alpha, grad), grad))), alpha))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(alpha, tf.math.sqrt(tf.math.add(alpha, alpha)))))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [4.477542217239775, 2.4335678717432208, 2.455647615724472, 2.3705858242998286, 2.5290393003965836, 2.3711714734175833, 2.328726255347338, 2.2969963771949558, 2.349492207557266, 2.3517660711104797, 2.3564981342605895, 2.35530297212345], "accuracy": [0.18016114830970764, 0.11742173880338669, 0.10051512718200684, 0.10394927859306335, 0.10566636174917221, 0.1006472036242485, 0.1270637959241867, 0.1274600476026535, 0.0940430611371994, 0.1006472036242485, 0.1002509593963623, 0.10130762308835983], "val_loss": [2.08805581501552, 2.0058087621416365, 1.9936151504516602, 2.0579697063991, 2.04904910496303, 1.9866511481148856, 1.8850077901567732, 1.9540299006870814, 2.008173261369978, 2.0088541167122975, 2.022122928074428, 2.0302641732352122], "val_accuracy": [0.10300000011920929, 0.10300000011920929, 0.10066666454076767, 0.09733333438634872, 0.10433333367109299, 0.10333333164453506, 0.15966667234897614, 0.10366666316986084, 0.09733333438634872, 0.09666666388511658, 0.10366666316986084, 0.09666666388511658]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [1, 3, 4, 4, 2, 2, 4, 1, 5, 0, 0, 3, 9, 6, 6, 2, 3, 5, 5, 5, 9, 2, 5, 3, 1, 2, 7, 2, 2, 2, 8, 4, 2, 3, 4, 8, 5, 5, 4, 0, 0, 1, 9, 3, 3, 8, 7, 7, 3, 9, 2, 2, 2, 3, 1, 3, 4, 7, 4, 2, 3, 2, 9, 1, 5, 8, 4, 8, 2, 6, 7, 9, 3], [2, 2, 1, 2, 1, 1, 2, 1, 1, 0, 1, 2, 2, 3, 1, 1, 1, 0, 2, 2, 2, 1, 0, 2, 2, 1, 2, 1, 3, 2, 2, 0, 2, 0, 3, 1, 2, 0, 0, 3, 1, 1, 1, 2, 2, 2, 3, 3, 0, 0, 0, 3, 2], [57, 93, 25, 45, 10, 73, 46, 33, 24, 64, 59], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [11, 95, 54, 66], [1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1], [1, 2, 0, 3, 9, 4, 8], [5, 4, 3], [77], [1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 22, 22, 13, 9, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(tf.math.pow(grad, grad), tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.square(grad)))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))))), tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, alpha))), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07938185334205627, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [5, 3, 4, 2, 2, 4, 1, 6, 5, 3, 6, 8, 2, 6, 8, 4, 3, 4, 5, 8, 3, 2, 5, 2, 1, 2, 7, 0, 2, 0, 6, 0, 2, 3, 4, 8, 5, 6, 4, 0, 0, 1, 9, 3, 3, 8, 7, 7, 3, 9, 2, 2, 2, 3, 1, 3, 4, 7, 4, 2, 3, 2, 9, 1, 5, 8, 4, 8, 2, 6, 7, 9, 3], [1, 2, 1, 1, 0, 2, 0, 0, 2, 1, 2, 2, 1, 1, 1, 1, 1, 0, 2, 2, 0, 2, 2, 2, 3, 1, 2, 1, 1, 2, 2, 0, 3, 0, 3, 1, 2, 0, 0, 3, 1, 1, 1, 1, 2, 2, 3, 3, 0, 0, 0, 3, 2], [57, 30, 25, 45, 10, 73, 46, 33, 24, 64, 59], [1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [0, 5, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [52, 95, 54, 66], [0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 2, 5, 3, 9, 4, 8], [5, 4, 3], [55], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 3, 3, 2, 1, 0, 6, 3, 3, 0, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.add(sigma, sigma)), tf.math.add(sigma, tf.math.square(sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.31655497945232, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08387266844511032, 0.09628847241401672, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.4244980130876814, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.08233333379030228, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [5, 3, 0, 4, 2, 1, 1, 1, 5, 3, 6, 3, 2, 6, 8, 4, 3, 4, 0, 9, 3, 2, 5, 3, 1, 2, 7, 3, 4, 4, 6, 0, 2, 0, 4, 2, 5, 5, 4, 0, 0, 1, 9, 3, 3, 8, 7, 7, 3, 9, 2, 2, 2, 3, 1, 3, 4, 7, 4, 2, 3, 2, 9, 1, 5, 8, 4, 8, 2, 6, 7, 9, 3], [1, 2, 2, 1, 0, 1, 0, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 0, 2, 0, 0, 1, 2, 2, 0, 1, 2, 0, 1, 2, 2, 0, 3, 0, 3, 1, 2, 0, 0, 3, 1, 1, 1, 1, 2, 2, 3, 3, 0, 0, 0, 3, 2], [57, 30, 25, 45, 10, 73, 46, 33, 24, 64, 59], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [4, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 2, 0, 3, 9, 4, 8], [5, 4, 3], [55], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [9, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 18, 10, 8, 2, 3, 3, 2, 1, 1, 3, 1, 1, 0, 0, 1, 1, 0, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.subtract(alpha, grad)), tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))), tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), alpha)))), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))))), alpha))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3022411979342245, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [5, 3, 4, 4, 2, 1, 1, 1, 5, 8, 6, 3, 2, 2, 4, 4, 3, 4, 5, 6, 3, 2, 5, 3, 1, 2, 7, 2, 2, 0, 6, 0, 2, 3, 4, 8, 5, 5, 4, 0, 0, 1, 9, 3, 3, 8, 7, 7, 3, 9, 2, 2, 2, 3, 1, 3, 4, 7, 4, 2, 3, 2, 9, 1, 5, 8, 4, 8, 2, 6, 7, 9, 3], [1, 2, 2, 2, 0, 2, 0, 0, 1, 1, 2, 2, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 3, 1, 2, 1, 1, 2, 2, 0, 3, 0, 3, 1, 2, 0, 0, 3, 1, 1, 1, 1, 2, 2, 3, 3, 0, 0, 0, 3, 2], [57, 30, 25, 45, 10, 73, 46, 33, 24, 64, 59], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1], [1, 9, 0, 3, 9, 4, 8], [5, 4, 3], [77], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [9, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 34, 34, 18, 16, 3, 3, 3, 1, 2, 0, 3, 2, 2, 0, 1, 1, 1, 0, 1], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.pow(tf.math.pow(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.subtract(grad, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, tf.math.add(grad, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.pow(tf.math.pow(tf.math.multiply(alpha, tf.math.pow(tf.math.add(alpha, alpha), grad)), tf.math.add(alpha, grad)), alpha)))))))), alpha)), alpha), tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: tf.math.multiply(grad, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3022411979342245, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 4, 5, 2, 6, 1, 6, 5, 4, 9, 3, 4, 6, 8, 4, 3, 5, 5, 5, 9, 2, 5, 3, 1, 2, 7, 2, 2, 2, 8, 4, 2, 3, 4, 8, 9, 5, 4, 0, 0, 1, 9, 3, 9, 8, 7, 7, 3, 9, 2, 2, 2, 3, 1, 3, 4, 7, 4, 2, 0, 2, 9, 1, 5, 8, 4, 8, 2, 6, 7, 9, 3], [2, 2, 1, 0, 0, 2, 0, 1, 1, 0, 1, 2, 2, 3, 1, 1, 1, 0, 2, 2, 2, 1, 0, 2, 2, 1, 2, 1, 3, 2, 2, 0, 2, 0, 3, 1, 2, 0, 0, 3, 1, 1, 1, 2, 2, 2, 3, 3, 0, 0, 0, 3, 2], [69, 77, 25, 29, 90, 73, 46, 33, 24, 64, 59, 34, 79], [1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1], [1, 5, 9, 2, 9, 4, 8], [5, 4, 3], [44], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [9, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 11, 8, 4, 3, 3, 2, 1, 1, 4, 3, 2, 1, 0, 1, 1, 0, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(grad, grad)), alpha), tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.square(sigma)), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3022411979342245, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [1, 3, 4, 4, 4, 8, 0, 1, 5, 6, 0, 3, 4, 6, 8, 4, 9, 5, 5, 5, 9, 2, 5, 3, 1, 2, 7, 2, 2, 2, 8, 4, 2, 3, 4, 8, 5, 5, 4, 0, 0, 1, 9, 3, 3, 8, 7, 7, 3, 9, 2, 2, 2, 3, 1, 3, 4, 7, 4, 2, 3, 2, 9, 1, 5, 8, 4, 8, 2, 6, 7, 9, 3], [2, 2, 2, 2, 2, 1, 1, 1, 1, 0, 1, 2, 2, 3, 1, 1, 1, 0, 2, 2, 2, 1, 0, 2, 2, 1, 2, 1, 3, 2, 2, 0, 2, 0, 3, 1, 2, 0, 0, 3, 1, 1, 1, 2, 2, 2, 3, 3, 0, 0, 0, 3, 2], [80, 15, 60, 29, 90, 73, 46, 33, 24, 64, 59, 34, 79], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1], [2, 6, 0, 3, 5, 9, 8], [4, 4, 3], [55], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [8, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 21, 21, 12, 9, 0, 1, 1, 0, 1, 0, 5, 3, 2, 1, 0, 2, 1, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.pow(tf.math.pow(tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, grad)), tf.math.add(alpha, grad))))))), grad), tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))))), tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha)))))), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 4, 4, 5, 2, 2, 1, 3, 5, 6, 9, 1, 5, 6, 6, 4, 5, 5, 5, 5, 9, 2, 5, 3, 1, 2, 7, 2, 2, 2, 8, 4, 2, 3, 4, 8, 9, 5, 4, 0, 0, 1, 9, 3, 9, 8, 7, 7, 3, 9, 2, 2, 2, 3, 1, 3, 4, 7, 4, 2, 0, 2, 9, 1, 5, 8, 4, 8, 2, 6, 7, 9, 3], [1, 2, 0, 1, 0, 2, 1, 1, 2, 1, 2, 2, 2, 2, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 3, 1, 2, 1, 3, 2, 2, 0, 3, 0, 3, 1, 2, 0, 0, 3, 1, 1, 1, 1, 2, 2, 3, 3, 0, 0, 0, 3, 2], [57, 96, 25, 45, 10, 73, 46, 33, 24, 64, 59], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1], [1, 9, 0, 3, 9, 4, 8], [5, 4, 3], [55], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.09057142585515976, "mapping_values": [1, 32, 32, 21, 11, 4, 1, 1, 0, 1, 0, 3, 3, 2, 1, 1, 2, 1, 1, 0], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.pow(tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.multiply(tf.math.add(alpha, alpha), tf.math.square(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.square(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))))))))), alpha)), alpha))))))))), grad), alpha), grad)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [4.478541421380104, 2.4637415756434184, 2.4559419574266443, 2.3284194359863126, 2.409069185007549, 2.371445407956866, 2.3767948041360896, 2.373809942653103, 2.390623294697808], "accuracy": [0.1806894689798355, 0.11055342853069305, 0.10949676483869553, 0.15889579057693481, 0.13247919082641602, 0.09576013684272766, 0.09668471664190292, 0.09813763201236725, 0.10276053100824356], "val_loss": [2.0884803363255093, 1.9881096567426408, 1.991133144923619, 1.9761560303824288, 2.0045773642403737, 2.0628818103245328, 2.044019494737898, 2.0179190635681152, 2.0301744597298756], "val_accuracy": [0.10300000011920929, 0.1133333370089531, 0.12800000607967377, 0.13766667246818542, 0.09666666388511658, 0.10066666454076767, 0.10100000351667404, 0.10066666454076767, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 5, 4, 8, 1, 2, 1, 3, 6, 4, 3, 4, 4, 1, 4, 3, 5, 4, 5, 9, 2, 5, 3, 1, 2, 7, 9, 2, 2, 8, 4, 2, 3, 4, 8, 5, 5, 4, 0, 0, 1, 9, 3, 3, 8, 7, 7, 3, 9, 2, 2, 2, 3, 1, 3, 4, 7, 4, 2, 3, 2, 9, 1, 5, 8, 4, 8, 2, 6, 7, 9, 3], [1, 0, 2, 1, 2, 2, 1, 0, 1, 1, 2, 2, 1, 1, 1, 1, 1, 0, 2, 2, 0, 2, 2, 2, 3, 2, 2, 1, 1, 2, 2, 0, 3, 0, 3, 1, 2, 0, 0, 3, 1, 1, 1, 1, 2, 2, 3, 3, 0, 0, 0, 3, 2], [57, 93, 25, 45, 10, 73, 46, 33, 24, 64, 59], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1], [1, 2, 0, 3, 9, 4, 8], [4, 4, 3], [77], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.0674285739660263, "mapping_values": [1, 67, 67, 40, 27, 6, 4, 4, 3, 1, 1, 5, 3, 2, 1, 0, 2, 1, 1, 0], "tree_depth": 61, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.pow(tf.math.square(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)))), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))))), alpha))))), alpha)), grad), grad)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(alpha, tf.math.sqrt(tf.math.pow(tf.math.add(alpha, tf.math.add(alpha, alpha)), tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))))))))))), grad)), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), grad))))), tf.math.square(tf.math.square(grad))))), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))))), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.add(sigma, sigma)), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3027096232088127, 2.302035894470759, 2.303480738992657, 2.3019739875483585, 2.3018010103502577, 2.3013565945288352, 2.3015207798095854, 2.3017511972740516, 2.3013948752123996, 2.300879985901028, 2.3012138582286803, 2.3003793777082384, 2.3029217663662798, 2.300592892111064, 2.3005064175255217, 2.3008117178222993, 2.301980019812382, 2.3004400579605937, 2.300743457836765, 2.300793657339386, 2.2999695818012635, 2.3010233677042913, 2.300171838413219, 2.300286018711433, 2.3005603626026, 2.300169008125514, 2.3001407254657034, 2.2996208646026317, 2.3009848644421353, 2.300328041473951, 2.300320247129411, 2.3006810268721543, 2.30101176675568, 2.3008704768069874, 2.3001900531391914, 2.300235036247363, 2.3004613944867254, 2.299939767480794, 2.3002408871860425, 2.3000582605068947, 2.299132227378042, 2.2988417684882307, 2.299246961603453, 2.300899648458541, 2.2982472584562816, 2.2989437070898706, 2.2995757824551744, 2.30010870992232, 2.299789399014897, 2.299408695654012, 2.2995136040171236, 2.3001834015411045, 2.2991600845310716, 2.3001854820589047, 2.29966925532354, 2.300147296226319, 2.2990119602733428, 2.298736089193243, 2.3001729115959897, 2.3001802369761286, 2.2991288292755967, 2.2989572892650685, 2.2990363181117597, 2.2998741872873385, 2.2985834174734996], "accuracy": [0.09166556596755981, 0.08942015469074249, 0.08836349099874496, 0.09338264167308807, 0.08915598690509796, 0.09087307006120682, 0.09166556596755981, 0.09140139818191528, 0.09113723784685135, 0.09628847241401672, 0.09655263274908066, 0.09866596013307571, 0.09430722147226334, 0.10170386731624603, 0.0936468094587326, 0.09509972482919693, 0.08796724677085876, 0.09655263274908066, 0.09179764986038208, 0.10276053100824356, 0.09655263274908066, 0.08968432247638702, 0.09655263274908066, 0.09377889335155487, 0.09615638852119446, 0.09655263274908066, 0.09298639744520187, 0.10091137140989304, 0.09708096832036972, 0.09602430462837219, 0.0952318087220192, 0.09615638852119446, 0.09840179979801178, 0.09325055778026581, 0.09377889335155487, 0.09734513610601425, 0.09760929644107819, 0.09140139818191528, 0.09681680053472519, 0.09602430462837219, 0.09959053993225098, 0.10368511080741882, 0.10117553919553757, 0.09642054885625839, 0.10130762308835983, 0.1018359512090683, 0.09840179979801178, 0.09734513610601425, 0.09628847241401672, 0.10566636174917221, 0.10527011007070541, 0.09272222965955734, 0.09866596013307571, 0.10038304328918457, 0.09853387624025345, 0.09932637959718704, 0.10289261490106583, 0.10579843819141388, 0.0936468094587326, 0.09457138925790787, 0.09959053993225098, 0.1006472036242485, 0.09642054885625839, 0.09840179979801178, 0.10210011899471283], "val_loss": [1.9702811922345842, 1.9701734270368303, 1.9700117792401994, 1.969928400857108, 1.9698453630719865, 1.9697542871747697, 1.9696638243538993, 1.96958099092756, 1.9695402554103307, 1.9694639614650182, 1.9694100788661413, 1.969353199005127, 1.969283172062465, 1.9692510877336775, 1.9692253385271346, 1.969189030783517, 1.9691369192940849, 1.9691200937543596, 1.969081265585763, 1.9690543583461217, 1.9690192086356026, 1.968994140625, 1.9689696856907435, 1.9689784731183733, 1.9689621925354004, 1.9689585821969169, 1.968942097255162, 1.968944890158517, 1.9689323561532157, 1.96893344606672, 1.9689350809369768, 1.9689348084586007, 1.968928405216762, 1.9689367158072335, 1.9689417566571916, 1.9689485686165946, 1.9689321517944336, 1.9689464569091797, 1.9689463206699915, 1.9689619200570243, 1.96898010798863, 1.9689943449837821, 1.969010625566755, 1.9689880779811315, 1.9690066746303014, 1.9690149852207728, 1.9690285410199846, 1.9690282685416085, 1.9690148489815849, 1.969012873513358, 1.9690040179661341, 1.9689976147242956, 1.9689841270446777, 1.9689742497035436, 1.9689767701285226, 1.9689713205610002, 1.9689732960292272, 1.9689606257847376, 1.9689449582781111, 1.9689232281276159, 1.9689125333513533, 1.9689060619899206, 1.9688989094325475, 1.9688959121704102, 1.968890939440046], "val_accuracy": [0.03700000047683716, 0.039000000804662704, 0.041333332657814026, 0.04333333298563957, 0.043666668236255646, 0.04633333161473274, 0.04699999839067459, 0.047333333641290665, 0.04800000041723251, 0.049666665494441986, 0.049666665494441986, 0.05000000074505806, 0.050333332270383835, 0.049666665494441986, 0.050333332270383835, 0.05400000140070915, 0.05400000140070915, 0.05533333495259285, 0.0560000017285347, 0.0573333315551281, 0.057999998331069946, 0.057999998331069946, 0.060333333909511566, 0.061666667461395264, 0.06266666948795319, 0.06300000101327896, 0.06366666406393051, 0.06400000303983688, 0.06533333659172058, 0.06599999964237213, 0.06566666811704636, 0.06599999964237213, 0.06700000166893005, 0.0663333311676979, 0.0663333311676979, 0.06700000166893005, 0.06733333319425583, 0.06733333319425583, 0.0676666647195816, 0.0689999982714653, 0.07066666334867477, 0.07133333384990692, 0.0716666653752327, 0.07266666740179062, 0.0729999989271164, 0.07366666942834854, 0.07466666400432587, 0.07433333247900009, 0.07466666400432587, 0.07500000298023224, 0.07533333450555801, 0.07500000298023224, 0.07766667008399963, 0.07966666668653488, 0.07966666668653488, 0.08133333176374435, 0.08266666531562805, 0.08399999886751175, 0.0846666693687439, 0.0860000029206276, 0.08533333241939545, 0.08500000089406967, 0.08566666394472122, 0.0860000029206276, 0.0860000029206276]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [5, 3, 4, 4, 2, 1, 1, 1, 5, 3, 6, 3, 2, 6, 8, 4, 3, 4, 5, 5, 3, 2, 5, 3, 1, 2, 7, 2, 2, 0, 6, 0, 2, 3, 4, 3, 5, 5, 4, 0, 0, 1, 9, 3, 3, 8, 7, 7, 3, 9, 2, 2, 2, 3, 1, 3, 4, 7, 4, 2, 3, 2, 9, 1, 5, 8, 4, 8, 2, 6, 7, 9, 3], [1, 2, 1, 0, 0, 2, 2, 1, 1, 0, 1, 2, 2, 3, 1, 1, 1, 0, 2, 2, 2, 1, 0, 2, 2, 1, 2, 1, 3, 2, 2, 0, 2, 0, 3, 1, 2, 0, 0, 3, 1, 1, 1, 2, 2, 2, 3, 3, 0, 0, 0, 3, 2], [69, 77, 25, 29, 90, 73, 46, 33, 24, 64, 59, 34, 79], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 6, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [61, 95, 54, 66], [0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1], [1, 9, 0, 3, 9, 4, 8], [5, 4, 3], [62], [1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.037142857909202576, "mapping_values": [1, 1, 1, 0, 1, 0, 11, 11, 6, 5, 0, 3, 2, 2, 0, 1, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.divide_no_nan(tf.math.add(beta, grad), alpha), tf.math.square(tf.math.add(tf.math.add(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)), sigma)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.302770232354425, 2.3022473941405437, 2.303911014113995, 2.302500307851259, 2.3024575322012244, 2.3021436996306286], "accuracy": [0.09113723784685135, 0.0886276587843895, 0.0870426595211029, 0.09100515395402908, 0.08691058307886124, 0.08915598690509796], "val_loss": [1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [1, 3, 4, 4, 4, 8, 0, 1, 5, 6, 0, 3, 4, 6, 8, 4, 9, 5, 5, 5, 9, 2, 5, 3, 1, 2, 7, 2, 2, 2, 8, 4, 2, 3, 4, 8, 5, 5, 4, 0, 0, 1, 9, 3, 3, 8, 7, 7, 3, 9, 2, 2, 2, 3, 1, 3, 4, 7, 4, 2, 3, 2, 9, 1, 5, 8, 4, 8, 2, 6, 7, 9, 3], [1, 2, 2, 2, 0, 2, 0, 0, 1, 1, 2, 2, 1, 1, 1, 1, 1, 0, 1, 1, 0, 2, 2, 2, 0, 1, 2, 1, 1, 2, 2, 0, 3, 0, 3, 1, 2, 0, 0, 3, 1, 1, 1, 1, 2, 2, 3, 3, 0, 0, 0, 3, 2], [73, 15, 60, 29, 90, 73, 46, 33, 24, 64, 59, 34, 79], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [5, 4, 3], [55], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.03200000151991844, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 4, 2, 2, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, beta))", "other_info": {"loss": [2.303268312667859, 2.30425476505142, 2.3082621826582015, 2.3089863588277453, 2.311391473934399, 2.314562660497429], "accuracy": [0.08968432247638702, 0.08585391938686371, 0.08281600475311279, 0.08070268481969833, 0.0738343670964241, 0.0758156105875969], "val_loss": [1.9713226045880998, 1.9725770269121443, 1.974485261099679, 1.9763307571411133, 1.9783392633710588, 1.9808732441493444], "val_accuracy": [0.029666665941476822, 0.02666666731238365, 0.021666666492819786, 0.020999999716877937, 0.02033333294093609, 0.024666666984558105]}}]