[{"genotype": [[0], [1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 1, 5, 0, 0, 8, 9, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 0, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [2, 50, 93, 49, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [4, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 0, 8, 8, 5, 0, 0, 4, 0, 8], [0, 2, 0, 0, 3, 0, 2], [92, 42, 57, 12, 41]], "fitness": -0.8082857131958008, "mapping_values": [1, 7, 7, 4, 3, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 10, 7, 3, 2], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.subtract(tf.math.square(tf.math.add(alpha, grad)), tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), beta), tf.math.negative(tf.math.sqrt(tf.math.sqrt(tf.math.square(tf.math.negative(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))))))", "other_info": {"loss": [1.9848110575985207, 1.5632268257617257, 1.3099304323875987, 0.914513346454833, 0.7960897159692932, 0.7264689306352494, 0.6874560086545439, 0.6462508602511409, 0.6290784587382704, 0.6116475158788902, 0.6343428908778754, 0.5705690067741204, 0.5642516781404868, 0.5310874009617347, 0.5300184093792646, 0.5068291389805183, 0.5140412688774912, 0.4870160253111555, 0.475541582067078, 0.448927832482718, 0.4495126160459275, 0.453118763693792, 0.4343744200950663, 0.4268578193435233, 0.40680797099122407, 0.42933389135497263, 0.4164846099921977, 0.38887794145566595, 0.3995169151169418, 0.40152517415749445, 0.3859036909142002, 0.3800287679075927, 0.3676227967240917, 0.37858702683052003, 0.3631134901017151], "accuracy": [0.3387927711009979, 0.4637432396411896, 0.5633337497711182, 0.6514331102371216, 0.6979262828826904, 0.7127195596694946, 0.7322678565979004, 0.7506273984909058, 0.7548540234565735, 0.7656848430633545, 0.7552502751350403, 0.7808743715286255, 0.7853652238845825, 0.7968564033508301, 0.7964601516723633, 0.8064984679222107, 0.8030643463134766, 0.8183859586715698, 0.8214238286018372, 0.8310658931732178, 0.8323867321014404, 0.8261788487434387, 0.8407079577445984, 0.8388587832450867, 0.8453308939933777, 0.8367455005645752, 0.8412362933158875, 0.8548408150672913, 0.8455950617790222, 0.8485008478164673, 0.8569541573524475, 0.8536521196365356, 0.8617091774940491, 0.8570862412452698, 0.8654074668884277], "val_loss": [1.347771338054112, 1.323373556137085, 0.7311456544058663, 0.6476748670850482, 0.5931552648544312, 0.5729803017207554, 0.5267059292112078, 0.5017406088965279, 0.5498831953321185, 0.4841555527278355, 0.48563781806400846, 0.42658795629228863, 0.3986570068768093, 0.3935934730938503, 0.3937594635146005, 0.3800503100667681, 0.38614111287253244, 0.3728154216493879, 0.37419043268476215, 0.35824512583868845, 0.3651403955050877, 0.3709913832800729, 0.3433966892106192, 0.3562730465616499, 0.4147899832044329, 0.3841629368918283, 0.32301109177725656, 0.328652092388698, 0.33007594517299105, 0.30984451941081453, 0.36255849259240286, 0.3120481882776533, 0.3179218258176531, 0.3381264976092747, 0.3291157739503043], "val_accuracy": [0.5173333287239075, 0.5673333406448364, 0.6476666927337646, 0.7026666402816772, 0.7153333425521851, 0.7239999771118164, 0.7739999890327454, 0.7646666765213013, 0.7423333525657654, 0.7613333463668823, 0.7836666703224182, 0.8069999814033508, 0.8293333053588867, 0.8360000252723694, 0.828000009059906, 0.8420000076293945, 0.8420000076293945, 0.8473333120346069, 0.8423333168029785, 0.8446666598320007, 0.8373333215713501, 0.8496666550636292, 0.8539999723434448, 0.8493333458900452, 0.8403333425521851, 0.8399999737739563, 0.8683333396911621, 0.8600000143051147, 0.8706666827201843, 0.8763333559036255, 0.8463333249092102, 0.8700000047683716, 0.8683333396911621, 0.8676666617393494, 0.8583333492279053]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 2, 0, 0, 6, 8, 4, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 2, 2, 2, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [2, 50, 93, 49, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [4, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [4, 5], [71], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 0, 8, 5, 5, 0, 0, 4, 0, 8], [0, 2, 0, 0, 3, 0, 2], [88, 29, 57, 12, 41]], "fitness": -0.35685715079307556, "mapping_values": [1, 21, 21, 13, 8, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 10, 7, 3, 2], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.negative(grad))), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.pow(grad, tf.math.add(alpha, grad))))))), tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.pow(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.square(tf.math.divide_no_nan(grad, tf.math.add(alpha, alpha)))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.math.negative(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), beta), tf.math.sqrt(tf.math.square(tf.math.square(tf.math.negative(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))))))", "other_info": {"loss": [2.301745232684249, 2.3018073670033687, 2.301807062390647, 2.3005604381180866, 2.3001378837152635, 2.299666304015811, 2.297334427626346, 2.2980544323997414, 2.2969609695324227, 2.297743351200332, 2.2971987171321735, 2.2966431615658407, 2.2960123633821925, 2.2949596107313113, 2.2953076496446734, 2.295557176715678, 2.29503417238662, 2.293906615001178, 2.294450409424036, 2.2926575921199355, 2.2928584554743034, 2.293053434698447, 2.2898193338150046, 2.290429863963129, 2.291167227630807, 2.2915177340237314, 2.2890270254505216, 2.289426045851732, 2.287968698730086, 2.2866415540067635, 2.286637272454996, 2.2877077939188823, 2.2846862673365824, 2.2870639242185593, 2.2844668190162163, 2.2840990265047765, 2.2827184870730868, 2.2836554061152508, 2.283599088472571, 2.282421225932107, 2.2818916228783994, 2.280936217689086, 2.2806410278390348, 2.2797051081961612, 2.280720463014471, 2.2797332004927027, 2.2781600838780736, 2.278775250765279, 2.277862809920245, 2.278540963084864, 2.276339813702772, 2.275692600662903, 2.2760430800050337, 2.275285783901726, 2.2751174598810238, 2.2746949686177134, 2.273111821984445, 2.2748225153145962, 2.273377388570098, 2.272044441498754, 2.2718615323450777, 2.2711385237369175, 2.27128765728212, 2.2699936513871783, 2.2696372602027184, 2.269038162022345, 2.26836686300611, 2.268498230194608, 2.2686656759305164, 2.2665861685199507, 2.2666542236248515, 2.26922345284253, 2.2642200428024655, 2.2664467669308004, 2.264656674262004, 2.265725322009676, 2.2626622049107197, 2.2631869653999814, 2.262179585243843, 2.2622005275967667, 2.260206905417139, 2.2591199990450006, 2.2617615363884753, 2.259491288509225, 2.258691551851921, 2.25941902632884, 2.25869935504544, 2.2575917335281503, 2.256017585109962, 2.2566534536011766, 2.255010408480343, 2.2551169921032046, 2.253739408482461, 2.2539119676056636, 2.2523716482362253, 2.2538227966322704, 2.2524053937077855, 2.2526713329582733, 2.25083063105708, 2.24778904346128], "accuracy": [0.09417514503002167, 0.09140139818191528, 0.09259014576673508, 0.09628847241401672, 0.09681680053472519, 0.0940430611371994, 0.09813763201236725, 0.09826971590518951, 0.10381719470024109, 0.10553427785634995, 0.10408136248588562, 0.1002509593963623, 0.10553427785634995, 0.10857218503952026, 0.10513802617788315, 0.1072513535618782, 0.10949676483869553, 0.1150442510843277, 0.1162329912185669, 0.11491216719150543, 0.11570466309785843, 0.11094967275857925, 0.12032756209373474, 0.12098798155784607, 0.1162329912185669, 0.12230881303548813, 0.12310130894184113, 0.1270637959241867, 0.12310130894184113, 0.13313961029052734, 0.12891295552253723, 0.12362963706254959, 0.13921542465686798, 0.12732796370983124, 0.13155461847782135, 0.1372341811656952, 0.13842293620109558, 0.13829085230827332, 0.13353586196899414, 0.14317791163921356, 0.14859332144260406, 0.1526878923177719, 0.149649977684021, 0.15361246466636658, 0.1472724825143814, 0.15255580842494965, 0.15559370815753937, 0.15176330506801605, 0.1530841439962387, 0.15453705191612244, 0.1608770340681076, 0.15717871487140656, 0.15519747138023376, 0.15849953889846802, 0.16378284990787506, 0.16655659675598145, 0.16589617729187012, 0.16880200803279877, 0.16840575635433197, 0.1682736724615097, 0.16959451138973236, 0.18016114830970764, 0.17157575488090515, 0.18055738508701324, 0.1776515692472458, 0.1740853190422058, 0.1822744756937027, 0.18478403985500336, 0.18544445931911469, 0.18874652683734894, 0.18795403838157654, 0.17817988991737366, 0.19336943328380585, 0.18835029006004333, 0.1942940205335617, 0.18795403838157654, 0.2032756507396698, 0.19257694482803345, 0.2056531459093094, 0.2024831622838974, 0.20420023798942566, 0.20763438940048218, 0.18742570281028748, 0.20591731369495392, 0.20618148148059845, 0.2056531459093094, 0.2067098170518875, 0.20142649114131927, 0.20604939758777618, 0.21040813624858856, 0.2114647924900055, 0.21199312806129456, 0.22335226833820343, 0.2230881005525589, 0.2207106053829193, 0.21780477464199066, 0.2145027071237564, 0.21833311021327972, 0.23035265505313873, 0.23140932619571686], "val_loss": [1.9699059895106725, 1.9694232259477888, 1.9689439364842005, 1.968460968562535, 1.9679807935442244, 1.9674968719482422, 1.9670159476143974, 1.9665388379778181, 1.9660626820155553, 1.965592316218785, 1.9651191575186593, 1.9646504947117396, 1.9641782215663366, 1.9637034961155482, 1.9632291793823242, 1.9627604484558105, 1.9622853142874581, 1.96181058883667, 1.9613428797040666, 1.9608675411769323, 1.960390908377511, 1.9599274226597376, 1.959460939679827, 1.9589924131120955, 1.958519799368722, 1.9580537251063757, 1.9575841767447335, 1.9571155139378138, 1.9566493715558733, 1.9561772346496582, 1.9557076862880163, 1.9552345957074846, 1.9547628675188338, 1.9542953627450126, 1.9538212503705705, 1.9533530644008092, 1.952876091003418, 1.9523963247026717, 1.9519233022417342, 1.951448849269322, 1.950977393559047, 1.9505014419555664, 1.9500250816345215, 1.9495515142168318, 1.9490788323538644, 1.9486079216003418, 1.9481290408543177, 1.9476513181413924, 1.947176252092634, 1.9466973032270158, 1.9462194442749023, 1.9457330703735352, 1.9452497618538993, 1.9447659764971053, 1.9442836897713798, 1.9437952722821916, 1.9433089665004186, 1.9428224563598633, 1.9423366955348425, 1.9418532507760184, 1.9413659913199288, 1.9408751215253557, 1.9403862953186035, 1.9398964473179408, 1.9394025802612305, 1.9389080320085799, 1.9384108952113561, 1.937913417816162, 1.9374157360621862, 1.9369115829467773, 1.9364100864955358, 1.9359197616577148, 1.9354113170078822, 1.934908730643136, 1.9344078472682409, 1.9339019911629813, 1.9333960669381278, 1.932884965624128, 1.9323716163635254, 1.93185670035226, 1.9313428742544991, 1.9308257102966309, 1.9303054128374373, 1.929788657597133, 1.9292680876595634, 1.9287494250706263, 1.928227424621582, 1.927701541355678, 1.9271700722830636, 1.9266411917550224, 1.9261082240513392, 1.925579616001674, 1.9250382014683314, 1.9245000566755022, 1.9239587102617537, 1.9234193393162318, 1.922872543334961, 1.9223301751273019, 1.921778610774449, 1.9212231636047363], "val_accuracy": [0.03933333232998848, 0.04333333298563957, 0.04633333161473274, 0.049666665494441986, 0.052666667848825455, 0.058666665107011795, 0.06233333423733711, 0.06533333659172058, 0.06866666674613953, 0.0716666653752327, 0.07666666805744171, 0.08166666328907013, 0.0846666693687439, 0.08799999952316284, 0.09166666865348816, 0.09466666728258133, 0.09666666388511658, 0.10233332961797714, 0.10633333027362823, 0.109333336353302, 0.1146666631102562, 0.11900000274181366, 0.12433333694934845, 0.12800000607967377, 0.1326666623353958, 0.13600000739097595, 0.1420000046491623, 0.14766666293144226, 0.15466666221618652, 0.1616666615009308, 0.16733333468437195, 0.1720000058412552, 0.17800000309944153, 0.1823333352804184, 0.1863333284854889, 0.18933333456516266, 0.19466666877269745, 0.19766665995121002, 0.20233333110809326, 0.20600000023841858, 0.21199999749660492, 0.2163333296775818, 0.21766667068004608, 0.2226666659116745, 0.2266666740179062, 0.23133333027362823, 0.23600000143051147, 0.2409999966621399, 0.24500000476837158, 0.24899999797344208, 0.25066667795181274, 0.25566667318344116, 0.25966668128967285, 0.2619999945163727, 0.26466667652130127, 0.2680000066757202, 0.27166667580604553, 0.2773333191871643, 0.2826666533946991, 0.2849999964237213, 0.2876666784286499, 0.289000004529953, 0.2939999997615814, 0.29633334279060364, 0.2993333339691162, 0.3023333251476288, 0.3050000071525574, 0.3083333373069763, 0.3096666634082794, 0.31200000643730164, 0.31333333253860474, 0.31566667556762695, 0.3199999928474426, 0.3230000138282776, 0.3253333270549774, 0.32766667008399963, 0.3296666741371155, 0.3316666781902313, 0.3343333303928375, 0.33766666054725647, 0.3396666646003723, 0.34200000762939453, 0.34433332085609436, 0.3463333249092102, 0.3476666808128357, 0.3503333330154419, 0.35199999809265137, 0.35499998927116394, 0.35633334517478943, 0.3566666543483734, 0.35766667127609253, 0.3596666753292084, 0.3623333275318146, 0.36399999260902405, 0.36500000953674316, 0.36666667461395264, 0.36766666173934937, 0.36899998784065247, 0.37033334374427795, 0.3713333308696747]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [5, 1, 5, 0, 1, 8, 9, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [3, 0, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [2, 50, 93, 49, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [4, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 6, 0, 8, 8, 5, 0, 0, 4, 0, 8], [0, 2, 2, 0, 3, 0, 2], [92, 42, 57, 12, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 15, 11, 4, 2], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.divide_no_nan(tf.math.negative(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.sqrt(tf.math.square(tf.math.negative(tf.math.negative(beta)))))), tf.math.pow(tf.math.negative(beta), tf.math.sqrt(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [5, 1, 5, 0, 1, 8, 9, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 3, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [2, 50, 93, 49, 40, 73, 46, 33, 24], [0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [4, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 0, 9, 9, 5, 0, 0, 4, 0, 8], [0, 2, 0, 0, 3, 0, 2], [88, 42, 57, 12, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(grad, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3019663757258213, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [8, 2, 9, 0, 4, 2, 9, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 0, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [2, 50, 93, 49, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [1, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [7, 3, 0, 8, 8, 5, 0, 0, 4, 0, 8], [0, 2, 3, 0, 3, 0, 2], [92, 42, 57, 12, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 3, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 6, 3, 3, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), beta), tf.math.negative(sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [8, 2, 8, 0, 4, 2, 9, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [3, 0, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [2, 50, 93, 49, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [1, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [1, 5], [71], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [7, 3, 0, 8, 8, 5, 8, 0, 4, 0, 8], [0, 2, 3, 0, 3, 0, 2], [92, 42, 57, 12, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 10, 7, 3, 1], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), beta), tf.math.negative(tf.math.sqrt(tf.math.sqrt(tf.math.square(tf.math.sqrt(sigma))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [5, 2, 5, 6, 1, 8, 9, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 3, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [2, 50, 93, 49, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [4, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [1, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [4, 5], [71], [0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 1, 8, 8, 5, 0, 0, 4, 0, 8], [0, 2, 0, 0, 3, 0, 2], [88, 42, 57, 12, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 7, 3, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 2], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, grad), grad), tf.math.add(alpha, tf.math.sqrt(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))))))), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32), beta), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [3222286805.8252296, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.050587769597768784, 0.10157178342342377, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [8.583347068303212e+31, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09666666388511658, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 1, 5, 0, 0, 8, 6, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 0, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [2, 50, 93, 49, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [1, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 9, 8, 8, 2, 0, 0, 4, 0, 8], [0, 2, 0, 0, 3, 0, 2], [92, 42, 57, 12, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 3, 2, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.square(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), beta), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [6.586937187874023, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.24897634983062744, 0.1022322028875351, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [99.5653076171875, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0833333358168602, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 1, 5, 0, 0, 8, 9, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 3, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [2, 50, 93, 49, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [5, 5], [71], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 7, 0, 8, 8, 5, 0, 0, 4, 0, 8], [0, 2, 0, 0, 3, 0, 2], [98, 42, 57, 12, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(grad)))), tf.math.add(alpha, grad)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07740060985088348, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [9, 3, 5, 0, 6, 8, 4, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 3, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [11, 50, 93, 49, 40, 73, 46, 33, 24], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [2, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 1], [8, 6], [2, 5], [71], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 0, 8, 2, 5, 0, 0, 4, 0, 8], [0, 2, 0, 0, 3, 0, 2], [12, 42, 57, 12, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 3, 3, 1, 2, 0, 4, 3, 2, 1, 0, 1, 0, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, beta), sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3018096763664753, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10157178342342377, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [3, 2, 5, 0, 6, 8, 4, 6, 5, 4, 8, 5, 6, 5, 6, 6, 2, 0, 3, 7, 4, 0, 2, 3, 5, 2, 7, 7, 2, 9], [1, 3, 2, 0, 0, 0, 2, 2, 0, 0, 2, 2, 3, 0, 3, 0, 1], [11, 50, 93, 49, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 0, 9, 9, 5, 0, 0, 4, 0, 8], [0, 2, 0, 0, 3, 0, 2], [89, 42, 57, 12, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 38, 38, 23, 15, 6, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 53, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.square(tf.math.add(alpha, tf.math.negative(alpha))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.square(tf.math.divide_no_nan(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.negative(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))))))))), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3019663757258213, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1], [1, 1, 5, 5, 1, 2, 2, 6, 5, 4, 2, 5, 6, 2, 6, 6, 2, 4, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 2, 0, 0, 0, 0, 2, 1, 2, 0, 2, 2, 3, 3, 3, 0, 1, 2, 3, 3, 1], [2, 50, 93, 49, 40, 61, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [2, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 1], [2, 3], [0, 5], [93], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 0, 9, 2, 5, 0, 0, 4, 0, 8], [1, 2, 2, 0, 3, 0, 2], [92, 42, 57, 12, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 51, 51, 30, 21, 8, 3, 3, 1, 2, 0, 5, 3, 2, 1, 1, 3, 1, 2, 0], "tree_depth": 62, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.pow(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.pow(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), grad)))))))), tf.math.add(alpha, tf.math.sqrt(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(grad, grad)), tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)))))))))))), tf.math.add(tf.math.add(alpha, grad), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)), grad)))))), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), sigma)), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [9, 3, 5, 0, 6, 8, 4, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 3, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [2, 50, 93, 49, 40, 73, 46, 33, 24], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [2, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [4, 5], [71], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 0, 8, 8, 4, 0, 0, 4, 0, 8], [0, 2, 0, 0, 3, 0, 2], [92, 42, 57, 12, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3019663757258213, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 2, 5, 0, 6, 8, 4, 6, 5, 4, 8, 5, 4, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 2, 2, 1, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [11, 50, 93, 49, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [0, 5], [71], [1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 0, 8, 8, 5, 0, 0, 4, 0, 8], [0, 2, 0, 0, 3, 0, 2], [92, 42, 57, 12, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 21, 21, 13, 8, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.square(tf.math.add(alpha, tf.math.negative(grad))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.math.pow(grad, tf.math.add(alpha, alpha))))))), tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.pow(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.square(tf.math.pow(grad, tf.math.add(alpha, alpha)))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3019663757258213, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [6, 1, 5, 0, 9, 8, 4, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 3, 2, 2, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [11, 50, 93, 49, 40, 73, 46, 33, 24], [1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1], [3, 3, 2, 8, 2, 5, 4, 0, 4, 0, 8, 6, 4, 4, 0, 6, 2, 5, 6, 7, 3, 0, 8, 6, 1, 1, 4, 5, 5], [0, 0, 0, 1, 3, 0, 2, 3, 2, 1, 2, 0, 3, 2, 2, 0, 3, 1, 2], [49, 42, 57, 12, 41, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 48, 29, 19, 6], "tree_depth": 39, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.subtract(grad, grad), tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.sqrt(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.square(alpha), tf.math.pow(tf.math.negative(sigma), tf.math.pow(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.sqrt(tf.math.divide_no_nan(tf.math.pow(tf.math.pow(beta, tf.math.negative(tf.math.divide_no_nan(tf.math.add(tf.math.square(tf.math.divide_no_nan(tf.math.add(sigma, beta), tf.math.multiply(alpha, tf.math.negative(tf.math.sqrt(beta))))), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(sigma, tf.math.subtract(beta, tf.math.subtract(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))))), tf.math.pow(tf.math.square(sigma), alpha)), tf.math.square(beta)))))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 1, 2, 0, 0, 8, 9, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 0, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [81, 50, 93, 49, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [4, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 3, 8, 8, 6, 0, 0, 4, 0, 8, 8, 7, 4, 3, 5, 9, 9, 3, 2, 9], [0, 2, 2, 0, 3, 0, 2, 0], [92, 42, 57, 12, 41, 43, 9]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 4, 4, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 29, 21, 8, 7], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.subtract(tf.math.add(tf.math.add(alpha, grad), tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.negative(grad)), tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.math.multiply(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.sqrt(tf.math.divide_no_nan(tf.math.negative(tf.math.negative(beta)), tf.math.pow(tf.math.negative(beta), tf.math.sqrt(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))))), sigma), tf.math.sqrt(tf.math.add(tf.math.pow(tf.math.multiply(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32))), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), beta), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [5, 1, 5, 0, 1, 8, 9, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [0, 0, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [2, 50, 93, 49, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [4, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [5, 5], [71], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 6, 0, 8, 8, 5, 0, 0, 4, 0, 8], [0, 2, 0, 0, 3, 0, 2], [92, 42, 57, 12, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 8, 5, 3, 2], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.divide_no_nan(tf.math.negative(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.sqrt(beta))), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 1, 4, 0, 0, 8, 9, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 0, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [2, 50, 93, 49, 40, 73, 46, 33, 24], [1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [4, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [34], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [1, 7, 0, 8, 3, 8, 0, 0, 4, 0, 8], [0, 2, 0, 0, 3, 0, 2], [32, 51, 57, 12, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 4, 4, 2, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 15, 10, 5, 3], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.subtract(tf.math.pow(tf.math.add(alpha, grad), tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(grad))), tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.add(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), beta), tf.math.negative(tf.math.sqrt(tf.math.multiply(tf.math.sqrt(tf.math.negative(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.pow(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma)))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 1, 2, 0, 0, 3, 9, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 3, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [2, 50, 93, 49, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 5, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 0, 9, 9, 5, 0, 0, 4, 0, 8], [0, 2, 0, 0, 3, 0, 2], [92, 42, 57, 12, 41]], "fitness": -0.06942857056856155, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 6, 4, 2, 2], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), beta)", "other_info": {"loss": [2.301865880798906, 2.30225368330838, 2.302574036600347, 2.30167355900821, 2.3014912259829057, 2.301428860834545, 2.2996558664717677, 2.3006393254755855, 2.2999199151898324, 2.301075849519225, 2.3009944122386505, 2.3006233007617207, 2.300610075127951, 2.300180741399428, 2.3009108350167042, 2.3013138853248716, 2.301334039488835, 2.3008574085338886, 2.3016565455705136, 2.3005646383600182, 2.3010274231504724, 2.3016442411123186, 2.2989756146505163, 2.300130188284045, 2.3012829412007614, 2.301623856213587, 2.300334322832012, 2.3006291154227347, 2.2998421928114534, 2.299511548282763, 2.299775877239493, 2.3010384469000167, 2.298994605819295, 2.3014342904862413, 2.2998773083632034, 2.2998294620592015, 2.299076836421867, 2.3000799628328163, 2.299982620378322, 2.2995767105587754, 2.299721976470292, 2.299417847986187, 2.2993062123520467, 2.299165796909224, 2.3003232638440063, 2.299810257948086, 2.2991247039823137, 2.2996688725500847, 2.2994627033667463, 2.30014599536341, 2.2989875500653447, 2.2986056358429106, 2.299828699440957, 2.299380615985373, 2.2993766105154547, 2.2993522861520015, 2.298937715669712, 2.3003978649575743, 2.2993662795685443], "accuracy": [0.09417514503002167, 0.09021265059709549, 0.09113723784685135, 0.09509972482919693, 0.0936468094587326, 0.08981640636920929, 0.09470347315073013, 0.09311848133802414, 0.09774138033390045, 0.09708096832036972, 0.0936468094587326, 0.09338264167308807, 0.09549596905708313, 0.09721305221319199, 0.09179764986038208, 0.08915598690509796, 0.09694888442754745, 0.0944393053650856, 0.10130762308835983, 0.09642054885625839, 0.09787346422672272, 0.09206181764602661, 0.09879804402589798, 0.09813763201236725, 0.09153348207473755, 0.09509972482919693, 0.09206181764602661, 0.09879804402589798, 0.09602430462837219, 0.10038304328918457, 0.10051512718200684, 0.09232597798109055, 0.10051512718200684, 0.09351472556591034, 0.09430722147226334, 0.09919429570436478, 0.10051512718200684, 0.10236428678035736, 0.09008057415485382, 0.09813763201236725, 0.10130762308835983, 0.10315678268671036, 0.09853387624025345, 0.10606260597705841, 0.09760929644107819, 0.09919429570436478, 0.10038304328918457, 0.09972262382507324, 0.10091137140989304, 0.10236428678035736, 0.10342095047235489, 0.1018359512090683, 0.0936468094587326, 0.10077928751707077, 0.10210011899471283, 0.10368511080741882, 0.09734513610601425, 0.10236428678035736, 0.10170386731624603], "val_loss": [1.9702250616891044, 1.9701056480407715, 1.9699690682547433, 1.9698472023010254, 1.9697282654898507, 1.9696410724094935, 1.9695755413600378, 1.9694903237479073, 1.9694270406450545, 1.9693878037588937, 1.9693617820739746, 1.9692865099225725, 1.9692413466317313, 1.9692207063947404, 1.969198158809117, 1.96915830884661, 1.9691399846758162, 1.9691472734723772, 1.9691407339913505, 1.9691434587751115, 1.9691228185381209, 1.969137736729213, 1.969139507838658, 1.969151837485177, 1.9691567420959473, 1.969160556793213, 1.96918671471732, 1.969184262411935, 1.969191551208496, 1.969226905277797, 1.9692536762782507, 1.9692436626979284, 1.9692480904715401, 1.9692397117614746, 1.96926178250994, 1.969273226601737, 1.9692675045558385, 1.9692567416599818, 1.9692317417689733, 1.9692081723894392, 1.96920987537929, 1.969191006251744, 1.96916777747018, 1.969165529523577, 1.96915374483381, 1.9691344669886999, 1.9691346713474818, 1.969128131866455, 1.9691208430698939, 1.9691164152962821, 1.9691180501665388, 1.9691190719604492, 1.9691331727164132, 1.969149044581822, 1.9691617148263114, 1.9691826275416784, 1.9692015647888184, 1.9692110334123885, 1.9692291532244002], "val_accuracy": [0.03933333232998848, 0.04233333468437195, 0.04399999976158142, 0.04633333161473274, 0.046666666865348816, 0.04766666516661644, 0.049666665494441986, 0.05000000074505806, 0.05000000074505806, 0.050999999046325684, 0.050999999046325684, 0.05400000140070915, 0.054999999701976776, 0.05666666850447655, 0.05833333358168602, 0.057999998331069946, 0.05966666713356972, 0.061666667461395264, 0.06233333423733711, 0.06333333253860474, 0.06400000303983688, 0.06466666609048843, 0.06533333659172058, 0.06533333659172058, 0.06599999964237213, 0.06499999761581421, 0.06433333456516266, 0.06466666609048843, 0.06566666811704636, 0.06800000369548798, 0.06866666674613953, 0.07000000029802322, 0.06933332979679108, 0.0716666653752327, 0.07233333587646484, 0.0729999989271164, 0.0729999989271164, 0.07433333247900009, 0.07566666603088379, 0.07766667008399963, 0.07766667008399963, 0.07900000363588333, 0.0793333351612091, 0.07966666668653488, 0.07999999821186066, 0.08100000023841858, 0.0806666687130928, 0.08100000023841858, 0.08100000023841858, 0.0820000022649765, 0.08133333176374435, 0.08266666531562805, 0.08233333379030228, 0.08299999684095383, 0.08299999684095383, 0.08233333379030228, 0.08233333379030228, 0.0820000022649765, 0.08133333176374435]}}, {"genotype": [[0], [1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [9, 3, 5, 0, 6, 8, 4, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 3, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [11, 50, 93, 49, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 0, 9, 9, 5, 0, 0, 4, 0, 8], [0, 2, 0, 0, 3, 0, 2], [88, 42, 57, 12, 41]], "fitness": -0.06942857056856155, "mapping_values": [1, 1, 1, 1, 0, 1, 3, 3, 1, 2, 0, 1, 1, 1, 0, 1, 6, 4, 2, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32), beta), tf.math.negative(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.301865880798906, 2.302253732780786, 2.3025741490548106, 2.301673891899876, 2.301491702820064, 2.301429463635819, 2.299656343308926, 2.3006398517851503, 2.2999205000097285, 2.3010761329384843, 2.3009943627662444, 2.300623633653386, 2.3006106464381957, 2.3001813892013816, 2.30091121290905, 2.3013141327813758, 2.301334471325313, 2.30085774589728, 2.301656990916643, 2.3005647508144818, 2.3010272206946483, 2.301643854276521, 2.298974597994142, 2.300129068116659, 2.3012827342732107, 2.301624130594921, 2.3003345432692135, 2.300629020949648, 2.299842026412857, 2.299510999520095, 2.2997753464582025, 2.3010379026090746, 2.2989936116160243, 2.3014335526829273, 2.299876890036377, 2.2998289627689394, 2.299076278621274, 2.300079877397655, 2.299982696870031, 2.2995766160856888, 2.299721899978583, 2.299417915439971, 2.2993063833168423, 2.299165877872659, 2.300323232352978, 2.2998107077659413, 2.2991248794188355, 2.2996689760610964, 2.2994627617826047, 2.3001462022909602, 2.298987055246809, 2.2986052490071125, 2.299828204622421, 2.299380422567474, 2.299376219207931, 2.2993524571167967, 2.2989376661028325, 2.3003982517933723, 2.2993667024615703], "accuracy": [0.09417514503002167, 0.09021265059709549, 0.09113723784685135, 0.09509972482919693, 0.0936468094587326, 0.08981640636920929, 0.09470347315073013, 0.09311848133802414, 0.09774138033390045, 0.09708096832036972, 0.0936468094587326, 0.09338264167308807, 0.09549596905708313, 0.09721305221319199, 0.09179764986038208, 0.08915598690509796, 0.09694888442754745, 0.0944393053650856, 0.10130762308835983, 0.09628847241401672, 0.09787346422672272, 0.09206181764602661, 0.09879804402589798, 0.09813763201236725, 0.09153348207473755, 0.09509972482919693, 0.09206181764602661, 0.09879804402589798, 0.09602430462837219, 0.10051512718200684, 0.10038304328918457, 0.09232597798109055, 0.10051512718200684, 0.09351472556591034, 0.09417514503002167, 0.09919429570436478, 0.1006472036242485, 0.10236428678035736, 0.09008057415485382, 0.09813763201236725, 0.1014397069811821, 0.10302469879388809, 0.09853387624025345, 0.10606260597705841, 0.09760929644107819, 0.09919429570436478, 0.10051512718200684, 0.09959053993225098, 0.10091137140989304, 0.10236428678035736, 0.10328886657953262, 0.1018359512090683, 0.0936468094587326, 0.10077928751707077, 0.10210011899471283, 0.10394927859306335, 0.09734513610601425, 0.10249637067317963, 0.1018359512090683], "val_loss": [1.9702251298086983, 1.9701057161603654, 1.9699695450919015, 1.9698475428989954, 1.969728742327009, 1.9696413448878698, 1.9695758819580078, 1.9694907324654716, 1.9694271768842424, 1.9693878718784876, 1.9693614414760046, 1.9692866461617606, 1.9692417553492956, 1.9692206382751465, 1.9691978863307409, 1.9691581726074219, 1.969139848436628, 1.9691472734723772, 1.9691404615129744, 1.9691428456987654, 1.9691220692225866, 1.9691366468157088, 1.9691378729684013, 1.9691510881696428, 1.9691566058567591, 1.969160556793213, 1.969186510358538, 1.9691835130964006, 1.9691909381321497, 1.9692260197230749, 1.9692527226039342, 1.9692424365452357, 1.9692468643188477, 1.969238553728376, 1.9692608288356237, 1.9692720004490443, 1.969266619001116, 1.9692559242248535, 1.969231196812221, 1.9692073549543108, 1.9692095347813197, 1.9691905975341797, 1.9691673687526159, 1.9691651208060128, 1.9691534723554338, 1.9691341263907296, 1.9691342626299178, 1.9691276550292969, 1.9691199575151717, 1.9691153253827776, 1.9691167558942522, 1.9691178458077567, 1.9691320146833147, 1.9691480909075056, 1.969160761151995, 1.96918181010655, 1.969200951712472, 1.9692106928144182, 1.9692281314304896], "val_accuracy": [0.03933333232998848, 0.04233333468437195, 0.04399999976158142, 0.04633333161473274, 0.046666666865348816, 0.04766666516661644, 0.049666665494441986, 0.05000000074505806, 0.05000000074505806, 0.050999999046325684, 0.050999999046325684, 0.05400000140070915, 0.054999999701976776, 0.05666666850447655, 0.05833333358168602, 0.057999998331069946, 0.05966666713356972, 0.061666667461395264, 0.06233333423733711, 0.06333333253860474, 0.06400000303983688, 0.06466666609048843, 0.06533333659172058, 0.06533333659172058, 0.06599999964237213, 0.06499999761581421, 0.06466666609048843, 0.06466666609048843, 0.06566666811704636, 0.06800000369548798, 0.06866666674613953, 0.070333331823349, 0.06933332979679108, 0.07199999690055847, 0.07233333587646484, 0.0729999989271164, 0.0729999989271164, 0.07433333247900009, 0.07566666603088379, 0.07766667008399963, 0.07766667008399963, 0.07900000363588333, 0.0793333351612091, 0.07966666668653488, 0.07999999821186066, 0.08100000023841858, 0.0806666687130928, 0.08100000023841858, 0.08100000023841858, 0.0820000022649765, 0.08133333176374435, 0.08266666531562805, 0.08266666531562805, 0.08299999684095383, 0.08299999684095383, 0.08233333379030228, 0.08233333379030228, 0.0820000022649765, 0.08133333176374435]}}]