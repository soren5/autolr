[{"genotype": [[0], [0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 4, 5, 4, 4, 8, 9, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [1, 1, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [91, 12, 93, 63, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 0, 8, 8, 5, 0, 0, 4, 0, 8], [2, 0, 0, 0, 3, 0, 2], [94, 42, 57, 12, 41]], "fitness": -0.824571430683136, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 10, 7, 3, 2], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.sqrt(tf.math.sqrt(tf.math.square(tf.math.negative(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))))))", "other_info": {"loss": [2.203378723187611, 1.9509322401114018, 1.4140159655965125, 1.2237475554326804, 0.9698170970034495, 0.9587173222109878, 0.8416204070685924, 0.787011920405952, 0.724541719768183, 0.6917287838803842, 0.6776692345393978, 0.6450345902599758, 0.5946625589600109, 0.6147800002194446, 0.631473501494469, 0.5616726128259245, 0.5772405411148147, 0.5348107899735869, 0.5417977072905713, 0.525325523478055, 0.507833016247813, 0.5179192275261567, 0.48109500661832844, 0.4646321993777308, 0.4906163854708273, 0.4730867126937146, 0.4646498599875605, 0.46038845057075584, 0.44877005533503816, 0.42214434988242666, 0.4630519822958265, 0.41946237305482587, 0.41337113693138045, 0.4186397143098987, 0.41193950155769843, 0.38678699804649785, 0.3868568707348538, 0.38241412377533834, 0.3804269818944103, 0.37041853670005737, 0.3655216573385625, 0.40262931765991666, 0.3648976970499911, 0.3505381249268262, 0.36283050127363853, 0.35324233539698696], "accuracy": [0.2592788338661194, 0.3357548415660858, 0.5366530418395996, 0.5587108731269836, 0.6470743417739868, 0.653150200843811, 0.6819442510604858, 0.7041342258453369, 0.7186633348464966, 0.7403249144554138, 0.7412495017051697, 0.7523444890975952, 0.772288978099823, 0.7707040309906006, 0.7631752490997314, 0.7895918488502502, 0.7825914621353149, 0.8013472557067871, 0.7907806038856506, 0.8041210174560547, 0.8101968169212341, 0.8030643463134766, 0.8214238286018372, 0.82683926820755, 0.8177255392074585, 0.8249900937080383, 0.8251221776008606, 0.8261788487434387, 0.8293488025665283, 0.8428213000297546, 0.8247259259223938, 0.8428213000297546, 0.8444063067436218, 0.8424250483512878, 0.8487650156021118, 0.8581429123878479, 0.854708731174469, 0.8565579056739807, 0.8564258217811584, 0.8589354157447815, 0.868049144744873, 0.8466516733169556, 0.8623695969581604, 0.8652753829956055, 0.8631620407104492, 0.8702945709228516], "val_loss": [1.8828353200639998, 1.1957282679421561, 1.034421409879412, 0.6858867917742048, 0.9088993413107735, 0.6548785993031093, 0.6815892287663051, 0.5756158488137382, 0.5115267549242292, 0.4981377976281302, 0.5072599819728306, 0.4934960774012974, 0.46452130590166363, 0.5502094200679234, 0.41718198571886334, 0.4085708601134164, 0.4078123484339033, 0.3957618304661342, 0.43706110545567106, 0.43630572727748324, 0.4204843725476946, 0.3731206144605364, 0.40723979473114014, 0.38858725343431744, 0.3838708826473781, 0.3549368040902274, 0.3646124686513628, 0.35709873267582487, 0.3460036260741098, 0.3973598224776132, 0.36483860867364065, 0.33020355871745516, 0.34742655072893414, 0.346724944455283, 0.3346028413091387, 0.34877448422568186, 0.3163999319076538, 0.3747225063187735, 0.3082214168139866, 0.37918501240866526, 0.31276921715055195, 0.32095402479171753, 0.30913782119750977, 0.32050451210566927, 0.3336616669382368, 0.335686411176409], "val_accuracy": [0.18166667222976685, 0.5606666803359985, 0.5860000252723694, 0.6996666789054871, 0.5640000104904175, 0.6660000085830688, 0.6923333406448364, 0.7329999804496765, 0.7730000019073486, 0.7739999890327454, 0.7553333044052124, 0.7603333592414856, 0.7796666622161865, 0.7459999918937683, 0.8220000267028809, 0.8213333487510681, 0.8246666789054871, 0.8333333134651184, 0.7996666431427002, 0.8090000152587891, 0.8013333082199097, 0.843666672706604, 0.8096666932106018, 0.8309999704360962, 0.8453333377838135, 0.8536666631698608, 0.8460000157356262, 0.8493333458900452, 0.8619999885559082, 0.8220000267028809, 0.8423333168029785, 0.8656666874885559, 0.8569999933242798, 0.8516666889190674, 0.8636666536331177, 0.8433333039283752, 0.8700000047683716, 0.8230000138282776, 0.8676666617393494, 0.8253333568572998, 0.8723333477973938, 0.8659999966621399, 0.8709999918937683, 0.8683333396911621, 0.8496666550636292, 0.8473333120346069]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 4, 5, 4, 4, 8, 9, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 1, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [91, 12, 93, 63, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 1], [9, 3], [2, 5], [71], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 0, 8, 8, 5, 0, 0, 4, 0, 8], [2, 0, 0, 0, 3, 0, 2], [92, 42, 57, 12, 41]], "fitness": -0.8208571672439575, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 10, 7, 3, 2], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(beta, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.sqrt(tf.math.sqrt(tf.math.square(tf.math.negative(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))))))", "other_info": {"loss": [2.202344158211908, 1.9613131100806136, 1.436103845285056, 1.080107136078798, 1.109074079428272, 0.9415180873577983, 0.8089035928619379, 0.782814292615793, 0.7133342947517136, 0.6486778516716504, 0.6844338720437794, 0.6328328622173183, 0.6214403666604102, 0.5943203649469229, 0.6038779525031912, 0.5622964877383805, 0.5372746227172073, 0.5560996738312787, 0.5276074957350037, 0.5298970693909592, 0.5074464063862641, 0.5292726104498193, 0.48999075283542554], "accuracy": [0.25941091775894165, 0.33020737767219543, 0.5163122415542603, 0.6172236204147339, 0.6048077940940857, 0.6532822847366333, 0.6860388517379761, 0.6954167485237122, 0.7235503792762756, 0.7556465268135071, 0.7401928305625916, 0.7479857206344604, 0.7557786107063293, 0.7744023203849792, 0.7688548564910889, 0.7795535326004028, 0.7985734939575195, 0.7866860628128052, 0.7977809906005859, 0.7973847389221191, 0.8080834746360779, 0.8025360107421875, 0.8156121969223022], "val_loss": [1.882749012538365, 1.2580849102565221, 1.0357542037963867, 0.7949782269341605, 0.7821002687726702, 0.6689470665795463, 0.6465414932795933, 0.5283399139131818, 0.5008796794073922, 0.5162883656365531, 0.4680783748626709, 0.4976178067071097, 0.4571340424673898, 0.46352083342415945, 0.41162921701158794, 0.3988526889256069, 0.4040657877922058, 0.3828118358339582, 0.41764250823429655, 0.4228106311389378, 0.3967910579272679, 0.37549478667122976, 0.38239872455596924], "val_accuracy": [0.1836666613817215, 0.5223333239555359, 0.6306666731834412, 0.6823333501815796, 0.718999981880188, 0.6823333501815796, 0.6930000185966492, 0.7523333430290222, 0.7736666798591614, 0.7576666474342346, 0.7946666479110718, 0.7613333463668823, 0.7903333306312561, 0.7793333530426025, 0.8306666612625122, 0.8320000171661377, 0.8149999976158142, 0.8423333168029785, 0.8053333163261414, 0.8166666626930237, 0.8286666870117188, 0.8386666774749756, 0.8423333168029785]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 4, 5, 4, 4, 8, 9, 8, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [1, 1, 2, 1, 0, 1, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [91, 12, 80, 63, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [46], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 0, 9, 8, 5, 0, 0, 4, 0, 8], [2, 0, 0, 0, 3, 0, 2], [94, 42, 57, 12, 41]], "fitness": -0.8054285645484924, "mapping_values": [1, 17, 17, 12, 5, 2, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 7, 5, 2, 2], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.pow(alpha, tf.math.add(alpha, alpha)), tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)))), grad)), tf.math.add(alpha, tf.math.sqrt(tf.math.square(tf.math.pow(tf.math.add(alpha, alpha), tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32))))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.math.negative(beta), tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2033814055619536, 1.9633651246421169, 1.604339013010236, 1.1914916772569064, 1.0386111105296119, 0.8649795230322069, 0.8490789280103387, 0.7608969754877344, 0.7341476147988248, 0.6920791158208821, 0.6558299765390349, 0.6336847901848156, 0.5879903106153476, 0.6109570773238945, 0.5848220997498477, 0.5634464162011047, 0.5482486509226568, 0.5544666464121555, 0.529512340925499, 0.5282944096644729, 0.5082632727185891, 0.5025561053707867, 0.48438876320137686], "accuracy": [0.2592788338661194, 0.3292827904224396, 0.4756307005882263, 0.5801082849502563, 0.6232994198799133, 0.6701889038085938, 0.6816800832748413, 0.7080966830253601, 0.7165499925613403, 0.7333245277404785, 0.750231146812439, 0.7577598690986633, 0.7732135653495789, 0.7721568942070007, 0.7770439982414246, 0.7812706232070923, 0.7967243194580078, 0.7881389260292053, 0.8021397590637207, 0.7997622489929199, 0.8109893202781677, 0.8092722296714783, 0.8191784620285034], "val_loss": [1.8831336157662528, 1.2617839404514857, 1.2106257166181291, 0.7477982044219971, 0.747464827128819, 0.7032147475651332, 0.5939527750015259, 0.6012755291802543, 0.5755629198891776, 0.5017273426055908, 0.4847968987056187, 0.4859776326588222, 0.46375281470162527, 0.5223430054528373, 0.4593515396118164, 0.4065130949020386, 0.39340390477861675, 0.382915130683354, 0.4212301714079721, 0.411020176751273, 0.38696636472429546, 0.37617229563849314, 0.3815294929913112], "val_accuracy": [0.18133333325386047, 0.5256666541099548, 0.5146666765213013, 0.668666660785675, 0.6380000114440918, 0.6976666450500488, 0.7110000252723694, 0.7383333444595337, 0.7263333201408386, 0.7746666669845581, 0.7689999938011169, 0.7616666555404663, 0.7816666960716248, 0.7599999904632568, 0.7689999938011169, 0.8293333053588867, 0.8299999833106995, 0.840666651725769, 0.8113333582878113, 0.8186666369438171, 0.8399999737739563, 0.8349999785423279, 0.828000009059906]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 2, 5, 4, 4, 1, 9, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 1, 2, 0, 1, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [91, 12, 93, 49, 40, 73, 46, 33, 24], [1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [7, 5], [71], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 0, 8, 8, 5, 0, 0, 4, 0, 8], [2, 0, 0, 0, 3, 0, 2], [47, 42, 57, 12, 41]], "fitness": -0.666857123374939, "mapping_values": [1, 18, 18, 11, 7, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 7, 4, 3, 2], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(grad, tf.math.add(alpha, tf.math.square(alpha))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(alpha, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, alpha)), tf.math.pow(tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(grad))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.sqrt(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [1.8806529289160454, 1.1672579697834549, 0.9066780395889483, 0.7603009908411245, 0.7011132928610573, 0.6683976021834557, 0.6863388203673941, 0.6660952896348175, 0.6219765058582202, 0.6244405273905582, 0.6162152362852332, 0.6689267603633993, 0.6624229900620601, 0.6998631865703324, 0.7070857724650913, 0.7367981783922685, 0.7571030243465598], "accuracy": [0.3605864346027374, 0.585919976234436, 0.6631884574890137, 0.7209087014198303, 0.7420420050621033, 0.7518161535263062, 0.7508915662765503, 0.7486461400985718, 0.7667415142059326, 0.769911527633667, 0.7732135653495789, 0.7589486241340637, 0.7623828053474426, 0.748778223991394, 0.7454761862754822, 0.7441553473472595, 0.7359662055969238], "val_loss": [1.038451841899327, 0.6488227503640311, 0.5563442366463798, 0.5330702407019479, 0.4626643657684326, 0.4797962393079485, 0.46948955740247456, 0.4427382264818464, 0.4376069392476763, 0.4407973885536194, 0.4251132607460022, 0.4295488340514047, 0.48662781715393066, 0.45685672760009766, 0.4659926550728934, 0.474896958896092, 0.5116931710924421], "val_accuracy": [0.5776666402816772, 0.6943333148956299, 0.7563333511352539, 0.7670000195503235, 0.7946666479110718, 0.7903333306312561, 0.7883333563804626, 0.8133333325386047, 0.7940000295639038, 0.8180000185966492, 0.8240000009536743, 0.8309999704360962, 0.8109999895095825, 0.8076666593551636, 0.8053333163261414, 0.7956666946411133, 0.7706666588783264]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 4, 5, 4, 4, 8, 9, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 1, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [91, 12, 93, 63, 40, 73, 46, 33, 24], [1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 1], [1, 3], [2, 5], [71], [0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 0, 0, 2, 5, 0, 0, 4, 0, 8], [2, 0, 0, 0, 3, 0, 2], [55, 42, 57, 12, 41]], "fitness": -0.40857142210006714, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 3, 2, 1, 0, 15, 10, 5, 3], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), sigma)), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(beta, tf.math.negative(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.add(tf.math.square(tf.math.negative(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.pow(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma))))))", "other_info": {"loss": [2.434471752570841, 2.4117300021665726, 1.9850043943923117, 2.269480064040902, 2.260705156223003, 2.3436550251040336, 2.3161495310078366], "accuracy": [0.22440892457962036, 0.14951789379119873, 0.3273015320301056, 0.2694492042064667, 0.24686303734779358, 0.14291374385356903, 0.13129045069217682], "val_loss": [1.9687507493155343, 1.7775389807564872, 1.8116586548941476, 1.8655672754560197, 1.7966166223798479, 1.930873121534075, 2.1041902133396695], "val_accuracy": [0.16466666758060455, 0.2549999952316284, 0.25466665625572205, 0.20233333110809326, 0.24400000274181366, 0.14900000393390656, 0.16599999368190765]}}, {"genotype": [[0], [1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 4, 5, 4, 4, 8, 9, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [1, 1, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [91, 12, 93, 63, 40, 73, 46, 33, 24], [1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 0, 8, 8, 5, 0, 0, 4, 0, 8], [2, 0, 0, 0, 3, 0, 2], [94, 42, 57, 12, 41]], "fitness": -0.15857142210006714, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 9, 6, 3, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.sqrt(tf.math.sqrt(tf.math.square(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))))", "other_info": {"loss": [2.347196651818242, 2.308435089757272, 1.8925296880502616, 1.8835930857975185, 1.4513502582157796, 1.429402635145055, 1.578054613015907, 2.04061461471217, 2.358411650663322, 2.310583650821771], "accuracy": [0.2583542466163635, 0.1990489959716797, 0.42464667558670044, 0.3953242599964142, 0.5069343447685242, 0.5325584411621094, 0.4802536070346832, 0.33218860626220703, 0.20737022161483765, 0.19878484308719635], "val_loss": [1.9734469141278947, 1.6285129615238734, 1.5154880114964075, 1.1063974584851946, 0.8839412587029594, 1.0762794017791748, 1.4364207131522042, 1.87856354032244, 1.8998889923095703, 1.997382436479841], "val_accuracy": [0.10066666454076767, 0.492333322763443, 0.3776666522026062, 0.5659999847412109, 0.6463333368301392, 0.5413333177566528, 0.39933332800865173, 0.2473333328962326, 0.2436666637659073, 0.12833333015441895]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 4, 5, 9, 4, 8, 9, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [0, 1, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [91, 12, 93, 63, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [2, 3, 0, 8, 8, 5, 6, 0, 4, 0, 8], [2, 0, 0, 0, 3, 0, 2], [55, 42, 24, 12, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 7, 2, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha))), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08308017253875732, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 4, 5, 6, 4, 8, 4, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 1, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [91, 32, 93, 63, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 0, 8], [2, 0, 0, 0, 3, 0, 2], [47, 42, 57, 12, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 26, 26, 15, 11, 5, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 10, 6, 4, 3], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.square(tf.math.pow(grad, tf.math.add(alpha, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))))))), tf.math.square(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(grad, tf.math.add(alpha, alpha)))))), tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.sqrt(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.square(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [122769238096348.45, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.05428609251976013, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 4, 5, 4, 4, 8, 9, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 1, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [91, 12, 93, 63, 40, 73, 46, 33, 24], [1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [2, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [1, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 1], [9, 3], [2, 5], [71], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [2, 6, 0, 8, 3, 5, 0, 0, 4, 0, 8], [2, 2, 0, 0, 3, 0, 2], [50, 42, 57, 12, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 15, 10, 5, 2], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.divide_no_nan(beta, beta), tf.math.negative(tf.math.sqrt(tf.math.multiply(tf.math.square(tf.math.negative(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.pow(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma)))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 4, 5, 4, 4, 8, 9, 6, 9, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 1, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [91, 12, 93, 63, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1], [3, 3, 2, 8, 8, 3, 4, 0, 4, 0, 8, 1, 9, 7, 9, 3, 3, 6, 8, 7, 0, 0, 0, 3, 2], [2, 0, 0, 0, 3, 0, 2, 1, 1, 1, 1, 2, 3], [47, 16, 57, 12, 41, 45]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 38, 25, 13, 6], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(grad, alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(beta, tf.math.add(tf.math.sqrt(tf.math.sqrt(tf.math.multiply(tf.math.pow(tf.math.negative(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))), sigma))), tf.math.subtract(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))))), tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(tf.math.negative(beta), alpha)), tf.math.negative(alpha)), tf.math.negative(tf.math.multiply(alpha, alpha))), tf.math.add(beta, sigma)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 4, 5, 4, 4, 8, 9, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [1, 1, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [91, 12, 93, 63, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [1, 0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [3, 3, 3, 7, 8, 5, 0, 0, 4, 0, 8, 1, 5, 2, 1, 7, 8, 4, 8, 8, 5, 7, 6, 2, 8, 9], [0, 0, 0, 0, 0, 0, 2, 0, 3, 1, 0, 2, 3], [58, 6, 62, 12, 41, 10, 35, 35, 69]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 39, 26, 13, 9], "tree_depth": 27, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.math.multiply(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.sqrt(tf.math.square(tf.math.negative(tf.math.negative(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32))))), tf.math.pow(tf.math.negative(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)), tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)))), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.subtract(tf.math.square(tf.math.add(tf.math.subtract(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.add(tf.math.sqrt(tf.math.pow(tf.math.sqrt(tf.math.sqrt(tf.math.square(beta))), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))), tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.math.sqrt(beta))))), tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32))), sigma)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 4, 5, 4, 4, 8, 9, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [0, 1, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [91, 12, 93, 63, 40, 73, 46, 33, 24], [1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [1, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 0, 2, 8, 5, 0, 0, 4, 0, 8], [2, 0, 0, 0, 3, 0, 2], [58, 42, 57, 12, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 16, 11, 5, 3], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.math.negative(tf.math.add(tf.math.sqrt(tf.math.square(beta)), tf.math.negative(tf.math.negative(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))))), tf.math.pow(tf.math.negative(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 4, 5, 4, 4, 8, 9, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 1, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [91, 12, 93, 63, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [9, 3, 5, 8, 8, 5, 0, 0, 4, 0, 8], [2, 1, 0, 0, 3, 0, 2], [47, 42, 57, 12, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3025233260613107, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 4, 5, 4, 4, 8, 9, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [0, 1, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [91, 12, 93, 63, 40, 73, 46, 33, 24], [1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [5, 3, 0, 5, 8, 5, 3, 0, 4, 0, 8], [2, 0, 0, 0, 3, 0, 2], [55, 42, 57, 12, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 15, 11, 4, 3], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.multiply(tf.math.negative(beta), tf.math.square(tf.math.sqrt(tf.math.square(tf.math.multiply(tf.math.negative(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.negative(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [2, 4, 5, 4, 4, 8, 9, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [1, 1, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [91, 12, 93, 49, 40, 73, 46, 33, 24], [1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 1], [2, 3], [7, 5], [71], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [6, 3, 0, 3, 8, 5, 3, 0, 4, 0, 8, 4, 6, 0, 8, 1, 9, 1, 8, 2, 3, 9, 5, 6], [1, 0, 0, 0, 3, 0, 2, 1, 0, 2, 3], [22, 31, 57, 70, 41, 0, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 5, 3, 2, 1, 0, 35, 24, 11, 7], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(alpha, tf.math.negative(tf.math.multiply(tf.math.sqrt(tf.math.square(tf.math.multiply(tf.math.negative(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.negative(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))), sigma))), tf.math.pow(tf.math.divide_no_nan(tf.math.negative(tf.math.sqrt(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.sqrt(tf.math.add(tf.math.multiply(beta, alpha), tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))), tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.divide_no_nan(beta, sigma))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [3, 4, 6, 3, 4, 8, 9, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 1, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [91, 12, 93, 63, 40, 73, 46, 33, 24], [1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [4, 5], [71], [0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 0, 8, 3, 5, 0, 0, 4, 0, 8], [2, 0, 0, 0, 3, 0, 2], [55, 42, 57, 12, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 21, 21, 13, 8, 4, 5, 5, 2, 3, 1, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.pow(grad, alpha), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32))), grad)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.pow(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))))), tf.math.square(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)))))), tf.math.divide_no_nan(grad, tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07924976944923401, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 4, 5, 4, 4, 8, 9, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [1, 1, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [91, 12, 93, 63, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 1], [2, 3], [2, 5], [71], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 0, 8, 8, 5, 7, 0, 4, 0, 8], [2, 0, 3, 0, 3, 0, 2], [11, 6, 57, 12, 41]], "fitness": -0.037142857909202576, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 3, 2, 1, 0, 7, 4, 3, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), sigma)), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.math.negative(beta), tf.math.sqrt(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [2.3028665177810463, 2.3040223384908067, 2.3029861759752124, 2.302373065389206, 2.3019967241971218, 2.3022308591460474], "accuracy": [0.09166556596755981, 0.08942015469074249, 0.09298639744520187, 0.09074098616838455, 0.09549596905708313, 0.08677849918603897], "val_loss": [1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 2, 5, 4, 4, 1, 9, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [3, 1, 2, 0, 1, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [91, 12, 93, 49, 40, 73, 46, 33, 24], [1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 1], [9, 3], [7, 5], [71], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 0, 3, 8, 5, 3, 0, 4, 0, 8], [2, 0, 1, 0, 3, 0, 2], [22, 31, 57, 12, 41]], "fitness": -0.037142857909202576, "mapping_values": [1, 5, 5, 2, 3, 0, 3, 3, 1, 2, 0, 1, 1, 1, 0, 1, 10, 6, 4, 2], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(grad, tf.math.add(alpha, alpha)), grad)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.math.negative(beta), tf.math.multiply(tf.math.sqrt(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), alpha)), tf.math.square(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3028665177810463, 2.3040223384908067, 2.3029861759752124, 2.302373065389206, 2.3019967241971218, 2.3022308591460474], "accuracy": [0.09166556596755981, 0.08942015469074249, 0.09298639744520187, 0.09074098616838455, 0.09549596905708313, 0.08677849918603897], "val_loss": [1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 4, 5, 4, 4, 8, 9, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 1, 1, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [91, 12, 93, 49, 40, 73, 46, 33, 24], [1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [1, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 1], [9, 3], [6, 5], [71], [1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 0, 8, 3, 5, 0, 0, 4, 0, 8], [3, 1, 0, 0, 3, 0, 2], [22, 31, 57, 12, 41]], "fitness": -0.037142857909202576, "mapping_values": [1, 3, 3, 1, 2, 0, 5, 5, 2, 3, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, grad), alpha), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3028665177810463, 2.3040223384908067, 2.3029861759752124, 2.302373065389206, 2.3019967241971218, 2.3022308591460474], "accuracy": [0.09166556596755981, 0.08942015469074249, 0.09298639744520187, 0.09074098616838455, 0.09549596905708313, 0.08677849918603897], "val_loss": [1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 4, 5, 4, 4, 8, 9, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [1, 1, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [91, 12, 93, 63, 40, 73, 46, 33, 24], [1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [0, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 1], [3, 3], [2, 5], [71], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 0, 8, 8, 5, 0, 0, 4, 0, 8], [2, 0, 0, 0, 3, 0, 2], [3, 42, 57, 12, 41]], "fitness": -0.034857142716646194, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 5, 3, 2, 1, 0, 3, 1, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), sigma)), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3030460552847414, 2.3053741051992955, 2.306755951508681, 2.3096656708937155, 2.314192460055963, 2.3205821943352363], "accuracy": [0.09087307006120682, 0.08558975160121918, 0.08387266844511032, 0.07528728246688843, 0.07119271159172058, 0.052569013088941574], "val_loss": [1.9710172244480677, 1.9727717127118791, 1.9756461552211217, 1.9796676635742188, 1.9848582404000419, 1.9912379128592355], "val_accuracy": [0.032999999821186066, 0.027666667476296425, 0.019999999552965164, 0.014999999664723873, 0.009666666388511658, 0.007333333138376474]}}]