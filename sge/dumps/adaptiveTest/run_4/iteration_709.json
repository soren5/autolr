[{"genotype": [[0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 6, 2, 4, 5, 9, 6, 2, 2, 9, 4, 1, 4, 1, 2, 6, 2, 4, 3, 5, 0, 5, 6, 3, 4, 2, 7, 7, 1, 6, 8, 7, 6, 7, 4, 7, 9, 1], [0, 2, 2, 0, 2, 2, 0, 2, 1, 2, 1, 2, 1, 3, 2, 1, 1, 0, 2, 2, 1, 0, 2, 2, 3, 1, 2, 3, 3], [55, 60, 5, 53, 26, 73, 46, 33, 24], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 1, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 3, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [42, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.8362857103347778, "mapping_values": [1, 10, 10, 6, 4, 3, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [1.8781545159366735, 1.054255632582027, 0.7750102687962162, 0.6619458857812052, 0.595261826152736, 0.5596644277066256, 0.5226915067354796, 0.4961665482364232, 0.4698515346714408, 0.44643360425562767, 0.42234792768474994, 0.40520376228401295, 0.4007728440674021, 0.37613896296764676, 0.36889910024028993, 0.34973655362580164, 0.34287188794272466, 0.3460650199306104, 0.3313421177401157, 0.3176650103797152, 0.30255101230071757, 0.29935401446626264, 0.29874331684491073, 0.29038425091628967, 0.29253158450378575, 0.2689836695170311, 0.2591913429706041, 0.24916313406561721, 0.24374759293873202, 0.24730057894136487], "accuracy": [0.360190212726593, 0.6062607169151306, 0.6992471218109131, 0.7461365461349487, 0.7666094303131104, 0.7893276810646057, 0.8058380484580994, 0.8129705190658569, 0.8252542614936829, 0.8298771381378174, 0.844010055065155, 0.8494254350662231, 0.8454629778862, 0.8568220734596252, 0.8584070801734924, 0.8659358024597168, 0.8745211958885193, 0.8639545440673828, 0.8720116019248962, 0.8761062026023865, 0.8861445188522339, 0.8825782537460327, 0.8848236799240112, 0.889578640460968, 0.8864086866378784, 0.8949940800666809, 0.8989565372467041, 0.9059569239616394, 0.9054285883903503, 0.9058248400688171], "val_loss": [0.9787888526916504, 0.6007973807198661, 0.5134069068091256, 0.47981641973767963, 0.4315027509416853, 0.4053562453814915, 0.3851831981113979, 0.36571161236081806, 0.35110046182359966, 0.3438823478562491, 0.3235176205635071, 0.32687652111053467, 0.33169407503945486, 0.32421326637268066, 0.3021736741065979, 0.3107589738709586, 0.31456945623670307, 0.292441053049905, 0.30151641368865967, 0.30172976425715853, 0.29632318019866943, 0.28427222796848844, 0.2993721791676113, 0.30491745471954346, 0.28632332597460064, 0.28872134004320416, 0.2930460657392229, 0.29246152298791067, 0.3010389379092625, 0.29627901315689087], "val_accuracy": [0.5653333067893982, 0.7276666760444641, 0.765666663646698, 0.781333327293396, 0.8019999861717224, 0.8209999799728394, 0.8356666564941406, 0.8513333201408386, 0.859333336353302, 0.8510000109672546, 0.8686666488647461, 0.8613333106040955, 0.8613333106040955, 0.8606666922569275, 0.8740000128746033, 0.8740000128746033, 0.8693333268165588, 0.8796666860580444, 0.874666690826416, 0.8786666393280029, 0.8799999952316284, 0.8820000290870667, 0.875, 0.8740000128746033, 0.8859999775886536, 0.8796666860580444, 0.8803333044052124, 0.8830000162124634, 0.8853333592414856, 0.8843333125114441]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 6, 3, 9, 5, 1, 6, 2, 1, 2, 2, 9, 4, 2, 2, 6, 2, 4, 3, 4, 4, 8, 2, 3, 4, 2, 7, 7, 2, 6, 8, 7, 6, 7], [0, 1, 2, 1, 2, 0, 2, 2, 1, 0, 2, 2, 3, 3, 2, 2, 1, 0, 2, 2, 1, 0, 1, 3, 3, 3, 2, 2], [71, 60, 5, 49, 29, 73, 46, 33, 24], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 8, 5, 1, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 2, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [42, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.7914285659790039, "mapping_values": [1, 62, 62, 34, 28, 7, 7, 7, 4, 3, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.add(alpha, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.add(alpha, tf.math.add(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32), alpha)), tf.math.add(alpha, grad)))), tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))), tf.math.pow(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)))), tf.math.pow(grad, tf.math.add(alpha, tf.math.multiply(grad, grad))))), tf.math.add(alpha, tf.math.pow(tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.multiply(grad, tf.math.add(alpha, tf.math.pow(grad, grad))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), tf.math.add(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, grad))))))), grad))))))))))), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, grad)))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.sqrt(tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [1.92091614556681, 1.4433286109415926, 0.8729837695447886, 0.7222780765890051, 0.6685759396663888, 0.6345984399783188, 0.5964256029370879, 0.5785741259031103, 0.7717934539368155, NaN, NaN], "accuracy": [0.36362436413764954, 0.5037643909454346, 0.6794346570968628, 0.7239466309547424, 0.7479857206344604, 0.761590301990509, 0.7730814814567566, 0.7823272943496704, 0.7168141603469849, 0.1802932173013687, 0.09998679161071777], "val_loss": [1.3812732696533203, 0.7086014407021659, 0.5391580888203212, 0.5029618740081787, 0.4751345600400652, 0.456460850579398, 0.4518498352595738, 0.45792078971862793, 0.8896502426692418, NaN, NaN], "val_accuracy": [0.4176666736602783, 0.7103333473205566, 0.7566666603088379, 0.7723333239555359, 0.7900000214576721, 0.8140000104904175, 0.7873333096504211, 0.796999990940094, 0.6056666374206543, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [3, 0, 3, 9, 4, 0, 6, 2, 1, 5, 2, 1, 4, 2, 0, 2, 2, 2, 9, 3, 0, 8, 2, 3, 4, 2, 8, 7, 2, 5, 4, 2, 9, 7, 4, 8, 6, 6, 0, 7, 5, 0, 7, 3, 8, 2, 4, 0, 2, 6, 5, 0, 6, 2, 4, 2, 6, 8, 9, 5, 9, 5], [0, 0, 1, 2, 2, 0, 2, 2, 1, 0, 2, 2, 3, 3, 2, 2, 1, 0, 2, 2, 1, 0, 1, 3, 3, 3, 2, 2], [20, 77, 5, 49, 29, 57, 46, 33, 24], [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 8, 5, 1, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 0, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [27, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [1, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.7117142677307129, "mapping_values": [1, 4, 4, 2, 2, 2, 9, 9, 5, 4, 2, 1, 1, 0, 1, 0, 3, 1, 2, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)))), tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.sqrt(tf.math.square(tf.math.subtract(tf.math.add(tf.math.add(beta, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, sigma)", "other_info": {"loss": [2.2991508456300576, 2.2946761987149804, 2.290220240969715, 2.284600165856749, 2.27841231473732, 2.2729412052908815, 2.268440692337544, 2.2626855628144993, 2.257115977614421, 2.2517825298777914, 2.243892453901205, 2.2389499660275787, 2.231584960758379, 2.2238774217744908, 2.2176306437916997, 2.2075526160712666, 2.200155119586693, 2.189463841271139, 2.1815570062413867, 2.16761084242803, 2.1594930588844794, 2.1472837008253425, 2.1351529410045695, 2.1213399397147534, 2.108742722178872, 2.0928607676967954, 2.075360277813534, 2.0583541512316117, 2.0371640357421987, 2.0212320298913005, 1.998268884344029, 1.9787691808285384, 1.9579151571702333, 1.9302935397793446, 1.9122097119206782, 1.8812595878090164, 1.858615025175309, 1.8378474735675188, 1.8043320580968578, 1.7766220359880345, 1.755666731654409, 1.7228029755049568, 1.7071707809857877, 1.6740932382722935, 1.655359242428815, 1.6194479986661146, 1.595641182398264, 1.5646263776973663, 1.5445678720794191, 1.5310102907138463, 1.5058707703751752, 1.485101885059333, 1.462872826821611, 1.4375494863410367, 1.4176625297243066, 1.4021117690059535, 1.3778910866156546, 1.3601224688396572, 1.3470594483973752, 1.334127907881474, 1.3225294095240785, 1.3059381764121831, 1.3008713250808304, 1.2781042594321415, 1.273872618614769, 1.2426384606806673, 1.2422328752816991, 1.225251703529373, 1.223598130926118, 1.2062934632188593, 1.192366283441563, 1.1882862840519448, 1.168722285491884, 1.1639682738347343, 1.170019457935736, 1.1566267862705397, 1.1462691525552628, 1.1352631456076334, 1.1401909808315196, 1.1141629530816362, 1.1190528566055389, 1.108453885029808, 1.1095452479651071, 1.0857890151699914, 1.0763352247922648, 1.0765409123832996, 1.073290936777762, 1.066395323290061, 1.0504798006151708, 1.052437781138175, 1.046249909801506, 1.0387052229492812, 1.0241138218983117, 1.0317069865520117, 1.0293344565984706, 1.0197545572467814, 1.0118334991836497, 1.0032647284912222, 0.9964328725592114, 1.0007864547805574], "accuracy": [0.1018359512090683, 0.10777968913316727, 0.11834631860256195, 0.13934750854969025, 0.14621582627296448, 0.17461365461349487, 0.1764628142118454, 0.19759608805179596, 0.20935148000717163, 0.2254655957221985, 0.24633470177650452, 0.24554219841957092, 0.2627129852771759, 0.27777042984962463, 0.282129168510437, 0.2991678714752197, 0.3066965937614441, 0.32479196786880493, 0.3269053101539612, 0.3420948386192322, 0.33945319056510925, 0.34883105754852295, 0.35741645097732544, 0.36626601219177246, 0.3683793544769287, 0.3761722445487976, 0.38304054737091064, 0.39202219247817993, 0.39902257919311523, 0.40707963705062866, 0.41368380188941956, 0.42504292726516724, 0.4208162724971771, 0.43785497546195984, 0.4353454113006592, 0.44327038526535034, 0.4485536813735962, 0.4523840844631195, 0.45647865533828735, 0.46572446823120117, 0.4667811393737793, 0.48170650005340576, 0.4741777777671814, 0.47985735535621643, 0.4834235906600952, 0.4983489513397217, 0.5000660419464111, 0.5138026475906372, 0.5135384798049927, 0.5061418414115906, 0.5184255838394165, 0.5192180871963501, 0.523048460483551, 0.5283318161964417, 0.5329546928405762, 0.5344076156616211, 0.5460308790206909, 0.5525029897689819, 0.5499933958053589, 0.5519746541976929, 0.5610883831977844, 0.5595033764839172, 0.5588429570198059, 0.5727116465568542, 0.5591071248054504, 0.5851274728775024, 0.5744287371635437, 0.5844670534133911, 0.5774666666984558, 0.5802403688430786, 0.5945053696632385, 0.5881653428077698, 0.598599910736084, 0.5978074073791504, 0.5892220139503479, 0.5946374535560608, 0.6070532202720642, 0.6012415885925293, 0.6001849174499512, 0.6081098914146423, 0.6136573553085327, 0.6075815558433533, 0.6132611036300659, 0.6206578016281128, 0.6280544400215149, 0.6247523427009583, 0.6255448460578918, 0.6262052655220032, 0.6350548267364502, 0.6338660717010498, 0.6357152462005615, 0.6366398334503174, 0.6413947939872742, 0.6411306262016296, 0.6382247805595398, 0.6386210322380066, 0.6433760523796082, 0.6469422578811646, 0.6468101739883423, 0.6416589617729187], "val_loss": [1.9653735842023576, 1.9603823253086634, 1.9554370471409388, 1.950502599988665, 1.9455342292785645, 1.9404355457850866, 1.9352622032165527, 1.9299486024039132, 1.9243974685668945, 1.918689250946045, 1.912649495261056, 1.9063758850097656, 1.8996870858328683, 1.8925747190202986, 1.8851266588483537, 1.8771256719316756, 1.8687047277178084, 1.8595482962472099, 1.8499266079493932, 1.8394310133797782, 1.8284553119114466, 1.816641126360212, 1.804194518498012, 1.790876797267369, 1.7768188885280065, 1.7618112564086914, 1.7457576479230608, 1.7287446430751257, 1.7106967653547014, 1.6918963704790388, 1.6719153949192591, 1.651007992880685, 1.6291844504220145, 1.6062102317810059, 1.5826968465532576, 1.5580707618168421, 1.5330290453774589, 1.507559163229806, 1.4812321662902832, 1.454442058290754, 1.4277326038905553, 1.4005518640790666, 1.3736591679709298, 1.3467374188559396, 1.319918496268136, 1.293513366154262, 1.2674475737980433, 1.2416761602674211, 1.2167742933545793, 1.193213633128575, 1.170006241117205, 1.1478440080370222, 1.126595871789115, 1.1060019901820592, 1.0861797673361642, 1.0670723915100098, 1.0486572469983781, 1.0310913494655065, 1.0143320219857352, 0.9984395503997803, 0.9835141045706612, 0.9691850798470634, 0.9559951169150216, 0.9427295071738107, 0.9306259495871407, 0.9181713717324393, 0.9067511558532715, 0.8957315853663853, 0.8854530198233468, 0.8754337174551827, 0.865502119064331, 0.8564202444893974, 0.847150479044233, 0.8385183981486729, 0.8304684162139893, 0.8228452546255929, 0.8152124541146415, 0.8077993222645351, 0.8012643711907523, 0.7946328265326363, 0.7883219037737165, 0.7823115927832467, 0.7767869404384068, 0.7710852452686855, 0.7652754443032401, 0.7595309700284686, 0.7543177434376308, 0.7488915579659599, 0.7436519690922329, 0.7388701779501778, 0.7340097427368164, 0.729230420930045, 0.7247379847935268, 0.7209197453090123, 0.7169664927891323, 0.7130588293075562, 0.7092116900852748, 0.7054570402417865, 0.7016316141401019, 0.6983086211340768], "val_accuracy": [0.07333333045244217, 0.11433333158493042, 0.17166666686534882, 0.21533332765102386, 0.2590000033378601, 0.2953333258628845, 0.3233333230018616, 0.34700000286102295, 0.36633333563804626, 0.3776666522026062, 0.3889999985694885, 0.39500001072883606, 0.4090000092983246, 0.4156666696071625, 0.42800000309944153, 0.4359999895095825, 0.44600000977516174, 0.4493333399295807, 0.4533333480358124, 0.45766666531562805, 0.46299999952316284, 0.4726666808128357, 0.4819999933242798, 0.492333322763443, 0.49933332204818726, 0.5040000081062317, 0.5146666765213013, 0.5196666717529297, 0.528333306312561, 0.5383333563804626, 0.5416666865348816, 0.5479999780654907, 0.5523333549499512, 0.5580000281333923, 0.5640000104904175, 0.5686666369438171, 0.5743333101272583, 0.578000009059906, 0.5836666822433472, 0.5860000252723694, 0.5916666388511658, 0.5953333377838135, 0.596666693687439, 0.6023333072662354, 0.6043333411216736, 0.6073333621025085, 0.609000027179718, 0.6116666793823242, 0.6183333396911621, 0.6259999871253967, 0.6313333511352539, 0.6346666812896729, 0.6396666765213013, 0.6460000276565552, 0.6470000147819519, 0.6503333449363708, 0.6549999713897705, 0.6623333096504211, 0.6626666784286499, 0.6656666398048401, 0.6679999828338623, 0.6726666688919067, 0.6753333210945129, 0.6769999861717224, 0.6800000071525574, 0.6796666383743286, 0.6863333582878113, 0.6866666674613953, 0.6890000104904175, 0.6883333325386047, 0.6890000104904175, 0.6899999976158142, 0.6893333196640015, 0.690666675567627, 0.6919999718666077, 0.6940000057220459, 0.6943333148956299, 0.6946666836738586, 0.6930000185966492, 0.6946666836738586, 0.6953333616256714, 0.6953333616256714, 0.6963333487510681, 0.6983333230018616, 0.6993333101272583, 0.7006666660308838, 0.7013333439826965, 0.7016666531562805, 0.70333331823349, 0.7039999961853027, 0.7049999833106995, 0.7083333134651184, 0.7099999785423279, 0.7086666822433472, 0.7093333601951599, 0.7086666822433472, 0.7106666564941406, 0.7120000123977661, 0.7120000123977661, 0.7146666646003723]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 9, 0, 9, 5, 1, 6, 2, 1, 2, 2, 9, 4, 2, 5, 2, 2, 4, 3, 4, 0, 8, 2, 8, 4, 5, 7, 7, 2, 6, 8, 8, 6, 7], [0, 1, 1, 2, 2, 1, 2, 2, 1, 0, 2, 1, 0, 3, 2, 2, 2, 0, 2, 2, 1, 0, 1, 2, 1, 0, 0], [70, 60, 5, 49, 29, 73, 46, 33, 24], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 8, 5, 1, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 2, 1, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [42, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 2, 9, 9, 5, 4, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.sqrt(grad), tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, beta)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 9, 3, 9, 5, 3, 6, 2, 1, 5, 2, 1, 4, 2, 2, 2, 2, 4, 9, 3, 0, 8, 2, 3, 4, 2, 8, 7, 2, 5, 4, 2, 6, 7, 4, 8, 6, 6, 0, 7, 5, 0, 7, 3, 8, 2, 4, 0, 2, 6, 5, 0, 6, 2, 4, 2, 6, 8, 9, 5, 9, 5], [1, 1, 2, 1, 2, 0, 2, 0, 1, 0, 2, 2, 3, 2, 2, 2, 1, 0, 2, 2, 1, 1, 2, 3, 3, 2, 2, 0, 2, 0, 3, 1, 2, 2, 3, 1], [55, 60, 5, 53, 26, 73, 46, 33, 24], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 8, 1, 1, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 3, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [39, 95, 54, 66, 83], [0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 1, 8, 8, 4, 4, 1, 1, 1, 1, 0, 1, 3, 1, 2, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 9, 3, 9, 5, 1, 6, 2, 8, 2, 2, 9, 4, 2, 2, 6, 2, 4, 3, 4, 4, 8, 2, 3, 2, 2, 6, 7, 2, 6, 8, 7, 6, 7], [0, 1, 1, 2, 2, 1, 2, 2, 1, 0, 2, 2, 0, 3, 2, 2, 1, 0, 2, 2, 1, 0, 1, 2, 1, 0, 0], [32, 60, 5, 49, 29, 73, 46, 33, 24], [1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 8, 1, 1, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [1, 2, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [42, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 2, 12, 12, 7, 5, 1, 1, 1, 0, 1, 0, 3, 1, 2, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.subtract(tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(beta, beta), tf.math.square(tf.math.add(beta, tf.math.negative(beta))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 9, 3, 9, 5, 1, 6, 2, 8, 2, 2, 9, 4, 2, 2, 6, 2, 4, 3, 4, 4, 8, 2, 3, 2, 2, 6, 7, 2, 6, 8, 7, 6, 7], [0, 1, 2, 1, 2, 0, 2, 2, 1, 0, 2, 2, 3, 3, 2, 2, 1, 0, 2, 2, 1, 0, 1, 3, 3, 3, 2, 2], [65, 60, 5, 49, 29, 73, 46, 33, 24], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 8, 5, 5, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 2, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [42, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [1, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 2, 6, 6, 4, 2, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.sqrt(tf.math.square(tf.math.add(beta, tf.math.square(tf.math.add(beta, beta)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.302602998364194, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0], [0, 6, 3, 9, 5, 1, 6, 2, 1, 2, 2, 9, 4, 2, 2, 6, 2, 4, 3, 4, 4, 8, 2, 3, 4, 2, 7, 7, 2, 6, 8, 7, 6, 7], [0, 2, 2, 0, 2, 2, 0, 2, 1, 2, 1, 2, 1, 3, 2, 1, 1, 0, 2, 2, 1, 0, 2, 2, 3, 1, 2, 3, 3], [87, 60, 5, 53, 26, 73, 46, 33, 24], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 1, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 3, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [42, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [4, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 9, 9, 6, 3, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), grad)), tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07211729139089584, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0], [3, 6, 1, 9, 5, 1, 6, 0, 1, 2, 2, 9, 4, 2, 2, 6, 2, 4, 3, 4, 4, 8, 2, 3, 1, 2, 7, 7, 2, 6, 8, 7, 6, 7, 5, 5, 4, 8, 1, 9, 0, 7, 8, 8, 7, 8, 4, 7, 2, 9, 7, 6, 3, 7, 3, 5, 5], [0, 2, 2, 0, 2, 2, 0, 2, 1, 2, 1, 2, 1, 3, 2, 1, 1, 0, 2, 2, 1, 0, 2, 2, 3, 1, 2, 3, 3], [55, 60, 5, 53, 26, 73, 46, 33, 24], [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 1, 0, 1, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 0, 5, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [42, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 1], [9, 3], [0, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 12, 12, 7, 5, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, beta)))))), tf.math.square(tf.math.add(beta, tf.math.negative(beta)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [1179933616.159387, 22965014590.21635, 107696421816.9922, 295040071964.3017, 632946582896.5642, 1171951948730.8857], "accuracy": [0.09932637959718704, 0.09972262382507324, 0.10210011899471283, 0.09747721254825592, 0.09879804402589798, 0.10579843819141388], "val_loss": [4464626980.571428, 35706215277.71429, 120496460361.14285, 285605990985.1429, 557810506605.7142, 963879857590.8572], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1], [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1], [3, 6, 8, 9, 5, 1, 4, 2, 1, 6, 0, 4, 4, 4, 2, 4, 2, 4, 3, 4, 4, 8, 2, 3, 1, 2, 2, 7, 2, 6, 8, 0, 0, 7, 1, 8, 3, 2], [0, 0, 1, 0, 2, 1, 2, 2, 1, 0, 2, 1, 0, 3, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 1, 1], [71, 60, 5, 49, 29, 73, 46, 33, 52, 29], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [2, 8, 5, 1, 6, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 2, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [28, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [26], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 2, 5, 5, 3, 2, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(grad, tf.math.sqrt(tf.math.square(tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [917.689277184622, 16030.222968399155, 73433.321101902, 199278.71346668206, 425335.84259014664, 785013.0414162594], "accuracy": [0.09959053993225098, 0.09985470771789551, 0.10210011899471283, 0.09734513610601425, 0.09879804402589798, 0.10593052208423615], "val_loss": [3231.048897879464, 24555.686941964286, 81681.6875, 192300.97767857142, 374107.16071428574, 644794.4464285715], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1], [3, 6, 3, 9, 5, 1, 6, 2, 1, 2, 2, 9, 4, 2, 2, 6, 2, 4, 3, 4, 4, 8, 2, 3, 4, 9, 7, 7, 2, 6, 8, 7, 6, 7, 2, 0, 2, 3, 9, 2, 5, 9, 4, 5, 8, 0], [1, 1, 2, 1, 2, 0, 2, 2, 2, 0, 1, 2, 3, 2, 2, 2, 1, 2, 2, 2, 1, 0, 1, 3, 3, 2, 0, 2, 1, 3, 0, 2, 2, 1], [71, 60, 5, 49, 29, 73, 25, 33, 24], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [0, 8, 5, 1, 2, 5, 0, 1, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 2, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [27, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 58, 58, 33, 25, 6, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 53, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(tf.math.add(alpha, grad), alpha), tf.math.add(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(grad, grad))), tf.math.pow(grad, tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), alpha))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.pow(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), grad), tf.math.add(alpha, tf.math.add(grad, grad)))), tf.math.add(alpha, grad))))))))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), alpha))), tf.math.add(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.sqrt(grad)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)))), grad))))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07211729139089584, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 2, 3, 9, 3, 3, 6, 2, 1, 5, 2, 1, 4, 2, 2, 2, 2, 4, 9, 3, 0, 8, 2, 3, 4, 6, 8, 7, 2, 5, 4, 2, 6, 7, 4, 8, 6, 6, 0, 7, 5, 0, 7, 3, 8, 2, 4, 0, 2, 6, 5, 0, 6, 2, 4, 2, 6, 8, 9, 5, 9, 5], [0, 1, 2, 1, 2, 0, 2, 0, 1, 0, 2, 2, 3, 2, 2, 2, 2, 0, 2, 2, 1, 1, 2, 3, 3, 2, 2, 0, 2, 0, 3, 1, 2, 2, 3, 1], [20, 81, 5, 47, 29, 73, 46, 33, 24], [1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 8, 1, 1, 2, 6, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 2, 2, 2, 3, 3, 1, 4, 2, 4, 1, 3, 3, 2], [42, 95, 54, 66, 83], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 47, 47, 27, 20, 7, 13, 13, 7, 6, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 53, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(grad, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(alpha, tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), alpha)))))), tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), grad)))), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))))), grad)), grad), tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.multiply(grad, tf.math.add(alpha, tf.math.pow(grad, grad))), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), grad)))))), tf.math.sqrt(tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.sqrt(tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), beta)), tf.math.add(beta, beta))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(grad), tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1270637959241867, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 6, 2, 0, 5, 9, 6, 2, 2, 2, 5, 1, 4, 2, 2, 1, 2, 4, 3, 5, 0, 5, 6, 3, 4, 2, 7, 7, 1, 6, 8, 7, 6, 7, 4, 7, 9, 1], [0, 1, 2, 0, 2, 2, 0, 2, 1, 2, 1, 2, 1, 3, 2, 2, 1, 0, 2, 2, 1, 0, 2, 2, 3, 1, 2, 3, 3], [55, 60, 5, 53, 26, 73, 46, 33, 24], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [0, 9, 5, 1, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 3, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [42, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 1], [9, 3], [0, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 32, 32, 18, 14, 4, 2, 2, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))))), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(grad, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.subtract(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))), grad))), tf.math.add(alpha, tf.math.pow(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), alpha))), tf.math.add(grad, tf.math.add(alpha, tf.math.pow(alpha, grad)))))))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [1179933616.159387, 22965014590.21635, 107696421816.9922, 295040071964.3017, 632946582896.5642, 1171951948730.8857], "accuracy": [0.09932637959718704, 0.09972262382507324, 0.10210011899471283, 0.09747721254825592, 0.09879804402589798, 0.10579843819141388], "val_loss": [4464626980.571428, 35706215277.71429, 120496460361.14285, 285605990985.1429, 557810506605.7142, 963879857590.8572], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 6, 3, 9, 8, 1, 6, 2, 1, 8, 2, 9, 4, 2, 9, 6, 2, 4, 3, 9, 6, 8, 2, 3, 4, 2, 8, 5, 2, 6, 8, 7, 5, 0], [0, 1, 1, 2, 2, 1, 2, 2, 1, 0, 2, 1, 2, 3, 2, 2, 2, 0, 2, 2, 1, 0, 1, 2, 2, 0, 0, 3], [71, 60, 5, 49, 29, 73, 38, 33, 24], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 1, 5, 1, 4, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [1, 2, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [28, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [4, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [1, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 27, 27, 17, 10, 5, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.multiply(tf.math.add(alpha, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32), grad))))), tf.math.add(alpha, grad))), alpha), tf.math.pow(grad, tf.math.add(alpha, tf.math.add(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)))))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [1, 6, 2, 2, 5, 9, 6, 2, 2, 9, 4, 1, 4, 1, 2, 6, 2, 4, 3, 5, 0, 5, 6, 3, 4, 2, 7, 7, 1, 6, 8, 7, 6, 7, 4, 7, 9, 1], [0, 2, 1, 0, 2, 2, 0, 2, 1, 2, 1, 2, 1, 3, 2, 1, 1, 0, 2, 2, 1, 0, 2, 2, 3, 1, 2, 3, 3], [55, 60, 5, 53, 26, 73, 46, 33, 24], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 1, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 3, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [42, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.07085714489221573, "mapping_values": [1, 5, 5, 2, 3, 1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 3, 1, 2, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, sigma)", "other_info": {"loss": [2.301282815205155, 2.301756983057792, 2.3018732212632482, 2.300723883548606, 2.299515449832286, 2.2994577133927945, 2.2997610113325058, 2.299441474886335, 2.2996648253545535, 2.2998413503634505, 2.298595898659348, 2.2990846033062304, 2.299024747961375, 2.2987438009368146, 2.29957240674285, 2.298287565115184, 2.2985662652548386, 2.298987979351049], "accuracy": [0.09655263274908066, 0.09100515395402908, 0.09140139818191528, 0.0948355570435524, 0.09760929644107819, 0.10170386731624603, 0.09615638852119446, 0.10394927859306335, 0.10447761416435242, 0.09932637959718704, 0.10593052208423615, 0.10302469879388809, 0.10566636174917221, 0.11015717685222626, 0.09932637959718704, 0.10976093262434006, 0.10236428678035736, 0.10540219396352768], "val_loss": [1.9701734951564245, 1.9697323526654924, 1.9692465237208776, 1.968766689300537, 1.9686126027788435, 1.9686414854867118, 1.9687491825648717, 1.968761784689767, 1.9686613082885742, 1.9685279301234655, 1.9684648513793945, 1.9684299060276575, 1.96845919745309, 1.968510559626988, 1.9686476843697684, 1.9688316072736467, 1.9689502716064453, 1.9690977505275182], "val_accuracy": [0.03933333232998848, 0.045666664838790894, 0.05066666752099991, 0.058666665107011795, 0.06533333659172058, 0.06800000369548798, 0.070333331823349, 0.0729999989271164, 0.07633333653211594, 0.08033332973718643, 0.08266666531562805, 0.0860000029206276, 0.08633333444595337, 0.0860000029206276, 0.08399999886751175, 0.0806666687130928, 0.07999999821186066, 0.07966666668653488]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1], [3, 6, 2, 9, 5, 1, 6, 2, 1, 2, 2, 8, 4, 2, 2, 3, 2, 4, 3, 4, 4, 8, 2, 3, 4, 2, 7, 7, 2, 4, 4, 7, 6, 7, 9, 1, 9, 6, 1, 3, 6, 0, 1, 3, 3, 4, 2, 9, 5, 1, 5, 6, 5, 5, 7, 5, 9], [0, 1, 2, 1, 2, 0, 2, 2, 1, 2, 2, 2, 3, 3, 2, 2, 1, 0, 2, 2, 1, 0, 1, 1, 3, 3, 2, 2, 2, 0, 0, 1, 3, 0, 3, 3, 3, 0, 3], [71, 60, 87, 49, 49, 73, 46, 33, 24, 42, 96, 77, 49], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 8, 5, 1, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 2, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [42, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.037142857909202576, "mapping_values": [1, 96, 96, 57, 39, 13, 9, 9, 5, 4, 1, 1, 1, 0, 1, 0, 3, 1, 2, 0], "tree_depth": 71, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.add(tf.math.sqrt(alpha), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, alpha)))), tf.math.multiply(tf.math.pow(tf.math.add(alpha, tf.math.pow(grad, tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(grad, tf.math.add(alpha, grad)), grad), grad)), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))))))), tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.pow(tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))))), grad)), tf.math.add(alpha, alpha))), tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))), alpha)), alpha))), grad)))))), tf.math.add(alpha, grad)))), tf.math.add(alpha, grad))), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.negative(tf.math.subtract(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), alpha))), grad))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(grad)))), tf.math.add(alpha, grad))))), tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.square(tf.math.square(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.add(tf.math.square(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), grad))))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.square(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, beta))), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, sigma)", "other_info": {"loss": [2.3013499299249536, 2.3022918043954106, 2.3031481265265943, 2.3027840844077394, 2.301826321988955, 2.3017828837361836], "accuracy": [0.09615638852119446, 0.08836349099874496, 0.08757099509239197, 0.08994849026203156, 0.08902391046285629, 0.09576013684272766], "val_loss": [1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0], [3, 2, 3, 9, 5, 3, 6, 2, 1, 5, 2, 1, 4, 2, 2, 2, 2, 4, 9, 3, 0, 8, 2, 3, 4, 2, 8, 7, 2, 5, 4, 2, 6, 7, 4, 8, 6, 6, 0, 7, 5, 0, 7, 3, 8, 2, 4, 0, 2, 6, 5, 0, 6, 2, 4, 2, 6, 8, 9, 5, 9, 5], [1, 1, 2, 1, 2, 0, 2, 0, 1, 0, 2, 2, 3, 2, 2, 2, 1, 0, 2, 2, 1, 1, 2, 3, 3, 2, 2, 0, 2, 0, 3, 1, 2, 2, 3, 1], [71, 60, 5, 49, 29, 73, 46, 33, 24], [1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 8, 1, 1, 8, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [0, 2, 3, 2, 3, 3, 1, 4, 2, 4, 1, 3, 3, 2], [42, 95, 54, 66, 83], [0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 1], [5, 3], [2, 5], [71], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.037142857909202576, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 4, 3, 2, 1, 0, 3, 1, 2, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, sigma)", "other_info": {"loss": [2.3013499299249536, 2.3022918043954106, 2.3031481265265943, 2.3027840844077394, 2.301826321988955, 2.3017828837361836], "accuracy": [0.09615638852119446, 0.08836349099874496, 0.08757099509239197, 0.08994849026203156, 0.08902391046285629, 0.09576013684272766], "val_loss": [1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [8, 6, 9, 9, 5, 1, 9, 2, 1, 2, 4, 6, 4, 2, 2, 6, 9, 4, 3, 4, 4, 1, 8, 3, 4, 2, 9, 7, 2, 6, 8, 7, 6, 7], [0, 1, 2, 1, 2, 0, 2, 2, 1, 0, 2, 2, 3, 3, 2, 2, 1, 0, 2, 2, 1, 0, 1, 3, 3, 3, 2, 2], [67, 60, 5, 49, 29, 73, 46, 33, 24], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [2, 8, 5, 5, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 0, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [27, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [4, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [1, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.037142857909202576, "mapping_values": [1, 4, 4, 2, 2, 1, 9, 9, 6, 3, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.square(tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))))))))), tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3013499299249536, 2.3022918043954106, 2.3031481265265943, 2.3027840844077394, 2.301826321988955, 2.3017828837361836], "accuracy": [0.09615638852119446, 0.08836349099874496, 0.08757099509239197, 0.08994849026203156, 0.08902391046285629, 0.09576013684272766], "val_loss": [1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [8, 9, 0, 9, 5, 1, 6, 2, 1, 2, 2, 9, 4, 2, 5, 2, 2, 4, 3, 4, 0, 8, 2, 8, 4, 5, 7, 7, 2, 6, 8, 8, 6, 7], [0, 1, 2, 1, 2, 0, 2, 2, 1, 0, 2, 2, 3, 3, 2, 2, 1, 0, 2, 2, 1, 0, 1, 3, 3, 3, 2, 2], [67, 60, 5, 49, 29, 73, 46, 33, 24], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 8, 5, 1, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 3, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [28, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [3, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.037142857909202576, "mapping_values": [1, 2, 2, 2, 0, 1, 9, 9, 5, 4, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.square(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3013499299249536, 2.3022918043954106, 2.3031481265265943, 2.3027840844077394, 2.301826321988955, 2.3017828837361836], "accuracy": [0.09615638852119446, 0.08836349099874496, 0.08757099509239197, 0.08994849026203156, 0.08902391046285629, 0.09576013684272766], "val_loss": [1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 1, 3, 9, 5, 1, 6, 2, 1, 2, 2, 0, 4, 2, 2, 6, 2, 4, 0, 2, 4, 8, 2, 3, 4, 2, 7, 0, 2, 6, 8, 7, 6, 7], [0, 2, 2, 0, 2, 2, 0, 2, 1, 2, 1, 2, 1, 2, 2, 2, 1, 0, 2, 2, 1, 0, 2, 2, 2, 1, 2, 3, 3], [55, 60, 5, 53, 26, 73, 46, 33, 24], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 8, 5, 1, 2, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [0, 2, 2, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [42, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 4, 8, 8, 5, 0, 0, 4, 5, 8], [1, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.037142857909202576, "mapping_values": [1, 10, 10, 6, 4, 3, 7, 7, 4, 3, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), grad), tf.math.multiply(tf.math.add(alpha, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.sqrt(tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, beta)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.301427775937112, 2.3026041551556458, 2.303801034152185, 2.3038414117918666, 2.3030955896968335, 2.3032848467176237], "accuracy": [0.09721305221319199, 0.0878351628780365, 0.08519349992275238, 0.08968432247638702, 0.0870426595211029, 0.09272222965955734], "val_loss": [1.970503875187465, 1.9706462451389857, 1.9707747186933244, 1.9710558482578822, 1.9712834358215332, 1.9713632038661413], "val_accuracy": [0.03466666489839554, 0.03333333507180214, 0.03233333304524422, 0.03166666626930237, 0.03200000151991844, 0.03200000151991844]}}]