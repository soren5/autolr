[{"genotype": [[0], [0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 1, 5, 0, 1, 8, 9, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 3, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [2, 50, 93, 49, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [4, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 0, 8, 8, 5, 0, 0, 4, 0, 8], [0, 2, 0, 0, 3, 0, 2], [92, 42, 57, 12, 41]], "fitness": -0.826285719871521, "mapping_values": [1, 10, 10, 7, 3, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 10, 7, 3, 2], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.subtract(grad, tf.math.add(alpha, tf.math.square(grad))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), beta), tf.math.negative(tf.math.sqrt(tf.math.sqrt(tf.math.square(tf.math.negative(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))))))", "other_info": {"loss": [2.1191713219195343, 1.909557408188092, 1.5236901711038295, 1.1693256630117803, 0.9224007831682949, 0.8134846367210586, 0.7682028832751778, 0.7519792602235741, 0.6816942277223584, 0.6408073741919518, 0.6225406967842536, 0.5930411625437496, 0.6112172881672963, 0.5528574519940906, 0.5497472804645427, 0.5554012080477119, 0.5331418306489646, 0.5073992760898478, 0.516035588599152, 0.49588855357454154, 0.4856900646977531, 0.4673219590438371, 0.45437689509531604, 0.462634830674979, 0.45320547811894635, 0.44459727929646486, 0.41221163354655616, 0.42269791566448567, 0.4316673193782816], "accuracy": [0.3121120035648346, 0.38581427931785583, 0.47272488474845886, 0.568749189376831, 0.6551313996315002, 0.6944921612739563, 0.7080966830253601, 0.713908314704895, 0.7341170310974121, 0.750759482383728, 0.7629110813140869, 0.7750627398490906, 0.7714964747428894, 0.7887993454933167, 0.7955356240272522, 0.7993659973144531, 0.8000264167785645, 0.8117818236351013, 0.8020076751708984, 0.8175934553146362, 0.8098005652427673, 0.8261788487434387, 0.82683926820755, 0.8251221776008606, 0.8298771381378174, 0.8294808864593506, 0.8409721255302429, 0.837537944316864, 0.8347642421722412], "val_loss": [1.5834905760628837, 1.6962964875357491, 1.0392670631408691, 0.6985887629645211, 0.6498256581170219, 0.671331695147923, 0.6005892753601074, 0.5016461781093052, 0.4992531027112688, 0.5284733601978847, 0.4725229399544852, 0.4511473519461496, 0.43443999120167326, 0.4171394961220877, 0.417574269430978, 0.39942499569484163, 0.4256463476589748, 0.3980299064091274, 0.36617415291922434, 0.37149906158447266, 0.36104272093091694, 0.35724230323519024, 0.4436660664422171, 0.3501304473195757, 0.3907180598803929, 0.4019145199230739, 0.35714844294956755, 0.36626032420567106, 0.3399074247905186], "val_accuracy": [0.398333340883255, 0.4320000112056732, 0.5576666593551636, 0.6786666512489319, 0.6856666803359985, 0.7143333554267883, 0.7326666712760925, 0.765333354473114, 0.7699999809265137, 0.7509999871253967, 0.8036666512489319, 0.8163333535194397, 0.8033333420753479, 0.8086666464805603, 0.8206666707992554, 0.8273333311080933, 0.812333345413208, 0.8353333473205566, 0.8503333330154419, 0.8399999737739563, 0.8529999852180481, 0.8463333249092102, 0.7876666784286499, 0.8646666407585144, 0.8299999833106995, 0.8220000267028809, 0.8460000157356262, 0.843666672706604, 0.8586666584014893]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [4, 2, 2, 0, 2, 8, 4, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 5, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 3, 2, 0, 0, 0, 2, 1, 0, 0, 2, 1, 3, 3, 3, 0, 1], [69, 92, 93, 49, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [4, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 1], [9, 3], [3, 5], [71], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 0, 8, 3, 4, 0, 0, 4, 0, 8], [0, 2, 0, 0, 3, 0, 2], [35, 42, 57, 12, 41]], "fitness": -0.7611428499221802, "mapping_values": [1, 26, 26, 15, 11, 5, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 6, 3, 3, 2], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, grad)), grad))), tf.math.pow(tf.math.add(alpha, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(tf.math.pow(tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.square(tf.math.divide_no_nan(grad, alpha))))))))), tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), beta), tf.math.negative(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2945464076524744, 2.2752258720934555, 2.2551238612413185, 2.233843893375631, 2.2072729370644724, 2.172580586826293, 2.128792852726217, 2.077674353678528, 2.015340279736114, 1.9409879497989861, 1.8484337385288712, 1.759048307749731, 1.6685676191933576, 1.5720554587705937, 1.4985108370510751, 1.4153390638013605, 1.3693845270017293, 1.3042518914163137, 1.2559925271944836, 1.224508671665456, 1.1691605195613695, 1.1508700758033756, 1.1182313372886978, 1.095484916386965, 1.0756313364031198, 1.044252335891401, 1.019255416126551, 1.0057330241434452, 0.9907046761085738, 0.9805242229981775, 0.9639522709929633, 0.9499263430725015, 0.9398051675489282, 0.9262740552511984, 0.9166213004596324, 0.9057864007019584, 0.888370680763359, 0.8990720003398497, 0.8819781253996337, 0.8765033683473282, 0.8582009695162311, 0.8614784930092768, 0.8597116300049176, 0.8446692524175476, 0.8454693303037676, 0.8390526237063923, 0.8318170815599971, 0.8268902118274359, 0.8139388537787963, 0.8179665880511229, 0.8092668804872337, 0.8032289461342571, 0.8014323593382633, 0.7960515244447041, 0.7940201225644168, 0.7878690829933311, 0.78406351995254, 0.7794218145309895, 0.7751897513795569, 0.7751018028879021, 0.7675554956962813, 0.7584440183362405, 0.7610043718625589, 0.7649426196213837, 0.7550032082140611, 0.7502911095653212, 0.7511045512758179, 0.753041673440345, 0.7478215820155423, 0.7391917300876168, 0.737981214995366, 0.7378100556483941, 0.7352912928276782, 0.7298938312928565, 0.7297941475512251, 0.729132213242664, 0.7245021127297216, 0.7205281686222297, 0.7170514091209665, 0.7211938955292269, 0.7148633300195265, 0.7105101343426864], "accuracy": [0.10513802617788315, 0.1574428677558899, 0.21278563141822815, 0.2591467499732971, 0.29679039120674133, 0.3319244384765625, 0.37102100253105164, 0.39268261194229126, 0.402588814496994, 0.42570334672927856, 0.4535728394985199, 0.46070531010627747, 0.48989564180374146, 0.4998018741607666, 0.5139347314834595, 0.535860538482666, 0.5399550795555115, 0.5568616986274719, 0.5715228915214539, 0.5827499628067017, 0.5962224006652832, 0.6073173880577087, 0.6169594526290894, 0.6144498586654663, 0.6256769299507141, 0.6325452327728271, 0.6465460062026978, 0.6476026773452759, 0.6460176706314087, 0.6585655808448792, 0.6567164063453674, 0.6633205413818359, 0.6667547225952148, 0.6767930388450623, 0.6763967871665955, 0.6826046705245972, 0.6841896772384644, 0.6781138777732849, 0.6863030195236206, 0.6832650899887085, 0.6948884129524231, 0.6910579800605774, 0.6959450244903564, 0.6975300312042236, 0.6997754573822021, 0.7042662501335144, 0.7030775547027588, 0.7053229212760925, 0.7108704447746277, 0.7096816897392273, 0.7080966830253601, 0.707568347454071, 0.7103421092033386, 0.7131158113479614, 0.7174745798110962, 0.7166820764541626, 0.7165499925613403, 0.7194558382034302, 0.724739134311676, 0.7201162576675415, 0.7230220437049866, 0.7288337349891663, 0.7250033020973206, 0.7194558382034302, 0.7257958054542542, 0.7276449799537659, 0.7279091477394104, 0.7321357727050781, 0.7294940948486328, 0.7346453666687012, 0.7276449799537659, 0.7325320243835449, 0.7349095344543457, 0.733588695526123, 0.7371549606323242, 0.733060359954834, 0.7322678565979004, 0.7354378700256348, 0.7403249144554138, 0.7454761862754822, 0.7367587089538574, 0.7397965788841248], "val_loss": [1.9526402609688895, 1.9347177233014787, 1.9146998269217355, 1.8914000647408622, 1.8628622463771276, 1.826740060533796, 1.780909606388637, 1.7243200029645647, 1.655658824103219, 1.575237206050328, 1.484847170966012, 1.3897169998713903, 1.2953533104487829, 1.2048471314566476, 1.126142876488822, 1.055790560586112, 0.9979610102517265, 0.9467393330165318, 0.9036715711866107, 0.8678327969142369, 0.8355378593717303, 0.808739355632237, 0.7849264655794416, 0.7650333302361625, 0.7462672165461949, 0.728601234299796, 0.713259049824306, 0.6997705187116351, 0.6877003567559379, 0.6778170551572528, 0.6672557422092983, 0.657397815159389, 0.6499624082020351, 0.6422631570271083, 0.6344327756336757, 0.6264990908758981, 0.620385834148952, 0.6170024871826172, 0.6101726634161813, 0.6053585665566581, 0.599541289465768, 0.5933709996087211, 0.5895491327558245, 0.5853273868560791, 0.5820515326091221, 0.5795802048274449, 0.5739784411021641, 0.5705920457839966, 0.5659139496939523, 0.564269849232265, 0.5612444707325527, 0.5570432628904071, 0.5540718180792672, 0.5513879912240165, 0.5474045446940831, 0.544057812009539, 0.5413226400102887, 0.5383295331682477, 0.5366431644984654, 0.533657261303493, 0.5299930402210781, 0.5288235970905849, 0.5266156366893223, 0.5243300880704608, 0.5236863919666835, 0.5198229721614293, 0.5179509775979179, 0.5169444765363421, 0.5135013375963483, 0.5123753377369472, 0.5096715348107475, 0.5085241964885167, 0.5060350554330009, 0.5056871346064976, 0.5027328559330532, 0.5028736761638096, 0.5008502176829747, 0.4978230169841221, 0.49731991972242084, 0.49646576813289095, 0.4940519162586757, 0.4917105606624058], "val_accuracy": [0.19433332979679108, 0.3330000042915344, 0.39233332872390747, 0.4309999942779541, 0.4566666781902313, 0.47066667675971985, 0.49966666102409363, 0.5233333110809326, 0.5440000295639038, 0.5669999718666077, 0.5846666693687439, 0.5976666808128357, 0.6129999756813049, 0.625, 0.643666684627533, 0.6556666493415833, 0.6673333048820496, 0.6796666383743286, 0.6853333115577698, 0.687333345413208, 0.6899999976158142, 0.6909999847412109, 0.6983333230018616, 0.7023333311080933, 0.70333331823349, 0.7080000042915344, 0.715666651725769, 0.7143333554267883, 0.7163333296775818, 0.718666672706604, 0.7233333587646484, 0.734333336353302, 0.7329999804496765, 0.734666645526886, 0.7416666746139526, 0.746666669845581, 0.7456666827201843, 0.7443333268165588, 0.75, 0.7506666779518127, 0.7523333430290222, 0.7563333511352539, 0.7566666603088379, 0.7586666941642761, 0.7526666522026062, 0.753000020980835, 0.7586666941642761, 0.7583333253860474, 0.7613333463668823, 0.7543333172798157, 0.7586666941642761, 0.7596666812896729, 0.7616666555404663, 0.7699999809265137, 0.7649999856948853, 0.7706666588783264, 0.7716666460037231, 0.7720000147819519, 0.7739999890327454, 0.7763333320617676, 0.7773333191871643, 0.7793333530426025, 0.778333306312561, 0.7799999713897705, 0.7753333449363708, 0.7796666622161865, 0.7789999842643738, 0.7829999923706055, 0.7863333225250244, 0.781000018119812, 0.7863333225250244, 0.7870000004768372, 0.784333348274231, 0.7803333401679993, 0.7883333563804626, 0.7823333144187927, 0.7910000085830688, 0.7886666655540466, 0.7866666913032532, 0.7863333225250244, 0.7896666526794434, 0.7896666526794434]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [2, 1, 5, 0, 1, 6, 2, 6, 5, 2, 8, 5, 6, 2, 6, 6, 2, 0, 3, 1, 4, 9, 9, 3, 5, 2, 7, 7, 2, 9], [2, 3, 2, 1, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 2, 0, 1], [35, 50, 93, 49, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [4, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [3, 5], [71], [0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 0, 8, 3, 4, 0, 0, 4, 0, 8], [0, 2, 0, 0, 3, 0, 2], [24, 42, 57, 12, 41]], "fitness": -0.5811428427696228, "mapping_values": [1, 37, 37, 23, 14, 6, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 6, 3, 3, 2], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.math.negative(grad))), tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, grad)), tf.math.add(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.square(alpha)))))), tf.math.divide_no_nan(tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(grad, tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.negative(grad))), tf.math.add(alpha, tf.math.multiply(grad, grad)))), tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), beta), tf.math.negative(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3014889089359882, 2.2988806867706555, 2.2964889513833757, 2.2950239234423484, 2.2934472032778017, 2.2905790288104138, 2.2873638804247665, 2.2858555327632, 2.285151782399234, 2.2832136745891236, 2.28010090936397, 2.2784068514217144, 2.2766868534372815, 2.273650384141375, 2.2728868008541663, 2.2681922040611067, 2.268100777101901, 2.265361034008868, 2.2616474232291344, 2.2608557178233797, 2.2569284638740035, 2.255554907924353, 2.2530277293387533, 2.2508122928232925, 2.2483667859689764, 2.2465504986845257, 2.2424912267845416, 2.241093764388881, 2.23843404251933, 2.234583111298067, 2.232931960543873, 2.2293921844944458, 2.2267247944334163, 2.222624705877318, 2.219153023068427, 2.215885441741923, 2.213578590202357, 2.209699539287357, 2.2077041731030635, 2.2033997994718804, 2.200470402224693, 2.1964241126272985, 2.194849574161228, 2.1886344286334545, 2.187535438586724, 2.1840664965050522, 2.176738015475794, 2.1727230226390506, 2.1692878671562226, 2.1649088946788257, 2.159124660548627, 2.154740790554939, 2.1505090895582106, 2.142953544575635, 2.139758059251357, 2.1322409016754427, 2.1294519902535276, 2.1233909279363914, 2.11706607248238, 2.1131675612767453, 2.107346394908836, 2.1005208809078804, 2.093138296275705, 2.0895886044256, 2.0831676146389233, 2.0731224078764265, 2.0684537544635937, 2.0617489789880388, 2.0548893234213628, 2.044911050368231, 2.0392648553993125, 2.0289540765087413, 2.0224637963500682, 2.0149839859376604, 2.0066070751885006, 1.999302483568606, 1.9882828847307965, 1.9807788358624616, 1.970784311423039, 1.966101063414178, 1.9529479611992222, 1.9431633408578821, 1.9349702737271872, 1.9259725432149675, 1.915328655906121, 1.9066882862028838, 1.8959530482533398, 1.883195349789409, 1.876323839078537, 1.865202510188426, 1.8546319119666688, 1.8444312882225007, 1.8378803868886424, 1.8247003676853222, 1.8138787108263745, 1.8086738968254505, 1.7950111761100698, 1.7777691582930544, 1.7688343102953075, 1.7586268371106644], "accuracy": [0.09008057415485382, 0.09681680053472519, 0.10315678268671036, 0.10817593336105347, 0.11108175665140152, 0.12217672914266586, 0.12891295552253723, 0.13789460062980652, 0.1414608359336853, 0.14291374385356903, 0.14859332144260406, 0.15202747285366058, 0.16219785809516907, 0.1698586642742157, 0.1666886806488037, 0.17804782092571259, 0.18412363529205322, 0.18623696267604828, 0.19759608805179596, 0.2020869106054306, 0.20723815262317657, 0.21516312658786774, 0.2172764539718628, 0.21925769746303558, 0.22533351182937622, 0.23563598096370697, 0.2405230551958084, 0.23854179680347443, 0.2514859437942505, 0.2572975754737854, 0.26363757252693176, 0.2678642272949219, 0.26522254943847656, 0.27684587240219116, 0.2863558232784271, 0.2856954038143158, 0.28622373938560486, 0.29599788784980774, 0.29243165254592896, 0.3055078685283661, 0.30880993604660034, 0.31541407108306885, 0.3143574297428131, 0.3191123902797699, 0.32043322920799255, 0.3210936486721039, 0.3319244384765625, 0.3354906737804413, 0.33786818385124207, 0.3409060835838318, 0.34222692251205444, 0.3485668897628784, 0.34301942586898804, 0.3547748029232025, 0.352529376745224, 0.3683793544769287, 0.36626601219177246, 0.36943599581718445, 0.3747193217277527, 0.37247392535209656, 0.3749834895133972, 0.38568219542503357, 0.3877955377101898, 0.3877955377101898, 0.3829084634780884, 0.39004093408584595, 0.381719708442688, 0.39585259556770325, 0.39624884724617004, 0.40641921758651733, 0.40126800537109375, 0.40404173731803894, 0.40589091181755066, 0.409721314907074, 0.41104212403297424, 0.4115704596042633, 0.41328755021095276, 0.4241183400154114, 0.42570334672927856, 0.4212125241756439, 0.41804254055023193, 0.4329679012298584, 0.43243956565856934, 0.4313828945159912, 0.43204331398010254, 0.44591203331947327, 0.43745872378349304, 0.45145952701568604, 0.43745872378349304, 0.4449874460697174, 0.448949933052063, 0.4484215974807739, 0.44868576526641846, 0.45489367842674255, 0.44749704003334045, 0.4653282165527344, 0.46413949131965637, 0.47312110662460327, 0.4682340621948242, 0.46506404876708984], "val_loss": [1.9683433941432409, 1.966324738093785, 1.9643164362226213, 1.9623500960213798, 1.9603550774710519, 1.9583424840654646, 1.9563480104718889, 1.9543465886797224, 1.9523398535592216, 1.9503623417445592, 1.9483508382524763, 1.946340560913086, 1.9443127768380302, 1.9422722543988908, 1.940206663949149, 1.9381120545523507, 1.9360192162649972, 1.933861255645752, 1.9316975729806083, 1.9294943128313338, 1.9272706168038505, 1.9250101361955916, 1.9227044241768974, 1.9203846795218331, 1.9180111203874861, 1.9155911718096053, 1.9131323950631278, 1.910618577684675, 1.9080494471958704, 1.905428682054792, 1.9027625492640905, 1.9000181470598494, 1.8972421373639787, 1.8943671498979842, 1.8914422988891602, 1.8884354318891252, 1.88535737991333, 1.8821979250226701, 1.879002366747175, 1.8756863049098425, 1.8723047801426478, 1.868830748966762, 1.8652751105172294, 1.8615909303937639, 1.8578659466334753, 1.8540385791233607, 1.8500735419137138, 1.8459859575544084, 1.8417980330330985, 1.837493964603969, 1.8330467769077845, 1.8285491125924247, 1.8238915034702845, 1.8190536499023438, 1.8141497884477888, 1.8090762410845076, 1.8039079393659319, 1.7985557147434779, 1.793029717036656, 1.7874390057155065, 1.7817254066467285, 1.77582733971732, 1.7698160580226354, 1.7636615889413017, 1.7573928151811873, 1.7509183202471053, 1.7443243435450964, 1.7375682422092982, 1.7306701796395438, 1.723536150796073, 1.7162721838269914, 1.708782434463501, 1.701183829988752, 1.6934256553649902, 1.6854628835405623, 1.6773950372423445, 1.6691102640969413, 1.6606739248548235, 1.6521130629948206, 1.6434689249311174, 1.6345997537885393, 1.6254748957497733, 1.6162618568965368, 1.6068862165723528, 1.5973769596644811, 1.5877116748264857, 1.5778834479195731, 1.56795072555542, 1.5579511097499303, 1.547811644417899, 1.5375680923461914, 1.5271617003849574, 1.5168694428035192, 1.5063275950295585, 1.495776993887765, 1.4852320807320731, 1.4745557648794991, 1.4637186867850167, 1.4529187338692802, 1.4420577798570906], "val_accuracy": [0.049666665494441986, 0.0663333311676979, 0.08299999684095383, 0.09533333033323288, 0.11400000005960464, 0.13300000131130219, 0.15666666626930237, 0.17933332920074463, 0.19566667079925537, 0.21466666460037231, 0.2316666692495346, 0.24799999594688416, 0.26600000262260437, 0.28299999237060547, 0.29499998688697815, 0.30799999833106995, 0.3153333365917206, 0.32766667008399963, 0.33899998664855957, 0.3463333249092102, 0.3543333411216736, 0.36033332347869873, 0.36899998784065247, 0.3733333349227905, 0.3803333342075348, 0.3856666684150696, 0.38999998569488525, 0.39366665482521057, 0.39500001072883606, 0.3973333239555359, 0.4009999930858612, 0.406333327293396, 0.41233333945274353, 0.4166666567325592, 0.42100000381469727, 0.4256666600704193, 0.4300000071525574, 0.4326666593551636, 0.4359999895095825, 0.43799999356269836, 0.4416666626930237, 0.4440000057220459, 0.4483333230018616, 0.45100000500679016, 0.4533333480358124, 0.4560000002384186, 0.4573333263397217, 0.4580000042915344, 0.46166667342185974, 0.4633333384990692, 0.46666666865348816, 0.4699999988079071, 0.4729999899864197, 0.4749999940395355, 0.4816666543483734, 0.484333336353302, 0.4883333444595337, 0.49166667461395264, 0.4946666657924652, 0.4976666569709778, 0.500333309173584, 0.5023333430290222, 0.5046666860580444, 0.5080000162124634, 0.5113333463668823, 0.5149999856948853, 0.518666684627533, 0.5216666460037231, 0.5256666541099548, 0.528333306312561, 0.5289999842643738, 0.5336666703224182, 0.5360000133514404, 0.5376666784286499, 0.5406666398048401, 0.5433333516120911, 0.5433333516120911, 0.54666668176651, 0.5486666560173035, 0.550000011920929, 0.5519999861717224, 0.5529999732971191, 0.5573333501815796, 0.5619999766349792, 0.5636666417121887, 0.5659999847412109, 0.5680000185966492, 0.5686666369438171, 0.5706666707992554, 0.5733333230018616, 0.5756666660308838, 0.5766666531562805, 0.5773333311080933, 0.5793333053588867, 0.5816666483879089, 0.5833333134651184, 0.5843333601951599, 0.5856666564941406, 0.5886666774749756, 0.5893333554267883]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 8, 5, 3, 9, 1, 9, 2, 5, 3, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 3, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [94, 50, 93, 49, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [4, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 0, 8, 9, 5, 0, 0, 4, 0, 8], [0, 2, 0, 0, 3, 0, 2], [43, 42, 57, 12, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 11, 8, 3, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 7, 5, 2, 2], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.sqrt(grad), tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.add(alpha, grad))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.sqrt(beta))), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 3, 5, 1, 6, 8, 4, 6, 5, 4, 8, 5, 6, 5, 3, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 0, 2, 0, 0, 0, 2, 1, 1, 0, 2, 2, 3, 3, 3, 0, 1], [71, 50, 93, 49, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [4, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [3, 5], [71], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 0, 8, 3, 4, 0, 0, 4, 0, 8], [3, 2, 0, 0, 3, 0, 2], [48, 3, 57, 12, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 13, 8, 5, 2], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.math.negative(sigma), tf.math.sqrt(beta)), tf.math.multiply(tf.math.pow(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.negative(sigma))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 1, 1, 0, 1, 8, 9, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 3, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [2, 50, 93, 49, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [4, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [4, 3, 0, 8, 8, 5, 0, 0, 4, 0, 8], [0, 2, 0, 0, 3, 0, 2], [84, 42, 57, 12, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 11, 7, 4, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.subtract(grad, tf.math.subtract(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.sqrt(tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), grad))), grad)), tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.303232598503142, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 1, 5, 0, 1, 8, 9, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 0, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [37, 50, 93, 49, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [4, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 0, 8, 0, 5, 0, 0, 4, 0, 8], [1, 0, 0, 0, 3, 0, 2], [92, 42, 57, 12, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 7, 3, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 10, 7, 3, 2], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.subtract(grad, tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(alpha, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.sqrt(tf.math.negative(tf.math.square(tf.math.negative(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 8, 5, 4, 9, 1, 9, 2, 5, 3, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 0, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [69, 50, 93, 49, 40, 73, 46, 33, 24], [1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [4, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [1, 5], [71], [0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [6, 3, 0, 9, 9, 5, 0, 0, 4, 0, 8], [0, 2, 0, 0, 3, 0, 2], [35, 13, 57, 12, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 6, 3, 3, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), beta), tf.math.negative(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09536388516426086, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 2, 5, 4, 4, 1, 9, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 3, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [2, 50, 93, 49, 40, 73, 46, 33, 24], [1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 3, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [4, 5], [71], [0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 4, 0, 8, 8, 5, 0, 0, 4, 0, 8], [1, 0, 0, 0, 3, 0, 2], [25, 84, 57, 12, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 9, 6, 3, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.pow(tf.math.negative(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.sqrt(tf.math.square(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 3, 5, 0, 6, 8, 4, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [1, 3, 2, 0, 0, 0, 2, 1, 0, 2, 2, 2, 3, 3, 3, 0, 1], [39, 50, 93, 49, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [4, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 1], [9, 3], [7, 5], [71], [1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 0, 9, 9, 5, 0, 0, 4, 0, 8], [0, 2, 0, 0, 3, 0, 2], [92, 42, 57, 12, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.303232598503142, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 8, 5, 4, 9, 1, 9, 2, 5, 3, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 3, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [2, 50, 93, 49, 40, 73, 46, 33, 24], [1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [4, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 2, 9, 8, 9, 5, 0, 0, 4, 0, 8], [0, 2, 0, 0, 3, 0, 2], [92, 38, 57, 12, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 5, 3, 2, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.add(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), beta), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3032318880970233, 2.302585403255704, 2.302584575923395, 2.3025845723964, 2.3025912148305974, 2.3025861222273827], "accuracy": [0.09391097724437714, 0.1006472036242485, 0.09998679161071777, 0.09998679161071777, 0.09945846349000931, 0.09998679161071777], "val_loss": [1.9736458914620536, 1.9736506598336356, 1.9736533164978027, 1.9736531802586146, 1.97365140914917, 1.9736490930829729], "val_accuracy": [0.10000000149011612, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [5, 1, 5, 0, 1, 8, 9, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [0, 3, 1, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [2, 50, 93, 49, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [4, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 0, 4, 8, 5, 0, 0, 4, 0, 8], [0, 3, 0, 0, 3, 0, 2], [92, 42, 57, 12, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 10, 6, 4, 3], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.subtract(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), sigma), tf.math.negative(tf.math.pow(tf.math.sqrt(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [2.419405710096964e+30, 3.8781144855485663, 7.450378927997453, 11.48726472374691, 15.533041774037807, 19.580076333538354], "accuracy": [0.07396645098924637, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.5126892498561313, 4.992730821881976, 8.446226119995117, 11.926549639020648, 15.407903943743024, 18.89287785121373], "val_accuracy": [0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 1, 5, 0, 1, 8, 9, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 3, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [2, 50, 93, 49, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [4, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 0, 9, 9, 5, 0, 0, 4, 0, 8], [0, 2, 0, 0, 3, 0, 2], [92, 42, 57, 12, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 6, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07409853488206863, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [6, 2, 5, 2, 1, 1, 9, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 0, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [5, 50, 93, 15, 40, 73, 81, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [4, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 2, 0, 2, 8, 5, 0, 0, 4, 0, 8], [0, 2, 0, 0, 3, 0, 2], [36, 42, 57, 12, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 32, 32, 19, 13, 7, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 6, 3, 3, 2], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(grad, tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), tf.math.square(tf.math.pow(tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))))))), tf.math.square(tf.math.divide_no_nan(tf.math.add(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.negative(grad)))))))))), tf.math.multiply(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.add(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32), beta), tf.math.negative(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [8.577360045939798, 2.408247991181982, 2.5167827380725405, 2.341321320187981, 77850.51221959491, 88.85111707297015, 2.3427758301883688, 2.335615712732545, 2.3297576611745217, 2.324747557338392], "accuracy": [0.09972262382507324, 0.0952318087220192, 0.09694888442754745, 0.09351472556591034, 0.09826971590518951, 0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3765553746904646, 2.873114994594029, 2.0429153442382812, 2.033149242401123, 54.45658874511719, 2.014801229749407, 2.007778985159738, 2.002030781337193, 1.997089181627546, 1.9928699220929826], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10366666316986084, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 8, 5, 4, 9, 1, 9, 2, 5, 3, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 3, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [94, 50, 93, 49, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [4, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [0, 5], [71], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 2, 8, 0, 5, 0, 0, 4, 0, 8], [0, 2, 0, 0, 3, 0, 2], [92, 42, 57, 12, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 8, 4, 4, 3], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(grad)), tf.math.add(alpha, tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), beta), tf.math.add(tf.math.sqrt(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.0354666433494185e+28, 10.105516589659395, 19.060336170289748, 28.01760312837302, 36.97256710973036, 45.930065992438735], "accuracy": [0.08321225643157959, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [5.527543476649693, 13.21767452784947, 20.923969268798828, 28.627859933035715, 36.33330535888672, 44.046769278390066], "val_accuracy": [0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658]}}, {"genotype": [[0], [1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [6, 1, 5, 0, 1, 4, 2, 9, 5, 2, 8, 5, 6, 2, 6, 2, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 3, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [77, 50, 93, 49, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [1, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 5, 0, 8, 8, 5, 0, 0, 4, 0, 8], [0, 2, 0, 0, 3, 0, 2], [92, 51, 57, 12, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 11, 6, 5, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.subtract(grad, tf.math.add(alpha, tf.math.square(grad))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.pow(grad, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.square(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 1, 0, 0, 1, 8, 9, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 3, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [2, 50, 93, 49, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [4, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [7, 5], [71], [0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 0, 8, 8, 5, 0, 0, 4, 0, 8], [0, 2, 1, 0, 3, 0, 2], [35, 40, 57, 12, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 7, 3, 1, 5, 5, 2, 3, 1, 1, 1, 0, 1, 0, 10, 7, 3, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.subtract(tf.math.add(alpha, grad), tf.math.negative(grad)), tf.math.negative(tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, grad), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.negative(tf.math.sqrt(beta)), tf.math.sqrt(tf.math.square(tf.math.negative(alpha)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 1, 5, 0, 2, 8, 9, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 3, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [94, 50, 93, 49, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [4, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [4, 5], [71], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 0, 8, 8, 5, 0, 0, 4, 0, 8], [0, 2, 0, 0, 3, 0, 2], [53, 58, 57, 12, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 7, 3, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.subtract(grad, tf.math.add(alpha, tf.math.square(grad))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))), grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.303232598503142, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 1, 5, 0, 1, 8, 9, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 3, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [43, 50, 93, 49, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [6, 5, 0, 8, 8, 5, 0, 0, 4, 0, 8], [0, 2, 0, 0, 3, 0, 2], [92, 42, 57, 12, 41]], "fitness": -0.08799999952316284, "mapping_values": [1, 10, 10, 7, 3, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.subtract(grad, tf.math.add(alpha, tf.math.square(grad))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.sqrt(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.square(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.0937533145980088e+24, 2.5056413149675416e+24, 2.4903017137646094e+24, 2.525998109340216e+24, 2.5430080777352345e+24, 2.476399265269761e+24], "accuracy": [0.09826971590518951, 0.09787346422672272, 0.09628847241401672, 0.10315678268671036, 0.09734513610601425, 0.10210011899471283], "val_loss": [1.7104009278403355e+24, 1.7104009278403355e+24, 1.7104009278403355e+24, 1.7104009278403355e+24, 1.7104009278403355e+24, 1.7104009278403355e+24], "val_accuracy": [0.08699999749660492, 0.08699999749660492, 0.08699999749660492, 0.08699999749660492, 0.08699999749660492, 0.08699999749660492]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [6, 1, 5, 0, 1, 6, 5, 6, 5, 2, 8, 5, 6, 6, 6, 2, 2, 0, 3, 7, 8, 8, 9, 3, 5, 2, 7, 7, 2, 9], [0, 0, 2, 0, 0, 2, 2, 1, 0, 1, 2, 2, 3, 3, 2, 0, 1], [94, 50, 93, 49, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [2, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 0, 8, 9, 5, 0, 0, 4, 0, 8], [0, 2, 1, 0, 3, 0, 2], [84, 42, 57, 12, 41]], "fitness": -0.037142857909202576, "mapping_values": [1, 21, 21, 13, 8, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(tf.math.negative(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(grad), tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(alpha, grad), tf.math.sqrt(tf.math.square(tf.math.divide_no_nan(grad, tf.math.add(alpha, alpha)))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), beta)", "other_info": {"loss": [2.3023885256263794, 2.30196346321504, 2.3017115548554195, 2.3023085146059907, 2.302911618917594, 2.30227681595683], "accuracy": [0.08809932321310043, 0.09074098616838455, 0.08994849026203156, 0.09060890227556229, 0.08849557489156723, 0.09417514503002167], "val_loss": [1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]