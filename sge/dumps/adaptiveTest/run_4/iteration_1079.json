[{"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1], [3, 7, 5, 4, 2, 2, 4, 1, 5, 0, 0, 5, 4, 1, 2, 4, 3, 3, 5, 5, 9, 2, 5, 3, 1, 2, 7, 2, 2, 2, 8, 4, 2, 3, 4, 7, 8, 1, 4, 0, 0, 1, 9, 3, 3, 8, 7, 7, 3, 9, 2, 2, 2, 3, 1, 3, 4, 7, 4, 2, 3, 2, 9, 1, 5, 8, 4, 8, 2, 6, 7, 9, 3], [1, 2, 1, 1, 2, 2, 2, 0, 1, 1, 1, 2, 2, 3, 0, 1, 1, 0, 2, 2, 2, 2, 2, 2, 3, 1, 2, 1, 3, 2, 2, 2, 3, 0, 3, 1, 2, 0, 3, 3, 1, 1, 1, 2, 3, 2, 3, 3, 0, 0, 0, 3, 2], [57, 39, 24, 98, 26, 73, 46, 33, 24, 64], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [5, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.838857114315033, "mapping_values": [1, 76, 76, 46, 30, 5, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 80, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))), tf.math.pow(grad, tf.math.add(alpha, alpha)))), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.subtract(grad, tf.math.add(alpha, grad)), grad)), tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.square(tf.math.square(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), alpha)), tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), alpha)), alpha)), tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.add(alpha, grad)), tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.pow(tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))), grad))), tf.math.add(alpha, tf.math.pow(grad, tf.math.negative(tf.math.negative(tf.math.add(alpha, grad)))))), tf.math.subtract(grad, tf.math.add(alpha, grad))))), tf.math.add(alpha, grad))), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), grad))))), tf.math.add(alpha, alpha)), tf.math.multiply(grad, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))))))))), tf.math.add(alpha, grad)))))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.8872842648718666, 1.0831249822494518, 0.788926054371378, 0.661575293953487, 0.6149453295613986, 0.5510942080174895, 0.5314606660313972, 0.5016837615488763, 0.4783438049554982, 0.4561807056853264, 0.4407644103334218, 0.42011576410313606, 0.4150821197073867, 0.3899712771149737, 0.37099196562567377, 0.35604056031035397, 0.3579314777864016, 0.34175416518589763, 0.3310607692167476, 0.32331184252236483, 0.3091451347921314, 0.30551787194495883, 0.2969952204507403, 0.2897428976837607, 0.27410003681263795, 0.27788156962602556, 0.26372176424513216, 0.2457857876405929, 0.25643561318125063, 0.24414618951989958, 0.23964751777222537, 0.2270350583343458, 0.21938017547020366, 0.22367022207085294, 0.2155369674335964, 0.22542442864178824, 0.21027624503559425], "accuracy": [0.35741645097732544, 0.6124686598777771, 0.6956809163093567, 0.7417778372764587, 0.76106196641922, 0.7848368883132935, 0.7956677079200745, 0.81112140417099, 0.8170651197433472, 0.8319904804229736, 0.8333113193511963, 0.8428213000297546, 0.8428213000297546, 0.8551049828529358, 0.8577466607093811, 0.8660678863525391, 0.8671245574951172, 0.870030403137207, 0.876370370388031, 0.8837670087814331, 0.8812574148178101, 0.8829745054244995, 0.8831065893173218, 0.8903711438179016, 0.8982961177825928, 0.8936732411384583, 0.8990886211395264, 0.906749427318573, 0.9012019634246826, 0.9054285883903503, 0.9031832218170166, 0.9126931428909302, 0.9158631563186646, 0.9152027368545532, 0.9177123308181763, 0.9111081957817078, 0.917580246925354], "val_loss": [0.9625213827405658, 0.61684250831604, 0.5260980980736869, 0.4786022560937064, 0.4338881884302412, 0.40628563506262644, 0.3982572981289455, 0.37269837515694754, 0.35500700984682354, 0.35029285294669016, 0.35076511757714407, 0.3425137826374599, 0.3235346760068621, 0.317758960383279, 0.31086667094911846, 0.33110047238213675, 0.3050460304532732, 0.30386402777263094, 0.3090185693332127, 0.30412618603025166, 0.303065972668784, 0.30110861573900494, 0.3046972325869969, 0.2947617173194885, 0.30830114228384836, 0.2960048403058733, 0.29327679531914846, 0.297586236681257, 0.2976275256701878, 0.3025907874107361, 0.28893693004335674, 0.29069410051618305, 0.31598288672310965, 0.30812363965170725, 0.31369263785226004, 0.2961367198399135, 0.29611293758664814], "val_accuracy": [0.5806666612625122, 0.7263333201408386, 0.7559999823570251, 0.7749999761581421, 0.8066666722297668, 0.8193333148956299, 0.8383333086967468, 0.8453333377838135, 0.859666645526886, 0.8536666631698608, 0.8526666760444641, 0.859666645526886, 0.8679999709129333, 0.8769999742507935, 0.8766666650772095, 0.859333336353302, 0.8736666440963745, 0.8786666393280029, 0.875333309173584, 0.8796666860580444, 0.8743333220481873, 0.871666669845581, 0.8790000081062317, 0.8809999823570251, 0.8769999742507935, 0.8793333172798157, 0.8840000033378601, 0.8806666731834412, 0.8799999952316284, 0.8799999952316284, 0.8856666684150696, 0.8896666765213013, 0.8793333172798157, 0.8820000290870667, 0.8809999823570251, 0.8843333125114441, 0.8870000243186951]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 7, 5, 5, 2, 1, 4, 1, 8, 3, 4, 5, 4, 1, 2, 1, 3, 3, 2, 2, 9, 2, 5, 2, 1, 2, 2, 7, 2, 6, 8, 4, 0, 3, 4, 5, 8, 1, 8, 0, 6, 1, 0, 6, 3, 8, 7, 9, 4, 9, 2, 4, 2, 4, 2, 3, 4, 7, 2, 9, 4, 2, 7, 1, 5, 8, 4, 8, 2, 7, 7, 9, 3, 2, 0, 8, 8], [1, 2, 1, 2, 0, 2, 2, 0, 1, 1, 1, 2, 2, 3, 0, 1, 1, 0, 2, 0, 2, 2, 2, 2, 3, 1, 2, 1, 3, 2, 2, 2, 3, 0, 3, 1, 2, 0, 3, 3, 1, 1, 1, 2, 3, 2, 2, 3, 0, 0, 0, 3, 2], [57, 75, 25, 22, 26, 73, 46, 33, 24, 64, 59], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [5, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.838857114315033, "mapping_values": [1, 82, 82, 50, 32, 8, 3, 3, 2, 1, 1, 9, 7, 6, 1, 1, 2, 1, 1, 0], "tree_depth": 73, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))), tf.math.square(grad))), tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.multiply(tf.math.pow(tf.math.add(alpha, alpha), grad), tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, grad))), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))), alpha)))), tf.math.square(tf.math.add(alpha, alpha)))), tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.multiply(grad, tf.math.add(alpha, tf.math.pow(tf.math.square(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha))))))))), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)))))), tf.math.sqrt(tf.math.add(alpha, grad))), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.add(alpha, grad)))), grad)), tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), grad)), alpha)))))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))))))))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))))), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, grad))), tf.math.add(sigma, tf.math.multiply(sigma, sigma)))), tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.8872842153994605, 1.0831025883490462, 0.7886530828435013, 0.6621096618281631, 0.6168827337123431, 0.5517837213818045, 0.5328171855785182, 0.5014835887534066, 0.479892617294014, 0.45720094111318116, 0.4420585297141581, 0.41964131887751704, 0.41330963633772466, 0.38543160429184764, 0.37136576759375917, 0.35748696163456123, 0.3571791575490649, 0.3402927458097339, 0.33048252465151495, 0.3283125424759814, 0.3081874141107697, 0.30823686305227344, 0.28890758269041944, 0.2928978569393286, 0.2790339991397169, 0.2820789563326772, 0.2620308540201521, 0.2510348389397806, 0.2636843772809015, 0.24748883154791865, 0.24051208527230505, 0.2351403813107989, 0.23145155291775546], "accuracy": [0.35741645097732544, 0.6124686598777771, 0.695813000202179, 0.7423061728477478, 0.7604015469551086, 0.7858935594558716, 0.7955356240272522, 0.8101968169212341, 0.8173292875289917, 0.8297450542449951, 0.8333113193511963, 0.8429533839225769, 0.8454629778862, 0.858671247959137, 0.8577466607093811, 0.8667283058166504, 0.8650112152099609, 0.8706908226013184, 0.8772949576377869, 0.8775591254234314, 0.8809932470321655, 0.8786157965660095, 0.8893144726753235, 0.8905032277107239, 0.89552241563797, 0.8907673954963684, 0.9014661312103271, 0.9030511379241943, 0.896446943283081, 0.9045040011405945, 0.9051644206047058, 0.9129573106765747, 0.9140139818191528], "val_loss": [0.9625169209071568, 0.6164580242974418, 0.5260588100978306, 0.4799714429037912, 0.4351252828325544, 0.4053151607513428, 0.39742794207164217, 0.3738364406994411, 0.35510434423174175, 0.3569715363638742, 0.3508973462241037, 0.3373201148850577, 0.32291034289768766, 0.3186700429235186, 0.3130020499229431, 0.32599733557019916, 0.30368270192827496, 0.3104999916894095, 0.3083907536097935, 0.3015192747116089, 0.2993286337171282, 0.2962023786136082, 0.30409107889447895, 0.29283526114055086, 0.31233603613717215, 0.29788605655942646, 0.2896154352596828, 0.294182939188821, 0.2961734618459429, 0.29855516978672575, 0.29056850501469206, 0.28923011677605764, 0.310118351663862], "val_accuracy": [0.5806666612625122, 0.7263333201408386, 0.7549999952316284, 0.7736666798591614, 0.8040000200271606, 0.8213333487510681, 0.8376666903495789, 0.8423333168029785, 0.8600000143051147, 0.8483333587646484, 0.8579999804496765, 0.8613333106040955, 0.8683333396911621, 0.875333309173584, 0.8763333559036255, 0.8616666793823242, 0.8730000257492065, 0.8723333477973938, 0.8696666955947876, 0.8796666860580444, 0.8773333430290222, 0.8803333044052124, 0.8820000290870667, 0.8833333253860474, 0.8733333349227905, 0.8806666731834412, 0.8846666812896729, 0.8859999775886536, 0.8806666731834412, 0.8820000290870667, 0.8843333125114441, 0.8846666812896729, 0.8809999823570251]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1], [2, 3, 1, 6, 2, 2, 4, 1, 5, 0, 4, 5, 4, 1, 2, 1, 0, 3, 2, 5, 9, 2, 6, 1, 1, 2, 2, 7, 1, 6, 8, 4, 2, 3, 2, 7, 8, 0, 8, 0, 4, 8, 2, 6, 3, 8, 7, 7, 3, 9, 2, 5, 2, 4, 1, 3, 4, 9, 4, 6, 3, 2, 7, 1, 5, 8, 4, 8, 2, 7, 7, 9, 3], [1, 2, 0, 1, 2, 2, 0, 2, 1, 1, 1, 2, 2, 3, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 1, 2, 1, 3, 2, 2, 2, 3, 0, 3, 1, 2, 0, 0, 3, 1, 1, 1, 1, 2, 2, 3, 3, 0, 0, 0, 3, 2], [57, 39, 24, 98, 26, 73, 46, 33, 24, 64], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [23, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [5, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.7851428389549255, "mapping_values": [1, 69, 69, 40, 29, 4, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, grad))), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.negative(tf.math.multiply(tf.math.add(alpha, alpha), alpha)))), tf.math.add(alpha, tf.math.add(grad, grad)))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, grad))))))))), tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(alpha, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.divide_no_nan(tf.math.sqrt(tf.math.pow(tf.math.add(alpha, alpha), grad)), tf.math.add(alpha, grad)), tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), grad)), grad)), tf.math.add(alpha, tf.math.add(grad, tf.math.sqrt(tf.math.negative(tf.math.add(alpha, grad))))))), tf.math.add(alpha, tf.math.sqrt(grad)))), alpha)), tf.math.add(alpha, grad)))))), tf.math.negative(alpha)), grad)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.2922872225086626, 2.220654095829974, 2.0367359553566224, 1.6320013419874215, 1.3802399811192336, 1.2282204427550325, 0.9782307590349963, 0.9167578938677798, 0.8737036769321771, 0.8215655649516088, 0.8095813593718323, 0.7692929881517488, 0.733897375392876, 0.7232810080547406, 0.7030208629702753, 0.6979497718206408, 0.666733674086033, 0.6597593768224614, 0.6467168099844633, 0.6176432111495994, 0.6166076984671301, 0.5954747609946675, 0.5807427255437516, 0.5733771835257112, 0.5615797495687674, 0.543519071521162, 0.5360533622954704, 0.5323136493971067, 0.5192604895753474, 0.5133491077947107, 0.5102288378480089, 0.48999418985290993, 0.4886948087778798, 0.4790097698756276, 0.468812605503638, 0.4682025437255215, 0.4521169632283562, 0.44166223734928206, 0.4411472354889735, 0.4297470994369465, 0.43064057528224714, 0.43296887722344146, 0.4184346839602534, 0.41268892893071946, 0.4099477197807132, 0.3996665155756916, 0.4006541918069144, 0.39084585150156387, 0.3814721539224915, 0.38284707367774473, 0.37307213221432717, 0.36819896337740676, 0.3658675272128428, 0.3590353797683784, 0.34685894791413263, 0.34118815130718855, 0.3502449134809781, 0.34358468125477726, 0.3318987015869482, 0.32996081695375884, 0.3230740043150514, 0.32555893658332036, 0.3170861752356646], "accuracy": [0.11610091477632523, 0.2849029302597046, 0.3917580246925354, 0.4651961326599121, 0.5238409638404846, 0.5872408151626587, 0.6469422578811646, 0.6597543358802795, 0.6861709356307983, 0.6947563290596008, 0.6921146512031555, 0.7125874757766724, 0.7207766771316528, 0.7296261787414551, 0.744419515132904, 0.7404569983482361, 0.752740740776062, 0.7515519857406616, 0.7544577717781067, 0.7640998363494873, 0.7692511081695557, 0.7709681391716003, 0.7821952104568481, 0.7848368883132935, 0.7837802171707153, 0.7913089394569397, 0.7994980812072754, 0.793422281742096, 0.8070268034934998, 0.8059701323509216, 0.8042530417442322, 0.8152159452438354, 0.8201030492782593, 0.822348415851593, 0.8251221776008606, 0.8300092220306396, 0.8308017253875732, 0.8323867321014404, 0.8378021121025085, 0.8333113193511963, 0.8381983637809753, 0.8385946154594421, 0.8429533839225769, 0.8500858545303345, 0.8461233377456665, 0.8485008478164673, 0.8541803956031799, 0.852331280708313, 0.8570862412452698, 0.8537842035293579, 0.8622375130653381, 0.8625016212463379, 0.8618412613868713, 0.8639545440673828, 0.8672566413879395, 0.8691058158874512, 0.8676528930664062, 0.8696341514587402, 0.8745211958885193, 0.8732003569602966, 0.878351628780365, 0.8749174475669861, 0.8766345381736755], "val_loss": [1.93192229952131, 1.8233908925737654, 1.50623505456107, 1.0080904620034354, 0.7733567953109741, 0.6922320468085152, 0.6581524269921439, 0.6647401366915021, 0.5951988867350987, 0.5644561733518328, 0.5516836472920009, 0.5495269468852452, 0.5197566407067435, 0.5243073361260551, 0.5102641241891044, 0.497516257422311, 0.4791353600365775, 0.47145988259996685, 0.4519072600773403, 0.4489696707044329, 0.43764184202466694, 0.43440091609954834, 0.42119392326899935, 0.413291939667293, 0.40339813913617817, 0.39469240392957416, 0.39101252385548185, 0.3779140966279166, 0.3785840358052935, 0.3719992126737322, 0.3679175206593105, 0.3677202207701547, 0.3564413785934448, 0.3523290923663548, 0.3525296790259225, 0.34765868527548655, 0.344195442540305, 0.33998883622033255, 0.3354059542928423, 0.3297978384154184, 0.3269861766270229, 0.3296392389706203, 0.3231686694281442, 0.3180669971874782, 0.31564284222466604, 0.31146364552634104, 0.3099480782236372, 0.3141383443559919, 0.3134925365447998, 0.30724098852702547, 0.3056718111038208, 0.3039371371269226, 0.30133375951222013, 0.30243689673287527, 0.30285991941179546, 0.29988345078059603, 0.2933887413569859, 0.28915261370795114, 0.28743181909833637, 0.2886326568467276, 0.28922747714178904, 0.2856236696243286, 0.28506018434252056], "val_accuracy": [0.3396666646003723, 0.4346666634082794, 0.5216666460037231, 0.6526666879653931, 0.6759999990463257, 0.7166666388511658, 0.7243333458900452, 0.7210000157356262, 0.7386666536331177, 0.7536666393280029, 0.7563333511352539, 0.7586666941642761, 0.7696666717529297, 0.7693333625793457, 0.781000018119812, 0.778333306312561, 0.7816666960716248, 0.7889999747276306, 0.8006666898727417, 0.8066666722297668, 0.8046666383743286, 0.809333324432373, 0.8190000057220459, 0.8176666498184204, 0.8226666450500488, 0.8306666612625122, 0.8346666693687439, 0.8426666855812073, 0.8363333344459534, 0.8433333039283752, 0.8453333377838135, 0.8496666550636292, 0.8516666889190674, 0.8546666502952576, 0.8516666889190674, 0.859333336353302, 0.8573333621025085, 0.8603333234786987, 0.8616666793823242, 0.8636666536331177, 0.8676666617393494, 0.8659999966621399, 0.8696666955947876, 0.8696666955947876, 0.8683333396911621, 0.871666669845581, 0.8703333139419556, 0.8663333058357239, 0.8676666617393494, 0.8726666569709778, 0.871666669845581, 0.8723333477973938, 0.8730000257492065, 0.8723333477973938, 0.8740000128746033, 0.8786666393280029, 0.8813333511352539, 0.8830000162124634, 0.8803333044052124, 0.878000020980835, 0.8766666650772095, 0.8806666731834412, 0.8830000162124634]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1], [3, 7, 5, 4, 2, 2, 4, 1, 5, 0, 0, 2, 4, 1, 2, 4, 3, 1, 9, 5, 9, 2, 0, 3, 1, 8, 7, 2, 2, 2, 8, 4, 2, 3, 4, 7, 8, 1, 4, 0, 0, 1, 9, 3, 3, 8, 7, 7, 3, 9, 2, 2, 2, 3, 1, 3, 4, 7, 4, 2, 3, 2, 9, 1, 5, 8, 4, 8, 2, 6, 7, 9, 3], [1, 2, 1, 1, 2, 2, 2, 0, 1, 1, 1, 2, 2, 3, 0, 2, 1, 0, 1, 2, 2, 2, 2, 2, 3, 1, 2, 1, 3, 2, 2, 2, 3, 0, 3, 1, 2, 0, 3, 3, 1, 1, 1, 2, 3, 2, 3, 3, 0, 0, 0, 3, 2], [57, 39, 24, 98, 26, 73, 46, 33, 24, 64], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [4, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.7799999713897705, "mapping_values": [1, 68, 68, 41, 27, 5, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 65, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))), tf.math.pow(grad, tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.pow(alpha, tf.math.add(alpha, tf.math.subtract(tf.math.square(alpha), tf.math.add(alpha, grad))))), grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), alpha)), tf.math.add(alpha, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))), alpha)))), alpha)), tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(grad, tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.pow(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)))), alpha)), tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))))))), grad)), grad))), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, alpha))))))))))))))), tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.10819368242131, 1.504084758849239, 1.1789649943508067, 1.0077704849527842, 0.851678447574751, 0.8696511020403433, 0.7994726216001061, 0.7821898143273524, 0.7489772554181429, 0.734780738319404, 0.7116988234909818, 0.6749206579293652, 0.6724144547465235, 0.6681566467185645, 0.6478141400131016, 0.6678173442589782, 0.6220829672171628, 0.6071969616320217, 0.6295854584289942], "accuracy": [0.30260202288627625, 0.4880464971065521, 0.5720512270927429, 0.628582775592804, 0.6952846646308899, 0.681547999382019, 0.7055870890617371, 0.7164179086685181, 0.7170783281326294, 0.7288337349891663, 0.7329282760620117, 0.7511557340621948, 0.7457403540611267, 0.7506273984909058, 0.7607977986335754, 0.7441553473472595, 0.7680623531341553, 0.7777044177055359, 0.7619865536689758], "val_loss": [1.2428300380706787, 0.9262191568102155, 0.8465960366385323, 0.6748618738991874, 0.6047515528542655, 0.5898222752979824, 0.6303530420575824, 0.5450442348207746, 0.5553372587476458, 0.532989536012922, 0.5287511008126395, 0.47951482023511616, 0.4808513947895595, 0.46354448795318604, 0.48512162481035503, 0.4659895215715681, 0.4555033785956247, 0.5006706374032157, 0.44900570596967426], "val_accuracy": [0.6223333477973938, 0.6290000081062317, 0.6259999871253967, 0.6869999766349792, 0.7273333072662354, 0.7236666679382324, 0.715666651725769, 0.7386666536331177, 0.7476666569709778, 0.7596666812896729, 0.7480000257492065, 0.7979999780654907, 0.7866666913032532, 0.8073333501815796, 0.7746666669845581, 0.7850000262260437, 0.8063333630561829, 0.7699999809265137, 0.7976666688919067]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], [3, 7, 5, 4, 2, 5, 4, 1, 8, 3, 4, 5, 4, 1, 2, 6, 3, 3, 2, 5, 9, 2, 5, 2, 1, 2, 0, 7, 2, 6, 8, 4, 0, 3, 4, 7, 8, 1, 8, 0, 6, 1, 0, 6, 3, 8, 7, 7, 5, 9, 2, 2, 2, 4, 1, 3, 4, 7, 4, 2, 4, 2, 7, 1, 5, 8, 4, 8, 2, 7, 7, 9, 3, 2, 0, 8, 4], [1, 2, 2, 2, 2, 2, 0, 0, 1, 1, 1, 2, 2, 2, 2, 1, 1, 0, 2, 2, 2, 2, 2, 2, 3, 1, 2, 3, 3, 2, 2, 2, 3, 0, 3, 1, 2, 0, 3, 3, 1, 1, 1, 2, 3, 2, 3, 3, 0, 0, 0, 3, 2], [83, 38, 25, 22, 26, 73, 46, 33, 24, 64], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [23, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [5, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.7774285674095154, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.2922872225086626, 2.220653951884481, 2.036735237912259, 1.6319978146143026, 1.3802459411270913, 1.228185883791471, 0.9781985551595153, 0.9166802717725819, 0.8735554873699274, 0.8219180685134533, 0.8093914564464229, 0.7694636292666052, 0.7345641789230389, 0.7235309983587788, 0.704169896095814, 0.6986222409332874, 0.6674799060840427, 0.6596376156573912, 0.6469459858915007, 0.6175687508481668, 0.6160592524492982, 0.5949197218418436, 0.58156405454456, 0.5732755919552088, 0.5615338630380884, 0.5428621842404241, 0.5347070815525098, 0.5328947731752941, 0.5192100332397684, 0.5134720916698291, 0.5084816618854375, 0.4894094928742841, 0.48767439990137484, 0.4772789751880315, 0.4684105695608726, 0.4665823554665169, 0.4523818737614062, 0.4433170658856209, 0.4411302528770577, 0.4295484488981275, 0.43015920939131846, 0.4331859205267008, 0.4188712944113394, 0.41435994261984244, 0.40942288509465136, 0.39736457879769094, 0.39993290287266475, 0.3899977258632306, 0.3811560963729369, 0.38340221782559497, 0.37450215125190994], "accuracy": [0.11610091477632523, 0.2849029302597046, 0.3917580246925354, 0.4653282165527344, 0.5239730477333069, 0.5875049233436584, 0.6469422578811646, 0.659490168094635, 0.6852463483810425, 0.6948884129524231, 0.6913221478462219, 0.7128516435623169, 0.7202483415603638, 0.7297582626342773, 0.7430986762046814, 0.7397965788841248, 0.7512878179550171, 0.7532690763473511, 0.7535332441329956, 0.7646281719207764, 0.7693831920623779, 0.7729493975639343, 0.7817989587783813, 0.7836481332778931, 0.7825914621353149, 0.7921014428138733, 0.8006868362426758, 0.7927618622779846, 0.8061022162437439, 0.8049134612083435, 0.8064984679222107, 0.816008448600769, 0.8177255392074585, 0.8210275769233704, 0.8253863453865051, 0.8298771381378174, 0.8327829837799072, 0.8310658931732178, 0.8367455005645752, 0.833179235458374, 0.8408400416374207, 0.8383304476737976, 0.8416325449943542, 0.8479725122451782, 0.8477083444595337, 0.8515387773513794, 0.852331280708313, 0.8524633646011353, 0.8555012345314026, 0.8520671129226685, 0.8590674996376038], "val_loss": [1.931922367640904, 1.8233906200953893, 1.5062330109732491, 1.0080897808074951, 0.7733656508581979, 0.6922570126397269, 0.6580868278230939, 0.6646093811307635, 0.5948096343449184, 0.5643026317868914, 0.5515843970435006, 0.5499944516590664, 0.5201291016169957, 0.5248180287224906, 0.5111396653311593, 0.4976250614438738, 0.4797126054763794, 0.4710339137486049, 0.4515571594238281, 0.4482951675142561, 0.4364879471915109, 0.4347392661230905, 0.421872147492, 0.4143071174621582, 0.4038341726575579, 0.3950736778123038, 0.39187255927494596, 0.37878998688289095, 0.37894714730126516, 0.3715429646628244, 0.3679934825216021, 0.36791296516145977, 0.35625535249710083, 0.35152610710689, 0.35126884494509014, 0.34604121106011526, 0.3438624995095389, 0.340825046811785, 0.33667690413338797, 0.3312761187553406, 0.32739501340048655, 0.3296483669962202, 0.3240565998213632, 0.3196319511958531, 0.3164321780204773, 0.3127556698662894, 0.3114699806485857, 0.3154022012438093, 0.31527580533708843, 0.3095531037875584, 0.3078409177916391], "val_accuracy": [0.3396666646003723, 0.4346666634082794, 0.5216666460037231, 0.652999997138977, 0.6759999990463257, 0.7166666388511658, 0.7236666679382324, 0.7223333120346069, 0.7390000224113464, 0.7553333044052124, 0.7559999823570251, 0.7576666474342346, 0.7706666588783264, 0.768666684627533, 0.7793333530426025, 0.7796666622161865, 0.7816666960716248, 0.7889999747276306, 0.7990000247955322, 0.8050000071525574, 0.8050000071525574, 0.8100000023841858, 0.8176666498184204, 0.8159999847412109, 0.8206666707992554, 0.831333339214325, 0.8366666436195374, 0.8423333168029785, 0.8366666436195374, 0.8416666388511658, 0.8463333249092102, 0.8476666808128357, 0.8523333072662354, 0.8546666502952576, 0.8550000190734863, 0.859666645526886, 0.8583333492279053, 0.8613333106040955, 0.8603333234786987, 0.862333357334137, 0.8663333058357239, 0.8653333187103271, 0.8693333268165588, 0.8693333268165588, 0.8669999837875366, 0.8730000257492065, 0.8679999709129333, 0.8650000095367432, 0.8659999966621399, 0.8723333477973938, 0.8700000047683716]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [3, 3, 1, 2, 2, 2, 4, 1, 0, 0, 4, 5, 4, 3, 2, 2, 3, 3, 2, 5, 9, 2, 6, 8, 1, 2, 3, 7, 2, 6, 8, 4, 2, 3, 2, 7, 8, 0, 8, 1, 4, 1, 0, 6, 3, 2, 7, 6, 3, 9, 2, 2, 2, 4, 5, 3, 2, 7, 4, 2, 3, 2, 7, 1, 5, 8, 4, 8, 2, 7, 7, 9, 3, 5, 7, 5, 6, 0, 2, 3, 9], [1, 2, 1, 1, 2, 2, 2, 0, 2, 1, 1, 1, 2, 3, 2, 2, 1, 0, 2, 0, 1, 2, 2, 2, 3, 1, 2, 0, 3, 2, 2, 2, 0, 0, 2, 1, 2, 0, 3, 3, 1, 1, 2, 2, 3, 2, 2, 1, 0, 0, 0, 3, 2, 2, 1, 3, 3], [57, 75, 25, 22, 26, 73, 79, 33, 24, 64, 36, 36, 57, 84], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [14, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [5, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.7422857284545898, "mapping_values": [1, 138, 138, 81, 57, 14, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 82, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.negative(alpha), tf.math.add(alpha, grad))), grad), tf.math.negative(tf.math.pow(tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.square(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), grad)), tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(grad, alpha)))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.sqrt(tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(grad, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))))), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))))), grad)))), tf.math.add(alpha, tf.math.sqrt(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.subtract(alpha, tf.math.add(alpha, grad))))), tf.math.pow(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), tf.math.negative(grad))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.multiply(alpha, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.add(alpha, grad)))))))))))), tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(grad, tf.math.add(alpha, tf.math.pow(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))))), tf.math.square(tf.math.multiply(grad, alpha)))), tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.add(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.math.subtract(alpha, tf.math.square(tf.math.add(alpha, grad))))))))), tf.math.add(alpha, grad)), tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.math.sqrt(grad)))), tf.math.pow(tf.math.sqrt(tf.math.add(alpha, grad)), tf.math.add(alpha, alpha))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, grad)))))), tf.math.add(grad, tf.math.square(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))))), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, grad))))))), tf.math.add(alpha, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.301629998727702, 2.288846665149226, 2.2662915349589237, 2.2297107026152183, 2.181978707993114, 2.105089820213857, 1.991478352971191, 1.8229301893290686, 1.625786550702231, 1.4761724002672114, 1.4032401024405636, 1.348629816742684, 1.3383972075290653, 1.2546459908624603, 1.1370707065390557, 1.008383291366944, 0.9353565261773682, 0.9262323286775521, 0.9236229996497936, 0.9102581123146225, 0.8765085380563269, 0.832328378256711, 0.8096011188744774, 0.820197376931238, 0.8256432716762385, 0.8317156067346113, 0.8200238103234238, 0.805428233113287, 0.7943709578417737, 0.7576722656542111, 0.7382392222067904, 0.7262052692410936, 0.7351658026366863, 0.7394987990780277, 0.7277347917302315, 0.7174484760549327, 0.7124138945727663, 0.7040453025173943], "accuracy": [0.09126931428909302, 0.12812046706676483, 0.19072777032852173, 0.2833179235458374, 0.3361510932445526, 0.37868180871009827, 0.40523049235343933, 0.43970412015914917, 0.46268656849861145, 0.4916127324104309, 0.5198785066604614, 0.542728841304779, 0.5540879964828491, 0.5845991373062134, 0.6239598393440247, 0.6481310129165649, 0.6478668451309204, 0.6601505875587463, 0.6688680648803711, 0.6779817938804626, 0.6913221478462219, 0.6913221478462219, 0.7025492191314697, 0.7043983340263367, 0.6929071545600891, 0.6944921612739563, 0.6984546184539795, 0.7053229212760925, 0.7088891863822937, 0.7156254053115845, 0.7195879220962524, 0.7194558382034302, 0.7169462442398071, 0.7176066637039185, 0.726192057132721, 0.7353057861328125, 0.7354378700256348, 0.7380794882774353], "val_loss": [1.963761465890067, 1.9458131790161133, 1.918149675641741, 1.880438940865653, 1.8244145257132394, 1.7344061987740653, 1.5920558997562952, 1.3910239764622279, 1.1696661881038122, 0.9901202065604073, 0.8637115955352783, 0.7862284524100167, 0.7325845275606427, 0.7073369366782052, 0.680030243737357, 0.6361524036952427, 0.658670152936663, 0.6817132915769305, 0.688518796648298, 0.6654398611613682, 0.620560918535505, 0.5883843728474208, 0.574207237788609, 0.5642383439200265, 0.5611452375139508, 0.5601391111101423, 0.5581781693867275, 0.5607535498482841, 0.5532023055212838, 0.5359874623162406, 0.5264208657400948, 0.5301446063177926, 0.5365465027945382, 0.5370568037033081, 0.5344518082482475, 0.530189071382795, 0.5239311116082328, 0.515542881829398], "val_accuracy": [0.08799999952316284, 0.25600001215934753, 0.3630000054836273, 0.40166667103767395, 0.42266666889190674, 0.46000000834465027, 0.49933332204818726, 0.5519999861717224, 0.6046666502952576, 0.6570000052452087, 0.6693333387374878, 0.6786666512489319, 0.6996666789054871, 0.706333339214325, 0.7133333086967468, 0.7246666550636292, 0.7133333086967468, 0.7039999961853027, 0.7293333411216736, 0.7366666793823242, 0.7426666617393494, 0.737666666507721, 0.734000027179718, 0.7506666779518127, 0.7490000128746033, 0.749666690826416, 0.7506666779518127, 0.7563333511352539, 0.7573333382606506, 0.7586666941642761, 0.7683333158493042, 0.7720000147819519, 0.7753333449363708, 0.7693333625793457, 0.7673333287239075, 0.7663333415985107, 0.765999972820282, 0.7696666717529297]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [3, 7, 5, 9, 2, 2, 4, 1, 5, 0, 4, 5, 4, 1, 2, 2, 3, 3, 2, 5, 9, 2, 5, 3, 1, 2, 7, 7, 2, 6, 8, 4, 2, 3, 4, 7, 8, 1, 8, 0, 6, 1, 0], [2, 2, 1, 1, 2, 2, 2, 0, 1, 1, 1, 1, 2, 3, 2, 1, 1, 0, 2, 2, 1, 2, 2, 2, 3, 1, 2, 3, 3, 2, 2, 2, 3, 0, 3, 1, 2, 0, 3, 3, 1, 1, 1, 2, 3, 2, 3, 3, 0, 0, 0, 3, 2], [3, 75, 25, 22, 26, 73, 46, 33, 24, 64], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 2, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [87, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [5, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.40685713291168213, "mapping_values": [1, 6, 6, 4, 2, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)))), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3023073143569186, 2.351654704409725, 2.2455631568998378, 2.273532595695553, 2.242337757302565, 2.2489946787273247, 2.3129762964572387, 2.3438962010691085], "accuracy": [0.21344605088233948, 0.17051908373832703, 0.17672698199748993, 0.1328754425048828, 0.1492537260055542, 0.2867520749568939, 0.10117553919553757, 0.17434948682785034], "val_loss": [1.9695672988891602, 1.977853434426444, 1.4438002450125558, 1.9677403313773019, 1.9614932877676827, 1.999258381979806, 1.9734717777797155, 2.1290698732648576], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.41333332657814026, 0.1693333387374878, 0.1653333306312561, 0.10366666316986084, 0.10366666316986084, 0.0963333323597908]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1], [3, 7, 5, 4, 2, 2, 4, 1, 5, 0, 0, 9, 4, 1, 2, 4, 3, 3, 5, 1, 9, 2, 9, 2, 1, 2, 7, 1, 2, 2, 8, 0, 2, 2, 4, 7, 8, 2, 4, 0, 0, 5, 9, 6, 3, 8, 7, 7, 3, 9, 2, 2, 2, 3, 1, 3, 4, 7, 4, 2, 3, 2, 9, 1, 5, 8, 4, 8, 2, 6, 7, 9, 3], [2, 2, 2, 1, 2, 2, 2, 0, 1, 1, 2, 2, 2, 3, 0, 1, 1, 0, 2, 2, 2, 1, 2, 2, 3, 1, 2, 1, 3, 2, 2, 2, 3, 0, 3, 1, 2, 0, 3, 3, 1, 1, 1, 2, 3, 2, 3, 3, 0, 0, 0, 3, 2], [57, 39, 24, 98, 26, 73, 46, 33, 24, 64], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [89, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [5, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [3, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.2305714339017868, "mapping_values": [1, 6, 6, 3, 3, 0, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.3023159695717133, 2.344981480457244, 2.2580357271493496, 2.3023912387989482, 2.2809741266525463, 2.3037689220887985, 2.2878068939506764, 2.258612132327526, 2.2825882649613787], "accuracy": [0.21357811987400055, 0.16616034507751465, 0.14159291982650757, 0.10368511080741882, 0.13049794733524323, 0.10170386731624603, 0.14793290197849274, 0.1484612375497818, 0.15810328722000122], "val_loss": [1.969489915030343, 1.975172655923026, 1.974485192980085, 1.958514622279576, 1.97560943875994, 1.965224129813058, 1.9732886723109655, 1.9788810866219657, 1.9741941860743932], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.18066667020320892, 0.09733333438634872, 0.0963333323597908, 0.10333333164453506, 0.09666666388511658, 0.10333333164453506]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1], [3, 7, 5, 4, 2, 2, 0, 1, 5, 0, 4, 5, 4, 6, 2, 2, 2, 3, 2, 5, 9, 2, 5, 3, 2, 2, 1, 7, 2, 6, 8, 3, 2, 3, 4, 7, 8, 1, 8, 0, 2, 1, 1, 6, 3, 3, 7, 2, 3, 9, 2, 2, 2, 9, 1, 3, 4, 7, 4, 2, 3, 2, 7, 1, 5, 3, 4, 8, 2, 7, 7, 5, 3], [1, 2, 1, 1, 2, 2, 2, 2, 1, 2, 1, 1, 1, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 0, 2, 1, 2, 3, 3, 0, 1, 2, 3, 0, 2, 2, 0, 0, 1, 3, 0, 3, 1, 1, 3, 0, 1, 0, 0, 2, 2, 2, 0], [57, 75, 25, 22, 92, 73, 46, 11, 24, 37, 34, 83, 32, 91, 47], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [5, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [8, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [5, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.11628571152687073, "mapping_values": [1, 66, 66, 38, 28, 2, 2, 2, 2, 0, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 58, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.square(alpha)), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.square(tf.math.negative(alpha)), tf.math.add(alpha, alpha)))), grad), tf.math.pow(tf.math.square(tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.square(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, tf.math.square(grad)), alpha)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(tf.math.subtract(tf.math.add(tf.math.add(tf.math.add(alpha, grad), tf.math.divide_no_nan(alpha, tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(grad, tf.math.multiply(tf.math.add(alpha, grad), grad)), tf.math.add(alpha, alpha)))), grad), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), grad)), grad))), tf.math.add(alpha, grad))))), grad)))), tf.math.add(alpha, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)))), grad)), tf.math.add(alpha, alpha))))))), tf.math.sqrt(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.square(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3035010186168794, 2.3030973270883837, 2.303693635132114, 2.30149699350185, 2.301040130378926, 2.3012158259771063, 2.3020266742439257, 2.3002567922969805, 2.3016095625300843, 2.30026646634103, 2.3006403571531804, 2.300926110275575, 2.3002941532220667, 2.3014546136310656, 2.3012046980552388, 2.301555872908232, 2.301766623186004, 2.301969759562831, 2.3021628901061284, 2.3023769754413066, 2.3023428217830313, 2.3025159697569815, 2.30256160904372, 2.3025638107704904, 2.3025764638028834], "accuracy": [0.08730682730674744, 0.09219389408826828, 0.08757099509239197, 0.09774138033390045, 0.09074098616838455, 0.09457138925790787, 0.0956280529499054, 0.09668471664190292, 0.09457138925790787, 0.09589222073554993, 0.09959053993225098, 0.09602430462837219, 0.10157178342342377, 0.0944393053650856, 0.10196803510189056, 0.09985470771789551, 0.09602430462837219, 0.10315678268671036, 0.10289261490106583, 0.10593052208423615, 0.10487385839223862, 0.1026284471154213, 0.10051512718200684, 0.10276053100824356, 0.1010434553027153], "val_loss": [1.970367091042655, 1.9703189986092704, 1.9702459062848772, 1.970167773110526, 1.9700820786612374, 1.9700096675327845, 1.969973087310791, 1.9700189317975725, 1.9701591219220842, 1.9704142298017229, 1.9707986286708288, 1.9712766919817244, 1.9717687198093958, 1.9721862248011999, 1.9725254603794642, 1.9728379930768694, 1.9730932371956962, 1.9733163288661413, 1.9734600612095423, 1.9735636029924666, 1.973611899784633, 1.9736365590776717, 1.973642213003976, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.035999998450279236, 0.039000000804662704, 0.04100000113248825, 0.04399999976158142, 0.04833333194255829, 0.052666667848825455, 0.06300000101327896, 0.07233333587646484, 0.07966666668653488, 0.09166666865348816, 0.10300000011920929, 0.10233332961797714, 0.10333333164453506, 0.10366666316986084, 0.09833333641290665, 0.08933333307504654, 0.08533333241939545, 0.09133332967758179, 0.10599999874830246, 0.11433333158493042, 0.11299999803304672, 0.10599999874830246, 0.10233332961797714, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1], [3, 7, 5, 0, 2, 2, 4, 2, 5, 0, 4, 5, 4, 1, 2, 2, 6, 3, 2, 5, 9, 2, 5, 3, 3, 2, 7, 7, 2, 6, 8, 4, 2, 3, 4, 7, 8, 1, 8, 0, 6, 1, 9, 9, 4, 0, 3, 8], [1, 2, 1, 1, 2, 2, 2, 0, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 2, 2, 2, 3, 1, 2, 1, 2, 2, 2, 2, 3, 0, 3, 1, 2, 0, 3, 1, 1, 1, 1, 2, 3, 2, 3, 3, 0, 0, 1, 0, 1], [57, 75, 25, 22, 26, 73, 46, 33, 24, 64], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 2, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [0, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [2, 4, 3], [78], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [0, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10542856901884079, "mapping_values": [1, 1, 1, 0, 1, 0, 11, 11, 6, 5, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.square(tf.math.add(tf.math.add(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [2.302837892278405, 2.300130553076123, 2.2999525666630514, 2.300675244520936, 2.3016428406117946, 2.302425061423529, 2.302473019300246, 2.3028315822635075, 2.3032260617213463, 2.3036929879599812], "accuracy": [0.08730682730674744, 0.09879804402589798, 0.10342095047235489, 0.11108175665140152, 0.109232597053051, 0.11715757846832275, 0.11306300014257431, 0.09959053993225098, 0.09906221181154251, 0.09998679161071777], "val_loss": [1.968973227909633, 1.9691626003810339, 1.9713329587663924, 1.9724751199994768, 1.973313672201974, 1.973341601235526, 1.973480156489781, 1.9736417361668177, 1.9738948004586356, 1.9743414606366838], "val_accuracy": [0.060333333909511566, 0.10000000149011612, 0.11233333498239517, 0.10966666787862778, 0.1236666664481163, 0.11500000208616257, 0.10233332961797714, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1], [2, 7, 5, 4, 8, 2, 4, 8, 5, 0, 0, 5, 4, 1, 2, 4, 3, 3, 5, 3, 9, 2, 5, 3, 8, 9, 7, 2, 2, 2, 8, 4, 2, 3, 4, 7, 8, 1, 4, 0, 0, 2, 3, 3, 3, 8, 7, 7, 3, 9, 2, 2, 2, 3, 1, 3, 4, 7, 4, 2, 3, 2, 9, 1, 5, 8, 4, 8, 2, 6, 7, 9, 3], [1, 2, 1, 1, 2, 2, 2, 0, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2, 2, 3, 1, 2, 1, 2, 2, 2, 2, 3, 0, 3, 1, 2, 0, 3, 1, 1, 1, 1, 2, 3, 2, 3, 3, 0, 0, 1, 0, 1], [34, 75, 47, 22, 26, 73, 46, 33, 24, 64], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [32, 95, 54, 66], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1], [6, 9, 0, 3, 5, 9, 8], [4, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 3, 3, 0, 3, 3, 1, 2, 0, 4, 3, 3, 0, 1, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), tf.math.square(alpha)), lambda shape,  alpha, beta, grad: tf.math.multiply(grad, tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.add(sigma, tf.math.negative(sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3169912515992204, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08519349992275238, 0.10130762308835983, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [16.1697872706822, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10000000149011612, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [3, 3, 5, 4, 1, 2, 4, 1, 5, 0, 2, 5, 4, 1, 2, 4, 3, 3, 5, 5, 9, 2, 5, 3, 1, 2, 7, 2, 2, 9, 8, 6, 2, 6, 4, 4, 8, 1, 4, 5, 0, 1, 9, 3, 3, 8, 6, 7, 3, 9, 2, 2, 2, 0, 1, 3, 2, 7, 4, 2, 9, 2, 9, 1, 5, 1, 0, 8, 2, 6, 7, 9, 3], [1, 2, 1, 1, 2, 2, 2, 0, 1, 1, 1, 2, 2, 2, 0, 1, 1, 0, 2, 2, 2, 2, 2, 2, 3, 1, 2, 1, 3, 2, 2, 2, 3, 0, 3, 1, 2, 0, 0, 3, 1, 2, 1, 2, 2, 2, 3, 3, 0, 0, 0, 3, 2], [57, 14, 25, 22, 26, 73, 46, 33, 24, 64], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1], [3, 6, 1, 3, 5, 9, 8, 9], [5, 4, 3], [78, 5], [1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 3, 3, 0, 3, 3, 2, 1, 1, 11, 8, 8, 0, 2, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))), tf.math.add(alpha, grad)), alpha)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.multiply(sigma, sigma)), sigma)), tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2426128418590448.0, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.05560692027211189, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1], [3, 7, 5, 5, 2, 5, 4, 1, 8, 3, 3, 5, 4, 1, 0, 6, 3, 3, 2, 5, 9, 2, 5, 2, 1, 2, 0, 7, 2, 5, 8, 4, 0, 3, 4, 5, 8, 1, 8, 0, 5, 1, 0, 6, 3, 2, 7, 7, 1, 9, 2, 2, 2, 4, 1, 3, 4, 7, 4, 2, 4, 2, 7, 1, 5, 8, 4, 8, 2, 7, 7, 9, 3, 2, 0, 8, 4], [1, 2, 1, 1, 2, 2, 2, 0, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 2, 0, 2, 2, 2, 3, 2, 2, 1, 2, 0, 2, 2, 3, 0, 3, 1, 2, 0, 3, 1, 1, 1, 1, 2, 3, 2, 3, 3, 0, 0, 1, 0, 1], [57, 75, 25, 22, 26, 73, 46, 33, 24, 64], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 2, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [61, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [5, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 62, 62, 39, 23, 3, 11, 11, 6, 5, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 79, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.square(grad))), tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.multiply(alpha, tf.math.add(alpha, alpha)))), grad)), tf.math.multiply(tf.math.square(tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.square(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), grad), tf.math.add(alpha, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.add(alpha, grad), tf.math.pow(tf.math.add(alpha, alpha), tf.math.square(grad))))), grad)))))))))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), alpha))))), alpha)))))))), tf.math.add(alpha, grad))))), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.sqrt(grad)))))), grad))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.add(beta, grad), alpha), tf.math.square(tf.math.add(tf.math.add(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1], [3, 7, 5, 4, 2, 5, 4, 1, 8, 3, 6, 5, 4, 1, 2, 6, 3, 3, 2, 5, 9, 2, 5, 2, 1, 2, 0, 7, 2, 6, 8, 4, 0, 3, 5, 5, 8, 1, 8, 0, 6, 1, 0, 6, 3, 5, 7, 7, 2, 9, 2, 2, 2, 4, 1, 3, 4, 7, 4, 2, 4, 2, 7, 1, 5, 8, 4, 8, 2, 7, 7, 9, 3, 2, 0, 8, 4], [1, 2, 1, 1, 2, 2, 2, 0, 1, 1, 1, 1, 2, 3, 2, 1, 2, 0, 0, 2, 2, 2, 2, 2, 3, 1, 2, 2, 3, 2, 0, 2, 3, 0, 3, 1, 2, 0, 3, 3, 1, 1, 1, 2, 3, 2, 3, 3, 0, 0, 0, 3, 2], [57, 75, 25, 22, 26, 73, 46, 33, 24, 64], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1], [2, 6, 0, 3, 5, 9, 8], [2, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [1, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 74, 74, 45, 29, 4, 3, 3, 2, 1, 1, 6, 4, 3, 1, 0, 2, 1, 1, 0], "tree_depth": 67, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha)))), grad), tf.math.divide_no_nan(tf.math.square(tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.square(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), grad)), tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.negative(grad), tf.math.multiply(tf.math.add(alpha, grad), tf.math.square(tf.math.add(alpha, alpha))))))), tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.sqrt(grad), tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))))))))), tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))), grad))))))), tf.math.add(alpha, grad))), grad)), grad))))), tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))))))), tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, beta))), sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0], [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1], [3, 7, 5, 4, 2, 3, 4, 1, 8, 3, 4, 5, 4, 1, 2, 6, 3, 3, 2, 5, 9, 2, 5, 2, 1, 2, 0, 7, 2, 6, 8, 4, 0, 3, 4, 7, 8, 1, 8, 0, 6, 1, 0, 6, 3, 8, 7, 7, 5, 9, 2, 2, 2, 4, 1, 3, 4, 7, 4, 2, 4, 2, 7, 1, 5, 8, 4, 8, 2, 7, 7, 9, 3, 2, 0, 8, 4], [1, 2, 1, 1, 2, 2, 2, 0, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 2, 2, 2, 3, 1, 2, 1, 2, 2, 2, 2, 3, 0, 3, 1, 2, 0, 3, 1, 1, 1, 1, 2, 3, 2, 3, 3, 0, 0, 1, 0, 1], [57, 75, 25, 22, 26, 73, 46, 33, 24, 64], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 2, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [18, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 2, 9, 8], [2, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [4, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 3, 3, 0, 11, 11, 6, 5, 0, 11, 9, 7, 2, 1, 3, 1, 2, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(alpha)))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.add(beta, grad), alpha), tf.math.square(tf.math.add(tf.math.add(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, beta))), tf.math.add(sigma, tf.math.multiply(sigma, sigma)))), tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(beta, beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [3, 7, 5, 9, 2, 2, 4, 2, 5, 0, 4, 5, 4, 1, 2, 2, 6, 3, 2, 5, 9, 2, 5, 3, 3, 2, 7, 7, 2, 6, 8, 4, 2, 3, 4, 7, 8, 1, 8, 0, 6, 1, 9, 9, 4, 0, 3, 8], [1, 2, 1, 1, 2, 2, 2, 0, 1, 1, 1, 1, 2, 3, 2, 1, 1, 0, 2, 2, 1, 2, 2, 2, 3, 1, 2, 3, 3, 2, 2, 2, 3, 0, 3, 1, 2, 0, 3, 3, 1, 1, 1, 2, 3, 2, 3, 3, 0, 0, 0, 3, 2], [57, 75, 25, 22, 26, 73, 46, 33, 24, 64], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [5, 4, 3], [78], [0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [7, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [0, 3, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 3, 3, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.square(alpha), grad)), alpha)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), sigma)", "other_info": {"loss": [2.302423435951095, 2.3021972921656393, 2.3027785323819057, 2.304964358796218, 2.3147641070026683, 2.364948350487919, 2.644278857056428, 4.1877545416079585, 9.725094633615091, 16.91621841311754], "accuracy": [0.10474177449941635, 0.10566636174917221, 0.10315678268671036, 0.10513802617788315, 0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9737253870282854, 1.973989691053118, 1.97492858341762, 1.9791747501918249, 1.9990857669285365, 2.1041077205113004, 2.7010268483843123, 5.8286285400390625, 11.92605345589774, 18.075822557721818], "val_accuracy": [0.10000000149011612, 0.0963333323597908, 0.0963333323597908, 0.0963333323597908, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], [3, 7, 5, 4, 2, 2, 4, 1, 5, 0, 4, 5, 4, 1, 2, 2, 3, 3, 2, 5, 9, 2, 5, 3, 1, 2, 7, 7, 2, 6, 8, 4, 2, 3, 4, 7, 8, 1, 8, 0, 6, 1, 0, 6, 3, 8, 7, 7, 3, 9, 2, 2, 2, 4, 1, 3, 4, 7, 4, 2, 3, 2, 7, 1, 5, 8, 4, 8, 2, 7, 7, 9, 3], [1, 2, 2, 2, 2, 2, 0, 0, 1, 1, 1, 2, 2, 2, 2, 1, 1, 0, 2, 2, 2, 2, 2, 2, 3, 1, 2, 3, 3, 2, 2, 2, 3, 0, 3, 1, 2, 0, 3, 3, 1, 1, 1, 2, 3, 2, 3, 3, 0, 0, 0, 3, 2], [83, 38, 25, 22, 26, 73, 46, 33, 24, 64], [1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [6, 8, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [5, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [0, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 2, 1, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, grad)), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1235269504.8833447, 23739341527.931316, 110659182298.77162, 307640729288.37726, 647300155780.7169, 1190891188939.7585], "accuracy": [0.10196803510189056, 0.10236428678035736, 0.09430722147226334, 0.10157178342342377, 0.09866596013307571, 0.10157178342342377], "val_loss": [4627810742.857142, 37011275776.0, 124900657444.57143, 296046474971.4286, 578201546166.8572, 999114482834.2858], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], [3, 3, 1, 4, 2, 2, 4, 1, 5, 0, 4, 5, 4, 1, 2, 2, 3, 3, 2, 5, 9, 2, 6, 8, 1, 2, 8, 7, 2, 6, 8, 4, 2, 3, 2, 7, 8, 0, 8, 0, 4, 1, 0, 6, 3, 8, 7, 7, 3, 9, 2, 2, 2, 4, 1, 3, 4, 7, 4, 2, 3, 2, 7, 1, 5, 8, 4, 8, 2, 7, 7, 9, 3], [1, 2, 2, 2, 2, 2, 0, 0, 1, 1, 1, 2, 2, 2, 2, 1, 1, 0, 2, 2, 2, 2, 2, 2, 3, 1, 2, 3, 3, 2, 2, 2, 3, 0, 3, 1, 2, 0, 3, 3, 1, 1, 1, 2, 3, 2, 3, 3, 0, 0, 0, 3, 2], [57, 75, 25, 22, 11, 73, 46, 33, 24], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [8, 1, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [23, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [5, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [0, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 2, 1, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.subtract(tf.math.add(beta, grad), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1235269504.8833447, 23739341527.931316, 110659182298.77162, 307640729288.37726, 647300155780.7169, 1190891188939.7585], "accuracy": [0.10196803510189056, 0.10236428678035736, 0.09430722147226334, 0.10157178342342377, 0.09866596013307571, 0.10157178342342377], "val_loss": [4627810742.857142, 37011275776.0, 124900657444.57143, 296046474971.4286, 578201546166.8572, 999114482834.2858], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1], [3, 7, 9, 4, 2, 2, 4, 1, 5, 0, 0, 5, 4, 1, 2, 4, 3, 3, 5, 5, 9, 2, 6, 3, 1, 2, 7, 2, 2, 4, 2, 4, 2, 3, 6, 7, 8, 1, 4, 2, 5, 1, 9, 3, 3, 8, 7, 7, 3, 9, 2, 2, 2, 3, 1, 3, 4, 7, 4, 2, 3, 2, 9, 1, 5, 8, 4, 8, 2, 6, 7, 9, 3], [1, 2, 1, 1, 0, 2, 2, 2, 1, 1, 1, 2, 2, 2, 0, 1, 1, 0, 2, 2, 2, 2, 2, 2, 3, 1, 2, 1, 2, 2, 2, 2, 3, 0, 3, 1, 2, 0, 3, 3, 1, 1, 1, 2, 3, 2, 3, 3, 0, 0, 0, 3, 2], [57, 39, 63, 98, 26, 73, 46, 33, 24, 64], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [3, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [4, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 61, 61, 35, 26, 5, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 3, 1, 2, 0], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.negative(tf.math.add(alpha, alpha)))), tf.math.add(alpha, alpha)), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(grad)), tf.math.square(grad))), alpha)), tf.math.add(alpha, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)))), alpha)), alpha)))))))), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(grad, tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), grad))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), grad)), grad)))), tf.math.add(alpha, grad))), grad))), tf.math.add(alpha, grad)), alpha))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(beta, beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0], [0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [3, 7, 5, 4, 7, 2, 2, 1, 5, 0, 4, 5, 4, 1, 2, 2, 3, 3, 2, 5, 9, 3, 5, 3, 1, 3, 7, 7, 2, 6, 8, 4, 2, 3, 4, 7, 5, 1, 8, 0, 6, 1, 2, 6, 3, 2, 7, 7, 3, 9, 2, 2, 2, 4, 1, 3, 4, 7, 4, 2, 3, 2, 7, 1, 5, 8, 4, 8, 2, 7, 7, 9, 3], [1, 2, 1, 1, 2, 2, 2, 2, 1, 2, 1, 1, 1, 2, 2, 0, 1, 0, 2, 2, 2, 2, 2, 0, 3, 1, 2, 3, 3, 0, 1, 2, 3, 0, 3, 2, 0, 0, 1], [57, 75, 25, 22, 11, 73, 46, 33, 24], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [8, 95, 54, 66], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [1, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.037142857909202576, "mapping_values": [1, 3, 3, 1, 2, 0, 4, 4, 3, 1, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.square(grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3035124651964676, 2.3031930215543586, 2.3040003758600407, 2.301895200206367, 2.3016776499132896, 2.302008962461174], "accuracy": [0.08730682730674744, 0.09285431355237961, 0.08836349099874496, 0.09602430462837219, 0.09100515395402908, 0.09206181764602661], "val_loss": [1.9703845296587263, 1.9703824860709054, 1.9703786032540458, 1.9703731536865234, 1.9703662054879325, 1.9703575542994909], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]