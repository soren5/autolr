[{"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 1, 1], [1, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 1, 1, 0], [96, 12, 93], [1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1], [0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], [4, 7, 1, 2, 8, 2, 0, 2, 2, 6, 7], [2, 3, 0, 3, 1, 2, 0, 4, 2, 4, 1], [52, 45], [0, 1, 1, 1, 1, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 9, 0, 6, 2, 5, 0, 0, 4, 0, 8], [1, 1, 0, 0, 3, 0, 2], [35, 63, 56, 12]], "fitness": -0.7960000038146973, "mapping_values": [1, 3, 3, 1, 2, 0, 3, 3, 1, 2, 0, 1, 1, 1, 0, 1, 4, 3, 1, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), alpha)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, beta), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.negative(alpha))", "other_info": {"loss": [2.2581513808183287, 2.063980630045286, 1.6281643716209773, 1.2720748865058031, 1.0954558777613899, 0.9976951419055391, 0.9265261747424219, 0.8894272827358923, 0.8502846471606118, 0.8275991868994822, 0.8007073094265068, 0.7809643734006866, 0.7645043566431337, 0.7497665015083845, 0.7371955992224163, 0.7241442130462542, 0.7230020950829679, 0.7177477057867235, 0.689442506390414, 0.6845075953606649, 0.6720235075744041, 0.6705355373324499, 0.671426784715097, 0.6572537570502921, 0.65986016891447, 0.6461949901904538, 0.6285042757560327, 0.6295193059490719, 0.6323321281312684, 0.6184452962739955, 0.6167929270374242, 0.6113419620793304, 0.6147566993459184, 0.604443348110659, 0.5966571134394186, 0.6019973212371114, 0.5852656779728861, 0.5859670863332939, 0.5960385521420902, 0.5749021988770965, 0.5788314630169328], "accuracy": [0.1966715157032013, 0.3883238732814789, 0.48527276515960693, 0.5650508403778076, 0.6169594526290894, 0.644300639629364, 0.6684718132019043, 0.6795667409896851, 0.6914542317390442, 0.6983225345611572, 0.7104741930961609, 0.7153612375259399, 0.726192057132721, 0.7280412316322327, 0.7316074371337891, 0.7297582626342773, 0.7326641082763672, 0.733588695526123, 0.7485140562057495, 0.7494386434555054, 0.7531369924545288, 0.7519482374191284, 0.748778223991394, 0.755118191242218, 0.7536653280258179, 0.7604015469551086, 0.7670056819915771, 0.7721568942070007, 0.7701756954193115, 0.7689869403839111, 0.7720248103141785, 0.7746664881706238, 0.7778365015983582, 0.7786290049552917, 0.7777044177055359, 0.7847048044204712, 0.7840443849563599, 0.7840443849563599, 0.7783648371696472, 0.7861577272415161, 0.7840443849563599], "val_loss": [1.8537896020071847, 1.5207337992531913, 1.0474304131099157, 0.8457836764199393, 0.7230065209524972, 0.6847270556858608, 0.6461813960756574, 0.6078447614397321, 0.5944913285119193, 0.577531133379255, 0.5537365504673549, 0.5696548223495483, 0.5250279562813895, 0.5165389265332904, 0.5046000480651855, 0.505818213735308, 0.49594424452100483, 0.49324430738176617, 0.4974233593259539, 0.4824016945702689, 0.46797047342572895, 0.47874862807137625, 0.4686645099094936, 0.46133783885410856, 0.47304935114724295, 0.44899790627615793, 0.45360166685921804, 0.4390835336276463, 0.44340664999825613, 0.4350953698158264, 0.442010692187718, 0.4274738771574838, 0.4295517291341509, 0.4292900391987392, 0.4217548370361328, 0.41949498653411865, 0.4234697307859148, 0.41856742756707327, 0.42550515277045114, 0.41962907144001554, 0.4224900943892343], "val_accuracy": [0.4440000057220459, 0.5676666498184204, 0.6733333468437195, 0.684333324432373, 0.7129999995231628, 0.7046666741371155, 0.7203333377838135, 0.75, 0.7456666827201843, 0.7573333382606506, 0.762333333492279, 0.7333333492279053, 0.7670000195503235, 0.7753333449363708, 0.781333327293396, 0.7816666960716248, 0.7766666412353516, 0.7956666946411133, 0.7799999713897705, 0.7846666574478149, 0.8006666898727417, 0.7923333048820496, 0.7839999794960022, 0.7896666526794434, 0.781000018119812, 0.8106666803359985, 0.8013333082199097, 0.8180000185966492, 0.8066666722297668, 0.8166666626930237, 0.8133333325386047, 0.8256666660308838, 0.8149999976158142, 0.8140000104904175, 0.8263333439826965, 0.8306666612625122, 0.8243333101272583, 0.8216666579246521, 0.8286666870117188, 0.8186666369438171, 0.8206666707992554]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 1, 1], [1, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 1, 1, 0], [96, 12, 93], [0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [4, 7, 1, 2, 8, 4, 0, 2, 4, 6, 7], [2, 3, 0, 3, 1, 2, 0, 4, 2, 4, 1], [52, 45], [0, 1, 1, 1, 1, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 9, 0, 6, 2, 5, 0, 0, 4, 0, 8], [1, 1, 0, 0, 3, 0, 2], [35, 63, 56, 12]], "fitness": -0.7919999957084656, "mapping_values": [1, 3, 3, 1, 2, 0, 21, 21, 11, 10, 2, 1, 1, 1, 0, 1, 4, 3, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.subtract(beta, tf.math.add(grad, tf.math.add(beta, tf.math.sqrt(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))))), grad)), tf.math.pow(tf.math.negative(tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, grad)))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.negative(alpha))", "other_info": {"loss": [2.2581513673086775, 2.0639807196215174, 1.6281512996634284, 1.2720420170044462, 1.0953833434512792, 0.9974852259825753, 0.9264569993520441, 0.8899484873369086, 0.8504363312193463, 0.8274218184348693, 0.8002448016547602, 0.782068905978706, 0.764416301885002, 0.750007574828451, 0.7367933918346172, 0.723195015077247, 0.7232293651293235, 0.7168576214779889, 0.6887165665500562, 0.6848172297126283, 0.6717648141577165, 0.6688575913499548, 0.6729211949747882, 0.6570902546525017, 0.6593529117294763, 0.6464882880280031, 0.627445787337037, 0.6298915773586842, 0.6371894515642417, 0.6175239648895808, 0.617166039792853, 0.6109131473938173, 0.6149399254961635, 0.6052595447035923, 0.5984977854083888, 0.6025488411966111, 0.5854126793864917, 0.586882345971808, 0.5959614651581993, 0.5747369320448348, 0.5789391405042986], "accuracy": [0.1966715157032013, 0.3883238732814789, 0.4850085973739624, 0.5647866725921631, 0.6165632009506226, 0.643772304058075, 0.6686038970947266, 0.6799629926681519, 0.6914542317390442, 0.6984546184539795, 0.711530864238739, 0.715889573097229, 0.7259278893470764, 0.7284374833106995, 0.7312111854553223, 0.7306828498840332, 0.7337207794189453, 0.735041618347168, 0.7485140562057495, 0.748249888420105, 0.7524765729904175, 0.7534011602401733, 0.7477215528488159, 0.7560427784919739, 0.7532690763473511, 0.7592127919197083, 0.7675340175628662, 0.7713643908500671, 0.7663452625274658, 0.7685906887054443, 0.7716285586357117, 0.7757231593132019, 0.7770439982414246, 0.7775723338127136, 0.7754589915275574, 0.7836481332778931, 0.7827235460281372, 0.7837802171707153, 0.778232753276825, 0.7874785661697388, 0.783119797706604], "val_loss": [1.8537900788443429, 1.5207497392381941, 1.0472835472651891, 0.8455595118658883, 0.7233264105660575, 0.6846468789236886, 0.6479900905064174, 0.6081623179571969, 0.5943240608487811, 0.5773813043321881, 0.5567317179271153, 0.5695813723972866, 0.5253310373851231, 0.5161058732441494, 0.5038271120616368, 0.505728908947536, 0.49553799629211426, 0.49155172279902865, 0.49661898612976074, 0.4813594136919294, 0.46946913855416433, 0.4795503446034023, 0.46813506739480154, 0.4620206356048584, 0.47361721311296734, 0.44915759563446045, 0.4537246397563389, 0.4391831500189645, 0.4420205865587507, 0.4358506458146231, 0.44155919551849365, 0.4282189352171762, 0.42971169097082956, 0.4304984211921692, 0.42178248507635935, 0.4190659948757717, 0.4250329392296927, 0.41905503613608225, 0.42608907393046785, 0.4204366718019758, 0.4210524559020996], "val_accuracy": [0.4440000057220459, 0.5673333406448364, 0.6736666560173035, 0.6840000152587891, 0.7123333215713501, 0.7046666741371155, 0.7196666598320007, 0.75, 0.7480000257492065, 0.7583333253860474, 0.7620000243186951, 0.734000027179718, 0.765666663646698, 0.7796666622161865, 0.7833333611488342, 0.7826666831970215, 0.7766666412353516, 0.7946666479110718, 0.7823333144187927, 0.7889999747276306, 0.7983333468437195, 0.7913333177566528, 0.7853333353996277, 0.7889999747276306, 0.7799999713897705, 0.8109999895095825, 0.8013333082199097, 0.8206666707992554, 0.8086666464805603, 0.8146666884422302, 0.8143333196640015, 0.8256666660308838, 0.8149999976158142, 0.812666654586792, 0.8263333439826965, 0.82833331823349, 0.8253333568572998, 0.8220000267028809, 0.8253333568572998, 0.8166666626930237, 0.8226666450500488]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [1, 1, 0, 1, 1], [1, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 1, 1, 0], [96, 12, 93], [1, 0, 1, 0, 0, 1, 0, 1, 1, 1], [1, 1, 1, 0, 1, 0, 0, 1, 1, 1], [4, 3, 9, 0, 6, 4, 0, 2, 4], [1, 3, 0], [52, 45], [1, 0, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [0, 3], [5, 7], [71], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 9, 0, 6, 2, 5, 0, 0, 4, 0, 8], [1, 1, 0, 0, 3, 0, 2], [25, 63, 56, 12]], "fitness": -0.7440000176429749, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.math.negative(alpha))", "other_info": {"loss": [2.296068979496843, 2.281667351266097, 2.268041757938333, 2.2518089623766775, 2.2338719924427437, 2.212673049577081, 2.189193505306191, 2.161531418983128, 2.1272343731732684, 2.0882599510300697, 2.038890462714636, 1.9860424055415153, 1.9227740893573684, 1.860840000039976, 1.7872980717481513, 1.713755926294192, 1.6422614512143119, 1.5733186123850103, 1.5033270875303233, 1.4491894615482204, 1.3990135602884288, 1.3447730229468062, 1.3099841886208499, 1.2667731936298199, 1.2359842436739703, 1.2076671757261594, 1.1833724462439623, 1.1431387361046061, 1.132982152028878, 1.0996681225062077, 1.0938861803718136, 1.080869028486706, 1.067257841344145, 1.0384211861903028, 1.0181056520942338, 1.0155227458897425, 0.9994479303645923, 0.9903184309564388, 0.9799430981729135, 0.9567157885874299, 0.9487132446845572, 0.9450825800308068, 0.9401933471713446, 0.9197666699686984, 0.9209480765410355, 0.91392603530356, 0.9050262815617551, 0.890725982636351, 0.8947244305274332, 0.8790678068662852, 0.8627842245415579, 0.8738272985714837, 0.872939377570464, 0.8565605682168481, 0.8486942303982141, 0.8484206852376296, 0.8550214580950437, 0.8398796226590648, 0.835283631142246, 0.83834328427527, 0.8381034894358638, 0.8231939553285492, 0.8124689980426154, 0.8109549621880062, 0.8128761717467308, 0.8083319338384227, 0.7991529258172022, 0.7993648854370807, 0.7968061679012, 0.7998959549099085, 0.7884684731349055, 0.7839454311374124, 0.7739001236823508, 0.7752646696786398, 0.7726246690816253, 0.7744090138031523, 0.7770563659336053], "accuracy": [0.1006472036242485, 0.14621582627296448, 0.18002906441688538, 0.21529521048069, 0.25624093413352966, 0.2899220585823059, 0.3203011453151703, 0.33707568049430847, 0.3626997768878937, 0.3796063959598541, 0.40430590510368347, 0.4173821210861206, 0.43811914324760437, 0.4492141008377075, 0.4583278298377991, 0.4695548713207245, 0.48685774207115173, 0.5069343447685242, 0.5169726610183716, 0.5262184739112854, 0.5406154990196228, 0.5497292280197144, 0.5676925182342529, 0.5695416927337646, 0.5753533244132996, 0.5865803956985474, 0.5939770340919495, 0.6061286330223083, 0.6073173880577087, 0.6168273687362671, 0.6145819425582886, 0.6275261044502258, 0.6268656849861145, 0.6428477168083191, 0.6448289752006531, 0.6409985423088074, 0.6465460062026978, 0.6476026773452759, 0.6565843224525452, 0.6606789231300354, 0.6600185036659241, 0.6654338836669922, 0.6688680648803711, 0.6753401160240173, 0.6688680648803711, 0.6781138777732849, 0.6763967871665955, 0.6811517477035522, 0.6798309087753296, 0.6864351034164429, 0.6869634389877319, 0.6889446377754211, 0.6856426000595093, 0.689869225025177, 0.6995112895965576, 0.700171709060669, 0.69673752784729, 0.7033417224884033, 0.7045304179191589, 0.6991150379180908, 0.7058512568473816, 0.7040021419525146, 0.7069079279899597, 0.709549605846405, 0.7073041796684265, 0.711530864238739, 0.713908314704895, 0.7059833407402039, 0.7150970697402954, 0.711530864238739, 0.7145687341690063, 0.7136441469192505, 0.7223616242408752, 0.720380425453186, 0.7213049530982971, 0.7191916704177856, 0.7210407853126526], "val_loss": [1.9569619042532784, 1.9432781083243233, 1.9289306231907435, 1.9130286489214217, 1.8949769565037318, 1.873922892979213, 1.8489374433244978, 1.819147723061698, 1.7835019656590052, 1.7419017383030482, 1.6925687108721053, 1.635955912726266, 1.571967499596732, 1.5029911994934082, 1.4300854206085205, 1.3559943267277308, 1.2836295877184187, 1.2149911267416817, 1.150707687650408, 1.094071899141584, 1.0424034254891532, 0.9967846189226423, 0.957214525767735, 0.9224475111280169, 0.8915117127554757, 0.8644427912575858, 0.8399839401245117, 0.818128057888576, 0.7984296764646258, 0.7801270995821271, 0.7655233485358102, 0.7510861669267926, 0.7383149691990444, 0.7256643261228289, 0.7132629496710641, 0.7033113411494664, 0.6936704431261335, 0.6863044840948922, 0.6777969428471157, 0.6706799949918475, 0.6623072624206543, 0.6572051048278809, 0.6497989892959595, 0.6425694738115583, 0.6380581855773926, 0.6319968359810966, 0.6262859616960798, 0.6206591640199933, 0.6163110903331211, 0.6118449143001011, 0.6076084545680455, 0.6030361482075283, 0.5991361481802804, 0.5960885116032192, 0.5920648063932147, 0.5880262511117118, 0.5854082788739886, 0.5816630465643746, 0.5783371584756034, 0.5764357192175729, 0.573666879108974, 0.5709853512900216, 0.5679633787700108, 0.56599680015019, 0.5627502713884626, 0.5611006362097604, 0.5575764519827706, 0.5557832036699567, 0.5530861105237689, 0.550776754106794, 0.5469330208642142, 0.5451751266207013, 0.542486139706203, 0.5410797255379813, 0.5380410807473319, 0.537017958504813, 0.5352998631341117], "val_accuracy": [0.1496666669845581, 0.2709999978542328, 0.3499999940395355, 0.38966667652130127, 0.41333332657814026, 0.43700000643730164, 0.4546666741371155, 0.4699999988079071, 0.49266666173934937, 0.5183333158493042, 0.5360000133514404, 0.5559999942779541, 0.5709999799728394, 0.5786666870117188, 0.5870000123977661, 0.5963333249092102, 0.606333315372467, 0.6143333315849304, 0.6286666393280029, 0.6393333077430725, 0.6583333611488342, 0.6633333563804626, 0.6736666560173035, 0.6800000071525574, 0.6840000152587891, 0.690666675567627, 0.6890000104904175, 0.6916666626930237, 0.6933333277702332, 0.6963333487510681, 0.7006666660308838, 0.7020000219345093, 0.7039999961853027, 0.7086666822433472, 0.7106666564941406, 0.7139999866485596, 0.7210000157356262, 0.715666651725769, 0.7223333120346069, 0.7266666889190674, 0.7319999933242798, 0.7283333539962769, 0.7360000014305115, 0.7379999756813049, 0.737666666507721, 0.7413333058357239, 0.7453333139419556, 0.7443333268165588, 0.7456666827201843, 0.746666669845581, 0.7463333606719971, 0.75, 0.7516666650772095, 0.7516666650772095, 0.7540000081062317, 0.7570000290870667, 0.7556666731834412, 0.7596666812896729, 0.7606666684150696, 0.7603333592414856, 0.7576666474342346, 0.7576666474342346, 0.7630000114440918, 0.7570000290870667, 0.7603333592414856, 0.7576666474342346, 0.7673333287239075, 0.7630000114440918, 0.7680000066757202, 0.7689999938011169, 0.7683333158493042, 0.7753333449363708, 0.7713333368301392, 0.7693333625793457, 0.7720000147819519, 0.7716666460037231, 0.7743333578109741]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [1, 1, 0, 1, 1], [1, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 1, 1, 0], [96, 12, 93], [0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [4, 7, 1, 2, 8, 4, 0, 2, 4, 6, 7], [3, 3, 0, 3, 1, 2, 0, 4, 2, 4, 1], [52, 45], [0, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [0, 3], [6, 7], [71], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 9, 0, 6, 2, 5, 0, 0, 4, 0, 8], [0, 1, 0, 0, 3, 0, 2], [1, 63, 56, 12]], "fitness": -0.10057143121957779, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.300821779080039, 2.3020440194711016, 2.3025780259783493, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.1010434553027153, 0.10276053100824356, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9729054314749581, 1.973642213003976, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.08633333444595337, 0.10233332961797714, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 1, 0, 1, 1], [1, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 1, 1, 0], [96, 12, 93], [1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [4, 7, 9, 2, 8, 4, 0, 2, 4, 6, 7, 4, 5, 1, 8, 8, 0, 6, 3, 1], [3, 3, 0, 3, 1, 2, 3, 4, 2, 4, 1, 0, 3], [52, 45, 57], [1, 0, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 9, 0, 6, 2, 5, 0, 0, 4, 0, 8], [3, 1, 0, 0, 3, 0, 2], [35, 63, 56, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 0, 33, 33, 20, 13, 3, 1, 0, 0, 0, 0, 13, 9, 4, 3], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.add(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.sqrt(grad), tf.math.add(beta, tf.math.pow(grad, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))))), tf.math.negative(tf.math.add(tf.math.add(beta, grad), tf.math.pow(alpha, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), tf.math.square(tf.math.add(beta, grad)))), tf.math.subtract(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta)))))))))), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), grad))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.divide_no_nan(tf.math.add(tf.math.square(tf.math.negative(tf.math.negative(sigma))), tf.math.pow(alpha, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))), tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 1, 1], [1, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 1, 1, 0], [96, 12, 93], [0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [4, 7, 1, 2, 8, 6, 0, 2, 0, 6, 7], [2, 3, 0, 2, 0, 2, 0, 4, 2, 4, 1], [68, 45], [0, 1, 1, 1, 1, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 1], [1, 3], [5, 7], [71], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [3, 2, 4, 6, 2, 5, 0, 6, 4, 0, 8, 1, 0, 5, 6, 0, 3, 5, 3, 7, 4, 1, 7, 2, 1, 7, 8, 3, 0, 5, 1], [1, 3, 0, 0, 3, 0, 2, 0, 1, 2, 2, 0, 2, 3, 0, 2, 3, 2, 2, 0, 3], [35, 63, 56, 12, 90, 63, 98]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 3, 3, 0, 10, 10, 5, 5, 2, 3, 1, 1, 0, 0, 52, 31, 21, 7], "tree_depth": 33, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(grad, tf.math.square(alpha))), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.subtract(beta, tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))))), beta), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.add(tf.math.pow(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.square(tf.math.negative(sigma)), tf.math.divide_no_nan(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))), sigma)), tf.math.pow(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), beta)), tf.math.negative(tf.math.sqrt(tf.math.subtract(tf.math.negative(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.divide_no_nan(tf.math.negative(tf.math.multiply(tf.math.square(tf.math.multiply(alpha, beta)), tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), beta), tf.math.add(sigma, tf.math.add(tf.math.subtract(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.sqrt(beta), tf.math.multiply(sigma, beta))), beta)))))), tf.math.negative(tf.math.square(tf.math.subtract(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), sigma)))))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 1, 1, 0, 2], [96, 12, 93], [1, 0, 1, 0, 0, 1, 0, 1, 1, 1], [0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [4, 3, 9, 0, 6, 4, 0, 2, 4], [2, 3, 0, 3, 1, 2, 0, 4, 2, 4, 1], [26, 45], [1, 1, 1, 1, 1, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 1], [4, 3], [5, 7], [71], [1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [2, 2, 0, 6, 8, 9, 1, 1, 4, 0, 8], [1, 2, 0, 0, 3, 0, 2], [57, 72, 56, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, beta), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07858935743570328, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 1, 1], [1, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [1, 1, 1, 0], [96, 12, 93], [1, 0, 1, 1, 1, 1, 0, 1, 1, 1], [1, 1, 1, 0, 1, 0, 0, 1, 1, 1], [4, 7, 1, 2, 8, 4, 0, 2, 4, 6, 7], [2, 3, 0, 3, 1, 2, 0, 4, 2, 4, 1], [76, 45], [0, 1, 1, 1, 1, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 9, 2, 6, 2, 5, 0, 0, 4, 0, 8], [1, 1, 0, 0, 3, 0, 2], [35, 63, 56, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 12, 8, 4, 3], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(alpha, alpha)), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.square(tf.math.negative(alpha)), tf.math.negative(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))), tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [279018.43800438906, 5300723.402720909, 24315028.378285564, 67564637.4175142, 144564387.89908862, 268474062.83133006], "accuracy": [0.09985470771789551, 0.09853387624025345, 0.1002509593963623, 0.1014397069811821, 0.10527011007070541, 0.09734513610601425], "val_loss": [1033469.6785714285, 8224287.714285715, 27709612.57142857, 65626628.571428575, 128112539.42857143, 221304150.85714287], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [1, 1, 0, 1, 1], [1, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 1, 1, 0], [96, 12, 93], [1, 0, 1, 0, 0, 1, 0, 1, 1, 1], [0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [4, 3, 9, 0, 6, 4, 0, 2, 4], [3, 3, 0, 5, 5, 1, 0, 0, 4, 3], [76, 45, 25, 46], [1, 0, 1, 1, 1, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 1], [0, 3], [5, 7], [71], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 2, 2, 6, 2, 5, 0, 0, 4, 0, 8], [1, 1, 0, 0, 3, 0, 2], [35, 63, 56, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, grad), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07858935743570328, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [1, 1, 0, 1, 0, 0, 0, 1, 1, 1], [1, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 1, 1, 0, 2], [96, 12, 93], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1], [0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [8, 7, 4, 2, 8, 2, 0, 2, 4, 6, 7], [4, 3, 1, 3, 1, 2, 1, 4, 2, 4, 3], [62, 45], [0, 0, 1, 1, 1, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 1], [0, 3], [4, 7], [71], [1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [2, 2, 2, 6, 2, 9, 0, 0, 4, 0, 8], [1, 1, 0, 0, 3, 0, 2], [81, 63, 56, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 5, 4, 0, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, grad), tf.math.pow(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.math.sqrt(alpha)), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07792893797159195, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [1, 1, 0, 1, 1], [1, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 1, 1, 0], [96, 12, 93], [1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [7, 7, 1, 2, 8, 4, 0, 2, 4, 6, 7], [4, 3, 0, 3, 0, 2, 0, 4, 2, 4, 1], [52, 45, 84], [1, 0, 1, 1, 1, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [5, 9, 0, 6, 2, 5, 0, 0, 4, 0, 8], [1, 1, 0, 0, 3, 0, 2], [26, 63, 56, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 21, 21, 11, 10, 3, 1, 0, 0, 0, 0, 2, 2, 0, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), grad)))))), tf.math.negative(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, grad)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3009766977161794, 2.3023913426878524, 2.3025843556751395, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.1002509593963623, 0.10447761416435242, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9734302929469518, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10066666454076767, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [1, 1, 1], [1, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 1, 1, 0], [96, 12, 93], [0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [5, 5, 8, 0, 6, 4, 0, 2, 4], [5, 3, 1, 3, 1, 2, 1, 4, 2, 4, 3], [62, 45], [1, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [0, 3], [5, 7], [71], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 0, 0, 6, 1, 5, 0, 0, 4, 0, 8], [1, 1, 0, 0, 3, 0, 2], [38, 63, 56, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 4, 4, 3, 1, 0, 1, 0, 0, 0, 0, 12, 8, 4, 2], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.square(tf.math.sqrt(grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.negative(alpha)), tf.math.divide_no_nan(tf.math.subtract(tf.math.square(tf.math.negative(alpha)), tf.math.negative(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.571338041189907, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.03156782314181328, 0.10196803510189056, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [112.33761160714286, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09666666388511658, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 1, 1], [7, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 0, 1, 0], [96, 12, 93], [1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [4, 6, 3, 2, 8, 4, 0, 2, 6, 9, 4], [2, 3, 0, 3, 1, 2, 0, 4, 2, 4, 1], [76, 7], [1, 0, 1, 1, 1, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 1], [0, 3], [5, 7], [71], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 9, 0, 6, 2, 5, 0, 0, 4, 0, 8], [1, 1, 0, 0, 3, 0, 2], [35, 63, 56, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 10, 10, 5, 5, 1, 1, 0, 0, 0, 0, 3, 2, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))))), grad)), alpha))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09694888442754745, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [1, 1, 0, 1, 1], [1, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [3, 1, 1, 0], [96, 12, 93], [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [4, 7, 1, 2, 8, 4, 0, 2, 6, 9, 4], [2, 5, 0, 3, 1, 2, 0, 4, 2, 4, 1], [52, 45], [1, 1, 1, 1, 1, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 1], [0, 3], [5, 7], [71], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 9, 0, 6, 2, 5, 0, 0, 4, 0, 8], [1, 1, 0, 0, 3, 0, 2], [35, 63, 56, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 10, 10, 5, 5, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.add(grad, tf.math.sqrt(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), grad), alpha))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07858935743570328, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 1, 1], [1, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 1, 1, 0], [96, 12, 93], [1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [3, 3, 9, 0, 6, 4, 0, 2, 4, 2, 0], [1, 3, 0, 3, 1, 2, 0, 4, 2, 4, 1], [52, 45, 89], [1, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [0, 3], [6, 7], [71], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 9, 0, 6, 2, 5, 0, 0, 4, 0, 8], [1, 1, 0, 0, 3, 0, 2], [35, 63, 56, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 18, 18, 11, 7, 3, 1, 0, 0, 0, 0, 3, 2, 1, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), alpha)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.pow(grad, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))))))), tf.math.negative(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(alpha, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.358390214720013, 1300.5394453848073, 6.60793887000433e+28, 2.3074578828248584, 2.3079507168903484, 2.3085062983737976, 2.3091298233264506], "accuracy": [0.04107779636979103, 0.04134196415543556, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.1454830169677734, 36059751570.28571, 1.9785834039960588, 1.979029996054513, 1.979527405330113, 1.9800844873700822, 1.9806708608354842], "val_accuracy": [0.006000000052154064, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [1, 1, 0, 1, 1], [1, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 1, 1, 0], [96, 12, 93], [0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 0, 1, 0, 0, 1, 1, 1], [4, 7, 8, 0, 6, 4, 0, 2, 4], [2, 3, 0, 3, 1, 2, 0, 4, 2, 4, 1], [52, 45], [1, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [0, 3], [6, 7], [71], [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 9, 2, 6, 2, 5, 0, 0, 4, 0, 8], [1, 1, 0, 0, 3, 0, 2], [35, 63, 56, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07858935743570328, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 1, 1], [2, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 1, 1, 0], [96, 12, 93], [1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], [4, 1, 1, 2, 4, 4, 0, 2, 4, 6, 7, 7, 7], [2, 3, 0, 3, 1, 2, 0, 4, 2, 4, 1, 1, 5], [76, 7], [1, 0, 1, 1, 1, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 1], [0, 3], [5, 7], [71], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [1, 9, 0, 6, 2, 5, 0, 0, 4, 0, 8], [1, 1, 0, 0, 3, 0, 2], [35, 63, 56, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 26, 26, 13, 13, 2, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), alpha)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.add(beta, beta), tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.pow(tf.math.negative(grad), tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)))), grad), tf.math.add(beta, beta)))))))), grad)), alpha)), tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.negative(alpha))", "other_info": {"loss": [2.3227766079437213, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.638247149331229, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09733333438634872, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 1, 0, 1, 1], [1, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 1, 1, 0], [96, 12, 93], [1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [4, 7, 0, 2, 8, 4, 0, 2, 4, 2, 7], [2, 3, 0, 3, 0, 2, 0, 4, 2, 4, 1], [52, 45], [1, 0, 1, 1, 1, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 9, 0, 6, 2, 5, 0, 0, 4, 0, 8], [1, 1, 0, 0, 3, 0, 2], [59, 63, 56, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 0, 8, 8, 4, 4, 1, 1, 0, 0, 0, 0, 13, 9, 4, 3], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.negative(beta), tf.math.add(grad, tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))))), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.divide_no_nan(tf.math.add(tf.math.square(tf.math.negative(tf.math.negative(alpha))), tf.math.pow(alpha, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))), tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0], [0, 1, 0, 0, 1, 1], [1, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 1, 1, 0], [96, 12, 93], [0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [1, 1, 1, 0, 1, 0, 0, 1, 1, 1], [4, 3, 9, 0, 6, 4, 0, 2, 4], [1, 3, 0], [76, 45], [1, 0, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [0, 3], [5, 7], [71], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [5, 3, 0, 6, 2, 5, 0, 0, 4, 0, 8], [1, 1, 0, 0, 3, 0, 2], [35, 63, 56, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 3, 3, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 8, 4, 2], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.add(tf.math.square(alpha), tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.multiply(tf.math.negative(alpha), tf.math.divide_no_nan(tf.math.add(tf.math.square(tf.math.negative(alpha)), tf.math.negative(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))), tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09325055778026581, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0], [1, 1, 1], [1, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 1, 1, 0], [96, 12, 93], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1], [0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [4, 2, 7, 2, 6, 4, 0, 2, 4], [1, 3, 0, 5], [11, 45], [0, 1, 1, 1, 1, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 1], [0, 3], [5, 7], [71], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [6, 7, 3, 6, 2, 5, 0, 0, 4, 0, 8], [1, 1, 0, 0, 3, 0, 2], [35, 63, 56, 12]], "fitness": -0.07085714489221573, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 2, 3, 1, 2, 1, 1, 0, 0, 13, 7, 6, 3], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.add(alpha, grad)), tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(alpha, alpha), tf.math.divide_no_nan(tf.math.add(tf.math.square(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.math.negative(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))), sigma)), tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3014237542178226, 2.30048596926684, 2.3007187133514964, 2.3003183675873564, 2.3000294480420154, 2.299600575908993, 2.299182864574472, 2.2982867823426814, 2.2995545152093064, 2.299805676759179, 2.2993303607121405, 2.3000014187590225, 2.300458223245651, 2.301320171469569], "accuracy": [0.08836349099874496, 0.09945846349000931, 0.09549596905708313, 0.09259014576673508, 0.09879804402589798, 0.10117553919553757, 0.1002509593963623, 0.10593052208423615, 0.10566636174917221, 0.10857218503952026, 0.10157178342342377, 0.10117553919553757, 0.10210011899471283, 0.09642054885625839], "val_loss": [1.9695442744663783, 1.9691335133143835, 1.9689536094665527, 1.9690512929643904, 1.96919584274292, 1.9691588538033622, 1.9691513606480189, 1.9692073549543108, 1.9693734305245536, 1.969641889844622, 1.9700151171003069, 1.970226424080985, 1.9705536706107003, 1.9707811900547572], "val_accuracy": [0.04600000008940697, 0.05400000140070915, 0.06366666406393051, 0.06700000166893005, 0.07233333587646484, 0.08166666328907013, 0.0833333358168602, 0.0833333358168602, 0.08766666799783707, 0.0846666693687439, 0.08433333039283752, 0.0860000029206276, 0.08166666328907013, 0.0820000022649765]}}]