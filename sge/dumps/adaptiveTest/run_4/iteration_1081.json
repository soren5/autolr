[{"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 5, 4, 2, 2, 4, 1, 5, 0, 0, 2, 4, 6, 2, 4, 3, 2, 5, 5, 9, 2, 5, 3, 1, 2, 7, 2, 2, 2, 8, 4, 2, 3, 4, 8, 5, 5, 4, 0, 0, 1, 9, 3, 3, 8, 7, 7, 3, 9, 2, 2, 2, 3, 1, 3, 4, 7, 4, 2, 3, 2, 9, 1, 5, 8, 4, 8, 2, 6, 7, 9, 3], [1, 2, 0, 1, 0, 2, 0, 2, 1, 1, 0, 2, 2, 3, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 3, 1, 2, 1, 3, 2, 2, 0, 3, 0, 3, 1, 2, 0, 0, 3, 1, 1, 1, 1, 2, 2, 3, 3, 0, 0, 0, 3, 2], [57, 77, 25, 22, 10, 73, 46, 33, 24, 64, 59], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [1, 9, 0, 3, 9, 4, 8], [5, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.8337143063545227, "mapping_values": [1, 6, 6, 3, 3, 1, 3, 3, 2, 1, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.square(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.896075718973795, 1.0673548924436407, 0.7817428054795085, 0.6589420999534031, 0.6005097933653843, 0.5646308832920585, 0.5320880413645876, 0.49951389120192247, 0.4706247054653523, 0.45231542769455874, 0.4250057245313279, 0.42725091509736524, 0.4021201798779192, 0.38683103383366835, 0.37325581861383106, 0.356466637606697, 0.36059990837794126, 0.3347285921468774, 0.3305729407408234, 0.31457330162310093, 0.31817500850842884, 0.2993232992051725, 0.29960546876067545, 0.2809545588554755, 0.2779113503101401, 0.27322546863765323], "accuracy": [0.3572843670845032, 0.6223748326301575, 0.7034738063812256, 0.7424382567405701, 0.7717606425285339, 0.7810064554214478, 0.7967243194580078, 0.8098005652427673, 0.8245938420295715, 0.8296129703521729, 0.8392550349235535, 0.8376700282096863, 0.852331280708313, 0.857218325138092, 0.8601241707801819, 0.863558292388916, 0.8663320541381836, 0.8741249442100525, 0.8753136992454529, 0.8780874609947205, 0.8784837126731873, 0.8887861371040344, 0.8865407705307007, 0.8907673954963684, 0.8931449055671692, 0.8956544995307922], "val_loss": [0.9974908828735352, 0.6108390263148716, 0.530600735119411, 0.4753359726497105, 0.43932044506073, 0.4189146161079407, 0.39626181977135794, 0.3668057918548584, 0.3644692727497646, 0.3447355968611581, 0.3413258535521371, 0.33773040771484375, 0.3263090763773237, 0.3314585941178458, 0.3069929395403181, 0.31325240646089825, 0.3094726971217564, 0.30686525787625996, 0.3083473784582956, 0.30888870784214567, 0.2931165269442967, 0.2990425484521048, 0.28542526279176983, 0.2915093813623701, 0.2987033043588911, 0.2986102955681937], "val_accuracy": [0.5989999771118164, 0.7369999885559082, 0.7450000047683716, 0.7863333225250244, 0.8066666722297668, 0.8186666369438171, 0.8289999961853027, 0.8473333120346069, 0.843666672706604, 0.8629999756813049, 0.8516666889190674, 0.862666666507721, 0.8733333349227905, 0.8679999709129333, 0.878333330154419, 0.8709999918937683, 0.878333330154419, 0.8776666522026062, 0.8743333220481873, 0.8786666393280029, 0.8830000162124634, 0.8773333430290222, 0.8823333382606506, 0.8823333382606506, 0.8759999871253967, 0.8793333172798157]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 7, 5, 5, 2, 2, 4, 1, 8, 3, 4, 2, 4, 1, 2, 1, 3, 3, 5, 2, 9, 2, 5, 2, 1, 2, 2, 7, 2, 9, 0, 4, 0, 3, 4, 9, 9, 6, 8, 0, 6, 1, 0, 2, 3, 8, 7, 9, 1, 9, 2, 4, 2, 4, 2, 3, 4, 7, 2, 9, 4, 2, 7, 1, 5, 8, 4, 8, 2, 7, 7, 9, 3, 2, 0, 8, 8], [1, 2, 0, 1, 0, 2, 0, 2, 1, 1, 0, 2, 2, 3, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 3, 1, 2, 1, 3, 2, 2, 0, 3, 0, 3, 1, 2, 0, 0, 3, 1, 1, 1, 1, 2, 2, 3, 3, 0, 0, 0, 3, 2], [53, 39, 72, 98, 26, 9, 46, 33, 24, 64], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1], [1, 9, 0, 3, 9, 4, 8], [5, 4, 3], [44], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.8305714130401611, "mapping_values": [1, 6, 6, 3, 3, 1, 3, 3, 2, 1, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.square(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.8960764054467318, 1.0674405577254884, 0.7817180956343712, 0.6590298860694408, 0.5993784157166376, 0.5638248041683515, 0.5315292377584346, 0.4988275654618892, 0.4700552561555194, 0.4537293015296638, 0.4266863827219792, 0.42450424270260806, 0.4032743660655114, 0.3866298519003078, 0.37398676866506303, 0.3539371776810695, 0.3620535120074744, 0.3336459015378107, 0.33382030440957683, 0.3210306002235274, 0.3211472243239867, 0.3080622247102758, 0.30102680238356694, 0.28559867155755025, 0.27718951465620295, 0.27435378955457945, 0.2629622186077364, 0.2644478438466122, 0.2514729895914991], "accuracy": [0.3572843670845032, 0.6223748326301575, 0.703209638595581, 0.7423061728477478, 0.7707040309906006, 0.7803460359573364, 0.7971205711364746, 0.8104609847068787, 0.82683926820755, 0.826310932636261, 0.8380662798881531, 0.8385946154594421, 0.8525954484939575, 0.8565579056739807, 0.8581429123878479, 0.8673887252807617, 0.8665962219238281, 0.8737286925315857, 0.8730682730674744, 0.8792761564254761, 0.8779553771018982, 0.8836349248886108, 0.8848236799240112, 0.8903711438179016, 0.8924844861030579, 0.8930128216743469, 0.8961827754974365, 0.8965790271759033, 0.8997490406036377], "val_loss": [0.9975473880767822, 0.6108099733080182, 0.5304741178240094, 0.47449278831481934, 0.43909292561667307, 0.41760947023119244, 0.3952175634247916, 0.3678227152143206, 0.36534231901168823, 0.3455969861575535, 0.34034410544804167, 0.33881997210638864, 0.32285927874701364, 0.3333116514342172, 0.305135897227696, 0.3159700632095337, 0.30796548298427034, 0.3077721766063145, 0.30725943190710886, 0.30739966460636686, 0.2885742613247463, 0.2958609802382333, 0.29334138120923725, 0.2953276378767831, 0.30209835938044954, 0.29956771646227154, 0.2932114856583731, 0.29416041714804514, 0.3006785341671535], "val_accuracy": [0.5993333458900452, 0.7356666922569275, 0.7459999918937683, 0.7876666784286499, 0.8063333630561829, 0.8176666498184204, 0.8296666741371155, 0.8483333587646484, 0.840666651725769, 0.8643333315849304, 0.8556666374206543, 0.862333357334137, 0.8759999871253967, 0.8643333315849304, 0.8759999871253967, 0.8696666955947876, 0.8759999871253967, 0.8776666522026062, 0.8743333220481873, 0.8730000257492065, 0.8820000290870667, 0.8773333430290222, 0.8773333430290222, 0.8859999775886536, 0.878000020980835, 0.8820000290870667, 0.8840000033378601, 0.8816666603088379, 0.8849999904632568]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], [3, 7, 5, 5, 2, 1, 4, 2, 8, 3, 4, 5, 4, 1, 2, 1, 3, 3, 2, 2, 9, 2, 5, 2, 1, 2, 2, 7, 2, 6, 8, 4, 0, 3, 4, 5, 8, 1, 8, 0, 6, 1, 0, 6, 3, 8, 7, 9, 4, 9, 2, 4, 2, 4, 2, 3, 4, 7, 2, 9, 4, 2, 7, 1, 5, 8, 4, 8, 2, 7, 7, 9, 3, 2, 0, 8, 8], [2, 2, 1, 2, 0, 2, 2, 2, 1, 1, 1, 2, 2, 2, 0, 1, 2, 0, 2, 0, 2, 2, 2, 1, 3, 1, 2, 1, 3, 2, 2, 2, 3, 0, 3, 1, 2, 0, 3, 3, 1, 1, 1, 2, 3, 2, 2, 3, 0, 0, 0, 3, 2], [57, 75, 25, 22, 83, 73, 46, 33, 24, 64, 59], [1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [5, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.8282856941223145, "mapping_values": [1, 62, 62, 35, 27, 5, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 62, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.math.multiply(alpha, tf.math.add(alpha, grad)))))), tf.math.pow(tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, grad))), tf.math.square(grad))), alpha)), tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(grad, grad))), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.sqrt(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))))), alpha)), tf.math.pow(tf.math.add(alpha, grad), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))))), grad)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.pow(tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)), grad), grad)))))), tf.math.add(alpha, grad)))), alpha)), grad)), tf.math.add(alpha, alpha)))), grad)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.8952097528252572, 1.070196698370422, 0.788051998453086, 0.6658121112425566, 0.6026417065794127, 0.5647738122858187, 0.5354796081501905, 0.5028158947343225, 0.47256163663285333, 0.44949946315643446, 0.4260350485456429, 0.4259645515948774, 0.40005654005673047, 0.386368755820468, 0.37359445186937335, 0.3531134537048564, 0.3575466136418439, 0.3323308466573858, 0.3341284561678403, 0.31581317637228395, 0.3151913554661184, 0.3041828531733027], "accuracy": [0.3572843670845032, 0.622639000415802, 0.7003037929534912, 0.7424382567405701, 0.7668735980987549, 0.7825914621353149, 0.7992339134216309, 0.8119139075279236, 0.8241975903511047, 0.8318583965301514, 0.8380662798881531, 0.841500461101532, 0.8558974862098694, 0.854708731174469, 0.8594637513160706, 0.8668603897094727, 0.8669924736022949, 0.873860776424408, 0.8721436858177185, 0.8784837126731873, 0.8790120482444763, 0.8877294659614563], "val_loss": [0.9953921181815011, 0.6109716381345477, 0.5321078981672015, 0.47199991771153044, 0.43999791145324707, 0.4204194460596357, 0.39760060821260723, 0.37421901736940655, 0.3620524150984628, 0.34612731422696796, 0.3441543323653085, 0.33592415707451956, 0.3249414222581046, 0.32578680344990324, 0.3093030112130301, 0.3160645876611982, 0.3082254103251866, 0.3114289215632847, 0.30655827692576815, 0.3037752594266619, 0.2939257025718689, 0.3010695491518293], "val_accuracy": [0.5950000286102295, 0.7400000095367432, 0.7453333139419556, 0.7886666655540466, 0.8059999942779541, 0.8149999976158142, 0.8316666483879089, 0.8420000076293945, 0.843999981880188, 0.8616666793823242, 0.8519999980926514, 0.8583333492279053, 0.8733333349227905, 0.8666666746139526, 0.8769999742507935, 0.8686666488647461, 0.8806666731834412, 0.8756666779518127, 0.8706666827201843, 0.875333309173584, 0.8799999952316284, 0.8776666522026062]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1], [3, 7, 7, 9, 2, 9, 4, 1, 8, 3, 4, 5, 4, 1, 2, 1, 3, 3, 2, 8, 9, 2, 5, 2, 1, 2, 2, 7, 2, 6, 6, 4, 0, 3, 4, 5, 8, 1, 8, 0, 6, 1, 0, 6, 3, 8, 7, 9, 4, 9, 2, 4, 2, 4, 2, 3, 4, 7, 2, 9, 4, 2, 7, 1, 5, 8, 4, 8, 2, 7, 7, 9, 3, 2, 0, 8, 8], [1, 2, 1, 2, 0, 2, 2, 0, 1, 1, 1, 2, 2, 3, 0, 1, 1, 0, 2, 0, 2, 2, 2, 2, 3, 1, 2, 1, 3, 2, 2, 2, 3, 0, 3, 1, 2, 0, 3, 3, 1, 1, 1, 2, 3, 2, 2, 3, 0, 0, 0, 3, 2], [57, 19, 24, 96, 26, 73, 46, 33, 24, 64], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [4, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.7634285688400269, "mapping_values": [1, 7, 7, 4, 3, 1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), grad)), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.1047594055381857, 1.4800280541665738, 1.207527178452708, 1.00341054508636, 0.8716968315829533, 0.8808943314984364, 0.8040128069436624, 0.7898536122879726, 0.7458925085328495, 0.702864931346466, 0.7407294006915125, 0.6755769476442132, 0.6853071545266582, 0.6534788269156463, 0.6654197160735689, 0.6437252108384086, 0.646305378638144], "accuracy": [0.3152819871902466, 0.4991414546966553, 0.561880886554718, 0.6269977688789368, 0.685510516166687, 0.6738871932029724, 0.6948884129524231, 0.7045304179191589, 0.7210407853126526, 0.733588695526123, 0.7182670831680298, 0.7436270117759705, 0.7433628439903259, 0.7449478507041931, 0.748778223991394, 0.7536653280258179, 0.7576277852058411], "val_loss": [1.2886735711778914, 1.1342364379337855, 0.7779878037316459, 0.6995194809777396, 0.6022624117987496, 0.6166937180927822, 0.5735185316630772, 0.5450466530663627, 0.5446580478123256, 0.5120291880198887, 0.5366522584642682, 0.4940286023276193, 0.4914971249444144, 0.509983914239066, 0.5097359589168003, 0.4820693050112043, 0.49769011565617155], "val_accuracy": [0.5486666560173035, 0.5419999957084656, 0.6330000162124634, 0.6806666851043701, 0.7426666617393494, 0.7223333120346069, 0.7393333315849304, 0.7549999952316284, 0.7463333606719971, 0.7663333415985107, 0.7583333253860474, 0.7866666913032532, 0.7723333239555359, 0.7536666393280029, 0.7586666941642761, 0.7743333578109741, 0.7663333415985107]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], [3, 7, 5, 5, 2, 1, 4, 1, 8, 3, 4, 5, 4, 1, 2, 1, 3, 3, 2, 2, 9, 2, 5, 2, 1, 2, 2, 7, 1, 6, 8, 4, 0, 3, 4, 5, 8, 1, 8, 0, 6, 1, 0, 6, 3, 8, 7, 9, 4, 9, 2, 4, 2, 4, 2, 3, 4, 7, 2, 9, 4, 2, 7, 1, 5, 8, 4, 8, 2, 7, 7, 9, 3, 2, 0, 8, 8], [1, 2, 0, 1, 0, 2, 0, 2, 1, 1, 0, 2, 2, 3, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 3, 1, 2, 1, 3, 2, 2, 0, 3, 0, 3, 1, 2, 0, 0, 3, 1, 1, 1, 1, 2, 2, 3, 3, 0, 0, 0, 3, 2], [53, 39, 72, 98, 26, 9, 46, 33, 24, 64], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [5, 4, 3], [44], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.5445713996887207, "mapping_values": [1, 3, 3, 1, 2, 0, 3, 3, 2, 1, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.9315209058392018, 1.1533833984937556, 0.8685301087394194, 0.7452036864517261, 0.6646602753603448, 0.6226623231441023, 0.6199187134959521, 0.6163699864364964, 0.6340854197618527, 0.6193107780668918, 0.5901533028846718, 0.5830324169604093, 0.6301028808551048, 0.6308383816552279, 0.6547544180772182], "accuracy": [0.352529376745224, 0.6174877882003784, 0.6804913282394409, 0.7201162576675415, 0.7486461400985718, 0.7619865536689758, 0.76106196641922, 0.7688548564910889, 0.7625148296356201, 0.7676661014556885, 0.778761088848114, 0.7751948237419128, 0.7611940503120422, 0.7663452625274658, 0.7535332441329956], "val_loss": [1.0635009493146623, 0.7186051947729928, 0.5508600132805961, 0.51406843321664, 0.46147167682647705, 0.4657790320260184, 0.4313663159097944, 0.4361209954534258, 0.42401387861796785, 0.40940833943230764, 0.4186869093350002, 0.44033849239349365, 0.4324919581413269, 0.45175070422036306, 0.48354722772325787], "val_accuracy": [0.6583333611488342, 0.6596666574478149, 0.7523333430290222, 0.7739999890327454, 0.7876666784286499, 0.7910000085830688, 0.7996666431427002, 0.8080000281333923, 0.8169999718666077, 0.831333339214325, 0.8306666612625122, 0.8136666417121887, 0.812333345413208, 0.7976666688919067, 0.7889999747276306]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1], [0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 7, 5, 5, 2, 2, 4, 1, 8, 3, 4, 2, 4, 1, 2, 1, 3, 3, 5, 2, 9, 2, 5, 2, 1, 2, 2, 7, 2, 9, 0, 4, 0, 3, 4, 9, 9, 6, 8, 0, 6, 1, 0, 2, 3, 8, 7, 9, 1, 9, 2, 4, 2, 4, 2, 3, 4, 7, 2, 9, 4, 2, 7, 1, 5, 8, 4, 8, 2, 7, 7, 9, 3, 2, 0, 8, 8], [1, 2, 1, 2, 2, 2, 2, 0, 1, 1, 1, 2, 2, 3, 0, 1, 1, 1, 2, 0, 1, 2, 2, 2, 3, 0, 2, 1, 2, 2, 1, 2, 3, 0, 3, 1, 2, 0, 3, 3, 1, 1, 1, 2, 3, 2, 2, 3, 0, 0, 0, 3, 2], [57, 75, 25, 22, 26, 73, 48, 33, 24, 64, 59], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [99, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 1, 0, 1, 1], [6, 3, 2, 3, 5, 9, 8], [5, 4, 3], [72], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.3848571479320526, "mapping_values": [1, 6, 6, 3, 3, 0, 3, 3, 2, 1, 1, 10, 8, 5, 3, 0, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.square(alpha))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), tf.math.add(sigma, tf.math.multiply(sigma, sigma)))), tf.math.add(sigma, grad))), tf.math.add(sigma, tf.math.square(tf.math.add(sigma, sigma))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [3.150256559439717, 2.2901791626231516, 2.30056960109423, 2.3037949344973603, 2.32426560358081, 2.307536977519291, 2.207212931098026, 2.257773226309824, 2.294429701049456, 2.438637460873127, 2.293111496188338, 2.0019381899702045], "accuracy": [0.20697398483753204, 0.1810857206583023, 0.1846519559621811, 0.10051512718200684, 0.1744815707206726, 0.10196803510189056, 0.20023775100708008, 0.18650111556053162, 0.12679962813854218, 0.19984149932861328, 0.12296922504901886, 0.2690529525279999], "val_loss": [1.936863967350551, 1.7301932062421526, 1.9745875086103166, 1.9728100640433175, 1.9828828402927943, 1.9692627361842565, 1.4107588018689836, 1.9688849449157715, 1.9540461131504603, 1.9737444605146135, 1.8833492824009486, 2.0929747990199496], "val_accuracy": [0.22733333706855774, 0.28700000047683716, 0.09666666388511658, 0.09733333438634872, 0.12099999934434891, 0.16500000655651093, 0.46033334732055664, 0.10366666316986084, 0.19066666066646576, 0.11800000071525574, 0.23366667330265045, 0.13633333146572113]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], [2, 3, 5, 4, 2, 2, 4, 1, 5, 0, 0, 2, 4, 6, 2, 4, 3, 2, 5, 5, 9, 2, 8, 3, 2, 2, 7, 2, 2, 2, 8, 4, 2, 3, 4, 8, 5, 5, 4, 0, 0, 1, 9, 3, 3, 8, 7, 7, 3, 9, 2, 2, 2, 3, 1, 3, 4, 7, 4, 2, 3, 2, 9, 1, 5, 8, 4, 8, 2, 6, 7, 9, 3], [1, 2, 1, 2, 0, 2, 2, 0, 1, 1, 1, 2, 2, 1, 2, 1, 1, 0, 2, 0, 2, 2, 2, 0, 0, 1, 2, 1, 3, 2, 2, 2, 3, 0, 3, 1, 2, 0, 3, 3, 1, 1, 1, 2, 3, 2, 2, 3, 0, 0, 0, 3, 2], [57, 75, 25, 22, 26, 73, 46, 33, 24, 64, 59], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 4, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [2, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [5, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 61, 61, 35, 26, 7, 11, 11, 6, 5, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.square(tf.math.negative(tf.math.negative(tf.math.add(alpha, grad)))))), alpha)), grad), tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(grad)))))), tf.math.square(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)))), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(grad, tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(grad)), alpha)), tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))))), grad))))))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), grad)), grad)), tf.math.add(alpha, grad))))), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))), tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.pow(grad, alpha), tf.math.square(tf.math.add(tf.math.add(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.square(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1014397069811821, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [9, 9, 5, 4, 2, 2, 4, 1, 5, 0, 0, 5, 4, 1, 2, 4, 3, 3, 5, 5, 9, 2, 5, 3, 1, 2, 7, 2, 2, 2, 8, 4, 2, 3, 4, 7, 8, 1, 4, 0, 0, 1, 9, 3, 3, 8, 7, 7, 3, 9, 2, 2, 2, 3, 1, 3, 4, 7, 4, 2, 3, 2, 9, 1, 5, 8, 4, 8, 2, 6, 7, 9, 3], [1, 2, 1, 1, 0, 2, 0, 2, 1, 1, 0, 2, 2, 3, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 3, 1, 2, 1, 3, 2, 2, 0, 3, 0, 3, 1, 2, 0, 0, 3, 1, 1, 1, 1, 2, 2, 3, 3, 0, 0, 0, 3, 2], [79, 39, 24, 98, 26, 73, 46, 33, 24, 64], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1], [1, 6, 0, 3, 9, 4, 8], [5, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [6, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 3, 3, 2, 1, 1, 8, 6, 5, 1, 1, 3, 1, 2, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, grad), tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.math.multiply(sigma, sigma)))))), tf.math.add(sigma, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(beta, beta)", "other_info": {"loss": [2.3028482819875755, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.1014397069811821, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], [3, 7, 1, 5, 2, 3, 4, 1, 8, 3, 2, 8, 4, 5, 2, 1, 3, 3, 6, 2, 9, 2, 5, 2, 1, 2, 2, 7, 2, 6, 8, 4, 0, 5, 4, 2, 6, 6, 8, 0, 6, 5, 0, 6, 3, 6, 7, 9, 4, 9, 2, 4, 2, 4, 2, 3, 4, 7, 2, 9, 4, 2, 7, 1, 5, 8, 4, 8, 2, 7, 7, 9, 3, 2, 0, 8, 8], [1, 2, 1, 2, 2, 2, 2, 0, 1, 1, 1, 2, 2, 3, 0, 1, 1, 1, 2, 1, 1, 2, 2, 2, 3, 0, 2, 1, 2, 2, 1, 2, 3, 0, 3, 1, 2, 0, 3, 3, 1, 1, 1, 2, 3, 2, 2, 3, 0, 0, 0, 3, 2], [4, 74, 25, 65, 26, 73, 48, 33, 24, 64, 59], [1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [64, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 2, 5, 6, 8], [5, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 65, 65, 37, 28, 4, 3, 3, 2, 1, 1, 12, 9, 7, 2, 0, 2, 1, 1, 0], "tree_depth": 62, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.add(grad, tf.math.add(alpha, alpha)), grad)))), tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.square(grad), grad))), grad)), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))), alpha)), tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(tf.math.add(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.sqrt(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))))), alpha)), tf.math.pow(tf.math.add(alpha, tf.math.negative(alpha)), alpha))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, alpha))))))))), alpha))))), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), grad)), grad)), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(grad, tf.math.add(alpha, alpha)))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, grad))), tf.math.add(sigma, tf.math.add(sigma, sigma)))), tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, grad))), sigma)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [3.042008311662534, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.20591731369495392, 0.10579843819141388, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [329.21639578683033, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0963333323597908, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1], [2, 7, 0, 2, 2, 2, 4, 1, 5, 0, 4, 5, 6, 1, 2, 4, 3, 3, 5, 5, 9, 2, 5, 3, 1, 2, 7, 2, 2, 2, 8, 4, 2, 3, 4, 7, 8, 1, 4, 0, 0, 1, 9, 3, 3, 8, 7, 7, 3, 9, 2, 2, 2, 3, 1, 3, 4, 7, 4, 2, 3, 2, 9, 1, 5, 8, 4, 8, 2, 6, 7, 9, 3], [1, 2, 2, 1, 2, 2, 2, 0, 1, 1, 1, 2, 2, 3, 0, 1, 1, 0, 2, 2, 2, 2, 2, 2, 3, 1, 2, 1, 0, 2, 2, 2, 3, 0, 3, 1, 2, 0, 3, 3, 1, 1, 1, 2, 3, 2, 3, 3, 0, 0, 0, 3, 2], [57, 68, 25, 22, 10, 73, 46, 33, 24, 64, 59], [1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 8, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [14, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [5, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 109, 109, 64, 45, 10, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 82, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.subtract(grad, tf.math.add(alpha, grad)), grad)), tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.square(alpha))), alpha)), tf.math.add(alpha, tf.math.square(alpha)))), grad)), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(alpha, grad), tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))), grad), grad))), tf.math.add(alpha, tf.math.subtract(grad, tf.math.pow(tf.math.negative(tf.math.add(alpha, grad)), tf.math.negative(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))))))), tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.add(alpha, grad), alpha))), grad)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, grad), grad), tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.multiply(tf.math.add(alpha, grad), alpha), tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))), alpha))))), tf.math.add(alpha, alpha)), alpha))))))))))))))), tf.math.add(alpha, grad))))))))), tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1014397069811821, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1], [9, 7, 1, 9, 2, 9, 4, 1, 8, 3, 4, 5, 4, 1, 2, 1, 3, 3, 2, 8, 9, 2, 5, 2, 1, 2, 2, 7, 2, 6, 6, 4, 0, 3, 4, 5, 8, 1, 8, 0, 6, 1, 0, 6, 3, 8, 7, 9, 4, 9, 2, 4, 2, 4, 2, 3, 4, 7, 2, 9, 4, 2, 7, 1, 5, 8, 4, 8, 2, 7, 7, 9, 3, 2, 0, 8, 8], [1, 2, 1, 2, 0, 2, 2, 0, 1, 1, 1, 2, 2, 3, 0, 1, 1, 0, 2, 0, 2, 2, 2, 2, 3, 1, 2, 1, 3, 2, 2, 2, 3, 0, 3, 1, 2, 0, 3, 3, 1, 1, 1, 2, 3, 2, 2, 3, 0, 0, 0, 3, 2], [10, 75, 25, 78, 6, 73, 46, 33, 24, 64, 59], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 2, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [5, 4, 3], [78], [1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [0, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 11, 11, 6, 5, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(grad, alpha), tf.math.square(tf.math.add(tf.math.add(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3028482819875755, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.1014397069811821, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], [3, 1, 5, 5, 2, 1, 4, 1, 8, 3, 4, 5, 4, 2, 2, 1, 3, 5, 2, 4, 6, 2, 5, 2, 1, 2, 4, 7, 2, 6, 8, 4, 0, 3, 4, 5, 8, 1, 8, 0, 6, 1, 0, 6, 3, 8, 7, 9, 4, 9, 2, 4, 2, 4, 2, 3, 4, 7, 2, 9, 4, 2, 7, 1, 5, 8, 4, 8, 2, 7, 7, 9, 3, 2, 0, 8, 8], [1, 2, 1, 2, 0, 2, 2, 0, 1, 1, 1, 0, 2, 3, 0, 0, 1, 0, 2, 0, 2, 2, 2, 2, 3, 1, 2, 1, 3, 2, 2, 2, 3, 0, 3, 1, 2, 0, 3, 3, 1, 1, 1, 2, 3, 2, 2, 3, 0, 0, 0, 3, 2], [57, 75, 25, 22, 26, 73, 46, 33, 24, 64, 59], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [1, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [5, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [9, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 61, 61, 34, 27, 7, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1], "tree_depth": 50, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.pow(grad, alpha), grad)))), tf.math.square(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))))))), tf.math.add(alpha, tf.math.pow(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), tf.math.add(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), grad))), tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), grad)))), grad))))), grad))))), grad)), alpha)))), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3028482819875755, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.1014397069811821, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], [3, 3, 5, 4, 2, 4, 4, 1, 5, 0, 2, 2, 4, 6, 2, 4, 3, 2, 5, 5, 9, 2, 5, 3, 1, 2, 7, 2, 2, 2, 8, 4, 2, 3, 4, 8, 5, 5, 4, 0, 0, 1, 9, 3, 3, 8, 7, 7, 3, 9, 2, 2, 2, 3, 1, 3, 4, 7, 4, 2, 3, 2, 9, 1, 5, 8, 4, 8, 2, 6, 7, 9, 3], [1, 2, 1, 2, 0, 2, 2, 0, 1, 1, 1, 2, 2, 2, 0, 1, 2, 0, 2, 0, 2, 2, 2, 0, 3, 1, 2, 1, 3, 2, 2, 2, 3, 0, 3, 1, 2, 0, 3, 3, 1, 1, 1, 2, 3, 2, 2, 3, 0, 0, 0, 3, 2], [57, 75, 25, 22, 26, 73, 0, 33, 24, 64, 59], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [9, 5, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [1, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1], [0, 6, 0, 3, 5, 9, 8], [5, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 71, 71, 43, 28, 8, 1, 1, 1, 0, 1, 5, 4, 3, 1, 0, 2, 1, 1, 0], "tree_depth": 65, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(alpha, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(grad, tf.math.add(alpha, alpha))))), grad)), tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(tf.math.square(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), grad))), tf.math.add(alpha, tf.math.multiply(grad, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(alpha)), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), grad)), tf.math.pow(grad, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, alpha))))), tf.math.sqrt(tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))))), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), grad)))), tf.math.add(alpha, tf.math.pow(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.negative(grad))))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.negative(grad)))), tf.math.add(alpha, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad))), tf.math.subtract(alpha, tf.math.add(alpha, grad))), alpha))), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, grad))), sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3028482819875755, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.1014397069811821, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 5, 4, 2, 2, 2, 2, 5, 0, 2, 2, 4, 1, 2, 4, 3, 3, 5, 5, 9, 2, 5, 3, 1, 2, 7, 2, 2, 8, 8, 4, 2, 0, 4, 8, 5, 5, 4, 0, 0, 1, 9, 3, 3, 8, 7, 7, 3, 9, 2, 2, 2, 3, 1, 3, 4, 7, 4, 2, 3, 2, 9, 1, 5, 8, 4, 8, 2, 6, 7, 9, 3], [1, 2, 0, 1, 0, 2, 0, 2, 2, 1, 0, 2, 2, 3, 1, 1, 0, 0, 2, 2, 0, 2, 2, 2, 3, 1, 2, 1, 3, 2, 2, 0, 3, 0, 3, 1, 2, 0, 0, 3, 1, 1, 1, 1, 2, 2, 3, 3, 0, 0, 0, 3, 2], [57, 77, 25, 22, 10, 73, 46, 33, 24, 64, 59], [1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [9, 6, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [5, 4, 3], [44], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3028482819875755, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.1014397069811821, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 7, 5, 5, 2, 2, 4, 1, 8, 3, 4, 2, 4, 1, 2, 1, 3, 3, 5, 2, 9, 2, 5, 2, 1, 2, 2, 7, 2, 9, 0, 4, 0, 3, 4, 9, 9, 6, 8, 0, 6, 1, 0, 2, 3, 8, 7, 9, 1, 9, 2, 4, 2, 4, 2, 3, 4, 7, 2, 9, 4, 2, 7, 1, 5, 8, 4, 8, 2, 7, 7, 9, 3, 2, 0, 8, 8], [1, 3, 1, 1, 0, 2, 0, 2, 1, 1, 0, 2, 2, 3, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 3, 1, 2, 1, 3, 2, 2, 0, 3, 0, 3, 1, 2, 0, 0, 3, 1, 1, 1, 1, 2, 2, 3, 3, 0, 0, 0, 3, 2], [53, 39, 72, 98, 26, 9, 46, 33, 24, 64], [0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [5, 4, 3], [78], [1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 3, 3, 0, 3, 3, 2, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.square(alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [209.39109028347764, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.04319112375378609, 0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [24187824.0, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1], [2, 3, 1, 6, 2, 2, 4, 1, 8, 4, 4, 5, 4, 8, 0, 1, 0, 2, 2, 5, 9, 0, 5, 1, 4, 2, 9, 7, 1, 6, 8, 1, 2, 6, 0, 7, 8, 0, 8, 0, 8, 8, 8, 6, 3, 2, 8, 7, 4, 9, 3, 5, 2, 4, 1, 3, 4, 9, 4, 6, 3, 2, 7, 1, 5, 8, 4, 8, 2, 7, 7, 9, 3], [1, 2, 1, 1, 2, 2, 2, 0, 2, 1, 1, 1, 2, 0, 0, 2, 1, 2, 2, 2, 2, 0, 2, 0, 3, 1, 2, 1, 3, 2, 2, 2, 3, 0, 3, 1, 2, 0, 0, 3, 1, 1, 1, 2, 3, 2, 3, 3, 0, 0, 0, 3, 2], [57, 39, 24, 95, 26, 73, 46, 33, 24, 64], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [23, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [5, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [0, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 92, 92, 59, 33, 9, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 2, 1, 1, 1], "tree_depth": 65, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.pow(tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.pow(tf.math.add(alpha, alpha), tf.math.square(tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))), tf.math.negative(grad))), grad))))))))), tf.math.square(tf.math.add(alpha, tf.math.subtract(grad, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.add(alpha, alpha)))))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))))), tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))))))), alpha)))))))))), tf.math.negative(tf.math.add(alpha, grad))), tf.math.sqrt(grad)), tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))))))))), tf.math.multiply(grad, tf.math.add(tf.math.sqrt(tf.math.add(tf.math.pow(tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), tf.math.subtract(tf.math.add(alpha, alpha), grad))))))), tf.math.multiply(tf.math.add(alpha, tf.math.pow(grad, grad)), tf.math.add(alpha, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))))), tf.math.pow(tf.math.add(alpha, grad), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1279902371.964678, 23877003172.298508, 109440246016.43958, 306850941522.3014, 650178929796.6831, 1215388013280.317], "accuracy": [0.10051512718200684, 0.10196803510189056, 0.09985470771789551, 0.10038304328918457, 0.10038304328918457, 0.1010434553027153], "val_loss": [4627810742.857142, 37011275776.0, 124900657444.57143, 296046474971.4286, 578201546166.8572, 999114482834.2858], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1], [3, 3, 5, 4, 2, 2, 4, 1, 5, 0, 0, 3, 4, 6, 2, 4, 3, 2, 5, 5, 0, 2, 5, 3, 1, 2, 7, 2, 5, 2, 8, 4, 2, 3, 4, 8, 5, 8, 8, 0, 0, 2, 9, 5, 3, 8, 7, 7, 3, 9, 2, 2, 6, 3, 1, 3, 6, 7, 6, 2, 3, 2, 5, 1, 5, 8, 4, 8, 2, 6, 7, 9, 3], [1, 0, 2, 2, 0, 2, 2, 0, 1, 1, 1, 2, 2, 3, 0, 1, 1, 0, 2, 0, 2, 2, 2, 2, 3, 1, 2, 1, 3, 2, 2, 2, 3, 0, 3, 1, 2, 2, 3, 3, 1, 1, 1, 2, 3, 2, 2, 3, 0, 0, 0, 3, 2], [72, 77, 25, 22, 10, 73, 46, 38, 24, 64, 59], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [92, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [4, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [6, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 3, 3, 1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 3, 1, 2, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))), tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(beta, beta)", "other_info": {"loss": [2.3028482819875755, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.1014397069811821, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1], [3, 1, 7, 9, 2, 9, 4, 1, 8, 3, 4, 5, 4, 1, 2, 1, 3, 3, 2, 8, 9, 2, 5, 2, 1, 2, 2, 7, 2, 6, 6, 4, 0, 3, 4, 5, 8, 1, 8, 0, 6, 1, 0, 6, 3, 8, 7, 9, 4, 9, 2, 4, 2, 4, 2, 3, 4, 7, 2, 9, 4, 2, 7, 1, 5, 8, 4, 8, 2, 7, 7, 9, 3, 2, 0, 8, 8], [0, 2, 1, 1, 2, 2, 2, 0, 2, 1, 1, 1, 2, 3, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 1, 2, 1, 3, 2, 2, 2, 3, 0, 3, 1, 2, 0, 3, 3, 1, 1, 1, 2, 3, 2, 3, 3, 0, 0, 0, 3, 2], [57, 19, 24, 96, 26, 73, 46, 33, 24, 64], [0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 2, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [4, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [1, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.037142857909202576, "mapping_values": [1, 7, 7, 4, 3, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 1, 2, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), grad)), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(beta, beta)", "other_info": {"loss": [2.302470299640525, 2.3029819628534502, 2.302669931380756, 2.3038874526836963, 2.301685269954985, 2.301830752965655], "accuracy": [0.09192973375320435, 0.09298639744520187, 0.08981640636920929, 0.08625016361474991, 0.09998679161071777, 0.09126931428909302], "val_loss": [1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 7, 5, 5, 2, 2, 4, 1, 8, 3, 4, 2, 4, 1, 2, 1, 3, 3, 5, 2, 9, 2, 5, 2, 1, 2, 2, 7, 2, 9, 0, 4, 0, 3, 4, 9, 9, 6, 8, 0, 6, 1, 0, 2, 3, 8, 7, 9, 1, 9, 2, 4, 2, 4, 2, 3, 4, 7, 2, 9, 4, 2, 7, 1, 5, 8, 4, 8, 2, 7, 7, 9, 3, 2, 0, 8, 8], [1, 2, 1, 2, 0, 2, 2, 0, 1, 1, 1, 2, 2, 2, 0, 1, 1, 0, 2, 0, 2, 2, 2, 0, 3, 1, 2, 1, 3, 2, 2, 2, 3, 0, 3, 1, 2, 0, 3, 3, 1, 1, 1, 2, 3, 2, 2, 3, 0, 0, 0, 3, 2], [53, 39, 72, 98, 26, 9, 46, 33, 24, 64], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [79, 95, 54, 66], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [1, 9, 0, 3, 9, 4, 8], [5, 4, 3], [44], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [1, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.037142857909202576, "mapping_values": [1, 5, 5, 2, 3, 0, 4, 4, 3, 1, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), alpha), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.square(grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.302470299640525, 2.3029819628534502, 2.302669931380756, 2.3038874526836963, 2.301685269954985, 2.301830752965655], "accuracy": [0.09192973375320435, 0.09298639744520187, 0.08981640636920929, 0.08625016361474991, 0.09998679161071777, 0.09126931428909302], "val_loss": [1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [9, 0, 5, 9, 2, 2, 4, 1, 5, 0, 4, 5, 4, 1, 2, 2, 3, 3, 2, 5, 9, 2, 5, 3, 1, 2, 7, 7, 2, 6, 8, 4, 2, 3, 4, 7, 8, 1, 8, 0, 6, 1, 0], [2, 2, 1, 1, 2, 2, 2, 0, 1, 1, 1, 1, 2, 3, 2, 1, 1, 0, 2, 2, 1, 2, 2, 2, 3, 1, 2, 3, 3, 2, 2, 2, 3, 0, 3, 1, 2, 0, 3, 3, 1, 1, 1, 2, 3, 2, 3, 3, 0, 0, 0, 3, 2], [57, 77, 25, 22, 10, 73, 46, 33, 24, 64, 59], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], [8, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [2, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3, 2, 5], [23, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [4, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.037142857909202576, "mapping_values": [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.302470299640525, 2.3029819628534502, 2.302669931380756, 2.3038874526836963, 2.301685269954985, 2.301830752965655], "accuracy": [0.09192973375320435, 0.09298639744520187, 0.08981640636920929, 0.08625016361474991, 0.09998679161071777, 0.09126931428909302], "val_loss": [1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]