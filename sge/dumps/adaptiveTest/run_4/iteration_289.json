[{"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], [4, 5, 1, 2, 5, 2, 0, 2, 2, 6, 7], [2, 4, 1, 3, 2, 2, 3, 4, 2, 4, 1, 3, 3], [52, 95, 54, 66], [1, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 9, 0, 2, 2, 1, 0, 0, 9, 0, 8], [1, 1, 0, 0, 3, 0, 2], [49, 63, 57, 12]], "fitness": -0.8142856955528259, "mapping_values": [1, 1, 1, 0, 1, 0, 4, 4, 2, 2, 0, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.square(tf.math.add(beta, beta)), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.negative(alpha))", "other_info": {"loss": [2.1452840453739794, 2.0315200485620735, 1.535891812050174, 1.092444184315817, 0.8129379979418788, 0.7289521302120041, 0.6815896014165191, 0.6579176287578002, 0.6402354520687636, 0.6089062448568852, 0.5866788319939273, 0.5774433006070089, 0.54075632261767, 0.5408245512027121, 0.4999208648395954, 0.513014279848171, 0.4924214981204058, 0.4605866256619583, 0.5068109614808782, 0.46128546280348226, 0.4516202866432768, 0.4595898786445792], "accuracy": [0.27737417817115784, 0.32281073927879333, 0.4744419455528259, 0.6104874014854431, 0.6880200505256653, 0.7165499925613403, 0.7331924438476562, 0.7495707273483276, 0.7568352818489075, 0.7619865536689758, 0.7700436115264893, 0.778232753276825, 0.7952714562416077, 0.7926297783851624, 0.8074230551719666, 0.8063663840293884, 0.8149517774581909, 0.8244617581367493, 0.8103289008140564, 0.8281601071357727, 0.8313300609588623, 0.8230088353157043], "val_loss": [1.6195446423121862, 1.613374846322196, 1.0159736020224435, 0.669668163572039, 0.5669270924159459, 0.5190152100154332, 0.532561046736581, 0.5307568652289254, 0.5217407090323312, 0.4452756813594273, 0.46264851093292236, 0.407190808228084, 0.4095596671104431, 0.408902108669281, 0.41730927569525583, 0.3701266476086208, 0.3589539613042559, 0.3972444108554295, 0.3665553331375122, 0.4012327023914882, 0.3816360660961696, 0.3851968560900007], "val_accuracy": [0.36666667461395264, 0.36766666173934937, 0.5366666913032532, 0.6980000138282776, 0.7400000095367432, 0.7666666507720947, 0.7409999966621399, 0.7480000257492065, 0.7553333044052124, 0.7900000214576721, 0.8066666722297668, 0.812666654586792, 0.8186666369438171, 0.8090000152587891, 0.8233333230018616, 0.8483333587646484, 0.8569999933242798, 0.8289999961853027, 0.8453333377838135, 0.8193333148956299, 0.831333339214325, 0.8286666870117188]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], [4, 5, 1, 2, 5, 2, 0, 2, 2, 6, 7], [2, 4, 1, 3, 2, 2, 3, 4, 2, 4, 1, 3, 3], [52, 95, 54, 66], [1, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 9, 0, 2, 2, 1, 0, 0, 9, 0, 8], [1, 1, 0, 0, 3, 0, 2], [49, 63, 57, 12]], "fitness": -0.7445714473724365, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 5, 4, 0, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.square(tf.math.add(beta, tf.math.subtract(beta, tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.square(alpha)))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.negative(alpha))", "other_info": {"loss": [2.610827629891495, 2.3054416595653473, 2.2907878725268285, 2.0540706938472892, 2.1095718755194257, 2.3030374666419813, 2.1374562450167587, 1.8849633086422068, 1.7890229352697358, 1.2862426091367858, 1.096546892586984, 0.9398820959203799, 0.9468288210877149, 0.8882341641303397, 0.8614300545400962, 0.812453751346108, 0.7899806944528166, 0.7793718646183904, 0.7213385891700229], "accuracy": [0.21278563141822815, 0.10038304328918457, 0.16180160641670227, 0.3143574297428131, 0.2565050721168518, 0.10328886657953262, 0.24541011452674866, 0.33905693888664246, 0.39083343744277954, 0.5325584411621094, 0.5912032723426819, 0.655527651309967, 0.6507726907730103, 0.6737551093101501, 0.6769251227378845, 0.6997754573822021, 0.7016246318817139, 0.7145687341690063, 0.7244749665260315], "val_loss": [1.9803529466901506, 1.9725722585405623, 1.909740924835205, 1.7251973833356584, 1.9738561766488212, 1.9675976208278112, 1.323425599506923, 1.4849364416939872, 0.9263372761862618, 0.8621799945831299, 0.749185425894601, 0.7261719022478376, 0.6523353031703404, 0.5740712540490287, 0.6160128627504621, 0.5634447506495884, 0.574318698474339, 0.6041340146745954, 0.5260198797498431], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.3630000054836273, 0.3540000021457672, 0.10366666316986084, 0.10633333027362823, 0.5106666684150696, 0.4269999861717224, 0.5979999899864197, 0.6620000004768372, 0.6753333210945129, 0.6859999895095825, 0.6913333535194397, 0.7636666893959045, 0.7269999980926514, 0.753333330154419, 0.7403333187103271, 0.7239999771118164, 0.7436666488647461]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], [4, 5, 1, 2, 5, 2, 0, 2, 2, 6, 7], [1, 4, 1, 3, 2, 2, 3, 4, 2, 4, 1, 3, 3], [52, 45, 57], [0, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 9, 0, 2, 2, 1, 0, 0, 9, 0, 8], [1, 1, 0, 0, 3, 0, 2], [17, 63, 56, 12]], "fitness": -0.6388571262359619, "mapping_values": [1, 1, 1, 0, 1, 0, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.square(tf.math.add(beta, alpha)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.negative(alpha))", "other_info": {"loss": [2.300986911579445, 2.2989517668093105, 2.2940190877613373, 2.2915601846233664, 2.2902645949501137, 2.2874084928520384, 2.284689766052865, 2.2818427609887184, 2.278116898435281, 2.2764014248299387, 2.272793172294154, 2.2681331456597174, 2.2657552279375484, 2.265006105551205, 2.2602991766193368, 2.257202942987648, 2.2530722047485585, 2.251537378768659, 2.2464710538098527, 2.2447421391721036, 2.2426317487300236, 2.2358831053381, 2.2311831213117608, 2.2282334092648717, 2.2263616631295875, 2.220041480534868, 2.214871064814531, 2.21018704132334, 2.2084453040110263, 2.201009147218536, 2.1968281429362824, 2.192766264523844, 2.1877039656300887, 2.1825280358935895, 2.176038016732563, 2.169079818619776, 2.165152510127938, 2.1589110956341915, 2.152074612111243, 2.1449914027072845, 2.135831727548251, 2.129985535795096, 2.12333821233206, 2.114666462227999, 2.106189322966028, 2.099044934019452, 2.0884324092245246, 2.0804938879845682, 2.0710882004682554, 2.0635161526120336, 2.051469920475438, 2.0432400241456783, 2.030129747620002, 2.0255855810467467, 2.0105240111337785, 2.0012227803047513, 1.9861350835133318, 1.9732382666275816, 1.9641124161400454, 1.9551300488096486, 1.9400413459743318, 1.9236418466526426, 1.9096383385890667, 1.898957212729272, 1.8899694111967258, 1.8666566888244633, 1.8549302711210955, 1.8456418966777792, 1.8286398075764063, 1.8169741962469643, 1.7973238433183634, 1.7809952456858873, 1.7786540394335721, 1.7550683178685644, 1.7328378962110047, 1.7301471684004541, 1.7057938084327124, 1.704096965691543, 1.6883809438329316, 1.668383875653382, 1.6586805656207881, 1.6476233394122977, 1.6297945193390349, 1.6150159395413393, 1.5964240326054455, 1.5792134343955841, 1.572783679931297, 1.559567224395242, 1.5435347253966718, 1.5361320235552554, 1.5187200235416702, 1.5036361666245939, 1.4999541142329784, 1.480155484897743, 1.474998028428563, 1.4588914277798875, 1.449645831600361, 1.4420239217466193, 1.4242468813328206, 1.4124023620368404], "accuracy": [0.09192973375320435, 0.10553427785634995, 0.1138555034995079, 0.12019548565149307, 0.12112006545066833, 0.12693171203136444, 0.136045441031456, 0.14793290197849274, 0.15612204372882843, 0.15638621151447296, 0.17751948535442352, 0.18042530119419098, 0.1838594675064087, 0.18597279489040375, 0.19852067530155182, 0.20512482523918152, 0.22705058753490448, 0.22018226981163025, 0.23444722592830658, 0.23405098915100098, 0.23312640190124512, 0.260071337223053, 0.27222296595573425, 0.2619204819202423, 0.26839256286621094, 0.278959184885025, 0.29401662945747375, 0.292959988117218, 0.3007528781890869, 0.31118741631507874, 0.31779158115386963, 0.3139611780643463, 0.32082948088645935, 0.32624489068984985, 0.32743361592292786, 0.33707568049430847, 0.3385286033153534, 0.34764233231544495, 0.35886937379837036, 0.35305771231651306, 0.3663980960845947, 0.36164310574531555, 0.36520934104919434, 0.375379741191864, 0.3843613862991333, 0.3789459764957428, 0.3889842927455902, 0.3871351182460785, 0.3937392830848694, 0.39228636026382446, 0.40641921758651733, 0.39690926671028137, 0.4093250632286072, 0.402588814496994, 0.41368380188941956, 0.41408005356788635, 0.42689210176467896, 0.4193633496761322, 0.41949543356895447, 0.4294016659259796, 0.42649585008621216, 0.43508124351501465, 0.43970412015914917, 0.4418174624443054, 0.4410249590873718, 0.45383700728416443, 0.4550257623195648, 0.44287413358688354, 0.454629510641098, 0.4547615945339203, 0.46149781346321106, 0.4633469879627228, 0.4628186523914337, 0.47206446528434753, 0.47708359360694885, 0.47166821360588074, 0.4748381972312927, 0.4737815260887146, 0.47589486837387085, 0.48474442958831787, 0.48408401012420654, 0.48831066489219666, 0.48989564180374146, 0.4900277256965637, 0.5060097575187683, 0.5007264614105225, 0.5120856165885925, 0.5021793842315674, 0.514198899269104, 0.5136705636978149, 0.5135384798049927, 0.5176330804824829, 0.5127459764480591, 0.5239730477333069, 0.5196143388748169, 0.5213313698768616, 0.5205389261245728, 0.5326905250549316, 0.5414080023765564, 0.5432571768760681], "val_loss": [1.967639991215297, 1.9649278776986259, 1.9622188295636858, 1.9595238140651159, 1.9568369729178292, 1.954134464263916, 1.9514196940830775, 1.9487048557826452, 1.9459731919424874, 1.9432247025626046, 1.940429755619594, 1.937586852482387, 1.934711115700858, 1.9318184852600098, 1.9288313729422433, 1.9257969856262207, 1.9226883479527064, 1.9195313453674316, 1.9162701198032923, 1.9129892076764787, 1.9096335002354212, 1.906109128679548, 1.9024748802185059, 1.8987706729343958, 1.8949769565037318, 1.890981878553118, 1.8868746076311385, 1.8825931549072266, 1.8781911305018835, 1.8736090660095215, 1.868886879512242, 1.8640428270612444, 1.85896635055542, 1.8537320409502303, 1.848259653363909, 1.8425846781049455, 1.8367648124694824, 1.830737863268171, 1.824455669948033, 1.8179409163338798, 1.811188084738595, 1.804166044507708, 1.7969396454947335, 1.7894467626299178, 1.7816671643938338, 1.7736504418509347, 1.7653532709394182, 1.7567188399178642, 1.7478980336870467, 1.7388159206935339, 1.7294012478419714, 1.7197178431919642, 1.7096260956355505, 1.6993961334228516, 1.6887180805206299, 1.677814040865217, 1.6665383407047816, 1.6549154009137834, 1.6430930410112654, 1.6310642446790422, 1.6187267984662737, 1.6059341430664062, 1.5929492541721888, 1.5797363008771623, 1.5664373806544714, 1.552534478051322, 1.5385045664651054, 1.5245277541024345, 1.5102198123931885, 1.4958621433803014, 1.4812566212245397, 1.4664795058114188, 1.451967682157244, 1.4370701994214738, 1.4219839232308524, 1.4072308880942208, 1.3921503680092948, 1.3773982524871826, 1.362687689917428, 1.3478640147617884, 1.333148717880249, 1.3186900615692139, 1.304250614983695, 1.289911917277745, 1.2754254000527518, 1.2610508033207484, 1.2470858097076416, 1.2333942822047643, 1.2198365415845598, 1.206733056477138, 1.1937472820281982, 1.1808926377977644, 1.168482439858573, 1.1561122962406702, 1.1440914017813546, 1.1322122301374162, 1.1206437860216414, 1.1092586517333984, 1.0982129914419991, 1.0873053414481026], "val_accuracy": [0.05666666850447655, 0.07733333110809326, 0.09700000286102295, 0.12433333694934845, 0.15066666901111603, 0.18266665935516357, 0.20399999618530273, 0.22833333909511566, 0.24899999797344208, 0.273333340883255, 0.2903333306312561, 0.3063333332538605, 0.3216666579246521, 0.33666667342185974, 0.34700000286102295, 0.3583333194255829, 0.36666667461395264, 0.3736666738986969, 0.38100001215934753, 0.3866666555404663, 0.39266666769981384, 0.39666667580604553, 0.4013333320617676, 0.41066667437553406, 0.4153333306312561, 0.41999998688697815, 0.42800000309944153, 0.4336666762828827, 0.43666666746139526, 0.43966665863990784, 0.4413333237171173, 0.4466666579246521, 0.4503333270549774, 0.45366665720939636, 0.45500001311302185, 0.4569999873638153, 0.4596666693687439, 0.46433332562446594, 0.468666672706604, 0.4729999899864197, 0.47999998927116394, 0.48500001430511475, 0.48899999260902405, 0.49566665291786194, 0.49933332204818726, 0.5023333430290222, 0.5056666731834412, 0.5106666684150696, 0.5139999985694885, 0.5193333625793457, 0.5236666798591614, 0.5276666879653931, 0.5320000052452087, 0.5370000004768372, 0.5386666655540466, 0.5416666865348816, 0.5440000295639038, 0.5479999780654907, 0.5509999990463257, 0.5536666512489319, 0.5563333630561829, 0.5590000152587891, 0.5640000104904175, 0.5649999976158142, 0.5663333535194397, 0.5666666626930237, 0.5716666579246521, 0.5740000009536743, 0.5763333439826965, 0.57833331823349, 0.5796666741371155, 0.5826666951179504, 0.5846666693687439, 0.5873333215713501, 0.5899999737739563, 0.5923333168029785, 0.5923333168029785, 0.593666672706604, 0.5960000157356262, 0.5996666550636292, 0.6013333201408386, 0.6033333539962769, 0.6056666374206543, 0.6076666712760925, 0.6086666584014893, 0.6103333234786987, 0.6116666793823242, 0.6129999756813049, 0.6163333058357239, 0.621999979019165, 0.6256666779518127, 0.628000020980835, 0.6296666860580444, 0.6330000162124634, 0.6349999904632568, 0.637666642665863, 0.640333354473114, 0.6426666378974915, 0.6443333625793457, 0.6466666460037231]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1], [4, 2, 1, 2, 5, 2, 0, 2, 2, 6, 7, 5, 2, 6, 4, 2, 3, 9, 7, 2, 0, 3, 7, 7, 9, 0, 7, 8, 3, 5, 5, 3, 5, 6, 2, 9, 6, 5, 6, 8, 1, 5, 5, 2, 8, 1, 2, 2, 0, 7, 1, 8, 0, 5, 5, 2, 0, 4, 3, 4, 0, 2, 4, 2, 0, 3, 5, 4, 5, 8], [2, 0, 1, 3, 2, 0, 2, 4, 2, 4, 1, 3, 3, 3, 0, 3, 4, 2, 5, 3, 1, 4, 2, 2, 2, 1, 0, 2, 4, 1, 2, 3, 4, 1, 2, 3, 4, 4, 3, 4], [52, 41, 54, 66, 71, 44, 87], [0, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [6, 9, 0, 2, 2, 1, 0, 0, 9, 0, 8], [1, 1, 0, 0, 3, 0, 2], [94, 63, 57, 12]], "fitness": -0.16085714101791382, "mapping_values": [1, 1, 1, 0, 1, 0, 110, 110, 70, 40, 7, 1, 1, 0, 1, 0, 11, 7, 4, 3], "tree_depth": 82, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, beta))), tf.math.add(tf.math.negative(tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), beta)))), tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.multiply(beta, tf.math.add(tf.math.add(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.square(tf.math.add(beta, tf.math.square(alpha))), tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(grad))))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.add(tf.math.add(beta, grad), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.square(tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.square(tf.math.square(tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, grad), grad), alpha)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta))))))), tf.math.square(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, beta)), tf.math.add(beta, beta)))))))))))), alpha))))), tf.math.add(beta, tf.math.pow(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), tf.math.pow(grad, alpha))))))))))))))), beta)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))))))), tf.math.add(tf.math.pow(tf.math.add(beta, grad), alpha), tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.multiply(tf.math.square(tf.math.pow(grad, tf.math.add(beta, grad))), tf.math.add(beta, tf.math.square(tf.math.sqrt(tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.subtract(alpha, tf.math.negative(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [5388465.745993056, 29061080.42530709, 47602031.43891164, 55862057.32981112, 65411884.82525426, 84176667.54933298, 162982695.6143178, 168274093.52106723, 182879834.86250165, 252495530.84136838, 264665162.38700303], "accuracy": [0.1150442510843277, 0.11161009222269058, 0.08189142495393753, 0.08994849026203156, 0.0886276587843895, 0.09232597798109055, 0.11279883980751038, 0.11649715900421143, 0.11042134463787079, 0.10949676483869553, 0.10791176557540894], "val_loss": [5052235.142857143, 22654153.714285713, 22370848.0, 33404616.0, 29808608.0, 94567248.0, 82888059.42857143, 92761136.0, 123653632.0, 144902550.85714287, 128535021.71428572], "val_accuracy": [0.11966666579246521, 0.04233333468437195, 0.02800000086426735, 0.07733333110809326, 0.05433333292603493, 0.17000000178813934, 0.14866666495800018, 0.16766667366027832, 0.164000004529953, 0.09733333438634872, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1], [4, 0, 1, 2, 5, 2, 0, 2, 2, 1, 7, 9, 9, 9], [1, 1, 5, 3, 2, 2, 3, 4, 2, 4, 1, 3, 3], [52, 41, 54, 66], [1, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [2, 7], [71], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [5, 9, 0, 6, 2, 5, 0, 0, 4, 0, 8], [1, 1, 0, 0, 3, 0, 2], [17, 63, 56, 12]], "fitness": -0.10114285349845886, "mapping_values": [1, 1, 1, 0, 1, 0, 20, 20, 14, 6, 3, 1, 0, 0, 0, 0, 2, 2, 0, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, grad)))), tf.math.negative(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), beta)))))))), tf.math.add(beta, tf.math.subtract(tf.math.add(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3020556252063495, 2.3025395405716065, 2.3004489755901316, 2.3005388393976496, 2.301927613449953, 2.3015932396276675, 2.301637583153044, 2.301221819601637, 2.300939941796739, 2.3011589930782135, 2.300950886566783, 2.299955132142695, 2.3002659408502324, 2.3013903929683055, 2.3006601758432144, 2.300862783895051, 2.300383682153984, 2.301259765157673, 2.3004001735963873], "accuracy": [0.08915598690509796, 0.09681680053472519, 0.09760929644107819, 0.09615638852119446, 0.08902391046285629, 0.09087307006120682, 0.0944393053650856, 0.0944393053650856, 0.09866596013307571, 0.09549596905708313, 0.09245806187391281, 0.10157178342342377, 0.09734513610601425, 0.09800554811954498, 0.09760929644107819, 0.10315678268671036, 0.10711926966905594, 0.09721305221319199, 0.10130762308835983], "val_loss": [1.9702447482517786, 1.9701434544154577, 1.9700607572283064, 1.9700044223240443, 1.969975403376988, 1.9699855531964983, 1.970026969909668, 1.9700977461678642, 1.9701920236860002, 1.9703136852809362, 1.9704635483878, 1.970635073525565, 1.9708121163504464, 1.9710030555725098, 1.9712034634181432, 1.9713976723807198, 1.9715899739946638, 1.971764360155378, 1.971925939832415], "val_accuracy": [0.04066666588187218, 0.04399999976158142, 0.04933333396911621, 0.0533333346247673, 0.061666667461395264, 0.06833333522081375, 0.07266666740179062, 0.07500000298023224, 0.08266666531562805, 0.08799999952316284, 0.09533333033323288, 0.1003333330154419, 0.10333333164453506, 0.10533333569765091, 0.10366666316986084, 0.10233332961797714, 0.10133333504199982, 0.10333333164453506, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1], [4, 5, 1, 8, 3, 2, 0, 2, 2, 6, 7, 9, 9, 2, 0, 3, 8, 9, 5, 4, 1, 3, 0, 0], [1, 1, 1, 3, 2, 2, 3, 4, 2, 4, 1, 3, 3], [52, 45, 57], [0, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [5, 8, 0, 6, 2, 5, 0, 0, 4, 0, 8], [1, 1, 0, 0, 3, 0, 2], [17, 63, 56, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 35, 35, 24, 11, 3, 1, 1, 0, 1, 0, 4, 3, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(alpha, tf.math.add(beta, alpha))))), tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), beta)), tf.math.add(beta, tf.math.add(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, tf.math.sqrt(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, grad))))))))), tf.math.add(beta, tf.math.square(tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(grad, beta)), tf.math.negative(tf.math.negative(tf.math.add(beta, grad))))), tf.math.add(beta, alpha)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.sqrt(tf.math.negative(alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [0, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], [2, 0, 1, 2, 5, 2, 0, 2, 2, 6, 7], [2, 4, 1, 3, 2, 2, 3, 4, 2, 4, 1, 3, 3], [52, 95, 54, 66], [0, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 9, 0, 2, 2, 1, 0, 0, 9, 0, 8], [0, 1, 0, 0, 3, 0, 2], [49, 63, 57, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 9, 9, 5, 4, 0, 1, 1, 0, 1, 0, 4, 3, 1, 2], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, beta)), tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.square(alpha))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [107717555.38448203, 2114858060.925109, 9713047536.851671, 27155921980.999077, 57871813260.73068, 107166608277.82645], "accuracy": [0.09589222073554993, 0.09576013684272766, 0.09932637959718704, 0.1080438494682312, 0.1006472036242485, 0.09747721254825592], "val_loss": [410995584.0, 3285746029.714286, 11086924068.571428, 26277103908.57143, 51318978267.42857, 88675022555.42857], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 2, 1, 0, 2, 0, 2, 2], [80, 12, 93], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1], [4, 5, 1, 4, 5, 2, 0, 1, 2, 6, 7, 9, 7, 8, 8, 6, 9, 4, 1, 8, 9, 8], [2, 4, 1, 3, 2, 2, 1, 4, 2, 4, 1, 3, 3], [52, 95, 54, 66], [1, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [5, 9, 0, 2, 2, 1, 0, 0, 9, 0, 8], [1, 1, 0, 0, 3, 0, 2], [17, 63, 56, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 26, 26, 17, 9, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.add(beta, beta))), tf.math.add(tf.math.negative(tf.math.add(beta, grad)), tf.math.subtract(tf.math.add(alpha, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), beta))), tf.math.add(beta, beta)))), tf.math.add(tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, alpha)))), grad)))))), tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08321225643157959, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [0, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], [4, 9, 1, 2, 5, 2, 0, 2, 2, 6, 7], [2, 4, 1, 3, 2, 2, 3, 4, 2, 4, 1, 3, 3], [52, 95, 54, 66], [0, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 9, 0, 2, 2, 1, 0, 0, 9, 0, 8], [0, 1, 0, 0, 3, 0, 2], [49, 63, 57, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), grad)), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [107717555.38448203, 2114858060.925109, 9713047536.851671, 27155921980.999077, 57871813260.73068, 107166608277.82645], "accuracy": [0.09589222073554993, 0.09576013684272766, 0.09932637959718704, 0.1080438494682312, 0.1006472036242485, 0.09747721254825592], "val_loss": [410995584.0, 3285746029.714286, 11086924068.571428, 26277103908.57143, 51318978267.42857, 88675022555.42857], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [0, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1], [1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1], [4, 5, 1, 2, 5, 2, 0, 2, 2, 6, 7, 3, 5, 2, 3, 4, 8, 6, 7, 6, 7, 0, 5, 5, 6, 8, 5, 4, 7, 0, 8, 9], [3, 2, 1, 3, 1, 2, 3, 3, 2, 2, 1, 3, 3, 3, 3, 3, 1, 3, 0], [52, 95, 54, 66], [0, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [0, 7], [71], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [2, 8, 0, 2, 2, 1, 0, 0, 9, 0, 8], [1, 1, 0, 0, 3, 0, 2], [17, 63, 56, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), grad)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [493532060919.3743, 447560176421774.25, 2.5417283048953866e+22, 2.3829046900483835e+30, NaN, NaN], "accuracy": [0.09985470771789551, 0.09615638852119446, 0.09998679161071777, 0.09998679161071777, 0.10077928751707077, 0.09998679161071777], "val_loss": [2636690714038.857, 2.4333817661021036e+16, 2.3464002348481454e+24, 2.343607124881183e+32, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10100000351667404, 0.10066666454076767, 0.10066666454076767, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [0, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [4, 2, 2, 2, 5, 5, 0, 2, 2, 6, 7], [2, 0, 1, 2, 2, 2, 3, 4, 2, 4, 1, 3, 3], [52, 95, 54, 66], [1, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [5, 9, 0, 2, 2, 1, 0, 0, 9, 0, 8], [0, 1, 0, 0, 3, 0, 2], [29, 63, 57, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 12, 12, 7, 5, 1, 1, 0, 0, 0, 0, 2, 2, 0, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, grad), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.add(beta, beta), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.square(alpha))), tf.math.add(beta, beta))), tf.math.square(tf.math.add(beta, tf.math.negative(beta))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.302054424642367, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09628847241401672, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0], [5, 8, 0, 2, 5, 2, 0, 2, 2, 6, 7, 2, 5, 5, 0, 0, 0, 3], [2, 0, 1, 3, 0, 2, 3, 4, 2, 4, 3, 3, 3, 5, 3, 0, 0, 3, 3, 2, 1, 5], [52, 95, 54, 66], [0, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [4, 7], [71], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [9, 9, 0, 6, 2, 5, 0, 0, 4, 0, 8], [0, 1, 0, 0, 3, 0, 2], [17, 63, 56, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 6, 3, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, beta))), tf.math.add(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302628506097528, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], [4, 8, 1, 0, 5, 2, 0, 8, 2, 6, 7, 5, 9, 9], [2, 1, 1, 3, 1, 2, 3, 4, 2, 4, 1, 3, 3], [52, 95, 54, 66], [0, 1, 1, 1, 1, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 1], [9, 3], [1, 7], [71], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [5, 9, 0, 6, 2, 5, 0, 0, 4, 0, 8], [1, 1, 0, 0, 3, 0, 2], [49, 63, 57, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 19, 19, 13, 6, 1, 1, 1, 1, 0, 1, 2, 2, 0, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.sqrt(tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.square(tf.math.add(beta, beta)))), tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, alpha)), tf.math.sqrt(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), alpha))))))))), tf.math.add(beta, tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.302628506097528, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [0, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [4, 2, 1, 2, 5, 5, 9, 2, 2, 6, 7, 9, 2, 4, 1, 7, 6], [2, 0, 1, 3, 2, 2, 3, 4, 2, 4, 1, 3, 3], [52, 95, 54, 66], [0, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 9, 0, 2, 2, 1, 0, 0, 9, 0, 8], [0, 1, 2, 0, 3, 0, 2], [29, 96, 18, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 29, 29, 17, 12, 3, 1, 1, 0, 1, 0, 4, 3, 1, 2], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), grad)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.square(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))))), beta)), tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), beta)))), tf.math.add(beta, tf.math.add(beta, tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, beta)))), tf.math.add(beta, grad))), tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [5016.70130214079, 94129.48266204927, 427514.02214865934, 1189554.7032921675, 2528494.004193634, 4674666.4700171705], "accuracy": [0.09615638852119446, 0.0956280529499054, 0.09932637959718704, 0.1080438494682312, 0.10077928751707077, 0.09760929644107819], "val_loss": [18588.819754464286, 145202.1830357143, 486517.9285714286, 1149206.5714285714, 2239940.4285714286, 3865388.5714285714], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], [4, 2, 1, 2, 5, 2, 0, 2, 2, 6, 7], [2, 4, 1, 3, 2, 2, 3, 4, 2, 4, 1, 3, 3], [52, 95, 54, 66], [0, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 9, 0, 2, 8, 1, 0, 0, 9, 0, 8], [1, 1, 0, 0, 3, 0, 2], [99, 63, 57, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 4, 5, 0, 1, 1, 0, 1, 0, 3, 2, 1, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(beta, tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(grad, tf.math.add(beta, beta))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08321225643157959, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], [4, 2, 1, 2, 5, 2, 0, 2, 2, 6, 7], [2, 0, 1, 2, 2, 2, 3, 4, 2, 4, 1, 3, 3], [52, 95, 54, 66], [0, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 9, 0, 1, 2, 1, 0, 0, 9, 0, 8], [0, 1, 0, 0, 3, 0, 2], [29, 63, 57, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 4, 5, 1, 1, 1, 0, 1, 0, 3, 2, 1, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.302628506097528, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [0, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [3, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], [4, 2, 1, 8, 5, 2, 0, 2, 2, 6, 7, 9, 9], [2, 4, 1, 3, 2, 2, 3, 4, 2, 4, 1, 3, 3], [52, 45, 57], [1, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [5, 9, 0, 6, 2, 5, 0, 0, 4, 0, 8], [1, 1, 0, 0, 3, 0, 2], [49, 63, 57, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 8, 8, 4, 4, 0, 1, 0, 0, 0, 0, 2, 2, 0, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(beta, tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.subtract(tf.math.add(beta, alpha), tf.math.sqrt(grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.302628506097528, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1], [4, 5, 1, 2, 5, 2, 0, 2, 2, 6, 7, 4, 9, 2, 9], [2, 0, 1, 3, 2, 2, 3, 4, 2, 4, 1, 3, 3, 5, 3, 0, 0, 3, 3, 2, 1, 5], [52, 45, 57], [1, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [6, 9, 0, 6, 2, 5, 0, 0, 4, 0, 8], [1, 1, 0, 0, 3, 0, 2], [43, 63, 57, 12]], "fitness": -0.09771428257226944, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 5, 4, 1, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.square(tf.math.add(beta, beta)), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha)))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.negative(alpha))", "other_info": {"loss": [1.2154605301845e+23, 1.3946478349133186e+23, 1.4006207674626376e+23, 1.3516946608612244e+23, 1.3834403731093387e+23, 1.378148873848807e+23], "accuracy": [0.10408136248588562, 0.11055342853069305, 0.10593052208423615, 0.11015717685222626, 0.10896842926740646, 0.10474177449941635], "val_loss": [8.87730308875722e+22, 8.87730308875722e+22, 8.87730308875722e+22, 8.87730308875722e+22, 8.87730308875722e+22, 8.87730308875722e+22], "val_accuracy": [0.10966666787862778, 0.10966666787862778, 0.10966666787862778, 0.10966666787862778, 0.10966666787862778, 0.10966666787862778]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], [4, 5, 1, 2, 5, 2, 0, 2, 2, 6, 7], [1, 4, 1, 3, 2, 2, 3, 4, 2, 4, 1, 3, 3], [52, 95, 54, 66], [0, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 5, 0, 2, 2, 1, 0, 0, 9, 0, 8], [1, 1, 0, 0, 3, 0, 2], [49, 63, 57, 12]], "fitness": -0.037142857909202576, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 5, 3, 2, 0], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.square(tf.math.negative(alpha)), alpha)", "other_info": {"loss": [2.302230078263006, 2.303196931291549, 2.3012508827665967, 2.3017313641926176, 2.303433487081824, 2.303651827201395], "accuracy": [0.08968432247638702, 0.0956280529499054, 0.09536388516426086, 0.09351472556591034, 0.09060890227556229, 0.08651433140039444], "val_loss": [1.9704627990722656, 1.9705414772033691, 1.9706164768763952, 1.970696176801409, 1.970773492540632, 1.9708579608372279], "val_accuracy": [0.03633333370089531, 0.03533333167433739, 0.03400000184774399, 0.03400000184774399, 0.033666666597127914, 0.03333333507180214]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], [4, 5, 1, 0, 6, 2, 0, 8, 2, 6, 7, 5, 9, 9], [4, 3, 5, 3, 0, 2, 3, 4, 2, 4, 1, 3, 3], [52, 95, 54, 66], [0, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [4, 7], [71], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [5, 5, 0, 6, 2, 5, 0, 0, 4, 0, 8], [1, 1, 0, 0, 3, 0, 2], [37, 63, 57, 12]], "fitness": -0.037142857909202576, "mapping_values": [1, 1, 1, 0, 1, 0, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 4, 3, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.square(tf.math.negative(alpha)))", "other_info": {"loss": [2.302193125083761, 2.3030793213683696, 2.3010518632749477, 2.3014437681837263, 2.3030630249499078, 2.3031820633376454], "accuracy": [0.08968432247638702, 0.09589222073554993, 0.09628847241401672, 0.0948355570435524, 0.09153348207473755, 0.08849557489156723], "val_loss": [1.9703849383762904, 1.9703847340175085, 1.9703842571803503, 1.970383984701974, 1.9703835078648158, 1.9703829629080636], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]