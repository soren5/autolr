[{"genotype": [[0], [0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 1, 5, 0, 1, 8, 9, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 3, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [2, 50, 93, 49, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [4, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 0, 8, 8, 5, 0, 0, 4, 0, 8], [0, 2, 0, 0, 3, 0, 2], [92, 42, 57, 12, 41]], "fitness": -0.8320000171661377, "mapping_values": [1, 10, 10, 7, 3, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 10, 7, 3, 2], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.subtract(grad, tf.math.add(alpha, tf.math.square(grad))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), beta), tf.math.negative(tf.math.sqrt(tf.math.sqrt(tf.math.square(tf.math.negative(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))))))", "other_info": {"loss": [2.3480031388609905, 2.1278908838606654, 1.9224583381171145, 1.3938402502906164, 1.0459784421906921, 0.9733147815139522, 0.8850641557411699, 0.7911884007184985, 0.783974460386534, 0.6910038220883991, 0.7450201178522882, 0.6628388174379097, 0.6501816246157167, 0.6192630717562584, 0.6362951892698603, 0.5797195521091915, 0.5825445347174898, 0.5701564695809606, 0.539788688115629, 0.5549152511190572, 0.5284892067996156, 0.5373170475807991, 0.4953968984662518, 0.5097760081984002, 0.49794408104690846, 0.49244296410615657, 0.4799071646377537, 0.46816393634615133, 0.47994233052791335, 0.468702975104057, 0.475008954866892, 0.4518020849233574], "accuracy": [0.2641659080982208, 0.30801743268966675, 0.3661339282989502, 0.5032360553741455, 0.6170915365219116, 0.6429798007011414, 0.6675472259521484, 0.6971337795257568, 0.6972658634185791, 0.7386078238487244, 0.7201162576675415, 0.7416457533836365, 0.7483819723129272, 0.7683265209197998, 0.7597411274909973, 0.778761088848114, 0.7705719470977783, 0.7792893648147583, 0.7891955971717834, 0.789988100528717, 0.8005547523498535, 0.7976489067077637, 0.8123101592063904, 0.8043851256370544, 0.8105930685997009, 0.8146876096725464, 0.8166688680648804, 0.8185180425643921, 0.8210275769233704, 0.8234050869941711, 0.8177255392074585, 0.8294808864593506], "val_loss": [1.7893603869846888, 1.6878974437713623, 1.204813037599836, 0.7727740321840558, 0.8566340378352574, 0.7650831256593976, 0.5474751676831927, 0.5709621054785592, 0.5147640364510673, 0.5093162740979876, 0.5333573137010846, 0.45605369976588656, 0.47625902720860075, 0.4269519363130842, 0.4239736369677952, 0.43040468863078524, 0.42463901213237215, 0.41094602005822317, 0.3999814305986677, 0.39350359780447824, 0.4498823881149292, 0.43263535840170725, 0.36925644533974783, 0.39256136757986887, 0.37533658742904663, 0.37826812267303467, 0.35985197339739117, 0.37378060817718506, 0.37204839502062115, 0.3825985533850534, 0.4021559017045157, 0.35663511071886334], "val_accuracy": [0.43933331966400146, 0.2723333239555359, 0.5706666707992554, 0.6859999895095825, 0.5690000057220459, 0.6600000262260437, 0.749666690826416, 0.7329999804496765, 0.768666684627533, 0.7643333077430725, 0.7543333172798157, 0.7996666431427002, 0.7963333129882812, 0.8143333196640015, 0.8230000138282776, 0.8226666450500488, 0.8213333487510681, 0.8216666579246521, 0.831333339214325, 0.8339999914169312, 0.8080000281333923, 0.8266666531562805, 0.8510000109672546, 0.8273333311080933, 0.8450000286102295, 0.8423333168029785, 0.856333315372467, 0.8479999899864197, 0.8476666808128357, 0.8393333554267883, 0.8206666707992554, 0.8550000190734863]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [6, 1, 5, 0, 1, 6, 2, 6, 5, 2, 8, 5, 6, 2, 6, 2, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 3, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [35, 50, 93, 49, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [4, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 0, 8, 9, 5, 0, 0, 4, 0, 8], [0, 2, 0, 0, 3, 0, 2], [74, 42, 57, 12, 41]], "fitness": -0.8019999861717224, "mapping_values": [1, 38, 38, 23, 15, 6, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 6, 3, 3, 2], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(grad, tf.math.add(alpha, tf.math.square(tf.math.negative(tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(alpha, grad)), tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.square(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))), tf.math.divide_no_nan(tf.math.add(tf.math.divide_no_nan(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.add(grad, tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.negative(grad)))), tf.math.multiply(grad, grad)))))), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))), grad), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), beta), tf.math.negative(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0200351766386775, 1.4240076594805564, 1.06198053052318, 0.9027511403230297, 0.8445912712852575, 0.7860779814779357, 0.7257668970519557, 0.7146261589181674, 0.6933605254223917, 0.7281067423958426, 0.6534135880062152, 0.6456714081899633, 0.6347588421630507, 0.6222364174896118, 0.6090949392274638, 0.603832052329024, 0.5814538599084066, 0.5779101605649007, 0.5591848957902326, 0.5607241969838543, 0.5392530533647367, 0.5397911703093744], "accuracy": [0.33601900935173035, 0.5159159898757935, 0.6192048788070679, 0.6617355942726135, 0.67666095495224, 0.7034738063812256, 0.7224937081336975, 0.7238145470619202, 0.7338528633117676, 0.7164179086685181, 0.7473253011703491, 0.7490423917770386, 0.7504953145980835, 0.7593448758125305, 0.7631752490997314, 0.7660810947418213, 0.774270236492157, 0.7770439982414246, 0.7927618622779846, 0.787082314491272, 0.7967243194580078, 0.7951393723487854], "val_loss": [1.2533648695264543, 1.154700653893607, 0.6938744613102504, 0.6524333442960467, 0.672998206956046, 0.5953577416283744, 0.528428316116333, 0.5192042589187622, 0.5376546382904053, 0.527525816644941, 0.5313528435570853, 0.46912758690970285, 0.4767320156097412, 0.4712273733956473, 0.49560439586639404, 0.44684960160936626, 0.4274274451392038, 0.4327338678496225, 0.45353899683271137, 0.42172813415527344, 0.4317608390535627, 0.4510169880730765], "val_accuracy": [0.476666659116745, 0.48399999737739563, 0.7009999752044678, 0.7096666693687439, 0.6690000295639038, 0.7253333330154419, 0.7670000195503235, 0.7753333449363708, 0.7609999775886536, 0.7483333349227905, 0.7599999904632568, 0.7929999828338623, 0.7910000085830688, 0.800000011920929, 0.7683333158493042, 0.8080000281333923, 0.8199999928474426, 0.8180000185966492, 0.7846666574478149, 0.8043333292007446, 0.8059999942779541, 0.8053333163261414]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 3, 5, 0, 6, 8, 4, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 3, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [2, 50, 93, 49, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [4, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [3, 5], [71], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 0, 8, 3, 4, 0, 0, 4, 0, 8], [0, 2, 0, 0, 3, 0, 2], [92, 42, 57, 12, 41]], "fitness": -0.7971428632736206, "mapping_values": [1, 32, 32, 19, 13, 5, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 6, 3, 3, 2], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.multiply(tf.math.square(tf.math.add(alpha, tf.math.negative(grad))), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, grad)), tf.math.pow(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.square(tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))))))), tf.math.divide_no_nan(tf.math.add(tf.math.divide_no_nan(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(grad, tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.negative(grad)))), tf.math.add(alpha, tf.math.multiply(grad, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), beta), tf.math.negative(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.017690154035818, 1.4048795160789374, 1.1174740843123543, 0.9113870231372458, 0.8112937943133318, 0.7741653474802827, 0.7510888211290362, 0.7085686839173231, 0.6728026635611235, 0.7261391120138988, 0.6572228404965776, 0.6434723873652362, 0.6339792732502161, 0.628382383903193, 0.6067802500117015, 0.6057135770585732, 0.5827830388498438, 0.581177066534801, 0.5574291609124328, 0.5650920024747625, 0.5382149951049539, 0.5466076900867376], "accuracy": [0.3365473449230194, 0.5197464227676392, 0.6033549308776855, 0.6596222519874573, 0.6897371411323547, 0.7020208835601807, 0.7140403985977173, 0.7259278893470764, 0.7400607466697693, 0.7232862114906311, 0.7477215528488159, 0.7512878179550171, 0.7508915662765503, 0.7606657147407532, 0.765949010848999, 0.7629110813140869, 0.7746664881706238, 0.7791573405265808, 0.7910447716712952, 0.7868181467056274, 0.7981772422790527, 0.793422281742096], "val_loss": [1.2767437526157923, 1.2697860172816686, 0.673926830291748, 0.6309851067406791, 0.5931726353509086, 0.6003546714782715, 0.5493922914777484, 0.5283980369567871, 0.50357643195561, 0.524824857711792, 0.5190043108803886, 0.4633575848170689, 0.48174933024815153, 0.47205989701407297, 0.48476251534053255, 0.4561626400266375, 0.43388664722442627, 0.43741330078669954, 0.43790267195020405, 0.4255854146821158, 0.4305615595408848, 0.4864609922681536], "val_accuracy": [0.4726666808128357, 0.47566667199134827, 0.7056666612625122, 0.7116666436195374, 0.7279999852180481, 0.7383333444595337, 0.7453333139419556, 0.7580000162124634, 0.7703333497047424, 0.7506666779518127, 0.7636666893959045, 0.8019999861717224, 0.7870000004768372, 0.7986666560173035, 0.7703333497047424, 0.8040000200271606, 0.8186666369438171, 0.8130000233650208, 0.8026666641235352, 0.8019999861717224, 0.8033333420753479, 0.7900000214576721]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 8, 5, 4, 9, 1, 9, 2, 5, 3, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [0, 3, 2, 0, 0, 0, 2, 1, 0, 2, 2, 2, 3, 3, 3, 0, 1], [94, 50, 93, 49, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [4, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [4, 5], [71], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 0, 9, 9, 5, 0, 0, 4, 0, 8], [0, 2, 0, 0, 3, 0, 2], [53, 42, 57, 12, 41]], "fitness": -0.7922857403755188, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 6, 4, 2, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), beta), tf.math.negative(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1553411753012943, 1.467154588162104, 1.1181534170600576, 0.9406487109591507, 0.9316100280408641, 0.8050374614721623, 0.7991324160880322, 0.755830525596144, 0.7251399592118193, 0.6967178900102347, 0.6935702715614736, 0.6961702599092136, 0.6745509168475359, 0.6559514565994364, 0.6448218050004312, 0.6610646591430894, 0.640922157275694, 0.6020719102423787, 0.6169870413998256, 0.5922358182868181, 0.6012277917508609, 0.598127434006803], "accuracy": [0.29045039415359497, 0.505349338054657, 0.6017699241638184, 0.6557918190956116, 0.6567164063453674, 0.7091533541679382, 0.7040021419525146, 0.7210407853126526, 0.722757875919342, 0.7391361594200134, 0.7420420050621033, 0.7450799345970154, 0.7506273984909058, 0.7557786107063293, 0.7553823590278625, 0.7520803213119507, 0.7593448758125305, 0.7790252566337585, 0.7660810947418213, 0.774798572063446, 0.7754589915275574, 0.7733456492424011], "val_loss": [1.4177792753492082, 0.9433442865099225, 0.6760400703975132, 0.6158315794808524, 0.5933187518801007, 0.5782251358032227, 0.5808610405240741, 0.5477748428072248, 0.5046789646148682, 0.5364498921803066, 0.535428353718349, 0.4802250691822597, 0.4996809448514666, 0.4677088601248605, 0.4625303404671805, 0.4784262350627354, 0.4452845879963466, 0.44763594014304026, 0.44688686302730013, 0.43620204074042185, 0.44110084431512014, 0.44545163427080425], "val_accuracy": [0.6299999952316284, 0.6066666841506958, 0.7123333215713501, 0.7293333411216736, 0.7429999709129333, 0.7473333477973938, 0.7179999947547913, 0.7433333396911621, 0.7806666493415833, 0.7446666955947876, 0.7553333044052124, 0.7900000214576721, 0.7766666412353516, 0.7900000214576721, 0.8073333501815796, 0.7856666445732117, 0.8109999895095825, 0.8080000281333923, 0.7953333258628845, 0.8019999861717224, 0.8069999814033508, 0.7986666560173035]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 8, 5, 4, 9, 1, 9, 2, 5, 3, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 0, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [69, 50, 93, 49, 40, 73, 46, 33, 24], [1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [4, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [1, 5], [71], [0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 0, 9, 9, 5, 0, 0, 4, 0, 8], [0, 2, 0, 0, 3, 0, 2], [35, 42, 57, 12, 41]], "fitness": -0.6017143130302429, "mapping_values": [1, 5, 5, 3, 2, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 6, 3, 3, 2], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.sqrt(grad), tf.math.add(alpha, tf.math.square(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), beta), tf.math.negative(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.28042971151002, 2.120044677028598, 1.6188743163754895, 1.362042449642056, 1.0468411459237545, 0.9396312783627604, 0.8542651980623294, 0.8442494511257908, 0.8043897502757082, 0.7779338504455313, 0.766986558670696, 0.7277676401877086, 0.7018764881787913, 0.6754741831116153, 0.6603546933081675, 0.6321085484713422, 0.6079908123798594, 0.6010110166409485, 0.5950533243265481, 0.5646571313479888, 0.5799918891715651, 0.5563718256398026, 0.5407843014913984, 0.5213025708743972, 0.5155579436291415, 0.5147702475942562, 0.49482858420331577, 0.49822586959835846, 0.48796201581259635, 0.4910266268498956, 0.471975035033505, 0.4595730703669989, 0.4625352181345638, 0.43389130725899644, 0.4620772508849967, 0.4524685599981534, 0.44347823440060247, 0.433750096301613, 0.44110661672642043, 0.41774372194563125, 0.4294751550322747, 0.4196685942062345, 0.40166747066968655, 0.39761980572916406, 0.38985825102988364, 0.3858087981192821, 0.38353447084886017, 0.36176997907740205, 0.3776641683752637, 0.35703427586746317, 0.3607654231312001, 0.34816763942204826, 0.36087016450525855, 0.34586560785605086, 0.33872529946187896, 0.3387149404643344, 0.33698013641374175, 0.31969689970963727, 0.31884497134850215, 0.32469204013861874, 0.3178615380492366, 0.30152698538448547, 0.3108724852744158, 0.3139135989971511, 0.3109886023614385, 0.29971378119771885], "accuracy": [0.14978206157684326, 0.3559635579586029, 0.46929070353507996, 0.5395588278770447, 0.6341302394866943, 0.6495839357376099, 0.6803592443466187, 0.6901333928108215, 0.6914542317390442, 0.7117950320243835, 0.7177387475967407, 0.7306828498840332, 0.7298903465270996, 0.7465327978134155, 0.7604015469551086, 0.770439863204956, 0.7651565074920654, 0.7778365015983582, 0.7800818681716919, 0.7884030938148499, 0.7758552432060242, 0.7903843522071838, 0.7964601516723633, 0.8025360107421875, 0.8000264167785645, 0.8094043135643005, 0.8161405324935913, 0.8113855719566345, 0.8148196935653687, 0.8076872229576111, 0.8210275769233704, 0.8338396549224854, 0.8284242749214172, 0.8384625315666199, 0.8247259259223938, 0.8297450542449951, 0.8305375576019287, 0.830669641494751, 0.8325188159942627, 0.842028796672821, 0.8368775844573975, 0.842028796672821, 0.8450667262077332, 0.8495575189590454, 0.8482366800308228, 0.8560295701026917, 0.8561616539955139, 0.8613129258155823, 0.8536521196365356, 0.8599920868873596, 0.863029956817627, 0.8644828796386719, 0.8590674996376038, 0.8638224601745605, 0.8615770936012268, 0.8677849769592285, 0.8721436858177185, 0.8737286925315857, 0.8761062026023865, 0.8786157965660095, 0.8770307898521423, 0.8780874609947205, 0.872407853603363, 0.8726720213890076, 0.8795403242111206, 0.8821820020675659], "val_loss": [1.8957388741629464, 1.5706239427839006, 0.9083256040300641, 0.7107995918818882, 0.6779847315379551, 0.6454496724264962, 0.5875892979758126, 0.5919292654309954, 0.5580247981207711, 0.5904192924499512, 0.5338261127471924, 0.504997832434518, 0.4769355910164969, 0.46542697293417795, 0.4645249162401472, 0.4506232738494873, 0.432067198412759, 0.42522644996643066, 0.40877896547317505, 0.4156632934297834, 0.40423816442489624, 0.3963659405708313, 0.3863126380102975, 0.3811777574675424, 0.3833316223961966, 0.3748422179903303, 0.3646525570324489, 0.35956076213291716, 0.35389930861336844, 0.3562778830528259, 0.35362512724740164, 0.3522386636052813, 0.344214175428663, 0.3445082562310355, 0.344567494732993, 0.3381457158497402, 0.33621834005628315, 0.33223211765289307, 0.32527134248188566, 0.3374049663543701, 0.33492020198277067, 0.3345054047448294, 0.3394362245287214, 0.3325739928654262, 0.3349883641515459, 0.3317560298102243, 0.3235389930861337, 0.32336980955941336, 0.3216744491032192, 0.3200854914528983, 0.32373589277267456, 0.32419073581695557, 0.31790177311216083, 0.3202843155179705, 0.32963944332940237, 0.3176250713212149, 0.3150694029671805, 0.32221284082957674, 0.33210656472614836, 0.3326842018536159, 0.33390893254961285, 0.3283288223402841, 0.331392765045166, 0.34647258690425325, 0.3407500556537083, 0.3380221724510193], "val_accuracy": [0.3776666522026062, 0.5203333497047424, 0.6669999957084656, 0.7043333053588867, 0.7206666469573975, 0.7146666646003723, 0.7396666407585144, 0.7260000109672546, 0.7369999885559082, 0.7436666488647461, 0.7536666393280029, 0.7689999938011169, 0.7893333435058594, 0.793666660785675, 0.7923333048820496, 0.7996666431427002, 0.8066666722297668, 0.812333345413208, 0.8220000267028809, 0.8180000185966492, 0.8246666789054871, 0.824999988079071, 0.8309999704360962, 0.8349999785423279, 0.8339999914169312, 0.846666693687439, 0.8483333587646484, 0.8483333587646484, 0.8543333411216736, 0.8513333201408386, 0.8519999980926514, 0.8523333072662354, 0.859000027179718, 0.862666666507721, 0.8610000014305115, 0.8569999933242798, 0.8579999804496765, 0.859333336353302, 0.8646666407585144, 0.8603333234786987, 0.859333336353302, 0.8643333315849304, 0.8640000224113464, 0.8656666874885559, 0.8650000095367432, 0.8650000095367432, 0.8686666488647461, 0.8693333268165588, 0.8669999837875366, 0.8736666440963745, 0.8759999871253967, 0.8743333220481873, 0.8756666779518127, 0.8786666393280029, 0.8730000257492065, 0.8793333172798157, 0.8776666522026062, 0.8763333559036255, 0.8766666650772095, 0.8790000081062317, 0.8816666603088379, 0.8773333430290222, 0.8796666860580444, 0.8759999871253967, 0.8790000081062317, 0.8790000081062317]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 3, 5, 0, 6, 4, 9, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 3, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [2, 50, 93, 49, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [4, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [4, 5], [71], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 4, 8, 3, 4, 0, 0, 4, 0, 8], [0, 2, 0, 0, 3, 0, 2], [35, 42, 57, 12, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 11, 7, 4, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 10, 5, 5, 3], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.multiply(tf.math.square(tf.math.add(alpha, grad)), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), beta), tf.math.pow(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.multiply(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), sigma))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1018359512090683, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [6, 2, 5, 2, 1, 8, 9, 6, 5, 4, 8, 5, 6, 2, 0, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 0, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [5, 50, 93, 49, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [4, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [4, 5], [71], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 2, 0, 2, 8, 5, 0, 0, 4, 0, 8], [0, 2, 0, 0, 3, 0, 2], [92, 42, 57, 12, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 9, 5, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 16, 11, 5, 3], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(grad, tf.math.add(alpha, tf.math.square(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.square(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.add(tf.math.negative(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.sqrt(tf.math.square(tf.math.negative(tf.math.negative(beta)))), tf.math.pow(tf.math.negative(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1018359512090683, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 1, 0, 0, 1, 8, 9, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 3, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [2, 50, 93, 49, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [4, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [7, 5], [71], [0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 0, 8, 8, 5, 0, 0, 4, 0, 8], [0, 2, 1, 0, 3, 0, 2], [35, 40, 57, 12, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 7, 3, 1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 10, 7, 3, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.subtract(tf.math.add(alpha, grad), tf.math.negative(grad)), tf.math.negative(tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.negative(tf.math.sqrt(beta)), tf.math.sqrt(tf.math.square(tf.math.negative(alpha)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1018359512090683, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 2, 5, 4, 5, 0, 9, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [0, 3, 1, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [2, 50, 93, 82, 40, 73, 46, 33, 24], [1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [1, 5], [71], [0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 2, 0, 8, 8, 5, 0, 0, 4, 0, 8], [0, 2, 0, 0, 3, 0, 2], [35, 42, 57, 12, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 9, 4, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 10, 7, 3, 2], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), grad), tf.math.square(tf.math.pow(tf.math.square(tf.math.add(alpha, tf.math.negative(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.square(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.add(tf.math.negative(tf.math.sqrt(beta)), tf.math.sqrt(tf.math.square(tf.math.negative(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1018359512090683, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [6, 1, 5, 9, 1, 8, 9, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [0, 3, 1, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [2, 33, 93, 49, 40, 73, 46, 33, 24], [1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [4, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [4, 5], [71], [1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 2, 0, 8, 8, 5, 0, 0, 4, 0, 8], [3, 3, 0, 0, 3, 0, 2], [35, 42, 57, 12, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 7, 2, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07938185334205627, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 3, 5, 0, 6, 8, 9, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 3, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [94, 50, 93, 49, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [4, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [0, 5], [71], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 5, 0, 9, 9, 5, 0, 0, 4, 0, 8], [0, 2, 0, 0, 3, 0, 2], [84, 42, 57, 12, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 3, 2, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1252492373.7165968, 23419407276.007923, 110145416152.9119, 303169802632.2335, 652706444641.9569, 1188380562672.3445], "accuracy": [0.1002509593963623, 0.1018359512090683, 0.09945846349000931, 0.0936468094587326, 0.09906221181154251, 0.09655263274908066], "val_loss": [4614796434.285714, 36907250249.14286, 124549323629.71428, 295213315803.4286, 576571384978.2858, 996298794130.2858], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 8, 5, 4, 9, 1, 9, 2, 5, 3, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 0, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [94, 50, 93, 49, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [4, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 9, 8, 8, 5, 0, 0, 4, 0, 8], [0, 1, 0, 0, 3, 0, 2], [43, 42, 57, 12, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 11, 8, 3, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 6, 4, 2, 2], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.sqrt(grad), tf.math.add(alpha, tf.math.square(tf.math.pow(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1018359512090683, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 2, 5, 4, 4, 1, 9, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 3, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [2, 50, 93, 49, 40, 73, 46, 33, 24], [1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [4, 5], [71], [0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 4, 0, 8, 8, 5, 0, 0, 4, 0, 8], [1, 0, 0, 0, 3, 0, 2], [25, 84, 57, 12, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 10, 7, 3, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.pow(alpha, tf.math.negative(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.sqrt(tf.math.square(tf.math.negative(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1018359512090683, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 1, 5, 0, 1, 8, 9, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 3, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [2, 50, 93, 49, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [4, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [0, 5], [71], [0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 0, 8, 8, 5, 0, 0, 4, 0, 8], [0, 2, 0, 0, 3, 0, 2], [84, 42, 57, 12, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 7, 3, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 5, 2, 3, 2], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.subtract(grad, tf.math.add(alpha, tf.math.square(grad))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), beta), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2410497509.7976665, 5.598369884045077e+30, 2.3573115557538458, 2.3916504077309266, 2.4556462378030157, 2.585002748579822], "accuracy": [0.05138026550412178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [3.564697667295693e+31, 2.014847891671317, 2.038384437561035, 2.080439635685512, 2.161940370287214, 2.331677641187395], "val_accuracy": [0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [6, 1, 5, 9, 1, 8, 9, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [0, 3, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [91, 12, 93, 49, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [4, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [1, 5], [71], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 0, 2, 8, 5, 0, 0, 4, 0, 8], [0, 1, 1, 3, 0, 0, 2], [62, 42, 57, 12, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 10, 6, 4, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)), grad), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), alpha), tf.math.negative(tf.math.add(tf.math.sqrt(tf.math.square(alpha)), sigma)))", "other_info": {"loss": [NaN, Infinity, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10606260597705841, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.790628423165226e+22, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 1, 5, 0, 1, 8, 0, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 3, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [94, 50, 93, 49, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [4, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 0, 8, 8, 5, 0, 0, 4, 0, 8], [0, 2, 1, 0, 3, 0, 2], [92, 42, 57, 12, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 11, 7, 4, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 6, 3, 3, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.subtract(grad, tf.math.add(alpha, tf.math.square(tf.math.negative(grad)))), tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.negative(grad))), tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), beta), tf.math.negative(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1018359512090683, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [6, 1, 5, 0, 1, 3, 2, 6, 5, 8, 8, 5, 6, 2, 6, 6, 2, 6, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 3, 2, 0, 0, 0, 2, 1, 0, 2, 0, 2, 3, 3, 3, 0, 1], [2, 50, 93, 49, 40, 73, 46, 33, 24], [1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [0, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [1, 5], [71], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 0, 2, 9, 5, 0, 0, 4, 0, 8], [0, 2, 0, 0, 3, 0, 2], [92, 42, 57, 12, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 25, 25, 15, 10, 4, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 10, 7, 3, 3], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(grad, tf.math.add(alpha, tf.math.square(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(grad, grad), tf.math.add(alpha, tf.math.square(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))))))), tf.math.square(tf.math.divide_no_nan(tf.math.add(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), tf.math.add(alpha, alpha))))))))), tf.math.divide_no_nan(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), beta), tf.math.negative(tf.math.add(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.negative(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))))", "other_info": {"loss": [2.302818900857698, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.1018359512090683, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 8, 5, 4, 9, 1, 9, 2, 5, 3, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [1, 1, 2, 0, 0, 0, 2, 1, 0, 2, 2, 2, 3, 3, 3, 0, 1], [94, 50, 93, 49, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [4, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 1, 9, 9, 5, 0, 0, 4, 0, 8], [3, 2, 0, 0, 3, 0, 2], [35, 54, 57, 12, 41]], "fitness": -0.0722857117652893, "mapping_values": [1, 7, 7, 5, 2, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 7, 4, 3, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.sqrt(alpha), tf.math.add(alpha, tf.math.square(tf.math.pow(alpha, tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(sigma, beta), tf.math.subtract(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3019327266797918, 2.301912769460722, 2.3009292036393347, 2.3006428121937863, 2.301268187748238, 2.2992118289835655, 2.30050877377877, 2.3003248436229575, 2.299358193333658, 2.300077041473056, 2.3007906742572093, 2.299620646117874, 2.2988626198320814, 2.2986727020035427, 2.2999061642227203, 2.2996847994213234, 2.2992044025802056, 2.2986937946316557, 2.3003171852251887, 2.298971856196228], "accuracy": [0.09126931428909302, 0.0940430611371994, 0.09800554811954498, 0.09206181764602661, 0.0936468094587326, 0.09774138033390045, 0.10051512718200684, 0.09879804402589798, 0.09589222073554993, 0.09972262382507324, 0.09642054885625839, 0.09972262382507324, 0.10910051316022873, 0.10381719470024109, 0.10157178342342377, 0.09945846349000931, 0.10157178342342377, 0.11042134463787079, 0.09708096832036972, 0.10487385839223862], "val_loss": [1.9699618475777763, 1.9696273803710938, 1.969334602355957, 1.969045775277274, 1.9688472747802734, 1.9687985692705428, 1.9687927791050501, 1.968876770564488, 1.9690061977931432, 1.9689958436148507, 1.9689149856567383, 1.968829904283796, 1.9688239778791154, 1.968872002192906, 1.9688875334603446, 1.9689413479396276, 1.9690367153712682, 1.9692356927054269, 1.9694344656808036, 1.9696860313415527], "val_accuracy": [0.04399999976158142, 0.047333333641290665, 0.05400000140070915, 0.05966666713356972, 0.06566666811704636, 0.0676666647195816, 0.07466666400432587, 0.07599999755620956, 0.07733333110809326, 0.08366666734218597, 0.08900000154972076, 0.08933333307504654, 0.09300000220537186, 0.09333333373069763, 0.0963333323597908, 0.09266666322946548, 0.09233333170413971, 0.08833333104848862, 0.08299999684095383, 0.0806666687130928]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 9, 5, 0, 0, 8, 9, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 3, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [2, 50, 93, 49, 40, 73, 46, 33, 24], [0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [4, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [1, 0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 1], [9, 3], [0, 5], [71], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 0, 8, 3, 4, 0, 0, 4, 0, 8], [2, 3, 0, 0, 3, 0, 2], [41, 42, 57, 12, 41]], "fitness": -0.037142857909202576, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 3, 3, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(beta, sigma), tf.math.negative(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3021792601821067, 2.302793101359982, 2.302207020941097, 2.302773106761061, 2.3037427989892705, 2.3017128404451794], "accuracy": [0.09074098616838455, 0.09074098616838455, 0.09602430462837219, 0.08677849918603897, 0.09140139818191528, 0.09074098616838455], "val_loss": [1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [6, 1, 5, 0, 1, 8, 9, 6, 5, 4, 8, 5, 6, 2, 6, 6, 2, 0, 3, 7, 4, 8, 9, 3, 5, 2, 7, 7, 2, 9], [2, 2, 2, 0, 0, 0, 2, 1, 0, 0, 2, 2, 3, 3, 3, 0, 1], [69, 50, 93, 49, 40, 73, 46, 33, 24], [1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 7, 5, 1, 5, 5, 0, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [4, 4, 0, 2, 2, 3, 1, 4, 3, 4, 1, 3, 3], [58, 95, 54, 66], [0, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0, 1], [9, 3], [2, 5], [71], [0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 2, 0, 8, 8, 5, 0, 0, 4, 0, 8], [3, 3, 0, 0, 3, 0, 2], [35, 42, 57, 12, 41]], "fitness": -0.021142857149243355, "mapping_values": [1, 7, 7, 4, 3, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 6, 3, 3, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(grad, tf.math.square(tf.math.negative(tf.math.add(alpha, grad)))), grad)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.add(sigma, tf.math.negative(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.378409964895645, 2.316324747753433, 2.3132994795330544, 2.3550522174376693, 2.8762076032663995, 5.213531937345365, 11.344889041092953, 22.99076259770744, 42.193400594993214, 71.2043237652147, 111.42368153098583], "accuracy": [0.03579447790980339, 0.06973979622125626, 0.0886276587843895, 0.0936468094587326, 0.10011887550354004, 0.09853387624025345, 0.09576013684272766, 0.09668471664190292, 0.09470347315073013, 0.09998679161071777, 0.1014397069811821], "val_loss": [2.0057435716901506, 1.9827957153320312, 1.9913116182599748, 2.1371186120169505, 3.2704642840794156, 6.974888801574707, 14.89322008405413, 28.785182407924108, 50.29996599469866, 81.01691545758929, 122.61918422154018], "val_accuracy": [0.012333333492279053, 0.0663333311676979, 0.10000000149011612, 0.1003333330154419, 0.10300000011920929, 0.13366666436195374, 0.10066666454076767, 0.10000000149011612, 0.10300000011920929, 0.09666666388511658, 0.10066666454076767]}}]