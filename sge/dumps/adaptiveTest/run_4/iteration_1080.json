[{"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 7, 5, 5, 2, 2, 4, 1, 8, 3, 4, 2, 4, 1, 2, 1, 3, 3, 5, 2, 9, 2, 5, 2, 1, 2, 2, 7, 2, 9, 0, 4, 0, 3, 4, 9, 9, 6, 8, 0, 6, 1, 0, 2, 3, 8, 7, 9, 1, 9, 2, 4, 2, 4, 2, 3, 4, 7, 2, 9, 4, 2, 7, 1, 5, 8, 4, 8, 2, 7, 7, 9, 3, 2, 0, 8, 8], [1, 2, 0, 1, 0, 2, 0, 2, 1, 1, 0, 2, 2, 3, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 3, 1, 2, 1, 3, 2, 2, 0, 3, 0, 3, 1, 2, 0, 0, 3, 1, 1, 1, 1, 2, 2, 3, 3, 0, 0, 0, 3, 2], [53, 39, 72, 98, 26, 9, 46, 33, 24, 64], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1], [1, 9, 0, 3, 9, 4, 8], [5, 4, 3], [44], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.8291428685188293, "mapping_values": [1, 6, 6, 3, 3, 1, 3, 3, 2, 1, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.square(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.898480001126991, 1.0435540921904423, 0.7655919590536094, 0.6640996888581048, 0.6074592953565303, 0.5573924622594278, 0.5256897330583283, 0.5003249454869885, 0.47443710390161986, 0.4539668041095285, 0.4254958102251513, 0.42098854363098465, 0.39390325285282746, 0.38710995608742177, 0.3725599963604231, 0.37137989948029215, 0.3648998046461397, 0.34092406533130043], "accuracy": [0.35028398036956787, 0.6243560910224915, 0.709549605846405, 0.7423061728477478, 0.7650244235992432, 0.7823272943496704, 0.8004226684570312, 0.8120459914207458, 0.8226125836372375, 0.8290846943855286, 0.841500461101532, 0.8421608805656433, 0.8553691506385803, 0.856689989566803, 0.859199583530426, 0.8627657890319824, 0.8614450097084045, 0.8702945709228516], "val_loss": [0.9165344919477191, 0.6216249125344413, 0.5124299866812569, 0.47427099091666086, 0.434832615511758, 0.4078693389892578, 0.40060098682131084, 0.37936857768467497, 0.35794017144611906, 0.346914998122624, 0.3467585359300886, 0.32786560910088675, 0.316259571484157, 0.3240214075360979, 0.30898846898760113, 0.3174912759235927, 0.3166836585317339, 0.32288951533181326], "val_accuracy": [0.6003333330154419, 0.7316666841506958, 0.7670000195503235, 0.7820000052452087, 0.8029999732971191, 0.8223333358764648, 0.8296666741371155, 0.8353333473205566, 0.8536666631698608, 0.8489999771118164, 0.8536666631698608, 0.8679999709129333, 0.8730000257492065, 0.8643333315849304, 0.8723333477973938, 0.8656666874885559, 0.8679999709129333, 0.8703333139419556]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 3, 5, 4, 2, 2, 4, 1, 5, 0, 0, 2, 4, 6, 2, 4, 3, 2, 5, 5, 9, 2, 5, 3, 1, 2, 7, 2, 2, 2, 8, 4, 2, 3, 4, 8, 5, 5, 4, 0, 0, 1, 9, 3, 3, 8, 7, 7, 3, 9, 2, 2, 2, 3, 1, 3, 4, 7, 4, 2, 3, 2, 9, 1, 5, 8, 4, 8, 2, 6, 7, 9, 3], [1, 2, 1, 2, 0, 2, 2, 0, 1, 1, 1, 2, 2, 2, 0, 1, 1, 0, 2, 0, 2, 2, 2, 0, 3, 1, 2, 1, 3, 2, 2, 2, 3, 0, 3, 1, 2, 0, 3, 3, 1, 1, 1, 2, 3, 2, 2, 3, 0, 0, 0, 3, 2], [57, 77, 25, 22, 10, 73, 46, 33, 24, 64, 59], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [5, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.8237142562866211, "mapping_values": [1, 64, 64, 38, 26, 7, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 65, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.pow(tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.negative(tf.math.negative(tf.math.add(alpha, alpha))))), grad), tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.square(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)))), grad)))), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)), alpha)), tf.math.add(tf.math.add(alpha, alpha), tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.pow(alpha, tf.math.add(tf.math.multiply(tf.math.add(alpha, alpha), tf.math.pow(tf.math.sqrt(tf.math.add(alpha, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.add(alpha, grad))))), grad), grad)))))))))), tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad))), tf.math.square(alpha)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.8984793941846472, 1.043588845280451, 0.7656148561649099, 0.6642113608092742, 0.6081326193482632, 0.5569153611119303, 0.5255209789489003, 0.5019196002726793, 0.47908851839311684, 0.45652677222895444, 0.42623799481506536, 0.4219257430810781, 0.3937275374349806, 0.3871427596268826, 0.3700243148624527, 0.36903658837154796, 0.3667075691001448, 0.3361453197423131, 0.3352827324788206, 0.31751745118519825, 0.319359463282454, 0.3051447451642129, 0.28514693508357924, 0.2786909159931761, 0.2720470452124432, 0.2695224590628076, 0.26032690791059654, 0.2594192516097555, 0.2539263960195964, 0.24654125661669532, 0.23590803723829046, 0.23359462226370872, 0.21885649785704506, 0.21156113685996006, 0.2134453583375385], "accuracy": [0.35028398036956787, 0.6242240071296692, 0.7103421092033386, 0.7416457533836365, 0.763439416885376, 0.783119797706604, 0.800818920135498, 0.8113855719566345, 0.8187822103500366, 0.8272355198860168, 0.8391229510307312, 0.8429533839225769, 0.857218325138092, 0.8565579056739807, 0.8585391640663147, 0.8599920868873596, 0.8634262084960938, 0.8714832663536072, 0.8799365758895874, 0.8767666220664978, 0.8779553771018982, 0.8829745054244995, 0.8918240666389465, 0.8960506916046143, 0.8936732411384583, 0.8976356983184814, 0.8986923694610596, 0.8969752788543701, 0.9006736278533936, 0.9050323367118835, 0.9058248400688171, 0.9076740145683289, 0.9170519113540649, 0.9166556596755981, 0.9179764986038208], "val_loss": [0.9165047577449253, 0.6219846861703056, 0.5121034724371774, 0.4745178052357265, 0.433440489428384, 0.4076364977019174, 0.40196835143225534, 0.3834965058735439, 0.3609699606895447, 0.346139805657523, 0.3391796776226589, 0.3321082762309483, 0.315754166671208, 0.31908466134752544, 0.30854304347719463, 0.3240020530564444, 0.3075108357838222, 0.3178441524505615, 0.29355887855802265, 0.2987758346966335, 0.2966521552630833, 0.2910867929458618, 0.28282718999045237, 0.28865496601377216, 0.29042465346200125, 0.29452578510556904, 0.28537124395370483, 0.2911936811038426, 0.2890318546976362, 0.28315039191927227, 0.29057491677148, 0.2853295717920576, 0.2862529328891209, 0.28720069783074514, 0.2992862718445914], "val_accuracy": [0.6003333330154419, 0.7316666841506958, 0.765666663646698, 0.7833333611488342, 0.8063333630561829, 0.8199999928474426, 0.8296666741371155, 0.8363333344459534, 0.8506666421890259, 0.8506666421890259, 0.859000027179718, 0.8690000176429749, 0.8676666617393494, 0.8659999966621399, 0.8726666569709778, 0.8683333396911621, 0.871666669845581, 0.8703333139419556, 0.8813333511352539, 0.8759999871253967, 0.8786666393280029, 0.8763333559036255, 0.8833333253860474, 0.8840000033378601, 0.8830000162124634, 0.8840000033378601, 0.8816666603088379, 0.8856666684150696, 0.8859999775886536, 0.8913333415985107, 0.8820000290870667, 0.8853333592414856, 0.890666663646698, 0.8856666684150696, 0.890333354473114]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1], [3, 7, 5, 4, 2, 2, 4, 1, 5, 0, 0, 5, 4, 1, 2, 4, 3, 3, 5, 5, 9, 2, 5, 3, 1, 2, 7, 2, 2, 2, 8, 4, 2, 3, 4, 7, 8, 1, 4, 0, 0, 1, 9, 3, 3, 8, 7, 7, 3, 9, 2, 2, 2, 3, 1, 3, 4, 7, 4, 2, 3, 2, 9, 1, 5, 8, 4, 8, 2, 6, 7, 9, 3], [1, 2, 1, 1, 2, 2, 2, 0, 1, 1, 1, 2, 2, 3, 0, 1, 1, 0, 2, 2, 2, 2, 2, 2, 3, 1, 2, 1, 3, 2, 2, 2, 3, 0, 3, 1, 2, 0, 3, 3, 1, 1, 1, 2, 3, 2, 3, 3, 0, 0, 0, 3, 2], [57, 39, 24, 98, 26, 73, 46, 33, 24, 64], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [5, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.8234285712242126, "mapping_values": [1, 76, 76, 46, 30, 5, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 80, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))), tf.math.pow(grad, tf.math.add(alpha, alpha)))), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.subtract(grad, tf.math.add(alpha, grad)), grad)), tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.square(tf.math.square(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), alpha)), tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), alpha)), alpha)), tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.add(alpha, grad)), tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.pow(tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))), grad))), tf.math.add(alpha, tf.math.pow(grad, tf.math.negative(tf.math.negative(tf.math.add(alpha, grad)))))), tf.math.subtract(grad, tf.math.add(alpha, grad))))), tf.math.add(alpha, grad))), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), grad))))), tf.math.add(alpha, alpha)), tf.math.multiply(grad, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))))))))), tf.math.add(alpha, grad)))))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.8984649560045588, 1.0410030571429674, 0.7647178096620713, 0.6638372350268124, 0.607367137254363, 0.5601207730619269, 0.5287803489581516, 0.49927256926411984, 0.47768672511105553, 0.45977082110084266, 0.42756486447605996, 0.4259427979621968, 0.40111000135810604, 0.38800867643291453, 0.37163226499911456, 0.36844467559762684, 0.36616288990140544, 0.34684173636243737, 0.3472775004252057, 0.32256665797895523, 0.323725312491607, 0.3018367688110429, 0.2957902104744995, 0.28541274080816875, 0.2820395788913705, 0.2793861949495777, 0.26747634358583045, 0.2607532418076514, 0.2561218741212964, 0.24392528069679054, 0.23587557647867824, 0.2363536335973692, 0.21695515152454187, 0.21005331624209242, 0.21515152827269365, 0.2113672656909649, 0.21190447767987589, 0.20653693961146138], "accuracy": [0.3501518964767456, 0.6254127621650696, 0.7084929347038269, 0.7401928305625916, 0.7635715007781982, 0.783119797706604, 0.7985734939575195, 0.8149517774581909, 0.8164047002792358, 0.8290846943855286, 0.8396512866020203, 0.8376700282096863, 0.8553691506385803, 0.8558974862098694, 0.8594637513160706, 0.8623695969581604, 0.863029956817627, 0.8664641380310059, 0.871879518032074, 0.8765024542808533, 0.8758420348167419, 0.8868049383163452, 0.8868049383163452, 0.8936732411384583, 0.8919561505317688, 0.8927486538887024, 0.8994848728179932, 0.8990886211395264, 0.9021265506744385, 0.9070135951042175, 0.9096552729606628, 0.9082023501396179, 0.9146744012832642, 0.9177123308181763, 0.9162594079971313, 0.9198256731033325, 0.9132214784622192, 0.9185048341751099], "val_loss": [0.9169196741921561, 0.6208880799157279, 0.5109337738582066, 0.4732644728251866, 0.4339224525860378, 0.40769921030317036, 0.4034810747419085, 0.3873829586165292, 0.35850335018975393, 0.34918393407549175, 0.34083201204027447, 0.3326359646660941, 0.31959239925657, 0.321295474256788, 0.3052676320075989, 0.3165733814239502, 0.31170263460704256, 0.32176945890699116, 0.2934802600315639, 0.2987511839185442, 0.2927182401929583, 0.2923398358481271, 0.28135290316173006, 0.289422231061118, 0.2887022750718253, 0.2940088340214321, 0.2866339938981192, 0.2827531950814383, 0.2844224827630179, 0.2817196420260838, 0.2875592964036124, 0.2869560292788914, 0.2856500063623701, 0.2841724838529314, 0.2993401970182146, 0.2977650591305324, 0.29253980091639925, 0.28626751048224314], "val_accuracy": [0.6010000109672546, 0.7289999723434448, 0.7696666717529297, 0.7826666831970215, 0.8050000071525574, 0.8216666579246521, 0.8286666870117188, 0.8296666741371155, 0.8550000190734863, 0.8510000109672546, 0.8573333621025085, 0.8656666874885559, 0.8686666488647461, 0.871999979019165, 0.8776666522026062, 0.8726666569709778, 0.8730000257492065, 0.8676666617393494, 0.8793333172798157, 0.8730000257492065, 0.8813333511352539, 0.8813333511352539, 0.8840000033378601, 0.8833333253860474, 0.8816666603088379, 0.8843333125114441, 0.8846666812896729, 0.8846666812896729, 0.8840000033378601, 0.8886666893959045, 0.8899999856948853, 0.8830000162124634, 0.8926666378974915, 0.890333354473114, 0.8880000114440918, 0.8843333125114441, 0.8899999856948853, 0.8916666507720947]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1], [3, 7, 5, 9, 2, 9, 4, 1, 8, 3, 4, 5, 4, 1, 2, 1, 3, 3, 2, 8, 9, 2, 5, 2, 1, 2, 2, 7, 2, 6, 6, 4, 0, 3, 4, 5, 8, 1, 8, 0, 6, 1, 0, 6, 3, 8, 7, 9, 4, 9, 2, 4, 2, 4, 2, 3, 4, 7, 2, 9, 4, 2, 7, 1, 5, 8, 4, 8, 2, 7, 7, 9, 3, 2, 0, 8, 8], [1, 2, 1, 2, 0, 2, 2, 0, 1, 1, 1, 2, 2, 3, 0, 1, 1, 0, 2, 0, 2, 2, 2, 2, 3, 1, 2, 1, 3, 2, 2, 2, 3, 0, 3, 1, 2, 0, 3, 3, 1, 1, 1, 2, 3, 2, 2, 3, 0, 0, 0, 3, 2], [57, 19, 24, 96, 26, 73, 46, 33, 24, 64], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [4, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.771142840385437, "mapping_values": [1, 6, 6, 4, 2, 1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.120141441197585, 1.4879572000863797, 1.1919750843412131, 0.979870775364425, 0.8862329959601711, 0.8471467552435727, 0.7848465911165252, 0.7594326890580895, 0.7664476650785603, 0.7425671913966747, 0.702457465319003, 0.7079504071965493, 0.6868523223493644, 0.654298672421324, 0.6540828890977456], "accuracy": [0.2981112003326416, 0.4962356388568878, 0.5679566860198975, 0.6474705934524536, 0.6782459616661072, 0.6837934255599976, 0.709549605846405, 0.7172104120254517, 0.7148329019546509, 0.7253995537757874, 0.739928662776947, 0.7363624572753906, 0.7454761862754822, 0.7594769597053528, 0.7559106945991516], "val_loss": [1.2798020499093192, 0.8430489642279488, 0.7804012298583984, 0.7008604492459979, 0.6064791679382324, 0.5982775688171387, 0.5685439280101231, 0.5457113810947963, 0.5287864889417376, 0.4900401660374233, 0.5581438371113369, 0.4905135120664324, 0.4847754240036011, 0.4897469622748239, 0.48001580578940256], "val_accuracy": [0.590666651725769, 0.6399999856948853, 0.675000011920929, 0.6923333406448364, 0.7279999852180481, 0.7260000109672546, 0.7369999885559082, 0.7646666765213013, 0.7749999761581421, 0.7943333387374878, 0.7423333525657654, 0.784333348274231, 0.7900000214576721, 0.7853333353996277, 0.7850000262260437]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1], [3, 7, 5, 4, 2, 2, 4, 1, 5, 0, 0, 9, 4, 1, 2, 4, 3, 3, 5, 5, 9, 2, 5, 3, 1, 2, 7, 2, 2, 2, 8, 4, 2, 3, 4, 7, 2, 1, 4, 0, 0, 1, 9, 3, 3, 8, 7, 7, 3, 9, 2, 2, 2, 3, 1, 3, 4, 7, 4, 2, 3, 2, 9, 1, 5, 8, 4, 8, 2, 6, 7, 9, 3], [1, 2, 1, 1, 2, 2, 2, 0, 2, 1, 1, 1, 2, 3, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 1, 2, 1, 3, 2, 2, 2, 3, 0, 3, 1, 2, 0, 3, 3, 1, 1, 1, 2, 3, 2, 3, 3, 0, 0, 0, 3, 2], [57, 39, 24, 72, 26, 73, 46, 33, 24, 64], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [5, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.7459999918937683, "mapping_values": [1, 19, 19, 12, 7, 1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))), tf.math.pow(grad, tf.math.add(alpha, alpha)))), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(tf.math.pow(tf.math.subtract(grad, tf.math.add(alpha, grad)), grad), tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.115409418592175, 1.4819879492811476, 1.1861832932930865, 0.994890774466248, 0.9097970361329183, 0.8452393339452112, 0.8375761843297649, 0.7645513648448949, 0.7455110310516211, 0.7202240402562161, 0.7066806245552408, 0.684837854911528, 0.6703730852470705, 0.669135490208254], "accuracy": [0.3007528781890869, 0.49491479992866516, 0.5713908076286316, 0.637828528881073, 0.6674151420593262, 0.6795667409896851, 0.6826046705245972, 0.7156254053115845, 0.7224937081336975, 0.7310791015625, 0.7338528633117676, 0.7486461400985718, 0.7464007139205933, 0.7486461400985718], "val_loss": [1.2858167035239083, 1.0754600593021937, 0.8077447584697178, 0.7674981015069144, 0.6476995944976807, 0.6116662876946586, 0.5758998734610421, 0.5475146770477295, 0.5257834536688668, 0.5591235160827637, 0.5107169662203107, 0.5248064824513027, 0.509975688798087, 0.5688795873097011], "val_accuracy": [0.628000020980835, 0.5166666507720947, 0.6620000004768372, 0.6549999713897705, 0.7046666741371155, 0.718999981880188, 0.7393333315849304, 0.7409999966621399, 0.7743333578109741, 0.7396666407585144, 0.7556666731834412, 0.7433333396911621, 0.765333354473114, 0.734666645526886]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], [3, 7, 5, 5, 2, 1, 4, 1, 8, 3, 4, 5, 4, 1, 2, 1, 3, 3, 2, 2, 9, 2, 5, 2, 1, 2, 2, 7, 2, 6, 8, 4, 0, 3, 4, 5, 8, 1, 8, 0, 6, 1, 0, 6, 3, 8, 7, 9, 4, 9, 2, 4, 2, 4, 2, 3, 4, 7, 2, 9, 4, 2, 7, 1, 5, 8, 4, 8, 2, 7, 7, 9, 3, 2, 0, 8, 8], [1, 2, 1, 2, 0, 2, 2, 0, 1, 1, 1, 2, 2, 3, 0, 1, 1, 0, 2, 0, 2, 2, 2, 2, 3, 1, 2, 1, 3, 2, 2, 2, 3, 0, 3, 1, 2, 0, 3, 3, 1, 1, 1, 2, 3, 2, 2, 3, 0, 0, 0, 3, 2], [57, 75, 25, 22, 26, 73, 46, 33, 24, 64, 59], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [5, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.48085713386535645, "mapping_values": [1, 66, 66, 38, 28, 6, 3, 3, 2, 1, 1, 9, 7, 6, 1, 1, 2, 1, 1, 0], "tree_depth": 70, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.pow(grad, tf.math.add(alpha, alpha)), grad)))), tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.square(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), grad))), tf.math.add(grad, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.divide_no_nan(alpha, grad))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(grad)), grad))))), tf.math.multiply(tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), alpha))), alpha)))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)))))), grad)))), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))), grad)), grad))))), tf.math.add(alpha, grad)), grad)), tf.math.subtract(alpha, tf.math.add(alpha, grad)))))), tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, grad))), tf.math.add(sigma, tf.math.multiply(sigma, sigma)))), tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.9241907857648763, 1.0889255872192856, 0.8648453215172798, 0.7216627266916853, 0.6799638153240429, 0.6357172024075255, 0.5928520322034955, 0.5713106091815121, 0.5421964619153715, 0.5501589517410106, 0.562275943621007, 0.5468640962627664, 0.544171511319965, 0.5767654996380562, 0.5903280266775762, 0.6083655020721742, 0.6189468990715661, 0.6413851659752359], "accuracy": [0.35147273540496826, 0.6288469433784485, 0.6754721999168396, 0.7272487282752991, 0.7528728246688843, 0.7588165402412415, 0.7781006693840027, 0.7825914621353149, 0.7944789528846741, 0.793422281742096, 0.8012151718139648, 0.7981772422790527, 0.7940827012062073, 0.7980451583862305, 0.7878747582435608, 0.7746664881706238, 0.7803460359573364, 0.7619865536689758], "val_loss": [0.9779936926705497, 0.6230578933443341, 0.5326395375388009, 0.5007512399128505, 0.44718018599918913, 0.4325930305889675, 0.39659398794174194, 0.3884436573301043, 0.389354978288923, 0.3680790066719055, 0.4122933404786246, 0.36776975222996305, 0.3715048262051174, 0.44297896112714497, 0.420131470475878, 0.43234773193086895, 0.4512594257082258, 0.4636072942188808], "val_accuracy": [0.590666651725769, 0.7286666631698608, 0.7513333559036255, 0.7689999938011169, 0.8083333373069763, 0.8043333292007446, 0.82833331823349, 0.8253333568572998, 0.8309999704360962, 0.8453333377838135, 0.8213333487510681, 0.8510000109672546, 0.8529999852180481, 0.8173333406448364, 0.8216666579246521, 0.8036666512489319, 0.8106666803359985, 0.809333324432373]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1], [0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1], [3, 7, 1, 5, 2, 5, 4, 1, 8, 3, 2, 8, 4, 5, 2, 1, 3, 3, 2, 2, 9, 2, 5, 2, 1, 2, 2, 7, 2, 6, 8, 4, 0, 3, 4, 5, 6, 6, 8, 0, 6, 5, 0, 6, 3, 6, 7, 9, 4, 9, 2, 4, 2, 4, 2, 3, 4, 7, 2, 9, 4, 2, 7, 1, 5, 8, 4, 8, 2, 7, 7, 9, 3, 2, 0, 8, 8], [1, 2, 1, 2, 2, 2, 2, 0, 1, 1, 1, 2, 2, 3, 0, 1, 1, 1, 2, 0, 1, 2, 2, 2, 3, 0, 2, 1, 2, 2, 1, 2, 3, 0, 3, 1, 2, 0, 3, 3, 1, 1, 1, 2, 3, 2, 2, 3, 0, 0, 0, 3, 2], [57, 75, 25, 22, 26, 73, 48, 33, 24, 64, 59], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [64, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1], [6, 3, 2, 3, 5, 9, 8], [5, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.3471428453922272, "mapping_values": [1, 7, 7, 3, 4, 0, 3, 3, 2, 1, 1, 11, 9, 7, 2, 1, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.subtract(alpha, tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), tf.math.add(sigma, tf.math.multiply(sigma, sigma)))), tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.2438960898868823, 2.21420560187321, 2.2606443930547693, 2.2833915695207563, 2.303981549798726, 2.302185970353507, 2.1347851435332927, 2.3094504609194257, 2.304107652505974, 2.3031660313493525, 2.3029532623076876, 2.3031265993852656], "accuracy": [0.21793685853481293, 0.22018226981163025, 0.1344604343175888, 0.12389380484819412, 0.09840179979801178, 0.11081759631633759, 0.24065512418746948, 0.13313961029052734, 0.09708096832036972, 0.09536388516426086, 0.09298639744520187, 0.09734513610601425], "val_loss": [1.9461697850908553, 1.9757911818368095, 1.6601552963256836, 1.9753573281424386, 1.9736791338239397, 1.9694833074297224, 1.713010345186506, 1.975093228476388, 1.9738462993076868, 1.9735141481672014, 1.9736183711460658, 1.9735866274152483], "val_accuracy": [0.1420000046491623, 0.10066666454076767, 0.2553333342075348, 0.10066666454076767, 0.10000000149011612, 0.18266665935516357, 0.3723333477973938, 0.10000000149011612, 0.10066666454076767, 0.10366666316986084, 0.10100000351667404, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], [3, 7, 5, 4, 2, 5, 4, 1, 8, 3, 4, 5, 4, 1, 2, 6, 3, 3, 2, 5, 9, 2, 5, 2, 1, 2, 0, 7, 2, 6, 8, 4, 0, 3, 4, 7, 8, 1, 8, 0, 6, 1, 0, 6, 3, 8, 7, 7, 5, 9, 2, 2, 2, 4, 1, 3, 4, 7, 4, 2, 4, 2, 7, 1, 5, 8, 4, 8, 2, 7, 7, 9, 3, 2, 0, 8, 4], [1, 2, 1, 1, 2, 2, 2, 2, 1, 2, 1, 1, 1, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 0, 2, 1, 2, 3, 3, 0, 1, 2, 3, 0, 2, 2, 0, 0, 1, 3, 0, 3, 1, 1, 3, 0, 1, 0, 0, 2, 2, 2, 0], [83, 38, 25, 22, 26, 73, 46, 33, 24, 64], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [5, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [8, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [5, 4, 3], [78], [1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [0, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 65, 65, 38, 27, 2, 2, 2, 2, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 67, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.pow(grad, tf.math.add(alpha, alpha)), alpha))), tf.math.square(tf.math.pow(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.square(grad), grad))), tf.math.add(alpha, tf.math.add(grad, grad)))), tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, alpha), tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(alpha)), grad))))))), tf.math.multiply(tf.math.add(alpha, grad), grad))))), tf.math.add(alpha, alpha))), tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(grad)), grad)), tf.math.add(alpha, grad)))), tf.math.add(alpha, grad)), grad)))), tf.math.add(alpha, grad)))), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), grad)))), tf.math.subtract(alpha, tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.square(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3026629257920144, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [9, 0, 5, 9, 2, 2, 4, 1, 5, 0, 4, 5, 4, 1, 2, 2, 3, 3, 2, 5, 9, 2, 5, 3, 1, 2, 7, 7, 2, 6, 8, 4, 2, 3, 4, 7, 8, 1, 8, 0, 6, 1, 0], [2, 2, 1, 1, 2, 2, 2, 0, 1, 1, 1, 1, 2, 3, 2, 1, 1, 0, 2, 2, 1, 2, 2, 2, 3, 1, 2, 3, 3, 2, 2, 2, 3, 0, 3, 1, 2, 0, 3, 3, 1, 1, 1, 2, 3, 2, 3, 3, 0, 0, 0, 3, 2], [3, 75, 25, 22, 26, 73, 46, 33, 24, 64], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], [3, 6, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3, 2, 5], [23, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [4, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 39, 39, 24, 15, 3, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.divide_no_nan(tf.math.square(grad), tf.math.add(tf.math.add(tf.math.square(alpha), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad)))), grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.add(alpha, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), grad)), tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)))))), tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))), tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, tf.math.square(grad)))), tf.math.add(beta, tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1], [2, 3, 1, 6, 2, 2, 2, 1, 5, 0, 4, 2, 4, 6, 2, 1, 3, 3, 2, 5, 9, 0, 1, 1, 1, 2, 2, 7, 1, 4, 4, 4, 2, 3, 2, 7, 8, 0, 8, 0, 4, 8, 2, 6, 3, 8, 7, 7, 3, 9, 2, 5, 2, 4, 1, 3, 4, 9, 4, 6, 3, 2, 7, 1, 5, 8, 4, 8, 2, 7, 7, 9, 3], [1, 2, 0, 1, 2, 2, 0, 2, 1, 2, 1, 1, 2, 3, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 1, 2, 1, 3, 2, 2, 2, 3, 0, 3, 1, 2, 0, 0, 3, 1, 1, 1, 1, 2, 2, 3, 3, 0, 0, 0, 3, 2], [57, 39, 24, 98, 26, 73, 46, 33, 24, 64], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [1, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [23, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [5, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 92, 92, 53, 39, 8, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 76, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.negative(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, alpha)), tf.math.add(alpha, grad))), tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))))), tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))), grad)), tf.math.add(alpha, tf.math.negative(alpha)))), grad)), tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.multiply(tf.math.add(tf.math.add(alpha, grad), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))))), grad)), grad)), tf.math.add(alpha, tf.math.sqrt(grad)))), grad)), tf.math.negative(grad)))))), tf.math.add(alpha, tf.math.pow(grad, grad))), grad))), tf.math.sqrt(alpha)))), grad), alpha)), grad))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)))))), grad))), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))))))))), tf.math.add(alpha, tf.math.add(alpha, grad)))), tf.math.square(tf.math.add(tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.4909900203750683, 7624933.271547258, 1955518912133775.2, 4.8001945603035606e+23, 1.2251909629568555e+32, NaN], "accuracy": [0.1022322028875351, 0.09470347315073013, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [10.565007890973773, 831800411.4285715, 2.1164060009262518e+17, 5.211682312682169e+25, 1.341917523501623e+34, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1], [2, 3, 1, 6, 2, 2, 4, 1, 5, 0, 4, 5, 4, 1, 0, 1, 0, 2, 2, 5, 9, 0, 6, 1, 1, 2, 2, 7, 1, 6, 8, 4, 2, 6, 0, 7, 8, 0, 8, 0, 4, 8, 2, 6, 3, 2, 7, 7, 4, 9, 2, 5, 2, 4, 1, 3, 4, 9, 4, 6, 3, 2, 7, 1, 5, 8, 4, 8, 2, 7, 7, 9, 3], [1, 2, 0, 1, 2, 2, 0, 2, 1, 2, 1, 2, 2, 3, 0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 1, 2, 1, 3, 2, 2, 2, 3, 0, 2, 1, 2, 0, 0, 3, 1, 1, 1, 1, 2, 2, 3, 3, 0, 0, 0, 3, 2], [57, 39, 24, 98, 26, 73, 46, 33, 24, 64], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [23, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [4, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [0, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 110, 110, 66, 44, 9, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 2, 1, 1, 1], "tree_depth": 64, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.pow(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.square(alpha)), tf.math.add(alpha, grad)))), grad), tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), alpha)))), tf.math.add(alpha, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))))), grad)), alpha))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(grad, tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, alpha)), tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.negative(tf.math.add(alpha, alpha)))), alpha)), tf.math.sqrt(tf.math.add(alpha, grad)))), tf.math.negative(grad)))), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.math.add(grad, tf.math.add(alpha, grad)))))))), tf.math.divide_no_nan(grad, tf.math.multiply(tf.math.add(grad, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))))), tf.math.add(alpha, tf.math.pow(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))))))), tf.math.square(tf.math.add(alpha, tf.math.add(grad, tf.math.pow(tf.math.add(alpha, tf.math.subtract(grad, grad)), tf.math.multiply(tf.math.pow(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), grad), tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))))))))), tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.add(alpha, grad)))), alpha))))), tf.math.add(alpha, alpha))))))))))))))), tf.math.add(alpha, alpha))), alpha), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1230191343.1936564, 23613594670.93277, 109519152026.96605, 303930201397.594, 656696158303.4885, 1204201306885.3762], "accuracy": [0.09945846349000931, 0.1006472036242485, 0.09826971590518951, 0.09959053993225098, 0.10645885765552521, 0.09509972482919693], "val_loss": [4627810742.857142, 37011275776.0, 124900657444.57143, 296046474971.4286, 578201546166.8572, 999114482834.2858], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1], [2, 7, 5, 4, 2, 2, 4, 1, 5, 0, 2, 5, 4, 1, 2, 4, 3, 3, 5, 5, 9, 2, 2, 3, 1, 2, 7, 2, 2, 2, 2, 4, 2, 3, 4, 6, 8, 1, 4, 0, 5, 1, 9, 3, 3, 9, 7, 7, 3, 9, 2, 2, 2, 3, 1, 3, 4, 7, 4, 2, 3, 2, 9, 1, 5, 8, 4, 8, 2, 6, 7, 9, 3], [1, 2, 1, 1, 2, 2, 2, 0, 1, 1, 1, 2, 2, 2, 0, 1, 1, 0, 2, 2, 2, 2, 2, 1, 3, 1, 2, 1, 3, 2, 2, 2, 3, 0, 3, 1, 2, 0, 3, 3, 1, 1, 1, 2, 3, 2, 3, 3, 0, 0, 0, 3, 2], [57, 25, 24, 98, 26, 73, 46, 33, 24, 64], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [2, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [2, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 3, 1, 2, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(beta, beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.061814818531274796, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1], [3, 7, 5, 5, 2, 5, 4, 1, 8, 3, 4, 5, 4, 1, 2, 1, 0, 3, 2, 2, 9, 2, 5, 2, 1, 2, 2, 7, 2, 6, 8, 4, 0, 3, 3, 5, 8, 4, 5, 0, 6, 1, 0, 6, 3, 8, 7, 9, 4, 9, 2, 4, 2, 4, 2, 3, 4, 7, 2, 9, 4, 2, 7, 1, 5, 8, 4, 8, 2, 7, 7, 9, 3, 2, 0, 8, 8], [1, 2, 1, 1, 2, 2, 2, 0, 1, 1, 1, 2, 2, 3, 0, 2, 1, 0, 1, 2, 2, 2, 2, 2, 3, 2, 2, 1, 3, 2, 2, 2, 3, 0, 3, 1, 2, 0, 3, 3, 1, 1, 1, 2, 3, 2, 3, 3, 0, 0, 0, 3, 2], [10, 75, 25, 78, 6, 73, 46, 33, 24, 64, 59], [0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [5, 4, 3], [78], [1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 0, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [111.2678401411926, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.03883238509297371, 0.09694888442754745, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [3631167.714285714, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1], [2, 3, 1, 6, 2, 2, 4, 1, 5, 0, 0, 5, 4, 1, 2, 1, 0, 3, 2, 5, 2, 2, 6, 2, 1, 2, 2, 7, 1, 2, 5, 4, 2, 3, 2, 7, 8, 0, 8, 0, 4, 4, 1, 6, 3, 8, 7, 7, 3, 9, 2, 5, 2, 0, 1, 3, 4, 9, 4, 4, 3, 2, 3, 1, 5, 8, 4, 8, 2, 7, 7, 9, 3], [1, 2, 0, 1, 2, 2, 0, 2, 1, 1, 1, 2, 2, 3, 0, 1, 1, 2, 2, 2, 1, 2, 2, 2, 3, 1, 2, 1, 3, 2, 2, 2, 3, 0, 3, 1, 2, 0, 0, 1, 1, 2, 1, 1, 2, 2, 3, 3, 0, 0, 0, 3, 2], [57, 39, 24, 52, 26, 73, 46, 33, 24, 64], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [23, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [5, 4, 3], [78], [1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [0, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 92, 92, 53, 39, 7, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 76, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, grad))), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))))))))))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), alpha), tf.math.add(alpha, tf.math.square(alpha))))), tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.pow(tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.add(alpha, alpha)))))), alpha)), grad), tf.math.add(alpha, grad)), grad)), tf.math.negative(tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.pow(grad, grad)))))), tf.math.add(alpha, grad))), grad))))), alpha), grad))), tf.math.subtract(alpha, tf.math.add(alpha, grad)))), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(grad)), alpha))))))), grad)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3026629257920144, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1], [2, 3, 1, 6, 4, 2, 4, 1, 5, 0, 4, 5, 4, 1, 2, 1, 0, 6, 2, 5, 9, 2, 6, 1, 1, 2, 2, 7, 1, 6, 0, 4, 2, 3, 2, 7, 2, 0, 8, 0, 4, 8, 2, 6, 3, 8, 7, 7, 3, 1, 2, 5, 2, 4, 2, 3, 4, 9, 4, 6, 3, 2, 7, 1, 5, 8, 4, 8, 2, 7, 7, 9, 3], [1, 2, 1, 1, 2, 2, 2, 0, 1, 1, 1, 2, 2, 3, 0, 1, 1, 0, 2, 2, 2, 2, 2, 2, 3, 1, 2, 1, 3, 2, 2, 2, 3, 0, 3, 1, 2, 0, 3, 3, 2, 1, 2, 2, 3, 2, 3, 3, 0, 0, 0, 3, 2], [57, 39, 24, 98, 26, 73, 46, 60, 24, 64], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [23, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [5, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.08828571438789368, "mapping_values": [1, 9, 9, 4, 5, 0, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 3, 1, 2, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.divide_no_nan(grad, tf.math.add(alpha, alpha)))), alpha)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, beta)", "other_info": {"loss": [2.302256561053065, 2.3039828004019527, 2.3033075936009713, 2.302903723266414, 2.303121562584154, 2.303476583121585, 2.3010359794519455, 2.302447497521913, 2.3025059918559947, 2.3026486277312586, 2.3013299249339934, 2.3034416775520152, 2.3008215382366513, 2.301863676458381, 2.301436113281462, 2.301713416101186, 2.3010962262617802, 2.2998828277328403, 2.3011602412566314, 2.3008186220099285, 2.299349126342171, 2.299968272750687, 2.3009553321553198, 2.29991906631766, 2.2982093871875824, 2.2994779770825566, 2.299596581649881, 2.2981122965983363, 2.299429246164064, 2.298219515017357, 2.2986733438536917, 2.298340912964901, 2.2988537689635247, 2.298948690072814, 2.2981974382316115, 2.2966487855171844, 2.2975475583109857, 2.2988233159420086, 2.2990204375638243, 2.2986191547841224, 2.296976091429983, 2.2979164283824494, 2.2976644905787165, 2.297840522595558, 2.2987506056757745, 2.2980079420364574, 2.298195238929651, 2.2978860713770803], "accuracy": [0.08994849026203156, 0.08651433140039444, 0.08770307898521423, 0.09285431355237961, 0.08955223858356476, 0.08426892012357712, 0.08994849026203156, 0.08981640636920929, 0.09219389408826828, 0.09576013684272766, 0.08942015469074249, 0.08849557489156723, 0.09140139818191528, 0.09126931428909302, 0.08598599582910538, 0.09259014576673508, 0.0940430611371994, 0.09576013684272766, 0.09325055778026581, 0.09694888442754745, 0.09734513610601425, 0.09853387624025345, 0.09615638852119446, 0.09391097724437714, 0.10236428678035736, 0.10276053100824356, 0.10421344637870789, 0.10210011899471283, 0.10593052208423615, 0.1026284471154213, 0.10777968913316727, 0.09972262382507324, 0.10051512718200684, 0.10210011899471283, 0.10302469879388809, 0.11266675591468811, 0.10857218503952026, 0.10791176557540894, 0.108440101146698, 0.10289261490106583, 0.11359133571386337, 0.11200633645057678, 0.108440101146698, 0.10870426893234253, 0.1080438494682312, 0.1072513535618782, 0.11121384054422379, 0.11438383162021637], "val_loss": [1.9703848021371024, 1.970381804874965, 1.9703741073608398, 1.9703597341264998, 1.9703375271388464, 1.9703058515276228, 1.9702632767813546, 1.9702091217041016, 1.9701429775782995, 1.9700634138924735, 1.9699697494506836, 1.9698617117745536, 1.969742979322161, 1.969618252345494, 1.9694859640938895, 1.969341550554548, 1.969193935394287, 1.9690485681806291, 1.9689034053257533, 1.9687581743512834, 1.9686151913234167, 1.9684741837637765, 1.9683395794459753, 1.9682179178510393, 1.9681051799229212, 1.9680019106183733, 1.9679115840366908, 1.967839241027832, 1.9677870614188058, 1.9677386283874512, 1.9676969391959054, 1.9676538876124792, 1.96760926927839, 1.9675676482064384, 1.9675302505493164, 1.967489446912493, 1.9674597467694963, 1.9674495969499861, 1.9674519811357771, 1.9674602917262487, 1.9674758911132812, 1.9675045013427734, 1.9675453730991908, 1.967606476375035, 1.9676741191319056, 1.967757020677839, 1.9678538867405482, 1.9679642404828752], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.036666665226221085, 0.036666665226221085, 0.036666665226221085, 0.03799999877810478, 0.03866666555404663, 0.03966666758060455, 0.0416666679084301, 0.04233333468437195, 0.044333335012197495, 0.04533333331346512, 0.04699999839067459, 0.04800000041723251, 0.049666665494441986, 0.049666665494441986, 0.05066666752099991, 0.0533333346247673, 0.05533333495259285, 0.05833333358168602, 0.06300000101327896, 0.06599999964237213, 0.06800000369548798, 0.0716666653752327, 0.07500000298023224, 0.07966666668653488, 0.0793333351612091, 0.08433333039283752, 0.08699999749660492, 0.09133332967758179, 0.0949999988079071, 0.09833333641290665, 0.09933333098888397, 0.10166666656732559, 0.10333333164453506, 0.10499999672174454, 0.10833333432674408, 0.11033333092927933, 0.11100000143051147, 0.11500000208616257, 0.11566666513681412, 0.11633333563804626, 0.1146666631102562, 0.11266666650772095, 0.1146666631102562, 0.1133333370089531, 0.1120000034570694]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [3, 2, 5, 4, 2, 2, 4, 1, 5, 0, 0, 2, 4, 1, 2, 4, 3, 1, 9, 5, 9, 2, 0, 3, 1, 8, 7, 2, 2, 2, 8, 4, 2, 3, 4, 7, 8, 1, 4, 0, 0, 1, 9, 3, 3, 8, 7, 7, 3, 9, 2, 2, 2, 3, 1, 3, 4, 7, 4, 2, 3, 2, 9, 1, 5, 8, 4, 8, 2, 6, 7, 9, 3], [1, 3, 0, 1, 2, 2, 2, 0, 1, 1, 1, 2, 2, 3, 0, 2, 1, 0, 1, 2, 2, 2, 2, 2, 3, 1, 2, 1, 3, 2, 2, 2, 3, 0, 3, 1, 2, 0, 3, 3, 1, 1, 1, 2, 3, 2, 3, 3, 0, 0, 0, 3, 2], [57, 39, 24, 98, 26, 73, 46, 33, 24, 64], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 4, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [14, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [4, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.0674285739660263, "mapping_values": [1, 1, 1, 0, 1, 0, 11, 11, 6, 5, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.pow(tf.math.add(beta, grad), alpha), tf.math.square(tf.math.add(tf.math.add(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.301443306367789, 2.3019664752689635, 2.3010484118266996, 2.30028002348086, 2.301119399344712, 2.301653360599351, 2.300756296760701, 2.3015462875429193], "accuracy": [0.09153348207473755, 0.09457138925790787, 0.08902391046285629, 0.09853387624025345, 0.0936468094587326, 0.08374059200286865, 0.08757099509239197, 0.07951393723487854], "val_loss": [1.9699747903006417, 1.9698645046779089, 1.9702988352094377, 1.9710158620561873, 1.9713777133396693, 1.9717692647661482, 1.9721171515328544, 1.9722798892429896], "val_accuracy": [0.054666668176651, 0.06433333456516266, 0.06499999761581421, 0.05433333292603493, 0.054666668176651, 0.058666665107011795, 0.05000000074505806, 0.04899999871850014]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0], [0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1], [3, 7, 5, 4, 2, 2, 4, 1, 5, 0, 0, 9, 4, 1, 2, 4, 3, 3, 5, 1, 9, 2, 9, 2, 1, 2, 7, 1, 2, 2, 8, 0, 2, 2, 4, 7, 8, 2, 4, 0, 0, 5, 9, 6, 3, 8, 7, 7, 3, 9, 2, 2, 2, 3, 1, 3, 4, 7, 4, 2, 3, 2, 9, 1, 5, 8, 4, 8, 2, 6, 7, 9, 3], [2, 2, 1, 2, 0, 2, 2, 0, 1, 1, 1, 2, 2, 3, 0, 1, 1, 0, 2, 0, 2, 2, 2, 2, 3, 1, 2, 1, 3, 2, 2, 2, 3, 0, 3, 1, 2, 0, 3, 3, 1, 1, 1, 2, 3, 2, 2, 3, 0, 0, 0, 3, 2], [57, 75, 25, 22, 26, 73, 46, 33, 24, 64, 59], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [2, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [89, 95, 54, 66], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [2, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [8, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.037142857909202576, "mapping_values": [1, 3, 3, 1, 2, 0, 3, 3, 2, 1, 1, 9, 8, 6, 2, 1, 2, 1, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, beta), tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, grad), tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(beta)", "other_info": {"loss": [2.3022566105254714, 2.303984644579582, 2.3033150067466077, 2.30292604432807, 2.303162173099994, 2.303555145491667], "accuracy": [0.08994849026203156, 0.08651433140039444, 0.08770307898521423, 0.09285431355237961, 0.08942015469074249, 0.08413683623075485], "val_loss": [1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1], [3, 9, 5, 5, 2, 1, 4, 1, 8, 3, 4, 5, 4, 1, 2, 1, 3, 3, 2, 2, 9, 2, 5, 2, 1, 2, 2, 7, 2, 6, 8, 4, 0, 3, 4, 5, 8, 1, 8, 0, 6, 1, 0, 6, 3, 8, 7, 9, 4, 9, 2, 4, 2, 4, 2, 3, 4, 7, 2, 9, 4, 2, 7, 1, 5, 8, 4, 8, 2, 7, 7, 9, 3, 2, 0, 8, 8], [1, 2, 2, 2, 0, 2, 2, 0, 1, 1, 1, 2, 2, 3, 0, 1, 1, 0, 2, 0, 2, 2, 2, 2, 3, 1, 2, 1, 3, 2, 2, 2, 3, 0, 3, 1, 2, 0, 3, 3, 1, 1, 1, 2, 3, 2, 2, 3, 0, 0, 0, 3, 2], [57, 39, 24, 98, 26, 73, 46, 33, 24, 64], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [23, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [5, 4, 3], [78], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.037142857909202576, "mapping_values": [1, 70, 70, 42, 28, 7, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 68, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, grad))))), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.add(tf.math.add(alpha, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), alpha), tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))), alpha)))), alpha)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.pow(tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), alpha)), tf.math.add(alpha, alpha))), tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))))), grad))), tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.subtract(grad, tf.math.sqrt(tf.math.negative(tf.math.add(alpha, grad)))))))))), tf.math.add(alpha, tf.math.divide_no_nan(grad, grad))), tf.math.add(alpha, grad)))))), tf.math.subtract(alpha, grad)))), alpha)))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, beta))", "other_info": {"loss": [2.302256740961313, 2.3039866417406287, 2.303322284984677, 2.3029478301367092, 2.303200053123199, 2.3036291645880405], "accuracy": [0.08994849026203156, 0.08651433140039444, 0.08757099509239197, 0.09285431355237961, 0.08915598690509796, 0.08374059200286865], "val_loss": [1.9703856195722307, 1.970388344355992, 1.9703960418701172, 1.970409597669329, 1.9704295567103796, 1.9704588481358118], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.035999998450279236]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0], [1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [3, 1, 5, 4, 2, 5, 4, 1, 8, 3, 4, 5, 4, 1, 2, 6, 3, 3, 2, 5, 9, 2, 5, 2, 1, 2, 0, 7, 2, 6, 8, 4, 0, 3, 4, 7, 8, 1, 8, 0, 6, 1, 0, 6, 3, 8, 7, 7, 5, 9, 2, 2, 2, 4, 1, 3, 4, 7, 4, 2, 4, 2, 7, 1, 5, 8, 4, 8, 2, 7, 7, 9, 3, 2, 0, 8, 4], [3, 2, 1, 1, 2, 2, 2, 0, 2, 1, 1, 1, 2, 3, 2, 2, 1, 0, 2, 0, 1, 2, 2, 2, 3, 1, 2, 0, 3, 2, 2, 2, 0, 0, 2, 1, 2, 0, 3, 3, 1, 1, 2, 2, 3, 2, 2, 1, 0, 0, 0, 3, 2, 2, 1, 3, 3], [83, 38, 25, 22, 26, 73, 46, 33, 24, 64], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [23, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [5, 4, 3], [78], [1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.037142857909202576, "mapping_values": [1, 1, 1, 0, 1, 0, 4, 4, 3, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.square(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3022621426804664, 2.3040350550091135, 2.3034411400001535, 2.303215689710134, 2.303584203838499, 2.3042583482266417], "accuracy": [0.08994849026203156, 0.08638224750757217, 0.08770307898521423, 0.09245806187391281, 0.08796724677085876, 0.08228767663240433], "val_loss": [1.9703993116106306, 1.9704482214791434, 1.9705342565264021, 1.9706610952104842, 1.9708144324166434, 1.9709925651550293], "val_accuracy": [0.03633333370089531, 0.035999998450279236, 0.03466666489839554, 0.03400000184774399, 0.03333333507180214, 0.032999999821186066]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [6, 3, 1, 2, 2, 2, 4, 1, 0, 0, 4, 5, 4, 8, 2, 2, 3, 3, 3, 5, 9, 2, 6, 8, 1, 2, 3, 7, 2, 6, 8, 4, 2, 3, 2, 7, 8, 0, 8, 1, 4, 1, 0, 6, 3, 2, 7, 6, 3, 9, 2, 2, 2, 4, 5, 2, 2, 7, 4, 2, 1, 9, 7, 1, 5, 8, 4, 8, 2, 7, 7, 9, 3, 5, 7, 5, 6, 0, 2, 3, 9], [0, 2, 1, 2, 0, 2, 2, 0, 1, 1, 1, 2, 2, 3, 0, 1, 1, 0, 2, 1, 2, 2, 2, 2, 3, 1, 2, 1, 2, 2, 2, 2, 3, 0, 2, 1, 2, 0, 3, 3, 0, 1, 1, 2, 3, 2, 2, 3, 0, 0, 0, 1, 2, 2, 0, 0, 1], [57, 75, 25, 22, 26, 73, 72, 33, 24, 64, 54, 42, 24, 52, 37, 81, 38], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [14, 95, 54, 66], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 5, 3, 5, 9, 8], [5, 4, 3], [78], [1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [1, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.018285714089870453, "mapping_values": [1, 1, 1, 0, 1, 1, 3, 3, 2, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.30414823842732, 2.318810655456319, 2.345906031870209, 2.3944434254570344, 2.479578801496327, 2.661631079744181], "accuracy": [0.08611807972192764, 0.062475234270095825, 0.030907409265637398, 0.017038701102137566, 0.008717474527657032, 0.007528727874159813], "val_loss": [1.9771509170532227, 1.996762820652553, 2.0315096037728444, 2.08813408442906, 2.191706044333322, 2.4427574702671597], "val_accuracy": [0.017999999225139618, 0.0063333334401249886, 0.004999999888241291, 0.004999999888241291, 0.005333333276212215, 0.006666666828095913]}}]