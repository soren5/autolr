[{"genotype": [[0], [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [4, 4, 1, 4, 0, 2, 8, 6, 5, 4, 4, 5, 9, 1, 8, 6, 2, 4, 2, 5, 9, 2, 5, 3, 1, 2, 7, 7, 2, 6, 8, 7, 6, 2, 4, 7, 8, 1, 8, 7, 6, 1, 0], [0, 1, 1, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1, 3, 2, 1, 1, 0, 2, 2, 1, 0, 2, 2, 3, 1, 2, 3, 3, 2, 2, 2, 3], [71, 7, 25, 53, 26, 73, 46, 33, 24], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [5, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.8385714292526245, "mapping_values": [1, 1, 1, 0, 1, 1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.9061143943237167, 1.0256413112715204, 0.75285292768428, 0.6579594126608646, 0.59477668767592, 0.5609477975853147, 0.5285312893635971, 0.5039464402956151, 0.4771537821345782, 0.46270078636746226, 0.44550146010368885, 0.42269140709471537, 0.4122408273205576, 0.3873970358323868, 0.3794085625187596, 0.37082045559066873, 0.36327684298010077, 0.36591708007867796, 0.33354067080891003, 0.32205490943321446, 0.3277650901457543, 0.31303962173951283, 0.29673966818938496, 0.29523883599174366, 0.28989832595102916, 0.2828919122586271, 0.2798122924316703, 0.2638038266816742, 0.2522397109341423, 0.2603186189364669, 0.24716874927561816, 0.2307092653738273, 0.22241742635966763, 0.23673726233902578, 0.21812617812630933, 0.2395856790751388, 0.22552670365421607], "accuracy": [0.3549068868160248, 0.6402060389518738, 0.7127195596694946, 0.7445515990257263, 0.7687227725982666, 0.7853652238845825, 0.8004226684570312, 0.8072909712791443, 0.8177255392074585, 0.8228767514228821, 0.8352925777435303, 0.8397833704948425, 0.8451988101005554, 0.8545766472816467, 0.8578787446022034, 0.8581429123878479, 0.8658037185668945, 0.8659358024597168, 0.8768987059593201, 0.8747853636741638, 0.8737286925315857, 0.8856161832809448, 0.8869370222091675, 0.8877294659614563, 0.8912957310676575, 0.8948619961738586, 0.889050304889679, 0.8977677822113037, 0.9017302989959717, 0.8996169567108154, 0.9039757251739502, 0.9108440279960632, 0.9120327830314636, 0.9056927561759949, 0.9169198274612427, 0.9051644206047058, 0.9137498140335083], "val_loss": [1.0384725161961146, 0.6189090354101998, 0.5067562716347831, 0.4666299819946289, 0.44233535868780954, 0.4120863505772182, 0.39144393375941683, 0.3796617473874773, 0.3654399003301348, 0.35349115303584505, 0.3396514483860561, 0.33659749371664865, 0.3221108147076198, 0.3309453896113804, 0.30675385679517475, 0.3074244516236441, 0.31391531229019165, 0.30390325614384245, 0.2976381097521101, 0.3079140101160322, 0.3030240535736084, 0.2986861382211958, 0.2902464611189706, 0.2943458727427891, 0.28991529771259855, 0.286749677998679, 0.294109046459198, 0.2921938896179199, 0.2793873889105661, 0.2860708747591291, 0.2813208954674857, 0.28151791436331614, 0.2808050002370562, 0.2902130143983023, 0.3293486067226955, 0.28702339955738615, 0.2861965809549604], "val_accuracy": [0.5603333115577698, 0.7333333492279053, 0.7710000276565552, 0.8009999990463257, 0.7986666560173035, 0.8226666450500488, 0.8273333311080933, 0.8326666951179504, 0.846666693687439, 0.8539999723434448, 0.8650000095367432, 0.859000027179718, 0.8656666874885559, 0.8666666746139526, 0.874666690826416, 0.875333309173584, 0.8706666827201843, 0.871999979019165, 0.8773333430290222, 0.8803333044052124, 0.8713333606719971, 0.8823333382606506, 0.8769999742507935, 0.8816666603088379, 0.878333330154419, 0.8799999952316284, 0.8836666941642761, 0.8846666812896729, 0.8899999856948853, 0.8883333206176758, 0.8880000114440918, 0.8913333415985107, 0.8893333077430725, 0.8853333592414856, 0.874666690826416, 0.8856666684150696, 0.8833333253860474]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 4, 4, 9, 0, 0, 3, 2, 5, 2, 3, 5, 0, 4, 4, 6, 3, 3, 2, 5, 9, 2, 5, 3, 1, 2, 7, 7, 2, 6, 8, 7, 6, 2, 4, 7, 8, 1, 8, 7, 6, 1, 0], [2, 0, 1, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1, 3, 2, 1, 1, 0, 2, 2, 1, 0, 2, 2, 3, 1, 2, 3, 3, 2, 2, 2, 3], [71, 7, 25, 53, 26, 73, 46, 33, 24], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [5, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.8368571400642395, "mapping_values": [1, 29, 29, 18, 11, 5, 3, 3, 2, 1, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.pow(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), grad), tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.add(tf.math.multiply(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha)), alpha)), tf.math.square(tf.math.negative(tf.math.pow(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha))))), alpha)))))), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.906114427578243, 1.0257282992474328, 0.7529681049805937, 0.6581583484887227, 0.5959130320503664, 0.5605939608271474, 0.5263410000328091, 0.502721497037423, 0.4751866578607039, 0.46034128395731044, 0.44321509987497687, 0.4194545953257398, 0.41482759047540235, 0.39103131470364066, 0.3787015690984286, 0.3686698258765511, 0.36280528431271897, 0.3690059185618533, 0.3401346513938753, 0.3267779101383543, 0.3271632015689363, 0.3169427490143051, 0.29904255521705264, 0.3024932964209316, 0.2938093227827475, 0.2820112908347849, 0.28651698224769057, 0.2642319868655174, 0.25457186942417953, 0.2639920497378338, 0.24407372407476427, 0.22919655545489065, 0.22215038806243328, 0.23372552763233254, 0.21554757405887773, 0.23149441693948952, 0.2227705714724965], "accuracy": [0.3549068868160248, 0.6404702067375183, 0.7125874757766724, 0.7456082701683044, 0.7689869403839111, 0.7874785661697388, 0.8012151718139648, 0.8072909712791443, 0.8178576231002808, 0.8241975903511047, 0.8355567455291748, 0.839519202709198, 0.8437458872795105, 0.8537842035293579, 0.856689989566803, 0.8602562546730042, 0.8663320541381836, 0.8622375130653381, 0.873860776424408, 0.876370370388031, 0.873860776424408, 0.8820499181747437, 0.8857482671737671, 0.8845595121383667, 0.8882578015327454, 0.8957865834236145, 0.8901069760322571, 0.8973715305328369, 0.9033153057098389, 0.8986923694610596, 0.9059569239616394, 0.9132214784622192, 0.9177123308181763, 0.9079381823539734, 0.919561505317688, 0.9093911051750183, 0.9157310724258423], "val_loss": [1.0384100845881872, 0.6185592072350639, 0.505794882774353, 0.466731105531965, 0.44169814246041433, 0.4127974510192871, 0.38999256065913607, 0.37682480471474783, 0.36504106862204416, 0.353374183177948, 0.3359846217291696, 0.33999613353184294, 0.32621445826121737, 0.32364702224731445, 0.3085044877869742, 0.3073827028274536, 0.32867278371538433, 0.3015275938170297, 0.30446544715336393, 0.30901147638048443, 0.3054972631590707, 0.2974435346467154, 0.29135999509266447, 0.29046538046428133, 0.28714695147105623, 0.3043846147400992, 0.299714343888419, 0.2937913111277989, 0.2847525562558855, 0.2887727362768991, 0.28539752108710154, 0.285984856741769, 0.2815678460257394, 0.2898736000061035, 0.31887318406786236, 0.2860285554613386, 0.29298638445990427], "val_accuracy": [0.5603333115577698, 0.734666645526886, 0.7710000276565552, 0.7983333468437195, 0.7983333468437195, 0.8246666789054871, 0.8256666660308838, 0.8339999914169312, 0.8483333587646484, 0.8550000190734863, 0.8633333444595337, 0.8569999933242798, 0.8633333444595337, 0.8693333268165588, 0.8733333349227905, 0.8733333349227905, 0.862666666507721, 0.8759999871253967, 0.8756666779518127, 0.878000020980835, 0.8686666488647461, 0.8799999952316284, 0.8796666860580444, 0.8806666731834412, 0.8796666860580444, 0.878000020980835, 0.8763333559036255, 0.8833333253860474, 0.8840000033378601, 0.8833333253860474, 0.8893333077430725, 0.8899999856948853, 0.8849999904632568, 0.8833333253860474, 0.8786666393280029, 0.8866666555404663, 0.8826666474342346]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [4, 4, 1, 4, 0, 2, 8, 1, 5, 0, 4, 5, 2, 1, 8, 6, 2, 4, 2, 5, 9, 2, 5, 3, 1, 2, 7, 7, 2, 6, 8, 7, 6, 2, 4, 7, 8, 1, 8, 7, 6, 1, 0], [2, 1, 1, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1, 3, 2, 1, 1, 0, 2, 2, 1, 0, 2, 2, 3, 1, 2, 3, 3, 2, 2, 2, 3], [99, 75, 25, 53, 26, 73, 46, 33, 24], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [5, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.8288571238517761, "mapping_values": [1, 31, 31, 18, 13, 3, 3, 3, 2, 1, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.negative(grad), tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.negative(tf.math.add(alpha, tf.math.pow(alpha, tf.math.add(alpha, alpha))))), alpha))), tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.sqrt(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32), alpha)), alpha)), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, alpha))), alpha), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.9061143578885962, 1.0256968158000905, 0.753178610021979, 0.6575960556844506, 0.5964288974970308, 0.5605854015576447, 0.529344930317833, 0.5059147044266409, 0.4810540824085415, 0.461747366376541, 0.44458976267918054, 0.423882109023608, 0.4143139394542655, 0.39285543401558415, 0.3811865417696875, 0.3702561108978779, 0.36522545737833506, 0.3697560615527584, 0.3344054023870907, 0.31776857671720665, 0.3285564705837735, 0.317924373531858, 0.296094167702517, 0.30025217594833986, 0.2915116333611936, 0.28210090103323876, 0.2848155708943439, 0.2684864893471009, 0.2547642370146405, 0.2549875319110341, 0.24928416890782168, 0.2366861033598666, 0.22201553085508158, 0.236308578038181, 0.21992411412000498, 0.22909069561396198, 0.2201151576032413, 0.20270472112907756, 0.20528072690911786, 0.19394394252491098, 0.190967189653155], "accuracy": [0.3549068868160248, 0.6404702067375183, 0.7121912837028503, 0.7460044622421265, 0.7680623531341553, 0.7864218950271606, 0.7994980812072754, 0.8080834746360779, 0.8161405324935913, 0.8248580098152161, 0.8376700282096863, 0.8376700282096863, 0.8437458872795105, 0.8520671129226685, 0.8588033318519592, 0.8593316674232483, 0.8632941246032715, 0.8622375130653381, 0.874389111995697, 0.8804649114608765, 0.8741249442100525, 0.8794082403182983, 0.8881257176399231, 0.8860124349594116, 0.8920882344245911, 0.8953903317451477, 0.8906353116035461, 0.894069492816925, 0.9037115573883057, 0.9008057117462158, 0.900409460067749, 0.9093911051750183, 0.9134856462478638, 0.9056927561759949, 0.9153348207473755, 0.9097873568534851, 0.9167877435684204, 0.9207502603530884, 0.9196935892105103, 0.9235239624977112, 0.9235239624977112], "val_loss": [1.0384084837777274, 0.6190031596592495, 0.5061403172356742, 0.46583432810647146, 0.4410485454968044, 0.4123693193708147, 0.39723735196249826, 0.3783764754022871, 0.364564767905644, 0.35371192012514385, 0.33690939630780903, 0.34025806188583374, 0.327286354133061, 0.32775247948510305, 0.30973067453929354, 0.30718436411448885, 0.3184207337243216, 0.3004342147282192, 0.2981285537992205, 0.3135210190500532, 0.3048063005719866, 0.29735811267580303, 0.2926090359687805, 0.2918402467455183, 0.2797631451061794, 0.3081141539982387, 0.3000702176775251, 0.2921940769468035, 0.28982363428388325, 0.29745982374463764, 0.2877830181803022, 0.28629560129983084, 0.28571433680398123, 0.28829818964004517, 0.3193000384739467, 0.2887069582939148, 0.2878808208874294, 0.2875421643257141, 0.29030913966042654, 0.292250462940761, 0.2930477687290737], "val_accuracy": [0.5603333115577698, 0.734666645526886, 0.7716666460037231, 0.8006666898727417, 0.7960000038146973, 0.8223333358764648, 0.8209999799728394, 0.8333333134651184, 0.8479999899864197, 0.8519999980926514, 0.8656666874885559, 0.8586666584014893, 0.8633333444595337, 0.8673333525657654, 0.8726666569709778, 0.8713333606719971, 0.8650000095367432, 0.8776666522026062, 0.8796666860580444, 0.8763333559036255, 0.8683333396911621, 0.878000020980835, 0.8793333172798157, 0.8823333382606506, 0.8830000162124634, 0.8733333349227905, 0.875333309173584, 0.887666642665863, 0.887666642665863, 0.8840000033378601, 0.8870000243186951, 0.887666642665863, 0.8926666378974915, 0.8853333592414856, 0.875333309173584, 0.8930000066757202, 0.8843333125114441, 0.8896666765213013, 0.8886666893959045, 0.8893333077430725, 0.8920000195503235]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [4, 0, 5, 9, 0, 2, 8, 2, 5, 0, 4, 5, 4, 1, 4, 6, 3, 3, 2, 5, 9, 2, 5, 3, 1, 2, 7, 7, 2, 6, 8, 7, 6, 2, 4, 7, 8, 1, 8, 7, 6, 1, 0], [2, 1, 1, 0, 0, 2, 2, 0, 1, 1, 0, 1, 1, 3, 2, 1, 1, 0, 2, 2, 1, 0, 2, 2, 3, 1, 2, 3, 3, 2, 2, 2, 3], [99, 75, 25, 53, 26, 73, 46, 33, 24], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [7, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.8268571496009827, "mapping_values": [1, 8, 8, 6, 2, 1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.square(tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.add(tf.math.add(alpha, grad), alpha)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.906115030001624, 1.0256856408778623, 0.7530356210063178, 0.6580753060789187, 0.5964586398368813, 0.5637111213890286, 0.5268041386958269, 0.5037456769803732, 0.47427864308370465, 0.46220925249176065, 0.4403925947210241, 0.42041600143369384, 0.4122012166999917, 0.3843239414819464, 0.37471521195561075, 0.36932205550816427, 0.358513178909302, 0.3693832320276426, 0.3378248513177905, 0.324175523981017, 0.324734014247497, 0.309944713891946, 0.2922059618888231, 0.29916365233473474, 0.29288029111355934], "accuracy": [0.3549068868160248, 0.6402060389518738, 0.7123233675956726, 0.7457403540611267, 0.7703077793121338, 0.7827235460281372, 0.7992339134216309, 0.8083476424217224, 0.8190463781356812, 0.8226125836372375, 0.8345000743865967, 0.8407079577445984, 0.8459912538528442, 0.856689989566803, 0.8588033318519592, 0.8593316674232483, 0.867520809173584, 0.8627657890319824, 0.8745211958885193, 0.8746532797813416, 0.872407853603363, 0.8842953443527222, 0.8883898854255676, 0.8838990926742554, 0.8853520154953003], "val_loss": [1.0385000365121024, 0.61909966809409, 0.5060767786843436, 0.4666300671441214, 0.4459087337766375, 0.4119590095111302, 0.3918359449931553, 0.37817869016102384, 0.3686286636761257, 0.35085019043513704, 0.33794338362557547, 0.3411896824836731, 0.32504825932638987, 0.32276852641786846, 0.31178453138896395, 0.3036901610238211, 0.31936135462352205, 0.30067609889166697, 0.29501891136169434, 0.30384847096034456, 0.2958784443991525, 0.2915670360837664, 0.28946350302015034, 0.29692614930016653, 0.2900386026927403], "val_accuracy": [0.5603333115577698, 0.734000027179718, 0.7710000276565552, 0.800000011920929, 0.7926666736602783, 0.8233333230018616, 0.8246666789054871, 0.8323333263397217, 0.8453333377838135, 0.8523333072662354, 0.8636666536331177, 0.859333336353302, 0.8643333315849304, 0.8659999966621399, 0.8709999918937683, 0.874666690826416, 0.8650000095367432, 0.875333309173584, 0.8776666522026062, 0.8823333382606506, 0.8786666393280029, 0.878333330154419, 0.878000020980835, 0.8799999952316284, 0.8756666779518127]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [4, 4, 5, 9, 3, 2, 8, 2, 5, 0, 4, 5, 4, 1, 4, 6, 3, 3, 2, 5, 9, 2, 5, 3, 1, 2, 7, 7, 2, 6, 8, 7, 6, 2, 4, 7, 8, 1, 8, 7, 6, 1, 0], [2, 1, 1, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1, 3, 2, 1, 1, 0, 2, 2, 1, 0, 2, 2, 3, 1, 2, 3, 3, 2, 2, 2, 3], [71, 7, 25, 53, 26, 73, 46, 33, 24], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [0, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.8254285454750061, "mapping_values": [1, 15, 15, 10, 5, 2, 3, 3, 2, 1, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))), grad)), tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.negative(alpha)), alpha)))), tf.math.add(alpha, alpha)), tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.9061179659102399, 1.0257048101126636, 0.7530647551441835, 0.657786486911232, 0.5947978056306931, 0.5601470731646551, 0.5263836688574012, 0.5028264766765419, 0.4779255759832551, 0.46155843868892993, 0.442624505224985, 0.4168847458686307, 0.4087145230427174, 0.38857438921408805, 0.3726392570480049, 0.364954906660316, 0.35964235074531764, 0.3710613813240924, 0.34001146717283154, 0.32303847693543564, 0.32772374223992023, 0.3136636811815248, 0.2968827400894339, 0.30341982117591676, 0.2973032474927206, 0.2826111934889167, 0.2873645124497147, 0.26474410274623644, 0.25218559761624276, 0.2567789889483357, 0.23994853402550792, 0.23017607446848015, 0.22044784501401612, 0.22982571505402782, 0.21047628190003806, 0.22629347567576552, 0.2176777890069909], "accuracy": [0.35503897070884705, 0.6404702067375183, 0.7128516435623169, 0.7457403540611267, 0.7689869403839111, 0.7845727205276489, 0.8006868362426758, 0.8086118102073669, 0.8170651197433472, 0.8245938420295715, 0.8362171649932861, 0.8391229510307312, 0.8485008478164673, 0.8545766472816467, 0.8576145768165588, 0.8594637513160706, 0.8671245574951172, 0.8615770936012268, 0.8713511824607849, 0.8790120482444763, 0.8730682730674744, 0.8831065893173218, 0.8879936337471008, 0.8848236799240112, 0.889050304889679, 0.8961827754974365, 0.8891823887825012, 0.897899866104126, 0.9039757251739502, 0.8982961177825928, 0.906749427318573, 0.9124290347099304, 0.9134856462478638, 0.9078060984611511, 0.9189010858535767, 0.9121648669242859, 0.9167877435684204], "val_loss": [1.0384903635297502, 0.6189975738525391, 0.506220851625715, 0.4668943200792585, 0.4435695580073765, 0.41175676243645803, 0.3936015026909964, 0.37590837478637695, 0.3681572249957493, 0.34871680395943777, 0.33706473452704294, 0.33862987586430143, 0.3222946013723101, 0.3221542409488133, 0.3060582791055952, 0.3043384722300938, 0.3190303700310843, 0.30289424317223684, 0.2995227149554661, 0.30903216770717074, 0.29755433968135286, 0.2966873901230948, 0.29538812807628084, 0.29278738158089773, 0.2903267315455845, 0.3005940999303545, 0.29935973031180246, 0.2908224378313337, 0.28264445066452026, 0.2907418097768511, 0.28309874875204905, 0.28563752344676424, 0.2823243907519749, 0.28731322288513184, 0.31547036341258455, 0.287995662008013, 0.2888512100492205], "val_accuracy": [0.5603333115577698, 0.734000027179718, 0.7703333497047424, 0.7993333339691162, 0.796999990940094, 0.8246666789054871, 0.8230000138282776, 0.8360000252723694, 0.8463333249092102, 0.856333315372467, 0.8619999885559082, 0.8616666793823242, 0.8663333058357239, 0.8673333525657654, 0.8726666569709778, 0.8773333430290222, 0.8676666617393494, 0.8759999871253967, 0.874666690826416, 0.8793333172798157, 0.8776666522026062, 0.8769999742507935, 0.8776666522026062, 0.8849999904632568, 0.8776666522026062, 0.8769999742507935, 0.878333330154419, 0.8846666812896729, 0.8853333592414856, 0.8866666555404663, 0.8896666765213013, 0.890999972820282, 0.8889999985694885, 0.8849999904632568, 0.8799999952316284, 0.8856666684150696, 0.8886666893959045]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [2, 4, 4, 9, 5, 4, 3, 2, 6, 2, 3, 5, 1, 4, 4, 6, 3, 3, 2, 5, 9, 2, 5, 3, 1, 2, 7, 7, 2, 6, 8, 7, 6, 2, 4, 7, 8, 1, 8, 7, 6, 1, 0], [0, 0, 1, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1, 3, 2, 1, 1, 0, 2, 2, 1, 0, 2, 2, 3, 1, 2, 3, 3, 2, 2, 2, 3], [14, 7, 68, 90, 46, 73, 46, 33, 24], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [5, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.8251428604125977, "mapping_values": [1, 31, 31, 17, 14, 6, 3, 3, 2, 1, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.pow(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.square(tf.math.subtract(grad, tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, alpha)))))), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))), alpha)), tf.math.add(alpha, alpha))), grad)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [1.9061165320134796, 1.025644040961134, 0.7528713975741863, 0.657738122485333, 0.5949450606809175, 0.5581416884638205, 0.5264304712495437, 0.5029262229947838, 0.4770427306708312, 0.45988841451878687, 0.44128311930583247, 0.4249916859960134, 0.4145532655693899, 0.3881359641318308, 0.37564946839586144, 0.3687231325517477, 0.35755164240093407, 0.36845253695507624, 0.33650522617978224, 0.31762410420641496, 0.3218566962457399, 0.30982508943254417, 0.29553388702540334, 0.29808732483443995, 0.29335675448505966], "accuracy": [0.3549068868160248, 0.640338122844696, 0.713379979133606, 0.7450799345970154, 0.7676661014556885, 0.7882710099220276, 0.7996301651000977, 0.8078193068504333, 0.8195747137069702, 0.8241975903511047, 0.8379341959953308, 0.8362171649932861, 0.8454629778862, 0.8541803956031799, 0.8578787446022034, 0.8638224601745605, 0.8650112152099609, 0.8605204224586487, 0.8732003569602966, 0.8802007436752319, 0.8758420348167419, 0.8864086866378784, 0.8861445188522339, 0.8870691061019897, 0.8885219693183899], "val_loss": [1.0384846755436488, 0.6189273425510952, 0.5063586575644357, 0.4673447608947754, 0.4406119925635202, 0.41171131815229145, 0.39530666385378155, 0.376295234475817, 0.3668724639075143, 0.3532952240535191, 0.34020360878535677, 0.35335205282483784, 0.3229896766798837, 0.32109960487910677, 0.30948128019060406, 0.30624706404549734, 0.31887710094451904, 0.3009389894349234, 0.2976389101573399, 0.30562002318246023, 0.2992628387042454, 0.3008332507950919, 0.2906735624585833, 0.2936447858810425, 0.28714594670704435], "val_accuracy": [0.5603333115577698, 0.7336666584014893, 0.7716666460037231, 0.79666668176651, 0.8003333210945129, 0.8236666917800903, 0.8230000138282776, 0.8360000252723694, 0.8463333249092102, 0.8529999852180481, 0.8616666793823242, 0.8479999899864197, 0.8673333525657654, 0.8669999837875366, 0.8709999918937683, 0.875, 0.8676666617393494, 0.875, 0.8773333430290222, 0.8816666603088379, 0.8733333349227905, 0.8756666779518127, 0.8809999823570251, 0.8786666393280029, 0.8793333172798157]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 4, 4, 9, 0, 0, 3, 2, 5, 2, 3, 5, 0, 4, 4, 2, 2, 3, 2, 5, 9, 2, 5, 3, 1, 2, 7, 7, 2, 6, 8, 7, 6, 2, 4, 7, 8, 1, 8, 7, 6, 1, 0], [0, 0, 1, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1, 3, 2, 1, 1, 0, 2, 2, 1, 0, 2, 2, 3, 1, 2, 3, 3, 2, 2, 2, 3], [99, 75, 25, 53, 26, 73, 46, 33, 24], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [23, 95, 54, 66], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [5, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.7631428837776184, "mapping_values": [1, 29, 29, 18, 11, 6, 3, 3, 2, 1, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha)))))), alpha)), tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.math.add(alpha, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), alpha))))), alpha)))))))))))), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.291952301655715, 2.221453867694249, 2.030958987482157, 1.6198627698407306, 1.3987778494969303, 1.23751025495276, 0.966028676159299, 0.9149061268142122, 0.8626152195982126, 0.8139237143013692, 0.8120871261834878, 0.7732465836539197, 0.7355830207902049, 0.7251659641176434, 0.707413045454019, 0.6921889632212063, 0.6643279280802357, 0.6607485532115054, 0.6403388674973087, 0.6326734051570885, 0.6112970895125425, 0.5996587889903982, 0.5805629301993854, 0.573279047497291, 0.5506705234961157, 0.551822101679366, 0.5510212798569543, 0.5306772636605166, 0.5162217745990675, 0.5164028892600856, 0.4983571197701294, 0.4901660707105247, 0.4861181231340822, 0.47740552240295997, 0.47117123326227384, 0.4690572815391098, 0.46018155360218715, 0.4436699750558528, 0.4341365853360206, 0.4303187908293029, 0.4240136242750503, 0.42583644520793973, 0.42331742774682857, 0.4080634241988394, 0.4071662507202364, 0.3941660682837945, 0.3957273256052849, 0.38713981849862883, 0.3793945242708007, 0.3756648341638852], "accuracy": [0.11557257920503616, 0.27565711736679077, 0.40470215678215027, 0.4593845009803772, 0.5246334671974182, 0.5857878923416138, 0.6567164063453674, 0.6651697158813477, 0.6831330060958862, 0.6988508701324463, 0.6975300312042236, 0.7125874757766724, 0.7169462442398071, 0.7281733155250549, 0.737022876739502, 0.7397965788841248, 0.7561748623847961, 0.7479857206344604, 0.757099449634552, 0.7589486241340637, 0.7697794437408447, 0.7769119143486023, 0.7824593782424927, 0.7819310426712036, 0.7890635132789612, 0.7965922355651855, 0.7957997918128967, 0.8009510040283203, 0.8087438941001892, 0.8084797263145447, 0.8136309385299683, 0.8142913579940796, 0.8206313848495483, 0.8208954930305481, 0.8238013386726379, 0.8277638554573059, 0.8302733898162842, 0.8387266993522644, 0.8360850811004639, 0.8407079577445984, 0.8412362933158875, 0.8451988101005554, 0.8430854678153992, 0.8446704745292664, 0.8499537706375122, 0.8532558679580688, 0.8555012345314026, 0.8551049828529358, 0.8622375130653381, 0.86118084192276], "val_loss": [1.9319126946585519, 1.8237365995134627, 1.506413459777832, 0.9984467370169503, 0.7749723025730678, 0.6852410350527082, 0.6714537824903216, 0.651715908731733, 0.5798936060496739, 0.5598963499069214, 0.5499647174562726, 0.5415461914879935, 0.5267398697989327, 0.5208182505198887, 0.5082451105117798, 0.4893819945199149, 0.4795966488974435, 0.46234687737056185, 0.4526870421000889, 0.4469412735530308, 0.43754564012799946, 0.4310406446456909, 0.41793268067496164, 0.41032162734440397, 0.40432090418679373, 0.39583722182682585, 0.3893757462501526, 0.3823057498250689, 0.3763735464641026, 0.3760498251233782, 0.37050197805677143, 0.3637436968939645, 0.35790603501456125, 0.3531519685472761, 0.35154236214501516, 0.34803727694920134, 0.34348394189562115, 0.33482480900628225, 0.3295607055936541, 0.32640656403132845, 0.32508143356868197, 0.324727611882346, 0.3231302329472133, 0.31703039578029085, 0.3140298979622977, 0.31377649307250977, 0.3134095243045262, 0.3139240826879229, 0.31101441383361816, 0.3057853324072702], "val_accuracy": [0.34566667675971985, 0.44966667890548706, 0.5163333415985107, 0.6596666574478149, 0.6726666688919067, 0.7183333039283752, 0.722000002861023, 0.7366666793823242, 0.7483333349227905, 0.7580000162124634, 0.7590000033378601, 0.7523333430290222, 0.768666684627533, 0.7723333239555359, 0.7726666927337646, 0.7799999713897705, 0.7876666784286499, 0.7956666946411133, 0.800000011920929, 0.800000011920929, 0.812666654586792, 0.815666675567627, 0.8223333358764648, 0.8276666402816772, 0.8309999704360962, 0.8349999785423279, 0.8376666903495789, 0.8396666646003723, 0.8423333168029785, 0.8420000076293945, 0.8456666469573975, 0.8503333330154419, 0.8516666889190674, 0.8553333282470703, 0.8576666712760925, 0.8553333282470703, 0.856333315372467, 0.8603333234786987, 0.8659999966621399, 0.8679999709129333, 0.8686666488647461, 0.8700000047683716, 0.8679999709129333, 0.871666669845581, 0.8730000257492065, 0.871666669845581, 0.8693333268165588, 0.8703333139419556, 0.871666669845581, 0.8730000257492065]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [4, 4, 1, 4, 0, 1, 8, 4, 5, 0, 4, 5, 9, 1, 8, 6, 2, 4, 2, 5, 9, 2, 5, 3, 1, 2, 7, 7, 2, 6, 8, 7, 6, 2, 4, 7, 8, 1, 8, 7, 6, 1, 0], [0, 0, 1, 2, 0, 2, 2, 0, 1, 1, 0, 1, 1, 3, 2, 1, 1, 0, 2, 2, 1, 0, 2, 2, 3, 1, 2, 3, 3, 2, 2, 2, 3], [71, 35, 25, 53, 26, 73, 46, 33, 24], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [4, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.751714289188385, "mapping_values": [1, 15, 15, 8, 7, 3, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.subtract(tf.math.sqrt(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.add(alpha, alpha), grad)))), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.1016472608280092, 1.4614980457922124, 1.0782778098787598, 0.9593212396288278, 0.858054030801264, 0.8230680177523838, 0.744737918287803, 0.7353131301162769, 0.707943579870649, 0.7107872571754354, 0.6824022869250683, 0.6540640453148543, 0.6402430931071028], "accuracy": [0.3077532649040222, 0.4975564777851105, 0.6148461103439331, 0.6586976647377014, 0.6880200505256653, 0.6950204968452454, 0.724210798740387, 0.7215691208839417, 0.7354378700256348, 0.7395324110984802, 0.7470611333847046, 0.7548540234565735, 0.7578919529914856], "val_loss": [1.1921032496861048, 0.7924222605569022, 0.7406338793890817, 0.626437953540257, 0.5939793246132987, 0.542722259249006, 0.5561291830880302, 0.5126780782427106, 0.5943505934306553, 0.5114186661584037, 0.4893467426300049, 0.5127481392451695, 0.49014224324907574], "val_accuracy": [0.5963333249092102, 0.6890000104904175, 0.6886666417121887, 0.7233333587646484, 0.7443333268165588, 0.7570000290870667, 0.7329999804496765, 0.7773333191871643, 0.7306666374206543, 0.7706666588783264, 0.7663333415985107, 0.7586666941642761, 0.7683333158493042]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 4, 4, 9, 0, 2, 8, 2, 5, 0, 4, 5, 4, 1, 4, 6, 3, 3, 2, 5, 9, 2, 5, 3, 1, 2, 7, 7, 2, 6, 8, 7, 6, 2, 4, 7, 8, 1, 8, 7, 6, 1, 0], [2, 1, 1, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1, 3, 2, 1, 1, 0, 2, 2, 1, 0, 2, 2, 3, 1, 2, 3, 3, 2, 2, 2, 3], [2, 7, 25, 53, 26, 73, 46, 33, 24], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [5, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10514285415410995, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [3.2945080144199728, 2.3811891836308217, 2.3740949807087066, 2.3569270242175344, 2.339970218727476, 2.377363699239243, 2.3632612863882514, 2.3622982908532824, 2.6348069257047184, 2.361460445579395], "accuracy": [0.18874652683734894, 0.09747721254825592, 0.11002509295940399, 0.09681680053472519, 0.1010434553027153, 0.10447761416435242, 0.10051512718200684, 0.09430722147226334, 0.09760929644107819, 0.10368511080741882], "val_loss": [2.0333304405212402, 2.0196421486990794, 2.0543717656816756, 2.0145316123962402, 1.995321341923305, 1.9837628092084612, 2.007864475250244, 1.983933653150286, 1.995960099356515, 2.046246256147112], "val_accuracy": [0.10300000011920929, 0.12600000202655792, 0.10366666316986084, 0.10300000011920929, 0.1326666623353958, 0.11933333426713943, 0.09666666388511658, 0.10366666316986084, 0.10300000011920929, 0.10000000149011612]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [2, 4, 4, 2, 2, 2, 8, 2, 5, 0, 4, 3, 4, 6, 4, 6, 0, 3, 2, 4, 9, 2, 5, 3, 1, 2, 7, 7, 2, 6, 8, 7, 6, 2, 4, 7, 8, 1, 8, 7, 6, 1, 0], [2, 1, 1, 1, 0, 2, 2, 2, 1, 1, 0, 1, 1, 3, 2, 1, 1, 0, 2, 2, 1, 0, 2, 2, 3, 1, 2, 3, 3, 2, 2, 2, 3], [71, 7, 25, 53, 21, 73, 46, 33, 24], [1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [3, 3, 6, 2, 2, 0, 1, 2, 1, 2, 7, 2, 7, 5, 2, 1, 4, 3, 0, 9, 3, 4, 4, 9, 6, 9, 1, 0, 1, 5, 3, 4], [5, 1, 0, 0, 3, 3, 1, 4, 3, 4, 2, 3, 3, 4, 2, 2, 4, 3, 2, 2, 1, 2], [46, 95, 54, 66, 37], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [2, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 66, 66, 37, 29, 5, 54, 54, 32, 22, 5, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 50, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.pow(tf.math.add(alpha, tf.math.add(grad, tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.negative(tf.math.pow(alpha, tf.math.add(alpha, alpha)))), alpha)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))), tf.math.add(alpha, grad)))), alpha)), alpha))), tf.math.multiply(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha))))), alpha), grad)), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.subtract(grad, alpha)), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.sqrt(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.pow(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), grad)), grad)))), alpha)), tf.math.add(alpha, grad))))), tf.math.add(tf.math.sqrt(tf.math.add(alpha, grad)), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(alpha, tf.math.add(beta, tf.math.add(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, tf.math.subtract(grad, tf.math.add(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(alpha, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.negative(tf.math.add(beta, tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))), tf.math.multiply(tf.math.pow(grad, beta), tf.math.add(beta, grad)))), tf.math.pow(tf.math.add(beta, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), beta)))), beta)))), tf.math.subtract(grad, tf.math.add(beta, tf.math.negative(tf.math.subtract(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.multiply(tf.math.pow(tf.math.add(beta, beta), beta), tf.math.add(beta, alpha)))))))))), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [4, 4, 0, 4, 3, 2, 8, 3, 5, 0, 4, 5, 9, 1, 8, 6, 2, 4, 2, 5, 9, 2, 5, 3, 1, 2, 7, 7, 2, 6, 8, 7, 6, 2, 4, 7, 8, 1, 8, 7, 6, 1, 0], [2, 1, 1, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1, 3, 2, 1, 1, 0, 2, 2, 1, 0, 2, 2, 3, 1, 2, 3, 3, 2, 2, 2, 3], [71, 7, 25, 53, 26, 73, 46, 33, 24], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [5, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 20, 20, 13, 7, 2, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.pow(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.negative(alpha))), tf.math.add(alpha, alpha)))), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))), grad))), tf.math.pow(tf.math.square(tf.math.add(alpha, grad)), tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.multiply(grad, tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08638224750757217, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 0, 4, 0, 9, 0, 8, 2, 0, 4, 4, 5, 4, 1, 4, 6, 3, 3, 2, 5, 9, 2, 5, 3, 1, 2, 7, 7, 2, 6, 8, 7, 6, 2, 4, 7, 8, 1, 8, 7, 6, 1, 0], [0, 1, 1, 2, 1, 2, 2, 0, 2, 1, 0, 1, 1, 3, 2, 1, 1, 0, 2, 2, 1, 0, 2, 2, 3, 1, 2, 3, 3, 2, 2, 2, 3], [71, 7, 25, 53, 26, 73, 46, 33, 24], [1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [5, 4, 3], [78], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 15, 11, 4, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.pow(tf.math.add(alpha, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)), alpha), alpha)))), grad)))))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, beta))", "other_info": {"loss": [2.3127351802621363, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08149518072605133, 0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.033197675432478, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09666666388511658, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [4, 4, 5, 9, 0, 2, 8, 2, 8, 0, 4, 5, 4, 1, 4, 6, 3, 3, 2, 5, 9, 2, 5, 3, 1, 2, 7, 7, 2, 6, 8, 7, 6, 2, 4, 7, 8, 1, 8, 7, 6, 1, 0], [2, 1, 1, 0, 0, 2, 2, 0, 1, 1, 0, 1, 1, 3, 2, 1, 1, 0, 2, 2, 1, 0, 2, 2, 3, 1, 2, 3, 3, 2, 2, 2, 3], [71, 7, 25, 53, 26, 73, 46, 33, 24], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [4, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [3, 4, 3], [78], [1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 4, 2, 1, 3, 3, 2, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.pow(tf.math.square(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), grad), alpha), lambda shape,  alpha, beta, grad: tf.math.pow(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 4, 4, 9, 6, 0, 3, 2, 5, 2, 3, 5, 0, 4, 4, 6, 4, 3, 2, 5, 9, 2, 5, 3, 1, 2, 7, 7, 2, 6, 8, 7, 6, 2, 4, 7, 8, 1, 8, 7, 6, 1, 0], [2, 0, 1, 2, 0, 2, 2, 0, 1, 1, 0, 1, 1, 3, 2, 1, 1, 0, 2, 2, 1, 0, 2, 2, 3, 1, 2, 3, 3, 2, 2, 2, 3], [71, 7, 25, 53, 26, 73, 46, 33, 24], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [5, 4, 3], [78], [1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 30, 30, 18, 12, 5, 3, 3, 2, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.pow(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), grad), tf.math.divide_no_nan(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(tf.math.square(tf.math.add(tf.math.add(alpha, grad), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.square(tf.math.negative(grad)), tf.math.add(alpha, tf.math.pow(tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)), alpha))), alpha)), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))))))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2631749514126237.5, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.04966318979859352, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [2, 4, 4, 9, 0, 2, 8, 2, 5, 0, 4, 5, 4, 1, 4, 6, 3, 3, 2, 5, 9, 2, 5, 3, 1, 2, 7, 7, 2, 6, 8, 7, 6, 2, 4, 7, 8, 1, 8, 7, 6, 1, 0], [2, 1, 1, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1, 3, 2, 1, 1, 0, 2, 2, 1, 0, 2, 2, 3, 1, 2, 3, 3, 2, 2, 2, 3], [2, 7, 25, 53, 26, 73, 46, 33, 24], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [1, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [3, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [5, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 5, 3, 1, 3, 3, 2, 1, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), tf.math.negative(alpha))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3553694903716718, 133.71789030297526, 34268.56565554418, 8840908.759443931, 2226185872.382512, 572822705485.3984], "accuracy": [0.10408136248588562, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [3.571930067879813, 1106.5626395089287, 285145.1160714286, 73000681.14285715, 18688174372.57143, 4784172639378.286], "val_accuracy": [0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 4, 0, 9, 0, 0, 3, 2, 5, 2, 3, 5, 4, 6, 4, 6, 3, 3, 2, 5, 9, 2, 5, 3, 1, 2, 7, 7, 2, 6, 8, 7, 6, 2, 4, 7, 8, 1, 8, 7, 6, 1, 0], [2, 0, 1, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1, 3, 2, 1, 1, 0, 2, 2, 1, 0, 2, 2, 3, 1, 2, 3, 3, 2, 2, 2, 3], [71, 7, 25, 53, 26, 73, 46, 33, 24], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 4, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [5, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 4, 1, 1, 11, 11, 6, 5, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.pow(tf.math.add(beta, grad), alpha), tf.math.square(tf.math.add(tf.math.add(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [4, 2, 5, 9, 0, 2, 8, 2, 2, 0, 4, 5, 2, 1, 4, 6, 3, 3, 2, 5, 9, 2, 5, 3, 1, 2, 7, 7, 2, 6, 8, 7, 6, 2, 4, 7, 8, 1, 8, 7, 6, 1, 0], [2, 1, 1, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1, 3, 2, 1, 1, 0, 2, 2, 1, 0, 2, 2, 3, 1, 2, 3, 3, 2, 2, 2, 3], [71, 7, 25, 53, 26, 73, 46, 33, 24], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [8, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [46, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [2, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 4, 2, 1, 2, 2, 2, 0, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))), grad)), alpha), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.3028228687273278, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [8, 4, 4, 9, 0, 2, 8, 2, 5, 0, 4, 5, 4, 1, 4, 6, 3, 3, 2, 5, 9, 2, 5, 3, 1, 2, 7, 7, 2, 6, 8, 7, 6, 2, 4, 7, 8, 1, 8, 7, 6, 1, 0], [0, 1, 1, 2, 0, 2, 2, 0, 1, 1, 0, 1, 1, 3, 2, 1, 1, 0, 2, 2, 1, 0, 2, 2, 3, 1, 2, 3, 3, 2, 2, 2, 3], [37, 7, 25, 53, 26, 73, 46, 33, 24], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [5, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [5, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.06885714083909988, "mapping_values": [1, 2, 2, 1, 1, 1, 4, 4, 3, 1, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.square(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.302919952199601, 2.3022132645099234, 2.3002961459113873, 2.2995254660578546, 2.3009041612489334, 2.300802380732258, 2.3002081159209498, 2.2988198205952663, 2.299300293959584, 2.299347016884115, 2.2996570148236244, 2.2993407948866436, 2.298991451961269, 2.297991831761467], "accuracy": [0.08730682730674744, 0.09338264167308807, 0.09509972482919693, 0.09509972482919693, 0.1022322028875351, 0.09866596013307571, 0.10130762308835983, 0.1026284471154213, 0.09866596013307571, 0.1022322028875351, 0.10236428678035736, 0.1010434553027153, 0.09959053993225098, 0.10579843819141388], "val_loss": [1.9699448176792689, 1.969351087297712, 1.9689554486955916, 1.9687213897705078, 1.9686805861336845, 1.968729087284633, 1.9688100814819336, 1.9687952995300293, 1.9687690053667342, 1.968823024204799, 1.968930653163365, 1.9691314697265625, 1.969395296914237, 1.9696857588631767], "val_accuracy": [0.04333333298563957, 0.049666665494441986, 0.05833333358168602, 0.06666667014360428, 0.0729999989271164, 0.07699999958276749, 0.08233333379030228, 0.0860000029206276, 0.08900000154972076, 0.08866667002439499, 0.08500000089406967, 0.0833333358168602, 0.08566666394472122, 0.08366666734218597]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [4, 1, 5, 9, 0, 2, 8, 2, 8, 0, 4, 5, 4, 1, 4, 6, 3, 3, 2, 5, 9, 2, 5, 3, 1, 2, 7, 7, 2, 6, 8, 7, 6, 2, 4, 7, 8, 1, 8, 7, 6, 1, 0], [2, 1, 1, 0, 0, 2, 2, 0, 1, 1, 0, 1, 1, 3, 2, 1, 1, 0, 2, 2, 1, 0, 2, 2, 3, 1, 2, 3, 3, 2, 2, 2, 3], [71, 7, 25, 53, 26, 73, 46, 33, 24], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [2, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [46, 95, 54, 66], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [2, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.037142857909202576, "mapping_values": [1, 7, 7, 5, 2, 1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.subtract(tf.math.square(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.negative(tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.303115316464554, 2.3032015226205673, 2.3021614328272797, 2.3018291737535423, 2.3039382312433547, 2.3037767973652827], "accuracy": [0.08730682730674744, 0.09179764986038208, 0.09021265059709549, 0.0886276587843895, 0.09351472556591034, 0.09338264167308807], "val_loss": [1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [4, 4, 1, 4, 0, 2, 8, 4, 5, 0, 4, 5, 9, 1, 8, 6, 2, 4, 2, 5, 9, 2, 5, 3, 1, 2, 7, 7, 2, 6, 8, 7, 6, 2, 4, 7, 8, 1, 8, 7, 6, 1, 0], [2, 2, 1, 1, 0, 2, 2, 0, 1, 1, 0, 1, 1, 3, 2, 1, 1, 0, 2, 2, 1, 0, 2, 2, 3, 1, 2, 3, 3, 2, 2, 2, 3], [71, 7, 25, 53, 26, 73, 46, 33, 24], [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1], [3, 9, 5, 2, 2, 5, 1, 2, 3, 2, 7, 2, 7, 5, 2, 1, 4, 3, 9, 9, 3, 4, 5, 9, 6, 9], [2, 1, 3, 3, 3, 3, 1, 4, 3, 4, 1, 3, 3], [41, 95, 54, 66], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1], [6, 6, 0, 3, 5, 9, 8], [5, 4, 3], [78], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 0, 8, 8, 5, 0, 0, 4, 5, 8], [2, 2, 2, 0, 3, 0, 2], [84, 42, 44, 12, 41, 16, 52]], "fitness": -0.037142857909202576, "mapping_values": [1, 20, 20, 13, 7, 2, 3, 3, 2, 1, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.pow(grad, grad), tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.negative(alpha))), tf.math.add(alpha, alpha)))), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))))), grad)), tf.math.pow(tf.math.square(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.303115316464554, 2.3032015226205673, 2.3021614328272797, 2.3018291737535423, 2.3039382312433547, 2.3037767973652827], "accuracy": [0.08730682730674744, 0.09179764986038208, 0.09021265059709549, 0.0886276587843895, 0.09351472556591034, 0.09338264167308807], "val_loss": [1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]