[{"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [3, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], [4, 5, 1, 2, 5, 2, 0, 2, 2, 6, 7], [2, 4, 1, 3, 2, 2, 3, 4, 2, 4, 1, 3, 3], [52, 95, 54, 66], [1, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 9, 0, 2, 2, 1, 0, 0, 9, 0, 8], [1, 1, 0, 0, 3, 0, 2], [49, 63, 57, 12]], "fitness": -0.8174285888671875, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(beta, tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.negative(alpha))", "other_info": {"loss": [2.2955843325005136, 2.047161431927266, 1.6432087210584798, 1.6276909969486282, 1.0273168491350426, 0.8769175479078589, 0.7992110523045763, 0.7225595498286564, 0.695217030505935, 0.6844845996509532, 0.6315540217877756, 0.6211705354179263, 0.6054999405965199, 0.6073474163046099, 0.5831356215565164, 0.5722472843886398, 0.5415676595898289, 0.541276979731405, 0.5233371594578535, 0.509941684087317, 0.5283860425356436, 0.5035255851368973, 0.48417971023494827, 0.4823765740607472, 0.4731758893709204, 0.4687168737286669, 0.4568521219741525, 0.4469484749243102, 0.43474051571241884, 0.45399881735013037, 0.45042533702728155, 0.4349890566733472, 0.424904755506974, 0.4381375919086208, 0.40529508464183034, 0.40077108203018535, 0.38745779865028335, 0.40615173321295533, 0.3827112174115995, 0.3873827700499357], "accuracy": [0.2487121969461441, 0.3148857355117798, 0.4579315781593323, 0.43864747881889343, 0.6258090138435364, 0.6713775992393494, 0.7005679607391357, 0.7207766771316528, 0.7300224304199219, 0.7341170310974121, 0.7544577717781067, 0.7597411274909973, 0.7720248103141785, 0.7689869403839111, 0.7786290049552917, 0.7840443849563599, 0.7972526550292969, 0.7947431206703186, 0.8063663840293884, 0.802800178527832, 0.7975168228149414, 0.8127063512802124, 0.8156121969223022, 0.8186501264572144, 0.8181217908859253, 0.824329674243927, 0.8249900937080383, 0.8300092220306396, 0.8376700282096863, 0.826310932636261, 0.8285563588142395, 0.8383304476737976, 0.8358209133148193, 0.8310658931732178, 0.8485008478164673, 0.8491612672805786, 0.8516708612442017, 0.8449346423149109, 0.8558974862098694, 0.8488970994949341], "val_loss": [1.942004612513951, 1.3231678690229143, 0.9950956617082868, 0.8481517859867641, 0.8615289415631976, 0.6457559381212506, 0.5443012544087001, 0.5172132423945835, 0.5904838187353951, 0.4514295884541103, 0.5100979975291661, 0.4410381146839687, 0.43059190682002474, 0.4211920499801636, 0.40209645884377615, 0.46905132702418734, 0.4297395007950919, 0.4098250525338309, 0.43462079763412476, 0.40413730485098703, 0.4163992064339774, 0.37738151209695, 0.38277740137917654, 0.3904572640146528, 0.3886182904243469, 0.3612392970493862, 0.3552277513912746, 0.35410178559167044, 0.3606447236878531, 0.4204644901411874, 0.3459451709474836, 0.3513623816626413, 0.3424395067351205, 0.35428424392427715, 0.32944075550351826, 0.34714373520442415, 0.3854713439941406, 0.3258915628705706, 0.3490413171904428, 0.34021289008004324], "val_accuracy": [0.18966667354106903, 0.5956666469573975, 0.5523333549499512, 0.6769999861717224, 0.6439999938011169, 0.7070000171661377, 0.7673333287239075, 0.7786666750907898, 0.7303333282470703, 0.8009999990463257, 0.7446666955947876, 0.812333345413208, 0.8066666722297668, 0.8149999976158142, 0.8230000138282776, 0.8106666803359985, 0.8029999732971191, 0.828000009059906, 0.7893333435058594, 0.8296666741371155, 0.800000011920929, 0.8333333134651184, 0.82833331823349, 0.8263333439826965, 0.8296666741371155, 0.8453333377838135, 0.8529999852180481, 0.8566666841506958, 0.8533333539962769, 0.8246666789054871, 0.8583333492279053, 0.8543333411216736, 0.8560000061988831, 0.8529999852180481, 0.8669999837875366, 0.8503333330154419, 0.8403333425521851, 0.8663333058357239, 0.8553333282470703, 0.8576666712760925]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [0, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [4, 5, 1, 2, 5, 2, 0, 2, 2, 6, 7], [1, 4, 1, 3, 0, 2, 3, 0, 2, 4, 1, 3, 3, 3, 1, 5, 3, 2, 1, 3, 2, 0, 4, 3, 1, 2, 2, 2, 2, 1, 0], [52, 95, 54, 66], [1, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 9, 9, 2, 2, 1, 0, 0, 9, 0, 8], [1, 0, 0, 0, 3, 0, 2], [49, 63, 57, 12]], "fitness": -0.16657142341136932, "mapping_values": [1, 3, 3, 1, 2, 0, 6, 6, 3, 3, 0, 1, 0, 0, 0, 0, 3, 2, 1, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), grad)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.square(tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(beta, grad)))), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [798125311447.7063, 1.2051875048013722e+16, 1.0750157208058932e+24, 7.694356248568215e+31, NaN, NaN], "accuracy": [0.11253467202186584, 0.09549596905708313, 0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [4891119601956.571, 1.0632214415016685e+18, 1.0947997932568099e+26, 1.253922835544586e+34, NaN, NaN], "val_accuracy": [0.17933332920074463, 0.10000000149011612, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [4, 5, 1, 2, 9, 2, 2, 2, 2, 6, 7, 8, 7, 2, 9, 5, 6, 0, 5, 2, 8, 5, 4, 4, 6, 0, 5, 8, 6, 3, 1, 3, 9, 2, 5, 5], [3, 4, 3, 3, 0, 2, 3, 0, 2, 4, 1, 3, 1, 3, 1, 5, 3, 2, 1, 3, 2, 2, 4, 2, 1, 2, 2, 2, 2, 1, 0], [52, 41, 54, 66, 71, 44, 87], [0, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 9, 0, 2, 2, 1, 0, 0, 9, 0, 8], [1, 1, 0, 0, 3, 0, 2], [1, 63, 57, 12]], "fitness": -0.1120000034570694, "mapping_values": [1, 1, 1, 0, 1, 0, 6, 6, 3, 3, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.square(tf.math.add(beta, grad)), tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.negative(alpha))", "other_info": {"loss": [2.3029339666206603, 2.302637474774023, 2.3019826117129987, 2.303558900513433, 2.3028129384407765, 2.302753274529885, 2.3022890912228413, 2.300505244169788, 2.3011084554564163, 2.300768536819742, 2.30101088888027, 2.3012703649749877, 2.3012335366891628, 2.3006930614207413, 2.3014587698485385, 2.2992186586949113, 2.300146091127629, 2.2995587356684783, 2.3005381242678764, 2.2995983247413077, 2.299914113660577, 2.299560396001481, 2.2999122857008283, 2.2998744904514727, 2.3011182261149425, 2.299756552769665, 2.3001630874971877, 2.299102934423045, 2.3000219896752614, 2.2990870829728207, 2.299281138092724, 2.297627793043643, 2.299522671638431, 2.2994524627990884, 2.29935058667565, 2.298538407251552, 2.297936157102614, 2.2979732931502634, 2.297538649530427, 2.2980008876051303, 2.2972122807906463, 2.297531413616301, 2.297913043600709, 2.2981685798843037, 2.2969549459914145, 2.2964438975778445, 2.295732447688826, 2.2964053901588724, 2.295857759719323, 2.2984492176669606, 2.2976430313950282, 2.296405263879847, 2.295507065324956, 2.2960462425961516, 2.2954487359408833, 2.2965365756756246, 2.2955131888499807, 2.296316714444889, 2.29717279129245, 2.295413079341767, 2.296103839121002, 2.295839813895245, 2.293281781281368, 2.294893578515628, 2.295276540381608, 2.2950542350376537, 2.2956647686812826, 2.294858567167692, 2.29451058304872, 2.2936902070136793, 2.295182525426673, 2.2952781399369258, 2.29399773665486, 2.2925532306300305, 2.292506990714899, 2.2942353947571066, 2.293041704888546, 2.2937515829973343, 2.2926765978690606, 2.2928473886765226, 2.2932389583003174, 2.2931819960047872, 2.2920946668970776, 2.293305092641407, 2.2946003037610025, 2.292871796144801, 2.2934498717016187, 2.2926929880048244, 2.2937561025582975, 2.292268396730767, 2.29323019557515, 2.2912751919778267, 2.2912809055526386, 2.292207523847788, 2.2913641664472, 2.2915716057896947, 2.2905169322175465, 2.292910852043022, 2.290284052626993, 2.2912072982959395], "accuracy": [0.09417514503002167, 0.09166556596755981, 0.09351472556591034, 0.09272222965955734, 0.0882314071059227, 0.08928807079792023, 0.09113723784685135, 0.09179764986038208, 0.09470347315073013, 0.0948355570435524, 0.09760929644107819, 0.09391097724437714, 0.09642054885625839, 0.09338264167308807, 0.09192973375320435, 0.09694888442754745, 0.09721305221319199, 0.0956280529499054, 0.09668471664190292, 0.09760929644107819, 0.09192973375320435, 0.09576013684272766, 0.0952318087220192, 0.09628847241401672, 0.09576013684272766, 0.1002509593963623, 0.09536388516426086, 0.09391097724437714, 0.10117553919553757, 0.09694888442754745, 0.09893012791872025, 0.10487385839223862, 0.1026284471154213, 0.09668471664190292, 0.09787346422672272, 0.10051512718200684, 0.09681680053472519, 0.09945846349000931, 0.10091137140989304, 0.1006472036242485, 0.10579843819141388, 0.10117553919553757, 0.10117553919553757, 0.10038304328918457, 0.10619468986988068, 0.10051512718200684, 0.11094967275857925, 0.1026284471154213, 0.10606260597705841, 0.09853387624025345, 0.10328886657953262, 0.10566636174917221, 0.10949676483869553, 0.10751552134752274, 0.108440101146698, 0.10857218503952026, 0.10500594228506088, 0.10540219396352768, 0.10157178342342377, 0.10421344637870789, 0.11174217611551285, 0.11200633645057678, 0.11359133571386337, 0.10540219396352768, 0.10289261490106583, 0.11081759631633759, 0.10910051316022873, 0.10751552134752274, 0.11094967275857925, 0.11478008329868317, 0.1088363528251648, 0.109232597053051, 0.11081759631633759, 0.1154404953122139, 0.1138555034995079, 0.11213842034339905, 0.11530841141939163, 0.12019548565149307, 0.1146479994058609, 0.10685510188341141, 0.11068551242351532, 0.11702549457550049, 0.11174217611551285, 0.11319508403539658, 0.11068551242351532, 0.11200633645057678, 0.11557257920503616, 0.11610091477632523, 0.11293092370033264, 0.11689341068267822, 0.10830801725387573, 0.1258750557899475, 0.11993131786584854, 0.11927089840173721, 0.12191256135702133, 0.11570466309785843, 0.12217672914266586, 0.11332716792821884, 0.12019548565149307, 0.11953506618738174], "val_loss": [1.9702776500156947, 1.9701697485787528, 1.9700608253479004, 1.9699531282697404, 1.9698433876037598, 1.969733783176967, 1.9696246555873327, 1.96951505116054, 1.9694066047668457, 1.9692980902535575, 1.9691881452287947, 1.969078745160784, 1.9689698219299316, 1.968860489981515, 1.9687502043587821, 1.9686421666826521, 1.9685330390930176, 1.968423775264195, 1.9683151245117188, 1.9682062694004603, 1.9680986404418945, 1.96798917225429, 1.9678803852626257, 1.9677722794669015, 1.967665672302246, 1.9675570215497697, 1.9674483026776994, 1.967339038848877, 1.9672314098903112, 1.967123235974993, 1.967015198298863, 1.9669067519051688, 1.9667978286743164, 1.9666890416826521, 1.96658114024571, 1.9664735794067383, 1.9663658142089844, 1.9662578446524483, 1.9661501475742884, 1.9660421098981584, 1.9659344809395927, 1.965827328818185, 1.9657198360988073, 1.9656120709010534, 1.9655042375837053, 1.9653960636683874, 1.965289524623326, 1.9651814188276018, 1.965073721749442, 1.964965888432094, 1.9648585319519043, 1.964751924787249, 1.964644227709089, 1.964536530630929, 1.9644296509878976, 1.9643218857901437, 1.964214665549142, 1.964108875819615, 1.9640015874590193, 1.9638936860220773, 1.9637867382594518, 1.9636791093008858, 1.9635702541896276, 1.9634637832641602, 1.9633574485778809, 1.9632510457720076, 1.9631430762154716, 1.9630366052900041, 1.9629278864179338, 1.9628211430140905, 1.9627154214041573, 1.9626082011631556, 1.9625022070748466, 1.9623943737574987, 1.9622883796691895, 1.962181227547782, 1.9620744841439384, 1.961968013218471, 1.9618616785321916, 1.961754594530378, 1.961648872920445, 1.9615417889186315, 1.9614355223519462, 1.9613285064697266, 1.961221694946289, 1.9611143384660994, 1.9610064370291573, 1.9608988761901855, 1.9607931545802526, 1.9606875692095076, 1.9605798721313477, 1.9604736736842565, 1.9603665215628487, 1.9602587563650948, 1.9601518086024694, 1.9600446564810616, 1.9599377087184362, 1.9598308290754045, 1.9597232682364327, 1.9596163204738073], "val_accuracy": [0.036666665226221085, 0.036666665226221085, 0.03799999877810478, 0.038333334028720856, 0.03966666758060455, 0.04100000113248825, 0.04233333468437195, 0.04233333468437195, 0.04333333298563957, 0.044333335012197495, 0.04466666653752327, 0.04500000178813934, 0.04600000008940697, 0.04699999839067459, 0.047333333641290665, 0.04800000041723251, 0.04899999871850014, 0.05000000074505806, 0.050999999046325684, 0.05166666582226753, 0.052666667848825455, 0.052666667848825455, 0.05400000140070915, 0.05666666850447655, 0.0573333315551281, 0.057999998331069946, 0.058666665107011795, 0.06066666543483734, 0.06066666543483734, 0.06133333221077919, 0.06233333423733711, 0.06333333253860474, 0.06400000303983688, 0.06533333659172058, 0.06533333659172058, 0.06566666811704636, 0.06733333319425583, 0.06800000369548798, 0.06833333522081375, 0.06866666674613953, 0.0689999982714653, 0.06966666877269745, 0.070333331823349, 0.0716666653752327, 0.07266666740179062, 0.07366666942834854, 0.07500000298023224, 0.07633333653211594, 0.07699999958276749, 0.07766667008399963, 0.07900000363588333, 0.08033332973718643, 0.08166666328907013, 0.08266666531562805, 0.08299999684095383, 0.0833333358168602, 0.08399999886751175, 0.0846666693687439, 0.0860000029206276, 0.08666666597127914, 0.08699999749660492, 0.08799999952316284, 0.08900000154972076, 0.09000000357627869, 0.09033333510160446, 0.09166666865348816, 0.09200000017881393, 0.09266666322946548, 0.09333333373069763, 0.0949999988079071, 0.0949999988079071, 0.0949999988079071, 0.09566666930913925, 0.09600000083446503, 0.0963333323597908, 0.09733333438634872, 0.09866666793823242, 0.10000000149011612, 0.10100000351667404, 0.10199999809265137, 0.10333333164453506, 0.10433333367109299, 0.10466666519641876, 0.10533333569765091, 0.10633333027362823, 0.10733333230018616, 0.1080000028014183, 0.1080000028014183, 0.109333336353302, 0.1106666699051857, 0.11133333295583725, 0.11233333498239517, 0.1146666631102562, 0.11599999666213989, 0.11733333021402359, 0.11866666376590729, 0.11933333426713943, 0.11933333426713943, 0.12099999934434891, 0.1223333328962326]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [1, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], [4, 5, 1, 2, 5, 2, 0, 2, 2, 6, 7], [0, 4, 1, 3, 2, 2, 3, 4, 2, 4, 1, 3, 3], [52, 95, 54, 66], [1, 1, 1, 1, 1, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 9, 7, 2, 2, 1, 0, 0, 9, 0, 8], [0, 1, 0, 0, 3, 0, 2], [49, 84, 91, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), alpha))", "other_info": {"loss": [2.3023221928603173, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [3, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], [4, 5, 1, 2, 5, 2, 0, 2, 2, 6, 7], [1, 4, 1, 3, 0, 2, 3, 0, 2, 4, 1, 3, 3, 3, 1, 5, 3, 2, 1, 3, 2, 0, 4, 3, 1, 2, 2, 2, 2, 1, 0], [52, 95, 54, 66], [1, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 9, 0, 2, 2, 1, 0, 0, 9, 0, 8], [1, 1, 0, 0, 3, 0, 2], [49, 63, 57, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 3, 2, 1, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07515519857406616, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], [3, 5, 1, 2, 5, 2, 0, 2, 2, 6, 7, 2, 2, 3, 7, 2, 6, 7, 9, 8, 5, 1, 7, 6, 8, 4, 8, 3, 2, 7, 7, 9, 7, 0, 1, 1, 1, 1, 7, 6, 0, 0, 4, 6, 9], [4, 4, 1, 3, 2, 2, 3, 4, 2, 4, 1, 3, 3], [52, 41, 54, 66, 71, 44, 87], [0, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [6, 6, 0, 2, 3, 4, 3, 0, 9, 0, 8], [1, 0, 0, 0, 3, 0, 2], [49, 99, 0, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07885351777076721, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [3, 5, 1, 0, 5, 2, 0, 2, 2, 6, 7, 2, 5, 3, 7, 2, 6, 8, 9, 8, 5, 8, 7, 6, 8, 4, 8, 3, 2, 7, 7, 9, 7, 0, 1, 1, 1, 1, 2, 6, 0, 0, 4, 6, 9], [1, 0, 3, 3, 0, 2, 3, 0, 2, 4, 1, 3, 3, 3, 0, 5, 1, 2, 1, 3, 2, 0, 4, 3, 1, 3, 2, 2, 2, 1, 0], [52, 41, 54, 66, 71, 44, 87], [0, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [4, 7], [71], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 2, 5, 2, 2, 1, 0, 0, 9, 0, 8], [2, 1, 0, 0, 3, 0, 2], [40, 63, 57, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 6, 6, 3, 3, 1, 1, 1, 0, 1, 0, 13, 7, 6, 3], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.square(alpha)), tf.math.subtract(tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.add(tf.math.square(beta), alpha), tf.math.add(tf.math.add(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), sigma)), tf.math.negative(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06670188903808594, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [0, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [3, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], [6, 5, 1, 2, 5, 2, 0, 2, 2, 6, 7], [2, 4, 1, 3, 2, 2, 3, 4, 2, 4, 1, 3, 3], [52, 95, 54, 66], [0, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 9, 0, 2, 2, 1, 0, 0, 9, 0, 8], [1, 1, 0, 0, 3, 0, 2], [49, 63, 57, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.negative(alpha))", "other_info": {"loss": [23521920747.669155, 1.9008788847653763e+18, 2.060183952603328e+26, 1.9285335850898834e+34, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09655263274908066, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1886458141549.7144, 1.9356457627323443e+20, 1.9893401242933457e+28, Infinity, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [3, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], [4, 5, 1, 2, 5, 2, 0, 2, 2, 6, 7], [2, 5, 1, 3, 2, 2, 3, 4, 2, 4, 1, 3, 3], [52, 95, 54, 66], [1, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 9, 0, 2, 2, 1, 0, 0, 9, 0, 8], [1, 1, 0, 0, 3, 0, 2], [49, 63, 57, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07885351777076721, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [0, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [4, 5, 1, 2, 5, 2, 0, 2, 2, 6, 7, 0, 0, 8, 8, 8, 1, 3, 3, 5, 4, 5, 7, 7, 4, 4, 7, 2, 4, 2, 2, 1, 1, 4, 3, 5, 0, 9], [3, 4, 3, 3, 0, 2, 3, 0, 2, 4, 1, 3, 1, 3, 1, 5, 3, 2, 1, 3, 2, 2, 4, 2, 1, 2, 2, 2, 2, 1, 0], [52, 95, 54, 66], [1, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 9, 0, 2, 2, 1, 0, 0, 9, 0, 8], [1, 1, 0, 0, 3, 0, 2], [40, 63, 57, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 63, 63, 38, 25, 3, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 64, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(grad)))), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, grad))))))))), tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.pow(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.pow(tf.math.add(grad, alpha), tf.math.add(grad, tf.math.subtract(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.multiply(tf.math.add(beta, beta), alpha), tf.math.add(beta, grad)))), beta)))))))), beta)), tf.math.add(beta, grad))), beta)))))), tf.math.square(alpha))))), tf.math.negative(tf.math.add(beta, tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.negative(alpha))", "other_info": {"loss": [3594835590.6288705, 3.046557757029613e+17, 3.1150518622606896e+25, 2.692224393565976e+33, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09655263274908066, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [292576381220.5714, 2.9717264767410168e+19, 3.055346912288436e+27, Infinity, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [3, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], [2, 5, 1, 2, 6, 2, 0, 2, 2, 6, 7, 2, 1, 2, 8, 8, 3, 8, 2, 6, 6, 1, 4, 1, 7, 3, 4, 3, 4, 4, 6, 9, 3, 6, 9, 9, 4, 8, 7, 0, 0, 6, 6, 1, 6], [1, 4, 1, 3, 0, 2, 3, 0, 2, 4, 1, 3, 3, 3, 1, 5, 3, 2, 1, 3, 2, 0, 4, 3, 1, 2, 2, 2, 2, 1, 0], [52, 41, 54, 66, 71, 44, 87], [1, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 9, 0, 2, 2, 1, 0, 0, 9, 0, 8], [1, 1, 0, 0, 3, 0, 2], [40, 63, 57, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 11, 7, 4, 3], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.subtract(alpha, tf.math.negative(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [41378.15122463599, 2.400304157373975, 2.3810435679169566, 2.3320275674076, 2.391386229805171, 2.3221135177254566], "accuracy": [0.09721305221319199, 0.09760929644107819, 0.09774138033390045, 0.09826971590518951, 0.09998679161071777, 0.09628847241401672], "val_loss": [2.0308496611458913, 2.0663178988865445, 2.0013294219970703, 2.028097084590367, 2.0124312128339494, 2.011391912187849], "val_accuracy": [0.10300000011920929, 0.10066666454076767, 0.0963333323597908, 0.10100000351667404, 0.10100000351667404, 0.10000000149011612]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [3, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [3, 5, 3, 2, 5, 2, 0, 2, 2, 6, 7, 2, 2, 3, 7, 4, 2, 7, 9, 8, 5, 1, 7, 0, 8, 4, 0, 3, 2, 7, 7, 9, 7, 0, 1, 1, 9, 1, 7, 6, 0, 0, 2, 6, 9], [1, 4, 1, 3, 0, 2, 3, 0, 2, 4, 1, 3, 3, 3, 1, 5, 3, 2, 1, 1, 2, 0, 4, 3, 3, 2, 2, 3, 2, 1, 0], [52, 41, 54, 66, 71, 44, 87], [0, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [4, 7], [71], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 9, 0, 2, 2, 1, 0, 0, 9, 0, 8], [1, 1, 0, 0, 3, 0, 2], [49, 63, 57, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 58, 58, 35, 23, 5, 1, 1, 0, 1, 0, 3, 2, 1, 1], "tree_depth": 67, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, alpha), grad), tf.math.add(beta, alpha)))), tf.math.square(tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.math.add(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, grad)), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.add(beta, beta), tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), alpha)))), grad))))))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(grad, alpha)), grad)))))), tf.math.add(beta, grad)))), tf.math.add(tf.math.add(beta, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), beta)))), tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, alpha))), tf.math.negative(tf.math.add(beta, beta))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07660810649394989, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [0, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [1, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 5, 1, 2, 6, 2, 0, 2, 2, 6, 7, 2, 1, 2, 8, 8, 3, 8, 2, 6, 6, 1, 4, 1, 7, 3, 4, 3, 4, 4, 6, 9, 3, 6, 9, 9, 4, 8, 7, 0, 0, 6, 6, 1, 6], [5, 4, 2, 3, 2, 2, 3, 4, 2, 4, 1, 3, 3], [52, 95, 54, 66], [1, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [6, 9, 0, 2, 2, 1, 0, 0, 9, 0, 8], [0, 1, 0, 0, 3, 0, 2], [5, 59, 57, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 4, 4, 2, 2, 0, 1, 0, 0, 0, 0, 4, 3, 1, 2], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3556047356942735, 2.909823609538413, 4.5473492618848494, 7.334425995866652, 11.042091006852255, 15.922562035492714, 21.940737792702713], "accuracy": [0.09470347315073013, 0.10328886657953262, 0.09919429570436478, 0.0940430611371994, 0.10210011899471283, 0.10077928751707077, 0.09615638852119446], "val_loss": [2.077031135559082, 2.6536081859043668, 3.9531759534563338, 5.961093493870327, 8.636980056762695, 12.004897253853935, 16.109991346086776], "val_accuracy": [0.09799999743700027, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [3, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], [2, 5, 1, 2, 6, 2, 0, 2, 3, 6, 7, 2, 6, 2, 8, 8, 3, 8, 2, 6, 6, 2, 4, 1, 5, 3, 4, 3, 4, 4, 6, 9, 3, 6, 9, 9, 0, 0, 7, 0, 0, 6, 6, 5, 6, 6, 9], [0, 3, 2, 3, 2, 0, 3, 4, 2, 4, 1, 3, 3, 4, 3, 1, 5, 2, 4, 5, 3, 0, 1, 5, 3, 4, 5, 0, 0, 5, 4, 1], [52, 66, 54, 66, 71, 39, 87, 0], [1, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 9, 2, 2, 2, 1, 0, 0, 9, 0, 8], [2, 1, 0, 0, 3, 0, 2], [49, 63, 57, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 61, 61, 36, 25, 6, 1, 0, 0, 0, 0, 3, 2, 1, 1], "tree_depth": 73, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.pow(grad, tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.multiply(beta, tf.math.pow(grad, tf.math.add(beta, alpha)))), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.pow(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, grad))))))))), tf.math.add(beta, tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32))))), beta))))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad)))))), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)))))), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha)))), grad), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [0, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], [4, 5, 1, 2, 5, 2, 0, 2, 2, 6, 7], [2, 4, 1, 3, 2, 2, 3, 4, 2, 4, 1, 3, 3], [52, 95, 54, 66], [1, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 9, 0, 2, 2, 1, 0, 0, 9, 0, 8], [1, 1, 0, 0, 3, 0, 2], [49, 63, 57, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 4, 4, 2, 2, 0, 1, 0, 0, 0, 0, 3, 2, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.square(tf.math.add(beta, beta)), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [132310322.37585449, 2478995817.3958526, 11767797319.345924, 33117938262.359, 70345597092.46758, 129761949843.96672], "accuracy": [0.10276053100824356, 0.10157178342342377, 0.09893012791872025, 0.0948355570435524, 0.10276053100824356, 0.10077928751707077], "val_loss": [496852096.0, 3972302116.571429, 13403680182.857143, 31768387584.0, 62043923602.28571, 107207643721.14285], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [3, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], [4, 5, 1, 2, 5, 2, 0, 2, 2, 6, 7], [2, 4, 1, 3, 2, 2, 3, 4, 2, 4, 1, 3, 3], [52, 95, 54, 66], [0, 1, 1, 1, 1, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 9, 0, 2, 2, 1, 0, 0, 9, 0, 8], [1, 1, 0, 0, 3, 0, 2], [49, 84, 91, 12]], "fitness": -0.06942857056856155, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 3, 1, 2, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, alpha)", "other_info": {"loss": [2.302598217238745, 2.301585388315856, 2.300356554522128, 2.3016162546571253, 2.300435526086638, 2.300451241023253, 2.2999745194371255, 2.2985736123322966, 2.29965900093132, 2.299346991785765, 2.298964358119287, 2.299552967078839, 2.2994105251883123, 2.2998216611330364], "accuracy": [0.09457138925790787, 0.0948355570435524, 0.09853387624025345, 0.09708096832036972, 0.09708096832036972, 0.09760929644107819, 0.1010434553027153, 0.1014397069811821, 0.1026284471154213, 0.10011887550354004, 0.10302469879388809, 0.09959053993225098, 0.09972262382507324, 0.0940430611371994], "val_loss": [1.969780513218471, 1.9693790163312639, 1.9691369192940849, 1.9689978872026717, 1.9688850811549596, 1.968949658530099, 1.9689208439418249, 1.9689650535583496, 1.9690134865897042, 1.9690236364092146, 1.96908358165196, 1.9692925725664412, 1.9696273803710938, 1.9700066702706474], "val_accuracy": [0.047333333641290665, 0.0533333346247673, 0.061000000685453415, 0.06366666406393051, 0.06733333319425583, 0.0716666653752327, 0.07599999755620956, 0.07966666668653488, 0.08299999684095383, 0.08166666328907013, 0.08033332973718643, 0.07699999958276749, 0.07699999958276749, 0.07400000095367432]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [0, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [1, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], [1, 5, 1, 2, 5, 2, 0, 2, 2, 6, 7], [2, 4, 1, 3, 2, 2, 3, 4, 2, 4, 1, 3, 3], [52, 95, 54, 66], [1, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [6, 9, 1, 2, 2, 1, 0, 0, 9, 0, 8], [1, 1, 0, 0, 3, 0, 2], [49, 63, 57, 12]], "fitness": -0.037142857909202576, "mapping_values": [1, 3, 3, 1, 2, 0, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3029806445445113, 2.3027987642972194, 2.3022612660646975, 2.3039526231158853, 2.3033298824473047, 2.3033853466516128], "accuracy": [0.0940430611371994, 0.09113723784685135, 0.09298639744520187, 0.09192973375320435, 0.08770307898521423, 0.0878351628780365], "val_loss": [1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [3, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], [3, 5, 1, 2, 5, 2, 0, 2, 2, 6, 7, 2, 2, 3, 7, 2, 6, 7, 9, 8, 5, 1, 7, 6, 8, 4, 8, 3, 2, 7, 7, 9, 7, 0, 1, 1, 1, 1, 7, 6, 0, 0, 4, 6, 9], [1, 4, 1, 3, 0, 2, 3, 0, 2, 4, 1, 3, 3, 3, 1, 5, 3, 2, 1, 3, 2, 0, 4, 3, 1, 2, 2, 2, 2, 1, 0], [52, 41, 54, 66, 71, 44, 87], [1, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [6, 9, 5, 2, 2, 1, 0, 0, 9, 0, 8], [3, 3, 3, 0, 3, 0, 2], [49, 63, 57, 12]], "fitness": -0.037142857909202576, "mapping_values": [1, 1, 1, 0, 1, 0, 4, 4, 2, 2, 0, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.square(sigma))", "other_info": {"loss": [2.3029806445445113, 2.3027987642972194, 2.3022612660646975, 2.3039526231158853, 2.3033298824473047, 2.3033853466516128], "accuracy": [0.0940430611371994, 0.09113723784685135, 0.09298639744520187, 0.09192973375320435, 0.08770307898521423, 0.0878351628780365], "val_loss": [1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [1, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], [4, 5, 1, 2, 5, 2, 0, 2, 2, 6, 7], [1, 4, 1, 3, 0, 2, 3, 0, 2, 4, 1, 3, 3, 3, 1, 5, 3, 2, 1, 3, 2, 0, 4, 3, 1, 2, 2, 2, 2, 1, 0], [52, 95, 54, 66], [1, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 9, 0, 2, 2, 1, 0, 0, 9, 0, 8], [1, 1, 0, 0, 3, 0, 2], [5, 63, 57, 12]], "fitness": -0.037142857909202576, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32), tf.math.negative(alpha))", "other_info": {"loss": [2.3029806445445113, 2.3027987642972194, 2.3022612660646975, 2.3039526231158853, 2.3033298824473047, 2.3033853466516128], "accuracy": [0.0940430611371994, 0.09113723784685135, 0.09298639744520187, 0.09192973375320435, 0.08770307898521423, 0.0878351628780365], "val_loss": [1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [0, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [1, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0], [0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [3, 6, 0, 2, 5, 2, 0, 2, 2, 6, 7, 7, 3, 2, 0, 7, 7, 3, 1, 6, 8, 9, 5, 0, 0, 5, 4, 7, 9, 3, 8, 8, 6, 0], [1, 4, 1, 3, 0, 2, 3, 0, 2, 4, 1, 3, 3, 3, 1, 5, 3, 2, 1, 3, 2, 0, 4, 3, 1, 2, 2, 2, 2, 1, 0], [52, 95, 54, 66], [0, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 9, 0, 2, 2, 1, 0, 0, 9, 0, 8], [1, 1, 0, 0, 3, 0, 2], [49, 63, 57, 12]], "fitness": -0.037142857909202576, "mapping_values": [1, 3, 3, 1, 2, 0, 6, 6, 3, 3, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.negative(grad))), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.negative(alpha))", "other_info": {"loss": [2.3029806445445113, 2.3027987642972194, 2.3022612660646975, 2.3039526231158853, 2.3033298824473047, 2.3033853466516128], "accuracy": [0.0940430611371994, 0.09113723784685135, 0.09298639744520187, 0.09192973375320435, 0.08770307898521423, 0.0878351628780365], "val_loss": [1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]