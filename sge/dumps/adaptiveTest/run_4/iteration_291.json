[{"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], [4, 5, 1, 2, 5, 2, 0, 2, 2, 6, 7], [2, 4, 1, 3, 2, 2, 3, 4, 2, 4, 1, 3, 3], [52, 95, 54, 66], [1, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 9, 0, 2, 2, 1, 0, 0, 9, 0, 8], [1, 1, 0, 0, 3, 0, 2], [49, 63, 57, 12]], "fitness": -0.8045714497566223, "mapping_values": [1, 1, 1, 0, 1, 0, 4, 4, 2, 2, 0, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.square(tf.math.add(beta, beta)), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.negative(alpha))", "other_info": {"loss": [2.095737053969785, 1.9146501719754812, 1.6893691372295112, 1.3102685154830587, 1.000384595494591, 0.8353473488224212, 0.7649667231225067, 0.7446747294994567, 0.6832277983911222, 0.6419336968062812, 0.6412090176147887, 0.6109221444437296, 0.5905859031854855, 0.5786305188880763, 0.5757453011216237, 0.5470811109091895, 0.5340585320806144, 0.5248287943344484, 0.5151630251902977, 0.5111501457952253, 0.4865971119404469, 0.4758438786275005, 0.4686184112366873, 0.4684085083943096, 0.4561820622912928, 0.46541001606674054, 0.4360661089475428, 0.4297614638768545, 0.44581240896598584, 0.4114882640315242, 0.41534185957883435, 0.4035821587237007, 0.386582944068328, 0.38940930590496053, 0.4051936109776762, 0.3917613425597759, 0.3723344746172593], "accuracy": [0.2843745946884155, 0.33866068720817566, 0.450931191444397, 0.5234447121620178, 0.6254127621650696, 0.6782459616661072, 0.7016246318817139, 0.7147008180618286, 0.7337207794189453, 0.7515519857406616, 0.7486461400985718, 0.7648923397064209, 0.7732135653495789, 0.7837802171707153, 0.772288978099823, 0.7932901978492737, 0.8014793395996094, 0.8020076751708984, 0.7991018295288086, 0.8041210174560547, 0.8214238286018372, 0.8169330358505249, 0.8157442808151245, 0.822348415851593, 0.8248580098152161, 0.8185180425643921, 0.8343679904937744, 0.8388587832450867, 0.8318583965301514, 0.8481045961380005, 0.8389908671379089, 0.8477083444595337, 0.8560295701026917, 0.8532558679580688, 0.8454629778862, 0.8502179384231567, 0.8555012345314026], "val_loss": [1.8489992277962821, 1.5682294709341866, 0.925523008619036, 0.7371797561645508, 0.6050690071923392, 0.5786918572017125, 0.5760180950164795, 0.5229877744402204, 0.4963819980621338, 0.5021587269646781, 0.4945613997323172, 0.437720673424857, 0.47365362303597586, 0.522184065410069, 0.42307011570249287, 0.42561793327331543, 0.41829018933432444, 0.416933468409947, 0.4392669711794172, 0.3940356118338449, 0.37691931213651386, 0.4129471778869629, 0.3816852739879063, 0.3610167588506426, 0.38263373715536936, 0.3609995927129473, 0.3709932565689087, 0.4283025435038975, 0.3430349486214774, 0.369323057787759, 0.38296832357134136, 0.32370227575302124, 0.3870950766972133, 0.421002311365945, 0.340144864150456, 0.34255318130765644, 0.3711964062282017], "val_accuracy": [0.2706666588783264, 0.44566667079925537, 0.5946666598320007, 0.6663333177566528, 0.7260000109672546, 0.7416666746139526, 0.7263333201408386, 0.7516666650772095, 0.7826666831970215, 0.7606666684150696, 0.7573333382606506, 0.8169999718666077, 0.7933333516120911, 0.7536666393280029, 0.8196666836738586, 0.812333345413208, 0.8176666498184204, 0.809333324432373, 0.8140000104904175, 0.8289999961853027, 0.8399999737739563, 0.8113333582878113, 0.843666672706604, 0.8566666841506958, 0.8230000138282776, 0.8450000286102295, 0.8446666598320007, 0.8130000233650208, 0.8650000095367432, 0.8460000157356262, 0.8276666402816772, 0.8703333139419556, 0.8339999914169312, 0.8043333292007446, 0.862666666507721, 0.8539999723434448, 0.8333333134651184]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1], [4, 2, 1, 2, 5, 6, 0, 2, 2, 6, 0, 0, 2, 6, 4, 2, 1, 2, 7, 2, 0, 3, 7, 7, 9, 0, 7, 8, 3, 5, 5, 3, 5, 6, 2, 2, 6, 5, 0, 8, 1, 5, 8, 2, 8, 1, 2, 2, 0, 7, 6, 8, 0, 5, 5, 8, 0, 4, 3, 5, 0, 2, 4, 2, 0, 3, 5, 4, 5, 8], [2, 4, 3, 3, 2, 2, 3, 4, 2, 3, 1, 3, 3, 1, 1, 2, 2, 2, 2, 0, 3, 5, 4, 2, 3, 2, 3, 5, 4, 2, 0, 5, 1, 5, 4, 4, 4, 5], [52, 41, 54, 66, 71, 44, 87], [1, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 9, 0, 2, 2, 1, 0, 0, 9, 0, 8], [1, 1, 0, 3, 3, 0, 2], [94, 63, 6, 12]], "fitness": -0.4328571557998657, "mapping_values": [1, 1, 1, 0, 1, 0, 102, 102, 64, 38, 3, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 55, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.add(tf.math.add(beta, beta), tf.math.add(tf.math.add(beta, grad), grad))), tf.math.add(beta, tf.math.divide_no_nan(grad, beta)))))), tf.math.add(beta, tf.math.negative(tf.math.negative(tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, grad)))))))), tf.math.add(beta, tf.math.pow(beta, tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), alpha)))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.negative(tf.math.multiply(grad, tf.math.add(beta, tf.math.add(tf.math.add(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(alpha)), tf.math.add(beta, alpha)))))), tf.math.add(beta, tf.math.multiply(tf.math.square(beta), tf.math.square(tf.math.multiply(tf.math.add(beta, beta), tf.math.square(tf.math.add(beta, beta)))))))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.square(tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.sqrt(grad)), grad)))), beta))))))))), tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.square(tf.math.add(beta, grad))))), grad)))))), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.square(beta)))))))), tf.math.add(beta, tf.math.sqrt(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32))))), tf.math.negative(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, alpha))))))), tf.math.add(beta, tf.math.multiply(grad, tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad))))))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.negative(alpha))", "other_info": {"loss": [2.2111799834568457, 2.6798018036485742, 2.3022547794481105, 2.3300979946425184, 2.303915409663287, 2.219291889656489], "accuracy": [0.2386738806962967, 0.13274335861206055, 0.11293092370033264, 0.14872540533542633, 0.11213842034339905, 0.18702945113182068], "val_loss": [1.6038332326071603, 1.9739525658743722, 1.9635627610342843, 1.976438249860491, 1.969475201198033, 1.6354368414197649], "val_accuracy": [0.42100000381469727, 0.10366666316986084, 0.0963333323597908, 0.10100000351667404, 0.10266666859388351, 0.2996666729450226]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [3, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], [4, 5, 1, 2, 5, 2, 0, 2, 2, 6, 7], [2, 3, 1, 3, 2, 2, 3, 4, 2, 4, 1, 3, 3], [52, 95, 54, 66], [0, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 9, 0, 2, 2, 1, 0, 0, 9, 0, 8], [1, 1, 0, 0, 3, 0, 2], [49, 63, 57, 12]], "fitness": -0.28857141733169556, "mapping_values": [1, 1, 1, 0, 1, 0, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(beta, tf.math.add(beta, tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.negative(alpha))", "other_info": {"loss": [2.6382155540581187, 3.7240068190101905, 2.481510245615796, 2.3452881336716014, 2.4136524979527505, 2.359185636193131], "accuracy": [0.2635054886341095, 0.13313961029052734, 0.10011887550354004, 0.09985470771789551, 0.09998679161071777, 0.10011887550354004], "val_loss": [2.091531685420445, 2.0714268684387207, 2.0291174479893277, 2.071426119123186, 1.9956695011683874, 2.0895921843392506], "val_accuracy": [0.2666666805744171, 0.10300000011920929, 0.10000000149011612, 0.09733333438634872, 0.10066666454076767, 0.10300000011920929]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], [4, 4, 1, 2, 5, 2, 0, 2, 2, 6, 7], [2, 5, 1, 3, 2, 0, 2, 4, 2, 4, 1, 3, 3, 3, 0, 3, 4, 2, 5, 3, 1, 4, 2, 2, 2, 1, 0, 2, 4, 1, 2, 3, 4, 1, 2, 3, 4, 4, 3, 4], [52, 95, 54, 66], [0, 1, 1, 1, 1, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 1], [9, 3], [7, 7], [71], [0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [6, 9, 0, 7, 8, 1, 7, 0, 9, 0, 8], [1, 2, 0, 0, 3, 0, 2], [94, 63, 57, 12]], "fitness": -0.13171428442001343, "mapping_values": [1, 1, 1, 0, 1, 0, 15, 15, 8, 7, 1, 1, 1, 1, 0, 1, 3, 2, 1, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(beta, tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.square(alpha))))), tf.math.add(beta, grad))), tf.math.add(tf.math.add(beta, tf.math.negative(beta)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), beta))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), alpha)", "other_info": {"loss": [9.349362053826539e+24, 1.086269397037917e+25, 1.078808366742215e+25, 1.0756279964222174e+25, 1.058207165029363e+25, 1.0976919682153408e+25], "accuracy": [0.10593052208423615, 0.11227050423622131, 0.11147800832986832, 0.11161009222269058, 0.1138555034995079, 0.11081759631633759], "val_loss": [5.86478849603711e+24, 5.86478849603711e+24, 5.86478849603711e+24, 5.86478849603711e+24, 5.86478849603711e+24, 5.86478849603711e+24], "val_accuracy": [0.13066667318344116, 0.13066667318344116, 0.13066667318344116, 0.13066667318344116, 0.13066667318344116, 0.13066667318344116]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [0, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [0, 3, 1, 0, 2, 0, 2, 2], [96, 12, 93], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], [2, 0, 1, 4, 0, 2, 0, 2, 2, 6, 7], [2, 4, 1, 3, 2, 2, 3, 4, 2, 4, 1, 3, 3], [52, 95, 54, 66], [1, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 9, 0, 2, 2, 1, 0, 0, 9, 0, 8], [1, 1, 0, 0, 3, 0, 2], [49, 63, 57, 12]], "fitness": -0.13114285469055176, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [9.160767629829642e+24, 1.063872615775191e+25, 2.559345644933565e+30, NaN, NaN, NaN], "accuracy": [0.10566636174917221, 0.11134592443704605, 0.09998679161071777, 0.10091137140989304, 0.09998679161071777, 0.09998679161071777], "val_loss": [5.739633925619874e+24, 2.8067401661242947e+25, 2.496721793905376e+32, NaN, NaN, NaN], "val_accuracy": [0.1303333342075348, 0.09733333438634872, 0.0963333323597908, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [0, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], [4, 5, 1, 2, 5, 2, 0, 2, 2, 6, 7], [2, 3, 1, 3, 2, 2, 3, 4, 2, 4, 1, 3, 3], [52, 41, 54, 66], [1, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [5, 9, 0, 6, 2, 5, 0, 0, 4, 0, 8], [0, 1, 0, 0, 3, 0, 2], [17, 63, 56, 12]], "fitness": -0.10114285349845886, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 0, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3024302697562744, 2.3020436661732493, 2.3027726698230366, 2.3014021063398897, 2.300857384852635, 2.3012286192705416, 2.301608123610505, 2.3007792313305804, 2.3002228117133994, 2.3008575386548196, 2.3016836062839334, 2.3006647138579206, 2.300548193807757, 2.300396446507164, 2.3006968963037564, 2.3002889599420326, 2.300716484259022, 2.3013492543164213, 2.300925221724706], "accuracy": [0.09047681838274002, 0.09192973375320435, 0.08902391046285629, 0.09153348207473755, 0.09747721254825592, 0.09879804402589798, 0.09708096832036972, 0.09760929644107819, 0.09866596013307571, 0.09734513610601425, 0.09166556596755981, 0.10236428678035736, 0.10051512718200684, 0.09906221181154251, 0.09959053993225098, 0.1002509593963623, 0.09853387624025345, 0.0948355570435524, 0.10566636174917221], "val_loss": [1.9702447482517786, 1.9701434544154577, 1.9700607572283064, 1.9700044223240443, 1.969975403376988, 1.9699855531964983, 1.970026969909668, 1.9700977461678642, 1.9701920236860002, 1.9703136852809362, 1.9704635483878, 1.970635073525565, 1.9708121163504464, 1.9710030555725098, 1.9712034634181432, 1.9713976723807198, 1.9715899739946638, 1.971764360155378, 1.971925939832415], "val_accuracy": [0.04066666588187218, 0.04399999976158142, 0.04933333396911621, 0.0533333346247673, 0.061666667461395264, 0.06833333522081375, 0.07266666740179062, 0.07500000298023224, 0.08266666531562805, 0.08799999952316284, 0.09533333033323288, 0.1003333330154419, 0.10333333164453506, 0.10533333569765091, 0.10366666316986084, 0.10233332961797714, 0.10133333504199982, 0.10333333164453506, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [0, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], [4, 5, 1, 1, 5, 2, 0, 2, 2, 6, 7], [1, 3, 0, 3, 2, 2, 3, 4, 2, 4, 1, 3, 3], [52, 95, 54, 66], [0, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [5, 9, 0, 6, 2, 5, 0, 0, 4, 0, 8], [1, 1, 0, 0, 3, 0, 2], [17, 63, 56, 12]], "fitness": -0.10114285349845886, "mapping_values": [1, 3, 3, 1, 2, 0, 8, 8, 4, 4, 1, 1, 1, 0, 1, 0, 2, 2, 0, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), grad)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.square(tf.math.add(beta, tf.math.subtract(alpha, tf.math.subtract(tf.math.add(beta, grad), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3024302697562744, 2.3020436661732493, 2.3027726698230366, 2.3014021063398897, 2.300857384852635, 2.3012286192705416, 2.301608123610505, 2.3007792313305804, 2.3002228117133994, 2.3008575386548196, 2.3016836062839334, 2.3006647138579206, 2.300548193807757, 2.300396446507164, 2.3006968963037564, 2.3002889599420326, 2.300716484259022, 2.3013492543164213, 2.300925221724706], "accuracy": [0.09047681838274002, 0.09192973375320435, 0.08902391046285629, 0.09153348207473755, 0.09747721254825592, 0.09879804402589798, 0.09708096832036972, 0.09760929644107819, 0.09866596013307571, 0.09734513610601425, 0.09166556596755981, 0.10236428678035736, 0.10051512718200684, 0.09906221181154251, 0.09959053993225098, 0.1002509593963623, 0.09853387624025345, 0.0948355570435524, 0.10566636174917221], "val_loss": [1.9702447482517786, 1.9701434544154577, 1.9700607572283064, 1.9700044223240443, 1.969975403376988, 1.9699855531964983, 1.970026969909668, 1.9700977461678642, 1.9701920236860002, 1.9703136852809362, 1.9704635483878, 1.970635073525565, 1.9708121163504464, 1.9710030555725098, 1.9712034634181432, 1.9713976723807198, 1.9715899739946638, 1.971764360155378, 1.971925939832415], "val_accuracy": [0.04066666588187218, 0.04399999976158142, 0.04933333396911621, 0.0533333346247673, 0.061666667461395264, 0.06833333522081375, 0.07266666740179062, 0.07500000298023224, 0.08266666531562805, 0.08799999952316284, 0.09533333033323288, 0.1003333330154419, 0.10333333164453506, 0.10533333569765091, 0.10366666316986084, 0.10233332961797714, 0.10133333504199982, 0.10333333164453506, 0.10100000351667404]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], [4, 5, 1, 1, 5, 2, 0, 2, 2, 6, 7], [2, 3, 1, 3, 2, 2, 3, 4, 2, 4, 1, 3, 3], [52, 95, 54, 66], [1, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [5, 9, 0, 6, 2, 5, 0, 0, 4, 0, 8], [1, 1, 0, 0, 3, 0, 2], [17, 63, 56, 12]], "fitness": -0.10114285349845886, "mapping_values": [1, 1, 1, 0, 1, 0, 4, 4, 2, 2, 0, 1, 0, 0, 0, 0, 2, 2, 0, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), tf.math.square(tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3024302697562744, 2.3020436661732493, 2.3027726698230366, 2.3014021063398897, 2.300857384852635, 2.3012286192705416, 2.301608123610505, 2.3007792313305804, 2.3002228117133994, 2.3008575386548196, 2.3016836062839334, 2.3006647138579206, 2.300548193807757, 2.300396446507164, 2.3006968963037564, 2.3002889599420326, 2.300716484259022, 2.3013492543164213, 2.300925221724706], "accuracy": [0.09047681838274002, 0.09192973375320435, 0.08902391046285629, 0.09153348207473755, 0.09747721254825592, 0.09879804402589798, 0.09708096832036972, 0.09760929644107819, 0.09866596013307571, 0.09734513610601425, 0.09166556596755981, 0.10236428678035736, 0.10051512718200684, 0.09906221181154251, 0.09959053993225098, 0.1002509593963623, 0.09853387624025345, 0.0948355570435524, 0.10566636174917221], "val_loss": [1.9702447482517786, 1.9701434544154577, 1.9700607572283064, 1.9700044223240443, 1.969975403376988, 1.9699855531964983, 1.970026969909668, 1.9700977461678642, 1.9701920236860002, 1.9703136852809362, 1.9704635483878, 1.970635073525565, 1.9708121163504464, 1.9710030555725098, 1.9712034634181432, 1.9713976723807198, 1.9715899739946638, 1.971764360155378, 1.971925939832415], "val_accuracy": [0.04066666588187218, 0.04399999976158142, 0.04933333396911621, 0.0533333346247673, 0.061666667461395264, 0.06833333522081375, 0.07266666740179062, 0.07500000298023224, 0.08266666531562805, 0.08799999952316284, 0.09533333033323288, 0.1003333330154419, 0.10333333164453506, 0.10533333569765091, 0.10366666316986084, 0.10233332961797714, 0.10133333504199982, 0.10333333164453506, 0.10100000351667404]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [0, 1, 1, 1, 1], [0, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], [4, 5, 2, 2, 5, 2, 0, 2, 2, 6, 7], [1, 4, 1, 3, 2, 2, 3, 4, 2, 4, 1, 3, 3], [52, 95, 54, 66], [1, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 9, 0, 2, 2, 1, 0, 0, 9, 0, 8], [1, 1, 0, 0, 3, 0, 2], [49, 63, 57, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 9, 9, 5, 4, 0, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, alpha)), grad)), tf.math.add(beta, alpha))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.negative(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06921146810054779, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [0, 1, 0, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], [4, 5, 1, 2, 5, 2, 0, 2, 2, 6, 7], [1, 4, 1, 3, 2, 2, 3, 4, 2, 4, 1, 3, 3], [52, 41, 54, 66], [1, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [5, 1, 3, 2, 2, 2, 0, 3, 9, 0, 8], [2, 1, 0, 0, 3, 0, 2], [20, 63, 56, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 0, 4, 4, 2, 2, 0, 1, 0, 0, 0, 0, 15, 9, 6, 4], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, grad), alpha))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.square(tf.math.add(beta, alpha)), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.subtract(tf.math.multiply(beta, alpha), tf.math.add(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.multiply(sigma, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)))), tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [2.306134901310018, 10206.554489182601, 1973031.9244898297, 113305148.11359133, 48784845680246.14, 5.314177848726977e+23, NaN], "accuracy": [0.10289261490106583, 0.10289261490106583, 0.10157178342342377, 0.10091137140989304, 0.1014397069811821, 0.1080438494682312, 0.10038304328918457], "val_loss": [2.0892559460231235, 37416.09486607143, 8511112.857142856, 6057528905.142858, 425360676093952.0, 7.137881809021354e+24, NaN], "val_accuracy": [0.09733333438634872, 0.10133333504199982, 0.10000000149011612, 0.10133333504199982, 0.0963333323597908, 0.10000000149011612, 0.09733333438634872]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [3, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], [4, 5, 1, 2, 5, 2, 0, 2, 2, 6, 7], [1, 4, 1, 3, 2, 2, 3, 4, 2, 4, 1, 3, 3], [52, 95, 54, 66], [1, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 4, 0, 2, 2, 1, 0, 0, 9, 0, 8], [1, 1, 0, 0, 3, 0, 2], [17, 63, 56, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 6, 6, 3, 3, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), grad))), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.pow(alpha, alpha), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [3, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], [4, 5, 4, 9, 5, 2, 0, 2, 2, 6, 7], [3, 4, 1, 3, 2, 2, 3, 2, 2, 4, 1, 3, 3, 4, 5, 4, 5, 0, 5, 4, 3, 4, 1, 4, 5, 2, 5, 3, 3, 3, 2, 4, 2, 5, 3, 5, 5, 5, 0, 5], [52, 95, 54, 66], [1, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 9, 0, 9, 0, 1, 0, 0, 9, 0, 8], [1, 1, 0, 0, 3, 0, 2], [17, 63, 56, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 6, 6, 3, 3, 0, 1, 0, 0, 0, 0, 4, 4, 0, 2], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), grad))), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [12.000734522200657, 102.19876877191815, 356.2298627195105, 867.4142353429204, 1747.0151206598368, 3123.246310222859], "accuracy": [0.09536388516426086, 0.10051512718200684, 0.09602430462837219, 0.09576013684272766, 0.10249637067317963, 0.1010434553027153], "val_loss": [28.20367649623326, 134.3794163295201, 373.7896466936384, 812.1743861607143, 1516.3556431361608, 2548.4798409598216], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 0, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [3, 3, 1, 0, 2, 0, 2, 2], [96, 12, 93], [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], [2, 0, 1, 4, 0, 2, 0, 2, 2, 6, 7], [2, 4, 1, 3, 2, 2, 3, 4, 2, 4, 1, 3, 3], [52, 95, 54, 66], [0, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 9, 0, 2, 2, 1, 0, 0, 9, 0, 8], [0, 1, 0, 0, 3, 0, 2], [49, 63, 57, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 6, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06921146810054779, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0], [1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], [4, 5, 2, 2, 5, 2, 0, 2, 2, 6, 7], [4, 4, 1, 3, 2, 2, 3, 2, 2, 4, 1, 3, 3, 4, 5, 4, 5, 0, 5, 4, 3, 4, 1, 4, 5, 2, 5, 3, 3, 3, 2, 4, 2, 5, 3, 5, 5, 5, 0, 5], [52, 95, 54, 66], [1, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 9, 0, 2, 2, 1, 0, 0, 9, 0, 8], [1, 1, 0, 0, 3, 0, 2], [86, 42, 57, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07277770340442657, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], [4, 0, 1, 2, 5, 2, 0, 2, 2, 6, 7], [2, 4, 1, 3, 2, 2, 3, 4, 2, 4, 1, 3, 3], [52, 95, 54, 66], [0, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 9, 0, 2, 1, 0, 0, 0, 9, 0, 8], [1, 2, 3, 0, 3, 0, 2], [49, 63, 57, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 10, 7, 3, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.negative(tf.math.add(beta, beta)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.negative(beta), tf.math.negative(sigma)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [2, 5, 1, 8, 3, 2, 0, 2, 2, 6, 7, 8, 9, 2, 0, 3, 8, 9, 5, 4, 1, 3, 0, 0, 2, 1, 1, 2, 8], [4, 1, 1, 3, 2, 2, 3, 4, 2, 4, 1, 3, 3, 1, 5, 1], [52, 12, 54, 66], [1, 1, 1, 1, 1, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [2, 0, 0, 6, 2, 5, 0, 0, 4, 0, 8], [1, 1, 0, 0, 3, 0, 2], [17, 63, 56, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 45, 45, 29, 16, 2, 1, 0, 0, 0, 0, 5, 3, 2, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.negative(tf.math.add(tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, alpha), grad), tf.math.add(beta, tf.math.sqrt(beta))))), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, tf.math.sqrt(grad))))), tf.math.add(beta, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad))))))), tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), tf.math.subtract(tf.math.multiply(grad, tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.subtract(grad, tf.math.subtract(tf.math.add(beta, grad), alpha)))))))), tf.math.add(tf.math.add(beta, grad), tf.math.sqrt(alpha)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.negative(tf.math.negative(alpha)), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08083476126194, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [0, 1, 0, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], [4, 3, 1, 2, 5, 2, 0, 2, 2, 6, 7], [1, 4, 1, 3, 2, 2, 3, 4, 2, 4, 1, 3, 3], [52, 95, 54, 66], [1, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 9, 6, 2, 2, 1, 0, 0, 9, 0, 8], [1, 1, 0, 0, 3, 0, 2], [17, 63, 56, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 0, 7, 7, 3, 4, 0, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, grad), alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, grad))), tf.math.add(beta, alpha)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(alpha, alpha))", "other_info": {"loss": [2.3023847025525, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1], [4, 2, 1, 2, 5, 8, 0, 2, 2, 6, 7, 5, 2, 6, 4, 2, 1, 2, 7, 2, 0, 3, 7, 7, 9, 0, 7, 8, 3, 5, 5, 3, 5, 6, 2, 2, 6, 5, 0, 8, 1, 5, 8, 2, 8, 1, 2, 2, 0, 7, 6, 8, 0, 5, 5, 8, 0, 4, 3, 5, 0, 2, 4, 2, 0, 3, 5, 4, 5, 8], [2, 0, 0, 3, 2, 0, 2, 4, 2, 4, 2, 3, 3, 3, 0, 3, 2, 2, 5, 3, 1, 4, 2, 3, 2, 1, 0, 2, 4, 1, 2, 3, 4, 1, 2, 3, 4, 4, 3, 4], [52, 41, 54, 66, 71, 44, 87], [1, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [6, 9, 0, 2, 2, 1, 2, 0, 9, 0, 8], [3, 1, 0, 0, 3, 0, 2], [17, 63, 56, 12]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 102, 102, 64, 38, 6, 1, 0, 0, 0, 0, 10, 6, 4, 3], "tree_depth": 64, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, beta))), tf.math.sqrt(tf.math.negative(tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.add(beta, tf.math.add(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), tf.math.add(beta, beta))), tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(grad, beta))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.sqrt(grad)), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.square(grad)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(beta, tf.math.square(tf.math.add(beta, beta)))))))))))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(beta, alpha)), tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, grad)), beta)))), grad))))))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.square(tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, beta)))))))), grad)), tf.math.add(beta, tf.math.square(alpha)))))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))))), tf.math.negative(tf.math.pow(grad, grad))))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.square(tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad)))))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(sigma, tf.math.add(tf.math.subtract(alpha, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [2.3023642312738763, 2.3025567902235102, 2.302566840364917, 2.3025629537106505, 2.3025695215740916, 2.3025603354205515, 2.3025619910299, 2.302560541875736, 2.3025551200653065], "accuracy": [0.1018359512090683, 0.10553427785634995, 0.10368511080741882, 0.10540219396352768, 0.10130762308835983, 0.10302469879388809, 0.1010434553027153, 0.10236428678035736, 0.09998679161071777], "val_loss": [1.9736467088971819, 1.9736511366707938, 1.9736523628234863, 1.973651681627546, 1.973654338291713, 1.9736512047903878, 1.9736473900931222, 1.9736505917140417, 1.9736578123910087], "val_accuracy": [0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.10133333504199982, 0.09666666388511658, 0.09666666388511658, 0.10133333504199982, 0.10133333504199982, 0.09733333438634872]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [0, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [1, 0, 1, 0, 2, 0, 2, 2], [96, 12, 93], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1], [5, 5, 1, 6, 5, 2, 0, 2, 2, 6, 7], [1, 5, 1, 1, 2, 2, 3, 4, 2, 4, 1, 3, 3], [52, 95, 54, 66], [1, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 9, 0, 2, 2, 1, 0, 0, 9, 0, 8], [2, 1, 0, 0, 3, 0, 2], [17, 63, 56, 12]], "fitness": -0.037142857909202576, "mapping_values": [1, 3, 3, 1, 2, 1, 7, 7, 4, 3, 0, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.divide_no_nan(tf.math.add(beta, grad), alpha))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.negative(beta))", "other_info": {"loss": [2.3025519185298626, 2.3024615782945697, 2.3035714639853397, 2.3025233508762413, 2.3018967757025384, 2.3028502607578614], "accuracy": [0.08981640636920929, 0.09285431355237961, 0.08809932321310043, 0.09008057415485382, 0.09351472556591034, 0.09430722147226334], "val_loss": [1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [0, 1, 1, 1, 1], [6, 2, 5, 6, 7, 0, 0, 2, 5, 2, 2, 9, 4, 0], [2, 2, 1, 0, 2, 0, 2, 2], [96, 12, 93], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1], [5, 6, 1, 2, 5, 2, 0, 2, 2, 6, 7, 3, 1, 0, 9], [2, 4, 1, 3, 2, 2, 3, 4, 2, 4, 1, 3, 3], [52, 95, 54, 66], [1, 1, 1, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1], [9, 3], [5, 7], [71], [1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [5, 9, 0, 6, 2, 5, 0, 0, 4, 0, 8], [3, 1, 0, 0, 3, 0, 2], [49, 63, 57, 12]], "fitness": -0.037142857909202576, "mapping_values": [1, 3, 3, 1, 2, 0, 25, 25, 15, 10, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.square(alpha))), tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), beta))))), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.negative(tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), beta)), tf.math.add(beta, grad)))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3025519185298626, 2.3024615782945697, 2.3035714639853397, 2.3025233508762413, 2.3018967757025384, 2.3028502607578614], "accuracy": [0.08981640636920929, 0.09285431355237961, 0.08809932321310043, 0.09008057415485382, 0.09351472556591034, 0.09430722147226334], "val_loss": [1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725, 1.9703851427350725], "val_accuracy": [0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531, 0.03633333370089531]}}]