[{"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1], [4, 6, 9, 3, 2, 2, 3, 9], [0, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 80, 3], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8448571562767029, "mapping_values": [1, 4, 4, 2, 2, 1, 13, 13, 8, 5, 3, 4, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad))), grad), tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, sigma))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.095264785624514, 1.1442635914889214, 0.8346715597286988, 0.730647166635634, 0.6752892010530949, 0.6163957962160334, 0.5775318018528197, 0.5428425273040597, 0.5134464668685954, 0.49659515904901586, 0.47942774084187173, 0.4613361631669798, 0.435295418831871, 0.41929544922367395, 0.4083965264684914, 0.39592897157076407, 0.38727914132871616, 0.3635469107359565, 0.36026465839650634, 0.3486920861032078, 0.3433550792465656, 0.32966295008677626, 0.32592259547997304, 0.3206154171068907, 0.3169010575413468], "accuracy": [0.28397834300994873, 0.5893540978431702, 0.6919825673103333, 0.7181349992752075, 0.7425703406333923, 0.7664773464202881, 0.7847048044204712, 0.791969358921051, 0.8035926818847656, 0.811649739742279, 0.8162726163864136, 0.8276317715644836, 0.8367455005645752, 0.848368763923645, 0.8507462739944458, 0.8524633646011353, 0.8527275323867798, 0.8643507957458496, 0.8681812286376953, 0.8705587387084961, 0.8706908226013184, 0.8800686597824097, 0.8775591254234314, 0.8775591254234314, 0.8803328275680542], "val_loss": [1.0184696061270577, 0.6679876702172416, 0.5689268963677543, 0.5410982029778617, 0.4984597478594099, 0.46593282903943745, 0.44397662367139545, 0.43214125292641775, 0.41371352331978933, 0.41133032526288715, 0.39606307234082905, 0.37784229857581003, 0.3639353428568159, 0.35363852977752686, 0.34907685007367817, 0.3494319830621992, 0.34297085659844534, 0.3263264639036996, 0.32801151275634766, 0.3209261213030134, 0.3277720979281834, 0.3205563851765224, 0.3205509526388986, 0.32220702511923655, 0.32115043912615093], "val_accuracy": [0.6389999985694885, 0.7400000095367432, 0.7336666584014893, 0.7596666812896729, 0.7816666960716248, 0.7919999957084656, 0.8103333115577698, 0.812333345413208, 0.8180000185966492, 0.8206666707992554, 0.82833331823349, 0.8413333296775818, 0.846666693687439, 0.8546666502952576, 0.8539999723434448, 0.8523333072662354, 0.8603333234786987, 0.8679999709129333, 0.862666666507721, 0.8700000047683716, 0.8666666746139526, 0.8696666955947876, 0.8656666874885559, 0.8653333187103271, 0.8676666617393494]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1], [8, 6, 5, 3, 5, 2, 3, 9], [3, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 80, 3], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 6, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8425714373588562, "mapping_values": [1, 4, 4, 2, 2, 1, 12, 12, 8, 4, 1, 4, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad))), grad)))))), tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.divide_no_nan(sigma, tf.math.add(sigma, sigma))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.095264729397282, 1.1443082659299018, 0.8350104421924338, 0.7307055106551624, 0.6753604564180526, 0.6155886030814368, 0.5788452156058329, 0.545036956043984, 0.5147556598711448, 0.4984816538895504, 0.4774974699009994, 0.46026909515102227, 0.4342798272443249, 0.416225215514354, 0.4068102493632219, 0.39427906804238455, 0.3889536297143395, 0.3637735001942611, 0.3629957698851434, 0.34927698257356476, 0.3420781754719945, 0.32804726804441164, 0.3219852310878064, 0.32065408210697083, 0.32080343815597323], "accuracy": [0.28397834300994873, 0.5893540978431702, 0.689869225025177, 0.7176066637039185, 0.7430986762046814, 0.7671377658843994, 0.7865539789199829, 0.7906485199928284, 0.8053097128868103, 0.8090080618858337, 0.8203672170639038, 0.8277638554573059, 0.8364813327789307, 0.8491612672805786, 0.8511425256729126, 0.8496896028518677, 0.852331280708313, 0.8631620407104492, 0.8671245574951172, 0.8701624870300293, 0.8741249442100525, 0.8759741187095642, 0.8796724081039429, 0.8796724081039429, 0.8767666220664978], "val_loss": [1.0184697423662459, 0.6679391179765973, 0.5694030523300171, 0.5401564495904105, 0.49772657666887554, 0.4670297758919852, 0.444941554750715, 0.43591679845537457, 0.41556842838014874, 0.4111295427594866, 0.3960345387458801, 0.37724519627434866, 0.36306609426225933, 0.3523044160434178, 0.3489365407398769, 0.35206784520830425, 0.3480396441050938, 0.33077325991221834, 0.32587882450648714, 0.32194903067180086, 0.3325738481112889, 0.3187691399029323, 0.3217549664633615, 0.32250112295150757, 0.32332639183316914], "val_accuracy": [0.6389999985694885, 0.7403333187103271, 0.7323333621025085, 0.7603333592414856, 0.7796666622161865, 0.7916666865348816, 0.8083333373069763, 0.8130000233650208, 0.8176666498184204, 0.8209999799728394, 0.82833331823349, 0.8393333554267883, 0.8496666550636292, 0.8533333539962769, 0.8556666374206543, 0.8489999771118164, 0.8543333411216736, 0.8636666536331177, 0.8633333444595337, 0.8700000047683716, 0.8683333396911621, 0.8673333525657654, 0.8673333525657654, 0.8636666536331177, 0.8646666407585144]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [6, 6, 9, 3, 2, 2, 3, 9, 1, 3, 8, 4, 6, 8], [0, 1, 3, 3, 1, 5, 3, 2, 2, 4, 4, 0], [85, 80, 3], [0, 0, 1, 0, 0, 0, 1, 1], [1, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8351428508758545, "mapping_values": [1, 4, 4, 2, 2, 1, 13, 13, 8, 5, 3, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, grad))), grad), tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.095262184134879, 1.1442022168042716, 0.8348529381192104, 0.731906507654811, 0.6772162090628264, 0.6153177827923384, 0.5797847895621624, 0.5445296400494941, 0.5135243332633221, 0.4968677433080929, 0.47988504103665747, 0.4610544159120777, 0.4316876947824682, 0.4153713349771065, 0.41011779634015055, 0.39027549615546836, 0.38724737512736257, 0.36571354745023554, 0.36635917819580777, 0.353142761318927, 0.3478312478317734, 0.3363655280868501, 0.32509074348027855, 0.31937923781812905, 0.31682059679757557], "accuracy": [0.28397834300994873, 0.589750349521637, 0.6906617283821106, 0.7177387475967407, 0.7407211661338806, 0.7651565074920654, 0.7829877138137817, 0.7890635132789612, 0.802800178527832, 0.8105930685997009, 0.8182538747787476, 0.8276317715644836, 0.8411042094230652, 0.8482366800308228, 0.8477083444595337, 0.852859616279602, 0.852859616279602, 0.8643507957458496, 0.8626337051391602, 0.8684453964233398, 0.8714832663536072, 0.8709549307823181, 0.8804649114608765, 0.8794082403182983, 0.8802007436752319], "val_loss": [1.0184663023267473, 0.6678836856569562, 0.5693448100771222, 0.5419924599783761, 0.4987159626824515, 0.46676996776035856, 0.44475029196058, 0.4321209021977016, 0.41052028962544035, 0.4095127582550049, 0.3969522459166391, 0.37474571807043894, 0.359948992729187, 0.352551485810961, 0.3457251191139221, 0.3498747263635908, 0.3441659552710397, 0.3290127090045384, 0.32796656233923777, 0.3207920619419643, 0.3295254962784903, 0.3236577936581203, 0.31805946997233797, 0.32126112495149883, 0.3231521419116429], "val_accuracy": [0.6393333077430725, 0.7409999966621399, 0.7316666841506958, 0.762333333492279, 0.781000018119812, 0.7916666865348816, 0.8080000281333923, 0.8136666417121887, 0.8233333230018616, 0.8226666450500488, 0.8253333568572998, 0.840666651725769, 0.8463333249092102, 0.8556666374206543, 0.8603333234786987, 0.8529999852180481, 0.856333315372467, 0.8629999756813049, 0.8663333058357239, 0.8693333268165588, 0.8643333315849304, 0.8679999709129333, 0.8683333396911621, 0.8686666488647461, 0.8679999709129333]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1], [4, 6, 4, 5, 5, 3, 6, 9], [0, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [93, 80, 7], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 7, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.7911428809165955, "mapping_values": [1, 4, 4, 2, 2, 1, 13, 13, 8, 5, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(grad), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.square(tf.math.square(tf.math.multiply(tf.math.divide_no_nan(tf.math.add(beta, grad), grad), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.231680248801136, 1.8171052374088408, 1.2612376761489996, 1.0787244056115424, 0.9632552822016297, 0.8826090303772335, 0.8521837086300289, 0.8024777949226374, 0.7922058683092946, 0.7454067553432784, 0.7225955217710622, 0.7203064689688505, 0.6997181753188927, 0.6800077070240111, 0.6627330464331733, 0.6598856909919676, 0.643855056325285, 0.6383834099174411, 0.6263886416955096, 0.6287527812895537, 0.6277489048567714, 0.6178058032913294, 0.6155050128222047, 0.5972037945976504, 0.598685378703018, 0.5940169587253091, 0.5942700215854098, 0.5783467915678194], "accuracy": [0.22797517478466034, 0.4525161683559418, 0.5667679309844971, 0.615770697593689, 0.6450931429862976, 0.6807554960250854, 0.687491774559021, 0.7014925479888916, 0.7061154246330261, 0.72672039270401, 0.7285695672035217, 0.7292299270629883, 0.7341170310974121, 0.7477215528488159, 0.7557786107063293, 0.744419515132904, 0.7584202885627747, 0.7625148296356201, 0.7643640041351318, 0.7598732113838196, 0.7629110813140869, 0.7664773464202881, 0.7619865536689758, 0.7763835787773132, 0.780610203742981, 0.7803460359573364, 0.7794214487075806, 0.7886672616004944], "val_loss": [1.7562120982578822, 1.1143495695931571, 0.8659166097640991, 0.7554783991404942, 0.6471819026129586, 0.6302558864865985, 0.5961400270462036, 0.6283125536782401, 0.5725644656590053, 0.5435840061732701, 0.5847780704498291, 0.5218372685568673, 0.5138607365744454, 0.5063676493508475, 0.5072158404758998, 0.5000100987298148, 0.5023565122059414, 0.4866478272846767, 0.49503421783447266, 0.4908460889543806, 0.4805196353367397, 0.4753472123827253, 0.46916324751717703, 0.46200588771275114, 0.4743320771626064, 0.4655435085296631, 0.4799186331885202, 0.4567487580435617], "val_accuracy": [0.4729999899864197, 0.6066666841506958, 0.6349999904632568, 0.6753333210945129, 0.734333336353302, 0.734333336353302, 0.7379999756813049, 0.7166666388511658, 0.7583333253860474, 0.7613333463668823, 0.7263333201408386, 0.7799999713897705, 0.7789999842643738, 0.7816666960716248, 0.7760000228881836, 0.7886666655540466, 0.7816666960716248, 0.7993333339691162, 0.7829999923706055, 0.7773333191871643, 0.7953333258628845, 0.793666660785675, 0.8086666464805603, 0.8086666464805603, 0.8013333082199097, 0.8036666512489319, 0.7976666688919067, 0.8046666383743286]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [17, 32, 5, 49, 25], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1], [4, 1, 5, 3, 2, 2, 3, 9, 3, 8, 5, 4, 1, 1, 9, 1, 4, 5, 2, 0, 3, 5, 0, 5], [0, 0, 3, 3, 1, 5, 3, 2, 1, 2, 4, 0, 5], [24, 80, 3, 57], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.7417142987251282, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 1, 4, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, sigma))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.299780731802021, 2.2766234676331862, 2.2341182689782637, 2.1639320520976155, 2.048110051303728, 1.8444263005001575, 1.6021622852673856, 1.4265016475452519, 1.3310958310015024, 1.2975343433684203, 1.204255288255969, 1.0748851166393747, 0.9620491067148581, 0.8977718428141406, 0.8967212044315693, 0.8906650860957371, 0.8496793620401543, 0.8035349124977853, 0.7842819631422484, 0.7732486255715914, 0.769682300356889, 0.7586806028935699, 0.7518184904046992, 0.7204504530301672, 0.6993869710292925, 0.6992628371490385, 0.7005483350339992, 0.6901454721396515, 0.695735149056983, 0.6784602218867135, 0.6646054005185138, 0.6491984228857315, 0.6400947766832435, 0.6358696293947388, 0.6352462857123206, 0.6196785035024402, 0.6099402856171768, 0.6035014993053905, 0.599160251844482, 0.5886288588986405, 0.5846654056495033, 0.5765799600466163, 0.5755170166705027, 0.5661842306811875, 0.5563552991006478, 0.560267060943929, 0.5573108462042828, 0.5462825255166617, 0.5309194759717313, 0.5315395498461554, 0.536131444679291, 0.5207669148670605, 0.5230769386121138, 0.5189773608483753, 0.5119598375225206, 0.49964666797216967, 0.4991126696604622, 0.4974559956592985, 0.4905101322557759, 0.4798318548815645, 0.4740274959016139, 0.47179344873528484, 0.4683896156704232, 0.46688464193800105, 0.4607212726529154, 0.46172375217908723, 0.44715300035467237, 0.45299420429888404, 0.44355664557044566, 0.44603376623315427, 0.43408008663960734, 0.43069419051048036, 0.43690370798520345, 0.4224152653295413, 0.4233837582730913, 0.4220916779797705, 0.41241282652539507, 0.42367143830792026, 0.41621442627850114, 0.40692196081595067, 0.392952813905039, 0.3985299732368289, 0.39004979472449425, 0.40226811615388786, 0.3930645214292619, 0.39129426699068254, 0.38623860992885867, 0.38514634607852555, 0.3785040312124486, 0.37942285566691475], "accuracy": [0.09496764093637466, 0.16074495017528534, 0.26324132084846497, 0.35107648372650146, 0.39162594079971313, 0.43059042096138, 0.4647998809814453, 0.5001981258392334, 0.5436534285545349, 0.5645225048065186, 0.5925241112709045, 0.6339981555938721, 0.6515651941299438, 0.6572447419166565, 0.6713775992393494, 0.6799629926681519, 0.6901333928108215, 0.7024171352386475, 0.7080966830253601, 0.7082287669181824, 0.7136441469192505, 0.7065116763114929, 0.7116629481315613, 0.7197200059890747, 0.7308149337768555, 0.7325320243835449, 0.7290979027748108, 0.735041618347168, 0.7326641082763672, 0.7353057861328125, 0.7473253011703491, 0.7498348951339722, 0.7582882046699524, 0.7593448758125305, 0.7559106945991516, 0.759080708026886, 0.7685906887054443, 0.7712323069572449, 0.7733456492424011, 0.7786290049552917, 0.7729493975639343, 0.7750627398490906, 0.780610203742981, 0.7795535326004028, 0.7873464822769165, 0.7862898111343384, 0.7881389260292053, 0.7971205711364746, 0.7969884872436523, 0.8004226684570312, 0.805177628993988, 0.8050455451011658, 0.8058380484580994, 0.8079513907432556, 0.8092722296714783, 0.8140271902084351, 0.8103289008140564, 0.8127063512802124, 0.81548011302948, 0.8165367841720581, 0.8178576231002808, 0.8248580098152161, 0.8247259259223938, 0.8228767514228821, 0.8248580098152161, 0.8321225643157959, 0.8308017253875732, 0.8359529972076416, 0.8374059200286865, 0.8348963260650635, 0.8354246616363525, 0.8384625315666199, 0.8370096683502197, 0.8408400416374207, 0.8455950617790222, 0.8466516733169556, 0.8494254350662231, 0.844010055065155, 0.8433496356010437, 0.8482366800308228, 0.852859616279602, 0.8482366800308228, 0.8514066934585571, 0.8475762605667114, 0.847840428352356, 0.8511425256729126, 0.8551049828529358, 0.852331280708313, 0.8548408150672913, 0.854708731174469], "val_loss": [1.958904811314174, 1.927535057067871, 1.8782518250601632, 1.7937944957188197, 1.64028457232884, 1.3933569022587367, 1.1321566104888916, 0.9445924077715192, 0.8086392879486084, 0.7502528939928327, 0.6974701029913766, 0.6930831330163139, 0.6642061301640102, 0.6865119423185077, 0.6935086080006191, 0.6658023766108921, 0.623449546950204, 0.6013715437480381, 0.5881641932896206, 0.5751069443566459, 0.5785087517329625, 0.5804516928536552, 0.5684470108577183, 0.5500362089702061, 0.5419995273862567, 0.5423151424952916, 0.5421156372342791, 0.5379296200616019, 0.5315489428383964, 0.524289573941912, 0.5178764717919486, 0.5132920401436942, 0.5113456419536045, 0.5118820496967861, 0.5071422372545514, 0.49566352367401123, 0.48536532265799387, 0.4794082130704607, 0.47554281779697966, 0.47265454701014925, 0.46992136750902447, 0.4645048039300101, 0.45653237615312847, 0.4490604741232736, 0.44496517521994455, 0.442225592476981, 0.4386242117200579, 0.4369138649531773, 0.438250516142164, 0.43792128562927246, 0.43342892612729755, 0.4282249297414507, 0.42386704683303833, 0.4195104326520647, 0.41518367188317434, 0.4132671356201172, 0.413141097341265, 0.41205488783972605, 0.4087381362915039, 0.4059157371520996, 0.4044686811310904, 0.402914685862405, 0.4003747020448957, 0.39726786954062326, 0.39608930689947947, 0.39628019503184725, 0.3966524004936218, 0.39568391016551424, 0.3933442405291966, 0.39092386620385305, 0.38883394854409353, 0.38668311493737356, 0.3846605675561087, 0.38445467608315603, 0.3843174661908831, 0.38259582008634296, 0.3807808501379831, 0.3783807413918631, 0.3756591933114188, 0.37496860538210186, 0.37367330278669086, 0.37110830204827444, 0.3708246520587376, 0.3709580387387957, 0.37079104355403353, 0.3711643133844648, 0.368152984551021, 0.3646594456263951, 0.36372045959745136, 0.3636024934904916], "val_accuracy": [0.13833333551883698, 0.359333336353302, 0.40066665410995483, 0.43966665863990784, 0.4883333444595337, 0.5370000004768372, 0.5953333377838135, 0.6556666493415833, 0.6813333630561829, 0.6899999976158142, 0.7146666646003723, 0.7196666598320007, 0.7206666469573975, 0.70333331823349, 0.7319999933242798, 0.7260000109672546, 0.7353333234786987, 0.7363333106040955, 0.7463333606719971, 0.7526666522026062, 0.7483333349227905, 0.7476666569709778, 0.7513333559036255, 0.7609999775886536, 0.7639999985694885, 0.7643333077430725, 0.7646666765213013, 0.7670000195503235, 0.7706666588783264, 0.777999997138977, 0.7789999842643738, 0.7820000052452087, 0.777999997138977, 0.7776666879653931, 0.7743333578109741, 0.7823333144187927, 0.7886666655540466, 0.7873333096504211, 0.7883333563804626, 0.7916666865348816, 0.7956666946411133, 0.7963333129882812, 0.8003333210945129, 0.8023333549499512, 0.8046666383743286, 0.8053333163261414, 0.8106666803359985, 0.8103333115577698, 0.8149999976158142, 0.815666675567627, 0.8190000057220459, 0.8209999799728394, 0.8253333568572998, 0.8299999833106995, 0.831333339214325, 0.8306666612625122, 0.8303333520889282, 0.8303333520889282, 0.8353333473205566, 0.8349999785423279, 0.8339999914169312, 0.8356666564941406, 0.8370000123977661, 0.8403333425521851, 0.8399999737739563, 0.8426666855812073, 0.8433333039283752, 0.8443333506584167, 0.8443333506584167, 0.843666672706604, 0.8456666469573975, 0.846666693687439, 0.8473333120346069, 0.8489999771118164, 0.8483333587646484, 0.8510000109672546, 0.8529999852180481, 0.8550000190734863, 0.8533333539962769, 0.8569999933242798, 0.8579999804496765, 0.8550000190734863, 0.8553333282470703, 0.8543333411216736, 0.859333336353302, 0.8579999804496765, 0.8579999804496765, 0.8550000190734863, 0.8546666502952576, 0.8560000061988831]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [4, 6, 6, 3, 2, 2, 3, 9, 1, 3, 8, 4, 6, 8, 0, 8, 2, 2, 7, 2, 7], [3, 1, 3, 3, 2, 5, 3, 2, 1, 4, 4, 0, 5, 4, 2, 2], [85, 80, 3], [0, 0, 1, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0], [8, 2, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.7345714569091797, "mapping_values": [1, 4, 4, 2, 2, 1, 37, 37, 21, 16, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(grad), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), grad), tf.math.add(beta, alpha))), grad), tf.math.subtract(tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))))), grad))), grad), tf.math.add(beta, beta)))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))))), tf.math.add(beta, tf.math.add(grad, tf.math.add(tf.math.add(beta, tf.math.add(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.add(grad, tf.math.add(beta, beta)), beta))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.079121259099315, 1.2242825994748543, 0.8893352873478709, 0.8053631588389546, 0.7160125207734098, 0.6699446538231234, 0.6417072061786342, 0.5989369653817795, 0.5666523694818865, 0.5491916108298311, 0.534192037155694, 0.5219722423122355, 0.5053637771597943, 0.4873749766257209, 0.4898762883306762, 0.46728987546014966, 0.4724147796410422, 0.46982834839770476, 0.4499225655661409, 0.4641075212571914, 0.4727081695741052, 0.4706078497622826], "accuracy": [0.3007528781890869, 0.5828820466995239, 0.6650376319885254, 0.6851142644882202, 0.7218332886695862, 0.7483819723129272, 0.7581561207771301, 0.7750627398490906, 0.7792893648147583, 0.7857614755630493, 0.7994980812072754, 0.8029322624206543, 0.8099326491355896, 0.8197067975997925, 0.8206313848495483, 0.8212917447090149, 0.8310658931732178, 0.822348415851593, 0.8272355198860168, 0.8355567455291748, 0.8208954930305481, 0.824329674243927], "val_loss": [0.9773802757263184, 0.7564560515539986, 0.6208128588540214, 0.5841783625738961, 0.5165657997131348, 0.4969355208533151, 0.4935028042112078, 0.4537173679896763, 0.4469900812421526, 0.44134613445826937, 0.4288920249257769, 0.4292759043829782, 0.4160539848463876, 0.42048115389687674, 0.42726132699421476, 0.41280414376940044, 0.424137396471841, 0.4077456167766026, 0.4378602078982762, 0.4277976410729544, 0.4696896757398333, 0.4727597577231271], "val_accuracy": [0.6600000262260437, 0.7049999833106995, 0.7139999866485596, 0.7440000176429749, 0.7716666460037231, 0.7879999876022339, 0.7886666655540466, 0.8033333420753479, 0.8066666722297668, 0.8080000281333923, 0.809333324432373, 0.8223333358764648, 0.8343333601951599, 0.8289999961853027, 0.8306666612625122, 0.8403333425521851, 0.8473333120346069, 0.8349999785423279, 0.8389999866485596, 0.8339999914169312, 0.82833331823349, 0.8396666646003723]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 1, 3, 1, 2, 4, 0, 1, 5, 9, 4, 4, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 0, 0, 2, 3, 3, 0], [37, 32, 7, 49, 25, 83], [0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1], [3, 6, 9, 3, 2, 2, 3, 9], [3, 1, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 41, 10], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 0, 0], [7, 7, 8, 4], [2, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 23, 23, 13, 10, 6, 3, 3, 1, 2, 0, 8, 5, 4, 1, 0, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)))))), tf.math.add(alpha, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.pow(tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))))), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, beta))), tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.pow(sigma, sigma)))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 1, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0], [9, 5, 5, 3, 9, 2, 3, 9], [0, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 41, 10], [0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 0, 0], [7, 6, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 7, 7, 3, 1, 1, 1, 0, 1, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08915598690509796, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 2, 9, 4, 2, 6, 3, 6, 5, 8], [3, 2, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [4, 6, 9, 3, 5, 4, 3, 9, 0, 5, 1, 4, 5, 4, 4], [0, 1, 3, 3, 0, 5, 3, 3, 1, 4, 4, 0], [85, 80, 62, 98], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [4, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 11, 8, 3, 23, 23, 15, 8, 4, 4, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))))), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.multiply(tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)), tf.math.negative(alpha)))), tf.math.square(tf.math.add(beta, grad)))))), tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), grad))), tf.math.add(beta, grad)), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, grad))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 7, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1], [4, 6, 9, 3, 2, 2, 3, 9], [0, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 80, 3], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [1, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [3, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 11, 8, 4, 5, 5, 3, 2, 2, 5, 4, 2, 2, 0, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.math.multiply(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))))), tf.math.pow(tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, sigma))), tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [9, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1], [4, 6, 5, 3, 2, 2, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 80, 3], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [20191962.753379006, 3147741545.3958526, 54000550870.47735, 381059279255.1113, 1664367704768.1267, 5416497333966.058], "accuracy": [0.09470347315073013, 0.10236428678035736, 0.09985470771789551, 0.09668471664190292, 0.09826971590518951, 0.09708096832036972], "val_loss": [171100521.14285713, 9212625481.142857, 98859649316.57143, 538915204534.8571, 2018540856466.2856, 5954051206582.857], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [4, 6, 9, 3, 2, 2, 3, 9, 3, 1, 5, 8, 4, 8], [0, 1, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [81, 41, 24], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 11, 11, 6, 5, 2, 4, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(alpha, grad), tf.math.add(beta, grad))), alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, sigma))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07000396400690079, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [2, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1], [4, 6, 5, 3, 2, 2, 3, 9], [3, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 80, 3], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 6, 6, 3, 3, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(grad)), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [154728.77817719107, 4896758.108704266, 20644192.02509576, 63754502.339453176, 144097960.95760137, 178086872.23231676], "accuracy": [0.09325055778026581, 0.09245806187391281, 0.08308017253875732, 0.09113723784685135, 0.10566636174917221, 0.10540219396352768], "val_loss": [522586.0714285714, 3158648.0714285714, 6320443.285714285, 8309427.142857143, 5857213.0, 3.1144425528390065], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 3, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [4, 6, 9, 3, 2, 2, 2, 9, 5], [0, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [38, 79, 10], [1, 1, 1, 1, 0, 0, 1, 1], [0, 0, 0, 1, 0], [8, 7, 8, 4], [2, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 14, 14, 9, 5, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(grad, grad), tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))))), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [13.67156431303678, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.03486989811062813, 0.09509972482919693, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [169005.92410714287, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [2, 6, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [4, 6, 9, 3, 2, 2, 3, 9, 3, 1, 7, 3, 7, 9, 9], [3, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [15, 41, 10, 44], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 4, 23, 23, 15, 8, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.square(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, grad))), grad), tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), grad)), tf.math.add(beta, grad)))))))), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08902391046285629, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [2, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0], [4, 6, 9, 8, 2, 3, 3, 9], [0, 3, 3, 4, 2, 5, 3, 2, 1, 4, 4, 0], [85, 80, 3], [0, 1, 1, 0, 0, 0, 1, 1], [0, 1, 0, 1, 0], [8, 7, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [154685.78189202398, 4819459.244551579, 18964811.704134196, 60386780.79830934, 149487477.66464138, 239523749.33273008], "accuracy": [0.09338264167308807, 0.09311848133802414, 0.09325055778026581, 0.09232597798109055, 0.09417514503002167, 0.09549596905708313], "val_loss": [522021.48214285716, 2661961.1428571427, 4210710.714285715, 4972277.0, 2.807486261640276, 22402781.714285713], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [5, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1], [2, 6, 9, 3, 2, 2, 3, 9, 9], [0, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0], [85, 81, 3, 34], [0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 0, 13, 13, 9, 4, 4, 4, 4, 2, 2, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), grad), tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, sigma), tf.math.add(sigma, alpha))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.305740765891669, 2.336600529818471, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08281600475311279, 0.07951393723487854, 0.09628847241401672, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9783102444240026, 2.0526420729500905, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.018666666001081467, 0.10066666454076767, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1], [4, 2, 9, 3, 2, 2, 3, 9], [1, 1, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [15, 41, 10], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 18, 11, 7, 4, 5, 5, 3, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)))))), tf.math.pow(tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.pow(alpha, tf.math.add(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 1, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 94, 75, 33, 25], [0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], [4, 0, 9, 3, 2, 2, 3, 9], [3, 0, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 80, 3], [0, 0, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [8, 1, 8, 4], [2, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 4, 4, 2, 2, 1, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(grad)), tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07000396400690079, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 1, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [4, 6, 9, 3, 2, 2, 3, 9, 7, 9, 0, 9, 8, 3, 6], [0, 3, 1, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 80, 3, 61, 86], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 3, 21, 21, 15, 6, 5, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.square(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))), tf.math.add(alpha, tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.negative(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))))))), tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), alpha)), grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [3.741741143386472, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.02945449762046337, 0.09549596905708313, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [95.14641898018974, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09099999815225601, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}]