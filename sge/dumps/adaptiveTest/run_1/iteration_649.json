[{"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [29, 66, 89, 50, 85, 46], [1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [0, 5, 6, 3, 6, 4, 1, 1, 8, 9, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [3, 2, 2, 3, 3, 3, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 19, 30, 73, 40, 57, 35, 9, 54, 64], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 1, 0], [0, 7, 6, 4], [4, 1], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2, 0], [53, 97, 13, 96, 41]], "fitness": -0.7948571443557739, "mapping_values": [1, 4, 4, 3, 1, 1, 19, 19, 12, 7, 1, 4, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.negative(tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, tf.math.subtract(tf.math.sqrt(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))))))), grad), tf.math.add(beta, grad))))), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, grad))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.289332847018299, 2.2567712210109914, 2.216267937225767, 2.155127791208346, 2.070091200636961, 1.9533917319584106, 1.8105786545811045, 1.6426419664635368, 1.4967702487204384, 1.3842795901782854, 1.291072273818084, 1.2109520210959672, 1.1440231716470664, 1.115595578627737, 1.062136018745431, 1.0241870311871337, 0.9888193057024594, 0.9611318924045676, 0.9464792081110229, 0.9333263358986688, 0.9074226127261609, 0.8893921527061417, 0.8886205813888199, 0.8621454567579214, 0.8548048342995246, 0.8329729605990158, 0.8271839022636414, 0.815358810932755, 0.8089972071643865, 0.8015346694789338, 0.7876041397017385, 0.7874922813787877, 0.7847744582225586, 0.7744354164091792, 0.7665287293478986, 0.7529113787969247, 0.7504669229950588, 0.7467544906411141, 0.739583593861239, 0.744151640719332, 0.7325239240091869, 0.7184305035159446, 0.7275024824028459, 0.7211201870524888, 0.7156210455990832, 0.7067007932444416, 0.7068951917740143, 0.6988393101694089, 0.6865226287001617, 0.6865802419624938, 0.6899503352714174, 0.6895838170916948, 0.693291678625154, 0.674645187320679, 0.6788629553321488, 0.6729608574453331, 0.6718322886152825, 0.6605418416817962, 0.6643777351810192, 0.6620467711417682, 0.6618889951277654, 0.6548661384930811, 0.6475714884886353, 0.6444596203248011, 0.6425102989765883, 0.6444712834681943, 0.6448298890624363, 0.6325716142641192, 0.6385183785853211, 0.6375675221806457, 0.632328901229801, 0.6328920459844937, 0.6324242734323324, 0.6251317930889168, 0.6278770066381462, 0.6302466798830089], "accuracy": [0.12323339283466339, 0.20261524617671967, 0.2868841588497162, 0.3451327383518219, 0.392550528049469, 0.4287412464618683, 0.4488178491592407, 0.4912164807319641, 0.5171047449111938, 0.5375775694847107, 0.5628054141998291, 0.5892220139503479, 0.6038832664489746, 0.6058644652366638, 0.6277902722358704, 0.6419231295585632, 0.652621865272522, 0.6559239029884338, 0.6606789231300354, 0.6631884574890137, 0.6802271604537964, 0.6799629926681519, 0.6822084188461304, 0.6907938122749329, 0.6837934255599976, 0.698190450668335, 0.700171709060669, 0.7049266695976257, 0.7088891863822937, 0.709021270275116, 0.7121912837028503, 0.7113987803459167, 0.7132478952407837, 0.7128516435623169, 0.7170783281326294, 0.7228899598121643, 0.7205125093460083, 0.7256637215614319, 0.7346453666687012, 0.7284374833106995, 0.7296261787414551, 0.7337207794189453, 0.7279091477394104, 0.7321357727050781, 0.7378153204917908, 0.7368907928466797, 0.7363624572753906, 0.7432307600975037, 0.7409853339195251, 0.746268630027771, 0.7453441023826599, 0.7491744756698608, 0.7479857206344604, 0.7518161535263062, 0.7477215528488159, 0.752212405204773, 0.7540615797042847, 0.7557786107063293, 0.7559106945991516, 0.7600052952766418, 0.7607977986335754, 0.7617223858833313, 0.76106196641922, 0.7569673657417297, 0.7631752490997314, 0.7647602558135986, 0.7650244235992432, 0.7604015469551086, 0.7676661014556885, 0.7613261342048645, 0.7650244235992432, 0.7651565074920654, 0.7666094303131104, 0.7696473598480225, 0.7687227725982666, 0.7689869403839111], "val_loss": [1.9414176940917969, 1.9076996530805315, 1.8619796207972936, 1.7945444243294852, 1.6963526521410262, 1.5646749905177526, 1.4097891194479806, 1.2486694880894251, 1.1125758034842355, 1.0078765664781844, 0.9267855031149728, 0.8630864449909755, 0.816284315926688, 0.7781474420002529, 0.7469987188066755, 0.7239645889827183, 0.6993096385683332, 0.6808598041534424, 0.667781046458653, 0.6560366664613996, 0.6424315656934466, 0.6328332935060773, 0.6227450200489589, 0.6132277761186872, 0.6071368626185826, 0.5983989919934954, 0.5909339700426374, 0.5853641714368548, 0.5806747334344047, 0.5758145877293178, 0.5695776087897164, 0.5641081162861415, 0.5607189791543143, 0.5584377731595721, 0.553034952708653, 0.5493371656962803, 0.5461055210658482, 0.5426780326025826, 0.5415358202798026, 0.5361584084374564, 0.5339931930814471, 0.528617365019662, 0.5276365450450352, 0.5242886202675956, 0.5228285108293805, 0.5187128611973354, 0.5193852186203003, 0.5137665442058018, 0.5130732229777745, 0.5097594431468419, 0.5073360545294625, 0.506690399987357, 0.5054499762398856, 0.5031860555921283, 0.5034757001059396, 0.5009314502988543, 0.49668495995657785, 0.495935320854187, 0.49510230336870464, 0.49587576729910715, 0.4925741468157087, 0.492074864251273, 0.48813390731811523, 0.488335166658674, 0.488744854927063, 0.48686507769993376, 0.4844329186848232, 0.481987612588065, 0.4808415855680193, 0.47899745191846577, 0.47787974561963764, 0.4771828481129238, 0.47778259004865375, 0.4774137394768851, 0.47486373356410433, 0.47635247026171], "val_accuracy": [0.30000001192092896, 0.39766666293144226, 0.45500001311302185, 0.4933333396911621, 0.5303333401679993, 0.5529999732971191, 0.5740000009536743, 0.6079999804496765, 0.6506666541099548, 0.6586666703224182, 0.6809999942779541, 0.6853333115577698, 0.6970000267028809, 0.7049999833106995, 0.7089999914169312, 0.7120000123977661, 0.7203333377838135, 0.7256666421890259, 0.731333315372467, 0.7323333621025085, 0.7390000224113464, 0.7416666746139526, 0.7443333268165588, 0.749666690826416, 0.7483333349227905, 0.75, 0.7580000162124634, 0.7543333172798157, 0.7603333592414856, 0.753000020980835, 0.7586666941642761, 0.7553333044052124, 0.7663333415985107, 0.7599999904632568, 0.7666666507720947, 0.7689999938011169, 0.7680000066757202, 0.7680000066757202, 0.7646666765213013, 0.7699999809265137, 0.7739999890327454, 0.7706666588783264, 0.7713333368301392, 0.7766666412353516, 0.7776666879653931, 0.7763333320617676, 0.7776666879653931, 0.7823333144187927, 0.7789999842643738, 0.784333348274231, 0.7846666574478149, 0.7833333611488342, 0.7839999794960022, 0.781333327293396, 0.7796666622161865, 0.7886666655540466, 0.7916666865348816, 0.7889999747276306, 0.7943333387374878, 0.7893333435058594, 0.7956666946411133, 0.7910000085830688, 0.7940000295639038, 0.7950000166893005, 0.7900000214576721, 0.7963333129882812, 0.7956666946411133, 0.8009999990463257, 0.8016666769981384, 0.800000011920929, 0.8033333420753479, 0.8029999732971191, 0.8009999990463257, 0.7973333597183228, 0.8019999861717224, 0.8003333210945129]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [1, 5, 6, 6, 6, 8, 1, 1, 8, 9, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [0, 3, 3, 3, 3, 3, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [10, 19, 30, 73, 40, 57, 35, 9, 54, 64], [0, 0, 1, 0, 0, 0, 1, 1], [1, 0, 0, 1, 1, 0], [0, 7, 6, 4], [7, 1], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [53, 97, 13, 96, 41]], "fitness": -0.7917143106460571, "mapping_values": [1, 4, 4, 3, 1, 1, 16, 16, 9, 7, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), grad)), grad)))), grad)), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2075073012680884, 1.8623828493986683, 1.5294254510283958, 1.2700910530920435, 1.101157420331209, 1.0028336281710928, 0.934150311830667, 0.860182620711913, 0.7651467649943919, 0.7342432376148363, 0.699631736955906, 0.6872007022003503, 0.6472777190493114, 0.6569049804517071, 0.614242495428916, 0.6047070587961476, 0.5781645787910086, 0.5604075483201344, 0.5531852152196093, 0.5848744931852089, 0.5508386361569052], "accuracy": [0.25280675292015076, 0.37445515394210815, 0.47708359360694885, 0.5227842926979065, 0.5775987505912781, 0.6476026773452759, 0.6396777033805847, 0.678642213344574, 0.7034738063812256, 0.7152291536331177, 0.722229540348053, 0.7333245277404785, 0.7530049085617065, 0.7458723783493042, 0.7585523724555969, 0.7701756954193115, 0.778761088848114, 0.7796856164932251, 0.789988100528717, 0.7881389260292053, 0.785629391670227], "val_loss": [1.7117485659463065, 1.2133821078709193, 0.9556206294468471, 0.8870158195495605, 0.7483970778329032, 0.6963658332824707, 0.659312333379473, 0.6081173590251377, 0.5454344749450684, 0.5500754117965698, 0.602621180670602, 0.5448540108544486, 0.5206825392586845, 0.5143004826136998, 0.49500324044908794, 0.47770047187805176, 0.4653464044843401, 0.4923467125211443, 0.5137925488608224, 0.5199674538203648, 0.4536739928381784], "val_accuracy": [0.3266666531562805, 0.5136666893959045, 0.5853333473205566, 0.609000027179718, 0.6800000071525574, 0.6903333067893982, 0.7026666402816772, 0.731333315372467, 0.7609999775886536, 0.7553333044052124, 0.699999988079071, 0.7583333253860474, 0.7689999938011169, 0.765333354473114, 0.784333348274231, 0.7919999957084656, 0.784333348274231, 0.7770000100135803, 0.7876666784286499, 0.7663333415985107, 0.7916666865348816]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [1, 5, 6, 6, 6, 8, 1, 1, 8, 9, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [0, 3, 3, 3, 3, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 19, 30, 73, 40, 57, 35, 9, 54, 64], [0, 0, 1, 0, 0, 0, 1, 1], [1, 0, 0, 1, 1, 0], [0, 7, 6, 4], [7, 0], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [53, 97, 13, 96, 41]], "fitness": -0.75, "mapping_values": [1, 4, 4, 3, 1, 1, 16, 16, 9, 7, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.negative(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), grad)), grad))), tf.math.add(beta, grad))), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.41299276017494, 2.175746411868468, 2.3428895237927327, 2.025665851096593, 1.5850699192591788, 1.4080607848254965, 1.1069877617441983, 0.9242378511307278, 0.879763902698006, 0.8072492176389587, 0.7861689877169967, 0.7402230663589908, 0.6914777019398324], "accuracy": [0.22520142793655396, 0.22718267142772675, 0.17012283205986023, 0.32505613565444946, 0.4691586196422577, 0.5229163765907288, 0.5983357429504395, 0.6580372452735901, 0.6770572066307068, 0.6999075412750244, 0.702681303024292, 0.7147008180618286, 0.7339849472045898], "val_loss": [1.9724689892360143, 2.213310922895159, 1.9112178938729423, 1.5759874071393694, 1.738785948072161, 0.8827008860451835, 0.6538724558694022, 0.5858583450317383, 0.6655869654246739, 0.6470643111637661, 0.5921885286058698, 0.5405323505401611, 0.5540890523365566], "val_accuracy": [0.15933333337306976, 0.1966666728258133, 0.35633334517478943, 0.4259999990463257, 0.6176666617393494, 0.6183333396911621, 0.7023333311080933, 0.746999979019165, 0.7279999852180481, 0.7080000042915344, 0.7446666955947876, 0.7463333606719971, 0.7409999966621399]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [31, 66, 89, 50, 85, 46], [1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [1, 5, 6, 4, 6, 4, 4, 1, 8, 1, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [3, 3, 2, 3, 3, 0, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 19, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [1, 0, 0, 1, 1, 0], [0, 7, 6, 4], [7, 0], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [53, 97, 13, 96, 41]], "fitness": -0.7197142839431763, "mapping_values": [1, 4, 4, 3, 1, 1, 23, 23, 14, 9, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.subtract(grad, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), beta)), grad)), tf.math.add(beta, grad)), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, grad), grad), tf.math.square(tf.math.negative(alpha)))))))), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2468036601036734, 1.7034783590235147, 1.279837519083954, 0.9786701409603548, 0.8938467991492216, 0.8922338150180862, 0.8753947761033299, 0.8216808559069182, NaN, NaN, NaN], "accuracy": [0.2082948088645935, 0.4485536813735962, 0.5908070206642151, 0.6502443552017212, 0.6715096831321716, 0.6617355942726135, 0.6803592443466187, 0.6977941989898682, 0.34301942586898804, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.7505836486816406, 0.8395639487675258, 0.6923348903656006, 0.6715879951204572, 0.6270124571663993, 0.646668553352356, 0.5961048603057861, 0.6434679712568011, NaN, NaN, NaN], "val_accuracy": [0.46399998664855957, 0.6669999957084656, 0.6959999799728394, 0.7213333249092102, 0.718999981880188, 0.7329999804496765, 0.731333315372467, 0.7223333120346069, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [15, 66, 89, 50, 85, 46], [1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [1, 5, 2, 3, 6, 4, 1, 1, 8, 9, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [2, 3, 3, 0, 2, 2, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 19, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [1, 0, 0, 1, 1, 0], [0, 7, 6, 4], [7, 1], [64], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [53, 97, 13, 96, 41]], "fitness": -0.6845714449882507, "mapping_values": [1, 4, 4, 2, 2, 1, 20, 20, 12, 8, 2, 1, 0, 0, 0, 0, 3, 1, 2, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.negative(tf.math.add(alpha, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(tf.math.square(beta), tf.math.add(beta, beta))))))), grad))), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, alpha)", "other_info": {"loss": [2.300886120888787, 2.2974009572743204, 2.29393403666477, 2.2875669937501604, 2.2835864173643277, 2.2808687700461308, 2.2784061629333516, 2.2724761528314428, 2.268753795418458, 2.2658578710564847, 2.2604383766344114, 2.2558407460725256, 2.2518106839597314, 2.249073596725595, 2.243072356908171, 2.2382685777265885, 2.2323566528595418, 2.227057228691747, 2.2219411937898537, 2.2179122161966007, 2.209326323139008, 2.204376427095328, 2.2012398401665223, 2.19204816826425, 2.18301222164082, 2.177828237601338, 2.1692008370374407, 2.15801885943324, 2.153276951652177, 2.142007766697684, 2.133642004906399, 2.1247881204854258, 2.1120493929730335, 2.103812098235439, 2.0899442296537663, 2.0810873830606593, 2.068446886270211, 2.0537624597517947, 2.0425277823517587, 2.0279643353595866, 2.0102994072911224, 1.9980583195956534, 1.9829603449354523, 1.9674196367990606, 1.9520832089038809, 1.9340586883674413, 1.9208736762142673, 1.9049430317835265, 1.8755407478232755, 1.8599324235984158, 1.846433369144394, 1.8268743850897962, 1.8116904072332627, 1.785896155592032, 1.7678810065968193, 1.748669903260401, 1.726155263022535, 1.7005990940770925, 1.6889721594781388, 1.670696257726155, 1.6544816632706019, 1.6274266690468477, 1.611606330478574, 1.5915763641723222, 1.5702649377293323, 1.5562290588878227, 1.5391041176619231, 1.521174870335966, 1.4964820773547052, 1.4837421254238763, 1.4680489760190898, 1.4567589961369245, 1.4462681099597285, 1.4277865236555942, 1.4234885613931845, 1.4040135816576111, 1.3841359737353665, 1.3746919937420987, 1.364847001162156, 1.3568200761647413, 1.3365299496841532, 1.3280675963104644, 1.3107454298572643, 1.3150122261885024, 1.2971946182283727, 1.282389706844793, 1.2718411228203612, 1.2705771864334416, 1.2582736123176599, 1.2568838396848327, 1.2380312143488803, 1.2376319159448674, 1.2187286933431094, 1.2135338496380887, 1.2075448747733644, 1.1982291464036592, 1.1920643619747209, 1.1847643360029108, 1.1662956767346109, 1.162642401742614], "accuracy": [0.09351472556591034, 0.09708096832036972, 0.11491216719150543, 0.1368379294872284, 0.14040417969226837, 0.14489498734474182, 0.1516312211751938, 0.16999074816703796, 0.17870822548866272, 0.19244486093521118, 0.1954827606678009, 0.21476687490940094, 0.22031435370445251, 0.22440892457962036, 0.23880596458911896, 0.2502971887588501, 0.25544843077659607, 0.27803459763526917, 0.2763175368309021, 0.27882710099220276, 0.2900541424751282, 0.3028661906719208, 0.3008849620819092, 0.31264033913612366, 0.3205653131008148, 0.3255844712257385, 0.3353586196899414, 0.34539690613746643, 0.3447364866733551, 0.35622772574424744, 0.3590014576911926, 0.3615110218524933, 0.37722888588905334, 0.3757759928703308, 0.3867388665676117, 0.3899088501930237, 0.38805970549583435, 0.3961167633533478, 0.3959846794605255, 0.4060229957103729, 0.416589617729187, 0.41223087906837463, 0.41487252712249756, 0.4239862561225891, 0.4279487431049347, 0.4251750111579895, 0.439439982175827, 0.43626996874809265, 0.4411570429801941, 0.4543653428554535, 0.4465724527835846, 0.45027077198028564, 0.4493461847305298, 0.47127196192741394, 0.46229031682014465, 0.46625280380249023, 0.4745740294456482, 0.4799894392490387, 0.478140264749527, 0.4810461103916168, 0.4912164807319641, 0.49412229657173157, 0.4987452030181885, 0.4991414546966553, 0.5105006098747253, 0.5048210024833679, 0.5205389261245728, 0.5139347314834595, 0.5243692994117737, 0.5268788933753967, 0.5238409638404846, 0.5285959839820862, 0.5241051316261292, 0.5362567901611328, 0.523048460483551, 0.5350680351257324, 0.5473517179489136, 0.5431250929832458, 0.5406154990196228, 0.549068808555603, 0.5569937825202942, 0.557390034198761, 0.5688812732696533, 0.5528992414474487, 0.5675604343414307, 0.5647866725921631, 0.564258337020874, 0.5675604343414307, 0.568749189376831, 0.5700700283050537, 0.575089156627655, 0.5720512270927429, 0.5855237245559692, 0.5838066339492798, 0.5806366205215454, 0.5912032723426819, 0.5869766473770142, 0.5886936783790588, 0.5956941246986389, 0.5996565818786621], "val_loss": [1.9673384257725306, 1.9637705939156669, 1.960240364074707, 1.9566829545157296, 1.953115463256836, 1.9495526041303362, 1.945915699005127, 1.9422106742858887, 1.9384594644818987, 1.9346452440534319, 1.9306985310145788, 1.926623957497733, 1.9224771772112166, 1.9182018552507674, 1.9137637955801827, 1.9092228072030204, 1.9044195583888464, 1.8994052069527763, 1.8941855430603027, 1.8887878145490373, 1.8830605915614538, 1.8771076202392578, 1.8709978376116072, 1.8645264761788505, 1.8576485770089286, 1.8505103928702218, 1.843001365661621, 1.8350860731942313, 1.826812471662249, 1.8181067875453405, 1.809004647391183, 1.7995069367544991, 1.7895539147513253, 1.7792346818106515, 1.768388271331787, 1.7571701322283064, 1.745429583958217, 1.7330859729221888, 1.720313378742763, 1.7071322372981481, 1.6932287216186523, 1.6788856642586845, 1.6639083794185094, 1.6484522478921073, 1.6326416219983781, 1.616281509399414, 1.5995770863124303, 1.5824459280286516, 1.564551796231951, 1.54636321749006, 1.5282289641244071, 1.5096722330365862, 1.4909622328622, 1.4716836384364538, 1.4524010930742537, 1.4330484526497977, 1.4135031018938338, 1.3936108180454798, 1.3740714277539934, 1.3548264844076974, 1.3355097770690918, 1.3160128934042794, 1.2968628065926688, 1.277998753956386, 1.259305545261928, 1.2409605298723494, 1.2230064187731062, 1.205545493534633, 1.1884445462908064, 1.1717752388545446, 1.155585186822074, 1.1398582458496094, 1.1246716294969832, 1.1099720682416643, 1.0956923961639404, 1.0819170475006104, 1.0683437756129675, 1.0554563317980086, 1.0427492686680384, 1.030644450868879, 1.0187526089804513, 1.0073722090039934, 0.996211086000715, 0.9855717250279018, 0.9755595752171108, 0.9655082906995501, 0.9558567660195487, 0.9466614723205566, 0.93756822177342, 0.929046664919172, 0.9205582823072161, 0.9124921389988491, 0.9043678896767753, 0.8965645517621722, 0.8891977923257011, 0.8819271496364048, 0.8750053133283343, 0.8681739739009312, 0.8613219601767403, 0.8548480953489032], "val_accuracy": [0.06133333221077919, 0.08933333307504654, 0.12466666847467422, 0.164000004529953, 0.19566667079925537, 0.22966666519641876, 0.26366665959358215, 0.2866666615009308, 0.3100000023841858, 0.33399999141693115, 0.35199999809265137, 0.36633333563804626, 0.37566667795181274, 0.3863333463668823, 0.3933333456516266, 0.39766666293144226, 0.40700000524520874, 0.4103333353996277, 0.4156666696071625, 0.4246666729450226, 0.4309999942779541, 0.43433332443237305, 0.44200000166893005, 0.44566667079925537, 0.45100000500679016, 0.45366665720939636, 0.45766666531562805, 0.46433332562446594, 0.46966665983200073, 0.4776666760444641, 0.4803333282470703, 0.484333336353302, 0.48633334040641785, 0.49266666173934937, 0.49799999594688416, 0.5026666522026062, 0.5070000290870667, 0.5103333592414856, 0.5180000066757202, 0.5253333449363708, 0.5286666750907898, 0.534333348274231, 0.5376666784286499, 0.5396666526794434, 0.5433333516120911, 0.5450000166893005, 0.5479999780654907, 0.5503333210945129, 0.5533333420753479, 0.5556666851043701, 0.5573333501815796, 0.5596666932106018, 0.5619999766349792, 0.565666675567627, 0.5696666836738586, 0.5730000138282776, 0.574999988079071, 0.5826666951179504, 0.5853333473205566, 0.5879999995231628, 0.5896666646003723, 0.5933333039283752, 0.5956666469573975, 0.6026666760444641, 0.6050000190734863, 0.6069999933242798, 0.6110000014305115, 0.612666666507721, 0.6153333187103271, 0.6203333139419556, 0.6259999871253967, 0.6293333172798157, 0.6333333253860474, 0.6396666765213013, 0.6439999938011169, 0.6443333625793457, 0.6476666927337646, 0.652999997138977, 0.6579999923706055, 0.6613333225250244, 0.6639999747276306, 0.6653333306312561, 0.668666660785675, 0.6693333387374878, 0.67166668176651, 0.6713333129882812, 0.671999990940094, 0.6736666560173035, 0.6743333339691162, 0.6759999990463257, 0.6759999990463257, 0.6759999990463257, 0.6769999861717224, 0.6813333630561829, 0.6816666722297668, 0.6833333373069763, 0.6850000023841858, 0.6846666932106018, 0.6869999766349792, 0.6886666417121887]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [9, 66, 89, 50, 85, 46], [1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [0, 5, 6, 6, 6, 8, 1, 1, 8, 9, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [3, 3, 2, 3, 3, 0, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 19, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [1, 0, 0, 1, 1, 0], [0, 7, 6, 4], [7, 1], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [53, 97, 13, 96, 41]], "fitness": -0.3817142844200134, "mapping_values": [1, 4, 4, 3, 1, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.302258365646471, 2.302110498859394, 2.3019082837841056, 2.298870181961775, 2.2980716806975305, 2.2985844541266767, 2.299578589030135, 2.296977582561688, 2.2967200380636954, 2.2973468779509867, 2.295528744819882, 2.2946519947102386, 2.294175062952985, 2.2955169700722826, 2.29335813030449, 2.2925501834321187, 2.291675723665001, 2.291467020744976, 2.290966145382298, 2.291676299730391, 2.289243655292318, 2.289607658236333, 2.2906530076297615, 2.2882400708758457, 2.286945671878392, 2.2877152746127756, 2.286627647442478, 2.28362842894753, 2.2862895540258337, 2.2844505827771107, 2.284447794120546, 2.284721936784038, 2.2826434579649466, 2.282851486788009, 2.2813328770819026, 2.2814422863632884, 2.2813757997320594, 2.280296829823474, 2.280240906511457, 2.279150505044504, 2.277242661593156, 2.2776039114339777, 2.2779921773969223, 2.277390706713929, 2.2768101370676304, 2.2756796683050844, 2.275964192867972, 2.276268690112024, 2.272649345869055, 2.273538151972676, 2.2726501500239666, 2.2721341066293714, 2.2738930549855874, 2.2709776312526126, 2.270943871704563, 2.2705316985398234, 2.2688808969581573, 2.26840262195107, 2.2671575411797957, 2.2671760340975164, 2.267932707969586, 2.266668651460137, 2.2649714977608033, 2.2656640163454886, 2.2634859280642297, 2.264042912252575, 2.2638768468944233, 2.262288887802132, 2.2605826145842753, 2.260990700402422, 2.2583385293257945, 2.260880783107759, 2.2600838785016575, 2.2580425294635003, 2.2606136745953713, 2.2585925094802004, 2.257291014483261, 2.256354461335361, 2.2554967260442593, 2.256672754641679, 2.2531952674063582, 2.2537771175408707, 2.2527103083339335, 2.2534018069871773, 2.251692515921048, 2.2507357836682895, 2.24929111234705, 2.249115223897809, 2.2494319212072953, 2.250112183641024, 2.2476488889846125, 2.2479331209013695, 2.2459696829358364, 2.245765678981166, 2.2446777859006213, 2.2442575690768667, 2.2428973021524268, 2.2433120644780637, 2.24148470450701, 2.241276362883558], "accuracy": [0.09074098616838455, 0.08638224750757217, 0.09694888442754745, 0.109232597053051, 0.1010434553027153, 0.09945846349000931, 0.09774138033390045, 0.09747721254825592, 0.10447761416435242, 0.10170386731624603, 0.10051512718200684, 0.10698718577623367, 0.10566636174917221, 0.10989301651716232, 0.11147800832986832, 0.10857218503952026, 0.11266675591468811, 0.11847840249538422, 0.11319508403539658, 0.11728965491056442, 0.11979923397302628, 0.11821424216032028, 0.12402588874101639, 0.1266675442457199, 0.1302337795495987, 0.12389380484819412, 0.1286487877368927, 0.14238542318344116, 0.13472460210323334, 0.13538502156734467, 0.13630960881710052, 0.13340377807617188, 0.1434420794248581, 0.13380002975463867, 0.1398758441209793, 0.14529123902320862, 0.14555540680885315, 0.15255580842494965, 0.1500462293624878, 0.1500462293624878, 0.15717871487140656, 0.15400871634483337, 0.15361246466636658, 0.15400871634483337, 0.16470743715763092, 0.1554616242647171, 0.15955619513988495, 0.16378284990787506, 0.16351869702339172, 0.1706511676311493, 0.17117950320243835, 0.17633073031902313, 0.1636507660150528, 0.16272619366645813, 0.17593449354171753, 0.1764628142118454, 0.1752740740776062, 0.18055738508701324, 0.18359529972076416, 0.1764628142118454, 0.18214239180088043, 0.1818782240152359, 0.19336943328380585, 0.18438778817653656, 0.1950865089893341, 0.19033153355121613, 0.1912561058998108, 0.19482234120368958, 0.20063400268554688, 0.19852067530155182, 0.19957733154296875, 0.20036983489990234, 0.2040681540966034, 0.20618148148059845, 0.19759608805179596, 0.2086910605430603, 0.2044644057750702, 0.2086910605430603, 0.2141064554452896, 0.20644564926624298, 0.22335226833820343, 0.21437062323093414, 0.21476687490940094, 0.21516312658786774, 0.22374852001667023, 0.2242768406867981, 0.23206974565982819, 0.22916391491889954, 0.2218993455171585, 0.2296922504901886, 0.22916391491889954, 0.23233389854431152, 0.23722097277641296, 0.2390701323747635, 0.2401268035173416, 0.2378813922405243, 0.23563598096370697, 0.24065512418746948, 0.23814556002616882, 0.2382776439189911], "val_loss": [1.970400265284947, 1.9698609624590193, 1.9693244525364466, 1.9687854903084892, 1.9682469367980957, 1.967714582170759, 1.967175074986049, 1.9666376113891602, 1.9661017145429338, 1.9655662264142717, 1.9650284903390067, 1.9644926616123743, 1.9639630317687988, 1.963428361075265, 1.9628960064479284, 1.9623702594212122, 1.9618396077837263, 1.961305754525321, 1.960773127419608, 1.9602428844996862, 1.9597039222717285, 1.9591702733721053, 1.958646638052804, 1.9581172806876046, 1.9575839723859514, 1.957050391605922, 1.95652437210083, 1.9559968539646693, 1.9554698126656669, 1.9549320765904017, 1.9543985639299666, 1.9538672310965401, 1.9533363751002721, 1.95280122756958, 1.952265739440918, 1.9517343384878976, 1.9511980329241072, 1.9506613186427526, 1.9501259667532784, 1.9495877538408553, 1.9490465436662947, 1.9485081263950892, 1.9479683467320033, 1.9474282945905412, 1.9468884468078613, 1.9463494164603097, 1.9458156313214983, 1.9452815737043108, 1.944728170122419, 1.9441819872174944, 1.9436380522591727, 1.9430935042245048, 1.9425477300371443, 1.9419944626944405, 1.9414407866341727, 1.9408892222813197, 1.9403350012642997, 1.9397727421351842, 1.9392164094107491, 1.9386606216430664, 1.938098771231515, 1.9375292233058385, 1.9369637625558036, 1.9363949639456612, 1.9358174460274833, 1.9352410861424036, 1.9346675191606795, 1.934086731501988, 1.933502265385219, 1.932912826538086, 1.9323250906808036, 1.9317337444850378, 1.9311506407601493, 1.930556161063058, 1.9299706731523787, 1.9293749673025948, 1.9287819862365723, 1.9281741550990514, 1.9275731359209334, 1.92696932383946, 1.926356656210763, 1.9257458278111048, 1.9251231466020857, 1.924508503505162, 1.9238873209272112, 1.9232621874128069, 1.9226315362112862, 1.9219966615949358, 1.9213637624468123, 1.9207369259425573, 1.9200985091073173, 1.9194598879132951, 1.9188147953578405, 1.9181676592145647, 1.9175120762416296, 1.9168621471949987, 1.916207722255162, 1.9155524117606026, 1.914884158543178, 1.9142149516514368], "val_accuracy": [0.04233333468437195, 0.04500000178813934, 0.046666666865348816, 0.05066666752099991, 0.054999999701976776, 0.058666665107011795, 0.06266666948795319, 0.06700000166893005, 0.07066666334867477, 0.07400000095367432, 0.07800000160932541, 0.08233333379030228, 0.08633333444595337, 0.09099999815225601, 0.09666666388511658, 0.10433333367109299, 0.10899999737739563, 0.11433333158493042, 0.11733333021402359, 0.12200000137090683, 0.12833333015441895, 0.13500000536441803, 0.14166666567325592, 0.1483333259820938, 0.1576666682958603, 0.1613333374261856, 0.16599999368190765, 0.1706666648387909, 0.17366667091846466, 0.17933332920074463, 0.1836666613817215, 0.1899999976158142, 0.19433332979679108, 0.19866666197776794, 0.20666666328907013, 0.21066667139530182, 0.21566666662693024, 0.22100000083446503, 0.22633333504199982, 0.2316666692495346, 0.23666666448116302, 0.2433333396911621, 0.24766667187213898, 0.2529999911785126, 0.257666677236557, 0.2613333463668823, 0.2669999897480011, 0.27166667580604553, 0.2750000059604645, 0.27900001406669617, 0.28166666626930237, 0.2853333353996277, 0.2879999876022339, 0.29233333468437195, 0.2939999997615814, 0.2980000078678131, 0.30133333802223206, 0.30666667222976685, 0.3113333284854889, 0.31466665863990784, 0.3173333406448364, 0.320333331823349, 0.32499998807907104, 0.3283333480358124, 0.3319999873638153, 0.3346666693687439, 0.33633333444595337, 0.3383333384990692, 0.3413333296775818, 0.34466665983200073, 0.3476666808128357, 0.35199999809265137, 0.3540000021457672, 0.3553333282470703, 0.35633334517478943, 0.35766667127609253, 0.36266666650772095, 0.3646666705608368, 0.36766666173934937, 0.36899998784065247, 0.3713333308696747, 0.3720000088214874, 0.37433332204818726, 0.3763333261013031, 0.3763333261013031, 0.3773333430290222, 0.3776666522026062, 0.37966665625572205, 0.3813333213329315, 0.3840000033378601, 0.3856666684150696, 0.3853333294391632, 0.3869999945163727, 0.3880000114440918, 0.3889999985694885, 0.38999998569488525, 0.39133334159851074, 0.3930000066757202, 0.39366665482521057, 0.3943333327770233]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [1, 5, 6, 6, 6, 8, 1, 0, 8, 9, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [0, 3, 3, 3, 3, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 19, 30, 73, 40, 57, 35, 9, 54, 64], [0, 0, 1, 0, 0, 0, 1, 1], [1, 0, 0, 1, 1, 0], [0, 7, 6, 4], [7, 0], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [53, 97, 13, 96, 41]], "fitness": -0.28942856192588806, "mapping_values": [1, 2, 2, 1, 1, 0, 14, 14, 8, 6, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), grad))), grad)), tf.math.add(beta, grad))), tf.math.add(beta, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.7530866650196035, 2.5108230192395817, 2.536965078728751, 2.3733752405859176, 2.3885611225317622, 2.3819396391583787], "accuracy": [0.20618148148059845, 0.16563200950622559, 0.11702549457550049, 0.1018359512090683, 0.10196803510189056, 0.10276053100824356], "val_loss": [1.9889819281441825, 2.075040204184396, 2.0607165609087263, 2.052391733442034, 1.9984328406197684, 2.0190834317888533], "val_accuracy": [0.20633333921432495, 0.09566666930913925, 0.09799999743700027, 0.09566666930913925, 0.10233332961797714, 0.10366666316986084]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [67, 66, 89, 50, 85, 46], [1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [1, 5, 6, 6, 6, 8, 1, 2, 8, 9, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [0, 3, 3, 3, 3, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 19, 30, 73, 40, 57, 35, 9, 54, 64], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0], [0, 7, 6, 4], [4, 0], [64], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [53, 97, 13, 96, 41]], "fitness": -0.25685715675354004, "mapping_values": [1, 4, 4, 3, 1, 1, 16, 16, 10, 6, 2, 6, 5, 3, 2, 1, 7, 3, 4, 2], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.negative(tf.math.add(alpha, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, grad), grad), grad))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, grad), tf.math.add(sigma, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.multiply(tf.math.multiply(alpha, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [20.17332436833415, 2.324632938685056, 2.3205828646847664, 2.3091700688927577, 2.304163855174907, 2.3035149242994164, 2.30427265494743], "accuracy": [0.15070664882659912, 0.11491216719150543, 0.146479994058609, 0.13353586196899414, 0.09774138033390045, 0.10315678268671036, 0.09100515395402908], "val_loss": [1.978062425340925, 1.754852567400251, 1.9751599856785365, 1.9757425444466727, 1.9744178908211845, 1.974203041621617, 1.9741401672363281], "val_accuracy": [0.10366666316986084, 0.34033334255218506, 0.10133333504199982, 0.0949999988079071, 0.10066666454076767, 0.0949999988079071, 0.10199999809265137]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [1, 5, 6, 6, 6, 1, 1, 1, 8, 9, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [0, 3, 3, 3, 2, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 19, 30, 73, 40, 57, 35, 9, 54, 64], [0, 0, 1, 0, 0, 0, 1, 1], [1, 0, 0, 1, 1, 0], [0, 7, 6, 4], [7, 0], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [53, 97, 13, 96, 41]], "fitness": -0.251714289188385, "mapping_values": [1, 2, 2, 1, 1, 0, 17, 17, 10, 7, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.sqrt(grad)), grad)), tf.math.add(beta, grad))), tf.math.add(beta, beta)), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, alpha))), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.4809219439142116, 2.493343528676515, 2.262718136347422, 2.3576267450209447, 2.3076611674299583, 2.284640468201381, 2.2497410749982865, 2.0886423122676576], "accuracy": [0.20657773315906525, 0.13657376170158386, 0.1352529376745224, 0.13934750854969025, 0.10434553027153015, 0.21793685853481293, 0.16140536963939667, 0.25980716943740845], "val_loss": [1.8413453102111816, 1.97328063419887, 1.9981499399457658, 1.9840011596679688, 1.9704844611031669, 1.9669696262904577, 1.9663047790527344, 1.989236286708287], "val_accuracy": [0.1926666647195816, 0.10366666316986084, 0.2329999953508377, 0.09566666930913925, 0.12333333492279053, 0.10166666656732559, 0.11599999666213989, 0.0949999988079071]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 1, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [92, 66, 89, 50, 85, 46], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [2, 8, 6, 3, 6, 4, 1, 1, 8, 9, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [2, 3, 3, 3, 3, 3, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 19, 30, 73, 40, 57, 35, 9, 54, 64], [0, 0, 1, 0, 0, 0, 1, 1], [1, 0, 0, 1, 1, 0], [0, 7, 6, 4], [7, 1], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [53, 97, 13, 96, 41]], "fitness": -0.21314285695552826, "mapping_values": [1, 4, 4, 3, 1, 1, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(grad), tf.math.add(alpha, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.4835445895060855, 2.289273840577107, 2.3012041227456335, 2.2857866552070996, 2.3061821878924738, 2.2911012193797964], "accuracy": [0.20221899449825287, 0.1208558976650238, 0.10619468986988068, 0.18570862710475922, 0.10157178342342377, 0.14753665030002594], "val_loss": [1.6062581539154053, 1.9735281808035714, 1.9587111473083496, 1.9780223029000419, 1.9733028411865234, 1.7797840663364954], "val_accuracy": [0.24400000274181366, 0.10066666454076767, 0.20233333110809326, 0.09799999743700027, 0.09799999743700027, 0.23533333837985992]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [1, 5, 6, 6, 6, 8, 1, 1, 8, 9, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [0, 3, 3, 3, 3, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 19, 30, 73, 40, 57, 35, 9, 54, 64], [0, 0, 1, 0, 0, 0, 1, 1], [1, 0, 0, 1, 1, 0], [0, 7, 6, 4], [7, 0], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [53, 97, 13, 96, 41]], "fitness": -0.11371428519487381, "mapping_values": [1, 4, 4, 3, 1, 1, 16, 16, 9, 7, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), grad)), grad))), tf.math.add(beta, grad))), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.8404376532313154, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.26535463333129883, 0.10210011899471283, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [4.426528521946499, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [9, 5, 6, 3, 3, 8, 6, 2, 8, 9, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [3, 3, 2, 3, 3, 0, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 19, 30, 73, 40, 57, 35, 9, 54, 64], [0, 0, 1, 0, 0, 0, 1, 1], [1, 0, 0, 1, 1, 0], [0, 7, 6, 4], [2, 1], [64], [0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [53, 97, 13, 96, 41]], "fitness": -0.10542856901884079, "mapping_values": [1, 4, 4, 3, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 5, 2, 3, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(grad), tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.multiply(beta, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [283901.15745156526, 2.306099925641418, 1985785362058.2678, 2.303966659895575, 2.30337373219335, 2.3030290822185435, 2.3029642755077373], "accuracy": [0.09589222073554993, 0.09377889335155487, 0.09642054885625839, 0.09747721254825592, 0.09840179979801178, 0.09549596905708313, 0.09536388516426086], "val_loss": [1.9773710795811243, 10740589733010.285, 1.9750237464904785, 1.974388599395752, 1.9740344456263952, 1.9738749776567732, 1.9738046101161413], "val_accuracy": [0.10366666316986084, 0.109333336353302, 0.09566666930913925, 0.09566666930913925, 0.0949999988079071, 0.0949999988079071, 0.0949999988079071]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [1, 5, 6, 6, 6, 6, 1, 0, 8, 9, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [3, 3, 3, 3, 2, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [72, 19, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [1, 0, 0, 1, 1, 0], [0, 7, 6, 4], [7, 1], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [53, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 12, 12, 6, 6, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.subtract(grad, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), beta)), alpha)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07211729139089584, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 9, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [1, 5, 2, 3, 6, 4, 1, 1, 8, 9, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [0, 3, 3, 3, 3, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 19, 30, 73, 40, 57, 35, 9, 54, 64], [0, 0, 1, 0, 0, 0, 1, 1], [1, 0, 0, 1, 1, 0], [0, 7, 6, 4], [7, 0], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [53, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 1, 17, 17, 9, 8, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), grad)), grad)), tf.math.add(beta, grad)), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06960771232843399, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [92, 66, 89, 50, 85, 46], [1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [1, 5, 6, 3, 3, 8, 6, 2, 8, 9, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [3, 3, 2, 3, 3, 0, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 19, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [1, 0, 0, 1, 1, 0], [0, 7, 6, 4], [7, 1], [64], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 3, 9, 3, 0, 1, 3, 2, 2, 5], [0, 1, 0, 0, 0, 2, 2], [53, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 3, 1, 1, 19, 19, 12, 7, 2, 1, 0, 0, 0, 0, 7, 3, 4, 3], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(grad), tf.math.add(alpha, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.square(grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(beta, tf.math.sqrt(grad))), tf.math.add(beta, grad))))), tf.math.add(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.multiply(alpha, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3028221309240138, 2.30258530487773, 2.3025852733867014, 2.3025853139156554, 2.30258530487773, 2.3025852329522203], "accuracy": [0.09377889335155487, 0.09787346422672272, 0.09496764093637466, 0.09747721254825592, 0.09998679161071777, 0.09457138925790787], "val_loss": [1.973644460950579, 1.9736443247113908, 1.973644460950579, 1.973644460950579, 1.973644529070173, 1.973644460950579], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.09566666930913925, 0.10366666316986084, 0.10199999809265137, 0.0949999988079071]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [1, 5, 2, 3, 6, 4, 1, 1, 3, 9, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [2, 3, 2, 0, 3, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 19, 30, 73, 40, 57, 35, 9, 54, 64], [0, 0, 1, 0, 0, 0, 1, 1], [1, 0, 0, 1, 1, 0], [0, 7, 6, 4], [7, 0], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 2, 0, 2, 2], [53, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(grad)))))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, beta), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 8, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [15, 66, 89, 50, 85, 46], [1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [2, 6, 6, 6, 2, 6, 1, 1, 9, 9, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [2, 3, 3, 0, 3, 1, 1, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 19, 30, 73, 40, 57, 35, 9, 54, 64], [0, 0, 1, 0, 0, 0, 1, 1], [1, 0, 0, 1, 1, 0], [0, 7, 6, 4], [1, 1], [64], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [53, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 17, 17, 9, 8, 2, 1, 1, 0, 1, 0, 7, 4, 3, 2], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, beta), tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))), grad)), tf.math.add(beta, alpha)), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.multiply(tf.math.multiply(alpha, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3357315512853543, 2.3665647486559607, 2.3512896033420443, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.044644035398960114, 0.025756174698472023, 0.044644035398960114, 0.0936468094587326, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.035597256251744, 2.010627474103655, 2.0441891125270297, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.006666666828095913, 0.02133333310484886, 0.04933333396911621, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [15, 66, 89, 50, 85, 46], [1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [1, 5, 6, 6, 6, 8, 1, 1, 8, 9, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [0, 3, 3, 3, 1, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 19, 30, 73, 40, 57, 35, 9, 54, 64], [0, 0, 1, 0, 0, 0, 1, 1], [1, 0, 0, 1, 1, 0], [0, 7, 6, 4], [7, 0], [64], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 9, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [53, 96, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 16, 16, 9, 7, 1, 1, 1, 0, 1, 0, 3, 2, 1, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(grad))))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.square(tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad))), grad))))), tf.math.add(beta, alpha))), tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 1, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [88, 66, 89, 50, 85, 46], [1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [1, 5, 6, 3, 6, 4, 4, 1, 8, 9, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [2, 3, 2, 3, 3, 3, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 19, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [1, 0, 0, 1, 1, 0], [0, 7, 6, 4], [7, 1], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [53, 97, 13, 96, 41]], "fitness": -0.04857143014669418, "mapping_values": [1, 4, 4, 3, 1, 1, 4, 4, 2, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, beta), tf.math.square(tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.753615853556899, 2.6799489918039807, 5967.266862579545, NaN, NaN, NaN, NaN], "accuracy": [0.20459648966789246, 0.1332716941833496, 0.10276053100824356, 0.10276053100824356, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.376425470624651, 2.0295004163469588, 1781371577490.2856, NaN, NaN, NaN, NaN], "val_accuracy": [0.09566666930913925, 0.1599999964237213, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [5, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [3, 66, 89, 50, 85, 46], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [1, 5, 6, 6, 6, 8, 1, 1, 8, 9, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [0, 3, 3, 3, 3, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 19, 30, 73, 40, 57, 35, 9, 54, 64], [0, 0, 1, 0, 0, 0, 1, 1], [1, 0, 0, 1, 1, 0], [0, 7, 6, 4], [7, 0], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [53, 97, 13, 96, 41]], "fitness": -0.03628571331501007, "mapping_values": [1, 2, 2, 1, 1, 0, 16, 16, 9, 7, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), grad)), grad))), tf.math.add(beta, grad))), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3030679121686326, 2.3049457877807455, 2.307445850953009, 2.3069557280131714, 2.309024006636104, 2.3132693719366335], "accuracy": [0.08955223858356476, 0.08268392831087112, 0.08492933213710785, 0.08994849026203156, 0.08360850811004639, 0.07607977837324142], "val_loss": [1.9719575473240443, 1.9732302938188826, 1.9747973850795202, 1.976775782448905, 1.978611741747175, 1.9806643213544572], "val_accuracy": [0.03200000151991844, 0.02500000037252903, 0.020999999716877937, 0.020999999716877937, 0.025333333760499954, 0.03133333474397659]}}]