[{"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [4, 6, 3, 3, 0, 2, 3, 9, 8, 3, 7, 2, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [1, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0, 0, 1, 5, 0, 2, 1, 2, 2, 0, 5, 1], [85, 77, 30, 73, 40, 57, 35, 9, 54, 64], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [0, 1, 8, 4], [4, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8434285521507263, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 4, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, grad))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.0991477684621342, 1.1695114588850855, 0.8271113150013657, 0.7267188375116796, 0.6763835281838263, 0.6236426548368312, 0.5898246039504688, 0.5490226032569849, 0.5227486469002133, 0.49667368884162816, 0.49061248526360934, 0.46071731184121245, 0.4415930082194636, 0.428279361129988, 0.4087686281886949, 0.4031849345235367, 0.3965253238633261, 0.38531601752555916, 0.38194564758762944, 0.35517410047695763, 0.3491698644337889, 0.33876058388820746, 0.3267976865162545, 0.3191474290642646, 0.3098549422429238, 0.3092213867166023, 0.2927215658379206, 0.2819197600535933, 0.2875169317294987, 0.2698439184692888, 0.2653039216074127, 0.2641527405102901, 0.25244836595631265, 0.2555848509939261, 0.2518429686648105, 0.23588656399779395, 0.2335500162920979, 0.2240038051553737, 0.22036178381908147, 0.21918230975474096], "accuracy": [0.2969224750995636, 0.5885615944862366, 0.6926429867744446, 0.7251353859901428, 0.7477215528488159, 0.7687227725982666, 0.7816668748855591, 0.7910447716712952, 0.802271842956543, 0.8183859586715698, 0.8183859586715698, 0.8276317715644836, 0.8370096683502197, 0.8426892161369324, 0.8519350290298462, 0.8531237840652466, 0.8531237840652466, 0.8545766472816467, 0.8564258217811584, 0.8683133125305176, 0.8746532797813416, 0.8710870146751404, 0.8757099509239197, 0.8794082403182983, 0.8844274282455444, 0.8815215826034546, 0.8910315632820129, 0.8949940800666809, 0.8918240666389465, 0.8945978283882141, 0.9012019634246826, 0.9005415439605713, 0.9017302989959717, 0.9015982151031494, 0.9085986018180847, 0.9097873568534851, 0.9115044474601746, 0.9084665179252625, 0.9144102334976196, 0.9145423173904419], "val_loss": [1.0487781592777796, 0.6556464093072074, 0.571936913899013, 0.5275292907442365, 0.4960441929953439, 0.4765094518661499, 0.44672623702457975, 0.4256569913455418, 0.41354477405548096, 0.3937833734921047, 0.3857437457357134, 0.37804669993264334, 0.3600354620388576, 0.3525334341185434, 0.3455307313374111, 0.3556289076805115, 0.3414407457624163, 0.33874395063945223, 0.3313255565507071, 0.3334977286202567, 0.3281118358884539, 0.3270419921193804, 0.32210331303732737, 0.31779508931296213, 0.320144670350211, 0.3162609338760376, 0.3167670709746225, 0.3324435693877084, 0.32076858622687204, 0.3239880119051252, 0.3254696386201041, 0.3206426075526646, 0.3139590791293553, 0.3214292526245117, 0.3151882290840149, 0.316518315247127, 0.3197107229913984, 0.3279944658279419, 0.34795371123722624, 0.32270319972719463], "val_accuracy": [0.5619999766349792, 0.7286666631698608, 0.7476666569709778, 0.7673333287239075, 0.7833333611488342, 0.7910000085830688, 0.8090000152587891, 0.8183333277702332, 0.8226666450500488, 0.8336666822433472, 0.8410000205039978, 0.8416666388511658, 0.8576666712760925, 0.8519999980926514, 0.8573333621025085, 0.8526666760444641, 0.8566666841506958, 0.8583333492279053, 0.8579999804496765, 0.8643333315849304, 0.8603333234786987, 0.8683333396911621, 0.8673333525657654, 0.8696666955947876, 0.8646666407585144, 0.8646666407585144, 0.875, 0.8663333058357239, 0.8709999918937683, 0.8736666440963745, 0.8683333396911621, 0.8786666393280029, 0.875333309173584, 0.8709999918937683, 0.8813333511352539, 0.8773333430290222, 0.8759999871253967, 0.8776666522026062, 0.875333309173584, 0.8799999952316284]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 5, 2, 2, 8, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 39, 40, 49, 25], [0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 6, 2, 0, 2, 8, 2, 9, 2, 4, 7, 8, 7, 4, 5, 9, 8, 2, 8, 8, 5, 7, 6, 1, 6, 1, 6], [1, 3, 3, 3, 3, 3, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3], [85, 2, 63], [0, 0, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [5, 1, 8, 4], [4, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.840571403503418, "mapping_values": [1, 10, 10, 6, 4, 2, 3, 3, 1, 2, 0, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.sqrt(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(alpha, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9111685955198512, 1.1766957214180631, 0.8289906204478962, 0.6904627438140126, 0.6259452401056518, 0.5870556779872032, 0.544162185680849, 0.5115272935276663, 0.48089183736093105, 0.46692862724898876, 0.4509176566041519, 0.44765228649109046, 0.41732589283859917, 0.39606486567338034, 0.3787257116996003, 0.367747576501092, 0.35810641676144217, 0.34822955656722393, 0.34417353492717795, 0.3270319503815797, 0.3239836002959709, 0.3218528019627717, 0.3030261932040061, 0.2812087013185804, 0.28539990936728865, 0.2806371419208712, 0.2645472814268078, 0.26131136236551683, 0.2650889951862191, 0.25997560050399027, 0.2459250627361851, 0.23313732078763172, 0.23705032719376695, 0.22896818941445035, 0.22840487105365223, 0.21864119190006776], "accuracy": [0.35768061876296997, 0.6040153503417969, 0.6870955228805542, 0.7359662055969238, 0.7675340175628662, 0.778232753276825, 0.7922335267066956, 0.8096684813499451, 0.817989706993103, 0.8269713521003723, 0.8337075710296631, 0.8374059200286865, 0.8412362933158875, 0.8548408150672913, 0.8594637513160706, 0.8650112152099609, 0.8665962219238281, 0.8716153502464294, 0.869502067565918, 0.8796724081039429, 0.8811253309249878, 0.8820499181747437, 0.8856161832809448, 0.8936732411384583, 0.8943336606025696, 0.8901069760322571, 0.8986923694610596, 0.8988244533538818, 0.9025228023529053, 0.9015982151031494, 0.9055606722831726, 0.9129573106765747, 0.9145423173904419, 0.91124027967453, 0.9121648669242859, 0.91559898853302], "val_loss": [1.3511294637407576, 0.6458772250584194, 0.5653160469872611, 0.5046118157250541, 0.46411003385271343, 0.4475536687033517, 0.42387282848358154, 0.4010226385934012, 0.38300893136433195, 0.3844062515667507, 0.37731925930295673, 0.3708425079073225, 0.3546581268310547, 0.35023352078029085, 0.3353728822299412, 0.33441886731556486, 0.3416041306086949, 0.33259410517556326, 0.32672366925648283, 0.3255649038723537, 0.3265800986971174, 0.32653017554964336, 0.32465031317302157, 0.3292161907468523, 0.32349054302488056, 0.3240300842693874, 0.31578876291002544, 0.32844055550439016, 0.3273640275001526, 0.3353808947971889, 0.3171861342021397, 0.32573178836277555, 0.3206024851117815, 0.3228170020239694, 0.32826727628707886, 0.3369459424700056], "val_accuracy": [0.5009999871253967, 0.7126666903495789, 0.7316666841506958, 0.7739999890327454, 0.7956666946411133, 0.8053333163261414, 0.8206666707992554, 0.8286666870117188, 0.843999981880188, 0.8353333473205566, 0.8379999995231628, 0.8420000076293945, 0.8550000190734863, 0.859666645526886, 0.8659999966621399, 0.8643333315849304, 0.8610000014305115, 0.862333357334137, 0.8646666407585144, 0.8686666488647461, 0.8676666617393494, 0.8686666488647461, 0.8743333220481873, 0.8726666569709778, 0.8713333606719971, 0.8736666440963745, 0.874666690826416, 0.878000020980835, 0.874666690826416, 0.8706666827201843, 0.8823333382606506, 0.8823333382606506, 0.8823333382606506, 0.8823333382606506, 0.8766666650772095, 0.8736666440963745]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [4, 6, 3, 3, 0, 2, 3, 9, 8, 3, 7, 2, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [1, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0, 0, 1, 5, 0, 2, 1, 2, 2, 0, 5, 1], [85, 77, 30, 73, 40, 57, 35, 9, 54, 64], [0, 0, 1, 0, 0, 0, 1, 1], [1, 0, 1, 1, 0], [0, 1, 8, 4], [4, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8277142643928528, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.099152835352924, 1.1695117952407643, 0.8275947843434364, 0.7255512831737305, 0.674693101102083, 0.6212758198783949, 0.5849816428908047, 0.5472897596803906, 0.5243740937280271, 0.4986199345161666, 0.49150361518078256, 0.4630041472380581, 0.43899070950877694, 0.42814717558018833, 0.40951498890234855, 0.40011271252970354, 0.3917404243211075, 0.3777001755758126, 0.37821134127771944, 0.3530105523358656, 0.3461451831746961, 0.33133811782049133, 0.3278678465300484, 0.30964921019049274, 0.3098382860158397, 0.3050092358898414, 0.29124790629643366, 0.28691872894535636], "accuracy": [0.2969224750995636, 0.5885615944862366, 0.6930392384529114, 0.7230220437049866, 0.7474573850631714, 0.7689869403839111, 0.780610203742981, 0.7930260300636292, 0.8009510040283203, 0.8131026029586792, 0.8189142942428589, 0.8276317715644836, 0.8387266993522644, 0.8413683772087097, 0.8524633646011353, 0.8544445633888245, 0.8506141901016235, 0.8569541573524475, 0.8594637513160706, 0.8684453964233398, 0.8693699836730957, 0.8750495314598083, 0.8778232932090759, 0.8813894987106323, 0.8854840993881226, 0.8860124349594116, 0.8889182209968567, 0.8918240666389465], "val_loss": [1.0488032613481795, 0.6564622095652989, 0.5745119197028024, 0.5253503492900303, 0.4957883358001709, 0.4735688992909023, 0.4461613893508911, 0.42516192368098665, 0.4143325686454773, 0.39883618695395334, 0.39063624824796406, 0.3736117056437901, 0.3600386806896755, 0.352632931300572, 0.3426541345460074, 0.356691266809191, 0.34151398284094675, 0.3388106993266514, 0.33166640996932983, 0.3356995327132089, 0.3244386485644749, 0.3248144047600882, 0.31976592540740967, 0.3212459087371826, 0.3166078414235796, 0.31602345194135395, 0.32626345327922274, 0.33048148666109356], "val_accuracy": [0.5619999766349792, 0.7246666550636292, 0.7456666827201843, 0.7689999938011169, 0.7820000052452087, 0.7923333048820496, 0.8083333373069763, 0.8206666707992554, 0.824999988079071, 0.8286666870117188, 0.8376666903495789, 0.8453333377838135, 0.8529999852180481, 0.8553333282470703, 0.856333315372467, 0.8486666679382324, 0.8579999804496765, 0.8583333492279053, 0.8569999933242798, 0.8573333621025085, 0.8643333315849304, 0.8703333139419556, 0.8723333477973938, 0.8679999709129333, 0.8700000047683716, 0.8709999918937683, 0.8683333396911621, 0.8690000176429749]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 6, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 37, 40, 49, 25], [0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 6, 3, 3, 0, 2, 3, 2, 8, 3, 7, 2, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [1, 3, 3, 3, 3, 5, 0, 3, 3, 4, 4, 0], [82, 7, 63], [0, 0, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [0, 1, 8, 4], [4, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.6905714273452759, "mapping_values": [1, 16, 16, 10, 6, 4, 27, 27, 15, 12, 3, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), alpha)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.add(alpha, tf.math.square(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(alpha, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(tf.math.add(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), grad))))), tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))))), tf.math.add(beta, grad))))), tf.math.add(beta, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9193469453969605, 1.0156986823706753, 0.8166318765059438, 0.7101138001655969, 0.6934353238193823, 65.58221994153638, NaN, NaN, NaN], "accuracy": [0.3559635579586029, 0.6347906589508057, 0.6851142644882202, 0.7199841737747192, 0.7415136694908142, 0.5698058605194092, 0.0952318087220192, 0.09998679161071777, 0.09998679161071777], "val_loss": [0.8444538116455078, 0.6163914033344814, 0.5892029830387661, 0.5069301979882377, 0.6035771540233067, 90519.87946428571, NaN, NaN, NaN], "val_accuracy": [0.612333357334137, 0.7260000109672546, 0.7163333296775818, 0.7746666669845581, 0.7580000162124634, 0.09799999743700027, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [9, 32, 5, 49, 25], [1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [4, 9, 3, 3, 0, 2, 3, 4, 8, 3, 7, 6, 2, 9, 2, 5, 8, 6, 4, 6, 5, 8, 9, 9, 6, 5, 2, 2, 3, 3, 6], [1, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0, 0, 1, 5, 0, 2, 1, 2, 2, 0, 5, 1], [85, 77, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [8, 1, 8, 4], [4, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.3822857141494751, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3031643242206807, 2.30052644755185, 2.300712666790546, 2.300466576618935, 2.298273306544179, 2.2979222859342445, 2.2971986635344424, 2.297907775812901, 2.297798180923391, 2.296283616806774, 2.2972129159961883, 2.2948965447186134, 2.294184183668168, 2.294498764371135, 2.2920611389970356, 2.2939617472585514, 2.2933975175513157, 2.2916423358685463, 2.2907305134758267, 2.2917851192477894, 2.2900290388740396, 2.291050683647461, 2.290009639329599, 2.2876858817052534, 2.287595058838453, 2.2869549643141545, 2.286688720576909, 2.285708476492222, 2.2869244095766157, 2.2842583568451067, 2.2847602359843275, 2.282842029024345, 2.2825481556882443, 2.282247257868785, 2.282457872861097, 2.280603770330487, 2.2811519993200213, 2.2783239250248606, 2.2801168431002528, 2.2785760214489055, 2.279163808272169, 2.27762566304336, 2.276539345427495, 2.2772922455721276, 2.2752520942637604, 2.2765065239027207, 2.2739803986920344, 2.272758805347141, 2.2742461359275725, 2.2734413739003996, 2.273037193599646, 2.2715152419395985, 2.2721228506964715, 2.270666430387294, 2.271051821660183, 2.2696425269513223, 2.268749024086719, 2.269660484080679, 2.267013797166719, 2.2665251744594936, 2.2680978380441825, 2.266057470203501, 2.266936469811805, 2.2647172293690105, 2.2636487346047565, 2.2645701340806483, 2.2635444718077355, 2.2611900962118647, 2.2622212997721705, 2.2601911229322678, 2.261056629705423, 2.2601948804103342, 2.259308392581781, 2.2575501905629474, 2.2586292813655926, 2.2571916037924677, 2.2559087051297886, 2.2549538351620004, 2.254798288941147, 2.2549048545826316, 2.2539267250260564, 2.2537806403162994, 2.253928321747181, 2.253786600812268, 2.2522583581264133, 2.2533291369979693, 2.2500852641333773, 2.250382128172484, 2.247749976604181, 2.2493260629172998, 2.247166145841412, 2.246459723998999, 2.2451726844864686, 2.2457257715025443, 2.245757012681529, 2.2434299172600576, 2.24337571231901, 2.242452699305784, 2.240743737541343, 2.24068074698115], "accuracy": [0.08928807079792023, 0.09179764986038208, 0.09576013684272766, 0.09179764986038208, 0.10157178342342377, 0.1026284471154213, 0.09985470771789551, 0.10606260597705841, 0.10421344637870789, 0.10989301651716232, 0.10130762308835983, 0.1138555034995079, 0.10989301651716232, 0.11200633645057678, 0.11570466309785843, 0.10738343745470047, 0.1146479994058609, 0.11702549457550049, 0.12468630075454712, 0.12019548565149307, 0.11728965491056442, 0.120459645986557, 0.12362963706254959, 0.12996962666511536, 0.12732796370983124, 0.12812046706676483, 0.12653546035289764, 0.13842293620109558, 0.12495046854019165, 0.13974376022815704, 0.13670584559440613, 0.13710209727287292, 0.14291374385356903, 0.14278165996074677, 0.14397041499614716, 0.14212125539779663, 0.1460837423801422, 0.15612204372882843, 0.14780081808567047, 0.14912164211273193, 0.15229164063930511, 0.149649977684021, 0.16232994198799133, 0.15559370815753937, 0.15374454855918884, 0.15334829688072205, 0.16616034507751465, 0.1644432693719864, 0.16338661313056946, 0.1670849323272705, 0.17183992266654968, 0.1644432693719864, 0.17038699984550476, 0.17038699984550476, 0.1732928305864334, 0.17223615944385529, 0.17342491447925568, 0.17817988991737366, 0.18557654321193695, 0.18134988844394684, 0.17474573850631714, 0.189274862408638, 0.18174614012241364, 0.1916523575782776, 0.19191652536392212, 0.18914277851581573, 0.18451987206935883, 0.19640734791755676, 0.19984149932861328, 0.20380398631095886, 0.19719983637332916, 0.19799233973026276, 0.2008981704711914, 0.21304979920387268, 0.20921939611434937, 0.20538897812366486, 0.21238937973976135, 0.2071060687303543, 0.21265354752540588, 0.21265354752540588, 0.21754062175750732, 0.2141064554452896, 0.21820102632045746, 0.2172764539718628, 0.22440892457962036, 0.21463479101657867, 0.22586184740066528, 0.2180689424276352, 0.22995641827583313, 0.2242768406867981, 0.2300885021686554, 0.23325848579406738, 0.2324659824371338, 0.228899747133255, 0.23656055331230164, 0.24078720808029175, 0.23114515841007233, 0.24303261935710907, 0.24620261788368225, 0.2456742823123932], "val_loss": [1.9703929083687919, 1.969853060586112, 1.96931791305542, 1.9687767028808594, 1.968238081250872, 1.9676929201398576, 1.9671527317592077, 1.966611453465053, 1.9660699708121163, 1.9655285562787737, 1.9649935449872697, 1.9644582612173898, 1.963921070098877, 1.9633937563214983, 1.9628562246050154, 1.962327344076974, 1.9618006433759416, 1.9612703323364258, 1.960738182067871, 1.960207802908761, 1.9596799441746302, 1.9591592379978724, 1.9586270196097237, 1.958099433353969, 1.957568917955671, 1.9570358821323939, 1.9565035956246513, 1.955972467150007, 1.955439635685512, 1.9549123219081335, 1.9543800354003906, 1.9538472039358956, 1.9533136912754603, 1.9527746609279089, 1.9522431918552943, 1.9517056601388114, 1.9511707850864954, 1.9506293024335588, 1.9500955172947474, 1.9495513098580497, 1.949014391217913, 1.9484741347176688, 1.947929518563407, 1.9473920549665178, 1.9468562943594796, 1.9463133130754744, 1.9457712173461914, 1.9452247619628906, 1.9446802820478166, 1.9441308294023787, 1.94358457837786, 1.9430368287222726, 1.9424936430794852, 1.9419409888131278, 1.9413909912109375, 1.9408367701939173, 1.9402806418282645, 1.9397252627781458, 1.9391687256949288, 1.9386042186192103, 1.938042504446847, 1.937483446938651, 1.9369169643947057, 1.9363510949271066, 1.9357791628156389, 1.9352102960859026, 1.9346333231244768, 1.9340477670942033, 1.9334662982395716, 1.9328779493059431, 1.9322946412222726, 1.9317077909197127, 1.9311211449759347, 1.930533000401088, 1.9299404280526298, 1.9293428829738073, 1.928743771144322, 1.9281415939331055, 1.927532741001674, 1.9269239561898368, 1.9263150351388114, 1.9257067271641322, 1.9250987597874232, 1.9244858196803503, 1.9238671575273787, 1.9232508795601981, 1.9226246561322893, 1.9220024517604284, 1.921367917742048, 1.920738628932408, 1.920093059539795, 1.919454710824149, 1.9188030787876673, 1.9181571687970842, 1.9175031525748116, 1.9168504987444197, 1.916184425354004, 1.915520191192627, 1.914849145071847, 1.9141804831368583], "val_accuracy": [0.04233333468437195, 0.04500000178813934, 0.046666666865348816, 0.05066666752099991, 0.055666666477918625, 0.057999998331069946, 0.06300000101327896, 0.06700000166893005, 0.07100000232458115, 0.07466666400432587, 0.07833333313465118, 0.08266666531562805, 0.08699999749660492, 0.09033333510160446, 0.0976666659116745, 0.10433333367109299, 0.10866666585206985, 0.1146666631102562, 0.11800000071525574, 0.1236666664481163, 0.12966667115688324, 0.13500000536441803, 0.14233332872390747, 0.14766666293144226, 0.15666666626930237, 0.16099999845027924, 0.1653333306312561, 0.1693333387374878, 0.1733333319425583, 0.18000000715255737, 0.18466666340827942, 0.1889999955892563, 0.19499999284744263, 0.20000000298023224, 0.20633333921432495, 0.210999995470047, 0.21666666865348816, 0.22100000083446503, 0.22599999606609344, 0.2316666692495346, 0.23600000143051147, 0.2423333376646042, 0.2486666738986969, 0.2526666522026062, 0.2590000033378601, 0.2626666724681854, 0.26633334159851074, 0.27133333683013916, 0.2750000059604645, 0.2783333361148834, 0.281333327293396, 0.2863333225250244, 0.28833332657814026, 0.2933333218097687, 0.29499998688697815, 0.29766666889190674, 0.3019999861717224, 0.3070000112056732, 0.31066668033599854, 0.3160000145435333, 0.3176666796207428, 0.32233333587646484, 0.3253333270549774, 0.32866665720939636, 0.3336666524410248, 0.3356666564941406, 0.3373333215713501, 0.33933332562446594, 0.3426666557788849, 0.3463333249092102, 0.35066667199134827, 0.35333332419395447, 0.3556666672229767, 0.35766667127609253, 0.3596666753292084, 0.3606666624546051, 0.36399999260902405, 0.36766666173934937, 0.37033334374427795, 0.37066665291786194, 0.3720000088214874, 0.37433332204818726, 0.3766666650772095, 0.3773333430290222, 0.37833333015441895, 0.37933334708213806, 0.3803333342075348, 0.382999986410141, 0.38499999046325684, 0.3869999945163727, 0.38866665959358215, 0.38866665959358215, 0.38999998569488525, 0.39100000262260437, 0.39233332872390747, 0.39399999380111694, 0.39399999380111694, 0.3943333327770233, 0.39399999380111694, 0.3946666717529297]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [2, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [27, 32, 5, 49, 25], [1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 2, 1, 0, 2, 2, 9, 9, 2, 4, 7, 8, 6, 9, 5, 9, 8, 2, 8, 6, 5, 7, 6, 1, 6, 1, 5, 4, 8, 4, 9, 8, 5, 5, 1, 3, 1, 5, 2, 0, 3, 8, 9], [1, 3, 3, 1, 3, 1, 3, 3, 1, 4, 4, 3, 1, 4, 1, 3], [85, 84, 30, 73, 40], [0, 0, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [8, 1, 8, 4], [4, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [2, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 18, 11, 7, 4, 14, 14, 9, 5, 2, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)))))), tf.math.pow(tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.negative(alpha)), tf.math.add(tf.math.add(grad, tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)), tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0], [4, 6, 1, 0, 2, 2, 2, 9, 2, 4, 7, 8, 7, 4, 5, 9, 8, 2, 8, 8, 5, 7, 6, 1, 6, 1, 6], [1, 3, 3, 3, 3, 3, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3], [85, 77, 30, 73, 40], [0, 0, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [8, 1, 8, 4], [4, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 18, 11, 7, 4, 3, 3, 1, 2, 0, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)))))), tf.math.pow(tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, alpha), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 1, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 6, 1, 0, 2, 2, 1, 6, 2, 4, 7, 3, 7, 4, 5, 9, 8, 2, 8, 8, 5, 7, 6, 1, 6, 1, 6], [1, 3, 3, 0, 3, 3, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3], [50, 77, 30, 73, 40], [0, 0, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [8, 1, 8, 4], [1, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 3, 33, 33, 19, 14, 2, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.square(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, tf.math.negative(alpha)), tf.math.add(tf.math.add(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))), tf.math.pow(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, alpha)))), tf.math.pow(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, grad))))))))), tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha))), tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [3.8793380889973195, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.03553031384944916, 0.10117553919553757, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [161.70574951171875, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09833333641290665, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [4, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 2, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 3, 3, 3, 0, 2, 3, 9, 8, 3, 7, 2, 7, 9, 2, 3, 8, 2, 4, 6, 5, 8, 9, 9], [1, 3, 2, 3, 3, 2, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3], [85, 89, 30, 73, 40, 57, 35, 9, 54, 64], [0, 0, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 14, 14, 8, 6, 1, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, grad), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.math.multiply(alpha, grad)), tf.math.negative(beta)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)))), tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, sigma))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 5, 2, 2, 8, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [2, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 37, 40, 49, 25], [1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 6, 1, 0, 2, 0, 2, 9, 2, 4, 7, 8, 7, 4, 5, 9, 8, 2, 8, 8, 5, 7, 6, 1, 6, 1, 6], [1, 3, 3, 3, 3, 5, 0, 3, 1, 4, 4, 0], [85, 77, 30, 73, 40], [1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [0, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 0, 25, 25, 16, 9, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, tf.math.negative(alpha)), tf.math.add(tf.math.add(beta, tf.math.negative(grad)), tf.math.add(beta, tf.math.add(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))))), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(grad, grad)), tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)), tf.math.square(tf.math.add(beta, alpha))))))), tf.math.add(beta, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07951393723487854, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 2, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 6, 1, 0, 2, 2, 0, 9, 2, 4, 4, 8, 7, 4, 5, 9, 8, 2, 8, 8, 5, 7, 6, 1, 6, 1, 6], [1, 3, 3, 3, 3, 5, 3, 1, 1, 4, 4, 0, 0, 1, 5, 0, 2, 1, 2, 2, 0, 5, 1], [85, 77, 30, 73, 40, 57, 35, 9, 54, 64], [0, 0, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [8, 1, 8, 4], [4, 1], [64], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 0, 13, 13, 8, 5, 1, 2, 2, 1, 1, 0, 2, 1, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(grad), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, alpha), tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(grad, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.3051102579293423, 2.3228529551403634, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08506141602993011, 0.07806102186441422, 0.09457138925790787, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9762089593069894, 2.0120863233293806, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.01966666616499424, 0.09966666996479034, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 5, 2, 2, 8, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 37, 40, 49, 25], [0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1], [4, 6, 1, 3, 0, 2, 3, 9, 8, 3, 7, 2, 7, 9, 2, 9, 8, 2, 4, 6, 5, 8, 9, 9], [3, 3, 3, 2, 2, 5, 0, 3, 1, 4, 4, 0], [85, 80, 63, 13, 48, 84, 18], [1, 0, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [0, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [16.312219194496123, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.040945712476968765, 0.1022322028875351, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [305632.64285714284, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [4, 6, 3, 3, 0, 2, 3, 9, 8, 3, 7, 2, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [1, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0, 0, 1, 5, 0, 2, 1, 2, 2, 0, 5, 1], [85, 77, 30, 73, 40, 57, 35, 9, 54, 64], [0, 0, 1, 0, 0, 0, 1, 1], [1, 0, 1, 1, 0], [0, 1, 8, 4], [4, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 18, 11, 7, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)))))), tf.math.pow(tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [94, 32, 5, 49, 25], [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0], [4, 2, 1, 2, 2, 2, 2, 9, 2, 4, 7, 8, 6, 5, 5, 9, 8, 2, 8, 6, 5, 7, 6, 1, 6, 1, 5, 4, 8, 4, 9, 8, 5, 5, 1, 3, 1, 5, 2, 0, 3, 8, 9], [1, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0], [85, 77, 30, 73, 40], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [0, 1, 8, 4], [4, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [3, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 3, 3, 1, 2, 0, 4, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07951393723487854, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [59, 32, 5, 49, 25], [0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [9, 6, 3, 3, 0, 2, 3, 9, 8, 8, 7, 8, 2, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [1, 2, 3, 3, 3, 3, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3], [85, 77, 30, 73, 40], [0, 1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [8, 1, 8, 4], [0, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [656.6485142533364, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.19059570133686066, 0.10210011899471283, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [108768692610194.28, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09666666388511658, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [0, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [27, 32, 5, 49, 25], [1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [4, 6, 3, 3, 0, 2, 3, 9, 8, 3, 7, 2, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [2, 3, 3, 3, 3, 3, 3, 2, 1, 3, 4, 3, 1, 4, 1, 3, 2, 4, 3, 4, 3, 1, 3], [85, 77, 30, 73, 40, 57, 35, 9, 54, 64], [0, 1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [0, 1, 8, 4], [6, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 18, 11, 7, 5, 1, 1, 0, 1, 0, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))))), tf.math.pow(tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [6, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 6, 1, 0, 2, 2, 2, 9, 2, 4, 7, 8, 7, 4, 5, 9, 8, 2, 8, 8, 5, 7, 6, 1, 6, 1, 6], [1, 3, 3, 3, 3, 3, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3], [85, 77, 30, 73, 40], [0, 0, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [8, 1, 8, 4], [4, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 32, 32, 21, 11, 2, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.negative(grad), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.add(tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)))))), tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.square(grad), tf.math.add(beta, grad)), tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, beta)), tf.math.sqrt(tf.math.add(beta, alpha))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10989301651716232, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [0, 2, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 6, 1, 0, 2, 2, 2, 9, 2, 2, 7, 8, 7, 4, 5, 9, 8, 2, 8, 8, 5, 7, 6, 1, 6, 1, 6], [1, 3, 3, 3, 0, 3, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3], [85, 77, 30, 73, 40], [0, 0, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [8, 1, 8, 4], [4, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.09885714203119278, "mapping_values": [1, 3, 3, 2, 1, 1, 26, 26, 16, 10, 3, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, alpha), grad), tf.math.negative(tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(grad, tf.math.pow(grad, beta))))), tf.math.square(tf.math.add(beta, alpha))), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [8651869085.737537, 1.5924122872045066e+17, 5.680615687908154e+24, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09708096832036972, 0.10553427785634995, 0.09972262382507324, 0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [463155157869.7143, 8.232955837663787e+18, 4.3168737385802106e+26, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10499999672174454, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 2, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 37, 40, 49, 25], [1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 3, 6, 2, 0, 4, 0, 9, 3, 3, 9, 0, 3, 9, 2, 9, 8, 2, 4, 6, 5, 8, 9, 9], [1, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0], [85, 80, 63, 13, 48], [1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [0, 1, 8, 4], [4, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.07371428608894348, "mapping_values": [1, 4, 4, 2, 2, 0, 20, 20, 14, 6, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.negative(tf.math.pow(grad, tf.math.add(beta, tf.math.negative(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, grad))), tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.multiply(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.303042818353381, 2.3002424085806266, 2.300356705112228, 2.3004808101860634, 2.299020579367927, 2.299123899669947, 2.299084618484906, 2.3001272506434227, 2.299711571330518, 2.299305966753513, 2.2999585188768794, 2.2992736930151847, 2.299958684708637, 2.3001589737611123, 2.2991391122931613], "accuracy": [0.08902391046285629, 0.09100515395402908, 0.09430722147226334, 0.0940430611371994, 0.09919429570436478, 0.09945846349000931, 0.10077928751707077, 0.10302469879388809, 0.09985470771789551, 0.10091137140989304, 0.09879804402589798, 0.09826971590518951, 0.09919429570436478, 0.10210011899471283, 0.09840179979801178], "val_loss": [1.9703033311026437, 1.9698352132524763, 1.9695637566702706, 1.969561985560826, 1.9696975435529436, 1.9697667530604772, 1.96980163029262, 1.9697450229099818, 1.9696986334664481, 1.9698151179722376, 1.970048086983817, 1.9702729497637068, 1.9705566678728377, 1.9707228115626745, 1.970965998513358], "val_accuracy": [0.04633333161473274, 0.05166666582226753, 0.05966666713356972, 0.06466666609048843, 0.06833333522081375, 0.07233333587646484, 0.07466666400432587, 0.07666666805744171, 0.0793333351612091, 0.0806666687130928, 0.0793333351612091, 0.07533333450555801, 0.070333331823349, 0.07100000232458115, 0.06666667014360428]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 3, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [27, 32, 5, 49, 25], [1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 1, 1, 0, 2, 4, 2, 9, 2, 4, 7, 8, 7, 4, 5, 9, 8, 2, 8, 8, 5, 7, 6, 1, 6, 1, 6], [1, 0, 3, 3, 3, 3, 3, 2, 1, 3, 4, 3, 1, 4, 1, 3], [85, 69, 30, 73, 40], [0, 0, 1, 0, 0, 0, 1, 1], [1, 1, 1, 1, 0], [8, 1, 8, 4], [4, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.03971428424119949, "mapping_values": [1, 17, 17, 10, 7, 4, 14, 14, 8, 6, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.square(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.subtract(tf.math.subtract(tf.math.add(beta, tf.math.negative(alpha)), tf.math.add(beta, tf.math.add(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), grad))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.303511868945328, 2.3020972516227785, 2.3041428844170753, 2.3064406393950785, 2.3073678185139603, 2.310950421606781], "accuracy": [0.08849557489156723, 0.08809932321310043, 0.08942015469074249, 0.07845727354288101, 0.0816272646188736, 0.0730418711900711], "val_loss": [1.9712841170174735, 1.9722261428833008, 1.973743166242327, 1.975830010005406, 1.978478159223284, 1.9816997391836983], "val_accuracy": [0.03733333200216293, 0.03400000184774399, 0.026333333924412727, 0.01966666616499424, 0.014000000432133675, 0.01133333332836628]}}]