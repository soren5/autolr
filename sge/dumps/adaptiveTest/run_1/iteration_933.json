[{"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [1, 2, 1, 2, 6, 2, 2, 1, 2, 2, 6, 3, 8, 2, 0, 0, 2, 2, 2, 6, 1, 3, 9, 0, 1, 2, 0, 3, 2, 4, 8, 6, 0, 0, 8, 3, 7, 5, 3, 0, 0, 1, 6, 0, 2], [4, 3, 3, 1, 0, 3, 3, 3, 3, 3, 2, 3, 2, 3, 1, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 0, 4, 2, 1, 4, 4], [47, 9, 52, 66, 30, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8437142968177795, "mapping_values": [1, 4, 4, 2, 2, 1, 68, 68, 40, 28, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(grad, grad), tf.math.subtract(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))))), tf.math.negative(grad))), tf.math.negative(tf.math.add(beta, grad)))), grad))))), tf.math.add(beta, grad)), tf.math.add(beta, beta))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.subtract(tf.math.add(beta, grad), tf.math.multiply(alpha, tf.math.add(beta, beta)))), tf.math.add(beta, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))), tf.math.negative(grad)))))), tf.math.subtract(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.multiply(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.negative(tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.square(alpha)), alpha), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha)))))))))))), grad))))))))))), tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.016919543226366, 1.5193274803543293, 1.1931631883074658, 0.8706403517719934, 0.8495390669245525, 0.7630907373736326, 0.7715004622393028, 0.7178928078504176, 0.6911003937920905, 0.6623073645854245, 0.6332286819490884, 0.6254113379911646, 0.5952288565807622, 0.6102704773284913, 0.581967227872431, 0.5784571878567757, 0.5537255620439968, 0.5347754893096966, 0.5405613575881073, 0.5182961221573265, 0.5052733989345116, 0.4928791915043045, 0.4867220201024353, 0.4808992473692737, 0.47787732623193746, 0.4595185596047612, 0.4767479319865945, 0.4475855538007716, 0.43065451688817497, 0.4288812684085407, 0.4485696648145317, 0.42858413856940547, 0.41503058157230427, 0.40448816207028054, 0.39182405819541444, 0.3929175923859769, 0.38259168230405555, 0.39717708927781087, 0.36504850129661714, 0.3715540425746889, 0.37073533844954115, 0.3663010307826449, 0.35356552266898233, 0.3588947205810562, 0.34635980480603096, 0.33976807218453886, 0.338673153585368, 0.3368971533920818, 0.31862194672976785, 0.31454463470188415, 0.3151383338870783, 0.31177066174228635, 0.31156143313464457, 0.31021960362498757, 0.31961294131240575, 0.30237432788423246, 0.3123204085088724, 0.29210963424454117, 0.283287889795879, 0.28788115827556393], "accuracy": [0.33047154545783997, 0.5106326937675476, 0.5954299569129944, 0.6836613416671753, 0.6897371411323547, 0.7162858247756958, 0.7152291536331177, 0.7279091477394104, 0.7396644949913025, 0.7520803213119507, 0.7647602558135986, 0.7638356685638428, 0.7730814814567566, 0.7709681391716003, 0.7844406366348267, 0.7792893648147583, 0.7926297783851624, 0.8012151718139648, 0.7947431206703186, 0.8057059645652771, 0.8128384351730347, 0.8169330358505249, 0.8230088353157043, 0.8273676037788391, 0.8185180425643921, 0.8276317715644836, 0.8277638554573059, 0.8341038227081299, 0.8451988101005554, 0.8453308939933777, 0.8367455005645752, 0.8404437899589539, 0.8438779711723328, 0.8479725122451782, 0.854708731174469, 0.8577466607093811, 0.8573504090309143, 0.8549728989601135, 0.8652753829956055, 0.8625016212463379, 0.8617091774940491, 0.8622375130653381, 0.8650112152099609, 0.8647470474243164, 0.8692378997802734, 0.8751816153526306, 0.8770307898521423, 0.874389111995697, 0.8833707571029663, 0.8844274282455444, 0.8779553771018982, 0.8853520154953003, 0.8835028409957886, 0.8799365758895874, 0.8795403242111206, 0.8869370222091675, 0.883238673210144, 0.8910315632820129, 0.8901069760322571, 0.8885219693183899], "val_loss": [1.385162694113595, 1.155174902507237, 0.6601890666144234, 0.6584318365369525, 0.5941880430494036, 0.6011048044477191, 0.5281871386936733, 0.519709655216762, 0.5065011807850429, 0.484511137008667, 0.5157503230231149, 0.4783382756369455, 0.5394106081553868, 0.45744761398860384, 0.44722936834607807, 0.442736063684736, 0.4379730905805315, 0.45551228523254395, 0.4625602790287563, 0.4243010793413435, 0.4173427564757211, 0.3996159178870065, 0.41385350057056974, 0.3818289978163583, 0.39689496585300993, 0.44392623220171246, 0.39156155926840647, 0.3677421382495335, 0.38035967520305086, 0.3834320902824402, 0.4324214117867606, 0.35785880259105135, 0.3546725596700396, 0.36181654248918804, 0.38495175327573505, 0.34564806733812603, 0.3447339449610029, 0.34171111243111746, 0.3490713153566633, 0.3858824372291565, 0.4131173150879996, 0.3406845842088972, 0.339595411505018, 0.3353646993637085, 0.33464752776282175, 0.33895765032087055, 0.35286520208631245, 0.3283116732324873, 0.33637623276029316, 0.3449029326438904, 0.33089288643428255, 0.3273959074701582, 0.3299257584980556, 0.35852857146944317, 0.3283368604523795, 0.3484942317008972, 0.3181133440562657, 0.32500683409827097, 0.3397489445550101, 0.3314595563071115], "val_accuracy": [0.4723333418369293, 0.5716666579246521, 0.7283333539962769, 0.7006666660308838, 0.7336666584014893, 0.7283333539962769, 0.765999972820282, 0.7749999761581421, 0.7676666378974915, 0.7910000085830688, 0.7586666941642761, 0.7900000214576721, 0.7506666779518127, 0.8009999990463257, 0.8103333115577698, 0.8083333373069763, 0.812333345413208, 0.793666660785675, 0.7883333563804626, 0.8176666498184204, 0.8223333358764648, 0.8320000171661377, 0.8246666789054871, 0.8420000076293945, 0.8270000219345093, 0.7950000166893005, 0.831333339214325, 0.8453333377838135, 0.8333333134651184, 0.8379999995231628, 0.8053333163261414, 0.8503333330154419, 0.8453333377838135, 0.8493333458900452, 0.8370000123977661, 0.8553333282470703, 0.8556666374206543, 0.8569999933242798, 0.8473333120346069, 0.8266666531562805, 0.8336666822433472, 0.8573333621025085, 0.8519999980926514, 0.8629999756813049, 0.859333336353302, 0.8553333282470703, 0.8533333539962769, 0.8653333187103271, 0.8619999885559082, 0.8603333234786987, 0.8679999709129333, 0.8643333315849304, 0.8659999966621399, 0.8433333039283752, 0.8709999918937683, 0.8503333330154419, 0.8676666617393494, 0.8629999756813049, 0.8610000014305115, 0.859000027179718]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 7, 9, 2, 6, 0, 8, 5, 2, 2, 9, 8, 2, 2, 0, 0, 2, 2, 2, 6, 6, 3, 9, 5, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [4, 3, 3, 1, 0, 3, 3, 3, 3, 3, 2, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [70, 9, 7, 66, 40, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8437142968177795, "mapping_values": [1, 4, 4, 2, 2, 1, 9, 9, 5, 4, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(grad, alpha)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.0037833920653787, 1.5432615717089393, 1.0573800809867409, 0.8679501855173415, 0.7903837349672737, 0.7768296239603119, 0.7203957288335453, 0.7057575754690416, 0.6763989137793891, 0.6630671531170619, 0.6287318906606448, 0.6138847880375431, 0.5870104262684283, 0.5829263617727561, 0.5689579360300224, 0.5569123113317543, 0.5373528361981807, 0.5224723379491674, 0.5353236715271803, 0.502713908506438, 0.5044078958221887, 0.47775930144200784, 0.4734266803579843, 0.4642502847813407, 0.46470302502398225, 0.45478639189262654, 0.4449681475642429, 0.4427826785927892, 0.42079872813648034, 0.41714753010379735, 0.4301786471894861, 0.4071084531842127, 0.40339192900407617, 0.395767870257638, 0.38616149365043817, 0.38939305927775175, 0.37245607060794705, 0.3928599893070562, 0.3566401860008875, 0.3744381863159857, 0.3628736823037505], "accuracy": [0.33284902572631836, 0.5087835192680359, 0.6273940205574036, 0.6736230254173279, 0.7132478952407837, 0.7153612375259399, 0.7339849472045898, 0.7390040755271912, 0.7428345084190369, 0.7569673657417297, 0.7663452625274658, 0.7697794437408447, 0.7795535326004028, 0.7804781198501587, 0.7889314293861389, 0.7907806038856506, 0.8013472557067871, 0.8079513907432556, 0.7985734939575195, 0.8164047002792358, 0.8131026029586792, 0.8245938420295715, 0.8286884427070618, 0.8333113193511963, 0.8294808864593506, 0.8298771381378174, 0.8350284099578857, 0.8343679904937744, 0.8465195894241333, 0.8481045961380005, 0.8432175517082214, 0.8512746095657349, 0.8482366800308228, 0.850350022315979, 0.8589354157447815, 0.8560295701026917, 0.8618412613868713, 0.8518029451370239, 0.8685774803161621, 0.8614450097084045, 0.8623695969581604], "val_loss": [1.386591843196324, 1.0318192754473006, 0.6561898503984723, 0.593195915222168, 0.5883641072681972, 0.5901573044913155, 0.5863520417894635, 0.5201904092516217, 0.507151586668832, 0.48784567628587994, 0.4979804243360247, 0.4690433740615845, 0.49193613869803293, 0.45027365003313335, 0.445482645715986, 0.4337130274091448, 0.42031855242592947, 0.4651176248277937, 0.4521696056638445, 0.4068548764501299, 0.42313718795776367, 0.3896034615380423, 0.40269546849387033, 0.3722998925617763, 0.39403765542166574, 0.38990287269864765, 0.38782085691179546, 0.36138918570109774, 0.37727387462343487, 0.3654021535600935, 0.39353563104357037, 0.3519399847303118, 0.34576040506362915, 0.357780967439924, 0.3861969453947885, 0.33883540970938547, 0.3462539570672171, 0.3390449115208217, 0.3553874407495771, 0.37596761328833445, 0.3857304113251822], "val_accuracy": [0.460999995470047, 0.6073333621025085, 0.7076666951179504, 0.7296666502952576, 0.7289999723434448, 0.7386666536331177, 0.7226666808128357, 0.7576666474342346, 0.7710000276565552, 0.7816666960716248, 0.7976666688919067, 0.7953333258628845, 0.7713333368301392, 0.8059999942779541, 0.8133333325386047, 0.8080000281333923, 0.8186666369438171, 0.7876666784286499, 0.7876666784286499, 0.824999988079071, 0.8149999976158142, 0.8399999737739563, 0.8263333439826965, 0.8450000286102295, 0.8273333311080933, 0.8293333053588867, 0.8276666402816772, 0.8523333072662354, 0.8379999995231628, 0.8476666808128357, 0.8186666369438171, 0.8519999980926514, 0.8526666760444641, 0.8526666760444641, 0.8306666612625122, 0.8640000224113464, 0.8553333282470703, 0.8600000143051147, 0.8510000109672546, 0.8336666822433472, 0.8416666388511658]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1], [2, 8, 1, 9, 2, 2, 8, 1, 3, 2, 9, 3, 8, 2, 0, 0, 2, 2, 2, 6, 6, 3, 9, 5, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [3, 0, 3, 2, 0, 3, 1, 3, 2, 3, 2, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [55, 18, 76, 66, 40, 57, 35, 9, 54, 64], [0, 1, 0, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8414285778999329, "mapping_values": [1, 4, 4, 2, 2, 1, 11, 11, 7, 4, 2, 5, 3, 2, 1, 1, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.subtract(tf.math.add(beta, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))))), tf.math.sqrt(beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), sigma)))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.0169235221178554, 1.5209357348006116, 1.1863563905192436, 0.8577533520806373, 0.8427900738326266, 0.7710860945986026, 0.7474748636233635, 0.7279641241713002, 0.6820701014458653, 0.6583791663696769, 0.6366103611224205, 0.6241130495209972, 0.5920445315432571, 0.6151511782999005, 0.5887726639649493, 0.5772316099598801, 0.5522780047352949, 0.5334484611819087, 0.5429106116247624, 0.5115788330444176, 0.5040942969386446, 0.49097574919190595, 0.4861241650697877, 0.47650646921697465, 0.4721142511562412, 0.4599638672521196, 0.4619149353919548, 0.4476817975962529, 0.4279754715525731, 0.42823462688754405, 0.43905686190209886, 0.42020137185874695, 0.42103576106307783, 0.40130878127388053, 0.39540723276380785, 0.3852540181100707, 0.37435439973774365, 0.39128425203262773, 0.364250159215587, 0.37570395085553704, 0.37261791844740205, 0.3667011826604569, 0.3498232881776598], "accuracy": [0.33047154545783997, 0.5112931132316589, 0.5972790718078613, 0.6828688383102417, 0.691850483417511, 0.7098137736320496, 0.7193237543106079, 0.7215691208839417, 0.7423061728477478, 0.7547219395637512, 0.7576277852058411, 0.763967752456665, 0.7755910754203796, 0.7688548564910889, 0.7828556299209595, 0.7819310426712036, 0.7954035401344299, 0.8042530417442322, 0.7959318161010742, 0.8115176558494568, 0.8145555257797241, 0.819970965385437, 0.8236692547798157, 0.8289526104927063, 0.8228767514228821, 0.8248580098152161, 0.82683926820755, 0.834632158279419, 0.8425571322441101, 0.8441421389579773, 0.8374059200286865, 0.8446704745292664, 0.843481719493866, 0.8518029451370239, 0.8556333184242249, 0.8578787446022034, 0.8618412613868713, 0.8552370667457581, 0.8667283058166504, 0.8623695969581604, 0.859199583530426, 0.8636903762817383, 0.8665962219238281], "val_loss": [1.3848494802202498, 1.1518005302974157, 0.656849912234715, 0.6183133806501117, 0.5861594506672451, 0.5955551181520734, 0.5540528297424316, 0.5117103202002389, 0.5263290405273438, 0.4987468889781407, 0.527863621711731, 0.4716192824499948, 0.5245445966720581, 0.4588653360094343, 0.4459189346858433, 0.4471978800637381, 0.4326963424682617, 0.45193631308419363, 0.45657050609588623, 0.41415110656193327, 0.431581974029541, 0.396747282573155, 0.4114339436803545, 0.3804018497467041, 0.39665715183530537, 0.4117168698992048, 0.40126365423202515, 0.3673569645200457, 0.3754769648824419, 0.3729719689914158, 0.4438897541591099, 0.361418034349169, 0.35458903653281076, 0.36609309911727905, 0.3804312433515276, 0.3483853851045881, 0.3508356383868626, 0.33806157963616507, 0.35831516129629953, 0.3916559559958322, 0.42800503969192505, 0.33477862392153057, 0.336323150566646], "val_accuracy": [0.4726666808128357, 0.5789999961853027, 0.7316666841506958, 0.7210000157356262, 0.7329999804496765, 0.7443333268165588, 0.7413333058357239, 0.7720000147819519, 0.7523333430290222, 0.7773333191871643, 0.749666690826416, 0.7919999957084656, 0.7616666555404663, 0.8040000200271606, 0.8113333582878113, 0.8019999861717224, 0.8169999718666077, 0.7963333129882812, 0.784333348274231, 0.8166666626930237, 0.812666654586792, 0.8353333473205566, 0.8256666660308838, 0.8433333039283752, 0.8243333101272583, 0.8180000185966492, 0.8199999928474426, 0.8463333249092102, 0.8426666855812073, 0.8476666808128357, 0.7946666479110718, 0.8479999899864197, 0.8460000157356262, 0.8489999771118164, 0.8376666903495789, 0.8526666760444641, 0.8560000061988831, 0.8610000014305115, 0.8463333249092102, 0.8259999752044678, 0.82833331823349, 0.8603333234786987, 0.8553333282470703]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1], [2, 7, 1, 2, 6, 2, 5, 8, 2, 2, 6, 3, 4, 2, 0, 0, 2, 2, 2, 6, 1, 3, 9, 0, 1, 5, 0, 3, 2, 4, 8, 6, 0, 1, 8, 6, 7, 6, 3, 3, 0, 2, 6, 0, 2], [3, 3, 3, 1, 3, 3, 3, 3, 2, 3, 3, 3, 2, 3, 1, 3, 4, 3, 0, 0, 0, 1, 2, 3, 5, 1, 3, 5, 3, 1, 4, 1, 5], [47, 9, 52, 66, 40, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8408571481704712, "mapping_values": [1, 4, 4, 2, 2, 1, 45, 45, 26, 19, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad))), tf.math.add(beta, tf.math.square(tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.pow(alpha, grad), grad), tf.math.add(grad, grad))), tf.math.add(beta, tf.math.negative(beta)))), grad))))))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, beta))))))), tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.subtract(tf.math.multiply(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.subtract(tf.math.square(grad), grad)))), grad)), tf.math.add(beta, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.0042054074677527, 1.5409907858841896, 1.0570333816781257, 0.862500090223372, 0.8026397983159654, 0.7694561703802494, 0.752656937448529, 0.6851309845948562, 0.692868708005403, 0.6489967538176463, 0.6222380354356898, 0.6128081660685742, 0.5926593248996248, 0.5894337475433672, 0.5766647746455573, 0.567474652424685, 0.5422089107678063, 0.525273591929486, 0.5337668010555853, 0.5088156840474047, 0.5001999279527207, 0.48330639411965065, 0.4757446697784563, 0.4721140865605064, 0.4646995807793068, 0.4576628861638612, 0.44813320262714573, 0.4387195576309544, 0.4301086143810578, 0.4175830853377445, 0.43777154616518515, 0.4140171699158, 0.40434084560467726, 0.40343406217020455, 0.3927707174285339, 0.38906780253343454, 0.377451217716963, 0.4013403364814047, 0.36089775737376495, 0.36586945549120065, 0.36688129307650275], "accuracy": [0.3333773612976074, 0.5086514353752136, 0.6269977688789368, 0.6798309087753296, 0.7092854380607605, 0.711530864238739, 0.7168141603469849, 0.7477215528488159, 0.7362303733825684, 0.7588165402412415, 0.7703077793121338, 0.7688548564910889, 0.7766477465629578, 0.7795535326004028, 0.7853652238845825, 0.7878747582435608, 0.7964601516723633, 0.8041210174560547, 0.7993659973144531, 0.809140145778656, 0.8169330358505249, 0.817989706993103, 0.8300092220306396, 0.8271034359931946, 0.8293488025665283, 0.8308017253875732, 0.837141752243042, 0.8358209133148193, 0.8433496356010437, 0.8471800088882446, 0.8391229510307312, 0.8508783578872681, 0.8477083444595337, 0.8504821062088013, 0.8552370667457581, 0.8532558679580688, 0.8602562546730042, 0.8482366800308228, 0.8679170608520508, 0.8650112152099609, 0.8609166741371155], "val_loss": [1.3873980726514543, 1.0249362332480294, 0.6506514038358416, 0.660654970577785, 0.5811387470790318, 0.5816771643502372, 0.5263235228402274, 0.5448205811636788, 0.5077912977763585, 0.48136905261448454, 0.4963098594120571, 0.46853361810956684, 0.5103965486798968, 0.46352217878614155, 0.43680196149008615, 0.4373926264899118, 0.42513368810926166, 0.44921575273786274, 0.4478196586881365, 0.40679883105414255, 0.41765997239521574, 0.38834335122789654, 0.41334532839911325, 0.3734824401991708, 0.3951575330325535, 0.38895870958055767, 0.38692974192755564, 0.3664240411349705, 0.37330056939806255, 0.37115045956202913, 0.4075280853680202, 0.3523708922522409, 0.34445685148239136, 0.3731632573263986, 0.37589031457901, 0.3391112855502537, 0.3462414060320173, 0.33502544675554546, 0.34610519238880705, 0.36903421367917744, 0.3954344817570278], "val_accuracy": [0.46266666054725647, 0.6100000143051147, 0.7250000238418579, 0.6916666626930237, 0.7369999885559082, 0.7493333220481873, 0.7716666460037231, 0.737666666507721, 0.7590000033378601, 0.7870000004768372, 0.7826666831970215, 0.7940000295639038, 0.7620000243186951, 0.8006666898727417, 0.8169999718666077, 0.8086666464805603, 0.8183333277702332, 0.7960000038146973, 0.7956666946411133, 0.8190000057220459, 0.8180000185966492, 0.8379999995231628, 0.8166666626930237, 0.8446666598320007, 0.8230000138282776, 0.8299999833106995, 0.8323333263397217, 0.847000002861023, 0.8383333086967468, 0.8456666469573975, 0.8033333420753479, 0.8486666679382324, 0.8536666631698608, 0.843999981880188, 0.8376666903495789, 0.8616666793823242, 0.8579999804496765, 0.859333336353302, 0.8556666374206543, 0.8376666903495789, 0.8370000123977661]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 7, 1, 2, 6, 0, 8, 5, 2, 2, 4, 2, 2, 2, 0, 0, 2, 2, 2, 6, 6, 3, 9, 5, 4, 4, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [2, 0, 3, 1, 1, 3, 3, 0, 3, 3, 1, 3, 2, 1, 1, 3, 4, 1, 0, 0, 1, 1, 1, 1, 5, 5, 4, 4, 4, 2, 3, 5, 4], [47, 9, 52, 66, 40, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8362857103347778, "mapping_values": [1, 4, 4, 2, 2, 1, 48, 48, 28, 20, 5, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), grad), tf.math.add(beta, tf.math.sqrt(tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.add(beta, alpha), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.negative(alpha), tf.math.negative(grad))), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))))), grad)), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.multiply(tf.math.add(beta, beta), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.pow(alpha, grad)))))))))))))), tf.math.pow(grad, tf.math.add(beta, tf.math.negative(alpha))))), tf.math.add(beta, tf.math.multiply(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.0038010756321682, 1.5468056690518126, 1.0418197882803693, 0.8963741903622483, 0.7800741075461708, 0.764947769561889, 0.7179632602571229, 0.7028428999629114, 0.6755593467728652, 0.6581505735190379, 0.6279105979453744, 0.6124536717541073, 0.5887826509904616, 0.5902861178968372, 0.564659964225831, 0.5640548515738655, 0.5443046749496283, 0.5260611732937263, 0.528906797200713, 0.5046464612282121, 0.49919760719250694, 0.47897792367918807, 0.4834881692813797, 0.46941515428200214, 0.46225645477666893, 0.45342438254988093, 0.4471283585695212, 0.44202771062911417, 0.4219669459471062, 0.4229436263573908, 0.4301578568831222, 0.41199454856492024, 0.4104038472495862, 0.3911584828704844, 0.38748840131716816, 0.38962461506418183, 0.3737884836937883, 0.3977949720969872, 0.3590445453740224, 0.3724017574912789, 0.3659030686571393, 0.3538699259595502, 0.3446398004919011, 0.35235038843326216, 0.3374018966561185, 0.34371268297734436, 0.33135715546215594, 0.3319723070644038, 0.3211246771213165, 0.3102681573473971, 0.3159457039028473, 0.3031089005059633, 0.3082175499900709], "accuracy": [0.33284902572631836, 0.5083872675895691, 0.631488561630249, 0.6653017997741699, 0.7131158113479614, 0.7131158113479614, 0.7321357727050781, 0.7321357727050781, 0.7461365461349487, 0.7598732113838196, 0.7700436115264893, 0.767930269241333, 0.7758552432060242, 0.7784969210624695, 0.7873464822769165, 0.7884030938148499, 0.7943468689918518, 0.8030643463134766, 0.8012151718139648, 0.8132346868515015, 0.8157442808151245, 0.8226125836372375, 0.8230088353157043, 0.8314621448516846, 0.828292191028595, 0.8305375576019287, 0.8354246616363525, 0.8350284099578857, 0.8474441766738892, 0.8422929644584656, 0.8412362933158875, 0.847840428352356, 0.844010055065155, 0.8533879518508911, 0.8561616539955139, 0.8539162874221802, 0.8605204224586487, 0.850350022315979, 0.8668603897094727, 0.8628978729248047, 0.8623695969581604, 0.8713511824607849, 0.8697662353515625, 0.869502067565918, 0.8772949576377869, 0.8708229064941406, 0.8768987059593201, 0.8762382864952087, 0.8786157965660095, 0.8865407705307007, 0.8795403242111206, 0.8889182209968567, 0.8868049383163452], "val_loss": [1.386826515197754, 1.0045736517224992, 0.6508288383483887, 0.6011062860488892, 0.5719433341707502, 0.5956602266856602, 0.5887105805533273, 0.5300685167312622, 0.49806688513074604, 0.4871957131794521, 0.5065312385559082, 0.4634497846875872, 0.5043203660420009, 0.4476179906300136, 0.43927502632141113, 0.4395559344972883, 0.4277783972876413, 0.44995040552956717, 0.4397032601492746, 0.40637720482689993, 0.4121140241622925, 0.3900780507496425, 0.40779775381088257, 0.3779827186039516, 0.4002666473388672, 0.38870557716914583, 0.3889514378138951, 0.36462838309151785, 0.3724292942455837, 0.3710790957723345, 0.3871973327228001, 0.3578413554600307, 0.3473946281841823, 0.358893803187779, 0.3833275352205549, 0.34235240731920513, 0.3406387141772679, 0.3336977022034781, 0.3605735812868391, 0.37661926235471455, 0.3773663895470755, 0.3333976353917803, 0.3308581454413278, 0.32664566380637033, 0.3310288531439645, 0.32654390164784025, 0.3424537181854248, 0.3206310272216797, 0.3318420478275844, 0.34540356057030813, 0.3284955195018223, 0.32835099526814054, 0.3242937581879752], "val_accuracy": [0.4606666564941406, 0.6153333187103271, 0.718666672706604, 0.7223333120346069, 0.7393333315849304, 0.7273333072662354, 0.721666693687439, 0.749666690826416, 0.7829999923706055, 0.7829999923706055, 0.7593333125114441, 0.7953333258628845, 0.7620000243186951, 0.8090000152587891, 0.812666654586792, 0.809333324432373, 0.8153333067893982, 0.7963333129882812, 0.8006666898727417, 0.8196666836738586, 0.8223333358764648, 0.8383333086967468, 0.8253333568572998, 0.8423333168029785, 0.8216666579246521, 0.8323333263397217, 0.8286666870117188, 0.8506666421890259, 0.840666651725769, 0.843666672706604, 0.8216666579246521, 0.8493333458900452, 0.8523333072662354, 0.8516666889190674, 0.8356666564941406, 0.8586666584014893, 0.859333336353302, 0.8600000143051147, 0.8476666808128357, 0.8376666903495789, 0.8433333039283752, 0.862666666507721, 0.859333336353302, 0.8696666955947876, 0.862333357334137, 0.8636666536331177, 0.8629999756813049, 0.8706666827201843, 0.862333357334137, 0.8600000143051147, 0.8690000176429749, 0.8619999885559082, 0.8653333187103271]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 7, 1, 2, 6, 0, 8, 5, 2, 2, 9, 2, 2, 2, 0, 0, 2, 2, 2, 6, 6, 3, 3, 5, 1, 2, 0, 3, 5, 4, 8, 6, 0, 8, 8, 6, 7], [4, 3, 3, 1, 0, 3, 3, 3, 3, 3, 2, 3, 3, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [47, 9, 52, 66, 40, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8342857360839844, "mapping_values": [1, 4, 4, 2, 2, 1, 28, 28, 17, 11, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.sqrt(tf.math.square(grad)))), tf.math.add(tf.math.add(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))))), alpha)), tf.math.add(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), grad)))), tf.math.add(beta, grad))), grad)), tf.math.add(beta, grad))), tf.math.add(beta, grad))), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.00413831894849, 1.5413155943852028, 1.0487289868246972, 0.8772129087305781, 0.7970447617751134, 0.751039246865047, 0.7411778067018314, 0.6997810396079327, 0.6740231842979574, 0.6543937598426093, 0.6278443225087302, 0.6069959449163439, 0.5965297170649619, 0.5788991658553125, 0.5651521389636507, 0.5629293110707275, 0.5404038766135535, 0.5191411232872725, 0.5334741725598533, 0.505844175563654, 0.4934196367460298, 0.48035949395396027, 0.4764825471435414, 0.4709993913551253, 0.4651532006529832, 0.45263106749593435, 0.44681878694768723, 0.4496203045827082, 0.4218460894012023, 0.41618916254553107, 0.43899388503263087, 0.41200144957195517, 0.4074155131445711, 0.40009692062901436, 0.3902846089939573, 0.3913611182368521, 0.3746359674504814, 0.39433197275428034, 0.3597587981968508, 0.37629192488509366, 0.3665718152703799, 0.35998038687978073, 0.35075052292150766, 0.35003584600505794, 0.3371067147851069, 0.33717324828679585, 0.3299260509012555, 0.3370944545639347, 0.3184281477972564, 0.31482264811667343, 0.3117275808142822, 0.30481525727739234, 0.3074019323636386], "accuracy": [0.3333773612976074, 0.5079910159111023, 0.629111111164093, 0.6730946898460388, 0.7049266695976257, 0.7213049530982971, 0.7271166443824768, 0.7341170310974121, 0.7465327978134155, 0.759609043598175, 0.7696473598480225, 0.7712323069572449, 0.7750627398490906, 0.7816668748855591, 0.7866860628128052, 0.7884030938148499, 0.7987055778503418, 0.8068947196006775, 0.8013472557067871, 0.8144234418869019, 0.8197067975997925, 0.8227446675300598, 0.8259146809577942, 0.8302733898162842, 0.8285563588142395, 0.8297450542449951, 0.8384625315666199, 0.8293488025665283, 0.846387505531311, 0.8490291833877563, 0.8393871188163757, 0.8508783578872681, 0.8438779711723328, 0.8495575189590454, 0.8580108284950256, 0.8564258217811584, 0.8618412613868713, 0.8514066934585571, 0.8658037185668945, 0.86118084192276, 0.860652506351471, 0.8642187118530273, 0.868049144744873, 0.8741249442100525, 0.8790120482444763, 0.8765024542808533, 0.8761062026023865, 0.876370370388031, 0.883238673210144, 0.8835028409957886, 0.8821820020675659, 0.8905032277107239, 0.884691596031189], "val_loss": [1.3867196696145194, 1.0152897153581892, 0.6622861964362008, 0.6006955419267926, 0.5761424813951764, 0.6356835535594395, 0.5298752784729004, 0.5279283012662616, 0.49689252035958426, 0.49125451701028006, 0.5028446061270577, 0.4663513558251517, 0.491656950541905, 0.4492795297077724, 0.4390592575073242, 0.4407489810671125, 0.4205523303576878, 0.453609687941415, 0.44710378987448557, 0.4030852402959551, 0.41536071470805574, 0.39166209527424406, 0.412905820778438, 0.3731114608900888, 0.39527090958186556, 0.3942656857626779, 0.384563148021698, 0.36297132287706646, 0.3717383401734488, 0.36749944516590666, 0.39739811420440674, 0.3520961233547756, 0.34404865333012175, 0.3617498534066336, 0.3834527049745832, 0.3412064824785505, 0.3419104984828404, 0.33682858092444284, 0.3537654621260507, 0.37749954632350374, 0.3947008422442845, 0.3307761379650661, 0.32503137418201994, 0.32558528014591764, 0.3318873132978167, 0.32772537640162874, 0.33974309478487286, 0.322852577481951, 0.3293792945998056, 0.33767151832580566, 0.32392682347978863, 0.32486203738621305, 0.322536255632128], "val_accuracy": [0.46433332562446594, 0.6136666536331177, 0.7136666774749756, 0.7269999980926514, 0.7459999918937683, 0.6990000009536743, 0.7580000162124634, 0.7509999871253967, 0.777999997138977, 0.7876666784286499, 0.7699999809265137, 0.7940000295639038, 0.7649999856948853, 0.8053333163261414, 0.8143333196640015, 0.8116666674613953, 0.8226666450500488, 0.7916666865348816, 0.7943333387374878, 0.8230000138282776, 0.8196666836738586, 0.8393333554267883, 0.8243333101272583, 0.8456666469573975, 0.8246666789054871, 0.8276666402816772, 0.8336666822433472, 0.8506666421890259, 0.8423333168029785, 0.8446666598320007, 0.8163333535194397, 0.8533333539962769, 0.8543333411216736, 0.8500000238418579, 0.8349999785423279, 0.8610000014305115, 0.8573333621025085, 0.862333357334137, 0.8516666889190674, 0.8299999833106995, 0.8339999914169312, 0.8633333444595337, 0.862666666507721, 0.8690000176429749, 0.8636666536331177, 0.8619999885559082, 0.8633333444595337, 0.8726666569709778, 0.862666666507721, 0.8606666922569275, 0.8696666955947876, 0.8663333058357239, 0.8683333396911621]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 7, 1, 2, 6, 0, 8, 5, 2, 2, 9, 9, 2, 2, 0, 0, 2, 2, 2, 6, 6, 3, 9, 5, 1, 2, 5, 1, 2, 4, 8, 6, 0, 8, 8, 6, 7], [4, 3, 3, 1, 0, 3, 3, 3, 3, 3, 2, 3, 2, 3, 1, 3, 4, 0, 3, 0, 4, 1, 1, 1, 5], [70, 25, 7, 66, 40, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8339999914169312, "mapping_values": [1, 4, 4, 2, 2, 1, 20, 20, 13, 7, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))), grad), tf.math.square(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))))), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)), grad)))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.0037838793890494, 1.5478666181404357, 1.0427292391860552, 0.8962617330799296, 0.7918152866535466, 0.7702862340949546, 0.7189717353169692, 0.7037707721442279, 0.690221555646164, 0.6512569838101759, 0.6371809625433515, 0.6201668987893284, 0.5926127995812992, 0.5841806243045723, 0.5689729528813834, 0.564689032075081, 0.5457252265833561, 0.5254485746809929, 0.5371623239764731, 0.5107453521830673, 0.4996297809000989, 0.4825453496431205, 0.4791001065957343, 0.4726723668881065, 0.45920479798738933, 0.4541831854516804, 0.45325968923223586, 0.4453824772700626, 0.4271119158021715, 0.416600275265621, 0.43327620964418107, 0.4162666527877914, 0.4034127234711922, 0.3935759776004821, 0.3917062589914697, 0.3905520293895579, 0.38110617348751324, 0.3981390345043053, 0.3633474258147746, 0.3669845281716713, 0.36770083184775076, 0.3630752075680526, 0.35109814829861624, 0.3501313811657908, 0.3413124491651659, 0.3383166504306186, 0.3351338494959257, 0.3404603639944528, 0.31985354124358173, 0.3143350873381124, 0.31381270844056824, 0.30450043410924854, 0.30961778974095355], "accuracy": [0.33284902572631836, 0.5070664286613464, 0.631488561630249, 0.6641130447387695, 0.7086250185966492, 0.7149649858474731, 0.7283053994178772, 0.7416457533836365, 0.7433628439903259, 0.7606657147407532, 0.7637035846710205, 0.7598732113838196, 0.7751948237419128, 0.7800818681716919, 0.7853652238845825, 0.7887993454933167, 0.7943468689918518, 0.8035926818847656, 0.7985734939575195, 0.8105930685997009, 0.8157442808151245, 0.8231409192085266, 0.8255184292793274, 0.8289526104927063, 0.830669641494751, 0.8278959393501282, 0.8339717388153076, 0.8333113193511963, 0.8450667262077332, 0.8490291833877563, 0.8381983637809753, 0.8475762605667114, 0.8482366800308228, 0.8529917001724243, 0.8540483713150024, 0.8548408150672913, 0.857218325138092, 0.8524633646011353, 0.8663320541381836, 0.8659358024597168, 0.8613129258155823, 0.8632941246032715, 0.8654074668884277, 0.8728041052818298, 0.8771628737449646, 0.8751816153526306, 0.8762382864952087, 0.8729361891746521, 0.8796724081039429, 0.8862766027450562, 0.8782195448875427, 0.8903711438179016, 0.8864086866378784], "val_loss": [1.3867699418749129, 0.9835667269570487, 0.6432703392846244, 0.608436039515904, 0.5850438390459333, 0.5791049003601074, 0.5475533349173409, 0.5228700808116368, 0.5081817933491298, 0.4864907094410488, 0.49201265403202604, 0.4667889390672956, 0.4864163398742676, 0.4521237782069615, 0.4403970411845616, 0.43910394396100727, 0.43075181756700787, 0.45936555521828787, 0.4539515290941511, 0.40798477615628925, 0.4179967812129429, 0.3899657726287842, 0.41204674754823956, 0.3761568580354963, 0.38903062684195383, 0.3933852144650051, 0.38236543961933683, 0.3670727866036551, 0.3790274773325239, 0.36255150181906565, 0.3899407046181815, 0.3522226980754307, 0.3462449993406023, 0.36584264039993286, 0.3712305171149118, 0.3398358736719404, 0.3477036527224949, 0.339419424533844, 0.3410686765398298, 0.37509909697941374, 0.38917198351451326, 0.3299387948853629, 0.32778570481709074, 0.3280013884816851, 0.32934791701180594, 0.32753952060426983, 0.3415245158331735, 0.3216302139418466, 0.3296513557434082, 0.3370996117591858, 0.3260464497974941, 0.3283799375806536, 0.3223347323281424], "val_accuracy": [0.46133333444595337, 0.6179999709129333, 0.7236666679382324, 0.7193333506584167, 0.7273333072662354, 0.7446666955947876, 0.7483333349227905, 0.7563333511352539, 0.765666663646698, 0.7853333353996277, 0.7960000038146973, 0.7923333048820496, 0.7756666541099548, 0.8046666383743286, 0.8173333406448364, 0.8143333196640015, 0.8243333101272583, 0.7850000262260437, 0.7916666865348816, 0.8253333568572998, 0.8220000267028809, 0.8399999737739563, 0.8193333148956299, 0.8433333039283752, 0.8309999704360962, 0.8253333568572998, 0.8343333601951599, 0.8476666808128357, 0.8360000252723694, 0.8496666550636292, 0.8243333101272583, 0.8526666760444641, 0.8516666889190674, 0.8483333587646484, 0.8393333554267883, 0.8606666922569275, 0.8560000061988831, 0.8606666922569275, 0.8613333106040955, 0.8349999785423279, 0.8393333554267883, 0.8646666407585144, 0.8610000014305115, 0.8669999837875366, 0.8669999837875366, 0.8646666407585144, 0.8629999756813049, 0.871999979019165, 0.8650000095367432, 0.8619999885559082, 0.8700000047683716, 0.8629999756813049, 0.8703333139419556]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1], [2, 7, 1, 2, 6, 2, 2, 1, 2, 2, 6, 3, 3, 2, 0, 0, 2, 2, 2, 6, 1, 3, 9, 0, 1, 2, 0, 3, 2, 4, 8, 6, 0, 0, 8, 6, 7, 5, 3, 3, 0, 1, 6, 0, 2], [4, 0, 3, 1, 1, 3, 3, 0, 3, 3, 1, 3, 2, 1, 1, 3, 4, 3, 0, 0, 1, 1, 1, 1, 5, 5, 4, 4, 4, 2, 3, 5, 4], [47, 9, 52, 66, 40, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8285714387893677, "mapping_values": [1, 4, 4, 2, 2, 1, 78, 78, 45, 33, 5, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), grad))), tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), alpha)), grad), grad), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.negative(grad)))), tf.math.add(beta, grad))), tf.math.add(beta, alpha)), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.negative(beta)))), tf.math.add(beta, tf.math.add(tf.math.add(alpha, tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.subtract(tf.math.multiply(tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.subtract(tf.math.add(grad, grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))))), tf.math.add(beta, tf.math.multiply(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(alpha), tf.math.add(beta, alpha))))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, grad))), tf.math.add(beta, tf.math.square(grad)))))))))))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.negative(grad)))), tf.math.add(beta, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(grad)), tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, grad)))), tf.math.add(beta, grad))))))))), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.0041585892356224, 1.5440745864483219, 1.0397288136714642, 0.8941795176613238, 0.783574686601823, 0.7590433002352762, 0.7221010178465334, 0.7041878696005058, 0.6690066619918268, 0.6508844686993644, 0.6232110869930153, 0.6015635428096734, 0.5911933953940609, 0.5978802007265913, 0.5677127406786399, 0.5614314851365967, 0.5383638261630787, 0.5218401886547372, 0.5305947049135513, 0.5069349321785572, 0.49593266124785806, 0.48057982612909533, 0.4723127798444607, 0.4710948437574344, 0.4643055365274863, 0.4539475629374084, 0.4440876596544901, 0.44298559463869674, 0.4240140534032999, 0.41500850118477234, 0.43663324677256105, 0.40985711253692353, 0.40470721017509764], "accuracy": [0.3333773612976074, 0.50785893201828, 0.6310923099517822, 0.6645092964172363, 0.713908314704895, 0.7149649858474731, 0.7259278893470764, 0.7333245277404785, 0.7481178045272827, 0.7561748623847961, 0.7689869403839111, 0.7754589915275574, 0.7761194109916687, 0.7737419009208679, 0.7889314293861389, 0.7902522683143616, 0.7996301651000977, 0.805177628993988, 0.7994980812072754, 0.8107251524925232, 0.8156121969223022, 0.8231409192085266, 0.8269713521003723, 0.829216718673706, 0.829216718673706, 0.8309338092803955, 0.8364813327789307, 0.8367455005645752, 0.8451988101005554, 0.8498216867446899, 0.8403117060661316, 0.8514066934585571, 0.8462554216384888], "val_loss": [1.3865619046347482, 0.9924975463322231, 0.6585306610379901, 0.5965782233646938, 0.5758767298289708, 0.575568403516497, 0.5476051058088031, 0.523666501045227, 0.5027441126959664, 0.4815445968082973, 0.48145718233925955, 0.469397817339216, 0.5379510777337211, 0.45199458939688547, 0.43782624176570345, 0.43772166115897043, 0.4213212643350874, 0.446073055267334, 0.45488619804382324, 0.4030106578554426, 0.42362334047045025, 0.3884199261665344, 0.40856529985155376, 0.3738502434321812, 0.3934098482131958, 0.3900132008961269, 0.38384601048060824, 0.3636827213423593, 0.3749982374055045, 0.3658995968954904, 0.3935761196272714, 0.35208449193409513, 0.34869636808122906], "val_accuracy": [0.4636666774749756, 0.6163333058357239, 0.7089999914169312, 0.7233333587646484, 0.7436666488647461, 0.7476666569709778, 0.7436666488647461, 0.7649999856948853, 0.7683333158493042, 0.7829999923706055, 0.7960000038146973, 0.7900000214576721, 0.7519999742507935, 0.8050000071525574, 0.8169999718666077, 0.8096666932106018, 0.8230000138282776, 0.7986666560173035, 0.7916666865348816, 0.8190000057220459, 0.8133333325386047, 0.8330000042915344, 0.8223333358764648, 0.8450000286102295, 0.8243333101272583, 0.8259999752044678, 0.8343333601951599, 0.8510000109672546, 0.8370000123977661, 0.8473333120346069, 0.8190000057220459, 0.8506666421890259, 0.8479999899864197]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [25, 66, 89, 50, 85, 46], [1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 8, 1, 2, 6, 9, 8, 5, 2, 2, 9, 2, 2, 2, 0, 0, 2, 2, 2, 6, 6, 3, 9, 2, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [4, 3, 3, 1, 0, 3, 3, 3, 3, 3, 2, 3, 2, 3, 3, 2, 4, 3, 0, 0, 4, 1, 1, 1, 5], [47, 9, 70, 66, 40, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.75685715675354, "mapping_values": [1, 4, 4, 2, 2, 1, 24, 24, 16, 8, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))), grad)), tf.math.square(grad)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), tf.math.negative(grad))))))), tf.math.negative(tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2977306128902333, 2.2807306227446578, 2.2669789231196686, 2.250944200366354, 2.232919640560601, 2.212088047788915, 2.1881670518841614, 2.1565342053698195, 2.121585187123452, 2.084687087167728, 2.033570981123318, 1.978739030183881, 1.9108831165740991, 1.844855541408873, 1.7713111637605732, 1.7010438101497294, 1.62640859557653, 1.5644443343580359, 1.4948657058123285, 1.4426499702328657, 1.3891193257535783, 1.3392869480187473, 1.293310032576114, 1.265819838396263, 1.2260863631078045, 1.1881497500043865, 1.1695417128439356, 1.1524468176337501, 1.1271765403869745, 1.100777758158209, 1.0757129882950556, 1.0691524811109705, 1.052630408832725, 1.029775874111804, 1.0181905891854042, 1.0030079851722389, 0.985560623362804, 0.9779656081545417, 0.964847664586809, 0.949026540758241, 0.9326964554580731, 0.9401584356420973, 0.9310855533090706, 0.9038935234565241, 0.9105502205628131, 0.9033093567868233, 0.8857957692414605, 0.89348602612194, 0.8803835666300898, 0.8719522155523143, 0.8570421681727212, 0.8566240440695403, 0.8431950397873126, 0.8441171456384715, 0.8460392700666922, 0.8403502186732505, 0.8380471951752732, 0.8211618578744178, 0.8133498748862559, 0.8148284058025437, 0.8138807527204278, 0.810679672156752, 0.8092407097575246, 0.8009840145150133, 0.7936981980905494, 0.7868212844874833, 0.7877273736313711, 0.7880389872574771, 0.783515394552745, 0.7790186998866505, 0.7849429588292048], "accuracy": [0.10170386731624603, 0.1460837423801422, 0.187689870595932, 0.21912561357021332, 0.2583542466163635, 0.2925637364387512, 0.311319500207901, 0.35464271903038025, 0.3704926669597626, 0.3813234567642212, 0.41064587235450745, 0.4189670979976654, 0.44023245573043823, 0.45027077198028564, 0.46651697158813477, 0.47668737173080444, 0.490159809589386, 0.5107647776603699, 0.5231805443763733, 0.5215955376625061, 0.5398229956626892, 0.5525029897689819, 0.5671641826629639, 0.5661075115203857, 0.5838066339492798, 0.588297426700592, 0.5908070206642151, 0.6021661758422852, 0.605468213558197, 0.6166952848434448, 0.6258090138435364, 0.6276581883430481, 0.6305639743804932, 0.6349227428436279, 0.6361114978790283, 0.6445648074150085, 0.6489235162734985, 0.656980574131012, 0.6567164063453674, 0.6684718132019043, 0.6642451286315918, 0.661471426486969, 0.6709813475608826, 0.678642213344574, 0.6728305220603943, 0.6753401160240173, 0.6843217611312866, 0.6800950765609741, 0.6859067678451538, 0.6872276067733765, 0.6896050572395325, 0.6905296444892883, 0.6973979473114014, 0.6966054439544678, 0.6885483860969543, 0.6915863156318665, 0.6955488324165344, 0.7042662501335144, 0.7054550051689148, 0.7058512568473816, 0.6985867023468018, 0.7069079279899597, 0.7096816897392273, 0.7065116763114929, 0.7117950320243835, 0.7102100253105164, 0.7063795924186707, 0.7117950320243835, 0.7131158113479614, 0.7160216569900513, 0.7128516435623169], "val_loss": [1.957517078944615, 1.9439101219177246, 1.9295503071376257, 1.913748128073556, 1.8956218447004045, 1.8743835857936315, 1.8491101946149553, 1.8187523569379533, 1.7825483594621931, 1.7404186385018485, 1.691183635166713, 1.6339092254638672, 1.5698237419128418, 1.5004440716334753, 1.4277643476213728, 1.3544517585209437, 1.282628399985177, 1.215165376663208, 1.1520211356026786, 1.0965661321367537, 1.045468875340053, 1.0011036055428642, 0.9618139948163714, 0.9273449693407331, 0.8977041244506836, 0.8705391543252128, 0.8467822585787091, 0.825647234916687, 0.8061480522155762, 0.7892061471939087, 0.7734581402369908, 0.760238596371242, 0.7463545799255371, 0.7350499970572335, 0.7232329504830497, 0.7143161467143467, 0.7034799712044852, 0.6942769799913678, 0.6867192813328334, 0.6785970755985805, 0.6714935643332345, 0.6649986675807408, 0.6589523213250297, 0.6522272314344134, 0.6465753827776227, 0.642147285597665, 0.6378131593976702, 0.6330922671726772, 0.626890846661159, 0.6243746621268136, 0.6208300760814122, 0.6172020775931222, 0.6123475687844413, 0.6076515061514718, 0.6041586909975324, 0.6001694032124111, 0.5979194470814296, 0.5943786757332938, 0.5910852466310773, 0.5877478633608136, 0.5845822606767926, 0.5826002870287214, 0.579713157245091, 0.5779962880270821, 0.5758268322263446, 0.5730065107345581, 0.5712935243334089, 0.5694039719445365, 0.5667038134166172, 0.5652079241616386, 0.5633713858468192], "val_accuracy": [0.15966667234897614, 0.27933332324028015, 0.35466668009757996, 0.390666663646698, 0.4126666784286499, 0.4390000104904175, 0.4546666741371155, 0.47866666316986084, 0.49300000071525574, 0.5103333592414856, 0.531333327293396, 0.5426666736602783, 0.5519999861717224, 0.5619999766349792, 0.5736666917800903, 0.5886666774749756, 0.5986666679382324, 0.6103333234786987, 0.6196666955947876, 0.6423333287239075, 0.6516666412353516, 0.6663333177566528, 0.6700000166893005, 0.6766666769981384, 0.6819999814033508, 0.6863333582878113, 0.6890000104904175, 0.6953333616256714, 0.6990000009536743, 0.7026666402816772, 0.7043333053588867, 0.7059999704360962, 0.7076666951179504, 0.7106666564941406, 0.7136666774749756, 0.7166666388511658, 0.7213333249092102, 0.7236666679382324, 0.7250000238418579, 0.7273333072662354, 0.7266666889190674, 0.731333315372467, 0.734333336353302, 0.7350000143051147, 0.7379999756813049, 0.7390000224113464, 0.7369999885559082, 0.7400000095367432, 0.7436666488647461, 0.7416666746139526, 0.7409999966621399, 0.7409999966621399, 0.7433333396911621, 0.7486666440963745, 0.7516666650772095, 0.7509999871253967, 0.750333309173584, 0.7546666860580444, 0.7526666522026062, 0.7546666860580444, 0.7549999952316284, 0.7563333511352539, 0.7583333253860474, 0.7559999823570251, 0.7566666603088379, 0.7613333463668823, 0.7606666684150696, 0.7559999823570251, 0.7599999904632568, 0.7563333511352539, 0.7566666603088379]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 3, 3, 2, 6, 2, 8, 0, 3, 2, 0, 2, 5, 2, 0, 0, 2, 2, 2, 6, 6, 3, 9, 5, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [4, 3, 3, 1, 0, 3, 3, 3, 3, 3, 2, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [70, 9, 7, 66, 40, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.7194285988807678, "mapping_values": [1, 4, 4, 2, 2, 1, 25, 25, 14, 11, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(grad), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.multiply(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)), tf.math.divide_no_nan(alpha, tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad))))))), tf.math.square(grad)))))))), tf.math.add(tf.math.add(beta, grad), beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.104772223741025, 1.5655733402048386, 1.0319358768117992, 4646.208589242701, NaN, NaN, NaN, NaN], "accuracy": [0.33086779713630676, 0.44089287519454956, 0.6321489810943604, 0.47510236501693726, 0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.7468317576817103, 0.8114496128899711, 0.6165562357221331, 5893268815029394.0, NaN, NaN, NaN, NaN], "val_accuracy": [0.2853333353996277, 0.6600000262260437, 0.7350000143051147, 0.10066666454076767, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1], [2, 7, 1, 2, 6, 2, 2, 2, 2, 2, 5, 3, 3, 2, 0, 0, 2, 2, 2, 6, 1, 5, 9, 2, 1, 2, 0, 3, 2, 6, 4, 6, 0, 0, 8, 6, 7, 5, 3, 3, 0, 1, 6, 0, 2], [3, 0, 3, 1, 1, 3, 3, 1, 3, 3, 1, 2, 2, 1, 3, 3, 4, 3, 0, 0, 1, 1, 1, 1, 5, 5, 4, 0, 2, 2, 3, 3, 2], [47, 9, 52, 66, 40, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 2, 29, 29, 15, 14, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))), alpha)), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), grad)), grad)), alpha)), grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, alpha))))), tf.math.add(beta, beta)), tf.math.add(beta, beta))))), tf.math.add(beta, tf.math.negative(alpha))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.302283962751345, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 1, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [59, 66, 89, 50, 85, 46], [1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 3, 8, 2, 6, 2, 4, 0, 3, 2, 9, 2, 5, 2, 0, 0, 2, 2, 2, 6, 6, 3, 9, 5, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [4, 3, 3, 2, 0, 3, 3, 3, 3, 3, 2, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [70, 9, 7, 66, 40, 57, 35, 9, 54, 64], [1, 1, 0, 0, 1, 0, 0, 0, 1], [1, 0, 1, 1, 1, 0, 0], [2, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 8, 8, 4, 4, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, grad), grad))))), beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07357019931077957, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [4, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [59, 66, 89, 50, 85, 46], [1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 6, 8, 2, 6, 2, 8, 0, 3, 2, 0, 2, 5, 2, 0, 0, 2, 2, 2, 6, 6, 3, 9, 5, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [4, 3, 3, 1, 0, 3, 3, 3, 3, 3, 2, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [47, 9, 52, 66, 40, 57, 35, 9, 54, 64], [1, 1, 0, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 9, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 8, 8, 4, 4, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(grad, tf.math.add(beta, grad))))), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 9, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 7, 1, 5, 6, 0, 8, 5, 2, 2, 3, 2, 2, 2, 0, 0, 2, 2, 2, 6, 6, 3, 9, 5, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [1, 3, 3, 1, 0, 3, 3, 3, 3, 1, 2, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [47, 9, 52, 66, 40, 57, 35, 9, 54, 64], [0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 1, 27, 27, 16, 11, 1, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, alpha), tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.add(beta, grad)), tf.math.divide_no_nan(grad, tf.math.add(beta, alpha)))), tf.math.negative(tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad))), tf.math.add(grad, tf.math.negative(tf.math.add(beta, tf.math.negative(grad))))))), tf.math.add(beta, alpha))), tf.math.add(beta, beta))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.05996565893292427, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [70, 66, 89, 50, 85, 46], [1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 7, 1, 2, 6, 2, 2, 1, 2, 2, 6, 0, 3, 2, 0, 0, 2, 2, 2, 6, 1, 3, 9, 0, 1, 2, 0, 3, 2, 4, 8, 6, 0, 0, 8, 6, 7, 5, 3, 3, 0, 1, 6, 0, 2], [4, 3, 3, 1, 0, 1, 3, 3, 3, 3, 2, 2, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [47, 9, 52, 66, 40, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 29, 29, 15, 14, 1, 1, 0, 0, 0, 0, 6, 3, 3, 1], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.add(grad, grad))), tf.math.add(tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(grad, tf.math.negative(tf.math.add(beta, grad)))))), tf.math.add(beta, grad)))))), tf.math.add(beta, beta)))), tf.math.add(beta, beta))), tf.math.add(beta, beta))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.square(tf.math.multiply(beta, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.2879907231462506, 2.3051896060005928, 2.3055782658218344, 2.3054458160977305, 2.3091244745122252, 2.322756245907476, 2.3327505053184003], "accuracy": [0.12600713968276978, 0.09192973375320435, 0.0952318087220192, 0.09932637959718704, 0.09919429570436478, 0.09642054885625839, 0.09549596905708313], "val_loss": [1.9744850567408971, 1.9747281755719865, 1.9783981187003, 1.9765434265136719, 1.9794564928327287, 1.9896751812526159, 2.0235205377851213], "val_accuracy": [0.09566666930913925, 0.10366666316986084, 0.09799999743700027, 0.10366666316986084, 0.09666666388511658, 0.10233332961797714, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [99, 66, 89, 50, 85, 46], [0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [4, 7, 2, 2, 6, 2, 4, 5, 2, 2, 9, 3, 5, 2, 0, 0, 2, 2, 2, 6, 6, 3, 9, 5, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [3, 0, 3, 2, 1, 0, 3, 3, 3, 3, 2, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [47, 33, 52, 66, 40, 57, 35, 9, 54, 64], [0, 1, 0, 0, 1, 0, 0, 0, 1], [1, 0, 1, 1, 1, 0, 0], [3, 0, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [0, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 56, 56, 34, 22, 6, 1, 1, 0, 1, 1, 1, 0, 1, 1], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), grad)), tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, tf.math.square(tf.math.add(alpha, tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.negative(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))))))))))), tf.math.add(tf.math.add(beta, grad), grad)))), tf.math.add(beta, grad)), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.multiply(tf.math.add(beta, beta), tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.subtract(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(grad, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)))))))))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.sqrt(grad))), tf.math.add(beta, alpha)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302283962751345, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 76, 89, 50, 85, 46], [0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 7, 0, 2, 6, 2, 8, 5, 2, 2, 9, 3, 5, 2, 0, 0, 2, 2, 2, 6, 6, 3, 9, 5, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [4, 3, 3, 1, 0, 3, 3, 3, 0, 3, 2, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [47, 9, 52, 66, 40, 57, 35, 9, 54, 64], [0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [0, 2, 0, 2, 0, 2, 2], [25, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 2, 12, 12, 6, 6, 1, 3, 1, 1, 0, 0, 1, 0, 1, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.sqrt(grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(grad, grad))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302283962751345, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [25, 66, 89, 50, 85, 46], [1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 3, 8, 2, 6, 2, 8, 0, 3, 2, 0, 2, 5, 2, 0, 0, 2, 2, 2, 6, 6, 3, 9, 5, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [4, 3, 3, 4, 0, 3, 3, 3, 3, 3, 2, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [70, 9, 7, 66, 40, 57, 35, 9, 54, 64], [0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [0, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 1, 0, 1, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.negative(tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302283962751345, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [9, 66, 89, 50, 85, 46], [1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1], [2, 7, 1, 2, 6, 2, 0, 5, 2, 2, 2, 9, 5, 2, 0, 0, 2, 2, 2, 6, 6, 3, 9, 5, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [2, 0, 3, 1, 1, 3, 3, 0, 3, 3, 1, 3, 2, 1, 1, 3, 4, 3, 0, 0, 1, 1, 1, 1, 5, 5, 4, 4, 4, 2, 3, 5, 4], [47, 9, 2, 66, 40, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [2, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.04171428456902504, "mapping_values": [1, 7, 7, 4, 3, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(grad))))))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.303762907995099, 2.3013713392583433, 2.302629410582857, 2.3023871332190495, 2.302630782961893, 2.3025579816550943], "accuracy": [0.08942015469074249, 0.09140139818191528, 0.09021265059709549, 0.08466517180204391, 0.09126931428909302, 0.08374059200286865], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 7, 2, 2, 0, 2, 8, 5, 2, 2, 6, 3, 5, 2, 0, 0, 2, 2, 2, 6, 6, 3, 9, 5, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [4, 0, 3, 1, 1, 3, 3, 0, 3, 3, 1, 3, 2, 1, 1, 3, 4, 3, 0, 0, 1, 1, 1, 1, 5, 5, 4, 4, 4, 2, 3, 5, 4], [70, 9, 7, 66, 40, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [3, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.04171428456902504, "mapping_values": [1, 4, 4, 2, 2, 1, 25, 25, 14, 11, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.negative(grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), grad)))), tf.math.add(beta, tf.math.sqrt(tf.math.square(tf.math.add(beta, alpha)))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(alpha, grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(grad, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))), tf.math.square(grad))))))), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.303762907995099, 2.3013713392583433, 2.302629410582857, 2.3023871332190495, 2.302630782961893, 2.3025579816550943], "accuracy": [0.08942015469074249, 0.09140139818191528, 0.09021265059709549, 0.08466517180204391, 0.09126931428909302, 0.08374059200286865], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}]