[{"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [6, 4, 1, 3, 2, 1, 3, 1, 8, 8, 7, 3, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [3, 3, 3, 3, 0, 3, 2, 3, 1, 4, 4, 3, 1, 4, 1, 3], [77, 23, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 5, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8399999737739563, "mapping_values": [1, 4, 4, 2, 2, 1, 18, 18, 9, 9, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.pow(tf.math.subtract(tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, grad))), tf.math.add(beta, grad)), tf.math.add(beta, grad)), tf.math.multiply(tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.subtract(tf.math.sqrt(beta), tf.math.add(beta, grad)))), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2195294004122124, 2.210315318045253, 1.8743444401684721, 1.8224270847164612, 1.1242767374718021, 0.7646814153068778, 0.679518956620664, 0.6607890010604359, 0.6105095500313705, 0.6035603504407013, 0.5617277669301989, 0.5466748684341598, 0.5470715172381181, 0.5428687912629596, 0.5347692081563272, 0.4887314216729405, 0.48500313105883613, 0.48921650487906454, 0.47475633699471026, 0.45213566510873526, 0.4386713613277854, 0.4410266069971638, 0.4398874425144873, 0.4407762155446551, 0.4230705374117934, 0.4102543984358856, 0.39478291666991105, 0.3955083359084534, 0.3871080428499666, 0.38897475963963996, 0.3846200680129674, 0.3646753518462669, 0.36603390631611477, 0.37215848845135596, 0.3491784664444904, 0.353004356094119, 0.3432181452550688, 0.3287291494083127, 0.3270142799859128, 0.32095862955953214], "accuracy": [0.23523972928524017, 0.2436930388212204, 0.35041606426239014, 0.3723418414592743, 0.6081098914146423, 0.7112666964530945, 0.7411174178123474, 0.7499669790267944, 0.7650244235992432, 0.7695152759552002, 0.7882710099220276, 0.7911768555641174, 0.7961959838867188, 0.7944789528846741, 0.8005547523498535, 0.8190463781356812, 0.816008448600769, 0.8162726163864136, 0.8227446675300598, 0.8343679904937744, 0.8374059200286865, 0.8329150676727295, 0.8381983637809753, 0.8321225643157959, 0.8418967127799988, 0.8466516733169556, 0.8520671129226685, 0.8541803956031799, 0.8552370667457581, 0.8537842035293579, 0.854708731174469, 0.8622375130653381, 0.8584070801734924, 0.8568220734596252, 0.8697662353515625, 0.8667283058166504, 0.8688416481018066, 0.8753136992454529, 0.8753136992454529, 0.880729079246521], "val_loss": [1.9633970260620117, 1.9038694245474679, 1.4499515465327673, 1.0024332659585136, 0.5953409671783447, 0.5484925508499146, 0.48931178024836947, 0.4724684272493635, 0.5333280393055507, 0.42510065010615755, 0.44362781729016987, 0.41607171297073364, 0.46893252645220074, 0.44416790349142893, 0.4065788047654288, 0.4032762816974095, 0.42036341769354685, 0.38951304980686735, 0.4194674236433847, 0.36885231733322144, 0.3644776684897287, 0.40623382159641813, 0.3648846575192043, 0.37495902606419157, 0.37563823802130564, 0.3502500738416399, 0.36599514314106535, 0.35787294592176166, 0.370601270880018, 0.3773799623761858, 0.3460486190659659, 0.343034633568355, 0.3606298991612026, 0.36362155846187044, 0.34407699959618704, 0.33988902398518156, 0.3424564003944397, 0.3345204676900591, 0.3409826840673174, 0.41116301502500263], "val_accuracy": [0.12966667115688324, 0.3869999945163727, 0.4699999988079071, 0.5806666612625122, 0.7276666760444641, 0.7426666617393494, 0.7846666574478149, 0.7913333177566528, 0.765999972820282, 0.8153333067893982, 0.8066666722297668, 0.8166666626930237, 0.7919999957084656, 0.7956666946411133, 0.8243333101272583, 0.8259999752044678, 0.8140000104904175, 0.8326666951179504, 0.8169999718666077, 0.8426666855812073, 0.8476666808128357, 0.8259999752044678, 0.8529999852180481, 0.8379999995231628, 0.8446666598320007, 0.8576666712760925, 0.843666672706604, 0.8496666550636292, 0.8500000238418579, 0.8386666774749756, 0.859000027179718, 0.8619999885559082, 0.8460000157356262, 0.8573333621025085, 0.8636666536331177, 0.859666645526886, 0.8616666793823242, 0.8600000143051147, 0.862666666507721, 0.8330000042915344]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [0, 4, 1, 3, 2, 0, 3, 9, 8, 8, 7, 3, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [3, 3, 3, 3, 0, 3, 2, 2, 1, 4, 4, 3, 1, 4, 1, 3], [77, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 5, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8317142724990845, "mapping_values": [1, 4, 4, 2, 2, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.219053735790976, 2.2160706530157697, 1.9600617495415753, 1.5761239492598778, 0.9993501514916753, 0.8542230833145165, 0.7362107654304993, 0.7111645000422746, 0.6941050307909101, 0.6605281048541559, 0.6242956434730935, 0.6115573902313405, 0.61986162013476, 0.5773763003964639, 0.5640898776596028, 0.5442306882260325, 0.5310471936019184, 0.5418213523334878, 0.5136035327047893, 0.5047126372240601, 0.4841733148163808, 0.4739622361136308, 0.48294866102766193, 0.4580403887962605, 0.4666315812625905, 0.4543472636589962, 0.43160939554355054, 0.43094601657617015, 0.4210861629900317, 0.4228405899784868, 0.4185592300580745, 0.3969779378348149, 0.40262774678899027, 0.40961394812988017, 0.3963480233720989, 0.3913367158189473, 0.36524813782348453, 0.36273410728956806, 0.3603447451252648, 0.3522607238655471], "accuracy": [0.23537181317806244, 0.24184387922286987, 0.3559635579586029, 0.4679698944091797, 0.6395456194877625, 0.6933034062385559, 0.724739134311676, 0.7351737022399902, 0.7429665923118591, 0.750759482383728, 0.763967752456665, 0.7651565074920654, 0.7658169269561768, 0.780610203742981, 0.7926297783851624, 0.7940827012062073, 0.7972526550292969, 0.7947431206703186, 0.8108572363853455, 0.8084797263145447, 0.8186501264572144, 0.8215559124946594, 0.8182538747787476, 0.8230088353157043, 0.8253863453865051, 0.8257825970649719, 0.837141752243042, 0.8384625315666199, 0.8393871188163757, 0.8412362933158875, 0.8407079577445984, 0.8490291833877563, 0.8506141901016235, 0.8388587832450867, 0.8518029451370239, 0.8495575189590454, 0.8601241707801819, 0.8632941246032715, 0.8607845902442932, 0.8681812286376953], "val_loss": [1.9631380353655135, 1.875075135912214, 2.092239652361189, 0.775657023702349, 0.6318652970450265, 0.5940100295203072, 0.5444608756474086, 0.533963850566319, 0.5522660527910505, 0.4826170376368931, 0.47995236941746305, 0.47575104236602783, 0.4735510178974697, 0.47878754138946533, 0.44211242880140034, 0.45479016644614084, 0.48776919501168386, 0.4212124603135245, 0.44131175109318327, 0.4004553811890738, 0.40025379828044344, 0.3959347520555769, 0.38575784649167744, 0.4586782625743321, 0.3903556891850063, 0.37904772588184904, 0.3819161653518677, 0.3795012320790972, 0.4038879360471453, 0.3968482272965567, 0.36269931282315937, 0.39352045740400043, 0.38322322709219797, 0.3698193260601589, 0.35611300809042795, 0.3613091622080122, 0.3709610274859837, 0.3637198976108006, 0.37186565569468905, 0.3752134016581944], "val_accuracy": [0.1303333342075348, 0.4076666533946991, 0.13699999451637268, 0.6330000162124634, 0.7166666388511658, 0.7196666598320007, 0.7609999775886536, 0.7596666812896729, 0.7563333511352539, 0.7976666688919067, 0.7953333258628845, 0.7946666479110718, 0.7950000166893005, 0.7900000214576721, 0.8106666803359985, 0.7906666398048401, 0.7786666750907898, 0.8163333535194397, 0.809333324432373, 0.8270000219345093, 0.8259999752044678, 0.8336666822433472, 0.8373333215713501, 0.7946666479110718, 0.8386666774749756, 0.8376666903495789, 0.8316666483879089, 0.8330000042915344, 0.8399999737739563, 0.8303333520889282, 0.8446666598320007, 0.8213333487510681, 0.8303333520889282, 0.8410000205039978, 0.8526666760444641, 0.843666672706604, 0.846666693687439, 0.8376666903495789, 0.843666672706604, 0.8450000286102295]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [52, 66, 89, 50, 85, 46], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [0, 4, 1, 3, 2, 0, 3, 9, 8, 8, 7, 3, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [3, 3, 3, 3, 0, 3, 2, 2, 1, 4, 4, 3, 1, 4, 1, 3], [77, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0], [1, 7, 6, 4], [7, 1], [64], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 5, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.2988571524620056, "mapping_values": [1, 4, 4, 2, 2, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 6, 3, 3, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.multiply(tf.math.square(alpha), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.6984451530379956, 2.4396958593616174, 2.3025371210843724, 2.272508819483338, 2.019625154232478, 2.316531791159222, 2.3055160052551806, 2.2921045827607376, 2.2283843443803404], "accuracy": [0.23405098915100098, 0.10566636174917221, 0.10170386731624603, 0.1398758441209793, 0.35028398036956787, 0.10289261490106583, 0.10368511080741882, 0.11702549457550049, 0.23457930982112885], "val_loss": [2.5354765483311246, 1.9752043315342493, 1.9698660714285714, 1.7559682982308524, 2.002084800175258, 1.9740442548479353, 1.972691263471331, 1.7992322785513741, 1.9893624441964286], "val_accuracy": [0.18466666340827942, 0.09666666388511658, 0.12466666847467422, 0.3440000116825104, 0.10199999809265137, 0.10199999809265137, 0.10633333027362823, 0.3033333420753479, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 9, 2, 6, 0, 5, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1], [2, 6, 5, 2, 6, 1, 2, 8, 6, 3, 7, 2, 7, 2, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9, 1, 4, 6, 3, 3, 8, 1, 5, 5, 7, 8, 6, 7, 2, 5], [0, 1, 3, 3, 0, 3, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 31, 30, 73, 40, 57, 35, 9, 54, 64], [0, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0], [1, 7, 0, 0], [7, 1], [64], [1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.1922857165336609, "mapping_values": [1, 8, 8, 5, 3, 2, 64, 64, 39, 25, 6, 6, 5, 3, 2, 0, 1, 0, 1, 0], "tree_depth": 52, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.multiply(grad, tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), grad))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.multiply(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), grad)))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(grad, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))), tf.math.add(beta, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), grad))))))), tf.math.add(beta, tf.math.subtract(tf.math.pow(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(alpha, tf.math.multiply(grad, tf.math.add(beta, alpha))), grad))), tf.math.sqrt(tf.math.subtract(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, grad)))))))), tf.math.add(beta, tf.math.square(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.add(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, alpha)))))))), tf.math.add(tf.math.add(beta, alpha), tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, alpha))), grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, grad))))), tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.291985460071516, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.18491612374782562, 0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.5914711952209473, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.11233333498239517, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [0, 4, 1, 3, 2, 0, 3, 9, 8, 8, 7, 3, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [3, 3, 3, 3, 0, 3, 2, 2, 1, 4, 4, 3, 1, 4, 1, 3], [77, 31, 30, 73, 40, 57, 35, 9, 54, 64], [0, 0, 1, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 0, 1], [1, 7, 6, 4], [7, 1], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 5, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.11828571557998657, "mapping_values": [1, 4, 4, 2, 2, 1, 19, 19, 12, 7, 2, 9, 6, 4, 2, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))))))), grad)), tf.math.add(beta, tf.math.add(tf.math.multiply(grad, tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))))), beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, grad), tf.math.add(sigma, tf.math.pow(sigma, sigma)))))), tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.7914056213949774, 4.642801120784761, 7056226682.257609, NaN, NaN, NaN, NaN], "accuracy": [0.2615242302417755, 0.12970545887947083, 0.11861048638820648, 0.09496764093637466, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9968367304120744, 33.300052642822266, 5.18443848106278e+24, NaN, NaN, NaN, NaN], "val_accuracy": [0.10633333027362823, 0.2316666692495346, 0.052666667848825455, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 2, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [2, 6, 5, 2, 6, 1, 2, 8, 6, 3, 7, 5, 7, 2, 2, 5, 8, 2, 4, 6, 5, 9, 9, 9], [3, 3, 3, 3, 0, 3, 2, 2, 1, 4, 4, 3, 1, 4, 1, 3], [77, 4, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 5, 9, 3, 0, 1, 3, 2, 2, 5], [2, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 0, 17, 17, 9, 8, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(grad, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, beta)))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10130762308835983, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [5, 2, 9, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [19, 66, 89, 50, 85, 46], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [6, 9, 3, 6, 6, 9, 8, 2, 8, 3, 7, 2, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [0, 5, 3, 3, 2, 3, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3], [8, 96, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 0], [1, 2, 6, 4], [7, 1], [64], [0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 5, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.multiply(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.304823838992126, 2.3263031042577915, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08677849918603897, 0.08149518072605133, 0.0948355570435524, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.976116384778704, 2.017218998500279, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.01966666616499424, 0.10066666454076767, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [2, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 2, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 4, 1, 3, 2, 1, 3, 9, 8, 8, 7, 3, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [0, 2, 3, 3, 2, 3, 3, 2, 1, 2, 3, 2, 1, 4, 1, 3], [8, 9, 30, 73, 40, 57, 35, 9, 54, 64], [0, 0, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0], [2, 7, 6, 3], [7, 1], [64], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 8, 2, 9, 3, 0, 1, 3, 2, 2, 5], [2, 0, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 0, 26, 26, 16, 10, 3, 9, 5, 4, 1, 0, 6, 3, 3, 2], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.pow(tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta)))))))), grad)), tf.math.add(beta, tf.math.add(tf.math.multiply(grad, beta), tf.math.add(beta, grad))))), grad), tf.math.add(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), beta)), tf.math.add(alpha, tf.math.square(tf.math.add(beta, beta))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, grad), tf.math.add(sigma, tf.math.multiply(sigma, sigma)))))), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 4, 3, 8, 2, 1, 0, 8, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 40, 50, 85, 46], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 6, 2, 2, 6, 2, 2, 4, 8, 3, 2, 2, 3, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [1, 3, 3, 3, 0, 1, 1, 2, 1, 4, 4, 3, 1, 4, 1, 3], [8, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [2, 1, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 4, 4, 2, 7, 7, 3, 4, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.pow(tf.math.multiply(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))), tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad))), tf.math.add(beta, grad)), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [0, 4, 1, 3, 2, 0, 3, 9, 8, 8, 7, 3, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [3, 3, 3, 3, 0, 3, 2, 2, 1, 4, 4, 3, 1, 4, 1, 3], [77, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0], [1, 7, 6, 4], [7, 1], [64], [0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 5, 7, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 2, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [2.312756090273773, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08413683623075485, 0.09668471664190292, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.0353245053972517, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 4, 1, 3, 2, 1, 3, 9, 8, 3, 7, 3, 7, 9, 3, 5, 8, 2, 4, 6, 5, 8, 9, 9], [3, 3, 3, 3, 0, 3, 0, 3, 1, 4, 4, 3, 1, 4, 1, 3], [77, 66, 30, 54, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0], [1, 7, 6, 4], [7, 1], [64], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 5, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 26, 26, 15, 11, 4, 1, 0, 0, 0, 0, 3, 1, 2, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.pow(tf.math.subtract(tf.math.multiply(grad, tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.multiply(tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)))), grad)))))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), grad))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, alpha)", "other_info": {"loss": [2.30249007153489, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [1, 1, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [6, 4, 8, 4, 0, 1, 3, 9, 8, 3, 7, 2, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [3, 3, 3, 3, 0, 3, 2, 2, 1, 4, 4, 3, 1, 4, 1, 3], [8, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [0, 1, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 11, 8, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(tf.math.multiply(alpha, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), grad)))))), tf.math.add(alpha, tf.math.subtract(tf.math.negative(tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), alpha)), tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.30249007153489, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 1, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 5, 1, 3, 9, 1, 3, 9, 8, 8, 7, 3, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [3, 3, 3, 2, 0, 3, 1, 2, 1, 4, 4, 3, 1, 4, 1, 3], [77, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 5, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 4, 4, 2, 13, 13, 9, 4, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.subtract(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.square(tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), grad)))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))), tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [6, 7, 3, 6, 6, 9, 8, 2, 8, 3, 7, 2, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [1, 2, 3, 3, 2, 3, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3], [77, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0], [1, 7, 6, 4], [7, 1], [64], [0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 5, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 11, 8, 3, 11, 11, 6, 5, 1, 1, 0, 0, 0, 0, 6, 4, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.multiply(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), grad))))))), tf.math.add(alpha, tf.math.subtract(tf.math.negative(tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))), alpha)), tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.add(beta, alpha), beta), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.multiply(tf.math.square(alpha), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07806102186441422, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 5, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 66, 89, 50, 85, 46], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [2, 0, 5, 2, 6, 1, 2, 8, 3, 3, 7, 2, 2, 6, 2, 5, 8, 2, 4, 6, 2, 8, 9, 9], [0, 1, 1, 3, 0, 3, 3, 2, 3, 2, 4, 3, 1, 4, 1, 3], [77, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [2, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 39, 39, 24, 15, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.square(tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), grad))), tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), tf.math.add(beta, grad))))), beta))), tf.math.add(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, beta))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))), tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, alpha))), tf.math.add(grad, tf.math.add(beta, tf.math.sqrt(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))))), alpha)), tf.math.add(beta, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [0, 4, 1, 3, 2, 0, 3, 9, 8, 8, 7, 3, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [3, 3, 3, 3, 0, 3, 2, 2, 1, 4, 4, 3, 1, 4, 1, 3], [77, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 5, 9, 3, 0, 1, 3, 2, 2, 5], [0, 1, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 23, 23, 13, 10, 4, 19, 19, 12, 7, 2, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.square(tf.math.multiply(tf.math.add(alpha, grad), tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)))))))))), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))))))), grad)), tf.math.add(beta, tf.math.add(tf.math.multiply(grad, tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))))), beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.30249007153489, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 2, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [0, 4, 1, 3, 2, 4, 3, 9, 8, 8, 7, 3, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [3, 3, 2, 3, 0, 3, 2, 2, 1, 4, 4, 3, 1, 4, 1, 3], [77, 81, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 5, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.07371428608894348, "mapping_values": [1, 4, 4, 2, 2, 0, 18, 18, 11, 7, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), grad)))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)))))), tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.302438484443067, 2.301018859952464, 2.3011177387597805, 2.3003753569966623, 2.299115440108914, 2.2999298103009043, 2.298828774187559, 2.3008807555732633, 2.29884569532505, 2.2996414615619516, 2.299683959366639, 2.2989681992060347, 2.2990707123929863, 2.2992125687708143, 2.300095361630993], "accuracy": [0.09060890227556229, 0.09681680053472519, 0.0940430611371994, 0.09589222073554993, 0.10315678268671036, 0.09642054885625839, 0.09985470771789551, 0.10077928751707077, 0.10645885765552521, 0.09800554811954498, 0.09998679161071777, 0.10130762308835983, 0.10130762308835983, 0.10474177449941635, 0.10328886657953262], "val_loss": [1.9703012193952287, 1.9698780604771204, 1.9696827616010393, 1.9695885522024972, 1.9695936611720495, 1.969620840890067, 1.9695818083626884, 1.9694167545863561, 1.9693315369742257, 1.9693659373692103, 1.9695328984941756, 1.9699273109436035, 1.9703210421970911, 1.9706667491367884, 1.970907551901681], "val_accuracy": [0.04600000008940697, 0.052666667848825455, 0.058666665107011795, 0.06333333253860474, 0.06566666811704636, 0.07066666334867477, 0.07666666805744171, 0.08100000023841858, 0.0806666687130928, 0.08299999684095383, 0.0806666687130928, 0.07699999958276749, 0.07533333450555801, 0.07066666334867477, 0.07100000232458115]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 0, 3, 3, 2, 1, 3, 6, 3, 8, 7, 2, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [3, 3, 3, 3, 0, 3, 1, 3, 1, 4, 4, 3, 1, 4, 1, 3], [77, 66, 30, 54, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0], [1, 7, 6, 4], [7, 1], [64], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 5, 9, 3, 0, 1, 3, 2, 2, 5], [3, 1, 0, 0, 0, 2, 2], [88, 97, 13, 96, 41]], "fitness": -0.07199999690055847, "mapping_values": [1, 4, 4, 2, 2, 1, 28, 28, 16, 12, 2, 1, 0, 0, 0, 0, 6, 3, 3, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), grad)), grad)), tf.math.add(beta, grad)), tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))), tf.math.add(beta, alpha)), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.square(alpha), tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302673023232946, 2.301599938273351, 2.3018053344149143, 2.3009171198072877, 2.2995384273874193, 2.3000081215615222, 2.2988442451946645, 2.3015822117213074, 2.2997789347979527, 2.300461573639188, 2.3004742133508755, 2.299255690066381, 2.2988354749116504, 2.2984309640810583, 2.299391140791057, 2.2991540864033233, 2.298680038720452, 2.299098303131912, 2.298780964287186, 2.2990059564457184, 2.299436690422837, 2.2988631906384693, 2.2988146108769154, 2.299298144067047], "accuracy": [0.08875974267721176, 0.09417514503002167, 0.09060890227556229, 0.09298639744520187, 0.10011887550354004, 0.09457138925790787, 0.09787346422672272, 0.09536388516426086, 0.10210011899471283, 0.09655263274908066, 0.09655263274908066, 0.09787346422672272, 0.09747721254825592, 0.10474177449941635, 0.10368511080741882, 0.09813763201236725, 0.10645885765552521, 0.10276053100824356, 0.10698718577623367, 0.10474177449941635, 0.10011887550354004, 0.1022322028875351, 0.09470347315073013, 0.10553427785634995], "val_loss": [1.9706143651689803, 1.970230988093785, 1.9699301719665527, 1.9696803092956543, 1.9694726807730538, 1.9694414819989885, 1.9694839205060686, 1.969432967049735, 1.9693771771022253, 1.9693973405020577, 1.9694117137363978, 1.9694065366472517, 1.9693965230669295, 1.9694064685276575, 1.9693440709795271, 1.9692531313214983, 1.9692115102495467, 1.9692113740103585, 1.9691948209490096, 1.9691977500915527, 1.9692188671657018, 1.9692906652178084, 1.9694104194641113, 1.9695028577532088], "val_accuracy": [0.0416666679084301, 0.046666666865348816, 0.05000000074505806, 0.052000001072883606, 0.054666668176651, 0.056333333253860474, 0.06066666543483734, 0.06366666406393051, 0.06433333456516266, 0.06533333659172058, 0.06733333319425583, 0.06733333319425583, 0.0676666647195816, 0.06800000369548798, 0.06966666877269745, 0.07266666740179062, 0.07466666400432587, 0.07566666603088379, 0.07833333313465118, 0.07733333110809326, 0.07599999755620956, 0.07666666805744171, 0.07733333110809326, 0.07566666603088379]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 2, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 0, 5, 3, 2, 5, 9, 9, 8, 8, 7, 2, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [3, 3, 3, 3, 2, 3, 0, 3, 1, 4, 4, 3, 1, 4, 1, 3], [57, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 5, 9, 3, 0, 1, 3, 2, 2, 5], [3, 1, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.04171428456902504, "mapping_values": [1, 4, 4, 2, 2, 0, 5, 5, 3, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.square(grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.302833993342637, 2.3022823735565763, 2.302933726722003, 2.3024817160517075, 2.301387185166147, 2.3018118608361617], "accuracy": [0.08796724677085876, 0.09219389408826828, 0.09008057415485382, 0.08981640636920929, 0.0952318087220192, 0.08968432247638702], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [1, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [3, 4, 1, 3, 2, 0, 3, 9, 8, 8, 7, 3, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [3, 3, 3, 3, 0, 3, 2, 2, 1, 4, 4, 3, 1, 4, 1, 3], [77, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 5, 9, 3, 0, 1, 3, 2, 2, 5], [3, 1, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.04171428456902504, "mapping_values": [1, 1, 1, 0, 1, 0, 18, 18, 11, 7, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.multiply(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))))))), grad)), tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)))))), tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.302833993342637, 2.3022823735565763, 2.302933726722003, 2.3024817160517075, 2.301387185166147, 2.3018118608361617], "accuracy": [0.08796724677085876, 0.09219389408826828, 0.09008057415485382, 0.08981640636920929, 0.0952318087220192, 0.08968432247638702], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}]