[{"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [31, 32, 29, 49, 25], [1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1], [3, 2, 6, 6, 3, 7, 4, 9, 2, 3, 0, 2, 1, 6, 4, 3, 3, 8], [1, 3, 3, 1, 1, 5, 3, 2, 1, 4, 4, 0], [98], [0, 1, 1, 0, 1], [0, 0, 1], [3, 2, 8, 4], [2], [64], [0, 1, 0, 1, 1, 1], [3, 1, 9, 1, 2], [1, 3, 0], [97, 52, 13]], "fitness": -0.8214285969734192, "mapping_values": [1, 3, 3, 1, 2, 1, 11, 11, 5, 6, 0, 3, 1, 1, 0, 0, 5, 2, 3, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, grad))), grad), tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, alpha))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(sigma, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2478502848522774, 1.7216808168470206, 1.1904616076806753, 0.8999341756770671, 0.8159465996139889, 0.7513827860882852, 0.7127008800965731, 0.6732349639177606, 0.6467737803653152, 0.618960368501008, 0.5918754156570173, 0.5569331119514302, 0.5400115120853368, 0.5189062369151626, 0.5131132955076263, 0.49200826808524845, 0.4669552663959422, 0.45986378817998536, 0.4471321315490464, 0.4239721782234886, 0.4132075380883779, 0.405603356967434, 0.3918510137720981, 0.38673389689750076, 0.3718774184267739, 0.365773022619646, 0.3504630895559074, 0.34337034106270325, 0.34119664397316524, 0.3328790758201207, 0.3269844567456092, 0.3177351697309064, 0.30971387287707863, 0.30968146609308983, 0.30421963484059583, 0.2895801100929604, 0.28530710594899084, 0.27228182292672637, 0.27130458257249035, 0.2588862162445042, 0.2551688630964935, 0.2531071954186976, 0.24252479218252582, 0.24707124273515002, 0.23082817409331724, 0.23327059126438765, 0.22625176403083508], "accuracy": [0.20737022161483765, 0.44445911049842834, 0.5971469879150391, 0.6715096831321716, 0.6970016956329346, 0.7127195596694946, 0.7276449799537659, 0.7465327978134155, 0.7561748623847961, 0.7627789974212646, 0.7733456492424011, 0.7915731072425842, 0.7952714562416077, 0.7981772422790527, 0.8068947196006775, 0.8195747137069702, 0.8285563588142395, 0.8323867321014404, 0.8354246616363525, 0.8454629778862, 0.847840428352356, 0.8506141901016235, 0.8545766472816467, 0.858671247959137, 0.8621054291725159, 0.8594637513160706, 0.8679170608520508, 0.8702945709228516, 0.8750495314598083, 0.8755778670310974, 0.8770307898521423, 0.8811253309249878, 0.8786157965660095, 0.8808611631393433, 0.8849557638168335, 0.8887861371040344, 0.8894465565681458, 0.900409460067749, 0.8968431949615479, 0.9002773761749268, 0.9045040011405945, 0.9037115573883057, 0.9070135951042175, 0.90423983335495, 0.9097873568534851, 0.9111081957817078, 0.9126931428909302], "val_loss": [1.765920639038086, 0.8617442846298218, 0.6559377057211739, 0.6240208319255284, 0.5698273863111224, 0.5523886510304042, 0.5304884740284511, 0.5117389133998326, 0.4810029608862741, 0.4672491380146572, 0.4492248126438686, 0.42856248787471224, 0.42192499126706806, 0.40577625376837595, 0.3967936635017395, 0.3871073041643415, 0.37941670417785645, 0.36587092706135343, 0.36032032115118845, 0.36236904348645893, 0.3526542867933001, 0.35213438102177214, 0.3396313786506653, 0.3426856994628906, 0.33642070634024485, 0.33682635852268766, 0.32869540793555124, 0.3239502821649824, 0.32367089816502165, 0.32406437397003174, 0.32143317801611765, 0.31806730372565134, 0.3193551131657192, 0.31812769174575806, 0.3149401034627642, 0.31675504786627634, 0.3139811839376177, 0.3117852807044983, 0.30996365206582205, 0.31400381667273386, 0.31284288849149433, 0.3131507635116577, 0.3150167465209961, 0.31498901333127705, 0.3173493232045855, 0.31944347279412405, 0.3181133610861642], "val_accuracy": [0.48133334517478943, 0.6723333597183228, 0.731333315372467, 0.7400000095367432, 0.753000020980835, 0.7553333044052124, 0.7733333110809326, 0.7756666541099548, 0.7793333530426025, 0.7993333339691162, 0.8029999732971191, 0.8143333196640015, 0.8203333616256714, 0.8240000009536743, 0.8346666693687439, 0.8386666774749756, 0.8353333473205566, 0.8473333120346069, 0.8539999723434448, 0.8486666679382324, 0.8550000190734863, 0.8539999723434448, 0.8569999933242798, 0.8610000014305115, 0.859333336353302, 0.8636666536331177, 0.8616666793823242, 0.8676666617393494, 0.8643333315849304, 0.8650000095367432, 0.8676666617393494, 0.8656666874885559, 0.8690000176429749, 0.8640000224113464, 0.8703333139419556, 0.8706666827201843, 0.8709999918937683, 0.8740000128746033, 0.8713333606719971, 0.875333309173584, 0.875333309173584, 0.8796666860580444, 0.8723333477973938, 0.874666690826416, 0.8733333349227905, 0.875, 0.8763333559036255]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [31, 32, 29, 49, 25], [1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 2, 6, 6, 3, 7, 4, 9, 2, 3, 0, 2, 1, 6, 4, 3, 3, 8], [1, 3, 5, 1, 1, 5, 3, 2, 1, 4, 4, 0], [98], [0, 1, 1, 0, 1], [0, 0, 1], [3, 2, 8, 4], [2], [64], [0, 1, 0, 1, 0, 1], [3, 1, 9, 1, 2], [1, 3, 0], [97, 52, 13]], "fitness": -0.8134285807609558, "mapping_values": [1, 3, 3, 1, 2, 1, 5, 5, 2, 3, 0, 3, 1, 1, 0, 0, 5, 3, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.add(beta, alpha), grad), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(sigma, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2477496362491416, 1.7165832121799556, 1.1739305200719752, 0.8931689187913854, 0.8089097600571468, 0.7431559188097318, 0.7049777390714083, 0.6652656544500323, 0.6431640754711547, 0.6173646918629233, 0.5888160175619628, 0.5544766503522865, 0.5435323636954754, 0.5187970554871156, 0.5120083354231452, 0.49216538403547827, 0.46743033493136715, 0.45855988708343554, 0.44455470454344864, 0.4234056529383445, 0.41426688088260355, 0.40566017866732973, 0.39199086191190974, 0.38365463738302275, 0.3756455048286935, 0.3676265235495778, 0.3559673520174355, 0.3501693592953597, 0.34037496328054717, 0.3387448018560194, 0.3307407696753162, 0.32135773389220723, 0.3090228972937594], "accuracy": [0.20737022161483765, 0.4434024691581726, 0.6001849174499512, 0.6741513609886169, 0.6989829540252686, 0.7174745798110962, 0.7331924438476562, 0.7497028112411499, 0.7597411274909973, 0.7626469135284424, 0.7738739848136902, 0.7911768555641174, 0.7893276810646057, 0.7968564033508301, 0.8055738806724548, 0.8173292875289917, 0.8261788487434387, 0.8304054737091064, 0.8385946154594421, 0.8433496356010437, 0.8482366800308228, 0.8498216867446899, 0.8551049828529358, 0.8631620407104492, 0.859199583530426, 0.8584070801734924, 0.8654074668884277, 0.8667283058166504, 0.8729361891746521, 0.8697662353515625, 0.8766345381736755, 0.8798044919967651, 0.8811253309249878], "val_loss": [1.7646169662475586, 0.8475889308112008, 0.6591464451381138, 0.6171708106994629, 0.5660307577678135, 0.5482698338372367, 0.5224340302603585, 0.503652674811227, 0.48087470872061594, 0.46689767496926443, 0.4506032466888428, 0.4265103595597403, 0.4175709996904646, 0.4055770380156381, 0.3933726804597037, 0.38616226400647846, 0.37631275824138094, 0.3674034816878183, 0.3592933075768607, 0.3542522192001343, 0.3478021877152579, 0.34362039395741056, 0.33760617460523334, 0.3356975657599313, 0.3311469725200108, 0.33330791337149485, 0.32869341543742586, 0.3247596706662859, 0.3246020419257028, 0.32662338869912283, 0.32597650800432476, 0.32341523681368145, 0.32378287826265606], "val_accuracy": [0.48100000619888306, 0.6756666898727417, 0.7326666712760925, 0.7423333525657654, 0.7523333430290222, 0.7580000162124634, 0.7760000228881836, 0.7823333144187927, 0.781000018119812, 0.7976666688919067, 0.8046666383743286, 0.8196666836738586, 0.8266666531562805, 0.8256666660308838, 0.8346666693687439, 0.8396666646003723, 0.8403333425521851, 0.8513333201408386, 0.8526666760444641, 0.8516666889190674, 0.8579999804496765, 0.8560000061988831, 0.8583333492279053, 0.8619999885559082, 0.8633333444595337, 0.8666666746139526, 0.8633333444595337, 0.8669999837875366, 0.8633333444595337, 0.8659999966621399, 0.8636666536331177, 0.8666666746139526, 0.8650000095367432]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [31, 32, 29, 49, 25], [1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 6, 6, 3, 7, 4, 9, 2, 3, 0, 2, 1, 6, 4, 3, 3, 8], [1, 3, 3, 1, 1, 5, 3, 2, 1, 4, 4, 0], [75], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [2], [64], [0, 1, 1, 1, 0, 1, 1], [3, 1, 9, 1, 2], [1, 3, 0], [97, 52, 13]], "fitness": -0.6511428356170654, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 3, 1, 2, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.multiply(alpha, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, sigma)", "other_info": {"loss": [2.2996484165761006, 2.288292701139489, 2.2673423890786606, 2.166514822709609, 1.7045237427264188, 1.3310387096605312, 1.1325076757216135, 0.9867700050456917, 0.9139092979870768, 0.8699842956261061, 0.8288980540330494, 0.8097865662759306, 0.8588428744361574, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.12495046854019165, 0.160084530711174, 0.2382776439189911, 0.410910040140152, 0.5457667708396912, 0.5674283504486084, 0.6273940205574036, 0.6532822847366333, 0.6672830581665039, 0.6832650899887085, 0.6935675740242004, 0.6828688383102417, 0.21199312806129456, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9661504881722587, 1.9477030209132604, 1.9055948938642229, 1.5951054777417863, 0.9226613385336739, 0.8389757020132882, 0.6427667481558663, 0.6536282130650112, 0.598369870867048, 0.5780367680958339, 0.5895842824663434, 0.5358402729034424, 0.7585093293871198, NaN, NaN, NaN, NaN], "val_accuracy": [0.07866666465997696, 0.2016666680574417, 0.30433332920074463, 0.4763333201408386, 0.5836666822433472, 0.6586666703224182, 0.7083333134651184, 0.7073333263397217, 0.7269999980926514, 0.7463333606719971, 0.7476666569709778, 0.7576666474342346, 0.6586666703224182, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [5, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [2, 2, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 32, 29, 49, 25], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [4, 7, 6, 8, 4, 7, 3, 0, 8, 4, 0], [0, 2, 3, 1, 1, 3, 1, 2, 1, 4, 4, 0, 5, 2, 3, 3], [75, 75], [0, 1, 1, 0, 1], [0, 0, 1], [2, 2, 8, 4], [2], [64], [0, 1, 0, 0, 1, 1], [3, 1, 9, 1, 2], [2, 1, 2], [81, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 7, 7, 1, 3, 1, 1, 0, 0, 5, 3, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.pow(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, alpha))))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.math.subtract(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [7, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 32, 29, 49, 25], [0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1], [3, 2, 6, 6, 3, 7, 4, 9, 2, 3, 0, 2, 1, 6, 4, 3, 3, 8], [4, 3, 3, 1, 1, 5, 3, 2, 1, 4, 4, 0], [98], [1, 1, 0, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 0, 0, 0, 1, 1, 1], [7, 7, 9, 1, 2], [1, 3, 0], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 20, 20, 11, 9, 1, 1, 0, 0, 0, 0, 7, 4, 3, 2], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, grad)), grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(alpha, tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.negative(tf.math.add(beta, grad)), tf.math.add(beta, grad)), tf.math.add(beta, beta)))))), alpha)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.add(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.subtract(alpha, sigma)), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3021453392425344, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [31, 32, 29, 49, 25], [0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1], [6, 2, 6, 6, 3, 7, 4, 9, 2, 3, 0, 2, 1, 6, 4, 3, 3, 8], [1, 3, 3, 1, 1, 5, 3, 2, 1, 4, 4, 0], [98], [0, 1, 1, 0, 1], [0, 0, 1], [3, 2, 8, 4], [2], [64], [0, 0, 0, 1, 1, 1], [7, 1, 9, 1, 2], [3, 3, 2], [97, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 5, 3, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.subtract(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), sigma), sigma)", "other_info": {"loss": [2.3021453392425344, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [31, 32, 29, 49, 25], [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1], [3, 2, 6, 0, 3, 7, 1, 2, 2, 3, 0, 2, 1, 6, 4, 3, 3, 8], [1, 3, 3, 1, 1, 5, 3, 2, 3, 4, 4, 0], [98], [0, 1, 1, 0, 1], [0, 0, 1], [3, 2, 8, 4], [6], [64], [0, 0, 0, 1, 1, 1], [1, 1, 9, 1, 2], [1, 3, 0], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 21, 21, 11, 10, 0, 3, 1, 1, 0, 0, 5, 3, 2, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(grad, grad))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, tf.math.negative(grad))))), grad))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.subtract(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), alpha), sigma)", "other_info": {"loss": [2.302169525108443, 2.302614272089525, 2.302604849091957, 2.302606391963422, 2.3026173843479016, 2.3026036172258917, 2.302617905209518, 2.3026381825978777, 2.3026177558160774, 2.302617561736867, 2.302622564118284, 2.302636438530229, 2.3026299433795736, 2.3026212373697494], "accuracy": [0.09140139818191528, 0.09576013684272766, 0.09998679161071777, 0.09998679161071777, 0.09628847241401672, 0.09998679161071777, 0.09800554811954498, 0.09628847241401672, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9736415999276298, 1.9736698695591517, 1.9736815180097307, 1.9737130573817663, 1.9737176895141602, 1.9737125124250139, 1.9737200736999512, 1.9737248420715332, 1.97369384765625, 1.9736393519810267, 1.97360018321446, 1.9735498428344727, 1.9735397611345564, 1.973548139844622], "val_accuracy": [0.09666666388511658, 0.09566666930913925, 0.09566666930913925, 0.0949999988079071, 0.09799999743700027, 0.09799999743700027, 0.09666666388511658, 0.0949999988079071, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [31, 32, 29, 49, 25], [1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [6, 7, 6, 8, 4, 7, 3, 0, 9, 4, 0], [1, 0, 3, 3, 1, 5, 3, 2, 3, 4, 4, 0], [75, 35], [0, 1, 1, 0, 1], [0, 0, 1], [2, 2, 8, 4], [6], [64], [0, 0, 0, 1, 1, 1, 1], [3, 6, 2, 1, 2, 4, 6, 3, 7], [1, 3, 0, 0], [97, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 15, 15, 9, 6, 2, 3, 1, 1, 0, 0, 7, 3, 4, 2], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(alpha, tf.math.add(tf.math.add(beta, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.sqrt(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.negative(tf.math.add(beta, alpha)), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), grad)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, sigma), tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07475894689559937, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [6, 2, 3, 6, 2, 2, 0, 5, 5, 9, 6, 2, 6, 3, 6, 5, 6, 0], [2, 0, 1, 0, 2, 0, 1, 2, 0, 2, 0, 0], [31, 32, 29, 49, 25, 87, 7], [0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1], [3, 2, 1, 6, 2, 7, 2, 3, 2, 5, 0, 2, 1, 6, 4, 3, 3, 8, 4, 0, 9, 8, 4, 4, 1], [3, 3, 0, 3, 1, 3, 2, 1, 2, 5, 4, 2, 1, 0, 3, 3, 4, 3, 3], [56, 22, 44, 7], [0, 1, 1, 0, 1], [0, 0, 1], [3, 2, 8, 4], [1], [64], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [3, 6, 9, 1, 2, 7, 4, 4, 4, 6, 7, 2, 8, 4, 9, 5, 0, 1, 0, 4, 2, 4, 8, 4, 2, 9, 2, 7, 3, 8, 3, 8], [3, 1, 2, 2, 2, 0, 0, 1, 1, 0, 3, 1, 1, 1, 0, 1, 0, 3, 3, 0], [91, 52, 13, 90, 47, 91, 55, 68, 58]], "fitness": -0.10000000149011612, "mapping_values": [1, 30, 30, 18, 12, 7, 44, 44, 25, 19, 3, 3, 1, 1, 0, 0, 52, 32, 20, 9], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, grad), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))))), tf.math.square(tf.math.square(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))))))))))), tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.divide_no_nan(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.negative(tf.math.add(tf.math.add(beta, alpha), grad)))), tf.math.add(beta, beta))), tf.math.subtract(alpha, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, tf.math.sqrt(grad)))), tf.math.pow(tf.math.add(beta, tf.math.negative(grad)), tf.math.add(beta, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))), tf.math.add(beta, beta))), tf.math.sqrt(tf.math.pow(tf.math.add(beta, alpha), tf.math.pow(tf.math.subtract(tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), grad), grad)))))))), grad)), grad))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.divide_no_nan(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), tf.math.subtract(alpha, tf.math.add(tf.math.add(tf.math.pow(tf.math.pow(tf.math.pow(beta, beta), tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.pow(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.negative(tf.math.subtract(tf.math.negative(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.pow(alpha, alpha)))))), tf.math.add(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.sqrt(sigma), tf.math.pow(tf.math.add(alpha, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)), alpha))))), alpha), tf.math.add(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), alpha)), tf.math.add(tf.math.multiply(tf.math.sqrt(tf.math.multiply(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), sigma)), tf.math.sqrt(sigma)), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [1, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 0, 2, 0, 2, 2, 2, 2, 0, 2, 0, 0], [31, 32, 29, 64, 25, 26, 74, 54], [0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1], [2, 7, 2, 8, 5, 4, 3, 9, 0, 4, 0], [1, 3, 3, 1, 5, 5, 3, 2, 1, 4, 4, 0], [98], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [1], [64], [0, 1, 0, 1, 1, 1], [3, 6, 9, 1, 2], [1, 3, 0], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 11, 8, 3, 9, 9, 5, 4, 0, 1, 1, 0, 1, 0, 5, 2, 3, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))), tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))), tf.math.pow(grad, tf.math.add(alpha, grad)))), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(tf.math.sqrt(tf.math.add(beta, alpha)), tf.math.add(beta, grad)), tf.math.square(tf.math.add(beta, grad))), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.divide_no_nan(sigma, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 32, 29, 49, 25], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1], [4, 7, 0, 5, 0, 9, 3, 9], [3, 3, 0, 3, 1, 4, 4, 1, 3, 0, 5, 4], [50], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 1, 1, 0, 1], [3, 1, 9, 1, 2], [3, 1, 2], [23, 52, 13]], "fitness": -0.0657142847776413, "mapping_values": [1, 1, 1, 0, 1, 0, 7, 7, 4, 3, 1, 1, 1, 0, 1, 0, 3, 1, 2, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.square(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, alpha)", "other_info": {"loss": [2.2996312877867657, 2.2993436045477247, 2.3008435089921027, 2.30050080374578, 2.3013345379603303, 2.3020150377734336, 2.3017236708712976, 2.302102546020506, 2.3016227835031815, 2.3017470554794697, 2.301717470697109, 2.3019260272468323, 2.302239084728736, 2.302176989175073, 2.3025213432601728, 2.3025174272562676, 2.302947701117964, 2.3033816722468803, 2.3044632463375843, 2.3069256536712768, 2.3146958943796414], "accuracy": [0.09549596905708313, 0.09826971590518951, 0.09034473448991776, 0.09589222073554993, 0.09021265059709549, 0.08849557489156723, 0.0878351628780365, 0.08308017253875732, 0.07911768555641174, 0.08017434924840927, 0.07819310575723648, 0.08836349099874496, 0.07726852595806122, 0.08836349099874496, 0.09047681838274002, 0.09972262382507324, 0.09589222073554993, 0.09298639744520187, 0.09232597798109055, 0.10566636174917221, 0.10738343745470047], "val_loss": [1.9693036760602678, 1.9698841912405831, 1.971684387751988, 1.972043718610491, 1.9725737571716309, 1.972862379891532, 1.972942897251674, 1.9728821345738001, 1.9728155817304338, 1.9728503908429826, 1.972977910723005, 1.973153795514788, 1.973311492374965, 1.973447322845459, 1.9736114229474748, 1.9737625122070312, 1.9740183012826102, 1.9744971820286341, 1.9757121631077357, 1.9792667116437639, 1.9912376403808594], "val_accuracy": [0.06433333456516266, 0.07533333450555801, 0.0689999982714653, 0.07233333587646484, 0.07699999958276749, 0.07833333313465118, 0.07100000232458115, 0.06966666877269745, 0.07100000232458115, 0.07699999958276749, 0.0860000029206276, 0.0963333323597908, 0.10766666382551193, 0.11699999868869781, 0.12300000339746475, 0.13099999725818634, 0.12066666781902313, 0.12333333492279053, 0.12566666305065155, 0.12666666507720947, 0.11100000143051147]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 32, 29, 49, 25], [1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [4, 7, 3, 5, 0, 7, 3, 9], [1, 3, 3, 1, 1, 5, 3, 2, 1, 4, 4, 0], [98], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 0, 0, 1, 1, 1], [3, 1, 9, 1, 2], [3, 1, 2], [23, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), sigma), alpha)", "other_info": {"loss": [2.300422773542594, 2.302111580859653, 2.3031872596408176, 2.301592977622308, 2.3013881109394116, 2.3024811678558783], "accuracy": [0.09430722147226334, 0.09192973375320435, 0.08915598690509796, 0.09047681838274002, 0.09298639744520187, 0.08651433140039444], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [31, 32, 29, 49, 25], [1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1], [4, 7, 6, 8, 4, 7, 3, 0, 8, 4, 0], [3, 1, 3, 1, 1, 3, 1, 2, 1, 4, 4, 0, 5, 2, 3, 3], [75, 35], [0, 0, 0, 0, 1], [0, 0, 1, 1], [3, 2, 8, 4], [6, 4], [64], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1], [3, 0, 9, 1, 2], [3, 1, 2, 3, 2, 1, 0, 3, 0, 0], [97, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 5, 4, 2, 2, 0, 4, 2, 2, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), tf.math.add(sigma, grad))), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(alpha))", "other_info": {"loss": [2.300422773542594, 2.302111580859653, 2.3031872596408176, 2.301592977622308, 2.3013881109394116, 2.3024811678558783], "accuracy": [0.09430722147226334, 0.09192973375320435, 0.08915598690509796, 0.09047681838274002, 0.09298639744520187, 0.08651433140039444], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [1, 2, 3, 6, 2, 2, 0, 1, 1, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [92, 32, 29, 49, 25], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1], [3, 9, 6, 6, 3, 7, 4, 9, 2, 3, 0, 2, 1, 6, 4, 3, 3, 8], [1, 3, 3, 1, 5, 5, 3, 2, 1, 4, 4, 0], [98], [1, 1, 1, 0, 1], [0, 0, 1], [1, 2, 8, 4], [2], [64], [0, 1, 0, 1, 1, 1], [8, 8, 9, 1, 2], [3, 3, 0], [23, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 18, 18, 10, 8, 4, 3, 3, 2, 1, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), grad))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(sigma)", "other_info": {"loss": [2.300422773542594, 2.302111580859653, 2.3031872596408176, 2.301592977622308, 2.3013881109394116, 2.3024811678558783], "accuracy": [0.09430722147226334, 0.09192973375320435, 0.08915598690509796, 0.09047681838274002, 0.09298639744520187, 0.08651433140039444], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 32, 29, 49, 25], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], [4, 7, 3, 8, 0, 7, 3, 0, 8, 4, 0], [1, 3, 3, 1, 1, 1, 3, 2, 1, 4, 4, 0], [98], [0, 1, 1, 0, 1], [0, 0, 1], [3, 2, 8, 4], [2], [64], [1, 0, 0, 1, 1, 1], [3, 1, 2, 1, 2, 4, 6, 3, 7], [1, 1, 2], [81, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.pow(alpha, tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.300422773542594, 2.302111580859653, 2.3031872596408176, 2.301592977622308, 2.3013881109394116, 2.3024811678558783], "accuracy": [0.09430722147226334, 0.09192973375320435, 0.08915598690509796, 0.09047681838274002, 0.09298639744520187, 0.08651433140039444], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [1, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 32, 29, 49, 25], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 1, 1], [4, 7, 2, 1, 0, 7, 3, 9], [3, 3, 0, 3, 1, 4, 4, 1, 3, 0, 5, 4], [98], [0, 1, 0, 0, 1], [0, 0, 1], [3, 2, 8, 4], [4], [64], [0, 1, 0, 1, 1, 1], [8, 8, 9, 1, 2], [1, 3, 0], [23, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 4, 5, 1, 5, 3, 2, 1, 0, 2, 1, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(beta, grad), alpha))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(alpha)", "other_info": {"loss": [2.300422773542594, 2.302111580859653, 2.3031872596408176, 2.301592977622308, 2.3013881109394116, 2.3024811678558783], "accuracy": [0.09430722147226334, 0.09192973375320435, 0.08915598690509796, 0.09047681838274002, 0.09298639744520187, 0.08651433140039444], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [50, 32, 29, 49, 25], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 6, 6, 3, 7, 4, 9, 2, 3, 0, 2, 1, 6, 4, 3, 3, 8], [1, 3, 3, 2, 1, 5, 3, 2, 1, 4, 4, 0], [98], [1, 1, 1, 0, 1], [0, 0, 1], [3, 2, 8, 4], [2], [64], [0, 0, 0, 1, 1, 1], [3, 1, 9, 1, 2], [3, 3, 0], [97, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), sigma), sigma)", "other_info": {"loss": [2.300422773542594, 2.302111580859653, 2.3031872596408176, 2.301592977622308, 2.3013881109394116, 2.3024811678558783], "accuracy": [0.09430722147226334, 0.09192973375320435, 0.08915598690509796, 0.09047681838274002, 0.09298639744520187, 0.08651433140039444], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 1, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [31, 32, 29, 49, 25], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1], [3, 2, 6, 6, 8, 7, 4, 9, 2, 3, 0, 2, 1, 6, 4, 3, 3, 8], [1, 3, 3, 1, 1, 4, 3, 2, 1, 4, 4, 0], [98], [0, 0, 0, 0, 1], [0, 1, 1], [3, 2, 8, 4], [2, 5], [64], [0, 0, 1, 1, 1, 1], [3, 1, 9, 1, 2], [1, 3, 1], [97, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 3, 3, 1, 2, 0, 10, 10, 5, 5, 0, 3, 3, 1, 2, 0, 5, 2, 3, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, alpha), alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, grad))), tf.math.add(beta, grad)), tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(alpha)), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, beta), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(alpha, sigma), alpha)", "other_info": {"loss": [2.300422773542594, 2.302111580859653, 2.3031872596408176, 2.301592977622308, 2.3013881109394116, 2.3024811678558783], "accuracy": [0.09430722147226334, 0.09192973375320435, 0.08915598690509796, 0.09047681838274002, 0.09298639744520187, 0.08651433140039444], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 32, 29, 49, 25], [1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1], [5, 2, 1, 0, 3, 7, 4, 9, 2, 3, 0, 2, 1, 6, 4, 3, 3, 8], [1, 3, 1, 1, 1, 1, 3, 2, 3, 4, 4, 0], [75, 35], [0, 1, 1, 0, 1], [0, 0, 1], [2, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [3, 1, 2, 1, 2, 4, 6, 3, 7], [3, 1, 2, 3, 2, 1, 0, 3, 0, 0], [97, 52, 13]], "fitness": -0.03971428424119949, "mapping_values": [1, 1, 1, 0, 1, 0, 4, 4, 2, 2, 0, 3, 1, 1, 0, 0, 5, 2, 3, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(alpha, tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.subtract(alpha, beta))", "other_info": {"loss": [2.300422773542594, 2.302111580859653, 2.3031872596408176, 2.301592977622308, 2.301847776480481, 2.3048904673644754, 2.3050139558124756, 2.310914640429155, 2.309957686794464, 2.3122691406534175], "accuracy": [0.09430722147226334, 0.09192973375320435, 0.08915598690509796, 0.09047681838274002, 0.09338264167308807, 0.08281600475311279, 0.08466517180204391, 0.07172103971242905, 0.0730418711900711, 0.06894730031490326], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9727394240243095, 1.9727394240243095, 1.9771131787981306, 1.978569575718471, 1.9796666417803084, 1.981738771711077], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03866666555404663, 0.03866666555404663, 0.024000000208616257, 0.020666666328907013, 0.017999999225139618, 0.012333333492279053]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 2, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [31, 32, 29, 49, 25], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0], [3, 2, 7, 6, 3, 7, 4, 9, 2, 3, 0, 2, 1, 6, 4, 3, 3, 8], [1, 3, 3, 1, 1, 5, 3, 2, 1, 4, 4, 0], [98], [1, 1, 1, 0, 1], [0, 0, 1], [3, 2, 8, 4], [2], [64], [1, 0, 0, 1, 1, 1], [3, 0, 9, 1, 2], [1, 1, 2], [97, 52, 13]], "fitness": -0.035999998450279236, "mapping_values": [1, 17, 17, 10, 7, 3, 15, 15, 8, 7, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.square(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))))), grad))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad))), tf.math.add(beta, grad)), tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3007890601215455, 2.3037696721106316, 2.30719759218319, 2.3073138798610517, 2.3095337921019636, 2.314135693855069], "accuracy": [0.09245806187391281, 0.08942015469074249, 0.08651433140039444, 0.08294808864593506, 0.08334434032440186, 0.0742306187748909], "val_loss": [1.9716730117797852, 1.972902502332415, 1.9745916639055525, 1.9761526244027274, 1.9780396052769251, 1.9801709992544991], "val_accuracy": [0.03433333337306976, 0.026333333924412727, 0.01966666616499424, 0.01666666753590107, 0.01666666753590107, 0.026000000536441803]}}]