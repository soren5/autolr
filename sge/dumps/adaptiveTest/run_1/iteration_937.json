[{"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [5, 2, 2, 2, 8, 0, 8, 5, 2, 2, 9, 2, 2, 8, 9, 0, 2, 2, 2, 3, 6, 3, 3, 5, 1, 2, 0, 3, 5, 4, 8, 6, 0, 8, 6, 3, 7, 1, 0, 6, 6, 3, 6, 0], [3, 3, 3, 1, 0, 3, 3, 3, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [25, 9, 52, 66, 2, 57, 35, 9, 54, 64], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [6, 3, 3, 4, 8], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8320000171661377, "mapping_values": [1, 4, 4, 2, 2, 1, 48, 48, 31, 17, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.sqrt(grad)))), tf.math.square(tf.math.add(beta, tf.math.add(grad, tf.math.add(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(grad, tf.math.sqrt(tf.math.add(beta, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))))), tf.math.add(beta, alpha))))))))), tf.math.add(beta, tf.math.negative(tf.math.add(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.negative(tf.math.multiply(grad, tf.math.square(grad)))))))))))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), beta))))))), tf.math.sqrt(grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9323999121078583, 1.1904358645519009, 0.8998858668328339, 0.8018785738249056, 0.7477070314930477, 0.7241320465502564, 0.6848875055884988, 0.6590803549856857, 0.6251218827598052, 0.6438310491709646, 0.5857480706760455, 0.5922613579284371, 0.5684946603101746, 0.5865827351592047, 0.5430543038429696, 0.517407890615399, 0.5210092877116673, 0.5037665515685393, 0.4976632018737065, 0.47607672030285536, 0.4807679220087351, 0.4658897757734904, 0.4708058601593408, 0.4479614579052485, 0.4415599483469647, 0.4398997152021706, 0.4297756144021402, 0.42854877000298436, 0.40764200156390973, 0.4105732180557042, 0.4152251474530768, 0.3890880301344774, 0.39158605983653766, 0.3752973534333125, 0.36937852548475925, 0.37972735944929187], "accuracy": [0.3509443998336792, 0.5819574594497681, 0.6684718132019043, 0.700700044631958, 0.7127195596694946, 0.7289658188819885, 0.7376832365989685, 0.7544577717781067, 0.7613261342048645, 0.7563069462776184, 0.78113853931427, 0.7726852297782898, 0.7854973077774048, 0.7781006693840027, 0.7931581139564514, 0.8038568496704102, 0.8035926818847656, 0.8119139075279236, 0.8129705190658569, 0.8235371708869934, 0.8259146809577942, 0.8265751004219055, 0.8269713521003723, 0.8358209133148193, 0.8342359066009521, 0.8379341959953308, 0.8413683772087097, 0.8384625315666199, 0.8504821062088013, 0.846387505531311, 0.8408400416374207, 0.8578787446022034, 0.8498216867446899, 0.863558292388916, 0.8636903762817383, 0.8574824929237366], "val_loss": [1.3335366930280412, 0.7419881309781756, 0.5944785901478359, 0.5933771984917777, 0.5658965962273734, 0.5277409042630877, 0.5075443131583077, 0.5063676493508475, 0.5234466620853969, 0.47407773562840055, 0.47320822307041716, 0.4747744458062308, 0.4426042693001883, 0.4641807760511126, 0.43223811047417776, 0.4532045807157244, 0.42307595695768085, 0.42764595576695036, 0.41002086230686735, 0.4164156658308847, 0.38747975655964445, 0.3949205364499773, 0.39655596017837524, 0.3821821297918047, 0.38591709307261873, 0.36464394841875347, 0.4144839899880545, 0.3523804545402527, 0.36364402941295076, 0.3590244650840759, 0.3540432793753488, 0.3502195477485657, 0.3534382326262338, 0.3470507689884731, 0.35775179522378103, 0.3518603869846889], "val_accuracy": [0.5406666398048401, 0.6693333387374878, 0.7416666746139526, 0.7229999899864197, 0.7543333172798157, 0.7543333172798157, 0.7760000228881836, 0.7583333253860474, 0.7726666927337646, 0.7940000295639038, 0.7833333611488342, 0.793666660785675, 0.8090000152587891, 0.7903333306312561, 0.8220000267028809, 0.7943333387374878, 0.812333345413208, 0.8196666836738586, 0.8299999833106995, 0.8253333568572998, 0.8376666903495789, 0.8306666612625122, 0.8366666436195374, 0.8389999866485596, 0.8353333473205566, 0.847000002861023, 0.815666675567627, 0.8560000061988831, 0.8519999980926514, 0.8536666631698608, 0.8566666841506958, 0.8543333411216736, 0.8553333282470703, 0.856333315372467, 0.8513333201408386, 0.8543333411216736]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1], [2, 7, 6, 2, 6, 2, 0, 3, 2, 8, 6, 3, 4, 4, 0, 0, 2, 2, 2, 6, 1, 3, 6, 0, 8, 5, 6, 3, 2, 4, 8, 3, 9, 1, 8, 5, 1, 6, 4, 0, 0, 8, 6, 0, 8, 4, 3, 7, 2, 5, 9, 2, 2, 9, 7, 2, 9], [3, 3, 3, 1, 2, 3, 2, 3, 3, 3, 2, 0, 3, 3, 3, 3, 4, 3, 1, 0, 4, 1, 1, 1, 3, 3, 1, 3, 5, 3, 2, 0, 3, 2, 0, 5, 3, 3, 2, 3, 5], [19, 9, 7, 66, 40, 59, 35, 9, 54, 64], [0, 0, 0, 0, 1, 0, 0, 0, 1], [1, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8251428604125977, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.negative(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.966382140622651, 1.4539352274211863, 1.0614401057899872, 0.9242797912450404, 0.8124660917828033, 0.7408337637638419, 0.7342214365960301, 0.7149805720959987, 0.6874038960010683, 0.6675991896924216, 0.6462417821275749, 0.6466667972787528, 0.6169117622765348, 0.6280127822006573, 0.5779113114911488, 0.5548148743622275, 0.5679576493147231, 0.5646880880685106, 0.5393415599167859, 0.5276675602039089, 0.5270001779394914, 0.5132382410534022, 0.5261575330391757, 0.4995870178307304, 0.4912725532169843, 0.48531723185033376, 0.46448582015599965], "accuracy": [0.342491090297699, 0.4951789677143097, 0.6132611036300659, 0.6573768258094788, 0.7000396251678467, 0.7231541275978088, 0.7223616242408752, 0.7325320243835449, 0.7423061728477478, 0.748778223991394, 0.755118191242218, 0.7559106945991516, 0.7648923397064209, 0.7633073329925537, 0.7843085527420044, 0.7946110367774963, 0.787082314491272, 0.7852331399917603, 0.8021397590637207, 0.8041210174560547, 0.806630551815033, 0.8062343001365662, 0.8030643463134766, 0.8169330358505249, 0.817989706993103, 0.8178576231002808, 0.829216718673706], "val_loss": [1.4260425908224923, 0.8327848059790475, 0.7574720552989415, 0.6311710902622768, 0.5819757665906634, 0.5944305147443499, 0.564731069973537, 0.5379411152430943, 0.5209811074393136, 0.49586924484797884, 0.5335198981421334, 0.5019392967224121, 0.4694559063230242, 0.46960404941013884, 0.46804055145808626, 0.4582087482724871, 0.49942142622811453, 0.4596696070262364, 0.43562759671892437, 0.428263178893498, 0.4210423742021833, 0.40649986267089844, 0.4328567811420986, 0.40126995529447285, 0.4148306931768145, 0.3898396151406424, 0.42175549268722534], "val_accuracy": [0.429666668176651, 0.6256666779518127, 0.6613333225250244, 0.7236666679382324, 0.7473333477973938, 0.7306666374206543, 0.737333357334137, 0.7416666746139526, 0.765666663646698, 0.7760000228881836, 0.7463333606719971, 0.7833333611488342, 0.7953333258628845, 0.7979999780654907, 0.7943333387374878, 0.7940000295639038, 0.7649999856948853, 0.8013333082199097, 0.8090000152587891, 0.8176666498184204, 0.8223333358764648, 0.8320000171661377, 0.8113333582878113, 0.8293333053588867, 0.8226666450500488, 0.8320000171661377, 0.8116666674613953]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [2, 2, 1, 2, 8, 0, 8, 5, 2, 2, 9, 2, 2, 8, 9, 0, 2, 2, 2, 6, 6, 3, 3, 5, 1, 2, 0, 3, 5, 4, 8, 6, 0, 8, 6, 3, 7, 1, 0, 6, 6, 3, 6, 0], [4, 3, 3, 1, 0, 3, 3, 3, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [25, 9, 52, 66, 2, 57, 35, 9, 54, 64], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0, 0], [6, 7, 3, 4, 8], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8128571510314941, "mapping_values": [1, 4, 4, 2, 2, 1, 11, 11, 6, 5, 1, 10, 7, 5, 2, 2, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, grad)), grad)), grad)), alpha)), tf.math.negative(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), sigma)), tf.math.add(sigma, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))), tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.sqrt(sigma)), sigma)))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9324662797659804, 1.1891744980533692, 0.9067793125174758, 0.8057725101870757, 0.7438077164867756, 0.7210432649634975, 0.6830534592453893, 0.6682656409796817, 0.6310853215728879, 0.6307154865454468, 0.5955734442820592, 0.585075831258963, 0.5658603552672306, 0.5930639345411927, 0.5453917072858824, 0.5170338730518577, 0.5280945920169534, 0.5028962945075256, 0.49777484277865797, 0.4761773956261291], "accuracy": [0.35081231594085693, 0.5818253755569458, 0.6659622192382812, 0.6977941989898682, 0.7180029153823853, 0.7281733155250549, 0.7380794882774353, 0.7512878179550171, 0.7592127919197083, 0.7594769597053528, 0.7755910754203796, 0.7750627398490906, 0.7833839654922485, 0.7766477465629578, 0.7924976944923401, 0.8076872229576111, 0.798309326171875, 0.8099326491355896, 0.8141592741012573, 0.8272355198860168], "val_loss": [1.33431533404759, 0.7370531218392509, 0.6115382058279855, 0.5827385016850063, 0.5633174521582467, 0.5329840353557042, 0.5199370213917324, 0.5108265365873065, 0.5041300228663853, 0.47539217131478445, 0.4605119228363037, 0.48928516251700266, 0.46090917927878244, 0.47092396872384207, 0.4292254533086504, 0.4719517401286534, 0.41276001930236816, 0.4275126116616385, 0.40909556831632343, 0.41666277817317415], "val_accuracy": [0.5406666398048401, 0.6773333549499512, 0.7369999885559082, 0.7390000224113464, 0.7540000081062317, 0.7559999823570251, 0.7736666798591614, 0.7596666812896729, 0.7816666960716248, 0.7940000295639038, 0.7956666946411133, 0.7763333320617676, 0.7976666688919067, 0.7833333611488342, 0.8270000219345093, 0.7853333353996277, 0.824999988079071, 0.8163333535194397, 0.8256666660308838, 0.8246666789054871]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [25, 66, 89, 50, 85, 46], [1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0], [2, 2, 6, 1, 6, 6, 0, 3, 2, 8, 6, 3, 4, 4, 0, 0, 2, 2, 2, 6, 1, 3, 6, 0, 8, 5, 6, 3, 2, 4, 8, 3, 0, 1, 8, 5, 3, 6, 5, 3, 0, 2, 6, 0, 6, 4, 5, 7, 2, 6, 9, 2, 2, 9, 7, 2, 9], [3, 3, 3, 1, 3, 3, 2, 3, 3, 3, 2, 0, 3, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 2, 3, 1, 3, 5, 1, 0, 3, 1, 2, 3, 5, 3, 3, 2, 3, 5], [74, 9, 7, 66, 40, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [4, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.7685714364051819, "mapping_values": [1, 4, 4, 2, 2, 1, 43, 43, 23, 20, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.negative(tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.divide_no_nan(grad, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(alpha)), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), tf.math.pow(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, grad)))), tf.math.negative(tf.math.add(beta, grad))))), tf.math.add(beta, beta)))))), tf.math.add(beta, tf.math.add(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad)))))))))), tf.math.multiply(tf.math.divide_no_nan(grad, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.297659410099548, 2.281934977711436, 2.265934537572159, 2.2503892703693085, 2.2318908904348587, 2.212838313047676, 2.190174129109703, 2.1599206165189773, 2.1266350337716142, 2.085458303817338, 2.036928487444409, 1.9824258626302502, 1.922372744650558, 1.8528831344727181, 1.787977033633881, 1.7124821765469114, 1.6455731708234123, 1.5701402668561824, 1.5107495231462145, 1.4506230724171216, 1.3934986352007293, 1.3360421712514101, 1.3155870102872433, 1.2737979345538313, 1.2313291345683732, 1.2111012453668233, 1.1805990976727383, 1.1509557873927811, 1.1177787808788735, 1.109231401554204, 1.0798563259373157, 1.0737544126073524, 1.0464261626491866, 1.0351089001363216, 1.0203424946522717, 1.0081936388739412, 0.9909934348213579, 0.9805948569585367, 0.9681695402731371, 0.9551508766375733, 0.9506937850341979, 0.9372028513292295, 0.9293318210245203, 0.9268084235746217, 0.9126142035811065, 0.899585370933375, 0.8926960661930572, 0.8865319156155469, 0.8785087263044066, 0.8779509965738269, 0.8673499898667412, 0.861257125444542, 0.8557913251100137, 0.8538394861878846, 0.8418018616988847, 0.840192064672429, 0.8317072150446184, 0.8309663364191601, 0.8193823406173883, 0.8177785466942632, 0.8205945180974317, 0.8124993669279751, 0.8187469208890799, 0.8011020267754498, 0.8002104106092371, 0.7966656481600898, 0.7961377294119307, 0.7823768926491874, 0.7907811060573415, 0.7738950628693299, 0.7780794231269055, 0.7713792692983564, 0.7767149171557142, 0.7691883823465693, 0.7695068288095056, 0.7693129713666627, 0.7646838320780109, 0.7636759849571517, 0.7521235910562272, 0.7485049574476869, 0.750816024392115, 0.7549868915862317, 0.7479385993562874, 0.7515101890601125, 0.7462613417991731, 0.7377023433713141, 0.7377207762356431, 0.7348744736654946, 0.7318325386685371, 0.7219507978608375], "accuracy": [0.10579843819141388, 0.14040417969226837, 0.18742570281028748, 0.23154141008853912, 0.266939640045166, 0.29124289751052856, 0.3151499032974243, 0.3467177450656891, 0.3533218801021576, 0.38264429569244385, 0.40285298228263855, 0.42385417222976685, 0.4325716495513916, 0.4453836977481842, 0.4554220139980316, 0.4733852744102478, 0.4854048490524292, 0.501518964767456, 0.5165764093399048, 0.5292563438415527, 0.5517104864120483, 0.5559371113777161, 0.5517104864120483, 0.5715228915214539, 0.5758816599845886, 0.5779950022697449, 0.5863162279129028, 0.5974111557006836, 0.6067890524864197, 0.6111478209495544, 0.620261549949646, 0.6173557043075562, 0.6310923099517822, 0.6296393871307373, 0.6440364718437195, 0.6394135355949402, 0.6494518518447876, 0.6546030640602112, 0.6573768258094788, 0.6588297486305237, 0.6600185036659241, 0.6649055480957031, 0.668339729309082, 0.6756042838096619, 0.6749438643455505, 0.6778497099876404, 0.6787742972373962, 0.6745476126670837, 0.6866992712020874, 0.6841896772384644, 0.6903975605964661, 0.6914542317390442, 0.6919825673103333, 0.6951525807380676, 0.7005679607391357, 0.693831741809845, 0.6992471218109131, 0.6959450244903564, 0.7017567157745361, 0.7028133869171143, 0.7051908373832703, 0.7009642124176025, 0.7024171352386475, 0.7080966830253601, 0.7124554514884949, 0.707040011882782, 0.713379979133606, 0.7145687341690063, 0.715889573097229, 0.7180029153823853, 0.7147008180618286, 0.7230220437049866, 0.7160216569900513, 0.7181349992752075, 0.7230220437049866, 0.7218332886695862, 0.7205125093460083, 0.7187954187393188, 0.7207766771316528, 0.724210798740387, 0.7230220437049866, 0.7252674698829651, 0.7238145470619202, 0.7273808121681213, 0.7275128960609436, 0.7302865982055664, 0.7257958054542542, 0.7313432693481445, 0.7314753532409668, 0.7317395210266113], "val_loss": [1.9575435093470983, 1.9441727910723006, 1.9299107960292272, 1.9143095697675432, 1.8962053571428572, 1.875378199986049, 1.8506159101213728, 1.820842674800328, 1.78579923084804, 1.744283948625837, 1.69582884652274, 1.6400724819728307, 1.5771102905273438, 1.5087595667157854, 1.4372194153921944, 1.365206514086042, 1.293745858328683, 1.225083351135254, 1.1619022914341517, 1.1047160966055733, 1.0533051831381661, 1.007861648287092, 0.9697128364018032, 0.934518711907523, 0.9039020538330078, 0.8772851058415004, 0.852737443787711, 0.8307932104383197, 0.8103210585457938, 0.7928809268133981, 0.7768535443714687, 0.7625251497541156, 0.7485390731266567, 0.7361190319061279, 0.725442750113351, 0.7145212888717651, 0.7051154885973249, 0.696608168738229, 0.6893460920878819, 0.6808376312255859, 0.6745648894991193, 0.6680147988455636, 0.661324109349932, 0.6541504008429391, 0.6488676411764962, 0.6435743570327759, 0.6385432141167777, 0.6340973717825753, 0.6290704522814069, 0.6251382146562848, 0.6211832591465541, 0.6174376351492745, 0.6135942595345634, 0.6098708425249372, 0.6058863231113979, 0.6015744549887521, 0.5992049830300468, 0.595448340688433, 0.5927948951721191, 0.5893693481172834, 0.5879632575171334, 0.5853496449334281, 0.5818842649459839, 0.5785484995160785, 0.576464193207877, 0.5742183412824359, 0.5732395308358329, 0.5702312673841204, 0.5692566292626517, 0.5664776223046439, 0.5642804418291364, 0.5612797737121582, 0.5608349868229457, 0.5579925264630999, 0.5564066852842059, 0.5556002344403949, 0.5539943150111607, 0.5524565662656512, 0.5499079738344465, 0.5484581504549298, 0.5465822390147618, 0.5463456426348005, 0.5440650667463031, 0.542360748563494, 0.5408253840037754, 0.5391162463596889, 0.5375050476619175, 0.5380260603768485, 0.5366607563836234, 0.53409286907741], "val_accuracy": [0.15433333814144135, 0.28033334016799927, 0.3616666793823242, 0.39666667580604553, 0.41999998688697815, 0.4436666667461395, 0.4556666612625122, 0.4763333201408386, 0.4950000047683716, 0.5099999904632568, 0.5243333578109741, 0.5393333435058594, 0.5509999990463257, 0.5590000152587891, 0.5703333616256714, 0.5846666693687439, 0.5929999947547913, 0.6053333282470703, 0.6183333396911621, 0.6463333368301392, 0.653333306312561, 0.6629999876022339, 0.6706666946411133, 0.67166668176651, 0.6813333630561829, 0.6813333630561829, 0.6893333196640015, 0.6943333148956299, 0.6973333358764648, 0.6996666789054871, 0.7043333053588867, 0.7059999704360962, 0.7086666822433472, 0.7113333344459534, 0.7126666903495789, 0.718666672706604, 0.7210000157356262, 0.7226666808128357, 0.7253333330154419, 0.7273333072662354, 0.7263333201408386, 0.7276666760444641, 0.7310000061988831, 0.734666645526886, 0.7363333106040955, 0.7386666536331177, 0.7386666536331177, 0.7386666536331177, 0.7419999837875366, 0.7426666617393494, 0.7416666746139526, 0.7453333139419556, 0.7476666569709778, 0.750333309173584, 0.7509999871253967, 0.750333309173584, 0.75, 0.753000020980835, 0.7513333559036255, 0.7563333511352539, 0.753333330154419, 0.753333330154419, 0.7546666860580444, 0.7566666603088379, 0.7576666474342346, 0.7580000162124634, 0.7570000290870667, 0.7573333382606506, 0.7593333125114441, 0.7603333592414856, 0.7599999904632568, 0.7663333415985107, 0.7573333382606506, 0.762333333492279, 0.7670000195503235, 0.765333354473114, 0.7673333287239075, 0.7603333592414856, 0.7676666378974915, 0.7663333415985107, 0.768666684627533, 0.765333354473114, 0.7726666927337646, 0.7673333287239075, 0.7746666669845581, 0.7716666460037231, 0.7696666717529297, 0.7710000276565552, 0.7746666669845581, 0.7713333368301392]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [25, 66, 89, 50, 85, 46], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [2, 2, 1, 2, 2, 0, 8, 5, 2, 2, 9, 2, 2, 8, 9, 0, 2, 2, 2, 6, 6, 3, 3, 5, 1, 2, 0, 3, 5, 4, 8, 6, 0, 8, 6, 3, 7, 1, 0, 6, 6, 3, 6, 0], [4, 3, 3, 1, 0, 3, 3, 3, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [18, 9, 7, 66, 40, 57, 35, 9, 54, 64], [0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [0, 0, 0, 1, 1, 0, 0, 1, 0], [6, 2, 2, 4, 8, 1, 6], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.7685714364051819, "mapping_values": [1, 4, 4, 2, 2, 1, 24, 24, 16, 8, 3, 7, 5, 3, 2, 2, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.negative(tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, grad), grad), grad)), alpha)), tf.math.negative(tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.sqrt(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)))), grad)))))))))), tf.math.negative(tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)))), tf.math.add(sigma, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.297659410099548, 2.2819348832383493, 2.2659346680080006, 2.2503891669527696, 2.2318901886887725, 2.2128369230651552, 2.190172514218255, 2.159917755590501, 2.126632258089353, 2.0854556676088434, 2.0369266745688623, 1.982426454016026, 1.922372652460571, 1.8528802014770225, 1.7879714625717202, 1.712472558651366, 1.6455630758072894, 1.5701271112584607, 1.510732488011199, 1.4506015834429198, 1.3934810103961994, 1.336025236399576, 1.3155735550996193, 1.2737826996034776, 1.2313169070585073, 1.2110901169568447, 1.1805977175784008, 1.1509546327899554, 1.117773223326364, 1.1092403624366696, 1.0798607171880823, 1.0737494693345964, 1.0464247611094586, 1.0351145390065402, 1.0203519667443535, 1.0081957121960412, 0.9910017717327062, 0.9806143312311885, 0.9681995078289529, 0.9551644818090949, 0.95070675332328, 0.9372122822389186, 0.9293425506242372, 0.9268191174556393, 0.912613241868705, 0.8996175294302836, 0.8927136907535317, 0.8865275993527927, 0.8784945753303738, 0.8779451309760737, 0.8673634814422491, 0.8612757621109367, 0.8558054422233178, 0.8538675398685519, 0.8418051642811671, 0.8401946285145394, 0.831701764396279, 0.8309758782953618, 0.819420928881704, 0.8177829981637496, 0.8205979340316724, 0.8124943355118295, 0.8187437239985629, 0.8011179192663578, 0.800236577937915, 0.79668708964582, 0.7961697200616558, 0.782401599660132, 0.7908140872337595, 0.7739014226400526, 0.7781040697852933, 0.7713812162548308, 0.7767083002292501, 0.7691913552728894, 0.7695719072327811, 0.7693486943331219, 0.764666269137607, 0.7637075752929186, 0.7521391318080889, 0.7485287949519623, 0.750855790326435, 0.754952707302931, 0.747963213759989, 0.7515286664527563, 0.7462658535503613, 0.7376822502212187, 0.7377573983811936, 0.7349495582608279, 0.7318737755566855, 0.7219902542068533], "accuracy": [0.10579843819141388, 0.14040417969226837, 0.18742570281028748, 0.23154141008853912, 0.266939640045166, 0.29124289751052856, 0.3151499032974243, 0.3467177450656891, 0.3533218801021576, 0.38264429569244385, 0.40285298228263855, 0.4239862561225891, 0.4325716495513916, 0.44551578164100647, 0.4554220139980316, 0.4733852744102478, 0.4855369031429291, 0.5016510486602783, 0.5165764093399048, 0.5292563438415527, 0.5517104864120483, 0.5562012791633606, 0.5517104864120483, 0.5716549754142761, 0.5758816599845886, 0.5778629183769226, 0.5864483118057251, 0.5974111557006836, 0.6066569685935974, 0.6111478209495544, 0.620261549949646, 0.6173557043075562, 0.6310923099517822, 0.629507303237915, 0.6440364718437195, 0.6392814517021179, 0.6495839357376099, 0.6544709801673889, 0.6573768258094788, 0.6586976647377014, 0.6601505875587463, 0.6653017997741699, 0.6680755615234375, 0.6756042838096619, 0.6748117804527283, 0.6775855422019958, 0.6789063811302185, 0.6749438643455505, 0.6865671873092651, 0.6844538450241089, 0.6903975605964661, 0.6914542317390442, 0.691850483417511, 0.6954167485237122, 0.7005679607391357, 0.694360077381134, 0.6993792057037354, 0.6956809163093567, 0.7014925479888916, 0.7025492191314697, 0.7057191729545593, 0.700700044631958, 0.7025492191314697, 0.7084929347038269, 0.7125874757766724, 0.707568347454071, 0.7131158113479614, 0.7144366502761841, 0.7160216569900513, 0.718399167060852, 0.7143045663833618, 0.7232862114906311, 0.7164179086685181, 0.7181349992752075, 0.7230220437049866, 0.7219653725624084, 0.7213049530982971, 0.7191916704177856, 0.7209087014198303, 0.7243428826332092, 0.722757875919342, 0.7257958054542542, 0.7244749665260315, 0.7273808121681213, 0.7272487282752991, 0.7306828498840332, 0.7263241410255432, 0.7314753532409668, 0.7314753532409668, 0.7321357727050781], "val_loss": [1.9575435093470983, 1.9441725867135184, 1.9299110003880091, 1.9143086160932268, 1.8962041991097587, 1.8753765651157923, 1.8506131853376115, 1.8208401543753487, 1.7857960292271204, 1.7442828587123327, 1.695826871054513, 1.6400722435542516, 1.5771116869790214, 1.5087536403111048, 1.437213386808123, 1.3652022906712122, 1.2937333243233817, 1.2250667640141077, 1.161883796964373, 1.104694434574672, 1.0532801832471574, 1.007842779159546, 0.9696952274867466, 0.9345010348728725, 0.9038882255554199, 0.8772728102547782, 0.8527313470840454, 0.830781170300075, 0.8103192704064506, 0.7928929669516427, 0.7768569503511701, 0.7625223398208618, 0.748530387878418, 0.7361189637865339, 0.7254477228437152, 0.7145264659609113, 0.7051106521061489, 0.6965801204953875, 0.6893409320286342, 0.68084488596235, 0.6745917286191668, 0.6680091108594622, 0.6613037756511143, 0.6541220801217216, 0.6488619872501918, 0.6435631172997611, 0.6385581152779716, 0.6341073683329991, 0.6290871926716396, 0.6251459292003086, 0.6211661100387573, 0.6174176590783256, 0.6135632991790771, 0.6098733799798148, 0.6058555500847953, 0.601549642426627, 0.599194986479623, 0.5954437596457345, 0.5927820205688477, 0.5893486567905971, 0.5879645688193185, 0.585364580154419, 0.5819558926991054, 0.5785559415817261, 0.5764761822564262, 0.574225800377982, 0.573232752936227, 0.570244550704956, 0.5692974669592721, 0.5664624997547695, 0.5642981699534825, 0.5613034112112862, 0.560832142829895, 0.5580130985804966, 0.556404573576791, 0.5555531127112252, 0.554023163659232, 0.5524621520723615, 0.5499541929789952, 0.5484861646379743, 0.5465545313698905, 0.5463586534772601, 0.5440497057778495, 0.5424044472830636, 0.5408543178013393, 0.5392227854047503, 0.5375579084668841, 0.5380947419575283, 0.5366590874535697, 0.5340968540736607], "val_accuracy": [0.15433333814144135, 0.28033334016799927, 0.3616666793823242, 0.3970000147819519, 0.41999998688697815, 0.4436666667461395, 0.4556666612625122, 0.4763333201408386, 0.4950000047683716, 0.5099999904632568, 0.5243333578109741, 0.5389999747276306, 0.5509999990463257, 0.5590000152587891, 0.5703333616256714, 0.5846666693687439, 0.5929999947547913, 0.6056666374206543, 0.6183333396911621, 0.6463333368301392, 0.6536666750907898, 0.6629999876022339, 0.6706666946411133, 0.67166668176651, 0.6813333630561829, 0.6813333630561829, 0.6893333196640015, 0.6943333148956299, 0.6973333358764648, 0.6996666789054871, 0.7043333053588867, 0.7056666612625122, 0.7089999914169312, 0.7113333344459534, 0.7126666903495789, 0.718666672706604, 0.7210000157356262, 0.7226666808128357, 0.7253333330154419, 0.7276666760444641, 0.7263333201408386, 0.7276666760444641, 0.7310000061988831, 0.734666645526886, 0.7366666793823242, 0.7386666536331177, 0.7386666536331177, 0.7390000224113464, 0.7419999837875366, 0.7426666617393494, 0.7413333058357239, 0.7456666827201843, 0.7476666569709778, 0.750333309173584, 0.7513333559036255, 0.750333309173584, 0.75, 0.753000020980835, 0.7509999871253967, 0.7563333511352539, 0.753333330154419, 0.753000020980835, 0.7549999952316284, 0.7566666603088379, 0.7576666474342346, 0.7580000162124634, 0.7570000290870667, 0.7570000290870667, 0.7593333125114441, 0.7603333592414856, 0.7599999904632568, 0.765999972820282, 0.7573333382606506, 0.762333333492279, 0.7663333415985107, 0.765333354473114, 0.7673333287239075, 0.7613333463668823, 0.7673333287239075, 0.7663333415985107, 0.7689999938011169, 0.765333354473114, 0.7726666927337646, 0.7673333287239075, 0.7739999890327454, 0.7720000147819519, 0.768666684627533, 0.7710000276565552, 0.7736666798591614, 0.7710000276565552]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [61, 66, 89, 50, 85, 46], [1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [1, 2, 1, 2, 6, 2, 2, 1, 2, 2, 6, 6, 8, 2, 0, 0, 2, 2, 2, 6, 1, 3, 9, 0, 1, 2, 0, 3, 9, 0, 8, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [0, 3, 0, 1, 0, 3, 0, 3, 3, 3, 2, 3, 2, 3, 3, 3, 4, 2, 2, 1, 3, 0, 0, 1, 5, 2, 3, 0, 4, 2, 1, 4, 4], [47, 9, 52, 58, 30, 31, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.16171428561210632, "mapping_values": [1, 4, 4, 2, 2, 1, 50, 50, 29, 21, 6, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), grad), tf.math.subtract(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, grad))), tf.math.add(tf.math.negative(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(beta, grad))))), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))))))), tf.math.add(tf.math.add(beta, beta), tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(beta, beta)), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), grad)), tf.math.add(beta, grad))))))), tf.math.add(beta, tf.math.negative(tf.math.subtract(grad, tf.math.add(beta, grad)))))), beta), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.negative(tf.math.multiply(tf.math.add(beta, alpha), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3129792316100697, 7.1313824274158595, 2.279868299273641, 2.2870450890563374, 2.3135253961107374, 2.337338488540629], "accuracy": [0.21965394914150238, 0.1554616242647171, 0.14542332291603088, 0.16774533689022064, 0.13789460062980652, 0.10593052208423615], "val_loss": [1.7160708563668388, 2.0192779813494, 1.8566175188337053, 2.0010994502476285, 1.965423856462751, 1.9774041175842285], "val_accuracy": [0.2926666736602783, 0.1420000046491623, 0.18566666543483734, 0.10400000214576721, 0.10433333367109299, 0.09666666388511658]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 6, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [69, 66, 89, 50, 85, 46], [1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0], [1, 2, 1, 2, 6, 4, 2, 8, 2, 2, 6, 3, 8, 2, 0, 0, 2, 0, 2, 6, 1, 3, 9, 0, 1, 2, 0, 0, 9, 4, 8, 3, 0, 0, 8, 3, 7, 5, 6, 0, 0, 1, 6, 0, 2], [3, 0, 3, 1, 3, 0, 2, 3, 3, 3, 2, 0, 3, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 2, 3, 1, 3, 5, 1, 2, 3, 3, 2, 0, 5, 3, 3, 2, 3, 5], [5, 9, 52, 58, 30, 57, 35, 9, 54, 64], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1], [0, 0, 1, 0, 1, 0, 0, 1, 0], [6, 7, 3, 4, 4, 4], [0, 0, 4], [69, 14], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 1, 32, 32, 18, 14, 3, 13, 9, 6, 3, 2, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(grad, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), tf.math.sqrt(grad))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(grad)), tf.math.add(beta, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))), tf.math.negative(tf.math.add(beta, grad)))), grad)))), tf.math.add(beta, beta)), tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)))))), tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, grad))), tf.math.add(sigma, tf.math.pow(sigma, sigma)))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0956280529499054, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [1, 4, 1, 2, 9, 2, 2, 1, 2, 2, 6, 3, 8, 2, 0, 0, 9, 2, 5, 4, 1, 3, 9, 0, 1, 3, 0, 3, 9, 4, 8, 3, 2, 0, 8, 3, 7, 5, 6, 0, 0, 1, 6, 0, 2], [4, 3, 3, 1, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 0, 2, 2, 3, 0, 1, 3, 1, 1, 1, 5, 1, 3, 0, 4, 2, 1, 4, 4], [25, 9, 52, 66, 30, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 37, 37, 23, 14, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.sqrt(grad)))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.pow(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(grad, tf.math.add(beta, grad)), tf.math.subtract(tf.math.add(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(tf.math.add(beta, alpha), grad))), tf.math.add(beta, tf.math.negative(tf.math.negative(grad))))), grad), grad), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))))), grad), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.square(tf.math.pow(grad, tf.math.add(beta, tf.math.subtract(grad, tf.math.multiply(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), grad))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [2, 3, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0], [2, 2, 1, 4, 8, 0, 8, 3, 2, 2, 9, 2, 4, 8, 9, 0, 2, 2, 2, 6, 6, 3, 3, 5, 1, 2, 0, 3, 5, 4, 8, 6, 0, 8, 6, 3, 7, 1, 0, 6, 6, 3, 6, 0], [3, 3, 3, 1, 3, 3, 2, 3, 3, 3, 2, 0, 3, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 2, 3, 1, 3, 5, 1, 2, 3, 3, 2, 0, 5, 3, 3, 2, 3, 5], [74, 9, 7, 66, 40, 57, 35, 9, 54, 64], [0, 0, 0, 0, 1, 0, 0, 0, 1], [1, 0, 1, 1, 1, 0, 0], [4, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 1, 12, 12, 7, 5, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.sqrt(tf.math.add(beta, grad)), tf.math.negative(grad))), grad)), tf.math.sqrt(alpha))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08915598690509796, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 8, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [2, 2, 1, 2, 5, 0, 8, 5, 2, 2, 9, 2, 2, 8, 9, 0, 2, 2, 2, 6, 6, 3, 3, 5, 1, 2, 0, 3, 5, 4, 8, 6, 0, 8, 6, 3, 7, 1, 0, 6, 6, 3, 6, 0], [4, 3, 3, 1, 0, 3, 3, 3, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [25, 9, 52, 66, 2, 57, 35, 9, 54, 64], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0, 0], [6, 7, 3, 4, 8], [3, 0], [70, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 9, 9, 4, 5, 1, 7, 5, 3, 2, 1, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, grad), grad), alpha)), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, sigma), sigma)), sigma)), tf.math.add(sigma, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07370228320360184, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [6, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 2, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [6, 2, 1, 2, 8, 0, 8, 5, 2, 2, 9, 2, 2, 8, 9, 0, 2, 2, 2, 6, 6, 3, 3, 5, 1, 2, 0, 3, 5, 4, 8, 6, 0, 8, 6, 3, 7, 1, 0, 6, 6, 3, 6, 0], [4, 3, 3, 1, 0, 3, 3, 3, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [25, 42, 52, 66, 1, 57, 35, 9, 54, 64], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0, 0], [6, 7, 3, 4, 5], [0, 0], [27, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [2, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 0, 3, 3, 1, 2, 0, 10, 7, 5, 2, 2, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.sqrt(grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), sigma)), tf.math.add(sigma, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))), tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.square(sigma)), sigma)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [1259779072.033449, 23597628141.57179, 110093094838.96341, 300205954591.31104, 656999986038.7183, 1193416480590.2776], "accuracy": [0.09642054885625839, 0.09800554811954498, 0.09668471664190292, 0.09998679161071777, 0.09708096832036972, 0.10527011007070541], "val_loss": [4607546660.571428, 36851385490.28571, 124363206070.85715, 294777829083.4286, 575723648731.4286, 994830225993.1428], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 2, 1, 2, 8, 0, 8, 5, 2, 2, 9, 2, 2, 8, 9, 0, 2, 2, 2, 6, 6, 3, 3, 5, 1, 2, 0, 3, 5, 4, 8, 6, 0, 8, 6, 3, 7, 1, 0, 6, 6, 3, 6, 0], [4, 3, 3, 1, 0, 3, 3, 3, 3, 3, 2, 3, 3, 3, 0, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 0, 4, 2, 1, 4, 4], [47, 9, 52, 66, 40, 57, 35, 9, 54, 64], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [0, 1, 1, 1, 1, 0, 0], [1, 9, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 2, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(grad)))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), tf.math.add(sigma, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [2, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [2, 2, 1, 2, 8, 0, 8, 5, 2, 2, 9, 2, 2, 8, 9, 0, 2, 2, 2, 6, 6, 3, 3, 5, 1, 2, 0, 3, 5, 4, 8, 6, 0, 8, 6, 3, 7, 1, 0, 6, 6, 3, 6, 0], [3, 3, 3, 3, 0, 3, 3, 3, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [47, 9, 52, 66, 40, 57, 35, 9, 54, 64], [0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 11, 11, 6, 5, 1, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.sqrt(tf.math.add(beta, grad)), grad), grad)), grad)), tf.math.add(beta, tf.math.negative(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07607977837324142, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 7, 1, 2, 8, 0, 8, 5, 2, 2, 9, 2, 2, 2, 0, 0, 2, 2, 2, 6, 6, 3, 3, 5, 1, 2, 0, 3, 5, 4, 8, 6, 0, 8, 8, 6, 7], [4, 3, 3, 1, 0, 3, 3, 3, 3, 3, 2, 3, 3, 3, 0, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 0, 4, 2, 1, 4, 4], [47, 9, 52, 66, 40, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [4, 7, 3, 4], [0, 0], [35, 2], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 3, 3, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.square(tf.math.multiply(beta, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [233802113663.3836, 6125.65610030223, 2694.957502604948, 19.389975762559345, 26.49310753660715, 33.5996307425448], "accuracy": [0.07885351777076721, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [55.12951442173549, 11430.871372767857, 14.077638353620257, 20.152675083705358, 26.23150144304548, 32.309237888881135], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 5, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [1, 2, 1, 2, 8, 2, 2, 2, 2, 2, 3, 3, 6, 2, 0, 0, 2, 2, 2, 8, 1, 3, 9, 0, 3, 6, 5, 8, 2, 4, 8, 4, 0, 1, 2, 6, 8, 5, 3, 3, 0, 1, 6, 0, 2], [4, 3, 3, 1, 0, 3, 3, 3, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [71, 9, 52, 66, 30, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [3.317556592971264, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.033284902572631836, 0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [124.68721662248883, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [9, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 2, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [8, 7, 1, 2, 6, 2, 5, 3, 2, 8, 6, 3, 4, 5, 0, 0, 2, 2, 2, 6, 1, 3, 6, 5, 1, 5, 0, 2, 2, 4, 8, 6, 0, 1, 8, 6, 7, 8, 3, 8, 0, 2, 6, 1, 9, 4, 3, 7, 7, 5, 1, 2, 2, 9, 7, 2, 9], [4, 3, 3, 1, 0, 3, 3, 3, 3, 3, 2, 3, 3, 3, 0, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 0, 4, 2, 1, 4, 4], [25, 9, 52, 66, 30, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [19205459.92966484, 359050619.8071589, 1674047483.2999604, 4563606645.534803, 9985810993.840708, 18137093823.721043], "accuracy": [0.09615638852119446, 0.09800554811954498, 0.09668471664190292, 0.09998679161071777, 0.09721305221319199, 0.10527011007070541], "val_loss": [70129684.57142857, 560352274.2857143, 1890422345.142857, 4480106934.857142, 8749114806.857143, 15117228909.714285], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [5, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0], [2, 7, 6, 2, 6, 2, 0, 3, 2, 8, 6, 2, 4, 4, 0, 0, 2, 2, 2, 6, 1, 3, 1, 5, 8, 5, 0, 3, 2, 4, 8, 3, 8, 4, 8, 5, 4, 6, 4, 3, 0, 2, 6, 2, 6, 4, 3, 1, 2, 9, 9, 2, 2, 9, 7, 2, 9], [4, 3, 3, 1, 0, 3, 3, 3, 3, 3, 2, 3, 3, 3, 0, 2, 2, 0, 0, 1, 3, 1, 1, 1, 5, 1, 3, 0, 4, 2, 1, 4, 4, 5, 3, 5, 4, 4], [25, 9, 52, 66, 89, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 1, 1, 1, 0, 0], [4, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 25, 25, 13, 12, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.negative(grad), tf.math.add(beta, grad))), tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))))))), tf.math.add(beta, tf.math.pow(grad, grad)))))), grad)), tf.math.add(beta, beta))), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [295246.24138033733, 5481895.46057324, 25507749.4058909, 69476192.44802536, 151949228.17487782, 275898788.1717078], "accuracy": [0.09589222073554993, 0.09800554811954498, 0.09668471664190292, 0.09998679161071777, 0.09708096832036972, 0.10540219396352768], "val_loss": [1073584.2857142857, 8544331.42857143, 28788789.14285714, 68183572.57142857, 133105353.14285715, 229930806.85714287], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 6, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [0, 2, 1, 9, 1, 2, 2, 2, 3, 2, 6, 3, 6, 2, 3, 0, 2, 2, 2, 4, 5, 3, 9, 3, 3, 6, 0, 0, 2, 4, 8, 4, 0, 1, 8, 6, 8, 5, 3, 3, 3, 1, 6, 0, 2, 9], [3, 3, 0, 1, 0, 3, 0, 3, 3, 3, 2, 3, 2, 3, 3, 2, 4, 2, 2, 3, 3, 3, 0, 1, 5, 2, 3, 0, 4, 2, 1, 4, 4], [25, 9, 93, 66, 30, 50, 35, 9, 54, 64], [0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [2, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 1, 6, 6, 4, 2, 1, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, grad), grad), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3034644669482516, 2.302592779777274, 5.741824657342941, 7827.003252288653, 2589794.782056068, 2.3025851429508597], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.9734980038234167, 43.98580278669085, 172867.0580357143, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [1, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [1, 2, 2, 2, 6, 2, 2, 1, 2, 2, 6, 3, 0, 2, 0, 0, 2, 2, 4, 6, 1, 3, 9, 0, 1, 2, 0, 3, 9, 4, 8, 3, 0, 0, 8, 3, 7, 5, 6, 0, 0, 1, 5, 0, 2], [1, 3, 3, 1, 3, 3, 3, 3, 3, 3, 1, 0, 3, 3, 1, 3, 4, 3, 0, 3, 3, 1, 1, 1, 2, 3, 1, 3, 5, 1, 2, 3, 3, 2, 0, 5, 3, 3, 2, 3, 5], [74, 40, 7, 66, 40, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 1, 1, 1, 0, 0], [4, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.04171428456902504, "mapping_values": [1, 1, 1, 0, 1, 0, 67, 67, 41, 26, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.subtract(alpha, tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha))), grad))), tf.math.negative(grad))), grad)))), tf.math.add(beta, grad)), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))))))), grad))), tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.negative(tf.math.subtract(grad, grad))))), grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)))))))), tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.negative(tf.math.add(beta, tf.math.sqrt(grad))))), tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.square(alpha)), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta)))), grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.303669880000497, 2.302378894473111, 2.3014049948230157, 2.3012682761750467, 2.3015226306948033, 2.3024141397049176], "accuracy": [0.09113723784685135, 0.08730682730674744, 0.09325055778026581, 0.0940430611371994, 0.09298639744520187, 0.09219389408826828], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [5, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [25, 66, 89, 50, 85, 46], [1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0], [2, 7, 6, 2, 6, 2, 0, 3, 2, 8, 6, 3, 4, 4, 0, 0, 2, 2, 2, 6, 1, 3, 6, 0, 8, 5, 6, 3, 2, 4, 8, 3, 0, 1, 8, 5, 4, 6, 4, 3, 0, 2, 6, 0, 6, 4, 3, 7, 2, 5, 9, 2, 2, 9, 7, 2, 9], [3, 3, 3, 2, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 1, 3, 4, 3, 0, 0, 0, 1, 2, 3, 5, 1, 3, 5, 3, 1, 4, 0, 5, 1, 2, 2, 5, 5, 4, 4, 3], [74, 9, 7, 66, 40, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 1, 1, 1, 0, 0], [4, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.03685714304447174, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(grad)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3041245516942177, 2.304566011673203, 2.3055537934505455, 2.307704607855611, 2.310774524434525, 2.314464608644529], "accuracy": [0.08968432247638702, 0.0870426595211029, 0.08625016361474991, 0.08585391938686371, 0.08294808864593506, 0.07991018146276474], "val_loss": [1.9718726021902901, 1.9734231403895788, 1.9750725201198034, 1.9768891334533691, 1.9789517266409737, 1.981123651776995], "val_accuracy": [0.03400000184774399, 0.025333333760499954, 0.022333333268761635, 0.023333333432674408, 0.0273333340883255, 0.03266666829586029]}}]