[{"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [1], [0, 8, 8, 6, 1, 2, 6, 2, 3, 5, 4, 4], [2, 0, 2, 0, 3, 1, 0, 0, 0], [31], [0, 1, 0, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 1, 1], [6, 8, 6, 5, 5, 7, 3, 9], [3, 3, 5, 4, 1], [25], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [5], [64], [0, 1, 0, 0, 1], [1, 3, 9, 6, 0], [3, 1, 2], [16, 52, 13]], "fitness": -0.6014285683631897, "mapping_values": [1, 1, 1, 0, 1, 0, 7, 7, 4, 3, 0, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))))), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), alpha))", "other_info": {"loss": [2.3023529687908426, 2.3002797321258615, 2.297090935149701, 2.2940881764018037, 2.2929844765568044, 2.289916063107677, 2.2874031146251923, 2.285139139034587, 2.282486970256805, 2.280315809340572, 2.2784219770667073, 2.276224615016177, 2.273130071350549, 2.2706669511544377, 2.2683027753614557, 2.266759244379445, 2.263414968541742, 2.2608047360206216, 2.258075205972087, 2.2559593148660415, 2.2535713833746045, 2.250308963648159, 2.2474833642014613, 2.243928249344267, 2.2426769655646113, 2.2391032902729306, 2.2331116335534653, 2.233145449124055, 2.2289571144860796, 2.224036112941409, 2.221980478911273, 2.218611109195337, 2.214522344403814, 2.2120687479135808, 2.2070882304658537, 2.205688590308096, 2.2004411238500423, 2.1963306029459204, 2.19203287741732, 2.1897454285398057, 2.18399772264891, 2.177976120417349, 2.1758702595503796, 2.16916796175748, 2.1662382221713186, 2.1609910194191397, 2.15349109130938, 2.14934982744584, 2.143096963191911, 2.137453658753036, 2.132383798107479, 2.125986523490304, 2.118514182057127, 2.11446472921738, 2.1053786805875547, 2.09879339230988, 2.0916199833095632, 2.085147001015559, 2.0769014177447094, 2.069381204751725, 2.0617191671868516, 2.0565628794442237, 2.0431128304002466, 2.0379132131433693, 2.032531867362977, 2.0226270463157716, 2.0093622103721205, 2.0037750012650073, 1.9939824979318808, 1.9821196716727048, 1.9749887165943267, 1.9651272756989449, 1.9538980811074613, 1.9446572190372777, 1.935061981460406, 1.9215478167762499, 1.9128309392721237, 1.9035979937946539, 1.8959059111115608, 1.8806897441173478, 1.8697348923935724, 1.8567297224512882, 1.8424948270467956, 1.833370472241418, 1.822725855868018, 1.814107421004714, 1.7969726399502435, 1.7841417202781362, 1.7787071257345493, 1.7597345763414196, 1.750725768765344, 1.7404335731874918, 1.7346947400829087, 1.718101466730239, 1.7009370766138245, 1.6952161314370626, 1.6819102080459403, 1.666912831052136, 1.6523216029105328, 1.6432106683534826], "accuracy": [0.09219389408826828, 0.09985470771789551, 0.10870426893234253, 0.11240258812904358, 0.11213842034339905, 0.11478008329868317, 0.1298375427722931, 0.13274335861206055, 0.13855500519275665, 0.14832915365695953, 0.15400871634483337, 0.1574428677558899, 0.16259410977363586, 0.18016114830970764, 0.1806894689798355, 0.18544445931911469, 0.19112402200698853, 0.19601109623908997, 0.21093647181987762, 0.21014396846294403, 0.21357811987400055, 0.22401267290115356, 0.22942808270454407, 0.2355038970708847, 0.23484347760677338, 0.24422137439250946, 0.2619204819202423, 0.2565050721168518, 0.26258090138435364, 0.2769779562950134, 0.2794875204563141, 0.28582748770713806, 0.2884691655635834, 0.2887333333492279, 0.29163914918899536, 0.2973187267780304, 0.30405494570732117, 0.30379077792167664, 0.3171311616897583, 0.3163386583328247, 0.32426363229751587, 0.3276977837085724, 0.3288865387439728, 0.33747193217277527, 0.3327169418334961, 0.3333773612976074, 0.34486857056617737, 0.3477744162082672, 0.3517369031906128, 0.35583147406578064, 0.3556993901729584, 0.3646810054779053, 0.3737947344779968, 0.3723418414592743, 0.37247392535209656, 0.37921014428138733, 0.3863426148891449, 0.3875313699245453, 0.38726720213890076, 0.3875313699245453, 0.3932109475135803, 0.38488972187042236, 0.4065513014793396, 0.39783385396003723, 0.3951921761035919, 0.4113062918186188, 0.418570876121521, 0.41143837571144104, 0.4119667112827301, 0.4161933660507202, 0.41751420497894287, 0.42504292726516724, 0.42530709505081177, 0.42649585008621216, 0.42768457531929016, 0.4301941692829132, 0.4356095492839813, 0.43045833706855774, 0.4340245723724365, 0.4411570429801941, 0.43864747881889343, 0.44630828499794006, 0.44710078835487366, 0.45410117506980896, 0.4531765878200531, 0.45383700728416443, 0.45489367842674255, 0.4687623679637909, 0.4624224007129669, 0.4711398780345917, 0.4785365164279938, 0.4649319648742676, 0.4655923843383789, 0.4721965491771698, 0.4791969358921051, 0.4773477613925934, 0.4826310873031616, 0.48012152314186096, 0.4843481779098511, 0.4893673360347748], "val_loss": [1.9683420998709542, 1.9661190850394112, 1.9638816969735282, 1.9616853169032507, 1.9594894817897253, 1.9572997774396623, 1.9551020349775041, 1.9529216630118233, 1.95074462890625, 1.9485667092459542, 1.9463396753583635, 1.9441168648856026, 1.9418487548828125, 1.9395580972943987, 1.937269619532994, 1.9349543707711356, 1.9325743402753557, 1.930147443498884, 1.9277100563049316, 1.9252337047031947, 1.9227164813450404, 1.9201149259294783, 1.917489869253976, 1.9148100444248743, 1.9120566504342216, 1.9092646326337541, 1.90635769707816, 1.903442110334124, 1.9003922598702567, 1.89727783203125, 1.8941123826163155, 1.8908661433628626, 1.8875067574637276, 1.8840723718915666, 1.8805414608546667, 1.8769426345825195, 1.8732288905552454, 1.869382108960833, 1.865448338644845, 1.8613666806902205, 1.8571788242885046, 1.8528386524745397, 1.8484161921909876, 1.8438232285635812, 1.8391494069780623, 1.8343138013567244, 1.8292979512895857, 1.8241876193455286, 1.8188950674874442, 1.8134346008300781, 1.8078629629952567, 1.8021178245544434, 1.7962099484034948, 1.790182658604213, 1.7838857514517648, 1.7774276733398438, 1.7707983425685339, 1.7639876774379186, 1.7569778987339564, 1.749807357788086, 1.7424677440098353, 1.7349579674857003, 1.7271629742213659, 1.7192841257367815, 1.7112689358847482, 1.7030330726078577, 1.6944563048226493, 1.6857729298727853, 1.676898513521467, 1.6677377223968506, 1.6584479808807373, 1.6490348066602434, 1.6394073281969344, 1.6295335974012102, 1.6195835045405798, 1.6094203335898263, 1.5989443915230888, 1.588463647024972, 1.5778914860316686, 1.5671004567827498, 1.5561638219015939, 1.5450249399457658, 1.5337583678109306, 1.5224012987954276, 1.5109548909323556, 1.4995708124978202, 1.4879657881600517, 1.4762020792279924, 1.4646237577710832, 1.4528791563851493, 1.4411012104579382, 1.4293266364506312, 1.4175991330827986, 1.4058396135057722, 1.3939363615853446, 1.3821357658931188, 1.3703611237662179, 1.3586035455976213, 1.3468207291194372, 1.335050310407366], "val_accuracy": [0.052000001072883606, 0.0676666647195816, 0.0846666693687439, 0.09933333098888397, 0.12333333492279053, 0.14666666090488434, 0.1679999977350235, 0.18966667354106903, 0.21433334052562714, 0.23233333230018616, 0.2513333261013031, 0.2696666717529297, 0.28733333945274353, 0.3023333251476288, 0.3173333406448364, 0.3293333351612091, 0.33899998664855957, 0.34599998593330383, 0.3529999852180481, 0.3610000014305115, 0.3709999918937683, 0.3776666522026062, 0.38233333826065063, 0.38499999046325684, 0.38733333349227905, 0.39100000262260437, 0.3946666717529297, 0.40066665410995483, 0.4026666581630707, 0.406333327293396, 0.4099999964237213, 0.4163333475589752, 0.4203333258628845, 0.4243333339691162, 0.42633333802223206, 0.4309999942779541, 0.4359999895095825, 0.43933331966400146, 0.44200000166893005, 0.4423333406448364, 0.445333331823349, 0.44733333587646484, 0.453000009059906, 0.4573333263397217, 0.460999995470047, 0.46399998664855957, 0.46700000762939453, 0.4699999988079071, 0.4749999940395355, 0.48100000619888306, 0.48266667127609253, 0.4860000014305115, 0.4883333444595337, 0.4896666705608368, 0.49033331871032715, 0.492333322763443, 0.4946666657924652, 0.49666666984558105, 0.49666666984558105, 0.49799999594688416, 0.4983333349227905, 0.5019999742507935, 0.5046666860580444, 0.5063333511352539, 0.5080000162124634, 0.5093333125114441, 0.5146666765213013, 0.515999972820282, 0.5196666717529297, 0.5216666460037231, 0.5223333239555359, 0.5233333110809326, 0.5246666669845581, 0.5276666879653931, 0.5289999842643738, 0.5306666493415833, 0.5326666831970215, 0.5350000262260437, 0.5373333096504211, 0.5403333306312561, 0.5426666736602783, 0.5440000295639038, 0.5450000166893005, 0.5473333597183228, 0.5483333468437195, 0.550000011920929, 0.550000011920929, 0.5516666769981384, 0.5540000200271606, 0.5576666593551636, 0.5600000023841858, 0.5613333582878113, 0.5636666417121887, 0.5653333067893982, 0.5680000185966492, 0.5690000057220459, 0.5703333616256714, 0.5713333487510681, 0.574999988079071, 0.5786666870117188]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [1], [0, 8, 8, 6, 1, 2, 6, 2, 3, 5, 4, 4], [0, 0, 2, 0, 3, 1, 0, 0, 0], [31], [0, 1, 0, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 1, 1, 1], [6, 8, 6, 6, 5, 7, 3, 9], [3, 3, 5, 4, 1], [25], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [5], [64], [0, 1, 0, 0, 1], [1, 3, 9, 6, 0], [3, 1, 2], [16, 52, 13]], "fitness": -0.11428571492433548, "mapping_values": [1, 1, 1, 0, 1, 1, 8, 8, 4, 4, 0, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), grad))))), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), alpha))", "other_info": {"loss": [2.3020661425171682, 2.3012363667249396, 2.301923331079419, 2.3024928158835776, 2.3025672149507046, 2.3025845530923994, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09298639744520187, 0.09642054885625839, 0.10130762308835983, 0.10236428678035736, 0.1010434553027153, 0.10038304328918457, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.971045970916748, 1.9728281157357352, 1.9735138075692313, 1.97364228112357, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09666666388511658, 0.0949999988079071, 0.11666666716337204, 0.1003333330154419, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [1], [0, 8, 8, 6, 1, 2, 6, 2, 3, 5, 4, 4], [2, 0, 2, 0, 3, 1, 0, 0, 0], [31], [0, 1, 0, 0, 0, 0, 1, 1], [1, 0, 1, 0, 1, 1, 1], [6, 8, 6, 5, 5, 7, 3, 9], [3, 1, 5, 4, 1], [25], [0, 1, 1, 0, 1], [0, 0, 1], [0, 2, 8, 4], [5], [64], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0], [1, 6, 9, 6, 0, 0, 9, 1, 6, 2, 2, 5, 1, 6, 2, 5, 9, 1, 1, 9], [3, 1, 2, 1, 0, 2, 2, 3, 3, 1, 1], [16, 52, 13, 93, 33, 12, 51]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0, 0, 29, 20, 9, 5], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.negative(tf.math.negative(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.divide_no_nan(tf.math.add(sigma, tf.math.add(tf.math.square(alpha), tf.math.subtract(tf.math.divide_no_nan(tf.math.add(tf.math.square(beta), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), alpha), tf.math.subtract(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), tf.math.subtract(beta, beta))))), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), sigma))), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [1], [0, 8, 8, 6, 1, 2, 6, 2, 3, 5, 4, 4], [0, 0, 2, 0, 3, 1, 0, 0, 0], [31], [0, 1, 0, 0, 1, 0, 1, 1], [0, 0, 1, 1, 0, 1, 1], [6, 8, 6, 5, 5, 7, 3, 9], [3, 3, 5, 4, 1], [25], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [5], [64], [0, 1, 0, 1, 1], [1, 3, 6, 6, 0], [3, 1, 2], [16, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 4, 4, 2, 2, 0, 1, 0, 0, 0, 0, 5, 2, 3, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, grad)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(alpha, beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [1], [0, 8, 8, 6, 1, 2, 6, 2, 3, 5, 4, 4], [2, 0, 2, 0, 3, 1, 0, 0, 0], [31], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [6, 8, 6, 5, 5, 7, 3, 9, 3], [2, 3, 5, 4, 1], [25], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [5], [64], [0, 1, 0, 0, 1], [1, 3, 9, 6, 0], [3, 2, 2], [16, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 9, 5, 1, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(beta, tf.math.multiply(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), grad)))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), grad))))), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [1], [0, 8, 8, 6, 1, 2, 6, 2, 3, 5, 4, 4], [2, 0, 2, 0, 3, 1, 0, 0, 0], [31], [0, 1, 0, 0, 0, 0, 1, 1, 1, 0], [1, 0, 1, 0, 1, 1, 1], [3, 8, 2, 5, 5, 7, 3, 9], [3, 1, 5, 4, 1], [25], [1, 1, 1, 0, 1], [0, 0, 1], [3, 2, 8, 4], [5], [64], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0], [1, 3, 9, 0, 0, 0, 9, 1, 6, 5, 2, 5, 1, 6, 2, 3, 3, 6, 1, 9], [1, 2, 2, 2, 0, 2, 1, 1, 0, 3, 3], [9, 52, 13, 93, 98, 12, 51]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 30, 19, 11, 4], "tree_depth": 27, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.negative(tf.math.negative(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))))), tf.math.subtract(alpha, tf.math.divide_no_nan(beta, tf.math.square(tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.math.multiply(beta, tf.math.divide_no_nan(alpha, alpha)))), tf.math.subtract(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), sigma)), sigma)))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [1], [0, 8, 8, 6, 1, 2, 6, 2, 3, 5, 4, 4], [1, 0, 2, 0, 3, 1, 0, 0, 0], [31], [1, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 1, 1], [0, 8, 6, 0, 5, 7, 3, 9], [3, 3, 5, 4, 1], [25], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [5], [64], [0, 1, 0, 0, 1], [2, 3, 9, 6, 0], [2, 2, 3, 1, 3, 3, 3], [16, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(beta, tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07106062769889832, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [0, 1], [0, 8, 8, 6, 1, 2, 6, 2, 3, 5, 4, 4], [0, 0, 2, 3, 3, 1, 0, 0, 0], [31], [0, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 1, 1], [6, 8, 6, 5, 5, 7, 3, 9], [3, 3, 5, 4, 1], [25], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [5], [64], [0, 0, 0, 1, 1, 0, 1, 0, 1], [2, 5, 1, 6, 0, 0], [0, 1, 3, 3], [73, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 5, 4, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.square(tf.math.subtract(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), alpha)), tf.math.divide_no_nan(sigma, tf.math.negative(sigma)))", "other_info": {"loss": [2.302880402836959, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [1], [0, 8, 8, 6, 1, 2, 6, 2, 3, 5, 4, 4], [0, 0, 2, 3, 3, 1, 0, 0, 0], [31], [0, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 1, 1], [6, 8, 0, 5, 5, 7, 3, 9], [3, 3, 1, 4, 1], [25], [0, 0, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [0], [64], [0, 1, 1, 1, 1], [2, 5, 1, 6, 0, 0], [0, 1, 2], [16, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 3, 1, 2, 1], "tree_depth": 6, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), alpha)", "other_info": {"loss": [645873.8222192677, 96103411.93607186, 1661556575.251882, 11492867648.312773, 52606831016.42372, 168582111784.914], "accuracy": [0.09840179979801178, 0.09985470771789551, 0.09787346422672272, 0.10077928751707077, 0.09945846349000931, 0.10645885765552521], "val_loss": [5235167.714285715, 285450331.4285714, 3078568521.142857, 16827084800.0, 63132301019.42857, 186429159131.42856], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1], [0, 9, 8, 6, 1, 5, 1, 2, 3, 5, 4, 4, 6, 2, 0, 8], [2, 0, 0, 2, 3, 1, 0, 0, 0, 2, 3], [31, 93, 83, 66, 82], [0, 1, 0, 0, 0, 0, 1, 1], [1, 0, 1, 0, 1, 1, 1], [6, 8, 6, 0, 5, 7, 3, 9], [3, 3, 5, 4, 1], [25], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [5], [64], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1], [1, 3, 2, 6, 0, 2, 0, 1, 8, 3, 3, 6, 5, 5, 3, 2, 4, 9, 0, 7, 1, 2, 1, 3, 8, 2, 3, 3, 3, 9, 4, 4, 4, 7, 5, 2, 9, 8, 2, 2, 9], [2, 1, 2, 3, 3, 0, 3, 0, 0, 3, 0, 3, 2, 2, 3, 1, 2, 2, 2, 2, 0, 3, 0, 3, 3, 2, 3, 3], [16, 52, 13, 93, 33, 50, 51, 24, 68]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 2, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 42, 25, 17, 5], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(tf.math.divide_no_nan(tf.math.negative(tf.math.add(tf.math.negative(tf.math.subtract(beta, tf.math.sqrt(alpha))), tf.math.multiply(tf.math.multiply(beta, tf.math.divide_no_nan(tf.math.square(tf.math.square(tf.math.multiply(sigma, tf.math.add(sigma, tf.math.pow(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))))), sigma)), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))), tf.math.negative(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), sigma), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.subtract(tf.math.add(sigma, tf.math.subtract(tf.math.multiply(beta, tf.math.sqrt(beta)), sigma)), alpha), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1], [0, 8, 8, 6, 1, 2, 6, 2, 3, 5, 4, 4, 6, 6, 7, 4], [2, 0, 2, 0, 3, 1, 0, 0, 2, 2, 3, 1, 1], [31, 46, 56, 88, 83], [1, 1, 0, 0, 1, 1, 0, 1], [0, 0, 0, 0, 1, 1, 1], [9, 8, 5, 0, 5, 7, 3, 9], [3, 3, 5, 4, 1], [25], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [5], [64], [0, 0, 0, 0, 1, 1], [1, 0, 9, 6, 0], [3, 1, 2], [16, 52, 13, 36, 85, 15, 14, 22, 79]], "fitness": -0.10000000149011612, "mapping_values": [1, 27, 27, 15, 12, 4, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))), tf.math.pow(grad, tf.math.pow(tf.math.add(alpha, alpha), tf.math.divide_no_nan(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))))), grad)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))))))))))))), lambda shape,  alpha, beta, grad: tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(sigma, alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [1], [0, 8, 8, 6, 1, 2, 6, 2, 3, 5, 4, 4], [2, 0, 2, 0, 3, 1, 0, 0, 0], [31], [0, 1, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1], [9, 8, 2, 5, 5, 7, 3, 9], [3, 4, 5, 4, 1], [25], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [5], [64], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1], [1, 3, 9, 6, 0, 3, 5, 9], [1, 1, 2], [16, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 11, 8, 3, 2], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(alpha, alpha)), tf.math.negative(tf.math.multiply(tf.math.square(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), beta)))", "other_info": {"loss": [17.146283338287517, 158.59170595510935, 579.0296818455213, 1432.4310147627202, 3011.6628811702344, 5275.571976435576], "accuracy": [0.09813763201236725, 0.09985470771789551, 0.09800554811954498, 0.10091137140989304, 0.09945846349000931, 0.10659094154834747], "val_loss": [42.067905970982146, 213.72965349469865, 618.6672886439732, 1375.3177664620537, 2595.2083565848216, 4392.279157366072], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [1], [0, 8, 8, 6, 1, 2, 6, 2, 3, 5, 4, 4], [2, 0, 2, 0, 3, 1, 0, 0, 0], [31], [0, 1, 1, 0, 1, 0, 1, 1], [1, 1, 0, 1, 0, 1, 1], [6, 8, 6, 6, 5, 7, 3, 9], [3, 3, 5, 4, 1], [25], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [5], [64], [0, 1, 0, 0, 1], [1, 3, 9, 6, 0], [2, 1, 2], [16, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(beta, tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07145687192678452, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [1], [0, 8, 8, 6, 1, 2, 6, 2, 3, 5, 4, 4], [2, 0, 2, 0, 3, 1, 0, 0, 0], [31], [0, 0, 0, 0, 0, 1, 1, 1], [1, 0, 0, 1, 0, 0, 1], [5, 8, 6, 4, 5, 7, 3, 9], [3, 3, 5, 4, 1], [25], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [5], [64], [0, 0, 1, 1, 0], [1, 3, 9, 6, 0], [3, 1, 2], [16, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(sigma, alpha), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [9.605207855895745, 75.33674360382842, 253.98356180388805, 596.3685853268098, 1214.9309819838343, 2095.7584018750103], "accuracy": [0.09694888442754745, 0.09972262382507324, 0.09787346422672272, 0.10091137140989304, 0.09919429570436478, 0.10645885765552521], "val_loss": [21.290397099086217, 97.2008056640625, 263.1189662388393, 561.3758544921875, 1037.5292271205358, 1734.392787388393], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [1], [0, 8, 8, 6, 1, 2, 6, 2, 3, 5, 4, 4], [0, 0, 2, 3, 3, 1, 0, 0, 0], [31], [1, 1, 0, 1, 1, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0], [6, 8, 0, 5, 5, 7, 3, 9], [3, 3, 1, 4, 1], [25], [0, 0, 1, 0, 1], [0, 0, 1], [3, 2, 8, 4], [5], [64], [0, 1, 1, 1, 1], [9, 3, 9, 6, 0, 0, 9, 1, 6, 5, 2, 5, 1, 6, 2, 3, 6, 6, 1, 9], [0, 1, 2], [16, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 4, 4, 2, 2, 0, 5, 3, 2, 1, 0, 1, 1, 0, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.sqrt(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, grad))), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302879898980498, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1], [0, 8, 8, 6, 1, 2, 6, 2, 3, 5, 4, 4], [2, 0, 2, 0, 3, 1, 0, 0, 0], [31], [0, 0, 0, 0, 0, 1, 1, 1], [1, 0, 0, 1, 0, 0, 1], [5, 8, 6, 4, 5, 7, 3, 9], [2, 3, 5, 4, 1], [25], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [5], [64], [0, 0, 1, 0, 1], [7, 3, 9, 6, 0], [3, 0, 2], [1, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(sigma, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.302880402836959, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1], [3, 8, 8, 6, 1, 2, 6, 2, 3, 5, 4, 4, 2], [0, 0, 2, 0, 3, 1, 0, 0, 0, 0, 0], [31, 36, 56, 55, 7, 87, 24, 38], [1, 1, 0, 0, 1, 0, 0, 1], [0, 0, 0, 1, 1, 1, 1], [7, 8, 2, 5, 5, 7, 3, 9], [4, 0, 4, 4, 1], [25], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [5], [64], [0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1], [1, 0, 9, 6, 0], [3, 1, 2, 2, 1, 3], [16, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 24, 24, 13, 11, 8, 6, 6, 3, 3, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32), grad)), tf.math.add(alpha, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.multiply(tf.math.square(tf.math.pow(alpha, tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))), tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.negative(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06564522534608841, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397, 0.09933333098888397]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [1], [0, 8, 8, 6, 1, 2, 6, 2, 3, 5, 4, 4], [1, 0, 2, 0, 3, 1, 0, 0, 0], [31], [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [6, 8, 6, 5, 5, 7, 3, 9, 1, 0], [3, 0, 1, 4, 1], [25, 77], [1, 1, 1, 0, 1], [0, 0, 1], [7, 2, 8, 4], [5], [64], [0, 1, 0, 0, 1], [1, 3, 9, 6, 0], [3, 1, 2], [35, 52, 13]], "fitness": -0.04342857003211975, "mapping_values": [1, 1, 1, 0, 1, 0, 15, 15, 10, 5, 2, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.square(tf.math.add(beta, grad)))), tf.math.add(tf.math.multiply(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), alpha), tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.subtract(grad, tf.math.negative(alpha))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), alpha))", "other_info": {"loss": [2.3033583990224775, 2.303721991606896, 2.302978992052775, 2.302312630546438, 2.3035929016291647, 2.302865808099221], "accuracy": [0.09087307006120682, 0.09232597798109055, 0.09576013684272766, 0.09047681838274002, 0.08928807079792023, 0.08572183549404144], "val_loss": [1.9705913407461983, 1.9705913407461983, 1.9705913407461983, 1.9705913407461983, 1.9705913407461983, 1.9705913407461983], "val_accuracy": [0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [1], [0, 8, 8, 6, 1, 2, 6, 2, 3, 5, 4, 4], [1, 0, 2, 0, 3, 1, 0, 0, 0], [31], [0, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 1, 1], [6, 8, 6, 5, 5, 7, 3, 9], [2, 3, 5, 4, 1], [25], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [5], [64], [1, 0, 0, 1, 1], [1, 3, 9, 6, 0], [1, 0, 2], [82, 23, 13, 67]], "fitness": -0.04342857003211975, "mapping_values": [1, 1, 1, 0, 1, 0, 7, 7, 4, 3, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, tf.math.square(grad)))))), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3033583990224775, 2.303721991606896, 2.302978992052775, 2.302312630546438, 2.3035929016291647, 2.302865808099221], "accuracy": [0.09087307006120682, 0.09232597798109055, 0.09576013684272766, 0.09047681838274002, 0.08928807079792023, 0.08572183549404144], "val_loss": [1.9705913407461983, 1.9705913407461983, 1.9705913407461983, 1.9705913407461983, 1.9705913407461983, 1.9705913407461983], "val_accuracy": [0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [1], [0, 8, 8, 6, 1, 2, 6, 2, 3, 5, 4, 4], [2, 0, 2, 0, 3, 1, 0, 0, 0], [31], [0, 1, 0, 0, 0, 0, 1, 1], [1, 0, 0, 1, 0, 0, 1], [6, 8, 6, 5, 5, 7, 3, 9], [3, 3, 5, 4, 1], [25], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [5], [64], [1, 1, 1, 1, 0], [1, 3, 9, 6, 0], [3, 1, 2], [16, 52, 13]], "fitness": -0.04342857003211975, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3033583990224775, 2.303721991606896, 2.302978992052775, 2.302312630546438, 2.3035929016291647, 2.302865808099221], "accuracy": [0.09087307006120682, 0.09232597798109055, 0.09576013684272766, 0.09047681838274002, 0.08928807079792023, 0.08572183549404144], "val_loss": [1.9705913407461983, 1.9705913407461983, 1.9705913407461983, 1.9705913407461983, 1.9705913407461983, 1.9705913407461983], "val_accuracy": [0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856]}}]