[{"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1], [5, 8, 2, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 7, 8, 4], [2, 1], [64], [0, 1, 0, 1, 0, 1], [3, 1, 9, 1, 2], [1, 0, 2], [15, 52, 13]], "fitness": -0.8411428332328796, "mapping_values": [1, 3, 3, 1, 2, 1, 5, 5, 3, 2, 0, 4, 3, 2, 1, 0, 5, 3, 2, 2], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(alpha, tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, beta))))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1553455899813865, 1.2722958806341729, 0.8801350114037253, 0.7386358373940755, 0.7042158825790185, 0.6481442967457558, 0.6047454978953326, 0.5997240591231843, 0.565462928107386, 0.5488269534786191, 0.5346824326661316, 0.5112676700706794, 0.4920056130805461, 0.48085283137992735, 0.46528366530465887, 0.44449727890466606, 0.44949762464325427, 0.4322411009640568, 0.41473866377004687, 0.3982907708184657, 0.3927357952710644, 0.3869830955288839, 0.37940720684571494, 0.3687446304536562, 0.3601672896155119, 0.353268516908437, 0.3361521555826003, 0.33260820503318944, 0.327471677783206, 0.32518060082426287, 0.30934148994198785, 0.3114519296872098, 0.3052780237203859, 0.2897011479327172, 0.2928454624450816, 0.28535064327450727, 0.2915902669443005, 0.28356488712900557, 0.2740121134370467, 0.2711836578760637, 0.26205411128253986], "accuracy": [0.2694492042064667, 0.5555408596992493, 0.6749438643455505, 0.7220974564552307, 0.7326641082763672, 0.7560427784919739, 0.7751948237419128, 0.7763835787773132, 0.7877426743507385, 0.7956677079200745, 0.7973847389221191, 0.8104609847068787, 0.8132346868515015, 0.8239334225654602, 0.8294808864593506, 0.8327829837799072, 0.8333113193511963, 0.8358209133148193, 0.8450667262077332, 0.8508783578872681, 0.8519350290298462, 0.8580108284950256, 0.8609166741371155, 0.8647470474243164, 0.8668603897094727, 0.8721436858177185, 0.8722757697105408, 0.8741249442100525, 0.8779553771018982, 0.8786157965660095, 0.8824461698532104, 0.8794082403182983, 0.885219931602478, 0.8902390599250793, 0.8926165699958801, 0.8949940800666809, 0.8912957310676575, 0.8919561505317688, 0.8905032277107239, 0.896446943283081, 0.9045040011405945], "val_loss": [1.2804569516863142, 0.6796252046312604, 0.5753723893846784, 0.5522603648049491, 0.5175177199499947, 0.4921003409794399, 0.4752521344593593, 0.45478521074567524, 0.44009082657950266, 0.43801110131399973, 0.415096504347665, 0.410989556993757, 0.39449108498437063, 0.38751329694475445, 0.37492325476237703, 0.37879766736711773, 0.36842014108385357, 0.3599524072238377, 0.3563838430813381, 0.35597279242106844, 0.3675992318562099, 0.35107727561678204, 0.3390248417854309, 0.3339314375604902, 0.33196860551834106, 0.32837380681719097, 0.3330331189291818, 0.3263682041849409, 0.31816441672188894, 0.3179895452090672, 0.3228092534201486, 0.316039502620697, 0.3187697104045323, 0.3221678393227713, 0.30963396174567087, 0.3098071302686419, 0.3046754939215524, 0.3103817105293274, 0.31333848408290316, 0.3036630494253976, 0.3059157303401402], "val_accuracy": [0.5849999785423279, 0.70333331823349, 0.7490000128746033, 0.746999979019165, 0.781333327293396, 0.7853333353996277, 0.7876666784286499, 0.8003333210945129, 0.809333324432373, 0.8069999814033508, 0.8226666450500488, 0.8253333568572998, 0.8366666436195374, 0.8376666903495789, 0.8446666598320007, 0.8370000123977661, 0.8479999899864197, 0.8519999980926514, 0.8536666631698608, 0.8576666712760925, 0.8456666469573975, 0.8539999723434448, 0.8643333315849304, 0.859666645526886, 0.8700000047683716, 0.8659999966621399, 0.8656666874885559, 0.8679999709129333, 0.8686666488647461, 0.8709999918937683, 0.871666669845581, 0.8693333268165588, 0.8709999918937683, 0.8690000176429749, 0.8713333606719971, 0.8799999952316284, 0.8759999871253967, 0.8756666779518127, 0.875, 0.8790000081062317, 0.8756666779518127]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [4, 8, 2, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 2, 8, 4], [2, 1], [64], [0, 1, 0, 1, 0, 1], [3, 1, 9, 1, 2], [1, 0, 2], [15, 52, 13]], "fitness": -0.840571403503418, "mapping_values": [1, 3, 3, 1, 2, 1, 8, 8, 5, 3, 0, 5, 4, 2, 2, 0, 5, 3, 2, 2], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.add(tf.math.negative(tf.math.negative(grad)), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, beta))), tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1553452887696958, 1.2722580303227535, 0.8798194409298496, 0.7383306748548031, 0.703057582769506, 0.6488764836976809, 0.6037135750405651, 0.6002577088685667, 0.5650618704019394, 0.547352106485227, 0.5324704105812151, 0.5079649502669563, 0.48654892962716745, 0.4766394417236478, 0.46473372417937936, 0.44183691817661397, 0.4442465107407253, 0.42977410074254035, 0.41307168720719867, 0.3974106560301677, 0.39001883206397725, 0.3871488632810681, 0.37849523045792793, 0.36752227443934526, 0.3619580426393735, 0.35559255337797024, 0.34279356353066587, 0.33436515336070693, 0.3355258626078791, 0.3261789915867454, 0.310575925454393, 0.314220353463039, 0.30469017331673565, 0.2929671958704918, 0.2923714833654165], "accuracy": [0.2694492042064667, 0.5558050274848938, 0.6763967871665955, 0.7199841737747192, 0.7337207794189453, 0.7540615797042847, 0.7765156626701355, 0.7741381525993347, 0.7876105904579163, 0.7955356240272522, 0.796328067779541, 0.8109893202781677, 0.8153480291366577, 0.8252542614936829, 0.8304054737091064, 0.8354246616363525, 0.8356888294219971, 0.8409721255302429, 0.8462554216384888, 0.8511425256729126, 0.8531237840652466, 0.858671247959137, 0.8584070801734924, 0.8634262084960938, 0.8646149635314941, 0.8684453964233398, 0.8688416481018066, 0.8737286925315857, 0.8767666220664978, 0.8800686597824097, 0.8845595121383667, 0.8804649114608765, 0.884691596031189, 0.8911636471748352, 0.8899748921394348], "val_loss": [1.2804688044956751, 0.6795804159981864, 0.5750174181801933, 0.5499824455806187, 0.5163431167602539, 0.49109978335244314, 0.4754519121987479, 0.4541793039866856, 0.43944856098720003, 0.43720868655613493, 0.41345752137047903, 0.40957572630473543, 0.39152575390679495, 0.38802017484392437, 0.3731312155723572, 0.3746722085135324, 0.36547727244240896, 0.3589909928185599, 0.3510657378605434, 0.35566000427518574, 0.3596442086356027, 0.3465947764260428, 0.3363328405788967, 0.3296594194003514, 0.32876899412700106, 0.3257898688316345, 0.3326319626399449, 0.3331749950136457, 0.3194922208786011, 0.317516097000667, 0.3207715153694153, 0.3148725373404367, 0.3167432887213571, 0.3144312926701137, 0.31117017780031475], "val_accuracy": [0.5849999785423279, 0.703000009059906, 0.7493333220481873, 0.749666690826416, 0.7816666960716248, 0.7853333353996277, 0.7873333096504211, 0.8013333082199097, 0.8100000023841858, 0.8109999895095825, 0.8236666917800903, 0.8240000009536743, 0.8343333601951599, 0.8356666564941406, 0.8450000286102295, 0.8426666855812073, 0.8476666808128357, 0.8513333201408386, 0.859000027179718, 0.8550000190734863, 0.8496666550636292, 0.8576666712760925, 0.8663333058357239, 0.8629999756813049, 0.8673333525657654, 0.8679999709129333, 0.8656666874885559, 0.8659999966621399, 0.8696666955947876, 0.8740000128746033, 0.8723333477973938, 0.8676666617393494, 0.8723333477973938, 0.8679999709129333, 0.8733333349227905]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [2, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [47, 32, 5, 49, 25], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [1, 8, 9, 9, 9, 9, 3, 9], [0, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 57], [1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 2, 8, 4], [2, 2], [64], [0, 1, 0, 1, 0, 1], [3, 1, 9, 1, 2], [1, 0, 2], [15, 52, 13]], "fitness": -0.7885714173316956, "mapping_values": [1, 1, 1, 0, 1, 0, 4, 4, 3, 1, 2, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3199722335134214, 2.2485425434470288, 2.0444415100750404, 2.023799652342216, 3.290991481615489, 2.1296355724964537, 1.8199343858472485, 1.9064074092930996, 2.004239699340153, 1.9347306675584073, 1.619400990275407, 1.5215301502020195, 1.3267935114986373, 1.2284760007202002, 1.1778479543549116, 1.0830997180126252, 1.0669393282147006, 1.000596178253455, 0.9894023009452523, 1.0598640835138753, 1.0005822447722126, 0.9185918656716242, 0.9086393450764838, 0.8725594270341133, 0.8514300613843565, 0.8122828127118842, 0.786768789438445, 0.7965570119598427, 0.7674716390780548, 0.7435133731234516, 0.7649044787422415, 0.731909327833896, 0.7072224826813374, 0.6877306949397939, 0.6527930662742522, 0.6718139528929046, 0.6674213278421148, 0.6439448661571795, 0.6265288539582146, 0.6367525492976008, 0.6243650422765752, 0.6347139863337445, 0.5795847361334374, 0.586628979750754, 0.5612915230307518, 0.5501429849785112, 0.5314069054366386, 0.5331377249470381, 0.5320396633070096, 0.5027706298404886, 0.503340869413753, 0.49899514459379596, 0.49836177420323285, 0.484875448726156, 0.48920796670461486, 0.472315090723073, 0.45939596784806064, 0.4471552212634154, 0.4370128165823735, 0.42317973164488, 0.4155620596215489], "accuracy": [0.20261524617671967, 0.20314356684684753, 0.2666754722595215, 0.3127724230289459, 0.1990489959716797, 0.21872936189174652, 0.36983224749565125, 0.3611147701740265, 0.2871483266353607, 0.3191123902797699, 0.4150046110153198, 0.45568618178367615, 0.5151234865188599, 0.5425967574119568, 0.5552766919136047, 0.5904107689857483, 0.5927882790565491, 0.6145819425582886, 0.615770697593689, 0.6067890524864197, 0.6112799048423767, 0.644300639629364, 0.643772304058075, 0.6637167930603027, 0.6625280380249023, 0.6775855422019958, 0.6861709356307983, 0.6915863156318665, 0.7000396251678467, 0.703209638595581, 0.6979262828826904, 0.7061154246330261, 0.7193237543106079, 0.7228899598121643, 0.7452120184898376, 0.7301545143127441, 0.7353057861328125, 0.7384757399559021, 0.7493065595626831, 0.7395324110984802, 0.7464007139205933, 0.7460044622421265, 0.7623828053474426, 0.7633073329925537, 0.7732135653495789, 0.7775723338127136, 0.7839123010635376, 0.7843085527420044, 0.7874785661697388, 0.7992339134216309, 0.7985734939575195, 0.7976489067077637, 0.798309326171875, 0.8068947196006775, 0.8009510040283203, 0.8168009519577026, 0.8177255392074585, 0.8248580098152161, 0.8284242749214172, 0.8342359066009521, 0.8358209133148193], "val_loss": [1.919497013092041, 1.9309338160923548, 1.3413126468658447, 1.9898569924490792, 1.9391656603131975, 1.778275830405099, 1.1782432624271937, 1.8145570073808943, 1.781569276537214, 1.307320969445365, 1.150475229535784, 1.0646203926631383, 0.918987512588501, 0.8871776035853794, 0.8038133723395211, 0.8620785815375192, 0.7208286353519985, 0.7315958057131086, 0.7253425972802299, 0.7962600844247001, 0.6908601352146694, 0.6778214148112706, 0.6656652518681118, 0.7366812740053449, 0.655740771974836, 0.6306728294917515, 0.623268621308463, 0.6052837712424142, 0.6197207314627511, 0.575885500226702, 0.6464270183018276, 0.5979793412344796, 0.5689479282924107, 0.5479645899363926, 0.5640135492597308, 0.5794397762843541, 0.5524983746664864, 0.5324110303606305, 0.5365492616380964, 0.5609621661049979, 0.5468495232718331, 0.5162221874509539, 0.5160150017057147, 0.4982902152197702, 0.48828768730163574, 0.4798999513898577, 0.5198977163859776, 0.46907995428357807, 0.46639743873051237, 0.4866599014827183, 0.46998391832624165, 0.4603223630360195, 0.455856340272086, 0.4582746369498117, 0.43135407992771696, 0.41826758214405607, 0.4514131886618478, 0.45627706391470774, 0.4275460924421038, 0.44449732984815327, 0.44692087173461914], "val_accuracy": [0.3176666796207428, 0.164000004529953, 0.4103333353996277, 0.10333333164453506, 0.17933332920074463, 0.29633334279060364, 0.5410000085830688, 0.3153333365917206, 0.2626666724681854, 0.44600000977516174, 0.4776666760444641, 0.5563333630561829, 0.5899999737739563, 0.6143333315849304, 0.6196666955947876, 0.5870000123977661, 0.6616666913032532, 0.6470000147819519, 0.6626666784286499, 0.6179999709129333, 0.6883333325386047, 0.687333345413208, 0.6926666498184204, 0.640666663646698, 0.6930000185966492, 0.7163333296775818, 0.7103333473205566, 0.7203333377838135, 0.7126666903495789, 0.7333333492279053, 0.7113333344459534, 0.7243333458900452, 0.7360000014305115, 0.7416666746139526, 0.737333357334137, 0.737666666507721, 0.7443333268165588, 0.7506666779518127, 0.7566666603088379, 0.7326666712760925, 0.7580000162124634, 0.7633333206176758, 0.7576666474342346, 0.7703333497047424, 0.7746666669845581, 0.7829999923706055, 0.7576666474342346, 0.7866666913032532, 0.7946666479110718, 0.7863333225250244, 0.8016666769981384, 0.7960000038146973, 0.79666668176651, 0.8090000152587891, 0.8069999814033508, 0.8226666450500488, 0.7903333306312561, 0.7829999923706055, 0.8183333277702332, 0.8113333582878113, 0.8143333196640015]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [6, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [2, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 18, 5, 49, 25], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [4, 3, 0, 9, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [1, 0, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0], [7, 2, 8, 4], [2, 7], [64], [0, 1, 0, 1, 0, 1], [3, 1, 9, 1, 2], [1, 0, 2], [15, 41, 13]], "fitness": -0.6851428747177124, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9373755756701145, 1.3754924356252478, 0.9026110364603187, 0.7634521922210519, 0.6920807574718321, 0.6607573267853318, 0.6164088555614253, 0.5952772222269386, 0.5717664850843014, 0.5759669381629647, 0.5833852009813563, 0.6050998009254179, 0.6426402634838081, 0.6259162853406861], "accuracy": [0.3559635579586029, 0.5946374535560608, 0.6646413803100586, 0.7170783281326294, 0.7343811988830566, 0.7536653280258179, 0.7660810947418213, 0.7808743715286255, 0.7849689722061157, 0.7868181467056274, 0.789988100528717, 0.7784969210624695, 0.7532690763473511, 0.761590301990509], "val_loss": [1.3956428255353654, 0.706268276487078, 0.5883384602410453, 0.5384922027587891, 0.507396970476423, 0.47517781598227365, 0.46553339276994976, 0.4825150455747332, 0.4514420883996146, 0.46994313171931673, 0.4962409905024937, 0.48326969146728516, 0.5153519426073346, 0.521240234375], "val_accuracy": [0.6539999842643738, 0.6863333582878113, 0.7523333430290222, 0.7720000147819519, 0.7816666960716248, 0.8006666898727417, 0.7923333048820496, 0.8090000152587891, 0.8206666707992554, 0.8096666932106018, 0.8130000233650208, 0.7976666688919067, 0.7889999747276306, 0.793666660785675]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 58, 5, 49, 25], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [4, 8, 9, 9, 9, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [61], [1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 2, 8, 4], [2, 2], [64], [1, 1, 0, 0, 0, 1], [3, 1, 9, 1, 2], [1, 3, 2], [15, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 7, 7, 3, 4, 4, 3, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(grad, tf.math.add(tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, alpha), tf.math.negative(tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.sqrt(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0], [4, 2, 2, 0, 0, 9, 3, 9], [1, 3, 2, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [1, 1, 0, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [8, 2, 8, 4], [2, 1], [64], [0, 1, 1, 0, 0, 1], [2, 2, 9, 1, 2], [3, 0, 2], [15, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 8, 8, 4, 4, 0, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(tf.math.add(grad, tf.math.negative(beta)), grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.301967257474628, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 4, 3, 6, 2, 4, 6, 1, 5, 4, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0, 3, 3], [13, 11, 5, 49, 25], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [7, 2, 5, 9, 9, 9, 3, 9], [3, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 42], [0, 0, 0, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [7, 2, 8, 4], [2, 2], [64], [0, 1, 0, 1, 0, 1], [3, 2, 9, 1, 2], [1, 0, 2], [15, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 30, 30, 15, 15, 5, 6, 6, 5, 1, 2, 3, 3, 1, 2, 0, 5, 3, 2, 2], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.pow(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha))), tf.math.pow(tf.math.pow(tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.add(grad, grad)))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.square(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, beta), tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.add(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0882314071059227, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [2, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1], [4, 2, 2, 0, 0, 9, 3, 9], [3, 1, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 2, 8, 4], [2, 2], [64], [1, 1, 0, 1, 0, 1], [3, 6, 7, 1, 2, 9, 4, 0, 6, 0], [1, 3, 2], [15, 9, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 8, 8, 4, 4, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(grad, alpha)), tf.math.negative(grad))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.4714316974431294, Infinity, 2.3171963099365174, 2.319997868785422, 2.32343504170952, 2.327637589980803, 2.3328347000479304], "accuracy": [0.0305111613124609, 0.09536388516426086, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [4.834964207240513, 1.9849213191441126, 1.9870976720537459, 1.9897623743329729, 1.9930193764822823, 1.9970436096191406, 2.0019966534205844], "val_accuracy": [0.0846666693687439, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 3, 3, 0, 3, 5, 9, 4, 2, 6, 3, 6, 5, 8], [2, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1], [8, 2, 2, 0, 0, 9, 3, 9], [1, 1, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [45, 17], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 1, 1, 0], [7, 2, 8, 4], [2, 4], [64], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [3, 1, 8, 1, 2, 7, 3, 9, 5], [1, 0, 2, 1, 3, 1, 2, 1], [15, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 7, 7, 4, 3, 0, 1, 1, 0, 1, 0, 6, 3, 3, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, alpha), tf.math.negative(alpha)), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.sqrt(beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [2, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [4, 2, 2, 0, 0, 9, 3, 9], [2, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [45, 17], [0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 4, 8, 4], [2, 1], [64], [0, 1, 0, 1, 0, 1], [1, 1, 9, 4, 2], [1, 0, 2, 3], [15, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 4, 9, 9, 5, 4, 0, 5, 3, 2, 1, 0, 5, 3, 2, 2], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, alpha), tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.square(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.negative(tf.math.negative(tf.math.add(beta, beta))), grad), tf.math.add(beta, grad))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.pow(sigma, sigma)), tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(alpha, tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3018894974329784, 2.302527963146794, 2.3025161310225397, 2.3025151321271062, 2.302514963744575, 2.3025198616072675], "accuracy": [0.10355303436517715, 0.10632677376270294, 0.10500594228506088, 0.10236428678035736, 0.1014397069811821, 0.10368511080741882], "val_loss": [1.9736459595816476, 1.9736202103751046, 1.9736260686601912, 1.9736057009015764, 1.9736158507210868, 1.9736122403826033], "val_accuracy": [0.10233332961797714, 0.10066666454076767, 0.10066666454076767, 0.10233332961797714, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [6, 2, 3, 6, 2, 4, 0, 5, 5, 9, 4, 2, 6, 3, 6, 5, 8], [2, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [50, 32, 24, 49, 25], [0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [4, 8, 2, 2, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 0, 1, 1, 0, 0, 1, 1], [1, 0, 1, 1, 0], [5, 2, 8, 4], [2, 1], [64], [0, 0, 0, 1, 1, 1, 0, 1, 1], [3, 1, 9, 1, 4], [1, 0, 2, 3], [15, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 3, 2, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), alpha), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.7076982461450405, 102815372.09457286, 17.31532016019024, 42.30644970622911, 78.9579341406237, 129.54034290608476, 191.14112939457962, 265.87558295386356, 351.73945397792824, 449.277805887146, 560.2008188771944], "accuracy": [0.21529521048069, 0.09879804402589798, 0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.1006472036242485, 0.10355303436517715, 0.09774138033390045, 0.10500594228506088, 0.09998679161071777, 0.10394927859306335], "val_loss": [16610.015066964286, 9.738261359078544, 25.351911272321427, 52.633266993931365, 90.27174595424107, 138.16705758231026, 196.29483904157365, 264.62740652901783, 343.13282993861606, 431.81026785714283, 530.6310337611607], "val_accuracy": [0.09666666388511658, 0.09566666930913925, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10366666316986084, 0.10366666316986084, 0.10066666454076767, 0.09799999743700027, 0.09799999743700027, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [4, 8, 0, 0, 9, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 1, 1, 0], [5, 9, 8, 4], [2, 1], [64], [1, 1, 0, 1, 0, 1], [6, 1, 9, 1, 2], [0, 0, 2], [15, 77, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.301967257474628, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [4, 8, 2, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 0, 0], [7, 2, 8, 4], [2, 1], [64], [0, 1, 0, 1, 1, 1], [3, 9, 9, 1, 2], [1, 3, 2], [83, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 6, 6, 3, 3, 0, 8, 5, 4, 1, 0, 3, 2, 1, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.add(tf.math.add(beta, grad), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, beta))), tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.pow(sigma, sigma)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.4706979789565096, Infinity, 2.3171104175886064, 2.319889705037208, 2.3232981190311754, 2.327463379342086, 2.3326115264648206], "accuracy": [0.0305111613124609, 0.0952318087220192, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [4.780184200831822, 1.9848549025399345, 1.9870142255510603, 1.989656925201416, 1.9928856577192033, 1.9968726975577218, 2.001776627131871], "val_accuracy": [0.08366666734218597, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 2, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [0, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 24, 49, 25], [0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1], [4, 8, 2, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [5, 2, 8, 4], [2, 1], [64], [0, 0, 0, 1, 0, 1, 0, 1, 0], [3, 9, 9, 1, 2], [1, 0, 2, 1], [13, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 8, 8, 6, 2, 1, 4, 3, 2, 1, 0, 3, 3, 0, 2], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.negative(grad))), tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, beta))))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.301854015735036, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [2, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 0, 2, 6, 1, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 1, 0, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [7, 2, 8, 4], [5, 1], [64], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1], [3, 1, 9, 1, 2, 6, 9, 3, 5, 2, 1, 4], [3, 1, 2, 1, 1, 2, 2, 2], [61, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 3, 2, 1, 1, 0, 20, 12, 8, 2], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.subtract(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.subtract(alpha, tf.math.add(tf.math.divide_no_nan(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.multiply(beta, alpha)), tf.math.square(tf.math.add(alpha, tf.math.subtract(beta, tf.math.pow(beta, beta))))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 3, 3, 0, 3, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 0, 1, 2, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [8, 8, 2, 0, 0, 9, 3, 9], [5, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 2, 8, 4], [2, 4], [64], [0, 1, 0, 1, 0, 1], [3, 9, 0, 1, 2, 7, 6, 4, 5], [2, 0, 2, 1, 1, 2, 1, 3], [15, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 23, 23, 13, 10, 4, 2, 2, 1, 1, 0, 3, 1, 1, 0, 0, 3, 2, 1, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [9, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1], [1, 1, 8, 5, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [3, 2, 8, 4], [2, 1], [64], [0, 1, 0, 1, 1, 1], [2, 4, 9, 1, 2], [2, 0, 2], [84, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 10, 10, 7, 3, 1, 5, 4, 2, 2, 0, 5, 2, 3, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.subtract(tf.math.sqrt(tf.math.square(tf.math.negative(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, beta))), tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(beta, tf.math.pow(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [2.301485906801739, 2.3025674189810803, 2.3346030119151613, 8.02177343745163, 26.54538049522786, 48.446796218716884], "accuracy": [0.10249637067317963, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9734209605625697, 1.9745371682303292, 2.2647463253566196, 15.582885197230748, 33.23914991106306, 53.35217067173549], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 9, 0, 8, 5, 9, 4, 2, 6, 3, 6, 5, 8], [2, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], [7, 2, 5, 9, 9, 9, 3, 9], [3, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [45, 17], [0, 0, 1, 0, 1, 0, 1, 1], [0, 0, 1, 0, 0], [7, 2, 8, 4], [2, 2], [64], [0, 0, 0, 1, 0, 1, 1, 1, 1], [6, 1, 9, 1, 2], [1, 0, 2, 3], [49, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 9, 5, 3, 3, 3, 1, 2, 0, 5, 3, 2, 1, 0, 7, 4, 3, 2], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.square(tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, beta))), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.subtract(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), alpha), tf.math.subtract(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [2.3013512680732404, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.10394927859306335, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9745701381138392, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09566666930913925, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 1, 4, 0, 1, 2, 9, 4, 2, 6, 3, 6, 5, 8], [3, 1, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [47, 32, 5, 49, 25], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1], [4, 8, 2, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 2, 8, 4], [2, 1], [64], [1, 0, 0, 1, 0, 1], [3, 1, 9, 1, 2], [1, 3, 2], [89, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 3, 3, 1, 2, 0, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3023091101328363, 2.3017964497564836, 2.3014087515767887, 2.3020107945147568, 2.3022415219454198, 2.3002190764365085], "accuracy": [0.08809932321310043, 0.09206181764602661, 0.08928807079792023, 0.08426892012357712, 0.0874389111995697, 0.09576013684272766], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [20, 32, 5, 49, 25], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1], [4, 2, 2, 0, 0, 9, 3, 9], [1, 3, 3, 2, 1, 5, 3, 2, 1, 4, 4, 0], [45, 17], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 2, 8, 4], [2, 1], [64], [0, 1, 0, 1, 0, 1], [0, 1, 9, 1, 2], [1, 0, 2, 3], [15, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 17, 17, 10, 7, 4, 8, 8, 4, 4, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.square(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(tf.math.negative(grad), tf.math.add(beta, grad)))), tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.3023091101328363, 2.3017964497564836, 2.3014087515767887, 2.3020107945147568, 2.3022415219454198, 2.3002190764365085], "accuracy": [0.08809932321310043, 0.09206181764602661, 0.08928807079792023, 0.08426892012357712, 0.0874389111995697, 0.09576013684272766], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}]