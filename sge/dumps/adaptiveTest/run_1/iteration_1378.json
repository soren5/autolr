[{"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [62, 66, 89, 50, 85, 46], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 2, 4, 2, 9, 1, 6, 5, 2, 0, 2, 8, 2, 0, 0, 2, 2, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [0, 5, 1, 0, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [31, 37, 34, 97, 2, 57, 35, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [3, 7, 7, 9, 3, 0, 1, 3, 2, 2, 5], [1, 0, 0, 2, 0, 2, 2], [30, 23, 13, 96, 41]], "fitness": -0.8282856941223145, "mapping_values": [1, 4, 4, 2, 2, 1, 38, 38, 24, 14, 6, 1, 0, 0, 0, 0, 7, 4, 3, 3], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.square(tf.math.add(tf.math.add(beta, tf.math.pow(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))), alpha)), tf.math.subtract(tf.math.divide_no_nan(tf.math.square(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.negative(grad)), grad)))), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, beta)))))))), tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.add(tf.math.add(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.255490466226062, 1.8212822274824159, 1.2182836727679698, 0.9065550788597361, 0.8124582663093812, 0.7402138666170716, 0.6954466179692278, 0.6663443946709265, 0.6366562630443399, 0.622668316548196, 0.5990490062975881, 0.5859860391538724, 0.5702994188785616, 0.5581455983899573, 0.549088635929288, 0.5376604029830295, 0.5281313145795219, 0.5129003368427315, 0.5045419730420252, 0.4982054172182883, 0.495477856402195, 0.48439123592419536, 0.47956911128163415, 0.48050384244127137, 0.4623433673355038, 0.4584508772185135, 0.4575857363356859, 0.4487867034846734, 0.4466816301571616, 0.43125787783591757, 0.4251116953781331, 0.4182238407878828, 0.41215200189428713, 0.4079846235912521, 0.3995864651206619, 0.40495850312522436, 0.38724512782520104, 0.3927590456998989, 0.3776317266598511, 0.3718966835989944, 0.3679688635983755, 0.3681557951916982, 0.35771861027228974, 0.36055493255206983, 0.35279258841599737, 0.34452761208785915, 0.34015781460830546, 0.33896549351305744, 0.33720803957542234, 0.3290187371893487, 0.32516839942439607, 0.3201158247123447, 0.3160950435135327, 0.3160228826555326, 0.31758044091481513, 0.3124309949091696, 0.30765961252498336, 0.298649178701007, 0.3018788893059685, 0.2873823353564341, 0.2847050200080544, 0.28791760236690106, 0.27627590742282515, 0.27661705496934397, 0.2724052512859073], "accuracy": [0.20433232188224792, 0.42530709505081177, 0.5688812732696533, 0.6720380187034607, 0.7018887996673584, 0.7182670831680298, 0.7314753532409668, 0.7485140562057495, 0.7535332441329956, 0.7601373791694641, 0.7707040309906006, 0.7774402499198914, 0.7835160493850708, 0.7860256433486938, 0.7903843522071838, 0.7940827012062073, 0.7948752045631409, 0.8043851256370544, 0.8088759779930115, 0.8112534880638123, 0.8149517774581909, 0.8193105459213257, 0.8145555257797241, 0.8183859586715698, 0.828292191028595, 0.8255184292793274, 0.8272355198860168, 0.8308017253875732, 0.8286884427070618, 0.8403117060661316, 0.8333113193511963, 0.8448025584220886, 0.8436138033866882, 0.8436138033866882, 0.8525954484939575, 0.8481045961380005, 0.8556333184242249, 0.8553691506385803, 0.8577466607093811, 0.859199583530426, 0.8636903762817383, 0.8623695969581604, 0.8650112152099609, 0.8687095642089844, 0.8681812286376953, 0.871879518032074, 0.8755778670310974, 0.8677849769592285, 0.8742570281028748, 0.8762382864952087, 0.8768987059593201, 0.8803328275680542, 0.8812574148178101, 0.8802007436752319, 0.8804649114608765, 0.8854840993881226, 0.8816536664962769, 0.8860124349594116, 0.8833707571029663, 0.8931449055671692, 0.8891823887825012, 0.8927486538887024, 0.8934090733528137, 0.8931449055671692, 0.8938053250312805], "val_loss": [1.7985529899597168, 0.975365127835955, 0.695907473564148, 0.6301016637257167, 0.5721243109021869, 0.5514798504965646, 0.5287793704441616, 0.5070849146161761, 0.4956868716648647, 0.4811889273779733, 0.4674303191048758, 0.46362500531332834, 0.45323303767613005, 0.4415864178112575, 0.43359080382755827, 0.4280151639665876, 0.4233671597072056, 0.41169517380850656, 0.41460361651011873, 0.4054995690073286, 0.3984589236123221, 0.39574614592960905, 0.3890776974814279, 0.38817416770117624, 0.3827397993632725, 0.3809953417096819, 0.38120157378060476, 0.3749544790812901, 0.36868659939084736, 0.3604883977345058, 0.3679275257246835, 0.35700022322790964, 0.35495621817452566, 0.35784095525741577, 0.35026088782719206, 0.3490797281265259, 0.3480554223060608, 0.34777144874845234, 0.3388579913548061, 0.33686085258211407, 0.3366186193057469, 0.33588417938777376, 0.3355997545378549, 0.33419833864484516, 0.33303725719451904, 0.3297302637781416, 0.3288065195083618, 0.32871632065091816, 0.32488621132714407, 0.32692692961011616, 0.323141804763249, 0.32332557439804077, 0.3254982658794948, 0.32053691148757935, 0.3230689593723842, 0.3218924743788583, 0.3217570015362331, 0.32713764905929565, 0.31866802488054546, 0.32232511043548584, 0.32047263213566374, 0.31428368602480206, 0.32115550552095684, 0.3223442775862558, 0.31780196939195904], "val_accuracy": [0.4986666738986969, 0.6493333578109741, 0.6946666836738586, 0.7183333039283752, 0.7409999966621399, 0.7413333058357239, 0.7583333253860474, 0.7706666588783264, 0.781333327293396, 0.7749999761581421, 0.7906666398048401, 0.7879999876022339, 0.7993333339691162, 0.8076666593551636, 0.8056666851043701, 0.8146666884422302, 0.812666654586792, 0.8206666707992554, 0.815666675567627, 0.8236666917800903, 0.8233333230018616, 0.8259999752044678, 0.8316666483879089, 0.8293333053588867, 0.8293333053588867, 0.8343333601951599, 0.8320000171661377, 0.840666651725769, 0.8403333425521851, 0.8456666469573975, 0.8420000076293945, 0.8493333458900452, 0.8539999723434448, 0.847000002861023, 0.8519999980926514, 0.8513333201408386, 0.8543333411216736, 0.8523333072662354, 0.8546666502952576, 0.856333315372467, 0.8546666502952576, 0.8573333621025085, 0.8600000143051147, 0.8566666841506958, 0.8633333444595337, 0.8566666841506958, 0.859666645526886, 0.8643333315849304, 0.8643333315849304, 0.862333357334137, 0.8610000014305115, 0.8669999837875366, 0.8636666536331177, 0.8633333444595337, 0.8679999709129333, 0.8669999837875366, 0.8686666488647461, 0.8629999756813049, 0.8640000224113464, 0.8700000047683716, 0.8653333187103271, 0.8700000047683716, 0.8679999709129333, 0.8643333315849304, 0.8700000047683716]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [62, 66, 89, 50, 85, 46], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [1, 3, 2, 1, 6, 9, 8, 1, 5, 0, 0, 2, 8, 4, 0, 0, 2, 2, 8, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [0, 1, 1, 0, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [31, 4, 92, 72, 2, 36, 35, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [3, 7, 7, 9, 3, 0, 1, 0, 2, 2, 2, 4, 7, 3, 2, 9, 0, 0, 2, 2, 1, 3, 8, 6, 7, 6, 2, 6, 5, 4, 3, 1, 0, 4, 2, 1, 4, 5, 4, 7, 0, 0, 6, 4, 6, 0, 7, 2, 9, 6, 1, 3, 8], [1, 3, 0, 2, 0, 2, 2], [16, 23, 91, 96, 41]], "fitness": -0.8088571429252625, "mapping_values": [1, 4, 4, 2, 2, 1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 7, 4, 3, 2], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.add(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), sigma), tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.291614811197799, 2.227966985524905, 2.084952793998678, 1.7779321644237218, 1.415115955451917, 1.1983076003816198, 1.033196852294099, 0.9371309905728612, 0.8642778565240905, 0.8238709734147802, 0.7890472697260641, 0.7617032456124039, 0.7338992048090853, 0.7220332240384442, 0.6996325809942056, 0.6916267049389745, 0.6792325875888553, 0.6669758969703606, 0.6541258728326257, 0.6464981529076873, 0.6526364563021914, 0.6313698783117342, 0.6313629025213785, 0.6300049019590455, 0.6107802261939028, 0.6124141156838759, 0.6024755820181266, 0.5987276099361465, 0.5985072024462796, 0.5906786108769604, 0.5785903953495058, 0.577145541191353, 0.5657839633533275, 0.5671381605079288, 0.5688036081498372, 0.5598009254607731, 0.5568777220659504, 0.5614673731003014, 0.550529749102801, 0.5463614848075431, 0.5416130002432055, 0.5433497234279485, 0.5360126255242234], "accuracy": [0.12336547672748566, 0.27261921763420105, 0.37670058012008667, 0.4550257623195648, 0.5134063959121704, 0.570202112197876, 0.6301677227020264, 0.6568484902381897, 0.6892088055610657, 0.6960771083831787, 0.7121912837028503, 0.7215691208839417, 0.7257958054542542, 0.726192057132721, 0.7424382567405701, 0.7437590956687927, 0.7466648817062378, 0.7491744756698608, 0.7523444890975952, 0.759080708026886, 0.7565711140632629, 0.7631752490997314, 0.7600052952766418, 0.7662131786346436, 0.7701756954193115, 0.7643640041351318, 0.7745344042778015, 0.7758552432060242, 0.7758552432060242, 0.7759873270988464, 0.7827235460281372, 0.7857614755630493, 0.7878747582435608, 0.7849689722061157, 0.7878747582435608, 0.791969358921051, 0.7891955971717834, 0.796328067779541, 0.7922335267066956, 0.7909126877784729, 0.7959318161010742, 0.7988376617431641, 0.7956677079200745], "val_loss": [1.932952608380999, 1.8435213225228446, 1.628028426851545, 1.218430859701974, 0.8849944387163434, 0.7514389072145734, 0.6991889136178153, 0.6574271236147199, 0.6114567177636283, 0.5921627623694283, 0.5763364689690726, 0.5574973821640015, 0.5458319016865322, 0.5334675312042236, 0.5269744225910732, 0.5150949954986572, 0.5084628547940936, 0.5049587488174438, 0.49575849941798616, 0.4906566653932844, 0.4838845729827881, 0.48125401565006803, 0.47664340904780794, 0.4721308776310512, 0.4705315828323364, 0.46685290336608887, 0.4640974998474121, 0.4591249057224819, 0.4564500791685922, 0.45209130219050814, 0.4507089853286743, 0.4463206018720354, 0.4453235013144357, 0.44481069701058523, 0.4438880341393607, 0.4402298331260681, 0.4397572789873396, 0.4354728971208845, 0.43653352771486553, 0.4296284658568246, 0.42828954117638723, 0.4272457020623343, 0.4259512169020517], "val_accuracy": [0.35466668009757996, 0.45899999141693115, 0.5213333368301392, 0.5856666564941406, 0.6683333516120911, 0.6869999766349792, 0.7070000171661377, 0.7129999995231628, 0.7289999723434448, 0.7323333621025085, 0.7363333106040955, 0.7480000257492065, 0.7476666569709778, 0.7596666812896729, 0.7639999985694885, 0.7663333415985107, 0.7766666412353516, 0.7746666669845581, 0.7799999713897705, 0.7789999842643738, 0.7863333225250244, 0.7836666703224182, 0.7856666445732117, 0.7906666398048401, 0.7933333516120911, 0.7906666398048401, 0.7943333387374878, 0.7950000166893005, 0.7979999780654907, 0.8026666641235352, 0.8036666512489319, 0.8073333501815796, 0.8026666641235352, 0.8040000200271606, 0.8016666769981384, 0.8109999895095825, 0.8059999942779541, 0.8153333067893982, 0.8040000200271606, 0.8143333196640015, 0.8100000023841858, 0.8083333373069763, 0.8140000104904175]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [50, 66, 89, 50, 85, 46], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [6, 5, 2, 4, 6, 9, 1, 6, 1, 2, 0, 3, 1, 2, 0, 0, 2, 2, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [0, 5, 1, 0, 0, 3, 3, 0, 2, 3, 2, 3, 0, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [31, 37, 34, 97, 2, 57, 35, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [3, 8, 7, 5, 3, 0, 1, 3, 2, 2, 5], [1, 0, 0, 2, 0, 2, 2, 3, 2], [30, 23, 13, 96, 41]], "fitness": -0.7994285821914673, "mapping_values": [1, 4, 4, 2, 2, 1, 10, 10, 6, 4, 3, 1, 0, 0, 0, 0, 7, 4, 3, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.math.add(tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), grad)), tf.math.pow(alpha, tf.math.divide_no_nan(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.sqrt(tf.math.add(tf.math.square(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.2498235201177468, 1.9143895532917652, 1.3380072082841497, 1.0624756136622018, 0.9411236123795585, 0.8538859671038597, 0.8137098168889056, 0.7719885201627993, 0.7546840039273893, 0.7360489774043172, 0.7120088883174361, 0.7055109016978116, 0.6862320945940281, 0.6643668960476312, 0.6662467145853669, 0.6470278742259535, 0.6375665470451931, 0.6356969484091277, 0.6196930283458398, 0.6103167066311461, 0.6017744789868613, 0.6026366152437119, 0.6016419270350051, 0.5883075853443385, 0.588132199468299, 0.584386767405466, 0.5738638473019986], "accuracy": [0.21542729437351227, 0.4367983043193817, 0.5408796668052673, 0.6221106648445129, 0.6641130447387695, 0.6954167485237122, 0.705058753490448, 0.7224937081336975, 0.7211728692054749, 0.7337207794189453, 0.7407211661338806, 0.7390040755271912, 0.7446836829185486, 0.7556465268135071, 0.7549861073493958, 0.7594769597053528, 0.7658169269561768, 0.767401933670044, 0.7711002230644226, 0.7765156626701355, 0.7795535326004028, 0.7755910754203796, 0.7730814814567566, 0.7861577272415161, 0.7864218950271606, 0.7858935594558716, 0.7906485199928284], "val_loss": [1.8096529415675573, 1.216968093599592, 0.8380950178418841, 0.7140531710215977, 0.6546755858830043, 0.6090771981648037, 0.584645322390965, 0.5621825286320278, 0.5520333903176444, 0.529240574155535, 0.5278345346450806, 0.525594813483102, 0.5075674057006836, 0.5025197608130318, 0.49056833130972727, 0.48607323850904194, 0.4817391974585397, 0.4783688613346645, 0.4709993430546352, 0.4658294405255999, 0.460597676890237, 0.45974416392190115, 0.457985588482448, 0.45333181960242136, 0.4569837280682155, 0.4451207774026053, 0.44703562770571026], "val_accuracy": [0.5006666779518127, 0.6000000238418579, 0.6723333597183228, 0.6943333148956299, 0.7266666889190674, 0.7303333282470703, 0.737333357334137, 0.7476666569709778, 0.7566666603088379, 0.7673333287239075, 0.7680000066757202, 0.7583333253860474, 0.7703333497047424, 0.7803333401679993, 0.7803333401679993, 0.781333327293396, 0.781333327293396, 0.7866666913032532, 0.7889999747276306, 0.7919999957084656, 0.7943333387374878, 0.8033333420753479, 0.7919999957084656, 0.7979999780654907, 0.7943333387374878, 0.7990000247955322, 0.7986666560173035]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [1, 2, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [62, 66, 89, 50, 85, 46], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 2, 4, 2, 9, 1, 6, 5, 3, 0, 2, 8, 2, 0, 0, 2, 2, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [0, 5, 1, 0, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [31, 41, 34, 97, 2, 57, 35, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [8, 7, 5, 2, 5, 0, 1, 3, 2, 2, 6, 4, 7, 3, 2, 9, 1, 0, 2, 5, 1, 3, 8], [1, 0, 0, 2, 0, 3, 3, 1, 1, 3], [18, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 2, 15, 15, 9, 6, 4, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(alpha, grad), tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.square(tf.math.add(tf.math.add(beta, tf.math.pow(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), alpha)), tf.math.subtract(tf.math.divide_no_nan(tf.math.square(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)), tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(alpha)", "other_info": {"loss": [2.304832017338271, 2.3056846735358096, 2.3050737654008664, 2.305841335011448, 2.306087781063176, 2.3054653384886743, 2.305243481136096, 2.3055969389627133, 2.3047888985304956], "accuracy": [0.09179764986038208, 0.09853387624025345, 0.09615638852119446, 0.09576013684272766, 0.09998679161071777, 0.09998679161071777, 0.1018359512090683, 0.09787346422672272, 0.09998679161071777], "val_loss": [1.97374541418893, 1.975116457257952, 1.9766981942313058, 1.9747021538870675, 1.9763432230268205, 1.975475856236049, 1.9766652243477958, 1.9750315802437919, 1.974923883165632], "val_accuracy": [0.0989999994635582, 0.09733333438634872, 0.09866666793823242, 0.10199999809265137, 0.0989999994635582, 0.10000000149011612, 0.0976666659116745, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [62, 66, 89, 50, 85, 46], [0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [1, 3, 2, 1, 6, 9, 8, 1, 5, 0, 0, 2, 8, 4, 0, 0, 2, 2, 8, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [0, 5, 1, 0, 3, 3, 3, 0, 2, 3, 2, 0, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [31, 37, 34, 97, 2, 57, 35, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [6, 7, 7, 9, 3, 0, 1, 0, 2, 2, 2, 4, 7, 3, 2, 9, 0, 0, 2, 2, 1, 3, 8, 6, 7, 6, 2, 6, 5, 4, 3, 1, 0, 4, 2, 1, 4, 5, 4, 7, 0, 0, 6, 4, 6, 0, 7, 2, 9, 6, 1, 3, 8], [1, 0, 0, 2, 0, 2, 2, 3, 1, 0, 1, 1, 3, 3, 1, 1, 1, 0, 3, 1, 1, 2, 2, 0, 1, 3, 3, 0, 2, 1, 0, 0, 1, 0], [16, 23, 91, 96, 41, 43, 90, 73, 10, 13, 21, 46]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 15, 15, 9, 6, 3, 1, 0, 0, 0, 0, 82, 48, 34, 12], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.multiply(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.add(tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, grad), alpha), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.sqrt(tf.math.subtract(tf.math.add(beta, tf.math.square(grad)), grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(alpha, tf.math.add(tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.subtract(tf.math.negative(tf.math.add(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), beta))), tf.math.pow(tf.math.add(tf.math.multiply(beta, sigma), tf.math.add(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.negative(alpha))), tf.math.negative(tf.math.add(tf.math.add(tf.math.subtract(tf.math.multiply(tf.math.sqrt(tf.math.divide_no_nan(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(sigma), tf.math.pow(tf.math.multiply(tf.math.subtract(tf.math.negative(sigma), alpha), tf.math.pow(tf.math.add(alpha, alpha), tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))), sigma)))), alpha))), tf.math.subtract(alpha, tf.math.pow(tf.math.square(beta), tf.math.pow(tf.math.add(tf.math.negative(beta), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.math.negative(alpha))))), sigma), sigma), tf.math.divide_no_nan(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.pow(beta, tf.math.divide_no_nan(tf.math.negative(alpha), tf.math.add(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), alpha)))))))))))), tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 3, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [69, 66, 89, 50, 85, 46], [1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 4, 2, 4, 6, 9, 3, 6, 9, 2, 0, 1, 0, 1, 8, 4, 3, 2, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [2, 5, 1, 0, 3, 3, 3, 0, 2, 1, 2, 3, 1, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [31, 86, 34, 97, 2, 57, 35, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1], [8, 7, 7, 3, 8, 0, 2, 3, 2, 2, 4, 4, 6, 1, 9, 1, 3, 7, 0, 0, 9, 2, 0, 0, 2, 6, 3, 9, 2, 4, 9, 8, 8, 5, 9], [1, 0, 0, 2, 0, 2, 2], [94, 23, 13, 96, 41, 60, 51, 38, 26, 92, 11, 6, 89]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1181798277.4238746, 22510247113.12112, 104655512414.37274, 295799211604.8712, 627892119640.9965, 1139787027086.0833], "accuracy": [0.10236428678035736, 0.10302469879388809, 0.10566636174917221, 0.0956280529499054, 0.09787346422672272, 0.1014397069811821], "val_loss": [4421218742.857142, 35358860434.28571, 119323539163.42857, 282827292672.0, 552382141001.1428, 954499877156.5714], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [62, 66, 89, 50, 85, 46], [1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 0, 2, 0, 6, 9, 1, 6, 1, 2, 0, 3, 1, 2, 0, 0, 2, 2, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [0, 5, 1, 1, 3, 3, 3, 0, 2, 3, 2, 0, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [31, 37, 23, 97, 2, 57, 35, 9, 54, 64], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [3, 7, 7, 5, 3, 0, 1, 0, 2, 2, 2, 4, 7, 3, 2, 9, 0, 0, 2, 2, 1, 3, 8, 6, 7, 6, 2, 6, 5, 4, 3, 1, 0, 4, 2, 1, 4, 5, 4, 7, 0, 0, 6, 4, 6, 0, 7, 2, 9, 6, 1, 3, 8], [0, 0, 0, 2, 0, 2, 2], [16, 23, 91, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 9, 9, 5, 4, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.negative(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(grad, alpha))), alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3027921334832118, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 2, 4, 6, 9, 1, 6, 1, 2, 0, 3, 1, 2, 0, 0, 2, 2, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [0, 5, 1, 0, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [31, 37, 34, 97, 2, 57, 35, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1], [1, 7, 7, 9, 3, 0, 1, 0, 2, 2, 2, 4, 7, 3, 2, 9, 0, 0, 2, 2, 1, 3, 8, 6, 7, 6, 2, 6, 5, 4, 3, 1, 0, 4, 2, 1, 4, 5, 4, 7, 0, 0, 6, 4, 6, 0, 7, 2, 9, 6, 1, 3, 8], [0, 1, 0, 2, 0, 2, 2, 0, 2, 2], [16, 23, 95, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 23, 13, 10, 5], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.math.negative(tf.math.subtract(tf.math.negative(tf.math.add(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), beta))), tf.math.pow(tf.math.add(beta, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), beta))))), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 4, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 3, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [50, 32, 89, 50, 85, 46], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 2, 4, 6, 9, 3, 6, 9, 2, 0, 1, 0, 1, 8, 4, 3, 2, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [0, 5, 1, 0, 3, 3, 3, 0, 2, 3, 2, 0, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [31, 37, 65, 97, 2, 57, 35, 9, 54, 64], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [75, 2, 82], [0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1], [3, 7, 7, 5, 3, 0, 1, 0, 2, 2, 2, 4, 7, 3, 2, 9, 0, 0, 2, 2, 1, 3, 8, 6, 7, 6, 2, 6, 5, 4, 3, 1, 0, 4, 2, 1, 4, 5, 4, 7, 0, 0, 6, 4, 6, 0, 7, 2, 9, 6, 1, 3, 8], [1, 2, 0, 2, 0, 2, 2, 1, 2, 0, 2, 1, 0], [16, 23, 74, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 2, 10, 10, 5, 5, 2, 1, 1, 1, 0, 1, 32, 19, 13, 5], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), grad))), tf.math.add(alpha, tf.math.sqrt(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.square(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.divide_no_nan(grad, alpha), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.square(beta), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.negative(tf.math.subtract(tf.math.negative(beta), tf.math.add(tf.math.add(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), beta), beta))), tf.math.add(alpha, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.negative(beta)))), tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [20, 66, 89, 50, 85, 46], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 8, 4, 3, 2, 9, 1, 6, 0, 2, 0, 0, 2, 2, 0, 0, 8, 9, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [0, 3, 1, 0, 3, 2, 3, 0, 0, 2, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [65, 37, 34, 97, 2, 57, 35, 9, 54, 64], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [8, 7, 7, 9, 3, 0, 1, 3, 2, 2, 5], [1, 3, 0, 2, 0, 2, 2], [52, 23, 13, 96, 41, 9, 59, 28, 4, 60, 72, 74, 2]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 33, 33, 23, 10, 7, 1, 1, 1, 0, 1, 2, 1, 1, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(grad, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha))), tf.math.subtract(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.add(beta, beta))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.negative(grad)), tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta))))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [41, 66, 89, 50, 85, 46], [0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 7, 5, 5, 6, 1, 1, 6, 1, 2, 0, 3, 1, 2, 0, 0, 2, 2, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [3, 5, 1, 0, 3, 3, 3, 0, 2, 3, 2, 0, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [31, 67, 91, 72, 2, 36, 35, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [3, 7, 7, 9, 3, 0, 1, 0, 2, 2, 2, 4, 7, 3, 2, 9, 0, 0, 2, 2, 1, 3, 8, 6, 7, 6, 2, 6, 5, 4, 3, 1, 0, 4, 2, 1, 4, 5, 4, 7, 0, 0, 6, 4, 6, 0, 7, 2, 9, 6, 1, 3, 8], [1, 2, 0, 2, 0, 2, 2], [25, 34, 39, 96, 41, 89, 58, 81, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 9, 9, 5, 4, 1, 1, 0, 0, 0, 0, 7, 4, 3, 2], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(grad, tf.math.square(tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), alpha))))), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.add(beta, tf.math.add(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 4, 0, 8, 8, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 0, 0, 1, 1, 2, 1, 2, 0, 2, 3, 3, 0], [62, 66, 89, 50, 85, 46], [0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 2, 5, 2, 9, 1, 6, 5, 1, 0, 2, 6, 2, 0, 1, 2, 2, 2, 8, 5, 3, 9, 2, 1, 2, 2, 4, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [0, 0, 3, 0, 0, 3, 3, 2, 2, 1, 2, 3, 3, 3, 3, 2, 4, 3, 2, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [56, 37, 66, 32, 2, 64, 35, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [7, 5, 1, 9, 3, 0, 1, 3, 2, 2, 5, 7, 9, 2, 8, 4, 5, 4, 6, 3, 2, 8, 2, 0, 4, 9], [1, 0, 0, 2, 0, 2, 2, 2, 1, 0, 1, 3, 3, 1, 3, 0, 2, 2], [16, 23, 19, 96, 41, 80, 90]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 8, 5, 3, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)))))), tf.math.pow(tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.subtract(alpha, tf.math.add(alpha, alpha))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [62, 66, 89, 50, 85, 46], [0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [1, 3, 2, 1, 6, 9, 2, 1, 3, 0, 0, 2, 8, 4, 0, 0, 2, 2, 8, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [0, 5, 1, 0, 0, 3, 3, 3, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [31, 4, 91, 72, 2, 36, 35, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [8, 7, 7, 9, 3, 0, 1, 3, 2, 2, 5], [1, 0, 0, 2, 0, 2, 2, 0, 2, 3, 3, 3, 3, 0, 0, 3], [30, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 1, 17, 17, 9, 8, 4, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))))), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.multiply(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.divide_no_nan(grad, alpha), tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.multiply(tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), tf.math.add(beta, grad)), grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [40, 66, 89, 50, 85, 46], [0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [1, 3, 2, 8, 6, 9, 8, 1, 5, 0, 0, 2, 8, 4, 0, 0, 2, 2, 8, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [0, 5, 1, 0, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [31, 4, 91, 72, 2, 36, 35, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [3, 7, 6, 9, 3, 4, 1, 3, 2, 2, 5, 0, 2, 3, 1, 0, 4, 7, 5, 6, 3, 7, 4, 7, 9, 0, 9], [1, 0, 0, 2, 0, 2, 2, 0, 2, 3, 3, 3, 3, 0, 0, 3], [79, 34, 39, 96, 41, 89, 58, 81, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 1, 10, 10, 6, 4, 3, 1, 0, 0, 0, 0, 7, 4, 3, 3], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.negative(grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.multiply(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(beta, grad), alpha)), tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.add(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [12624217501.985666, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0602298229932785, 0.10157178342342377, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [7.703325061246709e+33, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09733333438634872, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 4, 0, 8, 0, 4, 0, 1, 5, 0, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [62, 66, 89, 50, 85, 46], [0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 4, 2, 4, 2, 9, 1, 6, 5, 2, 0, 2, 6, 2, 0, 0, 8, 2, 2, 6, 5, 3, 9, 2, 6, 2, 2, 3, 9, 0, 6, 3, 4, 9, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [0, 3, 3, 0, 0, 1, 3, 0, 1, 1, 0, 3, 1, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [31, 67, 34, 97, 7, 47, 35, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1], [7, 5, 1, 9, 3, 0, 1, 3, 2, 2, 5, 7, 9, 2, 8, 4, 5, 4, 6, 3, 2, 8, 2, 0, 4, 9], [1, 0, 0, 2, 0, 2, 2], [30, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 8, 5, 2, 37, 37, 23, 14, 7, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.add(alpha, tf.math.negative(grad))))), tf.math.pow(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.subtract(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.pow(tf.math.add(tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), grad), tf.math.add(beta, tf.math.pow(grad, tf.math.add(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.subtract(tf.math.divide_no_nan(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.negative(grad), tf.math.negative(tf.math.add(beta, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.add(beta, tf.math.add(alpha, alpha))))), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, alpha))))), tf.math.multiply(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.square(alpha), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 5, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [6, 5, 2, 4, 2, 9, 1, 6, 5, 3, 9, 2, 8, 2, 0, 0, 2, 2, 2, 3, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [0, 0, 3, 0, 0, 3, 3, 0, 2, 1, 0, 3, 1, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [31, 4, 34, 97, 2, 36, 35, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [2, 7, 7, 9, 3, 0, 2, 1, 2, 2, 4, 2, 6, 9, 4, 0, 9, 1, 2, 7, 6, 8, 7], [3, 1, 0, 2, 0, 2, 2, 1, 1, 3, 2], [30, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.add(sigma, alpha), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.302792268296306, 2.3025846887557515, 2.3025846800012455, 2.3025863036471996, 2.3025847380392115, 2.3025852735756476, 2.3025852507446514, 2.302585508183812], "accuracy": [0.09945846349000931, 0.1022322028875351, 0.10381719470024109, 0.10011887550354004, 0.1026284471154213, 0.10011887550354004, 0.10011887550354004, 0.10157178342342377], "val_loss": [1.973644801548549, 1.973644529070173, 1.973644188472203, 1.9736446653093611, 1.973644733428955, 1.9736446653093611, 1.973644801548549, 1.9736452783857072], "val_accuracy": [0.0976666659116745, 0.10133333504199982, 0.10199999809265137, 0.10000000149011612, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.09866666793823242]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 1, 3, 5, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 6, 5, 4, 2, 9, 1, 6, 4, 2, 4, 2, 8, 2, 0, 4, 2, 2, 2, 6, 5, 2, 9, 3, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [0, 5, 1, 0, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [31, 4, 91, 72, 2, 36, 35, 9, 54, 64], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [3, 7, 6, 9, 3, 4, 1, 3, 2, 2, 5, 0, 2, 3, 1, 0, 4, 7, 5, 6, 3, 7, 4, 7, 9, 0, 9], [0, 0, 0, 2, 1, 2, 2, 1, 1, 1, 2], [54, 51, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 18, 10, 8, 2, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), grad), tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(alpha, alpha), tf.math.pow(tf.math.negative(tf.math.subtract(tf.math.add(alpha, alpha), grad)), tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))))))), lambda shape,  alpha, beta, grad: tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302792416902471, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [62, 66, 89, 50, 85, 46], [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 6, 5, 2, 2, 9, 2, 6, 4, 2, 4, 2, 8, 2, 0, 6, 2, 2, 2, 6, 5, 2, 9, 1, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [0, 5, 1, 0, 3, 3, 3, 0, 2, 3, 2, 3, 3, 1, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [31, 37, 34, 97, 10, 75, 35, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [3, 7, 7, 2, 3, 0, 1, 3, 2, 2, 2, 9, 6], [1, 2, 2, 2, 0, 2, 1, 1, 1, 0, 2], [30, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 10, 10, 6, 4, 3, 1, 0, 0, 0, 0, 24, 13, 11, 3], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.divide_no_nan(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.square(grad))), tf.math.add(alpha, tf.math.add(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.add(tf.math.add(tf.math.add(beta, beta), tf.math.multiply(tf.math.negative(tf.math.subtract(tf.math.multiply(beta, tf.math.add(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha))), tf.math.add(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(alpha, alpha)))), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [40, 66, 89, 50, 85, 46], [0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 2, 8, 6, 9, 1, 6, 1, 2, 0, 3, 1, 2, 0, 0, 2, 2, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [0, 5, 1, 0, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [31, 56, 34, 97, 2, 57, 35, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [3, 7, 6, 9, 3, 4, 1, 3, 2, 2, 5, 0, 2, 3, 1, 0, 4, 7, 5, 6, 3, 7, 4, 7, 9, 0, 9], [1, 0, 3, 2, 0, 2, 2, 0, 2, 3, 3, 3, 3, 0, 0, 3], [16, 86, 91, 96, 41]], "fitness": -0.040571428835392, "mapping_values": [1, 4, 4, 2, 2, 1, 9, 9, 5, 4, 2, 1, 0, 0, 0, 0, 7, 4, 3, 2], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.square(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(beta, grad), alpha))), tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), sigma))", "other_info": {"loss": [2.3036172548384006, 2.3019842205896603, 2.303105341019868, 2.303539266140391, 2.3017105680525405, 2.301845879177486], "accuracy": [0.09166556596755981, 0.09034473448991776, 0.09668471664190292, 0.09047681838274002, 0.09166556596755981, 0.09166556596755981], "val_loss": [1.971440383366176, 1.971440383366176, 1.971440383366176, 1.971440383366176, 1.971440383366176, 1.971440383366176], "val_accuracy": [0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [2, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [62, 66, 89, 50, 85, 46], [0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 2, 4, 2, 9, 1, 6, 1, 2, 0, 2, 3, 2, 3, 0, 2, 2, 2, 6, 5, 3, 9, 8, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [0, 5, 1, 0, 0, 3, 3, 3, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [31, 37, 32, 97, 2, 57, 35, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [8, 7, 7, 9, 3, 0, 1, 3, 2, 2, 5], [3, 0, 0, 2, 0, 2, 2], [16, 23, 91, 96, 41]], "fitness": -0.040571428835392, "mapping_values": [1, 4, 4, 2, 2, 1, 10, 10, 5, 5, 3, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.square(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(grad, tf.math.pow(alpha, tf.math.add(beta, tf.math.add(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(sigma)", "other_info": {"loss": [2.3036172548384006, 2.3019842205896603, 2.303105341019868, 2.303539266140391, 2.3017105680525405, 2.301845879177486], "accuracy": [0.09166556596755981, 0.09034473448991776, 0.09668471664190292, 0.09047681838274002, 0.09166556596755981, 0.09166556596755981], "val_loss": [1.971440383366176, 1.971440383366176, 1.971440383366176, 1.971440383366176, 1.971440383366176, 1.971440383366176], "val_accuracy": [0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161]}}]