[{"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [5, 2, 2, 2, 8, 0, 8, 5, 2, 2, 9, 2, 2, 8, 9, 0, 2, 2, 2, 3, 6, 3, 3, 5, 1, 2, 0, 3, 5, 4, 8, 6, 0, 8, 6, 3, 7, 1, 0, 6, 6, 3, 6, 0], [3, 3, 3, 1, 0, 3, 3, 3, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [25, 9, 52, 66, 2, 57, 35, 9, 54, 64], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [6, 3, 3, 4, 8], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8462857007980347, "mapping_values": [1, 4, 4, 2, 2, 1, 48, 48, 31, 17, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.sqrt(grad)))), tf.math.square(tf.math.add(beta, tf.math.add(grad, tf.math.add(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(grad, tf.math.sqrt(tf.math.add(beta, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))))), tf.math.add(beta, alpha))))))))), tf.math.add(beta, tf.math.negative(tf.math.add(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.negative(tf.math.multiply(grad, tf.math.square(grad)))))))))))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), beta))))))), tf.math.sqrt(grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9565936841701457, 1.1825360831819458, 0.8750131748623584, 0.8501246100986135, 0.7415813848468779, 0.6993964850831702, 0.6749722473593971, 0.6524954794609252, 0.6445315262235591, 0.6290545610861299, 0.5865218348003035, 0.5813189771008167, 0.5798001269843238, 0.5656874276281364, 0.5462593669117308, 0.521370869066422, 0.5248782487199637, 0.5109466589153749, 0.5081715660875562, 0.48515107068859936, 0.4697898138807025, 0.4688789941347853, 0.45883705679451736, 0.46056207805466515, 0.46038949530138207, 0.43660408217499774, 0.4260288716984337, 0.4175658166455775, 0.4223830177090849, 0.40456599513175323, 0.40599461875854936, 0.41060896061745616, 0.3834391922258572, 0.370116458502365, 0.38176548441623764, 0.3615556935931178, 0.3661440693864481, 0.3537346164682018, 0.35406425727939467, 0.3460822196180605, 0.34065099803526894, 0.3482516459651265, 0.33280571917690194, 0.32548572535779985, 0.33399686978997306, 0.32614590422651474, 0.31702108627864006], "accuracy": [0.33218860626220703, 0.570202112197876, 0.6785101294517517, 0.6868313550949097, 0.7165499925613403, 0.739400327205658, 0.7446836829185486, 0.7519482374191284, 0.7576277852058411, 0.7614582180976868, 0.7784969210624695, 0.7849689722061157, 0.7802139520645142, 0.7878747582435608, 0.8010830879211426, 0.8112534880638123, 0.8035926818847656, 0.8133667707443237, 0.8082155585289001, 0.8228767514228821, 0.8278959393501282, 0.8219521641731262, 0.8342359066009521, 0.8280280232429504, 0.8257825970649719, 0.8364813327789307, 0.8425571322441101, 0.8475762605667114, 0.841500461101532, 0.8485008478164673, 0.8582749962806702, 0.8516708612442017, 0.8594637513160706, 0.8642187118530273, 0.8601241707801819, 0.8650112152099609, 0.86118084192276, 0.8659358024597168, 0.8659358024597168, 0.8697662353515625, 0.874389111995697, 0.8702945709228516, 0.8765024542808533, 0.8812574148178101, 0.8784837126731873, 0.876370370388031, 0.8845595121383667], "val_loss": [1.2196376323699951, 0.7001393352236066, 0.7044004712785993, 0.5846125738961356, 0.5627822875976562, 0.543164849281311, 0.5452299288340977, 0.502924885068621, 0.5003313507352557, 0.5141421386173793, 0.4783233233860561, 0.4548851932798113, 0.46152799470084055, 0.45641567025865826, 0.4319031834602356, 0.4487854412623814, 0.4099606956754412, 0.416230389050075, 0.40498651776994976, 0.4188165409224374, 0.3910943269729614, 0.3833937134061541, 0.37481701374053955, 0.4601278305053711, 0.3790357027735029, 0.3911223752158029, 0.3688493285860334, 0.36746242216655184, 0.3566468358039856, 0.3810788222721645, 0.3842476095472063, 0.3658535054751805, 0.3495368616921561, 0.3730811391557966, 0.3583721007619585, 0.34599817650658743, 0.34968332733426777, 0.3346420185906546, 0.34872448444366455, 0.3635812146323068, 0.3350546360015869, 0.3205515912600926, 0.32451781204768587, 0.32205384969711304, 0.3328577535493033, 0.3320981775011335, 0.31594300270080566], "val_accuracy": [0.5093333125114441, 0.6953333616256714, 0.6973333358764648, 0.7436666488647461, 0.7509999871253967, 0.7636666893959045, 0.7403333187103271, 0.7763333320617676, 0.7703333497047424, 0.7633333206176758, 0.7923333048820496, 0.8040000200271606, 0.8003333210945129, 0.8019999861717224, 0.8140000104904175, 0.8013333082199097, 0.8256666660308838, 0.8266666531562805, 0.8289999961853027, 0.8096666932106018, 0.8376666903495789, 0.8389999866485596, 0.8426666855812073, 0.7933333516120911, 0.8379999995231628, 0.8270000219345093, 0.8413333296775818, 0.8433333039283752, 0.8503333330154419, 0.8383333086967468, 0.8289999961853027, 0.8453333377838135, 0.8556666374206543, 0.8376666903495789, 0.8516666889190674, 0.8579999804496765, 0.8579999804496765, 0.862666666507721, 0.8516666889190674, 0.8523333072662354, 0.8636666536331177, 0.8709999918937683, 0.8676666617393494, 0.8640000224113464, 0.862666666507721, 0.8603333234786987, 0.8709999918937683]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [5, 3, 2, 2, 8, 3, 8, 5, 5, 2, 9, 4, 2, 8, 9, 8, 2, 2, 2, 2, 6, 0, 3, 5, 1, 2, 0, 3, 5, 0, 8, 6, 0, 8, 6, 3, 7, 1, 0, 6, 6, 3, 6, 0], [2, 3, 3, 1, 0, 3, 3, 3, 2, 3, 2, 3, 3, 3, 1, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [25, 9, 92, 66, 2, 57, 35, 9, 54, 64], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1], [1, 0, 0, 1, 1, 1, 0], [6, 7, 3, 4, 8], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8325714468955994, "mapping_values": [1, 4, 4, 2, 2, 1, 22, 22, 16, 6, 3, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.sqrt(beta), tf.math.square(tf.math.add(beta, tf.math.square(grad)))))), tf.math.add(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.pow(grad, alpha)))), tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9565391966915875, 1.183942702373635, 0.8841558770260491, 0.8272991448408576, 0.7451886494461067, 0.6884289107160829, 0.6828706898646443, 0.6519373855365974, 0.6255583762414011, 0.6381221417233834, 0.605312917423349, 0.5746738391781622, 0.5795813069493464, 0.5602933965134284, 0.5409250158943032, 0.5237058254989414, 0.5224210670548282, 0.5039535234388879, 0.5123955364460958, 0.4882872303038257, 0.46793573319305753, 0.46857836430791727, 0.45700368655986, 0.4593570346467609, 0.46090427599625894, 0.42750784526836794, 0.4292757780859578, 0.4191111837671323], "accuracy": [0.33205652236938477, 0.5688812732696533, 0.6708492636680603, 0.6913221478462219, 0.7145687341690063, 0.7436270117759705, 0.7375511527061462, 0.7576277852058411, 0.7619865536689758, 0.7555144429206848, 0.7676661014556885, 0.7923656105995178, 0.7821952104568481, 0.7886672616004944, 0.8035926818847656, 0.8123101592063904, 0.8020076751708984, 0.8144234418869019, 0.8096684813499451, 0.8189142942428589, 0.828292191028595, 0.8235371708869934, 0.8343679904937744, 0.8318583965301514, 0.8286884427070618, 0.8451988101005554, 0.8424250483512878, 0.8495575189590454], "val_loss": [1.218254600252424, 0.6958966766084943, 0.6341316189084735, 0.5939298527581351, 0.5527748891285488, 0.5522243806294033, 0.547058241707938, 0.48893184321267263, 0.5151365314211164, 0.5410546234675816, 0.4863101414271763, 0.45284630571092876, 0.47357303755623953, 0.44348108768463135, 0.43692164761679514, 0.4483158758708409, 0.41248251710619244, 0.41709879466465544, 0.4057064482143947, 0.4103673441069467, 0.39324051993233816, 0.38652700185775757, 0.37593006236212595, 0.46520439216068815, 0.37784632614680697, 0.398352997643607, 0.3720126066889082, 0.37311444112232756], "val_accuracy": [0.5116666555404663, 0.6953333616256714, 0.7266666889190674, 0.731333315372467, 0.7606666684150696, 0.753333330154419, 0.7386666536331177, 0.7863333225250244, 0.7580000162124634, 0.7429999709129333, 0.793666660785675, 0.79666668176651, 0.7853333353996277, 0.8166666626930237, 0.8109999895095825, 0.8043333292007446, 0.8243333101272583, 0.8259999752044678, 0.8256666660308838, 0.8173333406448364, 0.8363333344459534, 0.8383333086967468, 0.8413333296775818, 0.7893333435058594, 0.8379999995231628, 0.824999988079071, 0.8393333554267883, 0.8383333086967468]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [1, 2, 1, 2, 6, 2, 2, 1, 2, 2, 6, 6, 8, 2, 0, 0, 2, 2, 2, 6, 1, 3, 9, 4, 1, 2, 0, 3, 9, 0, 8, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [0, 3, 0, 1, 0, 3, 0, 3, 3, 3, 2, 3, 2, 3, 3, 3, 4, 3, 2, 1, 3, 0, 0, 1, 5, 2, 3, 0, 4, 2, 1, 4, 4], [25, 9, 52, 66, 2, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4, 8], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8320000171661377, "mapping_values": [1, 4, 4, 2, 2, 1, 59, 59, 36, 23, 8, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), grad), tf.math.subtract(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, grad))), tf.math.add(tf.math.negative(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(beta, grad))))), tf.math.add(grad, tf.math.add(beta, grad))))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, grad), beta), tf.math.add(beta, tf.math.multiply(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), grad))), grad)))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, grad))), grad)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.multiply(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), beta))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha))))))), tf.math.add(beta, tf.math.sqrt(tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.negative(tf.math.sqrt(tf.math.add(beta, grad))))), tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.math.negative(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9565937899170205, 1.1827054795194154, 0.8662162558230364, 0.7651289492203905, 0.8296168652649616, 0.7083676984486185, 0.6723335809428002, 0.6529509385799483, 0.6385712651229569, 0.6308382695078015, 0.6077722347628218, 0.5730580036760778, 0.5850197019326357, 0.5582074941645335, 0.5354155495481374, 0.5237606255574516, 0.5227041691994355, 0.506625140757215, 0.5066698941462044, 0.4877893579020366, 0.4690538983358573, 0.46668536122433185, 0.4597937019391539, 0.4583334849573885, 0.4603226890755745, 0.4301651295472791, 0.4286886070107173, 0.41893237485562523, 0.41698539232250376, 0.40032146600857543, 0.40619901093855953, 0.4106282902911764, 0.38421940081989636, 0.37207203745653034, 0.37190485846931753, 0.3658410047952604, 0.3629340261020177, 0.3529569522272626, 0.34847963619950173, 0.3470978233296527, 0.34298859613997634, 0.3435566838918786, 0.33762384025868863, 0.32772352588867953, 0.33248917586641885, 0.32812553458383226, 0.31496495391478263, 0.30990729865664424, 0.30948689750408875, 0.3149636049178361, 0.31428426678910343, 0.3086725789377041, 0.2865999899563489, 0.2890769896482385, 0.2806446406866786, 0.29384367946368545], "accuracy": [0.33218860626220703, 0.5698058605194092, 0.6836613416671753, 0.7119271159172058, 0.6828688383102417, 0.7386078238487244, 0.7454761862754822, 0.7568352818489075, 0.7593448758125305, 0.7611940503120422, 0.7688548564910889, 0.7890635132789612, 0.7800818681716919, 0.7923656105995178, 0.8067626357078552, 0.8088759779930115, 0.8006868362426758, 0.8162726163864136, 0.8083476424217224, 0.8202351331710815, 0.8269713521003723, 0.8235371708869934, 0.830669641494751, 0.8308017253875732, 0.8281601071357727, 0.8430854678153992, 0.8408400416374207, 0.8477083444595337, 0.8496896028518677, 0.847840428352356, 0.8562937378883362, 0.8507462739944458, 0.8614450097084045, 0.8615770936012268, 0.8615770936012268, 0.863029956817627, 0.8622375130653381, 0.8640866279602051, 0.8679170608520508, 0.8691058158874512, 0.8728041052818298, 0.8746532797813416, 0.8762382864952087, 0.8802007436752319, 0.8784837126731873, 0.8782195448875427, 0.8849557638168335, 0.8862766027450562, 0.8854840993881226, 0.882710337638855, 0.8820499181747437, 0.8860124349594116, 0.8897107243537903, 0.8910315632820129, 0.8975036144256592, 0.8874653577804565], "val_loss": [1.219846146447318, 0.7062007188796997, 0.5865863731929234, 0.6217195476804461, 0.5515805993761335, 0.5485134295054844, 0.5227351529257638, 0.5060895681381226, 0.48872717789241243, 0.5638761009488787, 0.4804273673466274, 0.45461727891649517, 0.4610911096845354, 0.44250028473990305, 0.44141299383980886, 0.4537419080734253, 0.41500329971313477, 0.4166973573820932, 0.40345570019313265, 0.4156275476728167, 0.3870614085878645, 0.3911682537623814, 0.37189572198050364, 0.47585977826799664, 0.38323311294828144, 0.3885429160935538, 0.37713561739240375, 0.36313224690301077, 0.3563587324959891, 0.38360990796770367, 0.37289656911577496, 0.3594929575920105, 0.3472918357167925, 0.36143343789236887, 0.36112944568906513, 0.3454997369221279, 0.35151991673878263, 0.3358971987451826, 0.3497763957296099, 0.35772344895771574, 0.3339252301624843, 0.32360895190920147, 0.319844765322549, 0.3276611566543579, 0.33181979826518465, 0.32795136315482004, 0.3140994054930551, 0.31449663639068604, 0.35376535994665964, 0.35172722169331144, 0.3172003711972918, 0.3160846659115383, 0.3219209739140102, 0.32307928800582886, 0.32271733454295565, 0.33658528327941895], "val_accuracy": [0.5090000033378601, 0.6973333358764648, 0.7476666569709778, 0.7126666903495789, 0.7663333415985107, 0.7576666474342346, 0.7573333382606506, 0.7749999761581421, 0.7749999761581421, 0.7236666679382324, 0.7916666865348816, 0.7960000038146973, 0.7956666946411133, 0.8209999799728394, 0.8056666851043701, 0.7963333129882812, 0.8203333616256714, 0.8246666789054871, 0.8299999833106995, 0.8163333535194397, 0.8370000123977661, 0.8376666903495789, 0.843666672706604, 0.7863333225250244, 0.8346666693687439, 0.8270000219345093, 0.8383333086967468, 0.8483333587646484, 0.8543333411216736, 0.8339999914169312, 0.8346666693687439, 0.8496666550636292, 0.8573333621025085, 0.8413333296775818, 0.8456666469573975, 0.8579999804496765, 0.862333357334137, 0.8606666922569275, 0.8543333411216736, 0.856333315372467, 0.8643333315849304, 0.8673333525657654, 0.8693333268165588, 0.8603333234786987, 0.8643333315849304, 0.8653333187103271, 0.8733333349227905, 0.8706666827201843, 0.8476666808128357, 0.8523333072662354, 0.8759999871253967, 0.8713333606719971, 0.8696666955947876, 0.874666690826416, 0.8633333444595337, 0.8603333234786987]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0], [2, 7, 6, 2, 6, 2, 0, 3, 2, 8, 6, 3, 4, 4, 4, 0, 2, 2, 9, 6, 1, 3, 6, 0, 8, 5, 6, 3, 2, 4, 8, 3, 9, 1, 8, 5, 1, 6, 4, 0, 0, 8, 6, 0, 8, 4, 3, 7, 2, 5, 9, 2, 2, 9, 7, 2, 9], [3, 3, 2, 1, 3, 3, 0, 3, 3, 3, 1, 0, 3, 3, 3, 3, 4, 3, 1, 0, 4, 1, 1, 1, 3, 3, 1, 3, 5, 3, 2, 0, 3, 2, 0, 5, 3, 3, 2, 3, 5], [74, 9, 7, 66, 40, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [4, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8108571171760559, "mapping_values": [1, 4, 4, 2, 2, 1, 43, 43, 24, 19, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(grad, tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), tf.math.add(tf.math.add(beta, alpha), grad))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.pow(tf.math.negative(tf.math.add(beta, grad)), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32))))), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.subtract(grad, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad))))))), tf.math.divide_no_nan(tf.math.negative(grad), grad)))), alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9947577070928504, 1.2562534856664003, 1.049138867166993, 0.8295795639996295, 0.8160165469439558, 0.7493531648918402, 0.7144978943281737, 0.694774414097644, 0.6863888418118652, 0.673811565458247, 0.6225965744106604, 0.628747843842638, 0.6138200240364448, 0.6003097840083541, 0.5830014246865161, 0.5705512014708861, 0.568825019010542, 0.5429820762554795, 0.5355696860967043, 0.5423742349452315, 0.5132037808614526, 0.5250613453830348, 0.5048078985702974, 0.4889482291595669, 0.5117910628376415, 0.4770799929069695, 0.46805404714542276, 0.47081836997053456, 0.47102126477574313, 0.4413961084086456, 0.4544171080408536, 0.4593146608616178, 0.42823924967216354, 0.42493368923986874], "accuracy": [0.3206973969936371, 0.5641262531280518, 0.6090344786643982, 0.6939638257026672, 0.687887966632843, 0.7181349992752075, 0.7317395210266113, 0.7390040755271912, 0.7367587089538574, 0.746268630027771, 0.759609043598175, 0.7700436115264893, 0.7646281719207764, 0.7708360552787781, 0.7804781198501587, 0.7874785661697388, 0.7825914621353149, 0.8029322624206543, 0.7969884872436523, 0.798309326171875, 0.8072909712791443, 0.7954035401344299, 0.8129705190658569, 0.8185180425643921, 0.8058380484580994, 0.8214238286018372, 0.8274996876716614, 0.8267071843147278, 0.8269713521003723, 0.8330471515655518, 0.8345000743865967, 0.8314621448516846, 0.8475762605667114, 0.8425571322441101], "val_loss": [1.160395281655448, 0.896458659853254, 0.6655981710978917, 0.616798894745963, 0.6067565679550171, 0.5970456940787179, 0.5692914043154035, 0.5409495830535889, 0.5547455549240112, 0.5037499836512974, 0.519591110093253, 0.5197162287575858, 0.5400833061763218, 0.47067318643842426, 0.5141084023884365, 0.44980357374463764, 0.4335906505584717, 0.43809727260044645, 0.4555995634623936, 0.4371274198804583, 0.4458132641656058, 0.41180264949798584, 0.39858548981802805, 0.4838689735957554, 0.4111011454037258, 0.4074174846921648, 0.3964519330433437, 0.3807254263332912, 0.37711587122508455, 0.40532199825559345, 0.4317675999232701, 0.41415499789374216, 0.3776893786021641, 0.41619238683155607], "val_accuracy": [0.5406666398048401, 0.6206666827201843, 0.6940000057220459, 0.7070000171661377, 0.7509999871253967, 0.7323333621025085, 0.7379999756813049, 0.7596666812896729, 0.7323333621025085, 0.7893333435058594, 0.7796666622161865, 0.7649999856948853, 0.7473333477973938, 0.7979999780654907, 0.7710000276565552, 0.8053333163261414, 0.8140000104904175, 0.8136666417121887, 0.793666660785675, 0.8013333082199097, 0.8013333082199097, 0.8253333568572998, 0.8326666951179504, 0.7806666493415833, 0.8206666707992554, 0.8216666579246521, 0.8293333053588867, 0.8336666822433472, 0.843999981880188, 0.8259999752044678, 0.8036666512489319, 0.8199999928474426, 0.8429999947547913, 0.8153333067893982]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [25, 66, 89, 50, 85, 46], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [5, 2, 2, 2, 8, 0, 8, 5, 2, 2, 9, 9, 2, 8, 9, 0, 2, 2, 2, 3, 6, 3, 3, 5, 1, 2, 5, 3, 5, 4, 8, 6, 0, 8, 6, 3, 7, 1, 0, 6, 6, 3, 6, 0], [3, 2, 3, 1, 0, 3, 3, 3, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [78, 9, 52, 66, 2, 57, 35, 9, 54, 64], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 0, 1, 1, 0, 0, 1, 0], [6, 3, 3, 4, 8], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.7485714554786682, "mapping_values": [1, 4, 4, 2, 2, 1, 16, 16, 12, 4, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.negative(tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.sqrt(tf.math.negative(tf.math.add(beta, beta))), tf.math.sqrt(tf.math.square(grad))), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))), tf.math.add(beta, alpha)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2954647676142654, 2.281624130899754, 2.2665195558931157, 2.251222504915704, 2.232486168564492, 2.2111016751406387, 2.189719522413466, 2.1580818141881326, 2.127481624639549, 2.080897784047296, 2.0362966792489936, 1.9805888190103826, 1.9169526315399874, 1.849513625188542, 1.7823266924931278, 1.7074814733812098, 1.6391276888260988, 1.5641614955099203, 1.5068212187190995, 1.4509207471297827, 1.3862306790470904, 1.3489858548024924, 1.2972280193455326, 1.272771893412351, 1.2425569867917716, 1.1998549486116694, 1.1760196297034264, 1.1428212327035097, 1.1300029633240756, 1.1182299729713658, 1.0793618307987838, 1.068909413873433, 1.0379664349502435, 1.0395822764671143, 1.0329978439738927, 1.0008266514727877, 0.9897138188386306, 0.9823631571819597, 0.9742519989099957, 0.958231139964022, 0.9585201946688586, 0.9434581823462996, 0.9278569107892696, 0.9108776175634122, 0.9167232680960008, 0.9082603538749618, 0.8860353078462381, 0.8901934883755432, 0.8779743181999412, 0.8690837522807012, 0.8711992233830231, 0.8592997352208727, 0.855358323707966, 0.8544851070570829, 0.8446938681045086, 0.8459468223887695, 0.8373894689735278, 0.8275088764783209, 0.8278926770763626, 0.815310982200747, 0.8228057907194809, 0.809712172672497, 0.7991082812533356], "accuracy": [0.10645885765552521, 0.14912164211273193, 0.18821820616722107, 0.2234843522310257, 0.2569013237953186, 0.29097872972488403, 0.30947035551071167, 0.33826443552970886, 0.3537181317806244, 0.3870030343532562, 0.402588814496994, 0.4157971143722534, 0.4344208240509033, 0.44366663694381714, 0.4600449204444885, 0.48210275173187256, 0.4861973226070404, 0.505349338054657, 0.518161416053772, 0.5255580544471741, 0.5464271306991577, 0.5473517179489136, 0.561880886554718, 0.5692775249481201, 0.5785233378410339, 0.5876370072364807, 0.59225994348526, 0.5913353562355042, 0.6078457236289978, 0.6070532202720642, 0.6168273687362671, 0.6189407110214233, 0.6362435817718506, 0.6305639743804932, 0.6342623233795166, 0.6501122713088989, 0.6493197679519653, 0.6501122713088989, 0.6501122713088989, 0.6592260003089905, 0.6602826714515686, 0.6609430909156799, 0.667811393737793, 0.6728305220603943, 0.6704530715942383, 0.6762647032737732, 0.6839255094528198, 0.678642213344574, 0.6767930388450623, 0.6856426000595093, 0.6866992712020874, 0.6892088055610657, 0.6926429867744446, 0.6922467350959778, 0.6905296444892883, 0.6934354901313782, 0.7018887996673584, 0.7020208835601807, 0.6985867023468018, 0.703209638595581, 0.6972658634185791, 0.7046625018119812, 0.7014925479888916], "val_loss": [1.9574692589896066, 1.943953173501151, 1.9298220361982072, 1.9140914508274622, 1.8961732728140694, 1.8750605583190918, 1.8500902312142509, 1.8199766704014368, 1.7846309116908483, 1.7419868877955846, 1.6927539961678642, 1.6364731107439314, 1.5729172910962785, 1.504446029663086, 1.4329987934657507, 1.3601015295301164, 1.2894150870186942, 1.2210797922951835, 1.1589467525482178, 1.1027854170118059, 1.0513339723859514, 1.0062032086508614, 0.9662583214896066, 0.9324466500963483, 0.9023474284580776, 0.8747449942997524, 0.8508960008621216, 0.8287621395928519, 0.8099958045142037, 0.7923860720225743, 0.7756776639393398, 0.7618305683135986, 0.7469025679997036, 0.7345166887555804, 0.7242973361696515, 0.713490537234715, 0.7049576214381627, 0.6960699387959072, 0.6877797671726772, 0.6805519546781268, 0.6753096750804356, 0.6672899893351963, 0.6604903255190168, 0.6545530217034476, 0.6489660569599697, 0.6440272331237793, 0.638181175504412, 0.6329106603349958, 0.6292195660727364, 0.6250449078423637, 0.6200939416885376, 0.6160092183521816, 0.6127892051424298, 0.6098237207957676, 0.6050106457301548, 0.6013595036097935, 0.5980100461414882, 0.5942298173904419, 0.5931453534535, 0.5898399693625314, 0.587585415158953, 0.584918669291905, 0.5817732470376151], "val_accuracy": [0.156333327293396, 0.2823333442211151, 0.3596666753292084, 0.39666667580604553, 0.4183333218097687, 0.4416666626930237, 0.45766666531562805, 0.4723333418369293, 0.4933333396911621, 0.5099999904632568, 0.5299999713897705, 0.5419999957084656, 0.5540000200271606, 0.5616666674613953, 0.5733333230018616, 0.5816666483879089, 0.5926666855812073, 0.6076666712760925, 0.6193333268165588, 0.6386666893959045, 0.6476666927337646, 0.6660000085830688, 0.671999990940094, 0.6683333516120911, 0.6726666688919067, 0.6800000071525574, 0.6890000104904175, 0.6923333406448364, 0.6963333487510681, 0.6996666789054871, 0.7020000219345093, 0.7049999833106995, 0.7113333344459534, 0.7089999914169312, 0.7136666774749756, 0.7170000076293945, 0.7203333377838135, 0.7229999899864197, 0.7243333458900452, 0.7263333201408386, 0.7236666679382324, 0.7286666631698608, 0.731333315372467, 0.731333315372467, 0.7363333106040955, 0.7366666793823242, 0.7396666407585144, 0.7413333058357239, 0.7423333525657654, 0.7393333315849304, 0.7450000047683716, 0.7413333058357239, 0.7450000047683716, 0.7443333268165588, 0.7526666522026062, 0.7519999742507935, 0.753000020980835, 0.7546666860580444, 0.7519999742507935, 0.7540000081062317, 0.7526666522026062, 0.7523333430290222, 0.7536666393280029]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [61, 66, 89, 50, 85, 46], [1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [1, 2, 1, 2, 6, 2, 2, 1, 2, 2, 6, 6, 8, 2, 0, 0, 2, 1, 2, 6, 1, 3, 9, 2, 1, 2, 0, 3, 9, 0, 8, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [0, 3, 0, 1, 0, 3, 0, 3, 3, 3, 2, 3, 2, 3, 3, 3, 4, 2, 2, 1, 3, 0, 0, 1, 5, 2, 3, 0, 4, 2, 1, 4, 4], [47, 9, 52, 58, 22, 31, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.19428572058677673, "mapping_values": [1, 4, 4, 2, 2, 1, 29, 29, 15, 14, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), tf.math.subtract(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))))), tf.math.sqrt(tf.math.add(grad, tf.math.negative(tf.math.add(beta, grad)))))), grad)))), tf.math.add(beta, beta)), tf.math.add(beta, grad)), beta), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.6216465695312765, 14.452701180130184, NaN, NaN, NaN, NaN], "accuracy": [0.19561484456062317, 0.1072513535618782, 0.08915598690509796, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [4.256716455732073, 344.1562064034598, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.003666666569188237, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [25, 66, 89, 50, 85, 46], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [2, 2, 1, 2, 9, 5, 8, 5, 2, 2, 3, 1, 9, 8, 9, 0, 2, 2, 2, 6, 6, 3, 3, 5, 1, 2, 0, 3, 5, 4, 3, 6, 0, 8, 6, 3, 7, 1, 0, 6, 6, 2, 2, 0, 9, 6, 7, 8, 8, 8], [4, 2, 3, 1, 0, 3, 3, 3, 2, 3, 2, 2, 3, 3, 3, 0, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 0, 2, 1, 4, 4], [18, 9, 57, 66, 31, 57, 35, 9, 54, 64], [0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [0, 1, 0, 1, 1, 0, 0, 1, 0], [9, 2, 2, 4, 8, 1, 6], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 78, 78, 50, 28, 7, 1, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 50, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.sqrt(grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.square(tf.math.sqrt(tf.math.add(beta, grad)))))), tf.math.square(tf.math.add(beta, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, alpha))))))), tf.math.negative(tf.math.add(beta, tf.math.add(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), tf.math.multiply(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(beta, beta)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.square(grad)))))))))))))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))))))))), tf.math.multiply(grad, tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.negative(tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.add(tf.math.add(tf.math.negative(tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)), alpha)))), alpha))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(alpha)), tf.math.sqrt(tf.math.add(beta, grad)))), alpha))), tf.math.sqrt(tf.math.add(beta, grad))), grad)))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1], [2, 7, 6, 2, 6, 2, 0, 3, 2, 8, 6, 3, 4, 4, 0, 0, 2, 2, 2, 6, 1, 3, 6, 0, 8, 5, 6, 3, 2, 4, 8, 3, 9, 1, 8, 5, 1, 6, 4, 0, 0, 8, 6, 0, 8, 4, 3, 7, 2, 5, 9, 2, 2, 9, 7, 2, 9], [3, 3, 3, 1, 2, 3, 2, 3, 3, 3, 2, 0, 3, 3, 3, 3, 4, 3, 1, 0, 4, 1, 1, 1, 3, 3, 1, 3, 5, 3, 2, 0, 3, 2, 0, 5, 3, 3, 2, 3, 5], [19, 9, 7, 66, 40, 59, 35, 9, 54, 64], [0, 0, 0, 0, 1, 0, 0, 0, 1], [1, 0, 1, 1, 1, 0, 0], [4, 7, 3, 4], [0, 0], [68, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [0, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302147512123522, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [2, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [25, 66, 89, 50, 85, 46], [1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0], [2, 2, 1, 2, 2, 0, 8, 5, 2, 2, 9, 2, 2, 8, 9, 0, 2, 2, 2, 6, 6, 3, 3, 5, 1, 2, 0, 3, 5, 4, 8, 6, 0, 8, 6, 3, 7, 1, 0, 6, 6, 3, 6, 0], [3, 3, 3, 1, 0, 3, 3, 3, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [2, 9, 7, 66, 40, 57, 35, 9, 54, 64], [0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [0, 0, 1, 1, 1, 0, 0], [6, 2, 2, 4, 8, 1, 6], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 24, 24, 16, 8, 3, 5, 3, 2, 1, 1, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad))), tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.negative(tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(beta, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad))))), tf.math.negative(tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), sigma)))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10236428678035736, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 8, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1], [2, 7, 6, 2, 6, 2, 0, 3, 2, 8, 6, 3, 4, 4, 0, 0, 2, 2, 2, 6, 1, 3, 6, 0, 8, 5, 6, 3, 2, 4, 8, 3, 9, 1, 8, 5, 1, 6, 4, 0, 0, 8, 6, 0, 8, 4, 3, 7, 2, 5, 9, 2, 2, 9, 7, 2, 9], [3, 3, 3, 1, 2, 3, 2, 3, 3, 3, 2, 0, 3, 3, 3, 3, 4, 3, 1, 0, 4, 1, 1, 1, 3, 3, 1, 3, 5, 3, 2, 0, 3, 2, 0, 5, 3, 3, 2, 3, 5], [25, 9, 52, 66, 2, 57, 35, 9, 54, 64], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [2, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08466517180204391, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [25, 66, 89, 50, 85, 46], [1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1], [2, 2, 6, 1, 6, 6, 0, 3, 2, 8, 6, 3, 4, 4, 0, 0, 2, 2, 2, 6, 1, 3, 6, 0, 8, 5, 6, 3, 2, 4, 8, 3, 0, 1, 8, 5, 3, 6, 5, 3, 0, 2, 6, 0, 6, 4, 5, 7, 2, 6, 9, 2, 2, 9, 7, 2, 9], [3, 3, 3, 1, 3, 3, 2, 3, 3, 3, 2, 0, 3, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 2, 3, 1, 3, 5, 1, 0, 3, 1, 2, 3, 5, 3, 3, 2, 3, 5], [19, 9, 7, 66, 40, 59, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [4, 7, 3, 4], [0, 0], [69, 2], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 3, 3, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(grad))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.square(tf.math.multiply(beta, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [73, 66, 89, 50, 85, 46], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [2, 7, 6, 2, 6, 2, 0, 3, 2, 8, 6, 3, 4, 4, 0, 0, 2, 2, 2, 6, 1, 3, 6, 0, 8, 5, 8, 3, 3, 4, 8, 3, 9, 1, 8, 5, 1, 6, 4, 0, 0, 8, 6, 0, 8, 4, 3, 7, 2, 5, 9, 2, 2, 9, 7, 2, 9], [3, 3, 3, 1, 2, 3, 2, 3, 3, 3, 2, 0, 3, 3, 3, 3, 4, 3, 1, 0, 4, 1, 1, 1, 3, 3, 1, 3, 5, 3, 2, 0, 3, 2, 0, 5, 3, 3, 2, 3, 5], [25, 9, 52, 66, 2, 57, 35, 9, 54, 64], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 1, 0, 0], [9, 7, 3, 4, 8], [4, 0], [69, 2], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [2, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 27, 27, 14, 13, 1, 1, 1, 1, 0, 1, 6, 3, 3, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.negative(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(grad, alpha))), tf.math.add(beta, tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), grad)), tf.math.pow(grad, grad))))), tf.math.add(beta, beta))), tf.math.pow(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(beta, tf.math.square(tf.math.multiply(beta, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [9, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [25, 66, 89, 50, 85, 46], [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [8, 7, 1, 2, 6, 2, 5, 3, 2, 8, 6, 3, 4, 5, 0, 0, 2, 2, 2, 6, 1, 3, 6, 5, 1, 5, 0, 2, 2, 4, 8, 6, 0, 1, 8, 6, 7, 8, 3, 8, 0, 2, 6, 1, 9, 4, 3, 7, 7, 5, 1, 2, 2, 9, 7, 2, 9], [4, 3, 3, 1, 0, 3, 3, 3, 3, 3, 2, 3, 3, 3, 0, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 0, 4, 2, 1, 4, 4], [25, 9, 52, 66, 30, 57, 35, 9, 54, 64], [0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1], [0, 0, 0, 1, 1, 0, 0, 1, 0], [6, 2, 2, 4, 8, 1, 6], [0, 0], [28, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 2, 2, 1, 1, 0, 5, 2, 2, 0, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, tf.math.add(sigma, tf.math.add(sigma, sigma)))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [530.2987751235831, 8923.087453874157, 40008.9726299366, 109123.6979324891, 232727.21327268524, 428120.76971338], "accuracy": [0.09998679161071777, 0.10447761416435242, 0.09813763201236725, 0.09919429570436478, 0.09549596905708313, 0.09932637959718704], "val_loss": [1806.4944893973213, 13500.186941964286, 44728.10825892857, 105117.296875, 204295.39732142858, 351891.6964285714], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 8, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [2, 2, 1, 4, 5, 0, 8, 5, 2, 2, 9, 2, 2, 8, 9, 0, 2, 2, 2, 6, 6, 3, 3, 5, 1, 2, 0, 3, 5, 4, 8, 6, 0, 8, 6, 3, 7, 1, 0, 6, 6, 3, 6, 0], [4, 3, 3, 1, 0, 3, 3, 3, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [7, 9, 52, 66, 2, 57, 35, 9, 54, 64], [1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [0, 1, 1, 1, 1, 0, 0], [6, 7, 3, 4, 8], [4, 0], [70, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 9, 9, 4, 5, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, grad), grad), tf.math.add(beta, alpha))), tf.math.add(beta, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08030643314123154, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [61, 66, 89, 50, 85, 46], [0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0], [2, 2, 6, 1, 6, 6, 0, 3, 2, 8, 6, 3, 4, 1, 0, 0, 2, 2, 2, 6, 4, 3, 6, 0, 8, 5, 6, 3, 2, 4, 8, 3, 0, 1, 8, 5, 3, 6, 5, 3, 0, 2, 6, 0, 6, 4, 5, 7, 2, 6, 9, 2, 2, 9, 7, 2, 9], [3, 3, 3, 1, 3, 3, 2, 3, 3, 3, 2, 0, 3, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 2, 3, 1, 3, 5, 1, 0, 3, 1, 2, 3, 5, 3, 3, 2, 3, 5], [74, 9, 73, 66, 40, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [4, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 29, 29, 16, 13, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.sqrt(grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.divide_no_nan(grad, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(alpha)), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, grad)))), tf.math.negative(tf.math.add(beta, grad))))), tf.math.add(beta, beta)))))), tf.math.add(beta, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))), grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1], [2, 7, 6, 2, 6, 2, 0, 3, 2, 8, 6, 3, 4, 4, 0, 0, 2, 2, 2, 6, 1, 3, 6, 0, 8, 5, 6, 3, 2, 4, 8, 3, 9, 1, 8, 5, 1, 6, 4, 0, 0, 8, 6, 0, 8, 4, 3, 7, 2, 5, 9, 2, 2, 9, 7, 2, 9], [3, 3, 3, 1, 0, 3, 3, 3, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [19, 9, 7, 66, 40, 59, 35, 9, 54, 64], [0, 1, 0, 0, 1, 0, 0, 0, 1, 1], [1, 0, 0, 1, 1, 0, 0, 1], [6, 7, 3, 4, 8], [4, 4, 7], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 18, 10, 8, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(grad)))), tf.math.add(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.negative(tf.math.subtract(tf.math.add(alpha, alpha), grad)), tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [2, 3, 9, 2, 6, 2, 0, 3, 2, 8, 6, 3, 4, 3, 0, 0, 1, 2, 4, 6, 1, 3, 6, 0, 8, 5, 6, 3, 2, 4, 8, 5, 9, 1, 8, 5, 1, 6, 4, 0, 0, 8, 6, 0, 8, 4, 3, 7, 2, 5, 9, 2, 2, 9, 7, 2, 9], [0, 3, 0, 1, 0, 3, 0, 3, 3, 3, 2, 3, 2, 3, 3, 3, 4, 2, 2, 1, 3, 0, 0, 1, 5, 2, 3, 0, 4, 2, 1, 4, 4], [47, 9, 52, 58, 30, 31, 35, 9, 54, 64], [0, 0, 0, 0, 1, 0, 0, 0, 1], [1, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [6, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 2, 62, 62, 38, 24, 8, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 52, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))), grad)), tf.math.add(beta, tf.math.multiply(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(alpha, tf.math.pow(tf.math.add(beta, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.multiply(tf.math.negative(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.subtract(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(beta, tf.math.add(beta, grad)), tf.math.multiply(tf.math.divide_no_nan(tf.math.negative(beta), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.sqrt(tf.math.square(grad)))))))))))))), tf.math.add(beta, grad))))), grad)))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.pow(beta, tf.math.sqrt(tf.math.add(beta, beta))), tf.math.add(beta, tf.math.square(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))))), tf.math.subtract(tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, alpha)))), tf.math.add(beta, grad)))), tf.math.subtract(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.divide_no_nan(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.302147512123522, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 2, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [2, 2, 1, 2, 8, 0, 8, 5, 2, 2, 9, 2, 2, 8, 9, 0, 2, 2, 2, 6, 6, 3, 3, 5, 1, 2, 0, 3, 5, 4, 8, 6, 0, 8, 6, 3, 7, 1, 0, 6, 6, 3, 6, 0], [4, 3, 3, 1, 0, 3, 3, 3, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [25, 9, 52, 66, 2, 57, 35, 9, 54, 64], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 1, 1, 0, 0, 1], [6, 7, 3, 2, 8], [0, 0, 3], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.07314285635948181, "mapping_values": [1, 4, 4, 2, 2, 0, 11, 11, 6, 5, 1, 10, 8, 5, 3, 2, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, grad)), grad)), grad)), alpha)), tf.math.negative(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), tf.math.add(sigma, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))))), tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, sigma))), sigma)))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3010699523517153, 2.3008601797129327, 2.2996870487625287, 2.300008244345044, 2.2992296685254208, 2.298781923787343, 2.29990232704086, 2.299077111590477, 2.299626484901016, 2.298883939164111, 2.2990138894767496, 2.2993201146335522, 2.2997056876096775, 2.299986175148636, 2.3000528133776776, 2.3007255269394356], "accuracy": [0.09272222965955734, 0.09153348207473755, 0.09972262382507324, 0.09721305221319199, 0.09549596905708313, 0.10249637067317963, 0.09457138925790787, 0.1014397069811821, 0.09866596013307571, 0.10777968913316727, 0.1018359512090683, 0.0952318087220192, 0.10328886657953262, 0.09800554811954498, 0.1014397069811821, 0.10011887550354004], "val_loss": [1.9701414108276367, 1.9695900508335658, 1.9692833764212472, 1.9692260878426688, 1.9692519051688058, 1.9692844663347517, 1.9691995893205916, 1.9692519051688058, 1.9691863741193498, 1.9694034712655204, 1.969596999032157, 1.9699044227600098, 1.970146315438407, 1.9703803743634904, 1.9705946786063058, 1.9707764898027693], "val_accuracy": [0.045666664838790894, 0.052666667848825455, 0.060333333909511566, 0.06666667014360428, 0.06866666674613953, 0.07266666740179062, 0.07566666603088379, 0.07599999755620956, 0.07833333313465118, 0.07766667008399963, 0.07866666465997696, 0.07699999958276749, 0.07266666740179062, 0.07199999690055847, 0.0729999989271164, 0.06733333319425583]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [1, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [10, 66, 89, 50, 85, 46], [0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [9, 2, 1, 2, 8, 0, 8, 5, 2, 2, 9, 2, 2, 8, 9, 0, 2, 2, 2, 6, 6, 3, 3, 5, 1, 2, 0, 3, 5, 4, 8, 6, 0, 8, 6, 3, 7, 1, 0, 6, 6, 3, 6, 0], [3, 3, 3, 1, 3, 3, 2, 3, 3, 3, 2, 0, 3, 3, 3, 3, 4, 3, 1, 0, 4, 1, 1, 1, 3, 3, 1, 3, 5, 3, 2, 0, 3, 2, 0, 5, 3, 3, 2, 3, 5], [19, 9, 7, 66, 40, 59, 35, 9, 54, 64], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0, 0], [6, 6, 3, 4, 8], [0, 0], [51, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.04171428456902504, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 1, 0, 1, 10, 7, 5, 2, 2, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), sigma)), tf.math.add(sigma, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))), tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.sqrt(sigma)), sigma)))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3015492955345, 2.3022803037457256, 2.301797438102423, 2.3024305826826277, 2.301738989304369, 2.3012332546240177], "accuracy": [0.09140139818191528, 0.08902391046285629, 0.08994849026203156, 0.09140139818191528, 0.0866464152932167, 0.09232597798109055], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [25, 66, 89, 50, 85, 46], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [2, 2, 1, 2, 2, 0, 8, 5, 0, 2, 9, 2, 0, 8, 9, 0, 2, 2, 2, 6, 6, 3, 3, 5, 1, 2, 0, 3, 5, 4, 8, 6, 0, 8, 6, 3, 7, 1, 0, 6, 6, 3, 6, 0], [4, 3, 3, 1, 0, 3, 3, 3, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [25, 61, 52, 66, 2, 57, 35, 9, 54, 64], [0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [0, 0, 0, 1, 1, 0, 0, 1, 0], [9, 2, 1, 4, 8, 1, 6], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.006000000052154064, "mapping_values": [1, 3, 3, 1, 2, 1, 22, 22, 16, 6, 3, 1, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, grad), grad))), tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))))))))))))), tf.math.negative(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3078285497744258, 2.3247749441729058, 2.3427018640284145, 2.3662640456714965, 2.3939576539475573, 2.4318964101571954], "accuracy": [0.07792893797159195, 0.048870690166950226, 0.034341566264629364, 0.02351076528429985, 0.014925372786819935, 0.01241579744964838], "val_loss": [1.985110078539167, 2.000844887324742, 2.0190089089529857, 2.04141480582101, 2.0698250361851285, 2.108743735722133], "val_accuracy": [0.008666666224598885, 0.005333333276212215, 0.004999999888241291, 0.004666666500270367, 0.004666666500270367, 0.004666666500270367]}}]