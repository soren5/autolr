[{"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 2, 4, 0, 5, 5, 8, 4, 4, 6, 3, 6], [3, 0, 1, 0, 2, 1, 2, 2, 0], [31, 32, 29, 49, 25], [1, 0, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1], [3, 7, 6, 5, 5, 7, 3, 9], [2, 3, 0, 4, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [1, 3, 9, 1, 2], [3, 0, 2], [23, 52, 13]], "fitness": -0.7734285593032837, "mapping_values": [1, 13, 13, 8, 5, 2, 8, 8, 4, 4, 1, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.square(alpha)))), tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), grad)))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.square(grad))), tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [2.282822985171075, 2.1220866842764936, 1.5873453995303204, 1.3623414331061288, 1.0463622527635172, 0.90179974544538, 0.842878289462679, 0.8306040060817762, 0.7798154919989246, 0.7566368014994173, 0.7254669331383192, 0.7001727566333605, 0.6812864345424698, 0.6630934360256883, 0.6215330831615004, 0.6104562168013639, 0.5981915454271841, 0.5781305647797006, 0.5731743584298313, 0.5620388979956521, 0.5484867015172776, 0.539629293832765, 0.5189123234894014, 0.5213868847974712, 0.515987662268573, 0.5003800214305294, 0.48793556415535566, 0.48649188042033414, 0.4784855730875907, 0.4642838443259301, 0.4547672605375966, 0.4500465868423486, 0.44230030686265487, 0.44986576079660956, 0.45234718454701317, 0.451344959633682, 0.4335990138868567, 0.4476728931024106], "accuracy": [0.14317791163921356, 0.3533218801021576, 0.4753665328025818, 0.566239595413208, 0.6283186078071594, 0.6701889038085938, 0.6749438643455505, 0.6861709356307983, 0.7084929347038269, 0.7094175219535828, 0.7309470176696777, 0.7243428826332092, 0.7329282760620117, 0.7531369924545288, 0.7640998363494873, 0.7602694630622864, 0.7754589915275574, 0.7835160493850708, 0.7786290049552917, 0.7913089394569397, 0.8010830879211426, 0.7866860628128052, 0.8030643463134766, 0.8115176558494568, 0.8050455451011658, 0.8103289008140564, 0.8157442808151245, 0.8103289008140564, 0.8152159452438354, 0.824329674243927, 0.8255184292793274, 0.8313300609588623, 0.8296129703521729, 0.8247259259223938, 0.8249900937080383, 0.8265751004219055, 0.8370096683502197, 0.829216718673706], "val_loss": [1.9022931371416365, 1.5600973537990026, 0.861427903175354, 0.9064855234963554, 0.716704147202628, 0.6174483639853341, 0.598648224558149, 0.5853591987064907, 0.6023848737989154, 0.5514436279024396, 0.5409741571971348, 0.5109625543866839, 0.49726406165531706, 0.49390316009521484, 0.47885406017303467, 0.46423791136060444, 0.4667755365371704, 0.4505664961678641, 0.4502557856695993, 0.4629166466849191, 0.4366527114595686, 0.43104852948869976, 0.4334400381360735, 0.41539986644472393, 0.4031077878815787, 0.4179614952632359, 0.4012311356408255, 0.4125353864261082, 0.40736402784075054, 0.395818897656032, 0.39800548553466797, 0.3979462470327105, 0.4086471881185259, 0.40432633672441753, 0.4020860365458897, 0.38949768032346455, 0.40013103825705393, 0.3887466532843454], "val_accuracy": [0.38999998569488525, 0.5070000290870667, 0.6523333191871643, 0.7046666741371155, 0.7200000286102295, 0.7233333587646484, 0.7233333587646484, 0.7383333444595337, 0.7506666779518127, 0.753333330154419, 0.7643333077430725, 0.7756666541099548, 0.7760000228881836, 0.7816666960716248, 0.7913333177566528, 0.7919999957084656, 0.7946666479110718, 0.7996666431427002, 0.8003333210945129, 0.8050000071525574, 0.8106666803359985, 0.8169999718666077, 0.8216666579246521, 0.8276666402816772, 0.8276666402816772, 0.8363333344459534, 0.8323333263397217, 0.8299999833106995, 0.8410000205039978, 0.8403333425521851, 0.8393333554267883, 0.8403333425521851, 0.843999981880188, 0.8403333425521851, 0.8259999752044678, 0.8360000252723694, 0.8349999785423279, 0.8376666903495789]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 2, 4, 0, 5, 5, 8, 4, 4, 6, 3, 6], [3, 0, 2, 0, 3, 1, 2, 0, 0], [31, 32, 29, 49, 25], [1, 0, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1], [3, 7, 6, 5, 5, 7, 3, 9], [2, 3, 0, 4, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [1, 3, 9, 1, 2], [3, 0, 2], [23, 52, 13]], "fitness": -0.6005714535713196, "mapping_values": [1, 13, 13, 8, 5, 2, 8, 8, 4, 4, 1, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, grad)), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), grad))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.square(grad))), tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [2.2828229536800464, 2.122087156547453, 1.5873393112437568, 1.3791731291632248, 1.03523271091862, 0.9033758230197384, 0.8387804329828296, 0.8321409917794136, 0.7753878622762972, 1.0338340618543935, 0.9159025349448212, 0.8219805341890507, 0.7739491143860853, 0.7150533335745185, 0.6840260525373908, 0.6553336168088146, 0.642526722988826, 0.6317018601463267, 0.613692932880912, 0.6095748083734116, 0.5966437679035568, 0.5908898849765055, 0.5584120881902291, 0.5500409259709227, 0.5439482019750937, 0.5293461631916108, 0.5272417738374355, 0.5262140971306466, 0.5133692274523796, 0.5107128531854733, 0.4914015237807346, 0.49972098387148967, 0.48521703149050205, 0.47919462249421046, 0.4783969024279177, 0.4733536913016721, 0.4579436064884411, 0.47060207057984876, 0.45716863717101963, 0.4448581373986, 0.4461939862226026, 0.44369237199514266, 0.44383364053780866, 0.4271944168575719, 0.4235164872753842, 0.42729848409530397, 0.42123509218994776, 0.4414321187858521, 0.4258635145932015, 0.4309711110173058, 0.4355018462062181, 0.43907263261326207, 0.4405957536611732, 0.4375140547531943], "accuracy": [0.14317791163921356, 0.3533218801021576, 0.4752344489097595, 0.565711259841919, 0.6300356388092041, 0.6699247360229492, 0.6761326193809509, 0.6893408894538879, 0.7062475085258484, 0.6823405027389526, 0.6762647032737732, 0.7092854380607605, 0.7135120630264282, 0.7160216569900513, 0.7380794882774353, 0.7555144429206848, 0.7557786107063293, 0.7691190242767334, 0.7778365015983582, 0.7726852297782898, 0.7750627398490906, 0.774798572063446, 0.7841764688491821, 0.7853652238845825, 0.7915731072425842, 0.7959318161010742, 0.800818920135498, 0.8030643463134766, 0.8037247657775879, 0.8047813773155212, 0.8152159452438354, 0.8124422430992126, 0.81112140417099, 0.8187822103500366, 0.8127063512802124, 0.8162726163864136, 0.8208954930305481, 0.8140271902084351, 0.8276317715644836, 0.8277638554573059, 0.8297450542449951, 0.8302733898162842, 0.8339717388153076, 0.8360850811004639, 0.8442742228507996, 0.8347642421722412, 0.8412362933158875, 0.8338396549224854, 0.8422929644584656, 0.8396512866020203, 0.8334434032440186, 0.8354246616363525, 0.8276317715644836, 0.8297450542449951], "val_loss": [1.9022929327828544, 1.56009806905474, 0.8613017456872123, 0.910505975995745, 0.7182899202619281, 0.620364819254194, 0.6000371660505023, 0.5849148205348423, 0.6038526126316616, 0.7530543804168701, 0.5783844334738595, 0.58913825239454, 0.526236721447536, 0.5168222188949585, 0.5086349589484078, 0.5064833504813058, 0.48527768680027555, 0.49994468688964844, 0.4867224863597325, 0.4826665605817522, 0.47379469871520996, 0.4425269535609654, 0.43017291171210154, 0.43105632066726685, 0.4261840156146458, 0.4153743726866586, 0.4152431232588632, 0.4162126013210842, 0.41322004795074463, 0.41066053935459684, 0.40854150908333914, 0.4022951977593558, 0.4105579597609384, 0.4151436005319868, 0.41183299677712576, 0.4042743274143764, 0.4011877604893276, 0.3991471103259495, 0.40155825444630217, 0.4063402499471392, 0.3995630315371922, 0.40012324707848684, 0.41027545077460154, 0.40871682337352205, 0.3998445953641619, 0.40332951716014315, 0.40552874973842074, 0.41362097433635164, 0.40898349455424715, 0.4074005314282009, 0.4086524929319109, 0.39330015012196134, 0.4018510580062866, 0.4235057830810547], "val_accuracy": [0.38999998569488525, 0.5070000290870667, 0.6526666879653931, 0.7049999833106995, 0.718999981880188, 0.7210000157356262, 0.7146666646003723, 0.7416666746139526, 0.7440000176429749, 0.7179999947547913, 0.7506666779518127, 0.749666690826416, 0.7703333497047424, 0.7726666927337646, 0.7820000052452087, 0.7839999794960022, 0.7879999876022339, 0.7856666445732117, 0.7946666479110718, 0.7986666560173035, 0.7986666560173035, 0.812666654586792, 0.8149999976158142, 0.8113333582878113, 0.8153333067893982, 0.8230000138282776, 0.8273333311080933, 0.8263333439826965, 0.8296666741371155, 0.8296666741371155, 0.8303333520889282, 0.82833331823349, 0.82833331823349, 0.8349999785423279, 0.828000009059906, 0.8326666951179504, 0.8306666612625122, 0.8336666822433472, 0.8373333215713501, 0.8426666855812073, 0.8373333215713501, 0.840666651725769, 0.8399999737739563, 0.8420000076293945, 0.843666672706604, 0.8386666774749756, 0.8386666774749756, 0.8399999737739563, 0.843999981880188, 0.8356666564941406, 0.8403333425521851, 0.8413333296775818, 0.8386666774749756, 0.8386666774749756]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 2, 6, 2, 4, 0, 5, 9, 8, 3, 4, 6, 3, 6], [1, 0, 2, 0, 3, 1, 2, 0, 0], [37, 32, 29, 49, 25], [1, 1, 1, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1], [1, 2, 2, 5, 5, 7, 3, 9], [2, 3, 3, 4, 1], [98], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 0, 1, 1], [8, 3, 9, 1, 2], [3, 2, 2], [12, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 8, 8, 4, 4, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))), tf.math.add(beta, grad)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 2, 4, 0, 5, 6, 8, 4, 4, 6, 3, 6], [3, 0, 1, 0, 3, 1, 2, 0, 0], [37, 32, 29, 49, 25], [1, 1, 1, 1, 1, 0, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1], [3, 9, 2, 5, 5, 7, 3, 9], [2, 3, 1, 4, 1, 0], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 0, 1, 1], [1, 3, 9, 1, 2], [3, 0, 1], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 6, 6, 4, 2, 1, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [60.37464929071038, 743.7758492230582, 3117.6047751855353, 8348.74401434648, 17539.600857197696, 32227.3869271934], "accuracy": [0.10077928751707077, 0.09959053993225098, 0.10593052208423615, 0.0944393053650856, 0.09998679161071777, 0.09681680053472519], "val_loss": [172.98366001674108, 1084.717808314732, 3440.1256975446427, 7943.744419642857, 15295.45424107143, 26194.129464285714], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 5, 4, 0, 5, 5, 8, 4, 4, 6, 3, 6], [1, 0, 1, 0, 2, 1, 2, 2, 0], [92, 98, 29, 49, 25], [1, 0, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1], [3, 7, 6, 5, 5, 7, 3, 9], [2, 3, 0, 4, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [1, 3, 9, 1, 2], [1, 0, 2], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 12, 8, 4, 2, 7, 7, 3, 4, 1, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.pow(tf.math.add(alpha, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.square(alpha)))))), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(alpha, tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1018359512090683, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [2, 2, 8, 6, 2, 4, 0, 5, 6, 8, 4, 4, 6, 3, 6], [2, 0, 2, 2, 3, 1, 2, 0, 0], [31, 32, 29, 49, 25], [1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 7, 6, 0, 5, 7, 3, 9, 6, 5, 9], [2, 1, 3, 4, 3, 2], [98, 45], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [1, 3, 9, 1, 2], [3, 0, 2], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 16, 16, 11, 5, 2, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.add(alpha, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))))))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), grad))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09496764093637466, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [3, 9, 8, 9, 2, 4, 4, 5, 2, 0, 9, 3, 5, 6, 6, 4, 2, 3, 5], [3, 1, 1, 0, 2, 1, 2, 2, 0], [7, 32, 65, 34], [1, 0, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1], [3, 7, 6, 5, 5, 7, 3, 9], [3, 3, 3, 4, 1], [98], [0, 1, 1, 0, 1], [0, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 0, 1, 1], [2, 3, 9, 1, 2], [2, 3, 2], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 4, 0, 2, 8, 8, 4, 4, 0, 3, 1, 1, 0, 0, 5, 3, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.square(grad))), tf.math.add(beta, grad))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(beta, tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10170386731624603, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 6, 8, 6, 2, 6, 2, 5, 2, 8, 3, 4, 2, 5, 6, 4, 2], [3, 0, 2, 2, 3, 1, 2, 0, 0, 2, 0], [31, 94, 29, 49, 25], [1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1], [3, 7, 6, 1, 5, 6, 3, 4, 6, 5, 4], [3, 2, 3, 3, 1, 2, 1, 0, 4, 2], [98, 66, 12], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [2, 3, 9, 1, 2], [2, 0, 2], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 25, 25, 14, 11, 4, 21, 21, 11, 10, 1, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))))), tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.square(tf.math.add(alpha, grad)), tf.math.add(grad, tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, tf.math.add(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), grad))))), tf.math.square(tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.square(tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(grad, alpha)))), beta))))), tf.math.add(beta, alpha))))), tf.math.add(beta, tf.math.square(tf.math.pow(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), grad)))), beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(beta, tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 4, 8, 6, 2, 4, 0, 5, 6, 8, 4, 4, 6, 3, 6], [3, 0, 2, 0, 3, 1, 2, 0, 0], [31, 32, 74, 49, 25], [1, 1, 1, 1, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 1], [3, 7, 6, 5, 5, 7, 3, 9], [2, 3, 3, 4, 1], [98], [1, 1, 1, 0, 1], [0, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 0, 1, 1], [1, 3, 9, 1, 2], [3, 0, 2], [51, 24, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32), tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [79.39113825388777, 1030.1922377502094, 4396.760060102901, 11851.010452611115, 24967.401842763506, 45949.89032832932], "accuracy": [0.10077928751707077, 0.09959053993225098, 0.10593052208423615, 0.09430722147226334, 0.09998679161071777, 0.09681680053472519], "val_loss": [233.67643519810267, 1520.9490792410713, 4871.812779017857, 11295.663504464286, 21793.932477678572, 37369.747767857145], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 2, 4, 0, 5, 5, 8, 4, 4, 6, 3, 6], [3, 0, 1, 0, 2, 1, 2, 2, 0], [31, 32, 29, 49, 25], [1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1], [3, 7, 6, 7, 5, 7, 3, 9], [2, 3, 0, 3, 1, 4], [98, 45], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 1, 1, 1, 1], [1, 3, 9, 1, 2], [3, 0, 2], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 12, 12, 6, 6, 1, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(grad)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.square(beta), tf.math.add(beta, grad))), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), grad)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [185.31637083141007, 2757.2067337408985, 12218.337693274501, 33358.30515959335, 70685.64182096982, 130541.77715542862], "accuracy": [0.10011887550354004, 0.09972262382507324, 0.10619468986988068, 0.0944393053650856, 0.10011887550354004, 0.09681680053472519], "val_loss": [589.4053083147321, 4172.609375, 13650.59095982143, 31907.86160714286, 61829.87053571428, 106301.72767857143], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [2, 0, 6, 6, 2, 2, 0, 5, 3, 8, 4, 4, 6, 3, 6], [1, 0, 2, 2, 3, 1, 2, 0, 0], [31, 32, 29, 49, 25], [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1], [3, 7, 6, 0, 5, 7, 3, 9, 6, 4], [2, 3, 1, 4, 1, 0, 2], [98, 45], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [1, 3, 9, 1, 2], [3, 0, 2], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 17, 17, 10, 7, 2, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.negative(tf.math.square(tf.math.add(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha))))))))), tf.math.add(beta, tf.math.divide_no_nan(grad, alpha))), tf.math.pow(tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09140139818191528, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 8, 8, 9, 2, 4, 0, 5, 2, 8, 9, 3, 8, 6, 6, 4, 2, 3, 5], [2, 1, 2, 0, 2, 1, 0, 0, 0, 2, 3, 1, 3, 1], [37, 32, 29, 49, 25], [0, 1, 1, 1, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 1], [3, 9, 2, 5, 5, 7, 3, 9], [4, 3, 3, 4, 1], [98], [1, 1, 1, 0, 1], [0, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 1, 0, 1, 1], [1, 3, 9, 1, 2], [3, 0, 1], [23, 38, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 6, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [185.31637083141007, 2757.2067337408985, 12218.337693274501, 33358.30515959335, 70685.64182096982, 130541.77715542862], "accuracy": [0.10011887550354004, 0.09972262382507324, 0.10619468986988068, 0.0944393053650856, 0.10011887550354004, 0.09681680053472519], "val_loss": [589.4053083147321, 4172.609375, 13650.59095982143, 31907.86160714286, 61829.87053571428, 106301.72767857143], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 2, 4, 0, 5, 5, 8, 4, 4, 6, 3, 6], [2, 0, 2, 0, 3, 1, 2, 0, 0], [31, 32, 29, 49, 25], [1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 1], [3, 7, 6, 5, 5, 7, 3, 9], [2, 3, 0, 4, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [1, 3, 9, 1, 2], [3, 3, 2], [89, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 13, 13, 8, 5, 2, 7, 7, 3, 4, 1, 1, 0, 0, 0, 0, 5, 2, 3, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, grad)), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(grad))))), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), grad))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.divide_no_nan(beta, tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(sigma, beta))", "other_info": {"loss": [2.3014209409667643, 2.302031586025653, 2.301279589390128, 2.3016721119639456, 2.3013034163212907, 2.3031367745775477], "accuracy": [0.09100515395402908, 0.08915598690509796, 0.09325055778026581, 0.08757099509239197, 0.09391097724437714, 0.09100515395402908], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 2, 6, 2, 4, 0, 5, 9, 8, 3, 4, 6, 3, 6], [3, 0, 1, 0, 3, 1, 2, 0, 0], [37, 32, 29, 49, 25], [1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [3, 9, 3, 2, 5, 7, 3, 9, 5], [2, 3, 3, 4, 1], [94, 45], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [1, 3, 9, 1, 2], [3, 0, 2], [23, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 1, 1, 0, 1, 0, 13, 13, 9, 4, 2, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.multiply(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(grad, tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)))))), tf.math.square(tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [2.3014209409667643, 2.302031586025653, 2.301279589390128, 2.3016721119639456, 2.3013034163212907, 2.3031367745775477], "accuracy": [0.09100515395402908, 0.08915598690509796, 0.09325055778026581, 0.08757099509239197, 0.09391097724437714, 0.09100515395402908], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 2, 2, 0, 5, 1, 3, 4, 4, 6, 3, 6, 8, 5], [3, 0, 0, 0, 3, 1, 2, 0, 0, 2, 1, 0], [65, 32, 65, 66, 31, 95], [1, 1, 1, 1, 1, 0, 0, 1], [0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 2, 5, 5, 7, 3, 9], [4, 3, 3, 4, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 0, 0, 1, 1, 1], [0, 3, 9, 1, 2], [3, 0, 1], [37, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 23, 23, 13, 10, 5, 3, 3, 2, 1, 1, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.square(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.add(alpha, grad), tf.math.multiply(tf.math.add(alpha, tf.math.pow(alpha, tf.math.add(alpha, tf.math.pow(grad, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), grad))))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), sigma))", "other_info": {"loss": [2.3014209409667643, 2.302031586025653, 2.301279589390128, 2.3016721119639456, 2.3013034163212907, 2.3031367745775477], "accuracy": [0.09100515395402908, 0.08915598690509796, 0.09325055778026581, 0.08757099509239197, 0.09391097724437714, 0.09100515395402908], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 2, 4, 2, 5, 5, 8, 4, 4, 6, 3, 6], [3, 0, 1, 0, 2, 1, 2, 2, 0], [31, 32, 29, 49, 25], [1, 1, 1, 1, 0, 0, 0, 1], [0, 0, 1, 1, 0, 1, 1, 0], [3, 7, 6, 5, 5, 7, 3, 9], [3, 3, 3, 4, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 0, 1], [5, 2, 9, 1, 2], [3, 1, 2], [23, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 14, 14, 8, 6, 2, 7, 7, 3, 4, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.square(alpha), tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad))), tf.math.add(alpha, alpha))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(grad, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.square(sigma)", "other_info": {"loss": [2.3014209409667643, 2.302031586025653, 2.301279589390128, 2.3016721119639456, 2.3013034163212907, 2.3031367745775477], "accuracy": [0.09100515395402908, 0.08915598690509796, 0.09325055778026581, 0.08757099509239197, 0.09391097724437714, 0.09100515395402908], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [2, 0, 6, 6, 2, 2, 0, 5, 3, 8, 4, 4, 6, 3, 6], [3, 0, 1, 0, 2, 1, 2, 2, 0], [31, 32, 29, 49, 25], [1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 1, 0, 1, 1], [3, 7, 6, 5, 5, 7, 3, 9], [2, 3, 0, 4, 1], [98, 45], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 1, 1, 0, 1], [3, 8, 9, 1, 2], [3, 0, 2], [23, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 3, 3, 1, 2, 1, 5, 5, 2, 3, 1, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.add(beta, beta), grad), tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3014209409667643, 2.302031586025653, 2.301279589390128, 2.3016721119639456, 2.3013034163212907, 2.3031367745775477], "accuracy": [0.09100515395402908, 0.08915598690509796, 0.09325055778026581, 0.08757099509239197, 0.09391097724437714, 0.09100515395402908], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 2, 6, 2, 4, 0, 5, 6, 8, 4, 4, 6, 3, 6], [1, 0, 2, 2, 3, 1, 2, 0, 0], [31, 32, 29, 49, 25], [1, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1], [3, 7, 4, 5, 5, 7, 3, 9], [2, 3, 3, 4, 1], [98, 6], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 0, 1, 1], [1, 3, 9, 1, 2], [3, 3, 2], [23, 66, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 19, 19, 11, 8, 2, 8, 8, 4, 4, 0, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.square(grad)))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.sqrt(tf.math.add(alpha, tf.math.pow(alpha, tf.math.add(alpha, grad))))))), tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))), tf.math.add(beta, grad)), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), sigma))", "other_info": {"loss": [2.3014209409667643, 2.302031586025653, 2.301279589390128, 2.3016721119639456, 2.3013034163212907, 2.3031367745775477], "accuracy": [0.09100515395402908, 0.08915598690509796, 0.09325055778026581, 0.08757099509239197, 0.09391097724437714, 0.09100515395402908], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 2, 6, 2, 4, 0, 5, 9, 8, 3, 4, 6, 3, 6], [3, 0, 1, 0, 3, 1, 2, 0, 0], [46, 32, 29, 49, 25], [1, 1, 1, 1, 1, 0, 0, 0], [1, 0, 0, 1, 1, 1, 1, 1], [3, 7, 6, 5, 5, 7, 3, 9], [2, 3, 3, 4, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [1, 1, 0, 1, 1, 1], [1, 3, 9, 1, 2], [3, 0, 1], [23, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 14, 14, 8, 6, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.square(alpha)))), tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), grad)), tf.math.add(alpha, alpha))))))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3014209409667643, 2.302031586025653, 2.301279589390128, 2.3016721119639456, 2.3013034163212907, 2.3031367745775477], "accuracy": [0.09100515395402908, 0.08915598690509796, 0.09325055778026581, 0.08757099509239197, 0.09391097724437714, 0.09100515395402908], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 5, 2, 8, 3, 4, 6, 3, 6, 3, 7, 1, 0], [2, 0, 2, 0, 3, 1, 2, 0, 0, 0, 1, 0, 2, 2, 0, 1], [31, 32, 65, 66, 36, 82, 51], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1], [3, 9, 4, 5, 5, 7, 3, 9], [2, 3, 3, 4, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 0, 0, 1, 1, 1], [0, 3, 9, 1, 2], [3, 0, 1], [23, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 35, 35, 19, 16, 7, 7, 7, 5, 2, 1, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(grad, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), tf.math.multiply(grad, tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))))), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.subtract(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha)), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))))), grad)), tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32))))), alpha), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.square(tf.math.add(beta, tf.math.square(tf.math.add(beta, beta)))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), sigma))", "other_info": {"loss": [2.3014209409667643, 2.302031586025653, 2.301279589390128, 2.3016721119639456, 2.3013034163212907, 2.3031367745775477], "accuracy": [0.09100515395402908, 0.08915598690509796, 0.09325055778026581, 0.08757099509239197, 0.09391097724437714, 0.09100515395402908], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}]