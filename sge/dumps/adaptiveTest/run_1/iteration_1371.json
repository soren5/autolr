[{"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [62, 66, 89, 50, 85, 46], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 2, 4, 2, 9, 1, 6, 5, 2, 0, 2, 8, 2, 0, 0, 2, 2, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [0, 5, 1, 0, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [31, 37, 34, 97, 2, 57, 35, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [3, 7, 7, 9, 3, 0, 1, 3, 2, 2, 5], [1, 0, 0, 2, 0, 2, 2], [30, 23, 13, 96, 41]], "fitness": -0.8379999995231628, "mapping_values": [1, 4, 4, 2, 2, 1, 38, 38, 24, 14, 6, 1, 0, 0, 0, 0, 7, 4, 3, 3], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.square(tf.math.add(tf.math.add(beta, tf.math.pow(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))), alpha)), tf.math.subtract(tf.math.divide_no_nan(tf.math.square(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.negative(grad)), grad)))), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, beta)))))))), tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.add(tf.math.add(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.255587349100482, 1.8252541587463287, 1.2092239545116241, 0.9210903707543825, 0.803765720639955, 0.7347620674222609, 0.696070782299984, 0.6622399411748161, 0.6377128930123979, 0.616965119093322, 0.6052939510143917, 0.5824046296025343, 0.5718985296212105, 0.554153969503271, 0.5377990186899377, 0.5376792386884718, 0.5176480859813279, 0.5180266003142007, 0.5099529312302833, 0.4995569258735416, 0.48871127422050226, 0.4820171631582346, 0.48383642869886234, 0.46772191666530155, 0.4676305798058654, 0.45693662433954296, 0.4458963856043959, 0.4460156271092691, 0.4378498429950391, 0.4314618680604996, 0.4202093707139009, 0.4210511116760439, 0.41053077035718005, 0.4068448036897294, 0.39510745808369985, 0.3865721754866537, 0.3930353050092743, 0.3834826693700494], "accuracy": [0.19852067530155182, 0.43164706230163574, 0.575089156627655, 0.6700568199157715, 0.7013604640960693, 0.7191916704177856, 0.7306828498840332, 0.7429665923118591, 0.7597411274909973, 0.7675340175628662, 0.7741381525993347, 0.7771760821342468, 0.7862898111343384, 0.7886672616004944, 0.7964601516723633, 0.796328067779541, 0.8025360107421875, 0.8049134612083435, 0.806630551815033, 0.8132346868515015, 0.8153480291366577, 0.8146876096725464, 0.8181217908859253, 0.8244617581367493, 0.8244617581367493, 0.8239334225654602, 0.8347642421722412, 0.8372738361358643, 0.8337075710296631, 0.8359529972076416, 0.845859169960022, 0.8358209133148193, 0.8486329317092896, 0.850350022315979, 0.8499537706375122, 0.8543124794960022, 0.8495575189590454, 0.8578787446022034], "val_loss": [1.801516328539167, 0.964346102305821, 0.6999504906790597, 0.6253632988248553, 0.5804615531648908, 0.556350759097508, 0.5263877425874982, 0.508196405002049, 0.49482452869415283, 0.48111443860190256, 0.4699190514428275, 0.45886686870029997, 0.44764868702207294, 0.440317588193076, 0.4344508477619716, 0.42263348613466534, 0.4218351755823408, 0.4098805103983198, 0.4097601090158735, 0.4049673506191799, 0.3964751362800598, 0.39254677295684814, 0.3904453771454947, 0.3869370903287615, 0.37820405619485037, 0.38316906349999563, 0.3735838532447815, 0.3675895929336548, 0.37147192444120136, 0.3607477290289743, 0.36154654196330477, 0.3626890012196132, 0.3509731377874102, 0.34805071353912354, 0.35170118297849384, 0.3456744892256601, 0.3444839801107134, 0.34292116335460116], "val_accuracy": [0.4410000145435333, 0.6489999890327454, 0.6949999928474426, 0.731333315372467, 0.7319999933242798, 0.7446666955947876, 0.7526666522026062, 0.765999972820282, 0.7816666960716248, 0.7789999842643738, 0.7916666865348816, 0.7910000085830688, 0.8013333082199097, 0.8119999766349792, 0.8106666803359985, 0.8100000023841858, 0.8103333115577698, 0.8240000009536743, 0.8199999928474426, 0.8223333358764648, 0.8256666660308838, 0.8296666741371155, 0.8299999833106995, 0.8366666436195374, 0.8346666693687439, 0.8323333263397217, 0.8433333039283752, 0.8410000205039978, 0.840666651725769, 0.846666693687439, 0.8500000238418579, 0.8456666469573975, 0.8556666374206543, 0.8513333201408386, 0.8486666679382324, 0.8550000190734863, 0.8543333411216736, 0.8533333539962769]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [27, 66, 89, 50, 85, 46], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 2, 4, 2, 9, 5, 6, 5, 2, 0, 5, 8, 2, 0, 0, 2, 2, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [0, 3, 1, 0, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [31, 37, 70, 97, 2, 57, 35, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [3, 7, 7, 9, 3, 0, 1, 3, 2, 2, 5], [1, 3, 0, 2, 0, 2, 2], [59, 23, 13, 96, 41]], "fitness": -0.7651428580284119, "mapping_values": [1, 4, 4, 2, 2, 1, 23, 23, 16, 7, 4, 1, 0, 0, 0, 0, 7, 4, 3, 2], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.square(tf.math.add(tf.math.add(beta, tf.math.pow(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.math.square(grad)))), tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.math.add(beta, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.negative(grad)), grad)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.add(tf.math.add(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), sigma), tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2929470193951342, 2.2736566157751015, 2.2546839246723427, 2.2326126758369864, 2.2017308478783058, 2.1663407230137866, 2.121333891610743, 2.065674245664551, 1.994071853505685, 1.9137129203565622, 1.8201856008688881, 1.7261700094997954, 1.6310794343880344, 1.5353717209247, 1.4627123813052234, 1.3880639208337775, 1.3377071488188588, 1.2802911385915472, 1.2295191113061719, 1.195513456630795, 1.1611738952710533, 1.1273823230021887, 1.1081080310270062, 1.068693875888587, 1.048347921812964, 1.029284095578363, 1.0112900022407958, 0.9895030070431339, 0.9828461534657955, 0.9626150861502544, 0.9471589682864601, 0.92887876405692, 0.9358062676120003, 0.914935975310321, 0.9131810702841122, 0.8912825731474726, 0.8859021194291987, 0.8857700491956102, 0.8688159601295692, 0.8563027519906407, 0.8502305680026059, 0.8491853160109297, 0.8475594736912215, 0.8393216186967335, 0.8333754540277022, 0.818815445722039, 0.8175877813004295, 0.8120072597620305, 0.8054389941410508, 0.8083815245564745, 0.8003000919419887, 0.789105918106386, 0.7918334918298647, 0.7888652386918532, 0.7792162052266524, 0.7805030978099151, 0.7809524809081305, 0.7794897166524722, 0.7720553301202937, 0.7655386206984378, 0.7580821503658871, 0.754872695573994, 0.7492025747448462, 0.752154737006341, 0.7469163712587937, 0.7433330791658808, 0.7382267567113469, 0.7347184073151913, 0.7344033889262872, 0.7314119943459556, 0.7320412403367939, 0.7266912906161389, 0.7300214356498129, 0.7279215632743367, 0.7149976287866234, 0.7159722410157183, 0.7113079057787198, 0.7056748328617047, 0.7104960712443694, 0.7013901092388595, 0.7111883117160336, 0.707273887723523, 0.6995165455043749], "accuracy": [0.11187426000833511, 0.16259410977363586, 0.21120063960552216, 0.2620525658130646, 0.30445119738578796, 0.3365473449230194, 0.3605864346027374, 0.3947959244251251, 0.4221371114253998, 0.43243956565856934, 0.4563465714454651, 0.46849822998046875, 0.4873860776424408, 0.5130101442337036, 0.5281997323036194, 0.5336151123046875, 0.5532954931259155, 0.5659754276275635, 0.579051673412323, 0.5848633050918579, 0.5960903167724609, 0.6132611036300659, 0.6082419753074646, 0.6222427487373352, 0.6292431354522705, 0.6379606127738953, 0.6409985423088074, 0.6478668451309204, 0.6472064256668091, 0.658961832523346, 0.6643772125244141, 0.6753401160240173, 0.668339729309082, 0.6765288710594177, 0.6741513609886169, 0.6803592443466187, 0.683000922203064, 0.6860388517379761, 0.6890767216682434, 0.6913221478462219, 0.6947563290596008, 0.6947563290596008, 0.6955488324165344, 0.6984546184539795, 0.7018887996673584, 0.7071720957756042, 0.7037379741668701, 0.7046625018119812, 0.7141724824905396, 0.7047945857048035, 0.7153612375259399, 0.7124554514884949, 0.7164179086685181, 0.7131158113479614, 0.7145687341690063, 0.717870831489563, 0.7166820764541626, 0.7213049530982971, 0.7217012047767639, 0.7243428826332092, 0.7253995537757874, 0.7281733155250549, 0.7223616242408752, 0.7301545143127441, 0.72672039270401, 0.7275128960609436, 0.735041618347168, 0.733588695526123, 0.7387399077415466, 0.7334566116333008, 0.7310791015625, 0.7384757399559021, 0.7326641082763672, 0.7323999404907227, 0.7395324110984802, 0.7404569983482361, 0.7405890822410583, 0.7433628439903259, 0.7386078238487244, 0.7407211661338806, 0.7376832365989685, 0.7404569983482361, 0.7470611333847046], "val_loss": [1.953404494694301, 1.9348588671003069, 1.9143239430018835, 1.8901441437857491, 1.8600707054138184, 1.8215021405901228, 1.7731009892054967, 1.713406767163958, 1.6405906677246094, 1.5559091227395194, 1.4622157982417516, 1.365342685154506, 1.2694339752197266, 1.1825574806758337, 1.1064215047018868, 1.0411694731031145, 0.9855322156633649, 0.9406440258026123, 0.9001139232090541, 0.8686965703964233, 0.8403065034321376, 0.8142331838607788, 0.7931020089558193, 0.7737311805997577, 0.756872466632298, 0.741275497845241, 0.7295442308698382, 0.7147981439317975, 0.7035264457975116, 0.6935259614671979, 0.6843965223857335, 0.6745377438408988, 0.667835167476109, 0.6598577158791679, 0.6534695965903146, 0.6453231573104858, 0.6393377951213292, 0.6343783821378436, 0.6292845691953387, 0.6234063420976911, 0.6216435262135097, 0.6148510319846017, 0.611942103930882, 0.6090898173195975, 0.6048792089734759, 0.5975502899714878, 0.5954799652099609, 0.5910466228212629, 0.5856270108904157, 0.5842525788715908, 0.5803542137145996, 0.5765823296138218, 0.5753304447446551, 0.5740060295377459, 0.5696857656751361, 0.5670836653028216, 0.5648939609527588, 0.56234039579119, 0.5600720133100238, 0.5610645839146206, 0.555411526135036, 0.5544395957674298, 0.5504131828035627, 0.5499673060008458, 0.5465335335050311, 0.5469782522746495, 0.5435092619487217, 0.5413711241313389, 0.5404069253376552, 0.5386132001876831, 0.5367365905216762, 0.534755962235587, 0.5328854492732457, 0.5311474118913923, 0.5319327286311558, 0.5271219526018415, 0.5255296400615147, 0.5236749649047852, 0.5230469363076347, 0.5216780219759259, 0.520681347165789, 0.5215120145252773, 0.5180273566927228], "val_accuracy": [0.18799999356269836, 0.3269999921321869, 0.382999986410141, 0.4116666615009308, 0.4483333230018616, 0.48233333230018616, 0.49966666102409363, 0.5216666460037231, 0.5373333096504211, 0.5506666898727417, 0.5643333196640015, 0.5756666660308838, 0.5879999995231628, 0.6029999852180481, 0.6200000047683716, 0.6470000147819519, 0.6536666750907898, 0.6616666913032532, 0.6700000166893005, 0.67166668176651, 0.6819999814033508, 0.6863333582878113, 0.6846666932106018, 0.6853333115577698, 0.6913333535194397, 0.6986666917800903, 0.6990000009536743, 0.7059999704360962, 0.706333339214325, 0.7073333263397217, 0.7143333554267883, 0.7153333425521851, 0.7153333425521851, 0.7173333168029785, 0.7173333168029785, 0.7279999852180481, 0.7246666550636292, 0.7246666550636292, 0.7260000109672546, 0.7319999933242798, 0.7256666421890259, 0.7316666841506958, 0.7316666841506958, 0.734000027179718, 0.734000027179718, 0.7390000224113464, 0.7356666922569275, 0.7403333187103271, 0.7436666488647461, 0.7429999709129333, 0.7426666617393494, 0.7446666955947876, 0.746999979019165, 0.7453333139419556, 0.7450000047683716, 0.7490000128746033, 0.7490000128746033, 0.7519999742507935, 0.7523333430290222, 0.7473333477973938, 0.7570000290870667, 0.7513333559036255, 0.7583333253860474, 0.7563333511352539, 0.762333333492279, 0.7559999823570251, 0.7639999985694885, 0.7609999775886536, 0.7633333206176758, 0.7639999985694885, 0.765999972820282, 0.7633333206176758, 0.7663333415985107, 0.7670000195503235, 0.7620000243186951, 0.768666684627533, 0.768666684627533, 0.7703333497047424, 0.7689999938011169, 0.7693333625793457, 0.765999972820282, 0.765666663646698, 0.7699999809265137]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [62, 66, 89, 50, 85, 46], [0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [2, 5, 0, 0, 2, 9, 1, 6, 5, 2, 0, 2, 8, 2, 0, 0, 2, 4, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [3, 5, 1, 3, 0, 3, 3, 2, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [31, 37, 34, 97, 2, 57, 35, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [3, 7, 7, 9, 3, 0, 1, 3, 2, 2, 5], [2, 0, 0, 2, 0, 2, 2], [30, 23, 13, 96, 41]], "fitness": -0.11085714399814606, "mapping_values": [1, 1, 1, 0, 1, 1, 5, 5, 3, 2, 0, 1, 0, 0, 0, 0, 7, 4, 3, 3], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.square(grad), tf.math.add(beta, tf.math.negative(grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.add(tf.math.add(beta, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3002056964966977, 2.2996336247045224, 2.300472299641055, 2.3015001785989764, 2.3016429726221874, 2.3023058726661287, 2.3024818574149357], "accuracy": [0.09377889335155487, 0.09985470771789551, 0.10091137140989304, 0.10196803510189056, 0.10566636174917221, 0.1002509593963623, 0.10196803510189056], "val_loss": [1.9703511510576521, 1.9712132045200892, 1.972330025264195, 1.972982406616211, 1.9734341757638114, 1.9736007281712122, 1.9736405781337194], "val_accuracy": [0.07400000095367432, 0.10866666585206985, 0.1066666692495346, 0.08933333307504654, 0.08833333104848862, 0.10300000011920929, 0.10199999809265137]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 9, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [62, 66, 89, 50, 85, 46], [0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 2, 3, 5, 9, 8, 6, 5, 2, 0, 2, 8, 9, 2, 0, 2, 2, 2, 3, 5, 3, 1, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [0, 5, 1, 0, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [2, 37, 34, 73, 2, 57, 35, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [3, 7, 7, 9, 3, 0, 1, 3, 2, 2, 5], [1, 0, 0, 2, 0, 2, 2], [30, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 1, 19, 19, 14, 5, 5, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.square(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(beta, grad)))), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.317272600008433, 2.3687080065997175, 2.466825195386063, 2.899926193764087, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06538105756044388, 0.026020340621471405, 0.015849953517317772, 0.0169066172093153, 0.1006472036242485, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.010307584490095, 2.0703844342912947, 2.207118238721575, 4.628619194030762, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.004333333112299442, 0.004000000189989805, 0.006666666828095913, 0.09733333438634872, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [62, 66, 89, 50, 85, 46], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 2, 2, 2, 8, 9, 1, 6, 3, 2, 5, 1, 2, 2, 0, 8, 2, 2, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [0, 5, 1, 0, 2, 3, 3, 1, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [31, 37, 34, 97, 2, 57, 35, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [3, 7, 7, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [5, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 1, 38, 38, 23, 15, 4, 1, 0, 0, 0, 0, 3, 1, 2, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)))), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.sqrt(grad))), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha)), tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, beta))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.sqrt(grad)), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, alpha), grad), tf.math.add(grad, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(beta)), grad)))))), tf.math.add(beta, grad)))))), tf.math.multiply(tf.math.add(beta, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [71, 66, 89, 50, 85, 46], [1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 8, 2, 4, 2, 9, 1, 6, 5, 2, 0, 2, 0, 3, 0, 0, 2, 2, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [4, 3, 5, 1, 0, 3, 2, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [31, 72, 64, 97, 2, 57, 35, 9, 54, 64], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0], [5, 1, 7, 9, 3, 0, 1, 3, 2, 2, 5], [3, 0, 0, 2, 0, 2, 2, 3, 2, 3], [30, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 8, 8, 4, 4, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.sqrt(grad)), tf.math.add(beta, tf.math.add(grad, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [1226545011.6317596, 23685155978.90477, 110912790358.12231, 306623259330.56134, 664568652540.9906, 1205733231028.326], "accuracy": [0.10645885765552521, 0.09800554811954498, 0.1022322028875351, 0.10038304328918457, 0.10051512718200684, 0.10342095047235489], "val_loss": [4654821522.285714, 37227420525.71429, 125630199515.42857, 297774481408.0, 581574702811.4286, 1004943816411.4286], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [62, 66, 89, 50, 85, 46], [0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [2, 5, 5, 4, 2, 9, 1, 3, 9, 2, 0, 2, 2, 2, 0, 0, 2, 2, 2, 6, 5, 3, 4, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [0, 1, 1, 0, 0, 3, 3, 0, 1, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [31, 37, 34, 80, 2, 57, 35, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 2, 2, 9, 3, 0, 1, 3, 2, 2, 5, 1, 3, 4, 4, 5], [1, 0, 2, 2, 0, 2, 2, 0, 0, 1, 3, 1], [30, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 9, 9, 6, 3, 2, 1, 0, 0, 0, 0, 28, 16, 12, 5], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.pow(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))))))), alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.add(tf.math.add(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.square(beta), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))), beta), tf.math.subtract(tf.math.multiply(tf.math.pow(beta, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.square(alpha))), sigma))), alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [94, 66, 89, 50, 85, 46], [0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 2, 4, 2, 9, 1, 6, 5, 2, 0, 2, 0, 1, 0, 4, 1, 2, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [0, 1, 1, 0, 0, 3, 3, 0, 1, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [31, 37, 34, 80, 2, 57, 35, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [3, 0, 2, 9, 3, 0, 1, 3, 2, 2, 5], [1, 0, 0, 2, 0, 2, 2], [30, 23, 39, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 10, 10, 6, 4, 3, 1, 0, 0, 0, 0, 6, 4, 2, 2], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.square(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(alpha, tf.math.pow(alpha, tf.math.add(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.negative(tf.math.add(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [17373.411687858006, 326755.9250759477, 1519368.6627592128, 4187649.8963809274, 9061079.175141988, 16422594.454629507], "accuracy": [0.10619468986988068, 0.09800554811954498, 0.10236428678035736, 0.10038304328918457, 0.10051512718200684, 0.10355303436517715], "val_loss": [64845.966517857145, 511274.53571428574, 1717713.4642857143, 4062582.8571428573, 7924301.428571428, 13681273.142857144], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [62, 66, 89, 50, 85, 46], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 3, 2, 5, 2, 9, 1, 6, 5, 2, 5, 2, 2, 2, 0, 0, 2, 4, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [0, 1, 1, 0, 0, 3, 3, 0, 1, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [31, 37, 34, 97, 2, 57, 35, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0], [3, 2, 2, 9, 3, 0, 1, 3, 2, 2, 5, 5, 1, 9, 7, 8, 5, 5, 9], [1, 0, 0, 2, 0, 2, 2, 0, 0], [30, 23, 87, 96, 41, 21]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 12, 12, 7, 5, 4, 1, 0, 0, 0, 0, 7, 4, 3, 3], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.square(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), alpha), tf.math.subtract(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3031509815662483, 2.3026431620538257, 2.3031111054212, 2.303220253578975, 2.302800240754105, 2.3029008717537556, 2.3029249101156855], "accuracy": [0.0936468094587326, 0.10130762308835983, 0.09496764093637466, 0.09642054885625839, 0.09800554811954498, 0.09681680053472519, 0.09919429570436478], "val_loss": [1.9738076073782784, 1.9736717087881905, 1.9737247739519392, 1.973846708025251, 1.9737599236624581, 1.9738922800336565, 1.9739118303571428], "val_accuracy": [0.09933333098888397, 0.10466666519641876, 0.10466666519641876, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [62, 66, 89, 50, 85, 46], [0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 2, 4, 2, 9, 1, 8, 8, 2, 5, 2, 2, 2, 0, 0, 2, 4, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [0, 3, 1, 2, 1, 1, 3, 3, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [6, 98, 78, 97, 2, 15, 35, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [3, 7, 4, 9, 3, 0, 1, 3, 2, 2, 5], [1, 0, 0, 2, 0, 2, 2], [87, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [40512714000.333916, 6159097064054.008, 106284115653444.94, 746212989304429.5, 3308443876209648.0, 1.0774533511189838e+16], "accuracy": [0.10645885765552521, 0.09800554811954498, 0.10236428678035736, 0.10038304328918457, 0.10038304328918457, 0.10328886657953262], "val_loss": [338665930752.0, 18257457184768.0, 195968361449764.56, 1068297799560630.9, 4001626398392320.0, 1.180482682793867e+16], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [62, 66, 89, 50, 85, 46], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 2, 4, 2, 9, 1, 6, 0, 4, 0, 2, 8, 2, 0, 0, 5, 2, 2, 6, 5, 3, 6, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [0, 5, 1, 0, 0, 3, 3, 0, 1, 3, 2, 1, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [31, 37, 34, 97, 2, 57, 35, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [3, 7, 7, 1, 3, 0, 1, 3, 2, 2, 5], [3, 0, 0, 2, 0, 2, 2, 0, 2, 2], [30, 64, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 10, 10, 6, 4, 3, 1, 0, 0, 0, 0, 21, 11, 10, 4], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.square(tf.math.add(tf.math.add(beta, tf.math.pow(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.add(grad, alpha))), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.add(sigma, tf.math.add(tf.math.subtract(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.negative(tf.math.subtract(tf.math.multiply(beta, tf.math.add(tf.math.add(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), beta), beta)), tf.math.square(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), beta))), beta)", "other_info": {"loss": [2.3023762768758145, 2.3035288752345613, 2.316755753025765, 16.255251559598996, 1583.175038283417, 209745.3952004359, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10342095047235489, 0.10328886657953262, 0.10394927859306335, 0.0952318087220192, 0.09972262382507324, 0.09470347315073013, 0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9741198675973075, 1.9770859309605189, 2.0258536338806152, 130.3023638044085, 8477.42075892857, 1082245.2857142857, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09733333438634872, 0.0989999994635582, 0.0989999994635582, 0.0976666659116745, 0.09933333098888397, 0.10000000149011612, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 4, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [62, 66, 89, 50, 85, 46], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 2, 4, 2, 9, 5, 6, 5, 2, 2, 1, 2, 2, 0, 0, 2, 4, 4, 6, 5, 5, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [2, 5, 1, 2, 1, 2, 3, 3, 2, 3, 2, 3, 3, 2, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [31, 37, 33, 97, 2, 57, 35, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 1, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 0, 0, 2, 0, 2, 2], [75, 38, 52, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [62, 66, 89, 50, 85, 46], [1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 2, 4, 2, 9, 5, 6, 5, 2, 2, 1, 2, 2, 0, 0, 2, 4, 4, 6, 5, 5, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [2, 5, 1, 2, 1, 2, 3, 3, 2, 3, 2, 3, 3, 2, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [31, 37, 33, 97, 2, 57, 35, 9, 54, 64], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [3, 1, 7, 8, 3, 0, 1, 2, 2, 6, 5, 5, 4, 6, 8, 4, 4, 2, 2, 9], [0, 0, 3, 2, 0, 2, 2, 0, 0, 1, 1, 0, 2, 0, 1, 1, 0, 0], [66, 23, 13, 96, 87, 17, 32, 3, 46, 82, 91]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 17, 9, 8, 4], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(tf.math.sqrt(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.negative(tf.math.subtract(sigma, tf.math.add(beta, tf.math.add(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), beta)))), beta)), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [897557272.7988446, 17331360387.262978, 81157482323.14674, 224361787910.83026, 486280933466.34894, 882265454930.4028], "accuracy": [0.10645885765552521, 0.09813763201236725, 0.1022322028875351, 0.10038304328918457, 0.10051512718200684, 0.10355303436517715], "val_loss": [3406175744.0, 27240429860.57143, 91926036480.0, 217888405211.42856, 425548775424.0, 735329349046.8572], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [93, 66, 89, 50, 85, 46], [0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 2, 4, 2, 9, 4, 6, 5, 2, 0, 2, 0, 3, 0, 0, 2, 2, 2, 6, 6, 1, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [0, 5, 1, 0, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [31, 37, 45, 97, 86, 57, 35, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [3, 7, 7, 9, 3, 0, 1, 3, 2, 2, 5, 0], [1, 0, 0, 2, 0, 2, 2, 0], [30, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 43, 43, 26, 17, 6, 1, 0, 0, 0, 0, 20, 12, 8, 5], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.square(tf.math.add(tf.math.add(beta, tf.math.pow(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))), alpha)), tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.square(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.negative(tf.math.negative(grad)), grad)))), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(grad, beta)), grad))))), tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), tf.math.add(grad, tf.math.add(beta, grad)))))))), tf.math.add(beta, tf.math.subtract(tf.math.add(grad, beta), grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.add(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.math.add(tf.math.square(beta), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), beta), tf.math.negative(beta))), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [82, 66, 89, 50, 85, 46], [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [1, 5, 2, 4, 4, 9, 6, 0, 5, 2, 0, 2, 8, 2, 0, 0, 2, 2, 2, 6, 0, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [0, 5, 1, 3, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [31, 34, 34, 97, 2, 57, 35, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [2, 7, 8, 0, 3, 0, 1, 3, 2, 2, 4, 1, 3, 6, 5, 2, 6, 6, 6, 1, 4, 9, 0, 1, 0, 4, 9, 1, 3, 9, 4, 0, 1], [2, 0, 0, 2, 0, 2, 2, 0, 0, 3, 1, 0, 1, 3, 2, 3, 3, 2, 1, 1, 3, 2, 2, 1, 3], [66, 23, 13, 96, 87, 32, 66, 3, 46, 82, 91]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 0, 10, 10, 6, 4, 2, 1, 0, 0, 0, 0, 7, 4, 3, 2], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.negative(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.square(tf.math.add(tf.math.pow(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.pow(grad, tf.math.add(beta, alpha))), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.negative(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))), tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [6, 3, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [62, 66, 89, 50, 85, 46], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 2, 4, 2, 9, 5, 6, 5, 2, 2, 1, 2, 2, 0, 0, 2, 4, 4, 6, 5, 5, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [3, 5, 1, 0, 0, 3, 3, 1, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [31, 37, 33, 97, 2, 57, 35, 9, 54, 64], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [3, 7, 7, 9, 3, 0, 1, 3, 2, 2, 5], [1, 0, 0, 2, 0, 2, 2], [30, 23, 13, 96, 41]], "fitness": -0.09799999743700027, "mapping_values": [1, 5, 5, 2, 3, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 3, 1, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))", "other_info": {"loss": [38499.44100292021, 1600914.3078523313, 5609757.840707964, 12601868.980451724, 23269223.595562015, 36543456.619204864, 56886544.93039229, 82507425.36626601, 113770236.00792497, 149039547.05058777, 194519380.4337604, 246346598.77744022, 308153709.3604544, 375368689.4687624, 461179627.08228767], "accuracy": [0.10500594228506088, 0.08479725569486618, 0.07885351777076721, 0.0796460211277008, 0.08400475233793259, 0.08374059200286865, 0.08189142495393753, 0.08017434924840927, 0.08770307898521423, 0.08849557489156723, 0.08770307898521423, 0.09351472556591034, 0.0944393053650856, 0.09642054885625839, 0.09192973375320435], "val_loss": [388430.0, 1816108.107142857, 4692259.0, 10017075.42857143, 16998615.42857143, 27453934.85714286, 47986988.571428575, 68362260.57142857, 94503227.42857143, 125902354.28571428, 163488973.7142857, 207620539.42857143, 259039232.0, 318592237.71428573, 386118208.0], "val_accuracy": [0.05066666752099991, 0.07000000029802322, 0.08166666328907013, 0.0949999988079071, 0.0976666659116745, 0.09799999743700027, 0.0976666659116745, 0.0976666659116745, 0.09966666996479034, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [62, 66, 89, 50, 85, 46], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 2, 4, 2, 9, 1, 6, 5, 2, 0, 2, 8, 2, 0, 0, 2, 2, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [3, 5, 1, 0, 0, 3, 3, 0, 2, 0, 2, 3, 3, 2, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [31, 37, 34, 97, 2, 57, 35, 9, 54, 64], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [3, 7, 7, 9, 3, 0, 1, 3, 2, 2, 5, 9], [1, 2, 0, 2, 0, 2, 2], [30, 23, 13, 96, 41]], "fitness": -0.08885714411735535, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3013525829181662, 2.3028435771019073, 2.306669985062379, 2.3111934105103846, 2.3108737570750417, 2.3153057364802776, 2.3186973490656455, 2.3260936407034567, 2.3325165351935193, 2.343561213266234, 2.3748264023026677, 32877058828973.11, 2.4138630613627576, 2.4875238404974978, 2.716259490576056, 3.714644617738977], "accuracy": [0.09166556596755981, 0.08809932321310043, 0.0870426595211029, 0.08347642421722412, 0.08255184441804886, 0.07951393723487854, 0.07475894689559937, 0.068022720515728, 0.080042265355587, 0.07924976944923401, 0.07634394615888596, 0.09549596905708313, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9723528453281947, 1.973569461277553, 1.9752885954720634, 1.9776910373142786, 1.9797769955226354, 1.9823172433035714, 1.9850591250828333, 1.9892518860953194, 1.9956670488630022, 2.0083628382001604, 2.06230674471174, 2.0564673968723843, 2.1000681604657854, 2.2117867469787598, 2.637652805873326, 4.2960003444126675], "val_accuracy": [0.029666665941476822, 0.023333333432674408, 0.020999999716877937, 0.023666666820645332, 0.02500000037252903, 0.032999999821186066, 0.0430000014603138, 0.06366666406393051, 0.08399999886751175, 0.09666666388511658, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [62, 66, 89, 50, 85, 46], [0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 2, 2, 2, 1, 1, 6, 5, 2, 0, 2, 8, 2, 0, 0, 6, 1, 2, 6, 5, 3, 9, 2, 2, 8, 2, 3, 9, 0, 6, 3, 0, 2, 8, 0, 7, 2, 2, 0, 2, 1, 6, 0, 2], [0, 5, 1, 2, 0, 3, 3, 3, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 2, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [31, 45, 34, 73, 2, 57, 35, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [5, 7, 7, 9, 3, 0, 1, 3, 2, 2, 5, 3, 9], [1, 0, 0, 2, 0, 2, 2], [11, 78, 75, 96, 41]], "fitness": -0.08171428740024567, "mapping_values": [1, 1, 1, 0, 1, 0, 6, 6, 3, 3, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, alpha)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.square(alpha)", "other_info": {"loss": [2.3005776134826537, 2.3001597311833373, 2.3014917582757657, 2.302037277241834, 2.2999657028622993, 2.300281708061955, 2.3006487035354555, 2.3001716534664065, 2.2999111154627068, 2.299827353860787, 2.299569271559004, 2.2996955387753863, 2.300350767825148, 2.2999077312478047, 2.3004830039456032, 2.3008071329489423, 2.3007588867088744, 2.2998971351464315], "accuracy": [0.09100515395402908, 0.09694888442754745, 0.09800554811954498, 0.09985470771789551, 0.09694888442754745, 0.09826971590518951, 0.09602430462837219, 0.09774138033390045, 0.1018359512090683, 0.1026284471154213, 0.09628847241401672, 0.10460969805717468, 0.10328886657953262, 0.10051512718200684, 0.09866596013307571, 0.09800554811954498, 0.0940430611371994, 0.09853387624025345], "val_loss": [1.9708029883248466, 1.9704156603131975, 1.9701479503086634, 1.9699415479387556, 1.9700116430010115, 1.9700863020760673, 1.9699926376342773, 1.9698482240949358, 1.9698349407741003, 1.9699639592851912, 1.9701414108276367, 1.970414366040911, 1.9705895015171595, 1.9707425662449427, 1.9709019660949707, 1.97105073928833, 1.9711647033691406, 1.9713403156825475], "val_accuracy": [0.04333333298563957, 0.04833333194255829, 0.05400000140070915, 0.05966666713356972, 0.06400000303983688, 0.06800000369548798, 0.07233333587646484, 0.07433333247900009, 0.07533333450555801, 0.07500000298023224, 0.07433333247900009, 0.07666666805744171, 0.07833333313465118, 0.07833333313465118, 0.07699999958276749, 0.07533333450555801, 0.07466666400432587, 0.07400000095367432]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [62, 66, 89, 50, 85, 46], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 2, 4, 2, 9, 5, 6, 5, 2, 2, 1, 2, 2, 0, 0, 2, 4, 4, 6, 5, 5, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [2, 5, 1, 2, 1, 2, 3, 3, 2, 3, 2, 3, 3, 2, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [31, 37, 33, 97, 2, 57, 35, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [5, 7, 7, 9, 3, 0, 1, 3, 2, 2, 5, 3, 9], [1, 0, 0, 2, 0, 2, 2], [11, 78, 75, 96, 41]], "fitness": -0.040571428835392, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.negative(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.square(alpha)", "other_info": {"loss": [2.3009325405862024, 2.3011912332471054, 2.3030103347273454, 2.304339075888373, 2.3020287724596837, 2.3026094563239443, 2.3029764240538486, 2.3033177039532253, 2.3027772938712334], "accuracy": [0.09113723784685135, 0.09245806187391281, 0.09576013684272766, 0.09166556596755981, 0.09285431355237961, 0.09470347315073013, 0.08849557489156723, 0.0882314071059227, 0.09087307006120682], "val_loss": [1.971440315246582, 1.9714401790073939, 1.971439974648612, 1.9714391572134835, 1.9714386803763253, 1.971438203539167, 1.971437590462821, 1.9714367730276925, 1.9714362280709403], "val_accuracy": [0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03533333167433739, 0.03533333167433739, 0.03533333167433739, 0.03533333167433739, 0.03533333167433739, 0.03533333167433739]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [1, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [62, 66, 89, 50, 85, 46], [0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [2, 5, 5, 4, 2, 9, 1, 3, 9, 2, 0, 2, 2, 2, 0, 0, 2, 2, 2, 6, 5, 3, 4, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [2, 5, 1, 2, 1, 2, 3, 3, 2, 3, 2, 3, 3, 2, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [31, 37, 33, 97, 2, 57, 35, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1], [3, 1, 7, 9, 3, 0, 1, 3, 2, 2, 5, 5, 9, 1, 3, 6, 7, 6, 8, 2, 0, 5, 3, 3, 9, 6, 2, 8, 4, 8, 7, 1, 7, 0, 9, 4, 3, 9], [1, 2, 1, 2, 0, 2, 2, 1, 2, 3, 2, 1, 0, 3, 1, 1, 1, 1, 2, 0], [75, 23, 52, 96, 41, 85, 22, 24]], "fitness": -0.040571428835392, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 58, 38, 20, 8], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(alpha, tf.math.negative(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.math.add(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.negative(alpha), tf.math.subtract(tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.square(alpha))), beta), tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.multiply(beta, beta), alpha)), tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(tf.math.negative(sigma), beta)), tf.math.square(tf.math.multiply(alpha, tf.math.multiply(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))))), tf.math.divide_no_nan(sigma, tf.math.add(tf.math.sqrt(tf.math.pow(tf.math.sqrt(tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.negative(alpha)), alpha), tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))), tf.math.pow(alpha, tf.math.multiply(beta, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))), tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [2.300932491113796, 2.3011913142105405, 2.303010456219735, 2.30434028149092, 2.3020302839345934, 2.3026116470918363], "accuracy": [0.09113723784685135, 0.09245806187391281, 0.09576013684272766, 0.09166556596755981, 0.09285431355237961, 0.09470347315073013], "val_loss": [1.971440383366176, 1.971440383366176, 1.971440383366176, 1.971440383366176, 1.971440383366176, 1.971440383366176], "val_accuracy": [0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161]}}]