[{"genotype": [[0], [1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [40, 66, 89, 50, 85, 46], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 0, 0, 6, 4, 6, 2, 2, 5, 8, 4, 2, 0, 2, 0, 0, 2, 2, 8, 5, 2, 3, 9, 9, 1, 2, 4, 3, 9, 2, 6, 3, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 1, 1, 2, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [73, 37, 21, 97, 70, 57, 60, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 0, 0, 2, 0, 2, 2, 0], [30, 23, 13, 96, 41, 62]], "fitness": -0.8431428670883179, "mapping_values": [1, 3, 3, 1, 2, 1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [1.9423380120397953, 0.996905365096989, 0.7651482621487562, 0.6816546060720596, 0.622615107644771, 0.5773953252212798, 0.5369526469995632, 0.5167408516976686, 0.49630594509404646, 0.47870233110181093, 0.45251235735099926, 0.4376654843998434, 0.4213266249826288, 0.4111655226291966, 0.3855246417376942, 0.3711635694921355, 0.3648776576590182, 0.3524901776927227, 0.3420124088713301, 0.3311194333189656, 0.33275263305306196, 0.33318739392187113, 0.31203790287520544, 0.3171749188403695, 0.2978982312875165, 0.2914082882560523, 0.2812680115576638, 0.2653695366023916, 0.2611525903355412, 0.25207717604703905, 0.24886391207471484, 0.25070838432790044, 0.24731987003463843, 0.2350878611693151, 0.22922454177624735, 0.22315296491753422, 0.21292303241577762, 0.20963115081645714, 0.20171997534671338, 0.20445520986915186, 0.20415802955580206, 0.19116195085900192, 0.18233091340773866, 0.17986789226862637, 0.1813224679435548, 0.1760175549583255, 0.16114238377701354], "accuracy": [0.34222692251205444, 0.637432336807251, 0.7078325152397156, 0.7428345084190369, 0.7597411274909973, 0.7754589915275574, 0.7957997918128967, 0.8086118102073669, 0.8099326491355896, 0.8178576231002808, 0.8261788487434387, 0.8367455005645752, 0.8421608805656433, 0.8499537706375122, 0.8549728989601135, 0.8625016212463379, 0.863558292388916, 0.8668603897094727, 0.8725399374961853, 0.8770307898521423, 0.874389111995697, 0.8765024542808533, 0.8803328275680542, 0.8815215826034546, 0.8893144726753235, 0.8868049383163452, 0.8939374089241028, 0.896446943283081, 0.898428201675415, 0.9008057117462158, 0.9012019634246826, 0.9037115573883057, 0.90423983335495, 0.9070135951042175, 0.9133535623550415, 0.9126931428909302, 0.9199577569961548, 0.917580246925354, 0.9218068718910217, 0.9203540086746216, 0.9196935892105103, 0.9276185631752014, 0.9310526847839355, 0.928411066532135, 0.9281468987464905, 0.9298639297485352, 0.9377889037132263], "val_loss": [0.893979515348162, 0.6161332981927055, 0.5485923290252686, 0.517937183380127, 0.4658195291246687, 0.4415022475378854, 0.43743869236537386, 0.3993756430489676, 0.40727244104657856, 0.37799781560897827, 0.3677377275058201, 0.3627517308507647, 0.36339482239314486, 0.34820379529680523, 0.33526930638722013, 0.33745815072740826, 0.33263650962284635, 0.327467109475817, 0.321188679763249, 0.31998311621802195, 0.33297436577933176, 0.33004820346832275, 0.32290797574179514, 0.3384260194642203, 0.3313335265432085, 0.31509459018707275, 0.32751080819538664, 0.32342900548662457, 0.31615084409713745, 0.3421021785054888, 0.3219492520604815, 0.33699895654405865, 0.32315180131367277, 0.3232433114733015, 0.3241526484489441, 0.3305091517312186, 0.33083249841417584, 0.32825721161706106, 0.32716509274074007, 0.3364466428756714, 0.3361017107963562, 0.3280891946383885, 0.33920529059001375, 0.34277710744312834, 0.33500756536211285, 0.3447977049010141, 0.3582020572253636], "val_accuracy": [0.6336666941642761, 0.7183333039283752, 0.7490000128746033, 0.7726666927337646, 0.7903333306312561, 0.8036666512489319, 0.8053333163261414, 0.8240000009536743, 0.8176666498184204, 0.831333339214325, 0.8426666855812073, 0.8389999866485596, 0.840666651725769, 0.8526666760444641, 0.8539999723434448, 0.8586666584014893, 0.8533333539962769, 0.8539999723434448, 0.8583333492279053, 0.862333357334137, 0.843999981880188, 0.8616666793823242, 0.862333357334137, 0.8569999933242798, 0.8663333058357239, 0.8629999756813049, 0.862333357334137, 0.8683333396911621, 0.8679999709129333, 0.8603333234786987, 0.8709999918937683, 0.8579999804496765, 0.8633333444595337, 0.8693333268165588, 0.8723333477973938, 0.8706666827201843, 0.8703333139419556, 0.8693333268165588, 0.875, 0.875, 0.8730000257492065, 0.878000020980835, 0.8679999709129333, 0.8766666650772095, 0.8733333349227905, 0.8756666779518127, 0.8726666569709778]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [40, 66, 89, 50, 85, 46], [1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 0, 0, 6, 4, 6, 2, 2, 5, 8, 4, 2, 0, 2, 0, 0, 2, 2, 8, 5, 2, 3, 9, 9, 1, 2, 4, 3, 9, 2, 6, 3, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [5, 4, 1, 2, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [73, 37, 21, 97, 70, 57, 60, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 0, 0, 2, 0, 2, 2, 0], [30, 23, 13, 96, 41, 62]], "fitness": -0.8351428508758545, "mapping_values": [1, 3, 3, 1, 2, 1, 4, 4, 2, 2, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.negative(grad), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [1.9423303806613292, 0.9964940546053653, 0.7647843995917475, 0.6846821501412176, 0.6237510715997168, 0.5766783142291386, 0.536125039616596, 0.517254892597424, 0.4937236526457704, 0.47679496117712655, 0.4479712983321489, 0.43758428976551855, 0.4166760865636805, 0.412812803584697, 0.3843224500786312, 0.3745869376033982, 0.36928311598110414, 0.35803699912632525, 0.3446225516627005, 0.3377370682563827, 0.33035279016657876, 0.32630100366446035, 0.3083668364438997, 0.3067648538296422, 0.29418971044213277, 0.29223172600636815, 0.27278091891834433, 0.2663556956470194, 0.26106239343166604, 0.25220795548303865, 0.2599621591881644, 0.24772368155969934, 0.24871987256753744, 0.24275482994194406, 0.23452603763057697, 0.22366288938085874, 0.21656248062404235, 0.2119979048547586, 0.19602463365963121, 0.2007823199321093, 0.20238606638250853, 0.1884183152169757, 0.18743615128171756, 0.1807058816395573, 0.1780541714971186, 0.17378477502642306, 0.16170498192617372, 0.16389855733794495, 0.16367630169667494, 0.15279413075762624, 0.15271379236240648, 0.14508627831400536, 0.1541465993007696, 0.14171809570947738], "accuracy": [0.34222692251205444, 0.6376964449882507, 0.7082287669181824, 0.7430986762046814, 0.7609298825263977, 0.7770439982414246, 0.7969884872436523, 0.8090080618858337, 0.8109893202781677, 0.8175934553146362, 0.8298771381378174, 0.8354246616363525, 0.8444063067436218, 0.8450667262077332, 0.8561616539955139, 0.8614450097084045, 0.8619733452796936, 0.867520809173584, 0.867520809173584, 0.8698983192443848, 0.8776912093162537, 0.8784837126731873, 0.8780874609947205, 0.8857482671737671, 0.8902390599250793, 0.8887861371040344, 0.8947299122810364, 0.8945978283882141, 0.9002773761749268, 0.9010698795318604, 0.8993527889251709, 0.9037115573883057, 0.9013340473175049, 0.9045040011405945, 0.90423983335495, 0.913089394569397, 0.9174481630325317, 0.9162594079971313, 0.9225993752479553, 0.9203540086746216, 0.9207502603530884, 0.9251089692115784, 0.9276185631752014, 0.9274864792823792, 0.9281468987464905, 0.9313168525695801, 0.9380530714988708, 0.9351472854614258, 0.9331660270690918, 0.9401664137840271, 0.9399022459983826, 0.9454497694969177, 0.9406947493553162, 0.9454497694969177], "val_loss": [0.8940145288194928, 0.6159848655973162, 0.5479514428547451, 0.5217639889035907, 0.4663455145699637, 0.4419317671230861, 0.4379397545542036, 0.39819997549057007, 0.4034974830491202, 0.37596493107931955, 0.36841669252940584, 0.36005693674087524, 0.36997357436588835, 0.34946125745773315, 0.3384664399283273, 0.33875558206013273, 0.339799165725708, 0.3313782385417393, 0.321108945778438, 0.32196427243096487, 0.3317634548459734, 0.3263841101101467, 0.31763854197093416, 0.3281921574047634, 0.332740238734654, 0.31340551376342773, 0.3186617834227426, 0.32093100036893574, 0.3147071599960327, 0.33550162826265606, 0.31928254876817974, 0.3387287599699838, 0.31972907270704, 0.3209087422915867, 0.3230954664094107, 0.32624566555023193, 0.3293308615684509, 0.3173496893474034, 0.3243282863071987, 0.3285905548504421, 0.3305879405566624, 0.3277581419263567, 0.341518087046487, 0.340231580393655, 0.3503912091255188, 0.3516985433442252, 0.347913248198373, 0.35430431365966797, 0.3431741680417742, 0.3564421023641314, 0.3653608560562134, 0.37909809180668425, 0.348871043750218, 0.3652880447251456], "val_accuracy": [0.6346666812896729, 0.7160000205039978, 0.746999979019165, 0.7693333625793457, 0.7873333096504211, 0.8043333292007446, 0.8063333630561829, 0.824999988079071, 0.8213333487510681, 0.8309999704360962, 0.8403333425521851, 0.8386666774749756, 0.8426666855812073, 0.8550000190734863, 0.8539999723434448, 0.8543333411216736, 0.846666693687439, 0.8603333234786987, 0.862666666507721, 0.8619999885559082, 0.8526666760444641, 0.8636666536331177, 0.8633333444595337, 0.8566666841506958, 0.8600000143051147, 0.8666666746139526, 0.8666666746139526, 0.8656666874885559, 0.8696666955947876, 0.8586666584014893, 0.8656666874885559, 0.8606666922569275, 0.8709999918937683, 0.8686666488647461, 0.8706666827201843, 0.8703333139419556, 0.8706666827201843, 0.871999979019165, 0.8723333477973938, 0.875333309173584, 0.8766666650772095, 0.8706666827201843, 0.871999979019165, 0.8776666522026062, 0.8756666779518127, 0.8796666860580444, 0.8799999952316284, 0.8759999871253967, 0.8809999823570251, 0.8790000081062317, 0.8793333172798157, 0.8763333559036255, 0.8790000081062317, 0.8776666522026062]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [40, 66, 89, 50, 85, 46], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 0, 0, 6, 4, 6, 2, 2, 5, 8, 4, 2, 0, 2, 0, 0, 2, 2, 8, 5, 2, 3, 9, 9, 1, 2, 4, 3, 9, 2, 6, 3, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 4, 1, 2, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [73, 37, 21, 97, 70, 57, 60, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 0, 0, 2, 0, 2, 2, 0], [30, 23, 13, 96, 41, 62]], "fitness": -0.7985714077949524, "mapping_values": [1, 3, 3, 1, 2, 1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.1613639680511993, 1.539181525177251, 1.1660850923830697, 1.0274587154325445, 0.905625800871657, 0.8704699180334345, 0.7920740180799061, 0.7789756912738577, 0.7364604913122413, 0.7477067971683024, 0.6914578718500461, 0.7058058636551598, 0.6999040019195691, 0.6562377458723418, 0.6763913289682819, 0.6436646335932085, 0.6386018162547731, 0.6421006432519282, 0.6149077223685944, 0.6161117093784462, 0.5971429273358205, 0.5999501096479581, 0.5930612265567706, 0.5855380689242827, 0.5909197027216246, 0.5750998017448146, 0.569699465519937], "accuracy": [0.28424251079559326, 0.46413949131965637, 0.585391640663147, 0.6263373494148254, 0.6725663542747498, 0.6774534583091736, 0.7135120630264282, 0.7082287669181824, 0.7253995537757874, 0.7243428826332092, 0.7452120184898376, 0.7298903465270996, 0.739928662776947, 0.7549861073493958, 0.7483819723129272, 0.7582882046699524, 0.7589486241340637, 0.7565711140632629, 0.7714964747428894, 0.7697794437408447, 0.7792893648147583, 0.780610203742981, 0.7774402499198914, 0.7824593782424927, 0.77677983045578, 0.7843085527420044, 0.7881389260292053], "val_loss": [1.4420888083321708, 0.9712578228541783, 0.8298382588795253, 0.6732779400689262, 0.6767867122377668, 0.6085189751216343, 0.5865103006362915, 0.5971875190734863, 0.5703411783490863, 0.54209417956216, 0.5486921753202166, 0.6271118266241891, 0.5379959004265922, 0.5175971644265311, 0.5005195481436593, 0.4961645943777902, 0.5094378675733294, 0.49303076948438374, 0.4971940006528582, 0.46635215623038156, 0.5098963635308402, 0.46309288910457064, 0.4812980038779123, 0.49098004613603863, 0.4743427038192749, 0.48004874161311556, 0.44504930291857037], "val_accuracy": [0.5270000100135803, 0.6006666421890259, 0.6306666731834412, 0.7120000123977661, 0.6813333630561829, 0.7179999947547913, 0.7143333554267883, 0.7160000205039978, 0.7450000047683716, 0.7513333559036255, 0.746999979019165, 0.7059999704360962, 0.75, 0.7649999856948853, 0.7603333592414856, 0.7766666412353516, 0.7663333415985107, 0.7820000052452087, 0.778333306312561, 0.7913333177566528, 0.7720000147819519, 0.7946666479110718, 0.7776666879653931, 0.7643333077430725, 0.781333327293396, 0.7743333578109741, 0.7913333177566528]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [40, 66, 89, 50, 85, 46], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [7, 0, 0, 6, 4, 6, 2, 2, 5, 8, 4, 2, 0, 2, 0, 0, 2, 2, 8, 5, 2, 3, 9, 9, 1, 2, 4, 3, 9, 2, 6, 3, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 4, 1, 2, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [61, 37, 21, 97, 70, 57, 60, 9, 54, 64], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [2, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 0, 0, 2, 0, 2, 2, 0], [30, 23, 13, 96, 41, 62]], "fitness": -0.7662857174873352, "mapping_values": [1, 5, 5, 3, 2, 1, 36, 36, 24, 12, 5, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.negative(grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.negative(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.divide_no_nan(alpha, beta)))), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.negative(grad)), grad)))), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))), tf.math.square(beta)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, beta))), tf.math.add(beta, grad))))))), tf.math.add(beta, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))))))), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.1365422527819358, 1.4251872767168912, 1.1171037221014728, 0.9233557954991514, 0.8581171770924669, 0.8128483347164689, 0.7650884257378816, 0.7504989585037544, 0.7184862802923316, 0.6975759750407023, 0.694564052986006, 0.6991017839975046, 0.6458287337799082, 0.6486735044925787], "accuracy": [0.2953374683856964, 0.5050851702690125, 0.6092986464500427, 0.6716417670249939, 0.6868313550949097, 0.6995112895965576, 0.7191916704177856, 0.7277770638465881, 0.7306828498840332, 0.739928662776947, 0.733060359954834, 0.7359662055969238, 0.7536653280258179, 0.7519482374191284], "val_loss": [1.3588872977665492, 1.019322429384504, 0.7503366300037929, 0.6602811643055507, 0.614314113344465, 0.6184015444346836, 0.5882162025996617, 0.5847962413515363, 0.5285240411758423, 0.5516490765980312, 0.5393266337258475, 0.5409966877528599, 0.5142996992383685, 0.5189809628895351], "val_accuracy": [0.562666654586792, 0.5713333487510681, 0.6869999766349792, 0.7046666741371155, 0.7336666584014893, 0.7043333053588867, 0.7390000224113464, 0.7136666774749756, 0.7670000195503235, 0.7396666407585144, 0.746999979019165, 0.7566666603088379, 0.7649999856948853, 0.7586666941642761]}}, {"genotype": [[0], [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [40, 66, 89, 50, 85, 46], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [7, 0, 0, 6, 4, 6, 2, 2, 5, 8, 4, 2, 0, 2, 0, 0, 2, 2, 8, 5, 2, 3, 9, 9, 1, 2, 4, 3, 9, 2, 6, 3, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 1, 1, 2, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [73, 37, 21, 97, 70, 57, 60, 9, 54, 64], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [79, 2, 82], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 0, 0, 2, 0, 2, 2, 0], [30, 23, 13, 96, 41, 62]], "fitness": -0.6245714426040649, "mapping_values": [1, 3, 3, 1, 2, 1, 4, 4, 2, 2, 1, 1, 1, 1, 0, 1, 2, 1, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.negative(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [1.9404589127807759, 1.0833137717623011, 0.8741495917186981, 0.7237181007082688, 0.6431766218119419, 0.633681194192745, 0.5998140203560726, 0.5658970887808044, 0.5625205464477095, 0.5427888257392346, 0.5401177643595937, 0.5681598055647695, 0.5646712620417991, 0.5538341789874797, 0.5717197506104352, 0.604290065834976], "accuracy": [0.3391890227794647, 0.6321489810943604, 0.6712455153465271, 0.7156254053115845, 0.7577598690986633, 0.7633073329925537, 0.7745344042778015, 0.789988100528717, 0.7931581139564514, 0.7961959838867188, 0.7952714562416077, 0.7895918488502502, 0.7903843522071838, 0.7952714562416077, 0.7938185334205627, 0.7843085527420044], "val_loss": [1.0242874281747, 0.7337031534739903, 0.575236337525504, 0.521606479372297, 0.48954800197056364, 0.480539117540632, 0.4505620002746582, 0.4335241402898516, 0.4373641865594046, 0.43348824977874756, 0.4253363864762442, 0.4329353911536081, 0.4613393374851772, 0.46574197496686665, 0.467139686856951, 0.5322501148496356], "val_accuracy": [0.6233333349227905, 0.6793333292007446, 0.734666645526886, 0.762666642665863, 0.7786666750907898, 0.7870000004768372, 0.8003333210945129, 0.815666675567627, 0.8090000152587891, 0.8066666722297668, 0.8169999718666077, 0.7933333516120911, 0.8133333325386047, 0.8149999976158142, 0.8130000233650208, 0.7916666865348816]}}, {"genotype": [[0], [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 0, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 3, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [40, 66, 89, 50, 85, 46], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [8, 0, 0, 6, 4, 6, 2, 2, 5, 8, 4, 2, 0, 2, 0, 0, 2, 2, 8, 5, 2, 3, 9, 9, 1, 2, 4, 3, 9, 2, 6, 3, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [1, 4, 1, 2, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [73, 37, 21, 97, 70, 57, 60, 9, 54, 64], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 0, 0, 2, 0, 2, 2, 0], [30, 23, 13, 96, 41, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 9, 4, 2, 2, 2, 1, 1, 0, 1, 1, 1, 0, 1, 2, 1, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.add(alpha, tf.math.add(grad, tf.math.pow(tf.math.add(alpha, grad), tf.math.negative(tf.math.negative(tf.math.square(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09589222073554993, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [40, 66, 89, 50, 85, 46], [1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 6, 4, 6, 2, 2, 5, 8, 4, 2, 0, 2, 0, 0, 2, 2, 8, 5, 2, 3, 9, 9, 1, 2, 4, 3, 9, 2, 6, 3, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 1, 1, 2, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [73, 37, 21, 97, 70, 57, 60, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1], [0, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 1, 6, 2, 3, 8, 7, 5, 6, 2, 9, 3, 9, 3, 7, 4, 6, 7, 7, 9, 4, 2, 4], [1, 0, 0, 2, 0, 2, 2, 0, 0, 2, 2, 1, 3, 0, 3, 0, 0, 1, 1, 3, 0, 2, 2, 1, 2, 3, 0, 0, 1, 3, 2, 0, 0, 2, 1, 0, 1, 3, 0, 3, 0, 1, 2, 0, 2, 2, 2], [30, 23, 11, 96, 41, 62, 51, 95, 38, 58, 40, 53, 37, 25, 69, 64, 52, 60, 76, 11]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 3, 3, 2, 1, 1, 1, 0, 0, 0, 0, 112, 67, 45, 20], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.negative(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.subtract(tf.math.pow(alpha, tf.math.subtract(tf.math.subtract(tf.math.subtract(tf.math.sqrt(tf.math.add(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.add(tf.math.pow(tf.math.square(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), beta), tf.math.multiply(tf.math.multiply(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32), beta), beta)))), tf.math.subtract(tf.math.negative(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(tf.math.add(tf.math.subtract(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.negative(beta)), tf.math.square(tf.math.divide_no_nan(beta, alpha))), sigma)))), tf.math.add(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(sigma, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.square(tf.math.square(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))), alpha))), tf.math.pow(tf.math.multiply(tf.math.subtract(tf.math.negative(tf.math.pow(tf.math.add(alpha, tf.math.multiply(sigma, tf.math.pow(tf.math.square(tf.math.sqrt(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), beta))), tf.math.add(tf.math.negative(beta), alpha))), tf.math.negative(beta)), tf.math.divide_no_nan(sigma, tf.math.pow(tf.math.divide_no_nan(tf.math.negative(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), alpha))), sigma)), beta), tf.math.add(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.subtract(tf.math.divide_no_nan(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.math.add(tf.math.multiply(tf.math.sqrt(tf.math.add(tf.math.square(beta), tf.math.divide_no_nan(tf.math.add(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), alpha), tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)))), tf.math.multiply(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.add(tf.math.pow(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(sigma, tf.math.add(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))))), beta))), tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), beta))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09589222073554993, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [40, 66, 89, 50, 85, 46], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 9, 0, 6, 4, 6, 2, 2, 5, 8, 4, 2, 0, 2, 0, 0, 2, 2, 8, 5, 2, 3, 9, 9, 1, 2, 4, 3, 9, 2, 6, 3, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 0, 1, 2, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [73, 37, 21, 97, 70, 57, 60, 9, 54, 64], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [18, 2, 82], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1], [0, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 0, 0, 2, 0, 2, 2, 0, 3, 1, 2, 1, 0, 0, 3, 1, 0, 2, 3, 3, 0, 1, 3, 3, 0, 1, 0, 1], [30, 23, 13, 96, 41, 62, 69, 95, 95, 87]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 3, 3, 2, 1, 2, 1, 1, 1, 0, 1, 66, 38, 28, 10], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.subtract(tf.math.pow(alpha, tf.math.subtract(tf.math.subtract(tf.math.subtract(tf.math.sqrt(tf.math.add(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.add(tf.math.pow(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), beta), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.multiply(tf.math.multiply(beta, beta), tf.math.subtract(tf.math.negative(tf.math.negative(tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.subtract(tf.math.negative(sigma), tf.math.square(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(beta, tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), tf.math.square(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))))), sigma)))), tf.math.square(alpha))))), tf.math.pow(tf.math.multiply(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32), beta), tf.math.subtract(sigma, tf.math.negative(sigma)))), tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.add(alpha, sigma), tf.math.multiply(sigma, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(alpha, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))), tf.math.square(alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09589222073554993, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [51, 66, 89, 50, 85, 46], [1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 0, 0, 6, 4, 6, 2, 2, 5, 8, 4, 2, 0, 2, 0, 0, 2, 2, 8, 5, 2, 3, 9, 9, 1, 2, 4, 3, 9, 2, 6, 3, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 3, 1, 2, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [61, 37, 21, 97, 70, 57, 60, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 0, 0, 2, 0, 2, 2, 0], [30, 23, 13, 96, 41, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 4, 4, 2, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07185312360525131, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 1, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [40, 66, 89, 50, 85, 46], [1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [7, 0, 0, 6, 4, 6, 2, 2, 5, 8, 4, 2, 0, 2, 0, 0, 2, 2, 8, 5, 2, 3, 9, 9, 1, 2, 4, 3, 9, 2, 6, 3, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 1, 1, 2, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [98, 37, 21, 97, 70, 57, 60, 9, 54, 64], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8, 9, 3, 3, 9, 5, 9, 7, 3, 0, 3], [1, 0, 0, 2, 0, 2, 2, 0, 0, 0, 2, 3, 0, 3, 1, 2, 0, 1, 0, 3, 0, 3, 1, 2, 2, 2, 0, 3, 0, 2, 1, 0, 2, 0, 0, 0, 2, 0, 2, 2], [30, 23, 13, 96, 41, 62, 89, 62, 36, 15, 79, 14, 87, 84, 63, 72, 87, 39, 61, 45]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 103, 63, 40, 20], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.subtract(tf.math.pow(alpha, tf.math.subtract(tf.math.subtract(tf.math.subtract(tf.math.sqrt(tf.math.add(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.add(tf.math.pow(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), beta), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.multiply(tf.math.multiply(beta, beta), tf.math.subtract(tf.math.negative(tf.math.negative(tf.math.add(tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.negative(tf.math.square(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.add(tf.math.divide_no_nan(beta, tf.math.add(tf.math.square(sigma), tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.pow(sigma, alpha))), tf.math.multiply(tf.math.subtract(beta, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)), alpha)))))), tf.math.negative(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)))))), tf.math.pow(tf.math.add(tf.math.multiply(tf.math.pow(tf.math.square(tf.math.sqrt(tf.math.add(tf.math.negative(sigma), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))), sigma), tf.math.negative(tf.math.divide_no_nan(alpha, tf.math.pow(beta, tf.math.divide_no_nan(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), sigma), tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))))))))), beta), tf.math.divide_no_nan(tf.math.subtract(alpha, tf.math.multiply(tf.math.sqrt(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), beta)))), tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)))), tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))), tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.negative(beta), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))), tf.math.multiply(beta, beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09589222073554993, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [40, 66, 89, 50, 85, 46], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 0, 0, 6, 4, 6, 2, 2, 5, 8, 4, 2, 0, 2, 0, 0, 2, 2, 8, 5, 2, 3, 9, 9, 1, 2, 4, 3, 9, 2, 6, 3, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 4, 1, 2, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [3, 37, 21, 97, 70, 57, 60, 9, 54, 64], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 0, 0, 2, 0, 2, 2, 0], [30, 23, 13, 96, 41, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 1, 36, 36, 24, 12, 5, 1, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.negative(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.divide_no_nan(alpha, beta)))), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.negative(grad)), grad)))), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))), tf.math.square(beta)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, beta))), tf.math.add(beta, grad))))))), tf.math.add(beta, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))))))), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [5416856427.531037, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.05388984456658363, 0.1018359512090683, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [8.526652246844433e+30, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [7, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [6, 66, 89, 50, 85, 46], [1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [7, 0, 0, 6, 4, 6, 2, 2, 5, 8, 4, 2, 0, 2, 0, 0, 2, 2, 8, 5, 2, 3, 9, 9, 1, 2, 4, 3, 9, 2, 6, 3, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 1, 1, 2, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [73, 37, 21, 97, 70, 57, 60, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 0, 0, 2, 0, 2, 2, 0], [30, 23, 13, 96, 41, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 1, 4, 4, 2, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.negative(grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.negative(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07845727354288101, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [51, 66, 89, 50, 85, 46], [0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 0, 0, 6, 4, 6, 2, 2, 5, 8, 4, 2, 0, 2, 0, 0, 2, 2, 8, 5, 2, 3, 9, 9, 1, 2, 4, 3, 9, 2, 6, 3, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 1, 1, 2, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [61, 37, 21, 97, 70, 57, 60, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [0, 0, 0, 2, 0, 2, 2, 0], [30, 23, 13, 96, 41, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3029867795322705, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09589222073554993, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 0, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [40, 66, 89, 50, 85, 46], [0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 0, 0, 6, 4, 6, 2, 2, 5, 8, 4, 2, 0, 2, 0, 0, 2, 2, 8, 5, 2, 3, 9, 9, 1, 2, 4, 3, 9, 2, 6, 3, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 1, 1, 2, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [73, 37, 21, 97, 70, 57, 60, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 0, 0, 2, 0, 2, 2, 0], [30, 23, 13, 96, 41, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 36, 36, 24, 12, 5, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(alpha, tf.math.divide_no_nan(alpha, beta))), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.negative(grad)), grad)))), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))), tf.math.square(beta)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, beta))), tf.math.add(beta, grad))))))), tf.math.add(beta, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))))))), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.3029867795322705, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09589222073554993, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [1, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [40, 66, 89, 50, 85, 46], [1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 0, 0, 6, 4, 6, 2, 2, 5, 8, 4, 2, 0, 2, 0, 0, 2, 2, 8, 5, 2, 3, 9, 9, 1, 2, 4, 3, 9, 2, 6, 3, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 1, 1, 2, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [73, 37, 21, 97, 70, 57, 60, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 0, 0, 2, 0, 2, 2, 0], [30, 23, 13, 96, 41, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 20, 20, 12, 8, 2, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, grad)))), tf.math.subtract(tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), alpha)), tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)), tf.math.add(alpha, grad)))))))))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [40, 66, 89, 50, 85, 46], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 0, 0, 6, 4, 6, 2, 2, 5, 8, 4, 2, 0, 2, 0, 0, 2, 2, 8, 5, 2, 3, 9, 9, 1, 2, 4, 3, 9, 2, 6, 3, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [5, 4, 1, 2, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [73, 37, 21, 97, 70, 57, 60, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [0, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 0, 0, 2, 0, 2, 2, 0, 0, 3, 2, 0, 3, 0], [30, 23, 13, 96, 41, 62, 3]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 30, 16, 14, 7], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(grad, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.subtract(tf.math.pow(alpha, tf.math.subtract(tf.math.subtract(tf.math.subtract(tf.math.sqrt(tf.math.add(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.add(tf.math.pow(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), beta), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.multiply(tf.math.multiply(beta, beta), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), sigma)), tf.math.subtract(beta, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))), sigma), tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09589222073554993, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [40, 66, 89, 50, 85, 46], [1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [4, 0, 0, 6, 4, 6, 2, 2, 5, 8, 4, 2, 0, 2, 0, 0, 2, 2, 8, 5, 2, 3, 9, 9, 1, 2, 4, 3, 9, 2, 6, 3, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 1, 1, 2, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [73, 37, 21, 97, 70, 57, 60, 9, 54, 64], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 0, 0, 2, 0, 2, 2, 0], [30, 23, 13, 96, 41, 62]], "fitness": -0.07171428203582764, "mapping_values": [1, 3, 3, 1, 2, 0, 3, 3, 1, 2, 1, 1, 1, 1, 0, 1, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.3028395762926617, 2.3022094398614925, 2.3006663527140416, 2.300404241859417, 2.3010018798322758, 2.300930833583495, 2.300217563135119, 2.3005214812591515, 2.299116788491786, 2.299968622238125, 2.2990544652894753, 2.299763659129699, 2.2992518886898203], "accuracy": [0.09311848133802414, 0.09549596905708313, 0.09655263274908066, 0.09945846349000931, 0.09470347315073013, 0.10077928751707077, 0.10091137140989304, 0.09628847241401672, 0.10091137140989304, 0.09615638852119446, 0.10077928751707077, 0.09866596013307571, 0.09721305221319199], "val_loss": [1.9706823485238212, 1.9701219286237444, 1.9699095317295618, 1.9699121883937292, 1.9700585092817033, 1.9701090540204729, 1.9699818747384208, 1.9698937279837472, 1.9699438640049525, 1.9699910708836146, 1.9702364376613073, 1.970510414668492, 1.9707471983773368], "val_accuracy": [0.04466666653752327, 0.050999999046325684, 0.054999999701976776, 0.0573333315551281, 0.059333331882953644, 0.061666667461395264, 0.06433333456516266, 0.06733333319425583, 0.0663333311676979, 0.06599999964237213, 0.06199999898672104, 0.06266666948795319, 0.06133333221077919]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [5, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [40, 66, 89, 50, 85, 46], [1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [7, 0, 0, 6, 4, 6, 2, 2, 5, 8, 4, 2, 0, 2, 0, 0, 2, 2, 8, 5, 2, 3, 9, 9, 1, 2, 4, 3, 9, 2, 6, 3, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 1, 1, 2, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [61, 37, 21, 97, 70, 57, 60, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 0, 0, 2, 0, 2, 2, 0], [30, 23, 13, 96, 41, 62]], "fitness": -0.06800000369548798, "mapping_values": [1, 2, 2, 1, 1, 0, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.3028179404128104, 2.3021192163949347, 2.300524700587027, 2.3002241204175746, 2.3007893278582725, 2.3007189121858524, 2.300002959489098, 2.3003234772902, 2.298935321028899, 2.2997872211898183, 2.2988532242317086, 2.29957137673428], "accuracy": [0.09311848133802414, 0.09509972482919693, 0.09681680053472519, 0.09998679161071777, 0.09509972482919693, 0.10157178342342377, 0.10130762308835983, 0.09694888442754745, 0.10170386731624603, 0.09760929644107819, 0.10130762308835983, 0.10038304328918457], "val_loss": [1.970630373273577, 1.970012596675328, 1.9697558539254325, 1.9697280611310686, 1.9698668888636999, 1.9699105535234724, 1.9697931153433663, 1.9697151184082031, 1.9697670255388533, 1.9698103496006556, 1.9700538090297155, 1.9703248568943568], "val_accuracy": [0.04466666653752327, 0.05166666582226753, 0.0573333315551281, 0.058666665107011795, 0.06066666543483734, 0.06433333456516266, 0.06833333522081375, 0.06800000369548798, 0.06800000369548798, 0.06833333522081375, 0.0663333311676979, 0.06499999761581421]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [40, 66, 89, 50, 85, 46], [1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 0, 0, 6, 4, 6, 2, 2, 5, 8, 4, 2, 0, 2, 0, 0, 2, 2, 8, 5, 2, 3, 9, 9, 1, 2, 4, 3, 9, 2, 6, 3, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 4, 1, 2, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [73, 37, 21, 97, 70, 57, 60, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [3, 0, 0, 2, 0, 2, 2, 0], [30, 23, 13, 96, 41, 62]], "fitness": -0.040571428835392, "mapping_values": [1, 4, 4, 2, 2, 1, 38, 38, 25, 13, 5, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 47, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.negative(tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(grad, alpha)))), tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, beta)), tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.negative(tf.math.add(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), grad)))), tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.square(grad))), tf.math.add(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), beta))))))))), tf.math.add(beta, grad))), tf.math.add(beta, beta)))))))), tf.math.add(beta, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))))), tf.math.subtract(tf.math.add(beta, grad), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.303400494025415, 2.303763295019843, 2.302718535138474, 2.302549916204287, 2.3031793074317504, 2.3028929810466674], "accuracy": [0.09008057415485382, 0.09219389408826828, 0.09034473448991776, 0.09219389408826828, 0.08849557489156723, 0.09826971590518951], "val_loss": [1.971440383366176, 1.971440383366176, 1.971440383366176, 1.971440383366176, 1.971440383366176, 1.971440383366176], "val_accuracy": [0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [1, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [40, 66, 89, 50, 85, 46], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 0, 0, 6, 4, 6, 2, 2, 5, 8, 4, 2, 0, 2, 0, 0, 2, 2, 8, 5, 2, 3, 9, 9, 1, 2, 4, 3, 9, 2, 6, 3, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 1, 1, 2, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [66, 37, 21, 97, 70, 57, 60, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [3, 0, 0, 2, 0, 2, 2, 0], [30, 23, 13, 96, 41, 62]], "fitness": -0.040571428835392, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.303400494025415, 2.303763295019843, 2.302718535138474, 2.302549916204287, 2.3031793074317504, 2.3028929810466674], "accuracy": [0.09008057415485382, 0.09219389408826828, 0.09034473448991776, 0.09219389408826828, 0.08849557489156723, 0.09826971590518951], "val_loss": [1.971440383366176, 1.971440383366176, 1.971440383366176, 1.971440383366176, 1.971440383366176, 1.971440383366176], "val_accuracy": [0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161]}}]