[{"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [8, 8, 6, 9, 4, 6, 1, 9, 8, 9, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [3, 3, 3, 3, 3, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [57, 19, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [1, 0, 0, 1, 1, 0], [0, 7, 6, 4], [7, 0], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [53, 97, 13, 96, 41]], "fitness": -0.8334285616874695, "mapping_values": [1, 4, 4, 3, 1, 1, 11, 11, 8, 3, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.divide_no_nan(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, grad))), tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.148143060171782, 1.7742369770610085, 1.224640611927696, 1.1107217901339699, 0.9782687706434653, 0.7982798643619818, 0.7585229514423315, 0.7942434047443393, 0.6792755988468946, 0.6577640401452618, 0.6476054140416434, 0.6214921518308044, 0.6132845274052049, 0.6097488801681827, 0.5577835035975961, 0.5292598207660434, 0.530271204156237, 0.5429398144603075, 0.5279166373783304, 0.5235381580071442, 0.4870904672178909, 0.49128303988703237, 0.457999565432557, 0.46798616834304685, 0.4597024067344761, 0.4676400749848078, 0.4446272239346845, 0.4395600096810338, 0.45559578278612356, 0.4132866600619142, 0.4316107775903318, 0.39378654670642904, 0.4065586063233916, 0.3925365007840064, 0.3860408565104047, 0.371495681872788, 0.42871590889424477, 0.3665262971217559, 0.38631651162109226, 0.36631566966686896, 0.38818153293377466, 0.3464573190716421, 0.3410206151998999, 0.3485872946072406, 0.33174141066468954, 0.34748896205776386, 0.3350974651706249, 0.32821116178121706, 0.3183768059890567, 0.32525057049711475, 0.3133986923853955, 0.3126991726679494, 0.30881092156228324, 0.31667534529714064, 0.29187219450108803, 0.28013110412755865, 0.29330793254962134, 0.28122833454220003, 0.27288822468166984, 0.27589683722605746], "accuracy": [0.2859595715999603, 0.41249504685401917, 0.5638620853424072, 0.5964865684509277, 0.648659348487854, 0.6980583667755127, 0.719852089881897, 0.7091533541679382, 0.7371549606323242, 0.7544577717781067, 0.7582882046699524, 0.7637035846710205, 0.7683265209197998, 0.7683265209197998, 0.7873464822769165, 0.8034605979919434, 0.8013472557067871, 0.7975168228149414, 0.802271842956543, 0.805177628993988, 0.8183859586715698, 0.8165367841720581, 0.8322546482086182, 0.8211596608161926, 0.8265751004219055, 0.8204993009567261, 0.8337075710296631, 0.8341038227081299, 0.8285563588142395, 0.8392550349235535, 0.8355567455291748, 0.8535200357437134, 0.8475762605667114, 0.8525954484939575, 0.8569541573524475, 0.8618412613868713, 0.8391229510307312, 0.8636903762817383, 0.8529917001724243, 0.8597279191017151, 0.8514066934585571, 0.8704266548156738, 0.874389111995697, 0.8687095642089844, 0.8725399374961853, 0.8651432991027832, 0.8741249442100525, 0.876370370388031, 0.8800686597824097, 0.8735966086387634, 0.8835028409957886, 0.8803328275680542, 0.8791441321372986, 0.8767666220664978, 0.8877294659614563, 0.8939374089241028, 0.8874653577804565, 0.8908994793891907, 0.8942015767097473, 0.894069492816925], "val_loss": [1.3653807980673653, 1.1851093769073486, 0.8165842805589948, 0.6955112729753766, 0.6498438119888306, 0.5740844862801688, 0.6110013723373413, 0.531534058707101, 0.5253957509994507, 0.523589049066816, 0.5011935404368809, 0.51445472240448, 0.47671258449554443, 0.47302091121673584, 0.4364648035594395, 0.440827693258013, 0.4634148223059518, 0.4260711244174412, 0.43757746049336027, 0.40584165709359304, 0.4280931353569031, 0.38251231397901264, 0.42308316060474943, 0.4239848937307085, 0.37972876855305265, 0.36807176045009066, 0.39287214619772776, 0.36943414381572176, 0.3797732080732073, 0.41160060678209576, 0.3578984907695225, 0.37224507331848145, 0.35383703878947664, 0.3573680520057678, 0.3529338240623474, 0.4033530865396772, 0.3495881131717137, 0.351559008870806, 0.3528356892721994, 0.3381259185927255, 0.33851773398263113, 0.3508802482060024, 0.3508768081665039, 0.3304925560951233, 0.3308437892368862, 0.36325277600969585, 0.33455400807516916, 0.3348159534590585, 0.3362061721937997, 0.33509128434317453, 0.34711328574589323, 0.3255813888141087, 0.34696944270815167, 0.31920425380979267, 0.3231941206114633, 0.3441572274480547, 0.33148209537778583, 0.3316208635057722, 0.32674808161599295, 0.37741431168147493], "val_accuracy": [0.5393333435058594, 0.5040000081062317, 0.6449999809265137, 0.6650000214576721, 0.7153333425521851, 0.7426666617393494, 0.7419999837875366, 0.7573333382606506, 0.7703333497047424, 0.7833333611488342, 0.7786666750907898, 0.7540000081062317, 0.7940000295639038, 0.7863333225250244, 0.812333345413208, 0.8026666641235352, 0.7836666703224182, 0.8183333277702332, 0.8203333616256714, 0.8209999799728394, 0.8056666851043701, 0.8399999737739563, 0.8053333163261414, 0.7906666398048401, 0.8379999995231628, 0.8429999947547913, 0.8323333263397217, 0.8460000157356262, 0.8489999771118164, 0.8186666369438171, 0.8476666808128357, 0.8333333134651184, 0.8503333330154419, 0.8410000205039978, 0.8493333458900452, 0.8296666741371155, 0.8536666631698608, 0.846666693687439, 0.8529999852180481, 0.856333315372467, 0.8579999804496765, 0.8573333621025085, 0.8546666502952576, 0.8636666536331177, 0.8636666536331177, 0.8353333473205566, 0.8553333282470703, 0.8576666712760925, 0.8669999837875366, 0.8640000224113464, 0.8519999980926514, 0.8679999709129333, 0.8473333120346069, 0.8643333315849304, 0.8686666488647461, 0.8566666841506958, 0.8636666536331177, 0.862333357334137, 0.859666645526886, 0.8506666421890259]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [8, 4, 1, 9, 4, 6, 4, 9, 8, 9, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [3, 3, 3, 3, 3, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [57, 19, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [1, 0, 0, 1, 1, 0], [0, 7, 6, 4], [7, 0], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [53, 97, 13, 96, 41]], "fitness": -0.829714298248291, "mapping_values": [1, 4, 4, 3, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.0290480100751127, 1.3963627540959722, 1.0746961418096934, 0.8863431408562444, 0.8000766192728329, 0.7712616958732792, 0.7418308263016478, 0.7275392955414859, 0.6855913426708851, 0.6594691992735016, 0.6581493038558658, 0.6408026118194108, 0.605152890855736, 0.6264737363992791, 0.5908098784908249, 0.584043132355027, 0.5439551398541871, 0.5566409417525132, 0.5469100962241312, 0.5428591238044713, 0.5066677528782733, 0.5324871879936508, 0.5061275825650385, 0.4958782759891793, 0.510614157518171, 0.4770245664131687, 0.47521141487152946, 0.4681403858944126, 0.45985289439785326, 0.4518494394398353, 0.46433102498831075, 0.43152386773578905, 0.42565040564524453, 0.43738585568422245, 0.4175248331066923, 0.42043149715338435, 0.42735166042913236, 0.4036134398096919, 0.39235903089466256, 0.3919122905826304, 0.3978898497132294, 0.3869160198343428, 0.4069290303787173, 0.38901911368302033, 0.36648095631879696, 0.3720589180813647, 0.366814208454255, 0.37746648868911725, 0.36360731873655866, 0.35801855185878684, 0.35465852996346, 0.35439250196338, 0.35026491771615365, 0.3377339323718613, 0.3441933036409491, 0.32803103915452486, 0.3289885672800545, 0.31551156408436276, 0.31658366035161756, 0.3221315142185996], "accuracy": [0.32241448760032654, 0.5155197381973267, 0.6155065298080444, 0.6659622192382812, 0.6980583667755127, 0.7054550051689148, 0.719852089881897, 0.7306828498840332, 0.7349095344543457, 0.7461365461349487, 0.7489103078842163, 0.7564390301704407, 0.776251494884491, 0.7613261342048645, 0.7773081660270691, 0.7821952104568481, 0.8031964302062988, 0.787082314491272, 0.7967243194580078, 0.7959318161010742, 0.8098005652427673, 0.8009510040283203, 0.8117818236351013, 0.8119139075279236, 0.8112534880638123, 0.8231409192085266, 0.8207634687423706, 0.8214238286018372, 0.8285563588142395, 0.8289526104927063, 0.8265751004219055, 0.8397833704948425, 0.8449346423149109, 0.8387266993522644, 0.8446704745292664, 0.8425571322441101, 0.8436138033866882, 0.8511425256729126, 0.8564258217811584, 0.8564258217811584, 0.8525954484939575, 0.8581429123878479, 0.8514066934585571, 0.8549728989601135, 0.8623695969581604, 0.86118084192276, 0.8654074668884277, 0.8578787446022034, 0.8638224601745605, 0.8688416481018066, 0.8673887252807617, 0.8672566413879395, 0.8677849769592285, 0.8689737319946289, 0.8717474341392517, 0.8782195448875427, 0.8755778670310974, 0.880729079246521, 0.8816536664962769, 0.8786157965660095], "val_loss": [1.3434938022068568, 1.1130388123648507, 0.7755748374121529, 0.6131736891610282, 0.585729854447501, 0.5790937968662807, 0.6349251099995205, 0.5224686009543282, 0.5593689680099487, 0.5091492448534284, 0.5288534505026681, 0.48265629155295237, 0.47647864477975027, 0.47301881653921946, 0.4733677932194301, 0.44263175555637907, 0.4420197180339268, 0.4473261662891933, 0.45231672695704866, 0.4167276365416391, 0.43647388901029316, 0.43131797654288156, 0.4107974171638489, 0.40479540824890137, 0.3978963579450335, 0.3963845031602042, 0.39786630868911743, 0.39021014315741404, 0.38506620270865305, 0.39075905084609985, 0.3761919140815735, 0.36881249291556223, 0.37043780939919607, 0.3780729004314968, 0.359180816582271, 0.3860539879117693, 0.36552424090249197, 0.36500961439950125, 0.36047645126070293, 0.3658980812345232, 0.3437983819416591, 0.37481881039483206, 0.38140502146312166, 0.3393208384513855, 0.33999939475740704, 0.35753440856933594, 0.34255172525133404, 0.33469882181712557, 0.35291785853249685, 0.3285281573023115, 0.34553789240973337, 0.32594381059919086, 0.34358043330056326, 0.35471233299800325, 0.3272185070174081, 0.33484433378492084, 0.3432514582361494, 0.33769950696400236, 0.3369531546320234, 0.3505491018295288], "val_accuracy": [0.4970000088214874, 0.6383333206176758, 0.6100000143051147, 0.7236666679382324, 0.7486666440963745, 0.7286666631698608, 0.7253333330154419, 0.7683333158493042, 0.7549999952316284, 0.781333327293396, 0.7509999871253967, 0.7846666574478149, 0.7953333258628845, 0.79666668176651, 0.7916666865348816, 0.8153333067893982, 0.8076666593551636, 0.8059999942779541, 0.7950000166893005, 0.8193333148956299, 0.7976666688919067, 0.8116666674613953, 0.8223333358764648, 0.8289999961853027, 0.828000009059906, 0.8309999704360962, 0.8316666483879089, 0.8293333053588867, 0.8389999866485596, 0.8349999785423279, 0.8420000076293945, 0.8456666469573975, 0.8423333168029785, 0.8360000252723694, 0.847000002861023, 0.8330000042915344, 0.8486666679382324, 0.843999981880188, 0.8533333539962769, 0.8463333249092102, 0.8586666584014893, 0.843999981880188, 0.8360000252723694, 0.8556666374206543, 0.8616666793823242, 0.8416666388511658, 0.8550000190734863, 0.8650000095367432, 0.8560000061988831, 0.8616666793823242, 0.8566666841506958, 0.8683333396911621, 0.8583333492279053, 0.8510000109672546, 0.8703333139419556, 0.859666645526886, 0.8610000014305115, 0.8606666922569275, 0.8543333411216736, 0.8636666536331177]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [6, 8, 0, 6, 4, 6, 1, 4, 8, 9, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [3, 3, 3, 3, 3, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [34, 19, 30, 73, 40, 57, 35, 9, 54, 64], [0, 0, 1, 0, 0, 0, 1, 1], [1, 0, 0, 1, 1, 0], [0, 7, 6, 4], [7, 0], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [53, 97, 13, 96, 41]], "fitness": -0.8271428346633911, "mapping_values": [1, 4, 4, 2, 2, 1, 16, 16, 9, 7, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.negative(tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(grad, grad), tf.math.add(beta, grad))), tf.math.add(beta, grad)), tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, alpha))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.1483436932794926, 1.7856735859911093, 1.2159557851896687, 1.0802753572104362, 1.0334800908735888, 0.8247347871672445, 0.7776193836298696, 0.7610972376547438, 0.7109110588883176, 0.6699151537909941, 0.6526189711052649, 0.6275921641733228, 0.6132356658934162, 0.5971142964875772, 0.564901409124292, 0.5355740098228323, 0.5340781078567248, 0.5366662284638573, 0.532425805688172, 0.5187549133578532, 0.49234081657728607, 0.5009982807288915, 0.4583927888628388, 0.505837265447839, 0.4804600266307463, 0.45160307940191613, 0.4396111590593656, 0.4463731613944566, 0.4511574926889332, 0.41296705858283245], "accuracy": [0.28622373938560486, 0.41645753383636475, 0.5565975308418274, 0.6041474342346191, 0.6132611036300659, 0.6922467350959778, 0.7012283802032471, 0.7177387475967407, 0.7292299270629883, 0.7467969655990601, 0.7592127919197083, 0.7597411274909973, 0.7637035846710205, 0.7713643908500671, 0.7845727205276489, 0.7981772422790527, 0.7992339134216309, 0.8004226684570312, 0.7971205711364746, 0.8034605979919434, 0.8165367841720581, 0.8109893202781677, 0.832650899887085, 0.8072909712791443, 0.8208954930305481, 0.8319904804229736, 0.8374059200286865, 0.8305375576019287, 0.8319904804229736, 0.844010055065155], "val_loss": [1.3676562990461076, 1.1013071877615792, 0.9924978188105992, 0.8346049104418073, 0.6828079393931797, 0.5957972833088466, 0.6245098284312657, 0.5246789966310773, 0.5645670209612165, 0.49512577056884766, 0.5103564092091152, 0.4892848900386265, 0.4573125328336443, 0.45422319003513884, 0.445060133934021, 0.4344548497881208, 0.4283821497644697, 0.44616527216775076, 0.41824935163770405, 0.4093052404267447, 0.4329989893095834, 0.39209888662610737, 0.44533516679491314, 0.39812936953135897, 0.376939594745636, 0.3902669974735805, 0.41867602722985403, 0.3781466909817287, 0.37819109644208637, 0.39139367852892193], "val_accuracy": [0.5356666445732117, 0.5513333082199097, 0.5073333382606506, 0.6206666827201843, 0.6796666383743286, 0.7200000286102295, 0.7093333601951599, 0.7693333625793457, 0.746666669845581, 0.7806666493415833, 0.7760000228881836, 0.765333354473114, 0.8036666512489319, 0.8013333082199097, 0.812666654586792, 0.8109999895095825, 0.8096666932106018, 0.8063333630561829, 0.8209999799728394, 0.8186666369438171, 0.7996666431427002, 0.8293333053588867, 0.8100000023841858, 0.8286666870117188, 0.8403333425521851, 0.8296666741371155, 0.8263333439826965, 0.8356666564941406, 0.8366666436195374, 0.8299999833106995]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [1, 4, 6, 3, 8, 8, 2, 8, 8, 9, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [3, 3, 3, 3, 3, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [57, 19, 30, 73, 40, 57, 35, 9, 54, 64], [0, 0, 1, 0, 0, 0, 1, 1], [1, 0, 0, 1, 1, 0], [0, 7, 6, 4], [7, 0], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [53, 97, 13, 96, 41]], "fitness": -0.7868571281433105, "mapping_values": [1, 4, 4, 3, 1, 1, 14, 14, 8, 6, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.sqrt(grad), tf.math.add(beta, grad)))))), grad), grad), tf.math.add(beta, grad)), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.132436249942953, 2.016746050079249, 1.8565097614254824, 1.403883954159509, 1.0987378168005308, 0.9824917293527045, 0.8179032430751464, 0.7939246170839787, 0.7788719771686499, 0.7822476732590731, 0.7026791729711035, 0.6915453493854924, 0.6595532985143595, 0.6407640663828943, 0.6014504874654812, 0.5743188059498464, 0.6180783868261127, 0.5874135997616273, 0.5778102092125066], "accuracy": [0.2681283950805664, 0.36124685406684875, 0.3773609697818756, 0.5087835192680359, 0.5835424661636353, 0.6269977688789368, 0.6783780455589294, 0.687887966632843, 0.7041342258453369, 0.7108704447746277, 0.7318716049194336, 0.728701651096344, 0.7429665923118591, 0.7427024245262146, 0.7637035846710205, 0.7836481332778931, 0.774270236492157, 0.7732135653495789, 0.7681944370269775], "val_loss": [1.4366231986454554, 1.8053743498665946, 1.2636448996407645, 0.9068282331739154, 0.7989762851170131, 0.6524416378566197, 0.6733685561588832, 0.6080566814967564, 0.6726808377674648, 0.5941101482936314, 0.5779794795172555, 0.5184485571725028, 0.5213791302272252, 0.46513148716517855, 0.47696638107299805, 0.48154360907418386, 0.5131112507411412, 0.4735279083251953, 0.4629873037338257], "val_accuracy": [0.5406666398048401, 0.2639999985694885, 0.5659999847412109, 0.5690000057220459, 0.6556666493415833, 0.6896666884422302, 0.690666675567627, 0.7416666746139526, 0.7236666679382324, 0.7273333072662354, 0.734333336353302, 0.7666666507720947, 0.7630000114440918, 0.7979999780654907, 0.7893333435058594, 0.7926666736602783, 0.7749999761581421, 0.7763333320617676, 0.7910000085830688]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [1, 4, 2, 3, 3, 8, 2, 9, 8, 9, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [3, 3, 3, 3, 3, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [34, 19, 30, 73, 40, 57, 35, 9, 54, 64], [0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0], [0, 7, 6, 4], [7, 0], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [53, 97, 13, 96, 41]], "fitness": -0.7805714011192322, "mapping_values": [1, 4, 4, 3, 1, 1, 14, 14, 8, 6, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), grad))), tf.math.add(beta, grad)), tf.math.add(beta, grad)), grad), tf.math.add(beta, grad))), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.1245825277926067, 1.9547739875881884, 1.5264036997733508, 1.3345320669887655, 1.1905700521399205, 1.0234844249709723, 0.9325052090623926, 0.9099258843776399, 0.7932894321291627, 0.7899819983467371, 0.7612231417008364, 0.7262258430387618, 0.6808423914331188, 0.6854597893861527, 0.7098535322840691, 0.6246308802912783, 0.6114940228337514, 0.6088846783517705, 0.6200437773141595, 0.6040262930649241], "accuracy": [0.28305375576019287, 0.38541802763938904, 0.47589486837387085, 0.48791441321372986, 0.5420684218406677, 0.6065248847007751, 0.6568484902381897, 0.6536785364151001, 0.6964733600616455, 0.6956809163093567, 0.7120591998100281, 0.720380425453186, 0.7312111854553223, 0.7331924438476562, 0.7343811988830566, 0.76542067527771, 0.7627789974212646, 0.767401933670044, 0.7617223858833313, 0.7770439982414246], "val_loss": [1.888810294015067, 1.4072776521955217, 1.503028426851545, 1.0596411228179932, 0.7772926773343768, 0.74332024369921, 0.6965446131569999, 0.6753828525543213, 0.6203728062765939, 0.6291337864739555, 0.5894524029323033, 0.5266298736844744, 0.5273721558707101, 0.558545640536717, 0.4969509669712612, 0.5261617388044085, 0.4849217108317784, 0.5379959004265922, 0.5212997198104858, 0.47927677631378174], "val_accuracy": [0.3253333270549774, 0.47566667199134827, 0.3176666796207428, 0.5143333077430725, 0.6510000228881836, 0.6759999990463257, 0.6890000104904175, 0.6800000071525574, 0.7226666808128357, 0.7166666388511658, 0.7229999899864197, 0.7519999742507935, 0.7486666440963745, 0.7450000047683716, 0.7789999842643738, 0.746999979019165, 0.7726666927337646, 0.7526666522026062, 0.7606666684150696, 0.777999997138977]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 8, 6, 9, 4, 6, 1, 9, 8, 9, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [3, 3, 3, 0, 3, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [35, 19, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0], [2, 7, 6, 4], [7, 0], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [53, 97, 13, 96, 41]], "fitness": -0.5554285645484924, "mapping_values": [1, 4, 4, 3, 1, 1, 12, 12, 8, 4, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), tf.math.add(beta, grad))), tf.math.add(beta, grad)))), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3008807756960303, 1.904493616950227, 2.3276026632807527, 5.934213397966132, 2.796927672146712, 2.5234540259565708, 2.5235415643720485], "accuracy": [0.26297715306282043, 0.3473781645298004, 0.22982433438301086, 0.13802668452262878, 0.09800554811954498, 0.10368511080741882, 0.10157178342342377], "val_loss": [1.9258044787815638, 1.2368605818067278, 2.023904119219099, 2.292157309395926, 2.116481031690325, 2.13531494140625, 2.16120399747576], "val_accuracy": [0.2436666637659073, 0.5353333353996277, 0.13300000131130219, 0.09666666388511658, 0.10366666316986084, 0.10233332961797714, 0.10199999809265137]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [9, 66, 89, 50, 85, 46], [0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [1, 4, 2, 3, 8, 8, 2, 9, 8, 9, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [3, 3, 3, 3, 3, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [34, 19, 30, 73, 40, 57, 35, 9, 54, 64], [0, 0, 1, 0, 1, 0, 1, 1], [0, 0, 1, 1, 1, 0], [0, 7, 6, 4], [7, 0], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [53, 97, 13, 96, 41]], "fitness": -0.3817142844200134, "mapping_values": [1, 4, 4, 3, 1, 1, 13, 13, 8, 5, 1, 4, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.multiply(tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), grad)))), tf.math.add(beta, grad)), tf.math.add(beta, grad)), grad)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, grad))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.301579651374701, 2.301577227163812, 2.299856051792794, 2.298513722095381, 2.3000637054632307, 2.298069043040449, 2.2970284245757693, 2.2978960588828308, 2.298358302940829, 2.2964354422366093, 2.2962710846684407, 2.295515101331651, 2.295241237332273, 2.29428189459919, 2.293691930706632, 2.295164983726968, 2.2920880950342757, 2.2920013442409193, 2.290061862508713, 2.290357618756408, 2.289918808306622, 2.2882820123285272, 2.289834673976886, 2.2891581228553752, 2.2890368683494677, 2.286710360361648, 2.286791180921914, 2.287274318994107, 2.2855680767004407, 2.2855249737641437, 2.2845140512766475, 2.284458839472936, 2.2830010457770102, 2.2821892099200363, 2.282171423440565, 2.283069662744847, 2.280525378704764, 2.2803295619137267, 2.2791010897314825, 2.2786343705778536, 2.279888994799881, 2.277949592110157, 2.278846599579865, 2.2780367742361345, 2.275780325347816, 2.276013853999964, 2.2761215147419755, 2.276383164190046, 2.273849308498626, 2.2742740548030183, 2.2703538059070363, 2.2718740740881747, 2.2714401967710334, 2.270370307898934, 2.2706985159982165, 2.2691309383406444, 2.269358371935658, 2.269716106495916, 2.268296292996158, 2.2655407554516622, 2.265120279015866, 2.265957660930756, 2.2656009256438243, 2.264952162300607, 2.264045137818054, 2.265357623247029, 2.264148561001265, 2.262359626666981, 2.262658302510939, 2.2617411140469104, 2.2603149659377615, 2.2592471993090752, 2.2586935789924274, 2.258182387357658, 2.2580912661133596, 2.258142274872439, 2.25713023199712, 2.256115995866118, 2.256063338709136, 2.2553027602644047, 2.253719544539819, 2.2532380331682096, 2.25326795128311, 2.2526406275361617, 2.2512936531954186, 2.250605759320242, 2.2495079478252644, 2.2510882262241383, 2.2499338514564564, 2.2481523088539093, 2.2476141779981096, 2.247275392881017, 2.245823640455549, 2.245542325048934, 2.245081559400265, 2.2437551891043235, 2.2421855821333634, 2.2434512637058632, 2.2428318253125274, 2.241493987747392], "accuracy": [0.09047681838274002, 0.09311848133802414, 0.09840179979801178, 0.10051512718200684, 0.09747721254825592, 0.10038304328918457, 0.10368511080741882, 0.10553427785634995, 0.10276053100824356, 0.11028926074504852, 0.10711926966905594, 0.10355303436517715, 0.10355303436517715, 0.11147800832986832, 0.1080438494682312, 0.1088363528251648, 0.11491216719150543, 0.1158367469906807, 0.1146479994058609, 0.11861048638820648, 0.12349755316972733, 0.12442214041948318, 0.12032756209373474, 0.12138422578573227, 0.12679962813854218, 0.12798838317394257, 0.1290450394153595, 0.12270505726337433, 0.1356491893529892, 0.13181878626346588, 0.1402720957994461, 0.13617752492427826, 0.13551710546016693, 0.1438383311033249, 0.1410645842552185, 0.1410645842552185, 0.14859332144260406, 0.14529123902320862, 0.14951789379119873, 0.15321621298789978, 0.14912164211273193, 0.1566503793001175, 0.15281997621059418, 0.15189538896083832, 0.15849953889846802, 0.15942411124706268, 0.15955619513988495, 0.16061286628246307, 0.16457535326480865, 0.16470743715763092, 0.1710474193096161, 0.1678774207830429, 0.1728965789079666, 0.1830669641494751, 0.1698586642742157, 0.17672698199748993, 0.17976489663124084, 0.17276449501514435, 0.1842557191848755, 0.18174614012241364, 0.190859854221344, 0.18835029006004333, 0.18874652683734894, 0.18953903019428253, 0.19944524765014648, 0.1900673657655716, 0.19693566858768463, 0.19442610442638397, 0.19112402200698853, 0.20314356684684753, 0.19957733154296875, 0.19799233973026276, 0.20921939611434937, 0.20763438940048218, 0.2036719024181366, 0.20274733006954193, 0.21397437155246735, 0.21423853933811188, 0.21080438792705536, 0.21635186672210693, 0.22163519263267517, 0.21780477464199066, 0.2215031087398529, 0.22361643612384796, 0.21740853786468506, 0.22176727652549744, 0.23273015022277832, 0.22057852149009705, 0.22956016659736633, 0.22414475679397583, 0.23074890673160553, 0.2292959988117218, 0.23576806485652924, 0.23273015022277832, 0.2316734939813614, 0.23814556002616882, 0.23497556149959564, 0.23523972928524017, 0.23959846794605255, 0.2386738806962967], "val_loss": [1.970391137259347, 1.9698498589651925, 1.9693172318594796, 1.9687737737383162, 1.9682373319353377, 1.967693873814174, 1.967158317565918, 1.9666244643075126, 1.9660852296011788, 1.9655553272792272, 1.9650243350437708, 1.9644947733197893, 1.9639616012573242, 1.9634320395333427, 1.9628973688398088, 1.962355613708496, 1.961824689592634, 1.961294514792306, 1.9607584135872977, 1.9602276257106237, 1.9596992220197404, 1.9591668673924036, 1.958637033190046, 1.9581104006086076, 1.9575813157217843, 1.9570471218654089, 1.9565166064671107, 1.9559869766235352, 1.9554497855050224, 1.9549199513026647, 1.9543840544564384, 1.953845637185233, 1.9533133506774902, 1.9527736391339983, 1.9522411482674735, 1.951713970729283, 1.9511846814836775, 1.9506524630955286, 1.9501184735979353, 1.949582781110491, 1.9490409578595842, 1.9485040392194475, 1.9479642595563615, 1.9474247523716517, 1.9468838827950614, 1.9463438306535994, 1.9457994188581194, 1.9452582086835588, 1.9447097097124373, 1.9441652297973633, 1.9436088970729284, 1.943061419895717, 1.9425087656293596, 1.9419553620474679, 1.941399165562221, 1.9408463750566756, 1.9402875900268555, 1.9397340502057756, 1.9391756738935197, 1.9386089869907923, 1.9380430494035994, 1.9374801090785436, 1.9369115829467773, 1.9363387652805872, 1.9357702391488212, 1.9351938111441476, 1.9346154757908411, 1.9340382303510393, 1.9334608486720495, 1.9328786986214774, 1.9322936194283622, 1.9317006383623396, 1.9311109951564245, 1.9305167198181152, 1.9299257142203194, 1.9293271473475866, 1.9287245614188058, 1.9281243596758162, 1.9275147574288505, 1.9268981388636999, 1.9262895584106445, 1.9256752559116908, 1.9250562531607491, 1.9244325501578194, 1.9238078253609794, 1.9231854847499303, 1.9225531305585588, 1.921930926186698, 1.9212966646466936, 1.9206675801958357, 1.92002500806536, 1.919386727469308, 1.9187393869672502, 1.918097768511091, 1.9174434116908483, 1.9167916434151786, 1.9161258425031389, 1.9154649462018694, 1.9147977147783553, 1.9141264642987932], "val_accuracy": [0.04233333468437195, 0.04500000178813934, 0.04699999839067459, 0.05133333429694176, 0.0560000017285347, 0.05900000035762787, 0.06333333253860474, 0.0676666647195816, 0.07066666334867477, 0.07500000298023224, 0.07866666465997696, 0.08266666531562805, 0.08633333444595337, 0.09033333510160446, 0.09700000286102295, 0.10566666722297668, 0.10899999737739563, 0.11433333158493042, 0.11800000071525574, 0.12300000339746475, 0.1303333342075348, 0.13566666841506958, 0.1420000046491623, 0.14766666293144226, 0.15666666626930237, 0.16200000047683716, 0.16500000655651093, 0.1706666648387909, 0.17399999499320984, 0.17800000309944153, 0.18166667222976685, 0.1889999955892563, 0.1940000057220459, 0.1966666728258133, 0.2056666612625122, 0.20999999344348907, 0.21566666662693024, 0.21933333575725555, 0.22599999606609344, 0.2303333282470703, 0.23499999940395355, 0.24033333361148834, 0.24766667187213898, 0.25333333015441895, 0.257999986410141, 0.2616666555404663, 0.26766666769981384, 0.2709999978542328, 0.27399998903274536, 0.2776666581630707, 0.28200000524520874, 0.28600001335144043, 0.2879999876022339, 0.2906666696071625, 0.2933333218097687, 0.296999990940094, 0.30033332109451294, 0.3050000071525574, 0.3089999854564667, 0.312666654586792, 0.3166666626930237, 0.320333331823349, 0.32199999690055847, 0.32633334398269653, 0.33033332228660583, 0.3323333263397217, 0.3356666564941406, 0.33666667342185974, 0.34033334255218506, 0.3426666557788849, 0.3466666638851166, 0.3503333330154419, 0.3529999852180481, 0.35466668009757996, 0.35600000619888306, 0.35766667127609253, 0.3606666624546051, 0.3636666536331177, 0.367333322763443, 0.3683333396911621, 0.3696666657924652, 0.3713333308696747, 0.37433332204818726, 0.375, 0.37533333897590637, 0.3763333261013031, 0.3773333430290222, 0.37933334708213806, 0.3813333213329315, 0.38233333826065063, 0.38366666436195374, 0.3840000033378601, 0.38600000739097595, 0.38733333349227905, 0.38866665959358215, 0.3889999985694885, 0.3903333246707916, 0.39100000262260437, 0.39266666769981384, 0.39366665482521057]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [8, 8, 6, 9, 4, 6, 1, 9, 8, 9, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [3, 3, 3, 3, 3, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [57, 19, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [1, 0, 0, 1, 1, 0], [0, 7, 6, 4], [7, 0], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [53, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 11, 11, 8, 3, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.divide_no_nan(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, grad))), tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06300356984138489, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 4, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [1, 4, 2, 3, 8, 8, 2, 9, 8, 9, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [3, 3, 3, 2, 3, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [34, 19, 30, 73, 40, 57, 35, 9, 54, 64], [0, 0, 1, 0, 0, 0, 1, 1], [1, 0, 0, 1, 1, 0], [0, 7, 6, 4], [7, 0], [64], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [53, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 7, 3, 4, 2], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.multiply(tf.math.multiply(alpha, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [8, 0, 6, 9, 4, 6, 1, 9, 8, 9, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [2, 3, 3, 0, 3, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [21, 19, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [1, 0, 0, 1, 1, 0], [0, 7, 6, 4], [4, 0], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [53, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 11, 11, 8, 3, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.negative(tf.math.divide_no_nan(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), beta)), tf.math.add(beta, grad))), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06273940205574036, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 4, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [8, 0, 6, 9, 0, 1, 1, 9, 8, 9, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [3, 3, 3, 0, 3, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [21, 19, 30, 73, 40, 57, 35, 9, 54, 64], [0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 1, 0], [0, 7, 6, 4], [7, 0], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [53, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 6, 6, 5, 1, 1, 4, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.negative(tf.math.divide_no_nan(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), tf.math.add(sigma, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07674019038677216, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [6, 2, 2, 3, 9, 8, 1, 9, 1, 9, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [3, 3, 3, 3, 3, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [34, 19, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0], [1, 7, 6, 4], [7, 0], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [53, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 4, 1, 1, 12, 12, 8, 4, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), grad), tf.math.sqrt(tf.math.subtract(grad, tf.math.add(beta, grad))))), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [8, 8, 6, 9, 4, 6, 1, 9, 8, 9, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [3, 3, 3, 3, 3, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [57, 27, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0], [0, 7, 6, 4], [7, 0], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [53, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 3, 3, 2, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(grad, tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.sqrt(grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [4, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [1, 2, 2, 3, 4, 6, 1, 9, 8, 9, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [3, 3, 0, 3, 0, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [75, 68, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [1, 0, 0, 1, 1, 0], [0, 7, 6, 4], [7, 0], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [53, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 3, 1, 1, 16, 16, 9, 7, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.multiply(tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))), grad), tf.math.add(beta, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [1, 4, 1, 9, 8, 8, 2, 9, 8, 9, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [3, 3, 3, 3, 3, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [21, 19, 30, 73, 40, 57, 35, 9, 54, 64], [0, 0, 1, 0, 0, 0, 1, 1], [1, 0, 0, 1, 1, 0], [0, 7, 6, 4], [7, 0], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [53, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 11, 11, 8, 3, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), grad))))), tf.math.add(beta, grad))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 6, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [8, 8, 0, 6, 4, 6, 1, 9, 8, 9, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [3, 3, 3, 0, 3, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [34, 19, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [1, 0, 0, 1, 1, 0], [0, 7, 6, 4], [7, 0], [64], [0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 0, 0, 0, 0, 2, 2], [16, 50, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 4, 4, 3, 1, 0, 1, 0, 0, 0, 0, 7, 4, 3, 3], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.negative(grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [4, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [8, 8, 6, 9, 4, 6, 1, 9, 8, 9, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [3, 3, 3, 3, 3, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [62, 19, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [1, 0, 0, 1, 1, 0], [0, 7, 6, 4], [7, 0], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [53, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 3, 1, 1, 12, 12, 9, 3, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.divide_no_nan(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), grad)), tf.math.sqrt(tf.math.add(beta, grad)))), grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [5, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [8, 6, 6, 9, 4, 6, 1, 9, 8, 9, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [2, 3, 3, 3, 3, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [21, 19, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [1, 0, 0, 1, 1, 0], [0, 7, 6, 4], [7, 0], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [53, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 12, 12, 8, 4, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), beta), tf.math.add(beta, grad))), tf.math.add(beta, grad)))), grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07674019038677216, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [8, 8, 0, 6, 4, 6, 1, 9, 8, 9, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [1, 1, 3, 3, 3, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [27, 19, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [1, 0, 0, 1, 1, 0], [0, 7, 6, 4], [7, 0], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [53, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 3, 1, 1, 13, 13, 9, 4, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.negative(tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), alpha), alpha)), tf.math.add(beta, tf.math.sqrt(grad))), tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [4.077081491603607, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.2300885021686554, 0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [24120.05859375, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09566666930913925, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 2, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [8, 8, 0, 6, 2, 6, 1, 9, 8, 9, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [3, 1, 3, 3, 3, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [57, 19, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [1, 0, 0, 1, 1, 0], [0, 7, 6, 4], [7, 0], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [53, 97, 13, 96, 41]], "fitness": -0.07199999690055847, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.301371868307627, 2.301047358640732, 2.2994463118453776, 2.298384054068325, 2.300110130230701, 2.2985011209287127, 2.2984840871163206, 2.2994303354072594, 2.3000500204068417, 2.299414372447302, 2.2993685054489337, 2.2993527184923357, 2.2996216305274344, 2.2996935543996972, 2.2998215226040006], "accuracy": [0.09060890227556229, 0.09509972482919693, 0.09853387624025345, 0.09959053993225098, 0.09589222073554993, 0.10170386731624603, 0.10421344637870789, 0.10566636174917221, 0.10091137140989304, 0.10170386731624603, 0.10038304328918457, 0.09906221181154251, 0.10091137140989304, 0.09721305221319199, 0.09655263274908066], "val_loss": [1.970186642238072, 1.9696531976972307, 1.9693538802010673, 1.9693101474217005, 1.9692727497645788, 1.9692557879856654, 1.9693420273917062, 1.969358307974679, 1.9693640300205775, 1.9694559914725167, 1.969637734549386, 1.9698702948434013, 1.9701179095676966, 1.970386232648577, 1.9706295558384486], "val_accuracy": [0.04933333396911621, 0.05166666582226753, 0.061666667461395264, 0.06466666609048843, 0.0689999982714653, 0.07066666334867477, 0.07633333653211594, 0.07666666805744171, 0.07833333313465118, 0.0820000022649765, 0.07866666465997696, 0.07833333313465118, 0.07466666400432587, 0.07333333045244217, 0.07000000029802322]}}]