[{"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 2, 4, 0, 5, 5, 8, 4, 4, 6, 3, 6], [3, 0, 1, 0, 2, 1, 2, 2, 0], [31, 32, 29, 49, 25], [1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 1], [3, 7, 6, 5, 5, 7, 3, 9], [2, 3, 3, 3, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [1, 3, 9, 1, 2], [3, 0, 2], [23, 52, 13]], "fitness": -0.7202857136726379, "mapping_values": [1, 14, 14, 9, 5, 2, 9, 9, 5, 4, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(alpha)))))))), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))), tf.math.square(grad)), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [2.2985183550240484, 2.2478365399944247, 2.104421898185333, 1.7419286341069475, 1.4045828786807653, 1.350710372284907, 1.5987872053225594, 1.1258234243981198, 1.2627289980283865, 141.03325182247502, 24407935261322.188, 2.312333286493493, 2.317950897276, 2.325313180586634], "accuracy": [0.09840179979801178, 0.23180557787418365, 0.36388853192329407, 0.44049662351608276, 0.5189539194107056, 0.5715228915214539, 0.6149781942367554, 0.6065248847007751, 0.5934486985206604, 0.5119535326957703, 0.10328886657953262, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.951211929321289, 1.867476531437465, 1.6289340087345667, 1.1281036649431502, 0.8105716194425311, 0.722376891544887, 0.7639660835266113, 0.7620189360209874, 0.7526465654373169, 1998.1409737723213, 1.980726718902588, 1.9853321484157018, 1.9913458142961775, 1.9987104960850306], "val_accuracy": [0.21566666662693024, 0.41499999165534973, 0.48500001430511475, 0.5910000205039978, 0.6826666593551636, 0.7106666564941406, 0.6919999718666077, 0.7003333568572998, 0.7143333554267883, 0.0963333323597908, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1], [1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1], [0, 6, 8, 1, 2, 4, 0, 5, 9, 8, 4, 4, 6, 3, 6], [3, 0, 1, 0, 2, 1, 2, 2, 0], [31, 12, 29, 49, 25], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 1], [3, 4, 6, 9, 5, 7, 3, 9], [2, 3, 3, 3, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1], [1, 3, 9, 1, 2, 9, 5, 3], [2, 0, 0, 0, 2, 3], [23, 12, 13, 38, 86]], "fitness": -0.10657142847776413, "mapping_values": [1, 1, 1, 0, 1, 0, 8, 8, 5, 3, 1, 1, 0, 0, 0, 0, 12, 8, 4, 5], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.square(grad)))), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(beta, tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.math.square(tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))))))", "other_info": {"loss": [2.3006265473608263, 2.3013098603620064, 2.302409602320032, 2.302572326102135, 2.3025849854957157, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09325055778026581, 0.09470347315073013, 0.10091137140989304, 0.10210011899471283, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9720830917358398, 1.9734289986746651, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10533333569765091, 0.1146666631102562, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [6, 3, 8, 2, 4, 4, 8, 8, 9, 8, 4, 4, 8, 1, 3, 0, 9, 3], [3, 2, 1, 0, 2, 1, 2, 2, 2, 3, 3, 2, 2, 3], [31, 32, 29, 85, 25], [1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1], [3, 7, 0, 9, 5, 7, 3, 9], [2, 2, 0, 1, 1, 4], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 0, 1, 1], [6, 0, 5, 1, 2], [1, 0, 0, 0, 2, 3], [23, 11, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 25, 25, 16, 9, 2, 6, 6, 4, 2, 1, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))))), tf.math.sqrt(tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))))), tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.subtract(grad, tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), grad)))))))), tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.multiply(beta, tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(alpha, tf.math.negative(tf.math.square(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10196803510189056, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 9, 4, 8, 5, 5, 8, 4, 4, 6, 3, 6, 5, 9], [2, 0, 1, 0, 2, 1, 2, 2, 0], [46, 32, 29, 49, 25], [1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 1], [3, 6, 6, 5, 5, 7, 3, 9], [3, 3, 1, 3, 1], [69, 17, 4], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [1, 4, 9, 1, 2], [3, 0, 2, 0, 2, 3], [14, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 12, 9, 3, 2, 9, 9, 5, 4, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(grad, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(alpha, alpha))))))))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))), tf.math.square(alpha)), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.pow(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10077928751707077, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 5, 2, 6, 2, 8, 0, 3, 5, 8, 4, 4, 6, 3, 6], [3, 0, 1, 0, 2, 1, 2, 2, 0], [31, 36, 29, 49, 25], [1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0], [3, 7, 4, 3, 0, 7, 3, 9], [2, 3, 3, 3, 1, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [1, 3, 9, 1, 2], [3, 0, 2], [84, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 0, 14, 14, 8, 6, 1, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.square(grad))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.pow(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.negative(grad))), grad), tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 2, 4, 8, 4, 5, 8, 4, 4, 6, 3, 6, 8, 8], [2, 0, 1, 0, 2, 1, 2, 2, 0], [31, 32, 29, 49, 25], [1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 4, 9, 5, 5, 7, 3, 9], [2, 3, 3, 3, 1], [72, 91], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [0], [64], [1, 1, 0, 0, 1, 1, 1], [1, 3, 9, 1, 2], [0, 0, 2], [88, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 5, 5, 3, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.pow(tf.math.add(beta, beta), grad), tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302141308390847, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0], [1, 5, 8, 6, 4, 4, 0, 2, 4, 8, 4, 3, 2, 2, 6, 4, 1, 3, 1, 3, 8, 9], [2, 2, 1, 2, 2, 2, 2, 2, 0, 0, 2, 1, 2, 3, 0, 2], [31, 90, 29, 49, 25], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 1], [9, 0, 6, 5, 5, 7, 3, 9], [1, 3, 3, 3, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [1, 6, 9, 1, 2, 0, 8], [3, 1, 2], [23, 52, 13, 65]], "fitness": -0.10000000149011612, "mapping_values": [1, 38, 38, 22, 16, 4, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 5, 2, 3, 0], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.square(tf.math.add(alpha, grad)), tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.sqrt(alpha))), tf.math.pow(tf.math.multiply(tf.math.add(alpha, tf.math.add(grad, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.subtract(grad, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))))), tf.math.multiply(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), alpha))))), grad)), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.sqrt(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.divide_no_nan(alpha, beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [6, 2, 8, 6, 6, 0, 0, 5, 6, 8, 4, 4, 6, 3, 6], [1, 0, 1, 0, 2, 1, 2, 2, 0], [31, 36, 29, 49, 25], [1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [1, 0, 6, 5, 5, 7, 3, 9], [2, 1, 3, 3, 1], [98, 17], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [1, 1, 0, 0, 1, 1, 1], [1, 3, 9, 1, 2], [3, 0, 2], [46, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 8, 5, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.sqrt(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)), tf.math.negative(tf.math.add(alpha, tf.math.square(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32))))))))), grad), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.080042265355587, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [9, 1, 8, 6, 8, 4, 0, 2, 4, 8, 4, 3, 2, 3, 6, 4, 1], [3, 0, 1, 0, 2, 1, 2, 2, 0, 1, 2], [66, 32, 29, 49, 25], [1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0], [0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0], [3, 7, 2, 6, 6, 7, 9, 9, 9, 8, 6, 2, 6, 3, 1, 7, 4, 7, 3, 0, 2, 2, 5, 0, 7, 8, 0, 2, 7, 7, 5, 6, 0, 0, 7, 3, 1, 7, 5, 8, 7, 9], [2, 3, 2, 3, 1, 2, 3, 1, 5, 4, 4, 5, 4, 3, 4, 1, 4, 5, 5, 2, 4, 1, 5, 2, 4, 2], [98, 59, 7, 62], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [1, 1, 0, 1, 1, 1], [1, 3, 9, 1, 2], [0, 0, 2], [97, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 13, 13, 8, 5, 2, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.divide_no_nan(beta, grad)))), tf.math.add(beta, tf.math.add(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32))))), alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302141308390847, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1], [0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [8, 2, 8, 6, 2, 4, 0, 5, 5, 8, 4, 4, 6, 3, 6], [3, 0, 1, 0, 2, 1, 2, 2, 0], [31, 32, 29, 49, 25], [1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1], [1, 0, 0, 0, 0, 1, 0, 1, 0], [3, 7, 6, 0, 0, 7, 3, 9], [4, 3, 3, 1, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [2, 3, 9, 1, 2], [0, 0, 3, 0, 0, 0], [33, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), sigma))", "other_info": {"loss": [2.302141308390847, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 2, 4, 5, 5, 1, 8, 4, 4, 6, 3, 6, 0, 7], [2, 0, 1, 0, 2, 1, 2, 2, 0, 0, 0, 0], [7, 32, 29, 49, 25, 14], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 1], [3, 1, 6, 5, 5, 7, 3, 9], [2, 3, 3, 3, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [1, 3, 9, 1, 2], [3, 0, 1], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 29, 29, 17, 12, 6, 9, 9, 5, 4, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.sqrt(tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))))))))), tf.math.pow(tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.multiply(grad, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))))), tf.math.divide_no_nan(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))))))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.subtract(tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))), tf.math.square(grad)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1], [1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1], [3, 1, 8, 6, 2, 4, 4, 5, 5, 8, 4, 4, 6, 3, 6], [1, 1, 1, 2, 0, 1, 2, 2, 0, 2, 0, 2, 0], [31, 32, 29, 49, 25], [1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 1], [2, 7, 6, 5, 5, 7, 3, 9], [2, 2, 1, 1, 3, 3, 4, 1, 0], [1], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [4], [64], [0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1], [1, 3, 9, 1, 2, 9], [2, 0, 0, 0, 2, 3], [23, 52, 13, 65]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 5, 4, 0, 1, 1, 0, 1, 0, 9, 5, 4, 4], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.square(tf.math.add(beta, beta)))), tf.math.add(beta, tf.math.square(alpha))), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(beta, tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [2.302141308390847, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1], [1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1], [8, 2, 8, 6, 2, 4, 0, 5, 5, 8, 4, 4, 6, 3, 6], [3, 0, 1, 0, 2, 1, 2, 2, 0], [31, 32, 29, 49, 25], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1], [0, 0, 1, 0, 0, 1, 1, 1, 1], [3, 8, 6, 5, 5, 7, 3, 9], [3, 3, 1, 1, 3, 3, 4, 1, 0], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 1, 1, 1, 1], [1, 3, 9, 1, 2], [2, 0, 0, 0, 2, 3], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 7, 7, 4, 3, 0, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, grad)), alpha)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(beta, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [1, 1, 8, 6, 8, 4, 0, 2, 4, 8, 4, 3, 2, 3, 6, 4, 1, 3, 1, 9], [2, 2, 0, 0, 2, 1, 2, 2, 0, 2, 2, 1], [95, 32, 29, 49, 25], [1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [3, 8, 6, 5, 5, 7, 3, 9], [1, 3, 3, 3, 1], [98, 17], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [1, 1, 0, 1, 1, 1], [1, 3, 9, 1, 2, 0, 8], [3, 0, 2], [23, 52, 13, 65]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(grad, grad), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.080042265355587, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [4, 3, 8, 6, 2, 4, 0, 6, 5, 8, 4, 4, 6, 3, 6], [3, 0, 1, 0, 2, 1, 2, 2, 0], [74, 32, 29, 49, 25], [1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 1, 1], [3, 4, 6, 9, 5, 7, 3, 9], [2, 1, 2, 1, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [2, 3, 9, 1, 2], [1, 3, 0, 0, 2, 3], [46, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 7, 7, 4, 3, 1, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.multiply(beta, tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), beta))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.multiply(sigma, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08057060092687607, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [8, 0, 8, 6, 2, 8, 0, 5, 5, 8, 4, 4, 6, 3, 6], [3, 0, 2, 0, 2, 1, 2, 2, 0], [31, 12, 29, 49, 25], [1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 1], [3, 4, 6, 9, 5, 7, 3, 9], [2, 3, 3, 3, 1], [44, 55], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 1, 0, 1, 1], [1, 3, 9, 1, 2], [3, 0, 2], [46, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 3, 1, 0, 7, 7, 4, 3, 1, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.multiply(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [44764162.414704114, 851734522.1503104, 3946693589.801083, 11059694071.00568, 23550044713.18452, 43164831843.546165], "accuracy": [0.09893012791872025, 0.10210011899471283, 0.10289261490106583, 0.10210011899471283, 0.1002509593963623, 0.10394927859306335], "val_loss": [166173810.2857143, 1328177700.5714285, 4481242843.428572, 10620590957.714285, 20741442998.857143, 35839087177.14286], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 2, 4, 0, 5, 5, 8, 4, 4, 6, 3, 6], [0, 0, 1, 0, 0, 1, 2, 2, 0], [31, 32, 29, 49, 25], [1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 1], [2, 7, 6, 5, 5, 7, 3, 9], [2, 3, 3, 3, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [1, 3, 9, 1, 2], [3, 0, 2], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 23, 23, 14, 9, 5, 9, 9, 5, 4, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.sqrt(tf.math.add(alpha, alpha)))))))))), tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.multiply(grad, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))), tf.math.square(grad)), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 2, 4, 0, 5, 6, 8, 4, 4, 6, 3, 6, 3, 9], [2, 2, 2, 0, 2, 1, 2, 2, 0, 2, 2, 1], [95, 32, 29, 49, 25], [0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [1, 0, 6, 5, 5, 7, 3, 9], [2, 1, 3, 3, 1], [98, 17], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [1, 1, 0, 0, 1, 1, 1], [1, 3, 9, 1, 2], [3, 0, 2], [46, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 28, 28, 17, 11, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(grad, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))))), grad), tf.math.sqrt(tf.math.pow(alpha, tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(grad, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.multiply(tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.080042265355587, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1], [8, 2, 6, 6, 9, 4, 8, 5, 5, 8, 4, 4, 6, 3, 6, 5, 9], [1, 2, 2, 0, 2, 1, 2, 2, 1, 2, 2, 1, 1, 1], [31, 12, 29, 49, 25], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1], [0, 1, 0, 1, 0, 0, 1, 1, 1], [0, 4, 9, 9, 5, 7, 3, 9], [3, 3, 1, 3, 1], [27, 17, 4], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [1, 0, 0, 1, 1, 1], [1, 4, 9, 1, 2], [3, 0, 1, 0, 2, 3], [46, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 12, 12, 8, 4, 2, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.math.square(tf.math.add(alpha, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.301964576107998, 2.3015080915387314, 2.302234215554371, 2.302591723757114, 2.3029373966865, 2.301821987122876], "accuracy": [0.09034473448991776, 0.09074098616838455, 0.08836349099874496, 0.08915598690509796, 0.09047681838274002, 0.09298639744520187], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 2, 6, 0, 5, 5, 8, 4, 4, 6, 3, 6], [3, 2, 1, 0, 2, 1, 2, 2, 0], [31, 32, 29, 49, 25], [1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 1], [3, 7, 6, 0, 5, 7, 3, 9], [2, 3, 3, 3, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [1, 1, 0, 1, 1, 1], [1, 3, 9, 1, 2], [3, 0, 3], [23, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 14, 14, 9, 5, 1, 9, 9, 5, 4, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))))), tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))), tf.math.square(grad)), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.301964576107998, 2.3015080915387314, 2.302234215554371, 2.302591723757114, 2.3029373966865, 2.301821987122876], "accuracy": [0.09034473448991776, 0.09074098616838455, 0.08836349099874496, 0.08915598690509796, 0.09047681838274002, 0.09298639744520187], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}]