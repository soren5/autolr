[{"genotype": [[0], [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 3, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [2, 5, 0, 6, 9, 6, 2, 2, 5, 5, 4, 2, 0, 2, 5, 6, 2, 3, 9, 3, 2, 2, 9, 6, 1, 2, 4, 5, 2, 2, 5, 8, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [1, 3, 1, 0, 3, 3, 1, 0, 2, 3, 2, 2, 3, 3, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [59, 88, 21, 97, 70, 12, 60, 9, 54, 64], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1], [4, 2, 2, 6, 6, 7, 4], [4, 4, 2], [65, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.8448571562767029, "mapping_values": [1, 4, 4, 2, 2, 1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(alpha, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9406769072705603, 1.0998856504249095, 0.7864879058525626, 0.670576527960753, 0.6256941973793035, 0.5823892755688551, 0.5461985570895375, 0.5122593780432112, 0.5070297767646466, 0.48527107096587535, 0.4704006091517984, 0.45289263552395015, 0.4231852259004215, 0.40755598788500114, 0.39858723196528606, 0.39499940101921815, 0.38429406738756766, 0.3702882294799075, 0.3476244290003199, 0.3459399794551281, 0.32300152872390026, 0.3285667312781352, 0.3092946174980517, 0.31067855685866663, 0.29662035580214224, 0.2938606881147457, 0.2791252532781249, 0.274005582280336, 0.2715602774094786, 0.24786197918359834, 0.257485260029416, 0.25397578130592174, 0.2436302712332571, 0.23601833496032656, 0.23263604527435536, 0.22866329364355575, 0.21974827354500054], "accuracy": [0.3555673062801361, 0.5974111557006836, 0.6959450244903564, 0.7338528633117676, 0.7581561207771301, 0.7708360552787781, 0.7882710099220276, 0.8013472557067871, 0.8045172095298767, 0.8128384351730347, 0.8286884427070618, 0.8300092220306396, 0.8392550349235535, 0.8457271456718445, 0.8541803956031799, 0.8516708612442017, 0.8569541573524475, 0.8577466607093811, 0.8683133125305176, 0.8683133125305176, 0.8786157965660095, 0.8745211958885193, 0.8821820020675659, 0.884691596031189, 0.8865407705307007, 0.8878615498542786, 0.8887861371040344, 0.8944657444953918, 0.8943336606025696, 0.9041078090667725, 0.9015982151031494, 0.89988112449646, 0.9026548862457275, 0.9082023501396179, 0.9096552729606628, 0.9104477763175964, 0.9153348207473755], "val_loss": [1.2109062331063407, 0.685599684715271, 0.5463987248284476, 0.521680474281311, 0.48967598165784565, 0.4428742527961731, 0.4190354347229004, 0.41986779655729023, 0.4101117253303528, 0.39369371107646395, 0.38362066234861103, 0.3741881677082607, 0.35346202339444843, 0.35175420556749615, 0.3496501786368234, 0.3743269784109933, 0.3389855367796762, 0.33470150402614046, 0.3316149115562439, 0.328384986945561, 0.3454855425017221, 0.33856075150626047, 0.3386360747473581, 0.33349678346088957, 0.31690328461783274, 0.3261850135666983, 0.3290163278579712, 0.3293717162949698, 0.32413910967963083, 0.3455843925476074, 0.3421714646475656, 0.3301331400871277, 0.3332217420850481, 0.3185492924281529, 0.32747682503291536, 0.33472262961523874, 0.33407752002988544], "val_accuracy": [0.6146666407585144, 0.6693333387374878, 0.7419999837875366, 0.7559999823570251, 0.762333333492279, 0.7973333597183228, 0.8143333196640015, 0.8086666464805603, 0.8073333501815796, 0.8176666498184204, 0.8330000042915344, 0.8333333134651184, 0.8476666808128357, 0.8500000238418579, 0.8450000286102295, 0.8333333134651184, 0.8543333411216736, 0.859333336353302, 0.8606666922569275, 0.8633333444595337, 0.8533333539962769, 0.8526666760444641, 0.8603333234786987, 0.8619999885559082, 0.8673333525657654, 0.8653333187103271, 0.8610000014305115, 0.8666666746139526, 0.8690000176429749, 0.859666645526886, 0.8703333139419556, 0.8726666569709778, 0.8700000047683716, 0.8683333396911621, 0.8669999837875366, 0.8653333187103271, 0.8700000047683716]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [5, 66, 89, 50, 85, 46], [0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [2, 5, 0, 2, 8, 6, 2, 2, 5, 5, 4, 4, 0, 5, 5, 2, 2, 4, 9, 3, 1, 2, 1, 6, 1, 2, 4, 5, 2, 2, 5, 8, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [2, 5, 1, 0, 3, 3, 1, 0, 2, 3, 2, 0, 3, 3, 3, 0, 3, 3, 0, 0, 3, 3, 0, 3, 2, 1, 3, 3, 4, 2, 1, 4, 4], [27, 0, 21, 2, 70, 12, 60, 9, 54, 64], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1], [0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [4, 2, 4, 6, 6, 9, 4], [4, 4, 2], [65, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [32, 23, 13, 96, 52, 15, 96]], "fitness": -0.6928571462631226, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, grad))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3007880784202137, 2.3008851437536544, 2.2961110117381605, 2.2907515840917103, 2.2815308321137957, 2.272023622086807, 2.259440834874002, 2.2479265553682644, 2.231451534623436, 2.215387923196952, 2.194970373432823, 2.175884540228087, 2.1459972093826774, 2.1131936155683753, 2.0767796876927753, 2.03018225683213, 1.9766337322977792, 1.910271772256916, 1.8364809096812131, 1.7639235957675623, 1.6882437706591982, 1.62695966864684, 1.5717961719841957, 1.5124439250334867, 1.468850487636742, 1.4070564205179503, 1.3736223646552415, 1.3406234008918554, 1.3038533314296896, 1.2910937033372234, 1.260142656097543, 1.2118698042365836, 1.158010171499266, 1.1398026590822175, 1.1157617881833097, 1.0927309282325781, 1.1012633741807314], "accuracy": [0.09945846349000931, 0.09800554811954498, 0.11015717685222626, 0.12098798155784607, 0.14555540680885315, 0.17461365461349487, 0.20301149785518646, 0.23140932619571686, 0.2801479399204254, 0.2969224750995636, 0.3238673806190491, 0.34143441915512085, 0.3645489513874054, 0.37722888588905334, 0.3839651346206665, 0.39862632751464844, 0.40523049235343933, 0.4157971143722534, 0.4142121374607086, 0.41764628887176514, 0.4245145916938782, 0.44485536217689514, 0.4527803361415863, 0.4752344489097595, 0.495839387178421, 0.5107647776603699, 0.5205389261245728, 0.5352001190185547, 0.5522388219833374, 0.5591071248054504, 0.5680887699127197, 0.5729758143424988, 0.5947695374488831, 0.5959582328796387, 0.6007132530212402, 0.6086382269859314, 0.6033549308776855], "val_loss": [1.970341341836112, 1.9672970090593611, 1.9623616763523646, 1.9555870464869909, 1.9471117428370885, 1.9371168272835868, 1.9257347924368722, 1.9130090985979353, 1.8988409723554338, 1.882822104862758, 1.8641921452113561, 1.8420376777648926, 1.8154446056910925, 1.7833558491298132, 1.7443444388253349, 1.6967812606266566, 1.6392286505017961, 1.5709434917994909, 1.493739468710763, 1.4140168939317976, 1.3389753273555212, 1.270707641329084, 1.204655749457223, 1.1379978656768799, 1.0712254387991769, 1.0071402958461217, 0.9527328354971749, 0.913090671811785, 0.8826275893620082, 0.8522096872329712, 0.8185650110244751, 0.787604536328997, 0.7634823833193097, 0.7470666681017194, 0.7360657112939017, 0.7285964659282139, 0.7244913067136493], "val_accuracy": [0.04100000113248825, 0.06300000101327896, 0.09866666793823242, 0.1720000058412552, 0.2553333342075348, 0.32366666197776794, 0.35633334517478943, 0.375, 0.3973333239555359, 0.4176666736602783, 0.4313333332538605, 0.4476666748523712, 0.4546666741371155, 0.46566668152809143, 0.47099998593330383, 0.4776666760444641, 0.4816666543483734, 0.484333336353302, 0.4906666576862335, 0.503333330154419, 0.5113333463668823, 0.5196666717529297, 0.5406666398048401, 0.559333324432373, 0.5863333344459534, 0.6163333058357239, 0.6430000066757202, 0.6549999713897705, 0.6653333306312561, 0.6653333306312561, 0.6729999780654907, 0.6766666769981384, 0.6710000038146973, 0.6676666736602783, 0.6696666479110718, 0.6729999780654907, 0.671999990940094]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [2, 5, 5, 4, 9, 6, 2, 2, 5, 5, 4, 2, 0, 2, 5, 6, 2, 3, 9, 3, 2, 2, 9, 6, 1, 2, 4, 5, 2, 2, 5, 8, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 3, 1, 0, 3, 3, 1, 0, 2, 3, 2, 2, 3, 3, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [39, 0, 21, 97, 70, 12, 60, 9, 54, 64], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1], [4, 2, 2, 6, 6, 7, 4], [4, 4, 2], [65, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.5822857022285461, "mapping_values": [1, 4, 4, 2, 2, 1, 7, 7, 5, 2, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.square(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.square(tf.math.pow(tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32), grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.875366276564804, 1.13067446426866, 0.7945691267528617, 0.699714191750985, 0.6845669151139754, 0.659825876435867, 0.6796425872821503, 0.6960079253483537, 0.684161813377846, 0.6725875327867713, 0.6653908646227961, 0.6934145061315689, 0.7507329587812956, 0.8259732764646787, 3.0728462598349275e+19], "accuracy": [0.3803988993167877, 0.5856558084487915, 0.698718786239624, 0.7305507659912109, 0.7403249144554138, 0.7598732113838196, 0.7565711140632629, 0.7420420050621033, 0.7403249144554138, 0.7427024245262146, 0.755118191242218, 0.7391361594200134, 0.7408532500267029, 0.7149649858474731, 0.20855897665023804], "val_loss": [1.0755599226270403, 0.6537438801356724, 0.5448275123323713, 0.5443653890064785, 0.49262964725494385, 0.479702285357884, 0.5448977436338153, 0.49596565110342844, 0.5004549026489258, 0.4599429539271763, 0.49863788059779574, 0.5245582716805595, 0.5659234694072178, 0.7989211423056466, 3.616115025111607], "val_accuracy": [0.5730000138282776, 0.7120000123977661, 0.7483333349227905, 0.7593333125114441, 0.7749999761581421, 0.7910000085830688, 0.7433333396911621, 0.7776666879653931, 0.781333327293396, 0.8083333373069763, 0.7856666445732117, 0.7886666655540466, 0.7616666555404663, 0.6803333163261414, 0.0976666659116745]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1], [2, 1, 0, 6, 1, 6, 2, 2, 5, 5, 5, 2, 4, 2, 5, 6, 6, 8, 3, 8, 2, 2, 9, 0, 1, 2, 4, 5, 2, 2, 9, 8, 4, 1, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2, 4, 6, 1, 0], [0, 3, 1, 0, 2, 1, 1, 0, 2, 3, 3, 3, 1, 3, 3, 2, 4, 3, 0, 3, 3, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4, 3, 3, 3, 5], [59, 88, 21, 97, 70, 12, 60, 9, 54, 64], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [4, 2, 2, 6, 6, 7, 4], [4, 4, 2], [65, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [32, 23, 13, 96, 52, 15, 96]], "fitness": -0.10085714608430862, "mapping_values": [1, 4, 4, 2, 2, 0, 65, 65, 40, 25, 6, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 62, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.math.divide_no_nan(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(alpha, tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.negative(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32))))))))))), tf.math.add(beta, beta)), tf.math.add(beta, grad)))))), tf.math.add(beta, grad))), grad))))))))), tf.math.add(beta, alpha)))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.subtract(tf.math.add(grad, tf.math.pow(beta, tf.math.square(tf.math.add(tf.math.add(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)))))))), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.negative(alpha))), beta)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.300467570633259, 2.300595234697206, 2.2997339191595483, 2.3008894510021016, 2.3019850691154318, 2.302685910212192, 2.302940877043513], "accuracy": [0.09985470771789551, 0.10302469879388809, 0.10381719470024109, 0.0936468094587326, 0.08334434032440186, 0.08558975160121918, 0.08572183549404144], "val_loss": [1.9700846672058105, 1.9704978125435966, 1.9715389524187361, 1.972813265664237, 1.973548139844622, 1.9738044057573592, 1.9739300864083427], "val_accuracy": [0.061666667461395264, 0.11933333426713943, 0.09700000286102295, 0.09866666793823242, 0.09700000286102295, 0.07900000363588333, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 1, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1], [2, 1, 0, 6, 5, 6, 0, 1, 5, 5, 4, 2, 4, 2, 5, 6, 2, 9, 3, 8, 2, 2, 9, 0, 1, 5, 4, 5, 2, 6, 1, 8, 4, 1, 3, 0, 3, 2, 6, 0, 4, 1, 6, 0, 2], [0, 3, 1, 0, 2, 1, 1, 0, 2, 3, 2, 3, 1, 3, 3, 2, 3, 3, 0, 3, 1, 3, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [59, 88, 7, 97, 70, 12, 60, 9, 54, 64], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [4, 2, 2, 6, 6, 7, 4], [4, 4, 2], [65, 2, 82], [0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 12, 12, 7, 5, 2, 1, 0, 0, 0, 0, 49, 29, 20, 6], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.divide_no_nan(tf.math.square(grad), tf.math.divide_no_nan(alpha, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.pow(alpha, tf.math.add(tf.math.add(tf.math.subtract(beta, tf.math.pow(tf.math.subtract(tf.math.pow(beta, tf.math.subtract(sigma, tf.math.sqrt(tf.math.add(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), sigma)))), beta), tf.math.add(tf.math.pow(tf.math.sqrt(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), alpha), sigma))), tf.math.multiply(tf.math.multiply(tf.math.subtract(sigma, tf.math.negative(tf.math.negative(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))), alpha), beta)), tf.math.add(tf.math.negative(beta), tf.math.subtract(tf.math.negative(tf.math.square(tf.math.divide_no_nan(tf.math.multiply(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(alpha, tf.math.negative(beta))))), tf.math.square(tf.math.square(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 4, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 3, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [8, 5, 0, 6, 9, 6, 2, 2, 5, 5, 4, 2, 0, 2, 5, 6, 2, 3, 9, 3, 2, 2, 9, 6, 1, 2, 4, 5, 2, 2, 5, 8, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [2, 3, 1, 0, 3, 3, 1, 0, 2, 3, 2, 2, 3, 3, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [59, 88, 21, 97, 70, 12, 60, 9, 54, 64], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1], [4, 2, 2, 6, 6, 7, 4], [4, 4, 2], [65, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [483876768.77657694, 73485902402.88258, 1254922401375.1504, 8896612538369.893, 39450967674956.28, 129110291224850.56], "accuracy": [0.10077928751707077, 0.10130762308835983, 0.10328886657953262, 0.10091137140989304, 0.1014397069811821, 0.09787346422672272], "val_loss": [4065186669.714286, 219072144530.2857, 2351262260077.7144, 12818016820077.715, 48012739552402.29, 141625146886436.56], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [2, 5, 9, 6, 9, 6, 2, 2, 5, 5, 4, 2, 0, 2, 5, 6, 2, 3, 9, 3, 2, 2, 9, 6, 1, 2, 4, 5, 2, 2, 5, 8, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 3, 1, 0, 2, 1, 1, 0, 2, 3, 2, 3, 1, 3, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [59, 88, 21, 97, 70, 12, 60, 9, 54, 64], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [4, 2, 2, 6, 6, 7, 4], [4, 4, 2], [65, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 9, 5, 2, 4, 4, 3, 1, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.add(alpha, tf.math.add(grad, tf.math.pow(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.subtract(tf.math.square(tf.math.add(alpha, alpha)), alpha))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(beta, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [1, 1, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [73, 66, 89, 50, 85, 46], [1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [2, 5, 0, 6, 9, 6, 2, 2, 5, 5, 4, 2, 0, 2, 5, 6, 2, 3, 9, 3, 2, 2, 9, 6, 1, 2, 4, 5, 2, 2, 5, 8, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 2, 1, 0, 3, 3, 1, 0, 2, 3, 2, 2, 3, 3, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [97, 0, 21, 97, 70, 12, 60, 9, 54, 64], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [4, 2, 2, 6, 6, 7, 4], [4, 4, 2], [65, 2, 82], [0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [32, 23, 13, 96, 52, 15, 96]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 9, 5, 1, 15, 15, 10, 5, 3, 1, 0, 0, 0, 0, 49, 29, 20, 6], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.negative(alpha)))), tf.math.sqrt(tf.math.add(alpha, tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.subtract(tf.math.square(tf.math.add(alpha, alpha)), alpha))))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.square(tf.math.add(beta, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.negative(tf.math.divide_no_nan(tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.pow(alpha, tf.math.add(tf.math.add(tf.math.subtract(beta, tf.math.pow(tf.math.subtract(tf.math.pow(beta, tf.math.subtract(sigma, tf.math.sqrt(tf.math.add(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), sigma)))), beta), tf.math.add(tf.math.pow(tf.math.sqrt(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), alpha), sigma))), tf.math.multiply(tf.math.multiply(tf.math.subtract(sigma, tf.math.negative(tf.math.negative(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))), alpha), beta)), tf.math.add(tf.math.negative(beta), tf.math.subtract(tf.math.negative(tf.math.square(tf.math.divide_no_nan(tf.math.multiply(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(alpha, tf.math.negative(beta))))), tf.math.square(tf.math.square(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 4, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [2, 5, 0, 6, 9, 6, 2, 2, 5, 5, 4, 2, 0, 2, 5, 6, 2, 3, 9, 3, 2, 2, 9, 6, 1, 2, 4, 5, 2, 2, 5, 8, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [4, 3, 1, 0, 3, 3, 1, 0, 2, 3, 2, 2, 3, 3, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [81, 0, 21, 97, 70, 12, 60, 9, 54, 64], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [4, 2, 2, 6, 6, 7, 4], [4, 4, 2], [65, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [32, 23, 13, 96, 52, 15, 96]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 2, 4, 4, 2, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(grad, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.square(grad), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 3, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [5, 66, 89, 50, 85, 46], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [2, 5, 0, 6, 9, 6, 2, 2, 5, 5, 4, 2, 0, 2, 5, 6, 2, 3, 9, 3, 2, 2, 9, 6, 1, 2, 4, 5, 2, 2, 5, 8, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [1, 3, 1, 0, 3, 3, 1, 0, 2, 3, 2, 2, 3, 3, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [59, 88, 21, 97, 70, 12, 60, 9, 54, 64], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [4, 2, 2, 6, 6, 6, 4], [4, 4, 2], [65, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [2, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [32, 23, 13, 96, 52, 15, 96]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07898560166358948, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 0, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [31, 66, 89, 50, 85, 46], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [6, 2, 0, 6, 9, 6, 0, 2, 5, 5, 4, 2, 0, 2, 5, 6, 2, 3, 9, 3, 2, 2, 9, 6, 1, 2, 4, 5, 2, 2, 5, 8, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 3, 1, 0, 3, 3, 1, 0, 2, 3, 2, 2, 3, 3, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [97, 0, 21, 97, 70, 12, 60, 9, 54, 64], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [4, 2, 2, 6, 6, 7, 4], [4, 4, 2], [65, 2, 82], [0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 2, 1, 3, 1, 1, 0, 5, 0, 1, 4, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [75, 23, 13, 96, 51, 93, 96]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 2, 8, 8, 4, 4, 2, 1, 0, 0, 0, 0, 32, 16, 16, 4], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, grad), tf.math.negative(tf.math.divide_no_nan(alpha, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.pow(alpha, tf.math.add(tf.math.add(tf.math.subtract(beta, tf.math.pow(tf.math.subtract(beta, sigma), tf.math.pow(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.sqrt(sigma), beta)))), tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(tf.math.pow(alpha, sigma), sigma), tf.math.add(tf.math.subtract(tf.math.multiply(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.math.subtract(alpha, beta)), beta), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [2.302092875188541, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.1014397069811821, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [59, 66, 89, 50, 85, 46], [0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [8, 5, 0, 6, 9, 6, 0, 2, 5, 5, 4, 2, 0, 2, 5, 6, 2, 3, 9, 3, 2, 2, 9, 6, 1, 2, 4, 5, 2, 2, 5, 8, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 3, 1, 0, 3, 3, 1, 0, 2, 3, 2, 2, 3, 3, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [69, 0, 21, 97, 70, 12, 60, 9, 54, 64], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [4, 2, 2, 6, 6, 7, 4], [4, 4, 2], [65, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [32, 23, 13, 96, 52, 15, 96]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1395063.0818972166, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.20737022161483765, 0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [86441254790290.28, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0976666659116745, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [6, 2, 0, 6, 1, 6, 0, 2, 5, 5, 4, 2, 0, 2, 5, 6, 2, 3, 9, 3, 2, 2, 9, 6, 1, 2, 4, 5, 2, 2, 5, 8, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 3, 1, 0, 3, 3, 1, 0, 2, 3, 2, 2, 3, 3, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [40, 0, 21, 97, 70, 12, 60, 9, 54, 64], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [4, 2, 2, 6, 6, 7, 4], [4, 4, 2], [65, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [32, 23, 13, 96, 52, 15, 96]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 66, 66, 41, 25, 6, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), tf.math.divide_no_nan(tf.math.negative(alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))))))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(alpha, tf.math.add(beta, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta))))), tf.math.add(beta, grad))))), tf.math.add(beta, beta)))))), tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, grad))))), tf.math.add(tf.math.pow(grad, grad), beta))), tf.math.square(tf.math.add(tf.math.add(tf.math.square(tf.math.sqrt(tf.math.negative(tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)))))), tf.math.add(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, alpha)), tf.math.pow(alpha, alpha))))))))), tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [483876768.77657694, 73485902402.88258, 1254922401375.1504, 8896612538369.893, 39450967674956.28, 129110291224850.56], "accuracy": [0.10077928751707077, 0.10130762308835983, 0.10328886657953262, 0.10091137140989304, 0.1014397069811821, 0.09787346422672272], "val_loss": [4065186669.714286, 219072144530.2857, 2351262260077.7144, 12818016820077.715, 48012739552402.29, 141625146886436.56], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [58, 66, 89, 50, 85, 46], [0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [4, 5, 0, 6, 9, 6, 2, 2, 5, 5, 4, 2, 0, 2, 5, 6, 2, 3, 9, 3, 2, 2, 9, 6, 1, 2, 4, 5, 2, 2, 5, 8, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [1, 3, 1, 0, 3, 3, 1, 0, 2, 3, 2, 2, 3, 3, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [59, 88, 21, 97, 70, 12, 60, 9, 54, 64], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1], [4, 2, 2, 6, 6, 7, 4], [4, 4, 2], [65, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [0, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 7, 7, 5, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), grad))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3022389305801503, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 1, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [0, 66, 89, 50, 85, 46], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [1, 5, 0, 6, 9, 6, 2, 2, 5, 5, 4, 2, 0, 2, 5, 6, 2, 3, 9, 3, 2, 2, 9, 6, 1, 2, 4, 5, 2, 2, 5, 8, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 3, 1, 0, 3, 3, 1, 0, 2, 3, 2, 2, 3, 3, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [27, 41, 21, 2, 70, 12, 60, 9, 54, 64], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [5, 2, 2, 6, 8, 7, 4], [4, 4, 2], [65, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [32, 23, 13, 96, 52, 15, 96]], "fitness": -0.09971428662538528, "mapping_values": [1, 7, 7, 4, 3, 2, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)), tf.math.subtract(grad, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.30613322674307, 2.3413678644009237, 2.4330249526450003, 2.6031153179698254, 2.8801571637600674, 3.2585162970966524, 3.7616615592685467, 4.391702983955965, 5.060156328929114, 5.960699019194625], "accuracy": [0.09615638852119446, 0.0956280529499054, 0.1002509593963623, 0.09853387624025345, 0.09853387624025345, 0.09708096832036972, 0.1026284471154213, 0.09430722147226334, 0.09840179979801178, 0.09549596905708313], "val_loss": [1.9787946428571428, 2.003526278904506, 2.0633644376482283, 2.1692357744489397, 2.333806650979178, 2.5672329493931363, 2.8757549694606235, 3.26121153150286, 3.722318376813616, 4.256025178091867], "val_accuracy": [0.07266666740179062, 0.09433333575725555, 0.09666666388511658, 0.0989999994635582, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [1, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [66, 66, 89, 50, 85, 46], [0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [2, 5, 0, 6, 9, 8, 2, 2, 5, 5, 4, 2, 0, 2, 5, 6, 2, 3, 9, 3, 2, 2, 9, 8, 1, 2, 4, 5, 2, 2, 5, 0, 0, 0, 2, 0, 7, 2, 6, 0, 1, 1, 6, 0, 2], [1, 3, 1, 0, 3, 3, 1, 0, 2, 3, 2, 2, 3, 3, 3, 2, 4, 3, 0, 3, 2, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [97, 0, 21, 97, 70, 12, 60, 9, 54, 64], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [4, 2, 2, 6, 6, 7, 4], [4, 4, 2], [65, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [32, 23, 13, 96, 52, 15, 96]], "fitness": -0.040571428835392, "mapping_values": [1, 4, 4, 2, 2, 0, 7, 7, 5, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.square(tf.math.negative(tf.math.add(beta, alpha))), tf.math.divide_no_nan(grad, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.301094771911597, 2.303216436079008, 2.3026412996114, 2.3032669208588588, 2.302365428720247, 2.3027355550003406], "accuracy": [0.09866596013307571, 0.09470347315073013, 0.09457138925790787, 0.09034473448991776, 0.09113723784685135, 0.09113723784685135], "val_loss": [1.971440383366176, 1.971440383366176, 1.971440383366176, 1.971440383366176, 1.971440383366176, 1.971440383366176], "val_accuracy": [0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 3, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [1, 5, 0, 6, 9, 6, 0, 2, 5, 5, 4, 2, 0, 2, 5, 6, 2, 3, 9, 3, 2, 2, 9, 6, 1, 2, 4, 5, 2, 2, 5, 8, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [2, 1, 1, 0, 3, 3, 1, 0, 2, 3, 2, 1, 3, 3, 3, 0, 3, 3, 0, 0, 3, 3, 0, 3, 2, 1, 3, 3, 4, 2, 1, 4, 4], [97, 0, 21, 97, 70, 12, 60, 9, 54, 64], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [4, 2, 2, 6, 6, 7, 4], [4, 4, 2], [65, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [3, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [32, 23, 13, 96, 52, 15, 96]], "fitness": -0.040571428835392, "mapping_values": [1, 7, 7, 4, 3, 2, 36, 36, 24, 12, 5, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.negative(tf.math.add(alpha, tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.square(alpha)))))))))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, beta)))), tf.math.add(beta, grad)))), tf.math.add(beta, beta))))), alpha)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.301094771911597, 2.303216436079008, 2.3026412996114, 2.3032669208588588, 2.302365428720247, 2.3027355550003406], "accuracy": [0.09866596013307571, 0.09470347315073013, 0.09457138925790787, 0.09034473448991776, 0.09113723784685135, 0.09113723784685135], "val_loss": [1.971440383366176, 1.971440383366176, 1.971440383366176, 1.971440383366176, 1.971440383366176, 1.971440383366176], "val_accuracy": [0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 1, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [2, 5, 0, 6, 3, 6, 2, 2, 5, 5, 4, 2, 0, 2, 5, 6, 2, 3, 9, 3, 2, 2, 9, 6, 1, 2, 4, 5, 2, 2, 5, 8, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 3, 1, 0, 2, 1, 1, 0, 2, 3, 2, 3, 1, 3, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [59, 88, 21, 97, 70, 12, 60, 9, 54, 64], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [4, 2, 2, 6, 6, 7, 4], [4, 4, 2], [65, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [32, 23, 13, 96, 52, 15, 96]], "fitness": -0.040571428835392, "mapping_values": [1, 4, 4, 2, 2, 1, 7, 7, 4, 3, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.divide_no_nan(grad, alpha)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.301094771911597, 2.303216436079008, 2.3026412996114, 2.3032669208588588, 2.302365428720247, 2.3027355550003406], "accuracy": [0.09866596013307571, 0.09470347315073013, 0.09457138925790787, 0.09034473448991776, 0.09113723784685135, 0.09113723784685135], "val_loss": [1.971440383366176, 1.971440383366176, 1.971440383366176, 1.971440383366176, 1.971440383366176, 1.971440383366176], "val_accuracy": [0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 5, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 3, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [2, 5, 0, 6, 9, 6, 2, 2, 5, 5, 4, 2, 0, 2, 5, 6, 2, 3, 9, 3, 2, 2, 9, 6, 1, 2, 4, 5, 2, 2, 5, 8, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [1, 3, 1, 0, 3, 3, 1, 0, 2, 3, 2, 2, 3, 3, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [59, 88, 21, 97, 70, 12, 60, 9, 54, 64], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1], [4, 2, 2, 6, 6, 7, 4], [4, 4, 2], [65, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.03828571364283562, "mapping_values": [1, 4, 4, 2, 2, 1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(alpha, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3012331341393413, 2.3042514292067384, 2.305457590908312, 2.308198800097682, 2.309921018136664, 2.313275452791314], "accuracy": [0.09800554811954498, 0.09338264167308807, 0.09008057415485382, 0.08387266844511032, 0.0812310129404068, 0.08308017253875732], "val_loss": [1.9719020979745048, 1.9729787962777274, 1.9745135307312012, 1.9762281009129115, 1.9783544540405273, 1.9808729035513741], "val_accuracy": [0.03166666626930237, 0.0273333340883255, 0.023666666820645332, 0.02266666665673256, 0.025333333760499954, 0.03099999949336052]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [5, 66, 89, 50, 85, 46], [0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [2, 5, 0, 6, 8, 6, 2, 2, 5, 5, 4, 4, 0, 2, 5, 2, 2, 8, 9, 3, 2, 6, 9, 6, 1, 2, 4, 5, 2, 2, 5, 8, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 3, 1, 3, 3, 3, 1, 3, 2, 3, 2, 2, 3, 3, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [97, 0, 21, 19, 70, 12, 60, 9, 54, 64], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [4, 2, 2, 6, 6, 6, 4], [4, 4, 2], [65, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [32, 23, 13, 96, 52, 15, 96]], "fitness": -0.036571428179740906, "mapping_values": [1, 3, 3, 1, 2, 1, 35, 35, 22, 13, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32))))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(grad, alpha)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(grad)), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.square(tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), grad))))))))), tf.math.add(beta, beta)))), tf.math.add(beta, beta))), tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.301401663292605, 2.3055536018276355, 2.3092445114489952, 2.316053789147863, 2.3240600267752143, 2.3354679122025925], "accuracy": [0.09813763201236725, 0.08875974267721176, 0.07779685407876968, 0.0660414770245552, 0.05375776067376137, 0.04239862784743309], "val_loss": [1.9725399017333984, 1.9756058284214564, 1.980656964438302, 1.9877668108258928, 1.9969758987426758, 2.0083584785461426], "val_accuracy": [0.02866666577756405, 0.01733333244919777, 0.009999999776482582, 0.005333333276212215, 0.004666666500270367, 0.004000000189989805]}}]