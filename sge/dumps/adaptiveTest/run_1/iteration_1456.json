[{"genotype": [[0], [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 3, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [2, 8, 1, 6, 2, 6, 2, 2, 5, 2, 4, 2, 0, 2, 5, 0, 2, 3, 9, 3, 2, 2, 9, 6, 1, 2, 4, 3, 2, 2, 5, 8, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 5, 1, 0, 3, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [93, 0, 21, 97, 70, 12, 60, 9, 54, 64], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [4, 2, 2, 6, 6, 7, 4], [4, 4, 2], [65, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.8385714292526245, "mapping_values": [1, 4, 4, 2, 2, 1, 66, 66, 40, 26, 6, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 56, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.subtract(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.square(tf.math.negative(grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta)))))))), tf.math.add(beta, grad)))))), tf.math.add(beta, beta))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, grad), grad), tf.math.add(beta, tf.math.add(tf.math.pow(grad, grad), beta)))))), tf.math.multiply(tf.math.add(tf.math.add(tf.math.square(tf.math.add(beta, grad)), tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.negative(tf.math.negative(tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha)))), tf.math.add(grad, tf.math.add(beta, tf.math.divide_no_nan(alpha, alpha)))))))), tf.math.add(beta, tf.math.negative(alpha))))))))), grad)))))), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9318259765978707, 1.3533958621139084, 0.8628113626284354, 0.7338074197417725, 0.6329353131779968, 0.5939932088999307, 0.5669177723535536, 0.5307846794259421, 0.5042017037094451, 0.463915862801399, 0.4521112355101362, 0.4415006547705719, 0.4236494871713797, 0.4052454337365497, 0.3981890360267643, 0.38153804607395136, 0.39121143912925793, 0.3692757559608333, 0.355513339608085, 0.3444083196147558, 0.3282290841917147, 0.32101272013697246, 0.3185935758163491, 0.31379296095962333, 0.28815011186307493, 0.2801446340158395, 0.27015542508494256, 0.2709888537066125, 0.27081118038128615, 0.2579480252245776, 0.2548972949053019, 0.24791375518026226, 0.24336486794433385, 0.24247255406091872, 0.22800952330745364, 0.22280590543027692, 0.2227575618711209, 0.22151938988910203, 0.20963206622917355, 0.2108592028257129], "accuracy": [0.36507725715637207, 0.5255580544471741, 0.6668868064880371, 0.7157574892044067, 0.7540615797042847, 0.7703077793121338, 0.7824593782424927, 0.7981772422790527, 0.807158887386322, 0.8294808864593506, 0.8302733898162842, 0.8366134166717529, 0.839519202709198, 0.8471800088882446, 0.8529917001724243, 0.8573504090309143, 0.8525954484939575, 0.8619733452796936, 0.8684453964233398, 0.870030403137207, 0.8737286925315857, 0.8786157965660095, 0.8791441321372986, 0.8816536664962769, 0.8952582478523254, 0.8911636471748352, 0.8985602855682373, 0.8977677822113037, 0.9001452922821045, 0.9001452922821045, 0.9025228023529053, 0.9035794734954834, 0.9079381823539734, 0.9095231890678406, 0.9132214784622192, 0.9167877435684204, 0.9100515246391296, 0.915070652961731, 0.9192973375320435, 0.9148064851760864], "val_loss": [1.3757469654083252, 0.7350053276334491, 0.6096877200262887, 0.5322456700461251, 0.4955419472285679, 0.4693509340286255, 0.4393808501107352, 0.41894138710839407, 0.39155530078070505, 0.36999402727399555, 0.3677174959863935, 0.3689526234354292, 0.3595817429678781, 0.3566716653960092, 0.34691848925181795, 0.3649104833602905, 0.3569305624280657, 0.33083127226148334, 0.3270523462976728, 0.32948520353862215, 0.3190143619264875, 0.32746027197156635, 0.3221492086138044, 0.32487519298280987, 0.32766019446509226, 0.3201721821512495, 0.3201723950249808, 0.3289095163345337, 0.31844976118632723, 0.3171800800732204, 0.31580459220068796, 0.3159929939678737, 0.3356617433684213, 0.3166388528687613, 0.319165689604623, 0.32674780062266756, 0.32963722944259644, 0.3294816868645804, 0.3309426392827715, 0.3177626814161028], "val_accuracy": [0.5136666893959045, 0.6473333239555359, 0.7080000042915344, 0.7459999918937683, 0.7733333110809326, 0.7853333353996277, 0.8050000071525574, 0.8186666369438171, 0.8266666531562805, 0.8413333296775818, 0.8346666693687439, 0.8339999914169312, 0.8410000205039978, 0.8426666855812073, 0.8503333330154419, 0.8443333506584167, 0.8356666564941406, 0.8536666631698608, 0.8659999966621399, 0.8603333234786987, 0.8633333444595337, 0.8656666874885559, 0.8576666712760925, 0.8673333525657654, 0.862333357334137, 0.8636666536331177, 0.8643333315849304, 0.8663333058357239, 0.8700000047683716, 0.8706666827201843, 0.8676666617393494, 0.8673333525657654, 0.871999979019165, 0.8730000257492065, 0.875, 0.8656666874885559, 0.8736666440963745, 0.8686666488647461, 0.8730000257492065, 0.8733333349227905]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 3, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [5, 8, 1, 6, 2, 6, 2, 2, 5, 2, 4, 2, 0, 2, 5, 0, 2, 3, 9, 3, 2, 2, 9, 6, 1, 2, 4, 3, 2, 2, 5, 8, 0, 0, 2, 2, 7, 2, 6, 0, 4, 1, 6, 0, 2, 8], [0, 5, 0, 0, 3, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 3, 5, 1, 3, 3, 4, 2, 1, 4, 4], [65, 0, 21, 97, 70, 79, 60, 9, 54, 64], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [4, 2, 2, 6, 6, 7, 4], [4, 4, 2], [65, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.8379999995231628, "mapping_values": [1, 4, 4, 2, 2, 1, 76, 76, 46, 30, 7, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 64, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.subtract(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)), tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.negative(tf.math.add(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta))), tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, grad), beta), tf.math.add(beta, grad))))))))))), tf.math.multiply(tf.math.add(beta, grad), grad))))), tf.math.add(beta, grad))), tf.math.add(tf.math.add(tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta)))), tf.math.negative(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.negative(tf.math.pow(grad, tf.math.add(beta, tf.math.subtract(alpha, alpha))))))), tf.math.add(beta, grad)), grad)))))), alpha))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), grad)))), tf.math.add(beta, tf.math.add(grad, tf.math.sqrt(beta)))))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9318537806255345, 1.3547470973640496, 0.8620497397522429, 0.7327476468037116, 0.6330874928740337, 0.59398356543367, 0.5679988491536762, 0.5290265971517456, 0.5046343671733897, 0.46701444117636526, 0.4582981568648122, 0.4421577201212685, 0.4226143694375846, 0.40633866070457153, 0.39346068894401787, 0.3826623323405849, 0.3909057897859167, 0.3634724779498103, 0.3533958133972867, 0.34123871183083626, 0.33066159485983354, 0.3250512714123666, 0.3231161554153207, 0.3195503167685044, 0.29919551376495945, 0.2913392860702693, 0.27974618372034166], "accuracy": [0.3649451732635498, 0.5268788933753967, 0.6676793098449707, 0.7173424959182739, 0.7553823590278625, 0.7680623531341553, 0.7817989587783813, 0.8000264167785645, 0.8087438941001892, 0.8265751004219055, 0.8301413059234619, 0.8363492488861084, 0.8413683772087097, 0.8462554216384888, 0.8532558679580688, 0.860652506351471, 0.852331280708313, 0.8638224601745605, 0.8684453964233398, 0.8728041052818298, 0.8761062026023865, 0.8804649114608765, 0.8754457831382751, 0.8767666220664978, 0.8899748921394348, 0.8874653577804565, 0.89552241563797], "val_loss": [1.3769539083753313, 0.7348371233258929, 0.6079497337341309, 0.5303618397031512, 0.4973798990249634, 0.469051582472665, 0.4378191488129752, 0.41528113399233135, 0.39642936842782156, 0.3767454368727548, 0.3749816502843584, 0.37213769980839323, 0.36246808086122784, 0.35726485933576313, 0.348774322441646, 0.36427278178078787, 0.3498400705201285, 0.33007486377443584, 0.32291750397000996, 0.32648714099611553, 0.32181706598826815, 0.3177823168890817, 0.32032681362969534, 0.3207711321966989, 0.340192905494145, 0.3251107931137085, 0.32039850098746164], "val_accuracy": [0.5120000243186951, 0.6496666669845581, 0.7096666693687439, 0.7476666569709778, 0.7733333110809326, 0.7863333225250244, 0.8073333501815796, 0.8216666579246521, 0.8320000171661377, 0.8363333344459534, 0.8273333311080933, 0.8306666612625122, 0.8376666903495789, 0.8426666855812073, 0.8493333458900452, 0.846666693687439, 0.8460000157356262, 0.8553333282470703, 0.862666666507721, 0.8579999804496765, 0.8610000014305115, 0.8703333139419556, 0.8629999756813049, 0.8646666407585144, 0.8536666631698608, 0.8646666407585144, 0.8646666407585144]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [2, 8, 1, 6, 2, 6, 2, 2, 5, 2, 4, 2, 0, 2, 5, 0, 2, 3, 9, 3, 2, 2, 9, 6, 1, 2, 4, 3, 2, 2, 5, 8, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 3, 1, 2, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [59, 37, 21, 97, 70, 57, 60, 9, 54, 64], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [4, 2, 2, 6, 6, 7, 4], [4, 4, 2], [65, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.1565714329481125, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.148039262198092, 1.674835116100223, 1.0053643287605913, 0.8068779101933565, 0.8051297329420333, 0.7790369748155974, 0.755030710258504, 0.976143143196242, 1.2494094058932284, 2.5343911445939136, 3.414419603983897], "accuracy": [0.3333773612976074, 0.42226919531822205, 0.6299035549163818, 0.7051908373832703, 0.7062475085258484, 0.7174745798110962, 0.7168141603469849, 0.6633205413818359, 0.5692775249481201, 0.34962356090545654, 0.14674416184425354], "val_loss": [1.819643838065011, 0.8634810958589826, 0.6088946376528058, 0.5734411137444633, 0.5820903267179217, 0.5406283480780465, 0.5896439041410174, 0.8352829728807721, 0.7633196285792759, 2.4061133520943776, 1.9513880184718542], "val_accuracy": [0.3916666805744171, 0.5713333487510681, 0.731333315372467, 0.7303333282470703, 0.7453333139419556, 0.7463333606719971, 0.7223333120346069, 0.6923333406448364, 0.6513333320617676, 0.32899999618530273, 0.1146666631102562]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [9, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 3, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [24, 66, 89, 50, 85, 46], [1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [2, 9, 3, 6, 2, 6, 2, 2, 5, 2, 4, 2, 0, 2, 5, 0, 2, 3, 2, 3, 2, 4, 9, 3, 1, 2, 8, 3, 5, 2, 0, 8, 0, 0, 2, 8, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 5, 2, 2, 1, 3, 3, 3, 3, 1, 2, 0, 3, 3, 3, 3, 1, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [19, 37, 3, 97, 70, 57, 60, 9, 54, 64], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [4, 2, 2, 6, 6, 7, 4], [4, 4, 2], [65, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 67, 67, 41, 26, 5, 5, 2, 2, 0, 0, 1, 0, 1, 0], "tree_depth": 61, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.divide_no_nan(beta, beta)))), tf.math.add(tf.math.add(tf.math.add(beta, alpha), tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, tf.math.negative(grad))), tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.multiply(grad, tf.math.add(grad, tf.math.pow(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)))), alpha), tf.math.add(beta, beta))), tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), grad), tf.math.add(beta, tf.math.add(tf.math.sqrt(grad), tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.sqrt(grad))), tf.math.negative(tf.math.add(beta, alpha))))))))))))))), tf.math.negative(grad))), tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(alpha), tf.math.add(beta, tf.math.pow(alpha, alpha))))))))), grad)))), alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, tf.math.add(sigma, sigma)))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [10508.317710259997, 1460796.981723022, 25112084.29480914, 178725646.89895654, 793263379.1890107, 2594725685.424911], "accuracy": [0.09945846349000931, 0.09377889335155487, 0.09549596905708313, 0.10011887550354004, 0.09536388516426086, 0.09879804402589798], "val_loss": [83495.671875, 4416748.428571428, 47244190.85714286, 257252278.85714287, 963061321.1428572, 2839881801.142857], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [4, 0, 0, 8, 8, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 3, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [29, 66, 89, 50, 85, 46], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [6, 2, 7, 6, 4, 6, 2, 2, 5, 0, 4, 2, 0, 2, 0, 0, 1, 2, 8, 0, 2, 3, 2, 9, 1, 2, 4, 3, 9, 2, 6, 3, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 5, 2, 2, 0, 3, 3, 3, 2, 1, 2, 0, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [12, 37, 21, 97, 70, 57, 60, 9, 54, 64], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [4, 2, 2, 6, 6, 7, 4], [4, 4, 2], [65, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 23, 23, 14, 9, 3, 1, 1, 0, 1, 1, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, grad))))))))), tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha)), grad)))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.multiply(grad, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.pow(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [2, 3, 5, 9, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 3, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [43, 85, 89, 50, 85, 46], [0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [0, 1, 7, 6, 9, 6, 2, 2, 5, 9, 4, 2, 0, 2, 0, 0, 2, 2, 8, 5, 2, 3, 9, 9, 1, 2, 4, 3, 9, 2, 6, 3, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 3, 1, 2, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [93, 0, 21, 97, 70, 57, 60, 9, 54, 64], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [4, 2, 2, 6, 6, 7, 4], [4, 4, 2], [65, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 2, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(grad, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [4, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 3, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [6, 9, 7, 6, 4, 0, 5, 2, 5, 0, 4, 2, 0, 2, 4, 0, 1, 2, 8, 0, 2, 3, 2, 9, 1, 2, 4, 3, 9, 2, 6, 3, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 3, 2, 2, 0, 3, 3, 3, 2, 1, 2, 1, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [93, 0, 21, 97, 70, 57, 60, 9, 54, 64], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [4, 2, 2, 6, 6, 7, 4], [4, 4, 2], [65, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 25, 25, 16, 9, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, tf.math.negative(tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.square(grad))), tf.math.add(beta, beta)), tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, beta)), tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, grad))), tf.math.add(beta, grad))))), beta)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 0, 2, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 3, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [43, 45, 89, 50, 85, 46], [1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [2, 8, 5, 9, 1, 6, 2, 3, 5, 8, 4, 3, 0, 8, 5, 0, 2, 3, 6, 5, 2, 2, 2, 0, 1, 1, 4, 3, 2, 2, 9, 3, 0, 0, 2, 0, 4, 2, 6, 0, 4, 1, 6, 0, 2], [3, 5, 0, 0, 3, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 0, 1, 1, 0, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [19, 37, 47, 97, 70, 57, 60, 9, 54, 64], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [4, 8, 2, 6, 6, 7, 4], [4, 4, 2], [65, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 5, 5, 4, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.square(grad))), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [500447418.1608999, 72205422421.5813, 1248408291043.6982, 8901097068013.537, 39537494935497.086, 129376492432559.16], "accuracy": [0.09985470771789551, 0.09377889335155487, 0.09536388516426086, 0.10011887550354004, 0.09536388516426086, 0.09879804402589798], "val_loss": [4065186669.714286, 219072144530.2857, 2351262260077.7144, 12818016820077.715, 48012739552402.29, 141625146886436.56], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [2, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 0, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [0, 1, 7, 6, 3, 6, 2, 2, 5, 9, 4, 2, 0, 2, 0, 0, 2, 2, 8, 5, 2, 3, 9, 9, 1, 2, 4, 3, 9, 2, 6, 3, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 5, 2, 2, 0, 3, 3, 3, 2, 1, 2, 0, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [93, 0, 21, 97, 70, 57, 60, 9, 54, 64], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [4, 2, 2, 6, 6, 7, 4], [4, 4, 2], [65, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 2, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.302547196261147, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 3, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 3, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [6, 2, 7, 6, 4, 6, 2, 2, 5, 0, 4, 2, 0, 2, 0, 0, 1, 2, 8, 0, 2, 3, 2, 9, 1, 2, 4, 3, 9, 2, 6, 3, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [3, 5, 2, 2, 0, 3, 3, 0, 2, 1, 2, 1, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [2, 37, 21, 97, 70, 57, 60, 9, 54, 64], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [4, 2, 2, 6, 6, 7, 4], [4, 4, 2], [65, 2, 82], [0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 53, 30, 23, 7], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.pow(alpha, tf.math.add(tf.math.add(tf.math.subtract(beta, tf.math.pow(tf.math.subtract(tf.math.subtract(beta, tf.math.subtract(sigma, tf.math.sqrt(tf.math.add(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), sigma)))), beta), tf.math.add(tf.math.pow(tf.math.square(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), alpha), sigma))), tf.math.multiply(tf.math.multiply(tf.math.subtract(sigma, tf.math.negative(tf.math.negative(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))), alpha), beta)), tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.negative(tf.math.square(tf.math.divide_no_nan(tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.square(tf.math.square(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)))))))), alpha)), tf.math.pow(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), sigma))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [1, 3, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 0, 2, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [5, 3, 7, 0, 4, 6, 2, 2, 5, 9, 4, 2, 0, 2, 0, 0, 2, 2, 8, 5, 2, 3, 9, 9, 1, 2, 4, 3, 9, 2, 6, 3, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [4, 5, 2, 2, 2, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [19, 37, 47, 97, 70, 57, 60, 9, 54, 64], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [4, 8, 2, 6, 6, 7, 4], [4, 4, 2], [65, 2, 82], [0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 9, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 1, 1, 0, 2, 2, 2, 1, 0, 5, 6, 7, 6, 2, 2, 0, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 0, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 3, 3, 1, 1, 3, 0, 3, 1], [66, 14, 54, 43, 41, 62, 4]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 2, 16, 16, 10, 6, 1, 1, 0, 0, 0, 0, 23, 13, 10, 4], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.multiply(tf.math.add(grad, tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.divide_no_nan(beta, beta)))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.square(tf.math.add(beta, grad)))), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.pow(alpha, tf.math.add(tf.math.add(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32), beta), tf.math.pow(tf.math.subtract(tf.math.subtract(beta, tf.math.subtract(sigma, tf.math.sqrt(tf.math.add(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), sigma)))), tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.pow(tf.math.square(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), alpha), sigma))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 3, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [0, 1, 7, 6, 9, 6, 2, 2, 5, 9, 4, 2, 0, 2, 0, 0, 2, 2, 8, 5, 2, 3, 9, 9, 1, 2, 4, 3, 9, 2, 6, 3, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 5, 2, 2, 0, 3, 3, 3, 2, 1, 2, 0, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [93, 0, 21, 97, 70, 57, 60, 9, 54, 64], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [4, 2, 2, 6, 6, 7, 4], [4, 4, 2], [65, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62, 30]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 8, 8, 5, 3, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.subtract(tf.math.add(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), beta))), tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.4696177923729783e+31, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0684189647436142, 0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0963333323597908, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 3, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [2, 8, 1, 0, 2, 6, 2, 2, 5, 2, 4, 2, 0, 2, 5, 0, 2, 3, 9, 3, 2, 2, 4, 1, 1, 2, 4, 3, 6, 5, 5, 8, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 5, 1, 0, 3, 3, 3, 1, 2, 3, 2, 3, 3, 2, 3, 2, 4, 3, 0, 1, 3, 3, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [93, 60, 21, 97, 70, 12, 60, 9, 54, 64], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [4, 2, 2, 6, 6, 7, 4], [4, 4, 2], [65, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [2, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 4, 4, 2, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [5, 3, 0, 9, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [5, 66, 89, 50, 85, 46], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [0, 1, 7, 6, 9, 6, 2, 2, 5, 9, 4, 2, 0, 2, 0, 0, 2, 2, 8, 5, 2, 3, 9, 9, 1, 2, 4, 3, 9, 2, 6, 3, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 3, 1, 2, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [93, 0, 21, 97, 70, 57, 60, 9, 54, 64], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [4, 2, 2, 6, 6, 7, 4], [4, 4, 2], [65, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [3.020272681206414, 37.65652383187853, 352.70360293808454, 2072.840186598121, 8644.799003031716, 27535.614249170354], "accuracy": [0.09708096832036972, 0.09391097724437714, 0.0952318087220192, 0.1006472036242485, 0.0952318087220192, 0.09879804402589798], "val_loss": [5.787846429007394, 80.34197344098773, 586.7416469029018, 2869.34619140625, 10326.799386160714, 29887.85379464286], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [2, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 3, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [2, 8, 1, 6, 2, 6, 2, 2, 5, 2, 4, 2, 0, 2, 5, 0, 8, 3, 9, 3, 2, 2, 9, 6, 1, 2, 4, 3, 2, 2, 5, 8, 0, 0, 2, 0, 7, 2, 6, 2, 4, 1, 6, 0, 2], [0, 5, 2, 2, 0, 1, 3, 3, 2, 1, 2, 0, 3, 3, 3, 0, 4, 3, 2, 1, 4, 1, 3, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [93, 0, 21, 97, 70, 12, 60, 9, 54, 64], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [4, 8, 2, 6, 6, 7, 4], [4, 4, 2], [65, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 35, 35, 21, 14, 4, 4, 2, 2, 0, 0, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, grad), beta)), tf.math.add(beta, beta))), tf.math.add(beta, tf.math.add(tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.square(alpha))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.negative(grad), grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha))))))))))), tf.math.multiply(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, tf.math.sqrt(sigma)))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 3, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [6, 2, 7, 6, 4, 6, 2, 2, 5, 0, 4, 2, 0, 2, 0, 0, 1, 2, 8, 0, 2, 3, 2, 9, 1, 2, 4, 3, 9, 2, 6, 3, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 3, 1, 2, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [33, 0, 21, 97, 70, 57, 60, 9, 54, 64], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [4, 2, 2, 6, 6, 7, 4], [4, 4, 2], [65, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.09628571569919586, "mapping_values": [1, 5, 5, 2, 3, 2, 1, 1, 0, 1, 1, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(grad, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.pow(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.375495375106035e+27, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06617355346679688, 0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [85, 66, 89, 50, 85, 46], [0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [8, 2, 5, 6, 4, 6, 9, 3, 5, 9, 4, 2, 0, 2, 5, 0, 2, 3, 8, 5, 2, 3, 9, 6, 1, 2, 4, 3, 9, 2, 6, 3, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [1, 0, 2, 3, 3, 3, 3, 0, 2, 3, 2, 2, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [59, 37, 21, 97, 70, 57, 60, 9, 54, 64], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [4, 2, 2, 6, 6, 7, 4], [4, 4, 2], [65, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.06057142838835716, "mapping_values": [1, 4, 4, 2, 2, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [9.485189346038371, 109.52035341075761, 2.5050561173937465, 2.4950906635826575, 2.4774282583549843, 2.5106614616647485, 2.5272345694694476, 2.452050002464261, 2.931061857805717, 2.5147363830000073], "accuracy": [0.18319904804229736, 0.09879804402589798, 0.09972262382507324, 0.09787346422672272, 0.10117553919553757, 0.1014397069811821, 0.09985470771789551, 0.09628847241401672, 0.09945846349000931, 0.09642054885625839], "val_loss": [696.5270298549107, 2.1342663764953613, 2.0377720424107144, 2.1404236384800504, 2.1329085486275807, 2.0234623636518205, 2.181577750614711, 2.1575352123805454, 2.0445678574698314, 2.1861068861825124], "val_accuracy": [0.0989999994635582, 0.0976666659116745, 0.10000000149011612, 0.09933333098888397, 0.10133333504199982, 0.0989999994635582, 0.10000000149011612, 0.10133333504199982, 0.0989999994635582, 0.10000000149011612]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [6, 3, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 1, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [0, 1, 7, 6, 9, 6, 2, 2, 5, 9, 4, 2, 0, 2, 0, 0, 2, 2, 8, 5, 2, 3, 9, 9, 1, 2, 4, 3, 9, 2, 6, 3, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [1, 5, 2, 2, 2, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [93, 0, 21, 97, 70, 57, 60, 9, 54, 64], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [4, 2, 2, 6, 6, 7, 4], [4, 4, 2], [65, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62, 30]], "fitness": -0.040571428835392, "mapping_values": [1, 7, 7, 4, 3, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.302470736861969, 2.302097572610835, 2.3020595500277428, 2.3026319822347427, 2.3029837064172423, 2.3025348772226057], "accuracy": [0.09113723784685135, 0.09179764986038208, 0.08968432247638702, 0.08968432247638702, 0.08809932321310043, 0.09100515395402908], "val_loss": [1.971440383366176, 1.971440383366176, 1.971440383366176, 1.971440383366176, 1.971440383366176, 1.971440383366176], "val_accuracy": [0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [1, 3, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [2, 8, 5, 6, 4, 6, 2, 2, 5, 8, 4, 2, 0, 2, 5, 0, 2, 3, 8, 5, 2, 2, 9, 6, 1, 2, 4, 3, 9, 2, 6, 3, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 3, 1, 2, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [93, 0, 21, 97, 70, 57, 60, 9, 54, 64], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [4, 2, 2, 6, 6, 7, 4], [4, 4, 2], [65, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.040571428835392, "mapping_values": [1, 2, 2, 1, 1, 0, 9, 9, 5, 4, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.square(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, alpha))), beta)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.302470736861969, 2.302097572610835, 2.3020595500277428, 2.3026319822347427, 2.3029837064172423, 2.3025348772226057], "accuracy": [0.09113723784685135, 0.09179764986038208, 0.08968432247638702, 0.08968432247638702, 0.08809932321310043, 0.09100515395402908], "val_loss": [1.971440383366176, 1.971440383366176, 1.971440383366176, 1.971440383366176, 1.971440383366176, 1.971440383366176], "val_accuracy": [0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 1, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [6, 2, 7, 6, 4, 6, 2, 2, 5, 0, 4, 2, 0, 2, 0, 0, 1, 2, 5, 0, 2, 3, 2, 9, 1, 2, 4, 3, 9, 1, 6, 2, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 5, 2, 3, 0, 1, 3, 3, 2, 1, 2, 0, 3, 3, 3, 2, 4, 0, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [93, 0, 21, 97, 70, 57, 60, 9, 54, 64], [1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [4, 8, 2, 6, 6, 7, 4], [4, 4, 2], [65, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.040571428835392, "mapping_values": [1, 4, 4, 2, 2, 1, 38, 38, 22, 16, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), beta))), tf.math.pow(grad, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, alpha), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, grad)), tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), alpha)), beta))))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))))))), tf.math.negative(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad))))))))))), tf.math.multiply(tf.math.add(beta, grad), beta)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.302470736861969, 2.302097572610835, 2.3020595500277428, 2.3026319822347427, 2.3029837064172423, 2.3025348772226057], "accuracy": [0.09113723784685135, 0.09179764986038208, 0.08968432247638702, 0.08968432247638702, 0.08809932321310043, 0.09100515395402908], "val_loss": [1.971440383366176, 1.971440383366176, 1.971440383366176, 1.971440383366176, 1.971440383366176, 1.971440383366176], "val_accuracy": [0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161]}}]