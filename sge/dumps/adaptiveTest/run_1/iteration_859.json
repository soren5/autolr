[{"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 7, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [0, 1, 1, 0, 6, 1, 2, 8, 5, 4, 9, 3, 8, 1, 0, 0, 2, 2, 2, 6, 6, 3, 9, 5, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [2, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [96, 90, 16, 66, 40, 57, 35, 9, 54, 64], [1, 1, 0, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0], [6, 9, 3, 4], [1, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8268571496009827, "mapping_values": [1, 4, 4, 2, 2, 1, 24, 24, 16, 8, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.negative(beta), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(grad, grad), tf.math.sqrt(tf.math.square(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.negative(tf.math.add(beta, tf.math.negative(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))), grad)))), tf.math.add(beta, beta)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.172102533295611, 2.0472469600656833, 1.3843912521546715, 1.2065523464634687, 0.9816475713793092, 0.8123315734602535, 0.7579050691703119, 0.6874360508292721, 0.6897062140370184, 0.6565106873971407, 0.6386481866766008, 0.623496960174957, 0.6079895998650318, 0.5873879037827958, 0.5792807696195027, 0.5649572137387484, 0.5396858508702456, 0.5340360849131336, 0.5450040001469896, 0.5176017702830356, 0.5344738163306901, 0.49441402267235113, 0.4866978589806023, 0.48545714284230246, 0.4753481267292454, 0.45373587136523064, 0.4737995993412402, 0.43327414923340274, 0.4656626397568898, 0.4383533652613522, 0.43075857217112523, 0.43522056066097126, 0.42024061127487444, 0.4037497401229615, 0.4097230189574976, 0.4361085167862972, 0.3786244791661901, 0.38353839524118827, 0.38904076403693566, 0.3764285577829913, 0.3821410498543816], "accuracy": [0.25439175963401794, 0.30920618772506714, 0.5106326937675476, 0.5635979175567627, 0.6470743417739868, 0.6948884129524231, 0.7121912837028503, 0.748249888420105, 0.7460044622421265, 0.7523444890975952, 0.759080708026886, 0.7652885913848877, 0.7640998363494873, 0.7823272943496704, 0.776251494884491, 0.7858935594558716, 0.7954035401344299, 0.7976489067077637, 0.800818920135498, 0.8014793395996094, 0.8031964302062988, 0.8156121969223022, 0.8227446675300598, 0.817989706993103, 0.8226125836372375, 0.8339717388153076, 0.8260467648506165, 0.8396512866020203, 0.8259146809577942, 0.8318583965301514, 0.837537944316864, 0.8408400416374207, 0.846387505531311, 0.8429533839225769, 0.844010055065155, 0.8392550349235535, 0.8545766472816467, 0.8593316674232483, 0.8558974862098694, 0.8588033318519592, 0.8544445633888245], "val_loss": [1.8189967019217355, 1.3919227123260498, 0.9119056292942592, 0.7902585438319615, 0.6290314027241298, 0.6126655169895717, 0.541023884500776, 0.5333447796957833, 0.49505475589207243, 0.5510325942720685, 0.49076833043779644, 0.5078680855887276, 0.49169555732182096, 0.46078286852155415, 0.43447629043034147, 0.4285385523523603, 0.4505664450781686, 0.4452411447252546, 0.4500554970332554, 0.4926234654017857, 0.4166503974369594, 0.44447953360421316, 0.4003282870565142, 0.4033326932362148, 0.42640435695648193, 0.4468427726200649, 0.3798585704394749, 0.3726234606334141, 0.3849324328558786, 0.4046431950160435, 0.37254938057490755, 0.3530533569199698, 0.3580969401768276, 0.37818974256515503, 0.3590042846543448, 0.34397922243390766, 0.35038446528570993, 0.3879753351211548, 0.3706743802343096, 0.37727091142109465, 0.3678999032293047], "val_accuracy": [0.3316666781902313, 0.5226666927337646, 0.5766666531562805, 0.6973333358764648, 0.7266666889190674, 0.7390000224113464, 0.7630000114440918, 0.765333354473114, 0.7823333144187927, 0.7483333349227905, 0.768666684627533, 0.7593333125114441, 0.784333348274231, 0.7850000262260437, 0.8103333115577698, 0.8153333067893982, 0.8066666722297668, 0.8103333115577698, 0.7946666479110718, 0.7733333110809326, 0.8180000185966492, 0.8069999814033508, 0.8270000219345093, 0.8213333487510681, 0.8183333277702332, 0.8116666674613953, 0.840666651725769, 0.8403333425521851, 0.831333339214325, 0.824999988079071, 0.840666651725769, 0.8519999980926514, 0.8500000238418579, 0.8293333053588867, 0.8483333587646484, 0.856333315372467, 0.8473333120346069, 0.82833331823349, 0.8446666598320007, 0.8330000042915344, 0.8446666598320007]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 7, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [1, 1, 0, 0, 6, 1, 2, 8, 5, 8, 2, 3, 8, 1, 2, 0, 2, 2, 2, 6, 6, 3, 9, 5, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [4, 1, 3, 3, 3, 0, 3, 2, 3, 3, 3, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [78, 90, 16, 66, 40, 57, 35, 9, 54, 64], [1, 1, 0, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0], [6, 9, 3, 4], [1, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8137142658233643, "mapping_values": [1, 4, 4, 2, 2, 1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(grad), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.subtract(grad, tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.172124861474239, 2.0383807217298546, 1.4494025589153514, 1.2174553501450107, 0.9815502421038105, 0.8283002792789069, 0.7678361164816555, 0.7147799937826783, 0.6977281220018148, 0.6516982199351833, 0.6506716868172326, 0.6631835631848074, 0.6052453373291269, 0.592578236909669, 0.5831717363264834, 0.5690002005649138, 0.555291107561862, 0.5406318893128413, 0.5580323073983964, 0.5201081168681497, 0.5031770133323453, 0.515528177761556, 0.5041508089439539, 0.49718833714428357, 0.4823337317599502, 0.4759876008409126, 0.453311978404737, 0.45326816750681237, 0.47175910108439945, 0.442698893624526, 0.4363035559811691, 0.4302457897355449, 0.4402374239913256], "accuracy": [0.2542596757411957, 0.31343284249305725, 0.49425438046455383, 0.5699379444122314, 0.6444327235221863, 0.6876237988471985, 0.7074362635612488, 0.7341170310974121, 0.733588695526123, 0.76106196641922, 0.7535332441329956, 0.7491744756698608, 0.7693831920623779, 0.7794214487075806, 0.769911527633667, 0.7832518815994263, 0.7897239327430725, 0.7964601516723633, 0.7907806038856506, 0.8050455451011658, 0.8140271902084351, 0.8031964302062988, 0.8117818236351013, 0.8146876096725464, 0.8197067975997925, 0.817989706993103, 0.8319904804229736, 0.8309338092803955, 0.8234050869941711, 0.8315942287445068, 0.8362171649932861, 0.8384625315666199, 0.8319904804229736], "val_loss": [1.8187274932861328, 1.4980077062334334, 1.0654610225132533, 0.6792746101106916, 0.6099094663347516, 0.6165556226457868, 0.5577046189989362, 0.5045046976634434, 0.49359611102512907, 0.54751946244921, 0.5135217734745571, 0.4770962510790144, 0.4680198090417044, 0.4713959353310721, 0.4361462082181658, 0.4440554210117885, 0.44797778129577637, 0.43502274581364225, 0.44309721674237934, 0.41932221821376253, 0.43013495206832886, 0.4780310903276716, 0.42355031626565115, 0.40204707213810514, 0.4098857470921108, 0.3938935569354466, 0.392956759248461, 0.36035074506487164, 0.3796323537826538, 0.41226219279425486, 0.3787929926599775, 0.41098225116729736, 0.35739595549447195], "val_accuracy": [0.33266666531562805, 0.5013333559036255, 0.5410000085830688, 0.7289999723434448, 0.7203333377838135, 0.7176666855812073, 0.7540000081062317, 0.7706666588783264, 0.7900000214576721, 0.7456666827201843, 0.7559999823570251, 0.7946666479110718, 0.7986666560173035, 0.765999972820282, 0.8109999895095825, 0.8083333373069763, 0.812333345413208, 0.8100000023841858, 0.8013333082199097, 0.8136666417121887, 0.8083333373069763, 0.8066666722297668, 0.8146666884422302, 0.8236666917800903, 0.824999988079071, 0.8289999961853027, 0.82833331823349, 0.8510000109672546, 0.8399999737739563, 0.8166666626930237, 0.8366666436195374, 0.8183333277702332, 0.8463333249092102]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 7, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [8, 1, 1, 0, 6, 1, 2, 8, 5, 8, 2, 3, 8, 1, 2, 0, 2, 2, 2, 6, 6, 3, 9, 5, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [1, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [92, 90, 16, 66, 40, 57, 35, 9, 54, 64], [1, 1, 0, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0], [6, 9, 3, 4], [1, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8125714063644409, "mapping_values": [1, 4, 4, 2, 2, 1, 7, 7, 4, 3, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(grad), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.negative(alpha), grad)), grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.172048719819542, 2.0400483987712748, 1.4135004937483446, 1.0859287894239766, 0.9026292019579405, 0.8302690372601192, 0.7718285456577296, 0.7362501600226076, 0.7155479292402871, 0.6470408077883038, 0.6264050303984312, 0.6232594181565151, 0.6096657326019609, 0.5645178687444941, 0.5699325462476279, 0.5617157066298231, 0.5466223697951441, 0.5304600758842899, 0.5317054701645014, 0.5176326374194531], "accuracy": [0.2545238435268402, 0.31224408745765686, 0.5025756359100342, 0.598599910736084, 0.6629242897033691, 0.6872276067733765, 0.7066437602043152, 0.7205125093460083, 0.7301545143127441, 0.7638356685638428, 0.7565711140632629, 0.7662131786346436, 0.7658169269561768, 0.7910447716712952, 0.7858935594558716, 0.7866860628128052, 0.7947431206703186, 0.8012151718139648, 0.8033285140991211, 0.8072909712791443], "val_loss": [1.8186390059334892, 1.4773617812565394, 0.880253621510097, 0.6681314195905413, 0.5999986444200788, 0.7688205071857998, 0.5518556833267212, 0.5974574089050293, 0.5095328262874058, 0.4672997679029192, 0.4663887194224766, 0.4739536557878767, 0.4672041279929025, 0.4729172502245222, 0.4284095082964216, 0.45087434564317974, 0.4291550857680185, 0.4381703649248396, 0.42839108194623676, 0.4907855306352888], "val_accuracy": [0.3319999873638153, 0.5196666717529297, 0.5823333263397217, 0.6990000009536743, 0.7356666922569275, 0.6800000071525574, 0.7329999804496765, 0.7123333215713501, 0.7806666493415833, 0.7926666736602783, 0.7893333435058594, 0.793666660785675, 0.8006666898727417, 0.7883333563804626, 0.8190000057220459, 0.8096666932106018, 0.8143333196640015, 0.8103333115577698, 0.8109999895095825, 0.7716666460037231]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [0, 1, 1, 0, 6, 1, 2, 8, 5, 4, 9, 3, 8, 1, 0, 0, 2, 2, 2, 6, 6, 3, 9, 5, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [3, 5, 1, 3, 2, 0, 3, 2, 3, 3, 3, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [92, 90, 16, 66, 40, 57, 35, 9, 54, 64], [1, 1, 0, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0], [6, 9, 3, 4], [1, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.806857168674469, "mapping_values": [1, 4, 4, 2, 2, 1, 4, 4, 2, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.subtract(grad, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.172186410343642, 2.04244359653419, 1.3978113251874917, 1.2812742237181254, 0.9417270586994803, 0.8766335211079181, 0.7748221575292724, 0.7285455774479948, 0.6997432136941879, 0.6610340432106087, 0.6441708923944975, 0.6506619780228328, 0.6167958343994222, 0.5855867095107589, 0.5858447392855055, 0.5702905801419238, 0.5295527330353087, 0.544016992529354, 0.544313590280321, 0.5260382503440367, 0.529455142636199, 0.5041755671199476, 0.5000188555211722, 0.49085278838396607, 0.4821108759134484, 0.45336373679988407, 0.4876548823561131, 0.45851021753546584], "accuracy": [0.2541275918483734, 0.31145158410072327, 0.5037643909454346, 0.5502575635910034, 0.6539427042007446, 0.6779817938804626, 0.7038700580596924, 0.7283053994178772, 0.7375511527061462, 0.7560427784919739, 0.7537974119186401, 0.7547219395637512, 0.7630431652069092, 0.7832518815994263, 0.774270236492157, 0.7869502305984497, 0.7997622489929199, 0.7915731072425842, 0.7992339134216309, 0.7980451583862305, 0.8004226684570312, 0.8140271902084351, 0.8138951063156128, 0.8178576231002808, 0.8228767514228821, 0.8352925777435303, 0.8183859586715698, 0.8278959393501282], "val_loss": [1.8186532429286413, 1.4490972246442522, 0.9425485815320697, 0.7485369784491402, 0.5923621995108468, 0.6140056337629046, 0.5838819061006818, 0.5607272556849888, 0.5059787545885358, 0.5412854637418475, 0.5051992791039603, 0.512260913848877, 0.4618834597723825, 0.4735549347741263, 0.43916773796081543, 0.4415224279676165, 0.4445613622665405, 0.4424851792199271, 0.45906591415405273, 0.45239061968667166, 0.41765629393713816, 0.43921843596867155, 0.38971086910792757, 0.3939024124826704, 0.3971833416393825, 0.428060735974993, 0.3867125766617911, 0.3904086777142116], "val_accuracy": [0.33399999141693115, 0.515999972820282, 0.590666651725769, 0.7129999995231628, 0.7416666746139526, 0.7196666598320007, 0.7446666955947876, 0.7519999742507935, 0.778333306312561, 0.7476666569709778, 0.7603333592414856, 0.7526666522026062, 0.7979999780654907, 0.7699999809265137, 0.8086666464805603, 0.8063333630561829, 0.812333345413208, 0.8023333549499512, 0.7889999747276306, 0.7933333516120911, 0.8230000138282776, 0.8133333325386047, 0.8366666436195374, 0.828000009059906, 0.8289999961853027, 0.8173333406448364, 0.8266666531562805, 0.8339999914169312]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [9, 4, 6, 4, 2, 1, 2, 8, 5, 8, 5, 3, 8, 1, 2, 0, 1, 2, 2, 6, 6, 3, 9, 5, 1, 2, 2, 8, 2, 4, 8], [3, 2, 3, 3, 3, 0, 3, 2, 3, 3, 3, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [78, 90, 16, 66, 40, 57, 35, 9, 54, 64], [1, 1, 0, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0], [6, 9, 3, 4], [1, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.7897142767906189, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(grad), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.145277524731336, 1.6105214099936938, 1.5262906033491115, 1.1212495769791206, 0.8682966168058106, 0.8621756615750211, 0.800120528355849, 0.7114836771521885, 0.6912501567091216, 0.6678960279167573, 0.6335489398547294, 0.5816414557301909, 0.5816919210485857, 0.5949540743974568, 0.5672537925189528], "accuracy": [0.2911108136177063, 0.47629112005233765, 0.5116893649101257, 0.6053361296653748, 0.6779817938804626, 0.6812838315963745, 0.7047945857048035, 0.7276449799537659, 0.7351737022399902, 0.750759482383728, 0.7635715007781982, 0.7804781198501587, 0.7836481332778931, 0.7734777331352234, 0.7947431206703186], "val_loss": [1.6595501218523299, 1.6014626707349504, 0.9989192485809326, 0.6571654421942574, 0.6508607523781913, 0.6394949470247541, 0.5932483502796718, 0.5752157654081073, 0.5488936730793544, 0.4861569745200021, 0.49056834833962576, 0.5185760429927281, 0.5711018357958112, 0.5274157694407872, 0.45744781834738596], "val_accuracy": [0.30799999833106995, 0.5583333373069763, 0.5973333120346069, 0.7233333587646484, 0.7023333311080933, 0.7099999785423279, 0.7253333330154419, 0.7353333234786987, 0.7609999775886536, 0.7873333096504211, 0.7820000052452087, 0.7806666493415833, 0.7463333606719971, 0.7630000114440918, 0.7866666913032532]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 7, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [0, 1, 1, 0, 6, 1, 2, 8, 5, 4, 9, 3, 9, 1, 0, 0, 2, 2, 2, 6, 6, 3, 9, 5, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [2, 1, 3, 3, 3, 0, 3, 2, 3, 3, 3, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [96, 90, 16, 66, 40, 57, 35, 9, 54, 64], [1, 1, 0, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0], [6, 9, 3, 4], [1, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.7854285836219788, "mapping_values": [1, 4, 4, 2, 2, 1, 14, 14, 8, 6, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.negative(beta), tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.subtract(tf.math.add(grad, grad), tf.math.sqrt(grad)))))), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.1721616504277694, 2.043752470934128, 1.4098927038472642, 1.1886691652064185, 0.9263395376650098, 0.8307937092438444, 0.7545639095588557, 0.6929448585799342, 0.7051242357782952, 0.6564111536551523, 0.6385157904163911, 0.6494453108353212, 0.6000812804898912, 0.5927518740573878], "accuracy": [0.2541275918483734, 0.31184783577919006, 0.5008585453033447, 0.585919976234436, 0.6560559868812561, 0.6888125538825989, 0.719852089881897, 0.7363624572753906, 0.7331924438476562, 0.7537974119186401, 0.7481178045272827, 0.7568352818489075, 0.7701756954193115, 0.778761088848114], "val_loss": [1.8185642787388392, 1.4702774797167097, 0.9428422110421317, 0.7489018951143537, 0.6127298900059291, 0.5710248947143555, 0.5390993697302682, 0.513841050011771, 0.5058177198682513, 0.5094644682747977, 0.528253333909171, 0.5203144039426532, 0.5051346846989223, 0.48198374680110384], "val_accuracy": [0.3336666524410248, 0.5253333449363708, 0.5803333520889282, 0.6993333101272583, 0.7256666421890259, 0.7486666440963745, 0.7509999871253967, 0.7683333158493042, 0.7836666703224182, 0.7599999904632568, 0.746999979019165, 0.7519999742507935, 0.7689999938011169, 0.7713333368301392]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [30, 66, 89, 50, 85, 46], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [7, 1, 6, 4, 2, 1, 2, 8, 5, 8, 5, 3, 8, 1, 2, 0, 1, 2, 2, 6, 6, 3, 9, 5, 1, 2, 2, 8, 2, 4, 8], [3, 2, 3, 3, 3, 0, 3, 2, 3, 3, 3, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [78, 90, 16, 66, 40, 57, 35, 9, 54, 64], [1, 1, 0, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0], [6, 9, 3, 4], [1, 0], [69, 2], [1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [64, 23, 13, 96, 41]], "fitness": -0.7811428308486938, "mapping_values": [1, 4, 4, 2, 2, 1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(grad), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.285481427938018, 2.2425839005365598, 2.1826504572995695, 2.094045581063102, 1.9498979313782003, 1.761833227290107, 1.580285399471213, 1.402362400341374, 1.2883355028483499, 1.1934423139145378, 1.129435469744905, 1.0758985411835826, 1.0359365289016973, 0.9828087725832698, 0.9605232856182642, 0.9291398003825327, 0.915224323687127, 0.89447138013778, 0.8769411230839916, 0.8513161671821389, 0.8417576172836484, 0.83836565037697, 0.8250874448934205, 0.8130027905919407, 0.7911757963239997, 0.7846476048872755, 0.7794250750412574, 0.7707669386112962, 0.7532789807718947, 0.7605174925774159, 0.7489995907137439, 0.7486777504783785, 0.7352455085798608, 0.7281651610963459, 0.7244547642122847, 0.7219337615606539, 0.7169704187374546, 0.7037254111515832, 0.7099925230097667, 0.7025408156717049, 0.6939743385968695, 0.6828038962903575, 0.6943750524202814, 0.6808855398109702, 0.668481953872146, 0.6669922706992981, 0.667028560598749, 0.6555749420571116, 0.6680510290436473, 0.6572848380580318], "accuracy": [0.12851670384407043, 0.23576806485652924, 0.32518821954727173, 0.3735305666923523, 0.4251750111579895, 0.46110156178474426, 0.4943864643573761, 0.5424646735191345, 0.5601637959480286, 0.5868445634841919, 0.6062607169151306, 0.6230352520942688, 0.6346585750579834, 0.6501122713088989, 0.6584334969520569, 0.6675472259521484, 0.6691322326660156, 0.6779817938804626, 0.6833971738815308, 0.6952846646308899, 0.6935675740242004, 0.6997754573822021, 0.7049266695976257, 0.7062475085258484, 0.7100779414176941, 0.7157574892044067, 0.7143045663833618, 0.720380425453186, 0.7197200059890747, 0.7244749665260315, 0.7209087014198303, 0.722757875919342, 0.7302865982055664, 0.7284374833106995, 0.7363624572753906, 0.7392682433128357, 0.7296261787414551, 0.7416457533836365, 0.7359662055969238, 0.739400327205658, 0.7388719916343689, 0.7434949278831482, 0.741909921169281, 0.7498348951339722, 0.7518161535263062, 0.7508915662765503, 0.7498348951339722, 0.7602694630622864, 0.7584202885627747, 0.7597411274909973], "val_loss": [1.933948040008545, 1.887566089630127, 1.8159889493669783, 1.7049747535160609, 1.5408175332205636, 1.3432822568075997, 1.1624705791473389, 1.015812635421753, 0.9169821739196777, 0.8469905001776559, 0.797161442892892, 0.7581242493220738, 0.7229918241500854, 0.6977373872484479, 0.6781632559640067, 0.660177196775164, 0.6488262755530221, 0.6320891720908028, 0.6206344536372593, 0.6079959699085781, 0.6049455063683646, 0.5943352665219989, 0.5862186976841518, 0.5778173719133649, 0.5772793122700283, 0.5665934596742902, 0.5619814055306571, 0.5569179568971906, 0.5541822229112897, 0.5475790841238839, 0.5435392005102975, 0.5408280066081456, 0.5373187405722482, 0.537246857370649, 0.5315898827144078, 0.5287621191569737, 0.5249911717006138, 0.5229119573320661, 0.5190765857696533, 0.5154869726725987, 0.511005197252546, 0.5074405159269061, 0.5078061989375523, 0.5043066399438041, 0.5007529429027012, 0.5002698387418475, 0.49826685019901823, 0.5006719316755023, 0.4963420970099313, 0.49613245895930697], "val_accuracy": [0.3233333230018616, 0.41733333468437195, 0.4776666760444641, 0.5249999761581421, 0.5513333082199097, 0.5846666693687439, 0.6269999742507935, 0.6570000052452087, 0.6729999780654907, 0.6896666884422302, 0.6933333277702332, 0.6973333358764648, 0.7183333039283752, 0.7229999899864197, 0.7286666631698608, 0.7260000109672546, 0.7326666712760925, 0.7409999966621399, 0.7396666407585144, 0.7436666488647461, 0.7433333396911621, 0.7523333430290222, 0.7516666650772095, 0.7576666474342346, 0.7586666941642761, 0.7599999904632568, 0.7590000033378601, 0.7606666684150696, 0.7663333415985107, 0.7713333368301392, 0.7730000019073486, 0.7710000276565552, 0.7696666717529297, 0.7676666378974915, 0.7746666669845581, 0.7726666927337646, 0.777999997138977, 0.7699999809265137, 0.7806666493415833, 0.7803333401679993, 0.784333348274231, 0.7833333611488342, 0.7806666493415833, 0.7850000262260437, 0.7926666736602783, 0.7863333225250244, 0.7850000262260437, 0.781333327293396, 0.7850000262260437, 0.7839999794960022]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 7, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [87, 66, 89, 50, 85, 46], [1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [8, 1, 1, 0, 6, 1, 2, 8, 5, 8, 2, 3, 8, 1, 2, 0, 2, 2, 2, 9, 6, 3, 9, 5, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [1, 3, 3, 3, 3, 0, 3, 1, 3, 0, 3, 2, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [96, 90, 16, 66, 40, 57, 35, 9, 54, 64], [1, 1, 0, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0], [6, 9, 3, 4], [1, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.3051428496837616, "mapping_values": [1, 4, 4, 2, 2, 1, 36, 36, 23, 13, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.negative(tf.math.add(alpha, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.add(beta, alpha), grad), tf.math.negative(tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(grad, grad), tf.math.sqrt(tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))))), tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)))), tf.math.add(beta, alpha)), tf.math.add(beta, grad)))), tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, tf.math.multiply(beta, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))))))))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.4577837242914495, 2.2274950473000894, 2.2087175684550875, 2.3106284271913387, 2.3011048184630263, 2.352980812290924], "accuracy": [0.23484347760677338, 0.20182274281978607, 0.24078720808029175, 0.10210011899471283, 0.11266675591468811, 0.19416193664073944], "val_loss": [1.8206511906215124, 1.9652628217424666, 1.958383287702288, 1.9734224591936385, 1.9574335643223353, 1.9768751008169991], "val_accuracy": [0.31933334469795227, 0.10466666519641876, 0.179666668176651, 0.10466666519641876, 0.18566666543483734, 0.10199999809265137]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [2, 0, 7, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 1, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [39, 66, 89, 50, 85, 46], [1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [8, 1, 0, 0, 6, 1, 2, 8, 5, 8, 2, 3, 8, 1, 2, 0, 2, 2, 2, 6, 6, 3, 9, 5, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [2, 0, 3, 3, 2, 0, 3, 2, 3, 3, 3, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [96, 24, 16, 66, 40, 57, 35, 9, 54, 64], [0, 1, 0, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0], [6, 9, 3, 4], [1, 0], [69, 2], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 7, 3, 4, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.sqrt(beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.pow(tf.math.multiply(beta, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), beta))", "other_info": {"loss": [2.3018908149231505, 2.302340154870784, 2.303406115898351, 2.308154567767128, 2.3295306914423626, 2.4368978301216946], "accuracy": [0.10500594228506088, 0.10328886657953262, 0.09998679161071777, 0.10342095047235489, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9735725947788783, 1.9736922127859933, 1.9750582831246513, 1.9827490534101213, 2.0221405710492815, 2.240880625588553], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 7, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 2, 6, 4, 2, 1, 2, 8, 5, 1, 5, 5, 8, 1, 2, 0, 1, 2, 2, 6, 6, 3, 9, 5, 1, 2, 2, 8, 2, 4, 8], [3, 2, 3, 0, 2, 0, 3, 1, 0, 2, 3, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [78, 90, 16, 66, 40, 57, 35, 9, 54, 64], [1, 1, 0, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0], [6, 9, 3, 4], [1, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 27, 27, 16, 11, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(beta, grad)), tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), beta), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(grad, tf.math.add(beta, alpha)), tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))))))))))))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta))))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06617355346679688, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 7, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [0, 66, 89, 50, 85, 46], [1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [0, 1, 1, 0, 6, 1, 5, 8, 5, 4, 5, 3, 8, 1, 0, 0, 2, 2, 2, 6, 6, 3, 9, 5, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [3, 2, 3, 0, 2, 0, 3, 2, 3, 2, 3, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [35, 24, 16, 66, 40, 57, 35, 9, 54, 64], [1, 1, 0, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0], [6, 9, 3, 4], [1, 0], [69, 2], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 24, 24, 16, 8, 2, 1, 0, 0, 0, 0, 7, 3, 4, 1], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.negative(tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.divide_no_nan(tf.math.subtract(tf.math.square(tf.math.sqrt(beta)), grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.negative(tf.math.negative(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, grad))))))))), beta))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.pow(tf.math.multiply(beta, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [1, 4, 6, 4, 2, 1, 2, 8, 5, 8, 5, 3, 8, 1, 2, 0, 1, 2, 2, 6, 6, 3, 9, 5, 1, 2, 2, 8, 2, 4, 8], [1, 2, 3, 3, 3, 0, 3, 2, 3, 3, 3, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [78, 90, 16, 66, 40, 57, 35, 9, 54, 64], [1, 1, 0, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0], [6, 9, 3, 4], [1, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 21, 21, 12, 9, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(alpha, beta), tf.math.pow(grad, tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(grad, tf.math.sqrt(tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), beta))))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07687227427959442, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [1, 5, 1, 1, 6, 1, 5, 0, 6, 8, 2, 3, 8, 1, 6, 0, 1, 6, 2, 6, 6, 3, 9, 5, 1, 2, 2, 8, 2, 4, 8, 5, 4, 8, 3, 8, 2, 3, 7, 7, 4, 1, 4, 5, 5, 9], [3, 1, 0, 3, 2, 0, 1, 3, 3, 3, 0, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5, 3, 5, 5, 2], [96, 90, 16, 66, 40, 57, 35, 9, 54, 64], [0, 1, 0, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0], [6, 9, 3, 4], [1, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [0, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 11, 8, 2, 75, 75, 46, 29, 7, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.add(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(alpha, grad), tf.math.negative(tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))), alpha)))))))), tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.divide_no_nan(tf.math.subtract(grad, tf.math.square(tf.math.negative(alpha))), tf.math.add(beta, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(beta, tf.math.add(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, alpha))), tf.math.divide_no_nan(grad, grad)))), tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.multiply(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.add(grad, tf.math.sqrt(alpha)), tf.math.add(beta, grad)))))))))), tf.math.add(beta, tf.math.add(tf.math.pow(grad, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)))))))))))), tf.math.add(beta, tf.math.square(tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.multiply(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.pow(tf.math.square(tf.math.add(beta, grad)), tf.math.square(grad)), grad), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))))))))))))), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302280687684349, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 7, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [8, 9, 1, 0, 6, 1, 2, 8, 5, 8, 2, 3, 8, 5, 2, 0, 2, 2, 2, 6, 6, 3, 9, 5, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [1, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [96, 90, 16, 66, 40, 57, 35, 9, 54, 64], [0, 1, 0, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0], [6, 9, 3, 4], [1, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 2, 2, 2, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(grad, tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.sqrt(grad)))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [4, 0, 7, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [8, 9, 1, 0, 6, 1, 4, 8, 5, 8, 4, 3, 8, 1, 2, 1, 2, 2, 2, 6, 6, 3, 9, 5, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [1, 3, 3, 3, 3, 0, 3, 1, 3, 3, 3, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [96, 90, 16, 66, 40, 57, 35, 9, 54, 64], [1, 1, 0, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0], [6, 9, 3, 4], [1, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(grad, tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 8, 7, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [8, 1, 1, 0, 8, 1, 2, 8, 5, 8, 2, 3, 8, 1, 2, 0, 3, 2, 2, 6, 6, 3, 9, 5, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [1, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [96, 90, 16, 66, 40, 57, 35, 9, 54, 64], [1, 1, 0, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0], [6, 9, 3, 4], [1, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 29, 29, 18, 11, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.sqrt(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.negative(alpha), tf.math.sqrt(grad)), tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.sqrt(grad), tf.math.square(tf.math.sqrt(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.multiply(grad, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))), tf.math.add(beta, beta)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)))))))))), tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0742306187748909, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 6, 2, 0, 6, 1, 2, 8, 6, 2, 4, 3, 8, 9, 6, 0, 1, 2, 2, 6, 6, 3, 9, 5, 1, 2, 2, 8, 2, 4, 8], [2, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [57, 90, 16, 66, 40, 57, 35, 9, 54, 64], [0, 1, 0, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0], [6, 9, 3, 4], [3, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 27, 27, 16, 11, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.negative(beta), tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.sqrt(grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(grad)), grad)))), tf.math.add(beta, beta)))), tf.math.add(beta, grad))))), tf.math.add(beta, grad))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07700435817241669, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 7, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [19, 66, 89, 50, 85, 46], [1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [8, 1, 0, 0, 6, 1, 2, 8, 5, 8, 2, 3, 8, 1, 2, 0, 2, 2, 2, 6, 6, 3, 9, 5, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [3, 2, 3, 0, 2, 0, 3, 2, 3, 2, 3, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [96, 24, 16, 66, 40, 57, 35, 9, 54, 64], [1, 1, 0, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0], [6, 9, 3, 4], [1, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(grad, tf.math.add(alpha, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.sqrt(grad)))), lambda shape,  alpha, beta, grad: tf.math.sqrt(grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 3, 7, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [0, 1, 1, 0, 6, 1, 2, 8, 5, 4, 9, 3, 8, 1, 0, 0, 2, 2, 2, 6, 6, 3, 9, 5, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [3, 1, 3, 3, 3, 0, 3, 2, 3, 3, 3, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [96, 90, 16, 66, 40, 57, 35, 9, 54, 64], [1, 1, 0, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0], [6, 9, 3, 4], [1, 0], [69, 2], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [0, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 7, 3, 4, 2], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.multiply(beta, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 7, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 6, 2, 0, 6, 1, 2, 8, 6, 2, 2, 3, 8, 9, 2, 0, 1, 2, 2, 6, 6, 3, 9, 5, 1, 2, 2, 8, 2, 4, 8], [3, 0, 3, 3, 2, 0, 3, 2, 3, 2, 3, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [96, 12, 16, 66, 40, 57, 35, 9, 54, 64], [0, 1, 0, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0], [6, 9, 3, 4], [1, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 2, 3, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07700435817241669, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}]