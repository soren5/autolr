[{"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1], [4, 6, 2, 3, 2, 2, 3, 9, 7, 9, 7, 6, 7, 9, 5, 9, 8, 6, 8], [1, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0], [85, 80, 14, 73], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.842285692691803, "mapping_values": [1, 4, 4, 2, 2, 1, 28, 28, 19, 9, 4, 4, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad))), grad), tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(grad, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))), alpha)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, sigma))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.0943459291751627, 1.1667930311247217, 0.8493911451698846, 0.7384882020266962, 0.6781072108154488, 0.6248458466982058, 0.5778395394528815, 0.5395981413325173, 0.5151082697467025, 0.4939535938241715, 0.47713814438247504, 0.4550335744447271, 0.4417398835980991, 0.4213215846899494, 0.4048737369476765, 0.39450403522065824, 0.3699850422272262, 0.3593105396196559, 0.3644291271882806, 0.3489208304375044, 0.32984279384466286, 0.3199453285979305, 0.312305501238419, 0.3127681437445323, 0.29845881621520504, 0.29845629650383515, 0.28366655017627057, 0.27192249847299244, 0.26812096032814786, 0.2618353533773941, 0.2612036094413914, 0.25404394565516963, 0.25405035034784507, 0.23691940150162044, 0.23676181672869925], "accuracy": [0.2937524616718292, 0.5904107689857483, 0.6925109028816223, 0.7168141603469849, 0.7404569983482361, 0.7662131786346436, 0.7755910754203796, 0.7928939461708069, 0.8049134612083435, 0.8133667707443237, 0.8281601071357727, 0.8265751004219055, 0.8367455005645752, 0.8465195894241333, 0.8535200357437134, 0.8525954484939575, 0.8650112152099609, 0.867520809173584, 0.8663320541381836, 0.8685774803161621, 0.8761062026023865, 0.878351628780365, 0.882710337638855, 0.8813894987106323, 0.8878615498542786, 0.8861445188522339, 0.8898428082466125, 0.8973715305328369, 0.8960506916046143, 0.9025228023529053, 0.8994848728179932, 0.8993527889251709, 0.897899866104126, 0.9101836085319519, 0.9115044474601746], "val_loss": [1.0283168724605016, 0.6963059731892177, 0.5933835165841239, 0.5442196641649518, 0.4986060176576887, 0.4707632746015276, 0.4461958408355713, 0.42071053811482023, 0.4001004695892334, 0.39086718218667166, 0.37791928223201204, 0.3633188009262085, 0.35945284366607666, 0.3578655890056065, 0.34625840187072754, 0.33438905647822786, 0.3302482451711382, 0.32940127168382916, 0.3313380054065159, 0.3272875121661595, 0.3268485239573887, 0.32424858638218473, 0.33000712735312326, 0.32700917550495695, 0.32420237575258526, 0.32372171538216726, 0.3096851791654314, 0.31892486980983187, 0.3173304796218872, 0.30976788486753193, 0.31091803312301636, 0.3424483963421413, 0.3157427651541574, 0.3175574966839382, 0.3231908849307469], "val_accuracy": [0.6499999761581421, 0.7296666502952576, 0.7310000061988831, 0.7536666393280029, 0.7786666750907898, 0.8040000200271606, 0.809333324432373, 0.8183333277702332, 0.8339999914169312, 0.8363333344459534, 0.8446666598320007, 0.8483333587646484, 0.8496666550636292, 0.8546666502952576, 0.8539999723434448, 0.8633333444595337, 0.8673333525657654, 0.8616666793823242, 0.8616666793823242, 0.8640000224113464, 0.8683333396911621, 0.8656666874885559, 0.8629999756813049, 0.8696666955947876, 0.8736666440963745, 0.8709999918937683, 0.8723333477973938, 0.8773333430290222, 0.8666666746139526, 0.8796666860580444, 0.8790000081062317, 0.871666669845581, 0.8756666779518127, 0.8773333430290222, 0.874666690826416]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [1, 4, 3, 3, 2, 2, 3, 9, 0, 9, 0, 4, 6, 2, 9, 5, 1], [1, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0], [85, 80, 14, 73], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8371428847312927, "mapping_values": [1, 4, 4, 2, 2, 1, 26, 26, 17, 9, 3, 4, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.negative(grad)))), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))), tf.math.add(beta, grad)), tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))), grad)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, beta))))))))), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, sigma))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.0943455897176175, 1.166789876991149, 0.8490324459528139, 0.7394590711218885, 0.6784391634027483, 0.6253447928653496, 0.5759380489780667, 0.5418617709784255, 0.5173180851056481, 0.4954780163608758, 0.4780747724396599, 0.45477663579082855, 0.44203103486541523, 0.4194048303835711, 0.4032272523294398, 0.3938644074760707, 0.3721875264116833, 0.35892585639105873, 0.36941596122072073, 0.34957962825140537, 0.33460160735229444, 0.3242396475805535, 0.3125085045105399, 0.30728673003589346, 0.29940709872819554, 0.2954454123540845, 0.28127468518766163, 0.276533539123413, 0.273685051406521, 0.27192426968000316, 0.26088462060846596, 0.26248068294276683, 0.2517872302031646, 0.24197636903111708, 0.24040328898938135, 0.2261975300334086], "accuracy": [0.2937524616718292, 0.590278685092926, 0.6933034062385559, 0.7161537408828735, 0.7409853339195251, 0.7646281719207764, 0.7758552432060242, 0.7921014428138733, 0.8039889335632324, 0.8136309385299683, 0.8289526104927063, 0.828292191028595, 0.8352925777435303, 0.8429533839225769, 0.8544445633888245, 0.8504821062088013, 0.8615770936012268, 0.8712190985679626, 0.8661999702453613, 0.8705587387084961, 0.8735966086387634, 0.8779553771018982, 0.8824461698532104, 0.8865407705307007, 0.8837670087814331, 0.8878615498542786, 0.8907673954963684, 0.8951261639595032, 0.8920882344245911, 0.8956544995307922, 0.8985602855682373, 0.8956544995307922, 0.9000132083892822, 0.9038436412811279, 0.9084665179252625, 0.9119006991386414], "val_loss": [1.0283054964882987, 0.6962295940944127, 0.5948660373687744, 0.5463576316833496, 0.4980144841330392, 0.47305779797690256, 0.4466357060841152, 0.42244766439710346, 0.4020440493311201, 0.39213827678135466, 0.38012220178331646, 0.3681383047785078, 0.36093659911836895, 0.3577645591327122, 0.35094731194632395, 0.3375698413167681, 0.33231363126209806, 0.33457974025181364, 0.33228008236203876, 0.3265089052064078, 0.3294514162199838, 0.3260638288089207, 0.3243622524397714, 0.3280376706804548, 0.32450796025139944, 0.32422337361744474, 0.30960261821746826, 0.32209145171301706, 0.3183876531464713, 0.3165647046906607, 0.31752475670405794, 0.33682658842631746, 0.3189097132001604, 0.3198948161942618, 0.32213009255273, 0.3374829718044826], "val_accuracy": [0.6499999761581421, 0.7303333282470703, 0.7306666374206543, 0.7523333430290222, 0.7793333530426025, 0.8006666898727417, 0.8053333163261414, 0.8203333616256714, 0.8343333601951599, 0.8360000252723694, 0.8423333168029785, 0.8489999771118164, 0.8519999980926514, 0.8550000190734863, 0.8516666889190674, 0.8569999933242798, 0.8629999756813049, 0.8610000014305115, 0.8619999885559082, 0.8690000176429749, 0.8679999709129333, 0.8690000176429749, 0.8673333525657654, 0.8726666569709778, 0.8683333396911621, 0.871666669845581, 0.8736666440963745, 0.8723333477973938, 0.8653333187103271, 0.8793333172798157, 0.8806666731834412, 0.8686666488647461, 0.8740000128746033, 0.871999979019165, 0.8713333606719971, 0.8686666488647461]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [4, 6, 9, 3, 2, 2, 3, 9, 8], [0, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 80, 63], [0, 0, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.834857165813446, "mapping_values": [1, 4, 4, 2, 2, 1, 14, 14, 9, 5, 3, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), grad)), tf.math.sqrt(tf.math.add(beta, grad)))))))), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, sigma))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.0943446069455907, 1.1659862412799855, 0.8499262987536021, 0.737781124407227, 0.6774250311921411, 0.6286644858376162, 0.5793829733401777, 0.5426012279413883, 0.5186289592410249, 0.49276880096246095, 0.4757765863534088, 0.45378435748033774, 0.43497848700869274, 0.4170352790404808, 0.39788621310166805, 0.3924473864039284, 0.37523228878736214, 0.36416504069672695, 0.36461838814544956, 0.3535410001600392, 0.3323254888997086, 0.3192675532626753, 0.3151382223773453, 0.30932671513067433, 0.29613667308866953, 0.2926278998114571, 0.2806297655961202, 0.2709046175624433, 0.263738981791932, 0.2607680068055731, 0.2635580247002129, 0.26302750958758353, 0.25043745617809204, 0.23330136141237282, 0.23399721209824345, 0.22294631342153506, 0.20820606649197512, 0.21538188514054774, 0.2101855878923012], "accuracy": [0.2937524616718292, 0.5919957756996155, 0.6902654767036438, 0.7169462442398071, 0.7417778372764587, 0.7644960880279541, 0.7786290049552917, 0.791969358921051, 0.8033285140991211, 0.8137630224227905, 0.8280280232429504, 0.8281601071357727, 0.837141752243042, 0.8459912538528442, 0.8560295701026917, 0.8521991968154907, 0.8599920868873596, 0.8648791313171387, 0.8672566413879395, 0.8673887252807617, 0.8745211958885193, 0.8804649114608765, 0.8845595121383667, 0.8835028409957886, 0.8882578015327454, 0.8893144726753235, 0.8934090733528137, 0.898428201675415, 0.8989565372467041, 0.9005415439605713, 0.8972394466400146, 0.894069492816925, 0.9019944667816162, 0.9072777628898621, 0.9121648669242859, 0.9134856462478638, 0.9183727502822876, 0.91559898853302, 0.9179764986038208], "val_loss": [1.0282620361873083, 0.6961849927902222, 0.5923396008355277, 0.542703356061663, 0.49951543126787457, 0.47320304598127094, 0.4503169059753418, 0.42329909971782137, 0.39988324471882414, 0.38929563760757446, 0.38172467265810284, 0.36948060989379883, 0.35937574080058504, 0.35438677242824007, 0.34874739817210604, 0.3387326683316912, 0.3350039209638323, 0.3349517754146031, 0.33356337887900217, 0.33155137300491333, 0.3276921680995396, 0.32953643798828125, 0.3211044413702829, 0.3285983034542629, 0.32494838748659405, 0.319317238671439, 0.3090996401650565, 0.31311248881476267, 0.31075410331998554, 0.3147545712334769, 0.31805855887276785, 0.3299154383795602, 0.3209180235862732, 0.3109378899846758, 0.320526659488678, 0.3269312466893877, 0.3238556044442313, 0.3311823436192104, 0.3166864173752921], "val_accuracy": [0.6503333449363708, 0.7323333621025085, 0.734666645526886, 0.7570000290870667, 0.784333348274231, 0.7993333339691162, 0.8053333163261414, 0.8193333148956299, 0.8360000252723694, 0.8363333344459534, 0.8403333425521851, 0.8433333039283752, 0.8516666889190674, 0.8533333539962769, 0.8529999852180481, 0.8633333444595337, 0.8629999756813049, 0.8606666922569275, 0.8633333444595337, 0.8679999709129333, 0.8673333525657654, 0.8636666536331177, 0.8686666488647461, 0.8700000047683716, 0.8703333139419556, 0.8696666955947876, 0.8726666569709778, 0.8773333430290222, 0.8723333477973938, 0.8763333559036255, 0.8759999871253967, 0.8733333349227905, 0.8793333172798157, 0.8823333382606506, 0.8769999742507935, 0.8740000128746033, 0.8756666779518127, 0.874666690826416, 0.8773333430290222]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1], [4, 6, 9, 9, 2, 2, 3, 9], [0, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 80, 3], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8328571319580078, "mapping_values": [1, 4, 4, 2, 2, 1, 11, 11, 7, 4, 3, 4, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(beta, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad))), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, sigma))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.0943455263261765, 1.166067018382632, 0.8500400619688854, 0.7387541400017976, 0.6769809878938439, 0.6272837742838357, 0.5790218169411113, 0.541004344496225, 0.519267086316062, 0.4957373112562137, 0.4741340494426707, 0.45437791779009484, 0.4367385909990659, 0.4211493686929969, 0.4003802662937475, 0.39434398629441475, 0.37190135070330055, 0.36088314630005575, 0.3635864928492686, 0.349071484054667, 0.336466293576812, 0.32304326607928757, 0.31936151111650274, 0.31213651342225696, 0.2966183658997774, 0.2942249912036928, 0.28491902904440586, 0.27508210893776974, 0.26537576842900074, 0.27004605532873416, 0.2648718641765082, 0.2666565486685223, 0.25646462573619044, 0.23968782165991773, 0.23599355545703368, 0.2248729824756099, 0.21369010096079072, 0.21295267923546504], "accuracy": [0.2937524616718292, 0.5915995240211487, 0.6900013089179993, 0.7176066637039185, 0.7416457533836365, 0.763967752456665, 0.7754589915275574, 0.7935543656349182, 0.8024039268493652, 0.8127063512802124, 0.82683926820755, 0.82683926820755, 0.8350284099578857, 0.8455950617790222, 0.8556333184242249, 0.8506141901016235, 0.8597279191017151, 0.8659358024597168, 0.867520809173584, 0.8697662353515625, 0.8720116019248962, 0.8808611631393433, 0.8770307898521423, 0.8842953443527222, 0.885219931602478, 0.8893144726753235, 0.8899748921394348, 0.898428201675415, 0.89988112449646, 0.8976356983184814, 0.8985602855682373, 0.8948619961738586, 0.8992207050323486, 0.908730685710907, 0.9079381823539734, 0.9152027368545532, 0.9161273241043091, 0.9198256731033325], "val_loss": [1.0282623427254813, 0.6961499111992973, 0.5928598472050258, 0.5454728603363037, 0.4984520503452846, 0.47325289249420166, 0.4493540184838431, 0.4232132945741926, 0.40038191420691355, 0.3913444365773882, 0.38065160172326223, 0.36710127762385775, 0.3589122380529131, 0.35504391363688875, 0.3489000712122236, 0.3400299293654306, 0.3341824156897409, 0.3346395492553711, 0.3334120512008667, 0.3278890677860805, 0.32608218703951153, 0.32302935634340557, 0.3251305307660784, 0.3254873922892979, 0.32604329926627024, 0.31546805586133686, 0.3089319722993033, 0.3119991251400539, 0.31764163289751324, 0.3163665703364781, 0.3259041820253645, 0.3508085182734898, 0.31770053931644987, 0.31733777693339754, 0.3185980234827314, 0.3251311779022217, 0.32227024010249544, 0.3177163430622646], "val_accuracy": [0.6499999761581421, 0.7326666712760925, 0.734000027179718, 0.7549999952316284, 0.7850000262260437, 0.800000011920929, 0.8063333630561829, 0.8213333487510681, 0.8336666822433472, 0.8343333601951599, 0.8413333296775818, 0.8450000286102295, 0.8496666550636292, 0.8519999980926514, 0.8529999852180481, 0.8579999804496765, 0.8653333187103271, 0.8606666922569275, 0.8640000224113464, 0.8633333444595337, 0.8693333268165588, 0.8676666617393494, 0.8656666874885559, 0.8690000176429749, 0.8700000047683716, 0.875333309173584, 0.875, 0.8786666393280029, 0.8659999966621399, 0.8769999742507935, 0.8709999918937683, 0.8663333058357239, 0.8813333511352539, 0.871666669845581, 0.871999979019165, 0.8736666440963745, 0.875333309173584, 0.8769999742507935]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1], [4, 6, 9, 3, 2, 2, 1, 9], [0, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 80, 14, 73], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8277142643928528, "mapping_values": [1, 4, 4, 2, 2, 1, 11, 11, 6, 5, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.add(grad, tf.math.add(beta, grad)))), alpha)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.0935600770384233, 1.1647172490083908, 0.8496877355519508, 0.7336887623876109, 0.6706456611216611, 0.6226921042809004, 0.5732803987537188, 0.5387110908065159, 0.5149477613269849, 0.49328938170651465, 0.4759972260069491, 0.4545237778585978, 0.43465960154506933, 0.4174339120469278, 0.403343345778509, 0.39878965481444595, 0.3735282739486362, 0.36440654604615413, 0.36757029212146247, 0.3520710942980132, 0.34084397352067725, 0.32591467086491943, 0.31538029888349833, 0.31526770679989446, 0.30258526200269426, 0.2938506721686599, 0.28557408733799977, 0.27516367555593596, 0.2726967952128934, 0.2694607521478038, 0.267056565317952, 0.26715397736762003, 0.26113038564110946, 0.24404858602052193, 0.24062201314992152, 0.22834794229016311, 0.2099837587513802, 0.2086694499819963, 0.2066443307095704, 0.2064085334004066, 0.2042717762205815, 0.1977747721997833, 0.18956387017215987, 0.1856022640962359], "accuracy": [0.2937524616718292, 0.5918636918067932, 0.687491774559021, 0.7211728692054749, 0.7469290494918823, 0.7627789974212646, 0.7812706232070923, 0.7942147850990295, 0.8030643463134766, 0.8108572363853455, 0.8277638554573059, 0.8274996876716614, 0.8352925777435303, 0.8465195894241333, 0.8533879518508911, 0.8500858545303345, 0.8590674996376038, 0.8681812286376953, 0.8685774803161621, 0.8679170608520508, 0.8770307898521423, 0.8805969953536987, 0.8821820020675659, 0.8821820020675659, 0.8812574148178101, 0.889578640460968, 0.8889182209968567, 0.8947299122810364, 0.8934090733528137, 0.898428201675415, 0.8968431949615479, 0.8944657444953918, 0.8965790271759033, 0.9058248400688171, 0.9116365313529968, 0.9104477763175964, 0.9203540086746216, 0.9192973375320435, 0.9192973375320435, 0.9173160791397095, 0.9220710396766663, 0.9211464524269104, 0.9274864792823792, 0.925901472568512], "val_loss": [1.0214360782078333, 0.6945256846291679, 0.5892097098486764, 0.5385158572878156, 0.4963350977216448, 0.4695969820022583, 0.4431079626083374, 0.42345160245895386, 0.4023201210158212, 0.39240086930138723, 0.3811326963560922, 0.3643949627876282, 0.35970007521765573, 0.3613147905894688, 0.35206507784979685, 0.336934609072549, 0.33581248351505827, 0.33329640116010395, 0.332218485219138, 0.3346956968307495, 0.3280403869492667, 0.3274051376751491, 0.3340901221547808, 0.33716078315462383, 0.3298303314617702, 0.3192774568285261, 0.31960688318525043, 0.3167452727045332, 0.3237875359398978, 0.3145337189946856, 0.32438020195279804, 0.35251215526035856, 0.3242939795766558, 0.3191784364836557, 0.3296426960400173, 0.3200244903564453, 0.3236710344042097, 0.32653642552239553, 0.32534882000514437, 0.3265212007931301, 0.34227302244731356, 0.3259912814412798, 0.3489470226424081, 0.33301263196127756], "val_accuracy": [0.6493333578109741, 0.7269999980926514, 0.7360000014305115, 0.7603333592414856, 0.7873333096504211, 0.8040000200271606, 0.8083333373069763, 0.8173333406448364, 0.8333333134651184, 0.8353333473205566, 0.8429999947547913, 0.8516666889190674, 0.8479999899864197, 0.8503333330154419, 0.8529999852180481, 0.859000027179718, 0.8583333492279053, 0.8600000143051147, 0.8653333187103271, 0.8633333444595337, 0.8690000176429749, 0.8673333525657654, 0.8659999966621399, 0.8610000014305115, 0.8696666955947876, 0.8690000176429749, 0.8706666827201843, 0.8756666779518127, 0.8640000224113464, 0.8766666650772095, 0.8773333430290222, 0.8633333444595337, 0.8740000128746033, 0.8776666522026062, 0.8700000047683716, 0.8769999742507935, 0.8773333430290222, 0.8766666650772095, 0.8790000081062317, 0.8736666440963745, 0.8769999742507935, 0.8700000047683716, 0.8759999871253967, 0.8773333430290222]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1], [4, 1, 5, 3, 2, 2, 3, 9, 3, 8, 5, 4, 1, 1, 9, 1, 4, 5, 2, 0, 3, 5, 0, 5], [0, 0, 3, 3, 1, 5, 3, 2, 1, 2, 4, 0, 5], [24, 80, 3, 57], [0, 0, 1, 0, 0, 0, 1, 1], [1, 0, 1, 1, 0], [8, 7, 8, 4], [4, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.7217142581939697, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(grad), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.0730725599711426, 1.1869032656858312, 0.8515704822987455, 0.7969190021941155, 0.702469710274899, 0.6531072202816521, 0.6117410181205128, 0.596614431113048, 0.5663127317766803, 0.5386752896635776, 0.5385964595685782, 0.5254690110281931, 0.5236168754980974, 0.49149860858350397, 0.486075800179396, 0.4861458169903816, 0.4700089303486068, 0.47848818914576324, 0.4810244548613637, 0.49122382240871065, 0.5077465738697201, 0.4906537648063562], "accuracy": [0.2977149784564972, 0.5904107689857483, 0.6865671873092651, 0.698190450668335, 0.7331924438476562, 0.7528728246688843, 0.7675340175628662, 0.7713643908500671, 0.7872143983840942, 0.789988100528717, 0.800818920135498, 0.8035926818847656, 0.8026680946350098, 0.8161405324935913, 0.8168009519577026, 0.8168009519577026, 0.8231409192085266, 0.8186501264572144, 0.8235371708869934, 0.8128384351730347, 0.806630551815033, 0.81548011302948], "val_loss": [0.9564104761396136, 0.7317507266998291, 0.6052807569503784, 0.5501472779682705, 0.5091383457183838, 0.4821580648422241, 0.4708362477166312, 0.4847534213747297, 0.43545582464763094, 0.43683100598199026, 0.433523952960968, 0.41665702206747873, 0.41657098702022005, 0.44699391296931673, 0.4220167653901236, 0.41565175567354473, 0.42559834889003206, 0.4361159290586199, 0.41659174646650043, 0.441704979964665, 0.4550906590053013, 0.45627364942005705], "val_accuracy": [0.656333327293396, 0.7146666646003723, 0.7213333249092102, 0.7540000081062317, 0.7823333144187927, 0.7946666479110718, 0.8016666769981384, 0.7983333468437195, 0.8153333067893982, 0.8223333358764648, 0.8240000009536743, 0.8306666612625122, 0.82833331823349, 0.8323333263397217, 0.8379999995231628, 0.8309999704360962, 0.8429999947547913, 0.8346666693687439, 0.8276666402816772, 0.8073333501815796, 0.8349999785423279, 0.8163333535194397]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1], [4, 6, 5, 3, 2, 2, 3, 9], [0, 0, 3, 3, 1, 5, 3, 2, 1, 2, 4, 0, 5], [30, 80, 3], [0, 1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [8, 7, 8, 4], [4, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.6305714249610901, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.0576009010641942, 1.2818754004008734, 1.0792692222174494, 1.0070140574350332, 1.1033649468040894, 4.817380644657577, 2.928293021694229, 3.6342637727541174, 6.445767514756988], "accuracy": [0.30141329765319824, 0.5807687044143677, 0.6078457236289978, 0.6341302394866943, 0.6427156329154968, 0.47232863306999207, 0.3275656998157501, 0.3061682879924774, 0.25359925627708435], "val_loss": [0.9231198174612862, 0.8944150379725865, 0.66538519518716, 0.6728217431477138, 2.7012595449175154, 2.416869980948312, 1.9025002888270788, 3.0454505511692593, 4.996350015912737], "val_accuracy": [0.659333348274231, 0.5976666808128357, 0.6903333067893982, 0.7056666612625122, 0.43533334136009216, 0.5789999961853027, 0.41733333468437195, 0.28999999165534973, 0.2709999978542328]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [45, 32, 5, 49, 25], [1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [4, 6, 2, 2, 2, 2, 3, 9, 4, 9, 7, 6, 7, 9, 6, 9, 8, 8, 6, 7], [1, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0], [85, 80, 14, 73], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [0, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.6011428833007812, "mapping_values": [1, 4, 4, 2, 2, 1, 31, 31, 20, 11, 4, 4, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(grad), tf.math.add(alpha, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), grad), tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), beta)), alpha)))))))), tf.math.add(beta, grad))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, sigma))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2208389311639185, 1.8300186247322396, 1.4637710070329777, 1.9968595041370254, 1.865145237737753, 2.00447318815615, 27.85262777726286], "accuracy": [0.3199048936367035, 0.3895126283168793, 0.5251618027687073, 0.3949280083179474, 0.3901730179786682, 0.33601900935173035, 0.2900541424751282], "val_loss": [1.8231489998953683, 1.1806354522705078, 1.1736016273498535, 1.2790893827165877, 1.4981298446655273, 1.735001529966082, 188331.35714285713], "val_accuracy": [0.25333333015441895, 0.6196666955947876, 0.6156666874885559, 0.4426666796207428, 0.4099999964237213, 0.43799999356269836, 0.06566666811704636]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 2, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 8, 2, 3, 2, 2, 3, 9, 7, 9, 7, 6, 2, 9, 2, 9, 4, 6, 8], [1, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0], [85, 80, 14, 73], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10771428793668747, "mapping_values": [1, 4, 4, 2, 2, 0, 14, 14, 8, 6, 1, 4, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, grad), grad), tf.math.add(beta, grad))))), grad)))), tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, sigma))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.301441604876011, 2.2993634354562777, 2.299762409565676, 2.301322057530266, 2.3021771296880438, 2.302504163203443, 2.302734624408948, 2.3028066275126395], "accuracy": [0.09457138925790787, 0.10672302544116974, 0.11279883980751038, 0.10817593336105347, 0.1072513535618782, 0.10777968913316727, 0.10289261490106583, 0.1002509593963623], "val_loss": [1.9690327644348145, 1.9703074863978796, 1.9720982142857142, 1.9730454172406877, 1.9736452783857072, 1.9738657133919852, 1.973963669368199, 1.9740816525050573], "val_accuracy": [0.08100000023841858, 0.10233332961797714, 0.10633333027362823, 0.10466666519641876, 0.09833333641290665, 0.09566666930913925, 0.0949999988079071, 0.0949999988079071]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1], [4, 6, 9, 3, 2, 2, 3, 9], [0, 0, 3, 3, 1, 5, 3, 2, 1, 2, 4, 0, 5], [85, 80, 3], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [9, 5, 8, 4], [4, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [0, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3018202573521545, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [2, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [4, 6, 4, 5, 0, 2, 6, 9, 9], [0, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 80, 21, 98], [0, 0, 1, 1, 0, 0, 1, 1], [0, 1, 1, 1, 0], [7, 7, 8, 4], [4, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 18, 11, 7, 4, 13, 13, 9, 4, 3, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))))))), tf.math.pow(tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.pow(tf.math.square(tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), grad)))), tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1], [4, 6, 9, 3, 2, 2, 3, 8, 1, 8, 1, 6, 2, 5], [3, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 98, 3], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [2, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 18, 11, 7, 4, 24, 24, 14, 10, 1, 4, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))))))), tf.math.pow(tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad))))), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, grad), grad), tf.math.sqrt(tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.subtract(tf.math.sqrt(tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, sigma))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1], [4, 6, 9, 3, 2, 2, 3, 9], [1, 1, 1, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 80, 74], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 13, 13, 8, 5, 2, 4, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, alpha))), grad), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, sigma))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [9.540408871980343, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0334169864654541, 0.09668471664190292, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [49186.064732142855, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [2, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1], [6, 6, 9, 3, 2, 2, 3, 9, 1, 3, 8, 4, 6, 8], [0, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [24, 24, 18, 57], [0, 0, 1, 0, 0, 0, 1, 1], [1, 0, 1, 1, 0], [8, 1, 8, 4], [2, 1], [64], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [3, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 13, 13, 8, 5, 3, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.add(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad))), grad)), tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))))), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10210011899471283, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [17, 32, 5, 49, 25], [0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1], [6, 6, 9, 3, 2, 2, 3, 9, 1, 3, 8, 4, 6, 8], [5, 0, 3, 3, 1, 5, 3, 2, 1, 2, 4, 0, 5], [32, 80, 3, 57], [0, 0, 1, 0, 0, 0, 1, 1], [1, 0, 1, 1, 0], [8, 1, 8, 4], [1, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 13, 13, 8, 5, 3, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(grad, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.add(beta, tf.math.add(grad, tf.math.multiply(grad, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)))), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.080042265355587, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [34, 32, 5, 49, 25], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1], [4, 6, 3, 3, 2, 2, 3, 9, 7, 9, 2, 9, 7, 9, 5, 9, 8, 6, 8], [1, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0], [24, 80, 3, 57], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 0, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 18, 11, 7, 4, 21, 21, 14, 7, 4, 3, 2, 2, 0, 0, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))))))), tf.math.pow(tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad)), tf.math.add(beta, grad)))), grad)), tf.math.multiply(tf.math.add(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))))), tf.math.add(beta, tf.math.add(grad, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.negative(sigma)))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1], [8, 3, 5, 0, 9, 2, 3, 9], [3, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 80, 3], [0, 1, 1, 0, 0, 0, 1, 1], [0, 1, 0, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [0, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 2, 2, 1, 1, 0, 2, 1, 1, 0, 0, 1, 0, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3018202573521545, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 2, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1], [4, 6, 6, 3, 2, 2, 3, 9, 7, 9, 7, 5, 7, 9, 5, 2, 2, 6, 8], [1, 3, 3, 3, 3, 0, 3, 2, 1, 4, 4, 0], [85, 80, 14, 73], [0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.04171428456902504, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 4, 4, 2, 2, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, sigma), tf.math.add(sigma, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.3022853625590667, 2.3031824335776707, 2.302876417332353, 2.3024777900651463, 2.3023526448741203, 2.301017920291655], "accuracy": [0.09298639744520187, 0.0878351628780365, 0.08638224750757217, 0.08915598690509796, 0.09747721254825592, 0.09536388516426086], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 1, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [4, 6, 1, 3, 2, 2, 3, 1, 1, 8, 7, 2, 8, 5, 0], [3, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0], [85, 80, 3], [1, 0, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [3, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.04171428456902504, "mapping_values": [1, 3, 3, 2, 1, 0, 27, 27, 15, 12, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), grad)), tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(grad, tf.math.add(beta, grad)), grad), tf.math.multiply(grad, tf.math.add(beta, tf.math.subtract(tf.math.subtract(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha)))), tf.math.add(beta, grad)))))), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))))))))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3022853625590667, 2.3031824335776707, 2.302876417332353, 2.3024777900651463, 2.3023526448741203, 2.301017920291655], "accuracy": [0.09298639744520187, 0.0878351628780365, 0.08638224750757217, 0.08915598690509796, 0.09747721254825592, 0.09536388516426086], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [6, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1], [6, 6, 9, 3, 2, 2, 3, 9, 1, 3, 8, 4, 6, 8], [5, 0, 3, 3, 1, 5, 3, 2, 1, 2, 4, 0, 5], [24, 80, 3, 57], [0, 0, 1, 1, 0, 0, 1, 1], [1, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.04171428456902504, "mapping_values": [1, 4, 4, 2, 2, 1, 13, 13, 8, 5, 3, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.add(grad, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), grad)), tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))))), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3022853625590667, 2.3031824335776707, 2.302876417332353, 2.3024777900651463, 2.3023526448741203, 2.301017920291655], "accuracy": [0.09298639744520187, 0.0878351628780365, 0.08638224750757217, 0.08915598690509796, 0.09747721254825592, 0.09536388516426086], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}]