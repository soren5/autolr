[{"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [8, 5, 4, 0, 0, 0, 4, 2, 0, 0, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [3, 5, 0, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [90, 95, 52, 66, 2, 57, 35, 9, 54, 64], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [0, 0], [69, 2], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 2, 0, 2, 2], [84, 23, 13, 96, 41]], "fitness": -0.8288571238517761, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 6, 3, 3, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.square(tf.math.multiply(alpha, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [1.969141839942786, 1.2357295051840995, 0.8968788866337973, 0.8128673485902794, 0.7561764950214391, 0.7251672608001184, 0.7025205385037826, 0.6540447589412987, 0.6415037338082753, 0.6179204063723509, 0.6248204975222017, 0.5751125913852903, 0.5688531690301393, 0.5523199099418021, 0.5468664802911023, 0.5349835726988392, 0.5181852917291107, 0.5095643116781945, 0.505827821780347, 0.4830594443885988, 0.4660413748379381, 0.4666321168423266, 0.47175076732609045, 0.44088314220716673, 0.4531885708453806, 0.4284155175017013, 0.4266905517208735], "accuracy": [0.33245277404785156, 0.5645225048065186, 0.6734909415245056, 0.6915863156318665, 0.7140403985977173, 0.7273808121681213, 0.7343811988830566, 0.7537974119186401, 0.7589486241340637, 0.7736098170280457, 0.7631752490997314, 0.7833839654922485, 0.7862898111343384, 0.7938185334205627, 0.7961959838867188, 0.8021397590637207, 0.8042530417442322, 0.8080834746360779, 0.8140271902084351, 0.8187822103500366, 0.8244617581367493, 0.8248580098152161, 0.8248580098152161, 0.8428213000297546, 0.8304054737091064, 0.8437458872795105, 0.8393871188163757], "val_loss": [1.322296142578125, 0.6630044494356427, 0.606982810156686, 0.5798994643347604, 0.5663671663829258, 0.5566670043127877, 0.5114656686782837, 0.527285064969744, 0.49609841619219097, 0.5088598557880947, 0.4694273812430246, 0.4481623002461025, 0.49042441163744244, 0.463437693459647, 0.42877445050648283, 0.42734313011169434, 0.41269057989120483, 0.42647548232759747, 0.39674945388521465, 0.39099799735205515, 0.40234100818634033, 0.38924447127750944, 0.37587984119142803, 0.3824727620397295, 0.3913085971559797, 0.3730241060256958, 0.38334781782967703], "val_accuracy": [0.5009999871253967, 0.7256666421890259, 0.7419999837875366, 0.7473333477973938, 0.7336666584014893, 0.7456666827201843, 0.7743333578109741, 0.7649999856948853, 0.7883333563804626, 0.737666666507721, 0.7903333306312561, 0.8083333373069763, 0.7856666445732117, 0.781333327293396, 0.8136666417121887, 0.8169999718666077, 0.8306666612625122, 0.8186666369438171, 0.8309999704360962, 0.8376666903495789, 0.8330000042915344, 0.8426666855812073, 0.8426666855812073, 0.8403333425521851, 0.8253333568572998, 0.8423333168029785, 0.8363333344459534]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [8, 7, 4, 0, 0, 0, 4, 2, 0, 0, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [2, 5, 0, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [90, 95, 52, 66, 2, 57, 35, 9, 54, 64], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [3, 0], [91, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 3, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8180000185966492, "mapping_values": [1, 4, 4, 2, 2, 1, 8, 8, 5, 3, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, tf.math.negative(tf.math.negative(grad)))), tf.math.add(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.0148006417826574, 1.4994060182772955, 1.0273788784473266, 0.908732153334559, 0.7897191649225834, 0.7830438557365205, 0.7292955356692248, 0.7006993836903727, 0.7022679543230653, 0.6876672686775993, 0.6553427185978887, 0.6300517321341482, 0.6318713990673019, 0.6197570587476766, 0.6081316765698428, 0.5879253601243767, 0.5587166032582037, 0.5692258252522508, 0.5587360518892853, 0.5509057542383711, 0.5154986905895755, 0.5154499066519999, 0.5249113570729015, 0.4890710924791543, 0.5163831100834202, 0.4894893241202622, 0.4801156562490391, 0.46552159225369144, 0.48068115463535216, 0.4489224278388353, 0.45021047584762697, 0.44740480140467614, 0.4543920733814998, 0.4345045650537539, 0.41477577913596314, 0.44078858972792423, 0.41312696118994696, 0.4245283863351109, 0.4119765260562511], "accuracy": [0.3197728097438812, 0.4842160940170288, 0.6276581883430481, 0.6729626059532166, 0.7074362635612488, 0.7078325152397156, 0.7238145470619202, 0.7362303733825684, 0.7360982894897461, 0.748778223991394, 0.7523444890975952, 0.7619865536689758, 0.7563069462776184, 0.7626469135284424, 0.7726852297782898, 0.7828556299209595, 0.7910447716712952, 0.7794214487075806, 0.7893276810646057, 0.789459764957428, 0.8067626357078552, 0.8109893202781677, 0.8017435073852539, 0.8220842480659485, 0.807158887386322, 0.8215559124946594, 0.8187822103500366, 0.8240655064582825, 0.8158763647079468, 0.8347642421722412, 0.8359529972076416, 0.8350284099578857, 0.828820526599884, 0.8370096683502197, 0.8428213000297546, 0.8342359066009521, 0.8465195894241333, 0.8446704745292664, 0.8488970994949341], "val_loss": [1.50336868422372, 0.7718179225921631, 0.8398632832935878, 0.6022584097726005, 0.6230452912194389, 0.5459032910210746, 0.5601791484015328, 0.5948602472032819, 0.6029170751571655, 0.5378048419952393, 0.5171434538705009, 0.48670314039502827, 0.4952112265995571, 0.47910022735595703, 0.4577467611857823, 0.4571086508887155, 0.45963408265795025, 0.4547023091997419, 0.4318447198186602, 0.42166766098567415, 0.4425734281539917, 0.4379980308668954, 0.4102652839251927, 0.41571405104228426, 0.4584683520453317, 0.40498184306280954, 0.4421645402908325, 0.3996750371796744, 0.37858900853565763, 0.396696788924081, 0.3733360341617039, 0.3864916903632028, 0.37903662238802227, 0.36092727524893625, 0.373863731111799, 0.3679693937301636, 0.3746963398797171, 0.36442133358546663, 0.3643988456044878], "val_accuracy": [0.36399999260902405, 0.7110000252723694, 0.6433333158493042, 0.7356666922569275, 0.7106666564941406, 0.7559999823570251, 0.7519999742507935, 0.7246666550636292, 0.7446666955947876, 0.7406666874885559, 0.7563333511352539, 0.7916666865348816, 0.7793333530426025, 0.7929999828338623, 0.7956666946411133, 0.8016666769981384, 0.8063333630561829, 0.7893333435058594, 0.8149999976158142, 0.8223333358764648, 0.8146666884422302, 0.8233333230018616, 0.8276666402816772, 0.8180000185966492, 0.7903333306312561, 0.82833331823349, 0.8050000071525574, 0.8306666612625122, 0.8450000286102295, 0.8243333101272583, 0.843666672706604, 0.8389999866485596, 0.8379999995231628, 0.8523333072662354, 0.8446666598320007, 0.8473333120346069, 0.8416666388511658, 0.8460000157356262, 0.8463333249092102]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [8, 7, 4, 0, 0, 0, 4, 2, 0, 8, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [2, 5, 0, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [90, 95, 52, 66, 2, 57, 35, 9, 54, 64], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [0, 0], [67, 2], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 2, 0, 2, 2], [84, 23, 13, 96, 41]], "fitness": -0.8105714321136475, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 6, 4, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), alpha)))", "other_info": {"loss": [1.9795966958955546, 1.347035982873005, 0.8810492871444081, 0.8628776082273298, 0.7555005387024809, 0.7103998140730736, 0.6901342434071279, 0.6596226084501579, 0.6427789708689738, 0.6216231702482853, 0.6276922980241016, 0.5755508072372157, 0.5733299691915481, 0.5663794619595259, 0.5453754626701631, 0.5346870112176647, 0.5164553205594725, 0.5121058837266221, 0.5071471248438582, 0.48804440292558177, 0.4717001994807785, 0.48338707527700525, 0.47407946363337494, 0.4473435329786302, 0.45744565786261676, 0.43691057695798935, 0.4350109416787273], "accuracy": [0.33166027069091797, 0.5381059050559998, 0.6737551093101501, 0.6800950765609741, 0.718399167060852, 0.735569953918457, 0.7415136694908142, 0.7519482374191284, 0.7585523724555969, 0.7736098170280457, 0.759609043598175, 0.7868181467056274, 0.78113853931427, 0.7849689722061157, 0.8012151718139648, 0.8001585006713867, 0.8034605979919434, 0.8068947196006775, 0.8101968169212341, 0.8152159452438354, 0.8251221776008606, 0.8210275769233704, 0.8191784620285034, 0.8363492488861084, 0.826310932636261, 0.8389908671379089, 0.8367455005645752], "val_loss": [1.3194451332092285, 0.7214632545198713, 0.7266679150717599, 0.576341050011771, 0.5614439930234637, 0.5424739633287702, 0.5220867906297956, 0.5500205074037824, 0.4995133876800537, 0.5279677084514073, 0.46832805020468576, 0.44760567801339285, 0.47628351620265413, 0.43361739601407734, 0.42932736022131784, 0.4265396850449698, 0.4127607601029532, 0.42531085865838186, 0.40434115273611887, 0.39087988649095806, 0.3879554101399013, 0.3943090949739729, 0.38102757930755615, 0.3817850095885141, 0.4076891967228481, 0.3737274578639439, 0.3727137190955026], "val_accuracy": [0.5460000038146973, 0.703000009059906, 0.6679999828338623, 0.7523333430290222, 0.7456666827201843, 0.7573333382606506, 0.7606666684150696, 0.7436666488647461, 0.7886666655540466, 0.7483333349227905, 0.7916666865348816, 0.8059999942779541, 0.7906666398048401, 0.8116666674613953, 0.8096666932106018, 0.815666675567627, 0.8236666917800903, 0.8186666369438171, 0.8203333616256714, 0.8379999995231628, 0.8413333296775818, 0.843666672706604, 0.8399999737739563, 0.8393333554267883, 0.8140000104904175, 0.8413333296775818, 0.8403333425521851]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [8, 7, 4, 0, 0, 0, 4, 2, 0, 0, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [2, 5, 0, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [90, 95, 52, 66, 2, 57, 35, 9, 54, 64], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [3, 0, 4], [62, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8102856874465942, "mapping_values": [1, 4, 4, 2, 2, 1, 15, 15, 10, 5, 1, 7, 6, 3, 3, 1, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, tf.math.negative(tf.math.negative(tf.math.negative(tf.math.add(beta, grad)))))), tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))), grad)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, sigma), sigma)), tf.math.add(sigma, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)))), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.0149303591404104, 1.4992595711215424, 1.0176206247492583, 0.9248726629877072, 0.8375108535688756, 0.7612900419273648, 0.7398426899615846, 0.7120064734436375, 0.6952238519666312, 0.6711516864878264, 0.6587528140317211, 0.6252645912612544, 0.6333013683923594, 0.6165567950770335, 0.5944531917446058, 0.5951134849218188, 0.5559520859366253, 0.5586350229611219, 0.5552861759958959, 0.5516669832602027, 0.5141252984838116, 0.5212796106314568, 0.5289933505689369, 0.4888487321439909, 0.5123940798049401], "accuracy": [0.31964072585105896, 0.4835556745529175, 0.6279223561286926, 0.6717738509178162, 0.6863030195236206, 0.7153612375259399, 0.7193237543106079, 0.7284374833106995, 0.7388719916343689, 0.7528728246688843, 0.7541936039924622, 0.7625148296356201, 0.7601373791694641, 0.7663452625274658, 0.7775723338127136, 0.7798177003860474, 0.7911768555641174, 0.7869502305984497, 0.7909126877784729, 0.7923656105995178, 0.8075551390647888, 0.8049134612083435, 0.7988376617431641, 0.8219521641731262, 0.8061022162437439], "val_loss": [1.5034325804029192, 0.7730510916028704, 0.8818315097263881, 0.6171410083770752, 0.5974058764321464, 0.5986915145601545, 0.5343693324497768, 0.5755155597414289, 0.5377011469432286, 0.5430486713136945, 0.5055974211011615, 0.5299024411610195, 0.4942612477711269, 0.47054498536246164, 0.4621141127177647, 0.4551929405757359, 0.457571063722883, 0.4617138249533517, 0.4235017214502607, 0.42001656123570036, 0.4424283674785069, 0.44979958874838694, 0.4114835262298584, 0.41412800550460815, 0.4408343860081264], "val_accuracy": [0.3630000054836273, 0.7120000123977661, 0.640999972820282, 0.7210000157356262, 0.7303333282470703, 0.7179999947547913, 0.765333354473114, 0.7440000176429749, 0.7639999985694885, 0.737666666507721, 0.7699999809265137, 0.7570000290870667, 0.7786666750907898, 0.7950000166893005, 0.7946666479110718, 0.8063333630561829, 0.8103333115577698, 0.7856666445732117, 0.8173333406448364, 0.828000009059906, 0.8083333373069763, 0.8119999766349792, 0.8243333101272583, 0.8186666369438171, 0.8006666898727417]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [29, 66, 89, 50, 85, 46], [0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [8, 7, 4, 0, 0, 0, 4, 2, 0, 0, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [2, 3, 0, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [90, 95, 52, 66, 2, 57, 35, 9, 54, 64], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [3, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 3, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.7528571486473083, "mapping_values": [1, 4, 4, 2, 2, 1, 8, 8, 5, 3, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, tf.math.negative(tf.math.negative(grad)))), tf.math.add(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2884013235860294, 2.2544725151928646, 2.2108649589350637, 2.148203417767056, 2.060043224175498, 1.9334401637650342, 1.7744750411613444, 1.6179737253211761, 1.471858256890742, 1.3501947668360492, 1.2679803580214963, 1.2004717387669375, 1.1343510200507794, 1.0925989221383425, 1.0479019571210353, 1.007043903529951, 0.9880313772677178, 0.9569661643259152, 0.9260268882281115, 0.9206156806938873, 0.8968213897229438, 0.8871984679890095, 0.8659616985482909, 0.8578290588993359, 0.8446722818466461, 0.8276536761809019, 0.8235628457510901, 0.8162867350191598, 0.8013291044431103, 0.7993029572424903, 0.7800955314520344, 0.7808750622685968, 0.7719091200919876], "accuracy": [0.13313961029052734, 0.2156914472579956, 0.28860124945640564, 0.3501518964767456, 0.3899088501930237, 0.4329679012298584, 0.4636111557483673, 0.4947827160358429, 0.5211992859840393, 0.551050066947937, 0.5715228915214539, 0.5934486985206604, 0.603090763092041, 0.611940324306488, 0.6338660717010498, 0.6498481035232544, 0.650640606880188, 0.6586976647377014, 0.667811393737793, 0.6744155287742615, 0.6785101294517517, 0.6856426000595093, 0.6876237988471985, 0.6954167485237122, 0.6955488324165344, 0.7009642124176025, 0.7008321285247803, 0.6963412761688232, 0.702681303024292, 0.7137762308120728, 0.7189275026321411, 0.7162858247756958, 0.7240787148475647], "val_loss": [1.9404098646981376, 1.9054318836757116, 1.8570294380187988, 1.7850181715829032, 1.680612359728132, 1.5397076606750488, 1.3754662445613317, 1.2174289226531982, 1.0853499344417028, 0.9828315121786935, 0.9066184929439, 0.8499301331383842, 0.8031977755682809, 0.7674140078680856, 0.7415072917938232, 0.7154022455215454, 0.6947016716003418, 0.6766193083354405, 0.6614218950271606, 0.6488115617207119, 0.6392657245908465, 0.6271741390228271, 0.6174649170466832, 0.6082996811185565, 0.6008897338594709, 0.5923940113612584, 0.5877793005534581, 0.5817802122661045, 0.5777880464281354, 0.5733091320310321, 0.5656169482639858, 0.5650919164930072, 0.5590922832489014], "val_accuracy": [0.30300000309944153, 0.4020000100135803, 0.4566666781902313, 0.48766666650772095, 0.5316666960716248, 0.5529999732971191, 0.5806666612625122, 0.612666666507721, 0.6586666703224182, 0.6660000085830688, 0.6803333163261414, 0.6923333406448364, 0.7006666660308838, 0.7049999833106995, 0.7083333134651184, 0.7166666388511658, 0.7239999771118164, 0.7273333072662354, 0.737333357334137, 0.737333357334137, 0.7366666793823242, 0.746666669845581, 0.7416666746139526, 0.746666669845581, 0.7490000128746033, 0.7573333382606506, 0.7556666731834412, 0.7586666941642761, 0.7543333172798157, 0.7543333172798157, 0.7583333253860474, 0.7556666731834412, 0.7580000162124634]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [5, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [8, 7, 4, 0, 0, 0, 4, 2, 0, 8, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [2, 5, 0, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [90, 95, 52, 66, 2, 57, 35, 9, 54, 64], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [0, 0], [69, 2], [1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 3, 0, 2, 0, 2, 2], [84, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.negative(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10540219396352768, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 8, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 7, 4, 2, 0, 1, 4, 2, 0, 0, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [3, 5, 0, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [90, 95, 52, 66, 2, 57, 35, 9, 54, 64], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [1, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 5, 5, 2, 3, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10170386731624603, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [8, 7, 4, 0, 0, 0, 4, 2, 0, 0, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [2, 5, 0, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [90, 95, 52, 66, 2, 57, 35, 9, 54, 64], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [5, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 2, 0, 2, 2], [84, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.negative(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10170386731624603, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [4, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [95, 66, 89, 50, 85, 46], [1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [8, 5, 4, 0, 0, 0, 4, 2, 0, 0, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [3, 5, 0, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [90, 95, 52, 66, 2, 57, 35, 9, 54, 64], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [0, 0, 5], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 2, 0, 2, 2], [84, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 7, 6, 3, 3, 2, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), sigma)), tf.math.add(sigma, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10170386731624603, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 6, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [8, 7, 4, 0, 0, 0, 4, 2, 0, 8, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [2, 5, 0, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [90, 95, 52, 66, 2, 57, 35, 9, 54, 64], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [0, 0], [67, 2], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [27, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 6, 4, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), beta)))", "other_info": {"loss": [2.3038147003139566, 2.311863404790314, 2.3277700734947806, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0886276587843895, 0.08796724677085876, 0.07911768555641174, 0.09417514503002167, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9742911202566964, 1.9815634999956404, 2.0080789838518416, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.02433333359658718, 0.06933332979679108, 0.10000000149011612, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [1, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [47, 66, 89, 50, 85, 46], [0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [8, 7, 4, 0, 0, 0, 4, 2, 0, 8, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [0, 5, 0, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [90, 95, 52, 66, 2, 57, 35, 9, 54, 64], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [7, 0], [6, 2], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1], [7, 5, 3, 1, 3, 0, 1, 3, 2, 2, 5, 1, 5, 0], [1, 1, 0, 2, 0, 2, 2, 2, 2, 0], [84, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 17, 17, 11, 6, 2, 1, 1, 0, 1, 0, 24, 14, 10, 3], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, alpha)), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.pow(tf.math.add(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.negative(tf.math.add(beta, grad))))))), tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, grad)))))), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.square(tf.math.multiply(tf.math.subtract(alpha, alpha), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.negative(tf.math.subtract(tf.math.multiply(beta, tf.math.add(tf.math.add(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), beta), beta)), tf.math.square(tf.math.subtract(beta, tf.math.square(tf.math.negative(beta)))))), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [8, 6, 4, 0, 0, 0, 4, 2, 0, 0, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [3, 4, 0, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [90, 95, 52, 66, 2, 57, 35, 9, 54, 64], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [0, 0], [69, 2], [1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 4, 4, 2, 2, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [5749.5302718798275, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.17078325152397156, 0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [55114670080.0, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0963333323597908, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [7, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 1, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [8, 7, 4, 0, 0, 0, 4, 2, 0, 8, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [2, 5, 0, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [90, 95, 52, 66, 2, 57, 35, 9, 54, 64], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [0, 0, 1], [67, 2], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [3, 1, 0, 2, 0, 2, 2], [84, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 17, 17, 11, 6, 1, 7, 6, 3, 3, 2, 6, 4, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.negative(tf.math.add(beta, grad))))))), tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, grad)))))), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), sigma)), tf.math.add(sigma, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))), tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.multiply(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1014397069811821, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [6, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [26, 66, 89, 50, 85, 46], [0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [8, 7, 4, 0, 0, 0, 4, 2, 0, 8, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [2, 5, 0, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [90, 95, 52, 66, 2, 57, 35, 9, 54, 64], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [0, 0], [67, 2], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 2, 0, 2, 2], [84, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 1, 3, 1, 2, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, grad)), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10289261490106583, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [9, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [8, 7, 4, 0, 0, 0, 4, 2, 0, 0, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [2, 0, 0, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [90, 95, 52, 66, 2, 57, 35, 9, 54, 64], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [5, 0], [67, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 2, 0, 2, 2], [84, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 15, 15, 10, 5, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, tf.math.negative(tf.math.negative(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))), grad)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [18570561.34364448, 357494017.14965, 1673416282.3827765, 4601314685.886673, 9985951920.23458, 18249467870.45727], "accuracy": [0.10394927859306335, 0.1002509593963623, 0.10077928751707077, 0.1018359512090683, 0.10196803510189056, 0.09589222073554993], "val_loss": [70129684.57142857, 560352274.2857143, 1890422345.142857, 4480106934.857142, 8749114806.857143, 15117228909.714285], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [8, 7, 4, 0, 0, 0, 4, 2, 0, 8, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [5, 5, 0, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [90, 95, 52, 66, 2, 57, 35, 9, 54, 64], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [0, 0], [67, 2], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 3, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 2, 0, 2, 2], [32, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 3, 1, 2, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, alpha)", "other_info": {"loss": [Infinity, 15.8134519269422, 30.210944204314067, 44.60963723209509, 59.021542016179126, 73.4260201656335], "accuracy": [0.07475894689559937, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [8.4515745980399, 20.78247288295201, 33.1138425554548, 45.45818328857422, 57.794869559151785, 70.14300101143974], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [8, 7, 4, 0, 0, 0, 4, 2, 0, 8, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [2, 5, 0, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [90, 95, 52, 66, 2, 57, 35, 9, 54, 64], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [4, 0], [67, 2], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5, 5, 5], [1, 1, 0, 2, 0, 2, 2], [84, 23, 13, 96, 41]], "fitness": -0.06057142838835716, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 20, 13, 7, 3], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, grad)), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.square(tf.math.multiply(alpha, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(alpha, tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.add(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.square(beta), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))), beta), tf.math.square(tf.math.square(beta))))))", "other_info": {"loss": [2.301976817930537, 2.3019944089766837, 2.300845860836607, 2.2999951021310094, 2.301544916549489, 2.3017885778495395, 2.3012048894577117, 2.3012148350174115, 2.300907922663378, 2.301087172276088, 2.2998824658694286, 2.300602434302176, 2.3019753474884377, 2.30083903292025, 2.301194358416804, 2.300889835602036, 2.3018312423362426, 2.2998855396142774, 2.3009996071247265, 2.302246640591715, 2.3014135254278094, 2.300674872926796, 2.3008120128932394, 2.3005038460310914, 2.299931924514105, 2.301293553268086, 2.30060253910432, 2.3004017618464254, 2.3008196912878116, 2.300840780011037, 2.301132428663408, 2.299962779550095, 2.3008840813408153, 2.3003343115267327, 2.2999435154485695, 2.300546430908473, 2.3009879234176918, 2.3000105051804747, 2.300370289617762, 2.299387411088078, 2.2998063581935515, 2.299766822718453, 2.300183935471498, 2.300014413437587, 2.2997114686067817, 2.299921189600277, 2.299273237749381], "accuracy": [0.09245806187391281, 0.0944393053650856, 0.09192973375320435, 0.09628847241401672, 0.09311848133802414, 0.09126931428909302, 0.09536388516426086, 0.0944393053650856, 0.09285431355237961, 0.09047681838274002, 0.09377889335155487, 0.09642054885625839, 0.0944393053650856, 0.08942015469074249, 0.09351472556591034, 0.09272222965955734, 0.09034473448991776, 0.09760929644107819, 0.09589222073554993, 0.09047681838274002, 0.09509972482919693, 0.09549596905708313, 0.09576013684272766, 0.09509972482919693, 0.09919429570436478, 0.0940430611371994, 0.09206181764602661, 0.09734513610601425, 0.09153348207473755, 0.09311848133802414, 0.09840179979801178, 0.09576013684272766, 0.09470347315073013, 0.09457138925790787, 0.09325055778026581, 0.09800554811954498, 0.09576013684272766, 0.09694888442754745, 0.0944393053650856, 0.1006472036242485, 0.10210011899471283, 0.09457138925790787, 0.09576013684272766, 0.09681680053472519, 0.09668471664190292, 0.09536388516426086, 0.10196803510189056], "val_loss": [1.9708633422851562, 1.9707794189453125, 1.9707256725856237, 1.970668179648263, 1.9705856868198939, 1.9705019678388322, 1.9704339163643974, 1.9703611646379744, 1.970301832471575, 1.9702566691807337, 1.9702107565743583, 1.9701472691127233, 1.9700809206281389, 1.97004120690482, 1.9699979509626115, 1.969954013824463, 1.9698937961033411, 1.9698668207441057, 1.9698294230869837, 1.969784940992083, 1.9697527204241072, 1.9697346006120955, 1.9697068078177316, 1.969675132206508, 1.9696549006870814, 1.9696241106305803, 1.9696029935564314, 1.9695795604160853, 1.9695588520595007, 1.9695446831839425, 1.9695252009800501, 1.9695182527814592, 1.9695006098066057, 1.96948276247297, 1.9694784709385462, 1.9694671630859375, 1.9694559233529227, 1.9694547653198242, 1.9694534710475378, 1.9694595336914062, 1.969458852495466, 1.9694675036839075, 1.9694642339433943, 1.9694618497576033, 1.9694799014500208, 1.9694846698216029, 1.969501154763358], "val_accuracy": [0.03966666758060455, 0.0403333343565464, 0.04100000113248825, 0.0416666679084301, 0.04266666620969772, 0.04399999976158142, 0.04399999976158142, 0.04533333331346512, 0.04500000178813934, 0.04633333161473274, 0.04633333161473274, 0.047333333641290665, 0.04833333194255829, 0.04899999871850014, 0.049666665494441986, 0.050999999046325684, 0.05066666752099991, 0.05133333429694176, 0.05133333429694176, 0.050999999046325684, 0.05166666582226753, 0.05233333259820938, 0.05400000140070915, 0.05433333292603493, 0.054666668176651, 0.054999999701976776, 0.055666666477918625, 0.056333333253860474, 0.0573333315551281, 0.05700000002980232, 0.058666665107011795, 0.05900000035762787, 0.05900000035762787, 0.06133333221077919, 0.06199999898672104, 0.06199999898672104, 0.06333333253860474, 0.06366666406393051, 0.06333333253860474, 0.06300000101327896, 0.06333333253860474, 0.06400000303983688, 0.06366666406393051, 0.06400000303983688, 0.06400000303983688, 0.06400000303983688, 0.06400000303983688]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 1, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [8, 7, 4, 0, 0, 0, 4, 2, 0, 0, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [3, 5, 0, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [90, 95, 52, 66, 2, 57, 35, 9, 54, 64], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [3, 0, 4], [91, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 3, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.04171428456902504, "mapping_values": [1, 4, 4, 2, 2, 0, 8, 8, 5, 3, 1, 7, 6, 3, 3, 1, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.negative(grad))))), tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, sigma), sigma)), tf.math.add(sigma, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)))), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.302015812326778, 2.302144813058934, 2.3010663604534787, 2.3002887300260313, 2.3019696991945287, 2.3023330730737523], "accuracy": [0.09245806187391281, 0.09496764093637466, 0.09232597798109055, 0.09496764093637466, 0.09232597798109055, 0.08875974267721176], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 1, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [8, 7, 4, 0, 0, 0, 4, 2, 0, 0, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [0, 5, 0, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [90, 95, 52, 66, 2, 57, 35, 9, 54, 64], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [0, 0, 2], [67, 2], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 2, 0, 2, 2], [84, 23, 13, 96, 41]], "fitness": -0.04171428456902504, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 1, 7, 6, 3, 3, 2, 6, 3, 3, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, alpha)), lambda shape,  alpha, beta, grad: tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), sigma)), tf.math.add(sigma, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))), tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.square(tf.math.multiply(alpha, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.302015812326778, 2.302144813058934, 2.3010663604534787, 2.3002887300260313, 2.3019696991945287, 2.3023330730737523], "accuracy": [0.09245806187391281, 0.09496764093637466, 0.09232597798109055, 0.09496764093637466, 0.09232597798109055, 0.08875974267721176], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [61, 66, 89, 50, 85, 46], [0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [8, 7, 4, 2, 0, 1, 4, 2, 0, 0, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [3, 5, 0, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [90, 95, 52, 66, 2, 57, 35, 9, 54, 64], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [3, 0], [91, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 3, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.024857142940163612, "mapping_values": [1, 4, 4, 2, 2, 1, 16, 16, 9, 7, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.negative(grad), tf.math.add(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))))), tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(grad, grad)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.4015183055783464, 2.6199946302102304, 2.3273876817108947, 2.3166840180052017, 2.303777115676602, 2.3028502563176265, 2.303078686981594], "accuracy": [0.21120063960552216, 0.14740456640720367, 0.18716153502464294, 0.10685510188341141, 0.09655263274908066, 0.10302469879388809, 0.09774138033390045], "val_loss": [3.479029110499791, 1.7917992046901159, 1.9752205439976283, 1.9745967047555106, 1.9739048821585519, 1.9737604686192103, 1.9737225260053362], "val_accuracy": [0.21199999749660492, 0.26899999380111694, 0.10533333569765091, 0.09666666388511658, 0.09666666388511658, 0.10199999809265137, 0.10400000214576721]}}]