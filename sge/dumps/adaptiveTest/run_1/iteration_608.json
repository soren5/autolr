[{"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [2, 4, 1, 3, 2, 1, 0, 1, 8, 8, 2, 3, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [4, 1, 3, 3, 0, 3, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8305714130401611, "mapping_values": [1, 4, 4, 2, 2, 1, 18, 18, 10, 8, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.subtract(tf.math.negative(tf.math.subtract(tf.math.add(beta, grad), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(grad))))))), grad)), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.442316057974589, 2.173637193821645, 1.4845706601861508, 1.288049394003294, 1.0315192100189585, 1.0225744155876357, 0.8138442421082288, 0.7717432821384275, 0.726279116231122, 0.685557964841341, 0.6567989964495246, 0.6347670838770189, 0.6058728038406549, 0.6619972299748502, 0.5978608222968858, 0.5512913331977916, 0.5462104280737208, 0.5280364126600783, 0.5100599931506999, 0.49069376826963373, 0.4810090638296621, 0.4734999691773998, 0.45605836966727087, 0.44638507082524975, 0.44574496882183207, 0.42625687973704934, 0.41935956910726907, 0.42204513266464155, 0.41673403222956723, 0.3953395728831278, 0.41457958651524274, 0.392419667968881, 0.37599602579409186, 0.3753244500937416, 0.3767044643062437, 0.3583303861937046, 0.3683213721043115, 0.3535821646857397, 0.3433755184437038, 0.35286390196850365, 0.3412122791193858, 0.3465878855849868, 0.33084460368261615, 0.3286734759894187, 0.32876383025790124, 0.31889064361422115, 0.3159056141187234, 0.3317887600323842, 0.30581720364863735, 0.31036673587988145], "accuracy": [0.2436930388212204, 0.2316734939813614, 0.4505349397659302, 0.5317659378051758, 0.611940324306488, 0.6184123754501343, 0.6905296444892883, 0.7078325152397156, 0.7202483415603638, 0.7378153204917908, 0.748249888420105, 0.7611940503120422, 0.7758552432060242, 0.7574957013130188, 0.7728173136711121, 0.7917051911354065, 0.7968564033508301, 0.800290584564209, 0.8061022162437439, 0.8189142942428589, 0.8245938420295715, 0.8186501264572144, 0.8293488025665283, 0.8290846943855286, 0.8319904804229736, 0.8426892161369324, 0.8385946154594421, 0.8400475382804871, 0.842028796672821, 0.8508783578872681, 0.8433496356010437, 0.8490291833877563, 0.8605204224586487, 0.8565579056739807, 0.8585391640663147, 0.8634262084960938, 0.8603883385658264, 0.8638224601745605, 0.8701624870300293, 0.8626337051391602, 0.8660678863525391, 0.8650112152099609, 0.8761062026023865, 0.8732003569602966, 0.871879518032074, 0.8768987059593201, 0.8776912093162537, 0.8771628737449646, 0.8815215826034546, 0.8794082403182983], "val_loss": [1.9390577588762556, 1.4565956592559814, 1.0896928650992257, 0.7539549895695278, 0.9313299315316337, 0.6247146299907139, 0.6008239303316388, 0.5540362255913871, 0.5262937886374337, 0.5188888651984078, 0.5065307106290545, 0.5056101254054478, 0.49833539554050993, 0.5109855617795672, 0.4632586751665388, 0.42378086703164236, 0.42903384992054533, 0.4136193224361965, 0.3978660617555891, 0.39860842909131733, 0.44301746572766987, 0.38049369198935373, 0.377630421093532, 0.37640778507505146, 0.3684617877006531, 0.362952641078404, 0.34771898814610075, 0.34803783893585205, 0.3559873785291399, 0.3464580093111311, 0.3672242505209787, 0.3475988336971828, 0.3499319212777274, 0.3469910281045096, 0.3369907396180289, 0.33954995019095285, 0.33291797978537424, 0.36111003160476685, 0.3573242000171116, 0.33366760185786654, 0.33990046807697843, 0.33475788150514874, 0.3230880754334586, 0.3394904817853655, 0.3247498444148472, 0.3412071466445923, 0.3674303037779672, 0.3402328746659415, 0.359877918447767, 0.3318935121808733], "val_accuracy": [0.15333333611488342, 0.3656666576862335, 0.5243333578109741, 0.6763333082199097, 0.6116666793823242, 0.7080000042915344, 0.7316666841506958, 0.750333309173584, 0.7639999985694885, 0.765999972820282, 0.7789999842643738, 0.7736666798591614, 0.7773333191871643, 0.7599999904632568, 0.7889999747276306, 0.8226666450500488, 0.8100000023841858, 0.8246666789054871, 0.8343333601951599, 0.828000009059906, 0.8133333325386047, 0.8393333554267883, 0.8353333473205566, 0.8333333134651184, 0.843666672706604, 0.8513333201408386, 0.8506666421890259, 0.8519999980926514, 0.8456666469573975, 0.8533333539962769, 0.843999981880188, 0.8513333201408386, 0.8486666679382324, 0.8486666679382324, 0.8536666631698608, 0.8569999933242798, 0.859333336353302, 0.8569999933242798, 0.8556666374206543, 0.8600000143051147, 0.8600000143051147, 0.8583333492279053, 0.8663333058357239, 0.8619999885559082, 0.8673333525657654, 0.859666645526886, 0.843999981880188, 0.8583333492279053, 0.8460000157356262, 0.8659999966621399]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [0, 4, 1, 3, 2, 0, 3, 9, 8, 8, 7, 3, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [4, 1, 3, 3, 0, 3, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8171428442001343, "mapping_values": [1, 4, 4, 2, 2, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.4423149118271046, 2.1731749684693176, 1.536860453422752, 1.2352482481340392, 1.036903083820416, 0.8927661012963942, 0.8074608074990498, 0.782298499110384, 0.7310328317308911, 0.7002174412616885, 0.6511348803140042, 0.6442512138140846, 0.6175529417612486, 0.6105171690968443, 0.6021992127735696, 0.5686268417464586, 0.5457103733515082, 0.5285497373672382, 0.5331687887449306, 0.5038343891216039, 0.4935600071173177, 0.48246034848345204, 0.4759990967354518, 0.45526065552522793, 0.4498514376099493, 0.4434014970655407, 0.42806253569347513, 0.4292251347684589, 0.42873343519877294, 0.4117637697723894, 0.4186587671853485], "accuracy": [0.2436930388212204, 0.23233389854431152, 0.44208163022994995, 0.5407475829124451, 0.6032228469848633, 0.6608110070228577, 0.6885483860969543, 0.7024171352386475, 0.724210798740387, 0.7318716049194336, 0.7504953145980835, 0.7560427784919739, 0.7663452625274658, 0.7740060687065125, 0.7703077793121338, 0.7829877138137817, 0.802800178527832, 0.8039889335632324, 0.8033285140991211, 0.8104609847068787, 0.8161405324935913, 0.8177255392074585, 0.8226125836372375, 0.83119797706604, 0.8362171649932861, 0.8330471515655518, 0.8337075710296631, 0.837141752243042, 0.8416325449943542, 0.8462554216384888, 0.842028796672821], "val_loss": [1.9390933173043388, 1.457514728818621, 1.2961565085819788, 0.7449819871357509, 0.7124687433242798, 0.6109053066798619, 0.5866220678601947, 0.5896740640912738, 0.5323652710233416, 0.5137885638645717, 0.5131359270640782, 0.5141939095088414, 0.48744634219578337, 0.4855248076575143, 0.44463506766727995, 0.42828695263181416, 0.4289776597704206, 0.4288333143506731, 0.41680911609104704, 0.4062069995062692, 0.46378014768872944, 0.3759580595152719, 0.37446566990443636, 0.3681370956557138, 0.37994213615145, 0.3668418952396938, 0.35217619793755667, 0.35755624941417147, 0.3695730311529977, 0.3582717180252075, 0.36202358348029], "val_accuracy": [0.15299999713897705, 0.35733333230018616, 0.49900001287460327, 0.6506666541099548, 0.6639999747276306, 0.7236666679382324, 0.7390000224113464, 0.7336666584014893, 0.7596666812896729, 0.7670000195503235, 0.7940000295639038, 0.7559999823570251, 0.7850000262260437, 0.7863333225250244, 0.800000011920929, 0.8220000267028809, 0.8226666450500488, 0.8203333616256714, 0.8303333520889282, 0.8236666917800903, 0.7996666431427002, 0.8410000205039978, 0.843666672706604, 0.8410000205039978, 0.8373333215713501, 0.8506666421890259, 0.8506666421890259, 0.8493333458900452, 0.8479999899864197, 0.8446666598320007, 0.8463333249092102]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [9, 9, 1, 3, 1, 1, 0, 4, 8, 8, 2, 3, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [4, 1, 3, 3, 0, 3, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [52, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.7839999794960022, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.4423212718812466, 2.1761245282570827, 1.741729299043699, 2.3801141022659644, 2.2498645391667034, 2.728764894726317, 2.093709843017957, 1.6324654668786065, 1.2634875836578328, 0.9778657510784151, 0.8192808674059178, 0.7318096711509311, 0.6967167922723342, 0.6736826991927842, 0.6571393753354575, 0.6241399602426466, 0.6191881809488436, 0.5979343239877832, 0.5879576800915355, 0.5798638793676127, 0.56289862139413, 0.5494719010184486, 0.5489228914489741, 0.5297283219576291, 0.5233967110284362, 0.5145890402551403, 0.5045714234442932, 0.5101130139739554, 0.47688134825303646, 0.47992804617362805, 0.47473809544231754, 0.45176036550604737, 0.4664788843460874, 0.4409548838605277, 0.4394909532795083, 0.43507736953588727, 0.43804168506714775, 0.42971231731614573, 0.4138863937706129, 0.41857778091928854, 0.40936516716007576, 0.3979133807231942, 0.3958629693975223, 0.39777758028670673, 0.3905320792402243, 0.3941020927117753, 0.3805724136258759], "accuracy": [0.2436930388212204, 0.23074890673160553, 0.3887201249599457, 0.21820102632045746, 0.14568749070167542, 0.2316734939813614, 0.19944524765014648, 0.4301941692829132, 0.5473517179489136, 0.6439043879508972, 0.7008321285247803, 0.7290979027748108, 0.7450799345970154, 0.7470611333847046, 0.7504953145980835, 0.76542067527771, 0.7696473598480225, 0.7728173136711121, 0.7758552432060242, 0.7832518815994263, 0.7898560166358948, 0.7936864495277405, 0.7955356240272522, 0.8014793395996094, 0.8055738806724548, 0.8009510040283203, 0.8087438941001892, 0.8103289008140564, 0.8175934553146362, 0.816008448600769, 0.819442629814148, 0.826310932636261, 0.822348415851593, 0.8293488025665283, 0.8342359066009521, 0.8352925777435303, 0.8345000743865967, 0.8372738361358643, 0.845859169960022, 0.8360850811004639, 0.846387505531311, 0.8470479249954224, 0.850350022315979, 0.8490291833877563, 0.8494254350662231, 0.8499537706375122, 0.8514066934585571], "val_loss": [1.9392224039350237, 1.4803595883505685, 1.5715548310961043, 1.9780257769993372, 1.9211327007838659, 1.9796483857291085, 1.337226390838623, 1.014892510005406, 0.7779956715447562, 0.6387052025113787, 0.5610591002873012, 0.5505450453077044, 0.5135013546262469, 0.5051573855536324, 0.49217733315059115, 0.4982666628701346, 0.4960517031805856, 0.45167185579027447, 0.4480721950531006, 0.4533817597797939, 0.4328173909868513, 0.4251879113061087, 0.42900549513953073, 0.413615277835301, 0.415280955178397, 0.39686680691582815, 0.4013435585158212, 0.4119308761187962, 0.40949078117098126, 0.39048783268247333, 0.3854432020868574, 0.3969335811478751, 0.3839979086603437, 0.3842706084251404, 0.3915917617934091, 0.40943843126296997, 0.3796498349734715, 0.37032207420894075, 0.38142785855701994, 0.37563395500183105, 0.36672604935509817, 0.36607052598680767, 0.37446848835263935, 0.38670460666928974, 0.4050248350415911, 0.37191722222736906, 0.36717761414391653], "val_accuracy": [0.15266667306423187, 0.35733333230018616, 0.44999998807907104, 0.0949999988079071, 0.17233332991600037, 0.09433333575725555, 0.375, 0.6110000014305115, 0.6840000152587891, 0.7146666646003723, 0.7590000033378601, 0.750333309173584, 0.7816666960716248, 0.7860000133514404, 0.7826666831970215, 0.7873333096504211, 0.765666663646698, 0.8016666769981384, 0.8069999814033508, 0.8019999861717224, 0.8113333582878113, 0.8169999718666077, 0.8196666836738586, 0.8166666626930237, 0.8199999928474426, 0.8309999704360962, 0.831333339214325, 0.82833331823349, 0.82833331823349, 0.8339999914169312, 0.8339999914169312, 0.8273333311080933, 0.8360000252723694, 0.8376666903495789, 0.8320000171661377, 0.8289999961853027, 0.8383333086967468, 0.8433333039283752, 0.8396666646003723, 0.8399999737739563, 0.8473333120346069, 0.8519999980926514, 0.8510000109672546, 0.8349999785423279, 0.82833331823349, 0.8506666421890259, 0.8433333039283752]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [27, 66, 89, 50, 85, 46], [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [0, 4, 1, 3, 2, 0, 3, 9, 8, 8, 7, 3, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [3, 1, 3, 3, 0, 2, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0], [1, 7, 6, 4], [7, 1], [64], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.7542856931686401, "mapping_values": [1, 4, 4, 2, 2, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), alpha))", "other_info": {"loss": [2.2933094495826976, 2.265604054246045, 2.23718883178458, 2.197829118793383, 2.1471543617220825, 2.077614902646991, 1.9849963380266662, 1.8795876517476595, 1.7503419611762936, 1.6255684730761306, 1.5015585543126508, 1.399241475349782, 1.3237846376968019, 1.242883007146301, 1.2018939041741818, 1.1455402280266858, 1.1098258302920625, 1.0761665589206995, 1.0472024738702004, 1.01706320359927, 0.9948229444670939, 0.9676006275979897, 0.9620549731864874, 0.9377021937873526, 0.9257422715697101, 0.9153959387643951, 0.8846361271189723, 0.8776079944694488, 0.8756837858783413, 0.8570457981829755, 0.850654150800084, 0.8391403503280038, 0.8318449666534417, 0.8203680618658609, 0.8198617690385152, 0.8071040207006676, 0.8011446705489284, 0.7959223815462987, 0.7856224476464467, 0.7812908428645231, 0.7840333938393941, 0.7709609153027925], "accuracy": [0.11438383162021637, 0.18993528187274933, 0.25056135654449463, 0.3089420199394226, 0.35781270265579224, 0.39043718576431274, 0.4227975308895111, 0.436930388212204, 0.4702152907848358, 0.495839387178421, 0.5222559571266174, 0.5449742674827576, 0.5547483563423157, 0.5756174921989441, 0.5762779116630554, 0.605468213558197, 0.6128648519515991, 0.6238277554512024, 0.6322810649871826, 0.6380926966667175, 0.6518293619155884, 0.6590939164161682, 0.6551313996315002, 0.6602826714515686, 0.6675472259521484, 0.6674151420593262, 0.6860388517379761, 0.683529257774353, 0.6823405027389526, 0.6947563290596008, 0.6956809163093567, 0.6997754573822021, 0.6988508701324463, 0.7086250185966492, 0.7016246318817139, 0.7073041796684265, 0.7092854380607605, 0.7106062769889832, 0.7121912837028503, 0.7128516435623169, 0.7141724824905396, 0.7127195596694946], "val_loss": [1.9472060884748186, 1.9218369211469377, 1.891097068786621, 1.8493033136640276, 1.792855875832694, 1.7163143498556954, 1.6168479919433594, 1.4994629791804723, 1.3698063918522425, 1.2445548943110876, 1.132854666028704, 1.039219958441598, 0.9678254468100411, 0.9064744200025286, 0.8609548466546195, 0.8231990848268781, 0.7908014569963727, 0.7642021519797189, 0.7415438038962228, 0.72187226159232, 0.7064350332532611, 0.6888340370995658, 0.6767183882849557, 0.6661903517586845, 0.6580515248434884, 0.6441865648542132, 0.6361799240112305, 0.6281481300081525, 0.619999851499285, 0.6139461312975202, 0.6091472932270595, 0.6027301039014544, 0.5973324605396816, 0.5926714284079415, 0.5874367271150861, 0.583003180367606, 0.5774199792316982, 0.5731506177357265, 0.5715646743774414, 0.5665498631341117, 0.5631351811545235, 0.5602739197867257], "val_accuracy": [0.257666677236557, 0.37533333897590637, 0.42133334279060364, 0.4466666579246521, 0.47999998927116394, 0.5193333625793457, 0.5429999828338623, 0.5616666674613953, 0.5893333554267883, 0.6000000238418579, 0.6266666650772095, 0.6463333368301392, 0.6703333258628845, 0.6806666851043701, 0.6923333406448364, 0.6959999799728394, 0.70333331823349, 0.70333331823349, 0.7103333473205566, 0.7146666646003723, 0.7196666598320007, 0.7250000238418579, 0.7243333458900452, 0.7283333539962769, 0.7250000238418579, 0.7383333444595337, 0.7403333187103271, 0.7440000176429749, 0.7486666440963745, 0.7453333139419556, 0.7456666827201843, 0.7473333477973938, 0.7546666860580444, 0.7563333511352539, 0.7573333382606506, 0.7513333559036255, 0.7639999985694885, 0.7563333511352539, 0.753333330154419, 0.7566666603088379, 0.7580000162124634, 0.7616666555404663]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 2, 2, 2, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [6, 4, 1, 3, 2, 0, 3, 9, 8, 8, 7, 3, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [4, 1, 3, 3, 0, 3, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 31, 30, 73, 40, 57, 35, 9, 54, 64], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 5, 9, 3, 0, 1, 3, 2, 2, 5], [0, 1, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 7, 5, 3, 2, 0, 1, 0, 1, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, grad), tf.math.add(sigma, alpha))))), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3024693504379345, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [6, 4, 1, 3, 2, 0, 3, 1, 8, 8, 2, 2, 7, 8, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [3, 1, 3, 3, 0, 3, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [77, 23, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0], [1, 7, 6, 4], [7, 1], [64], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 2, 28, 28, 16, 12, 1, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), grad))))), tf.math.sqrt(tf.math.add(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)))), tf.math.add(beta, grad))), tf.math.add(tf.math.add(tf.math.sqrt(beta), tf.math.add(tf.math.add(beta, alpha), grad)), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), alpha))", "other_info": {"loss": [2.3024693504379345, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [7, 5, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [6, 4, 1, 3, 2, 1, 3, 2, 1, 8, 7, 0, 7, 9, 2, 0, 8, 2, 4, 6, 5, 8, 9, 9], [3, 3, 1, 3, 0, 3, 2, 3, 1, 4, 4, 3, 1, 4, 1, 3], [50, 31, 30, 73, 40, 57, 35, 9, 54, 64], [0, 1, 1, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0], [7, 7, 6, 4], [7, 1], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07132479548454285, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [0, 4, 1, 3, 2, 0, 3, 9, 8, 8, 7, 3, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [4, 1, 3, 3, 0, 3, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06934354454278946, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [2, 4, 1, 3, 2, 1, 0, 1, 8, 8, 2, 3, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [4, 1, 3, 3, 0, 3, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0], [1, 7, 3, 4], [7, 1], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 23, 23, 14, 9, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, grad), alpha), tf.math.add(beta, grad))), tf.math.negative(tf.math.add(beta, tf.math.subtract(grad, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))))), tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad))), tf.math.multiply(tf.math.negative(alpha), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07132479548454285, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 1, 2, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [82, 66, 89, 50, 85, 46], [0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [8, 4, 1, 3, 2, 0, 3, 9, 8, 8, 7, 3, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [4, 1, 3, 3, 0, 3, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [77, 23, 30, 73, 40, 57, 35, 9, 54, 64], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 24, 24, 16, 8, 3, 7, 5, 3, 2, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.negative(grad)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, alpha))))))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.multiply(grad, tf.math.add(beta, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)))), tf.math.add(tf.math.add(beta, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.square(tf.math.add(beta, beta))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, grad), tf.math.add(sigma, alpha))))), sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07132479548454285, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [82, 66, 89, 50, 85, 46], [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [0, 4, 1, 3, 2, 6, 3, 0, 8, 8, 7, 0, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [1, 1, 3, 3, 0, 3, 3, 2, 1, 1, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [77, 23, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.negative(alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [6.7977183254358165e+22, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.17263241112232208, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 5, 5, 2, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [2, 6, 1, 3, 2, 4, 3, 9, 8, 8, 7, 3, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [4, 1, 3, 3, 0, 3, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [77, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0], [1, 7, 6, 4], [7, 1], [64], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [2, 1, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 9, 5, 2, 19, 19, 11, 8, 2, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), grad)))), tf.math.add(alpha, tf.math.subtract(tf.math.negative(tf.math.square(tf.math.square(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))))), alpha)))))), lambda shape,  alpha, beta, grad: tf.math.add(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.pow(tf.math.multiply(tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(grad))))), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(beta, tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 6, 0, 1, 5, 3, 4, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [82, 66, 53, 50, 85, 46], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [6, 4, 1, 3, 2, 0, 3, 9, 8, 8, 7, 3, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [3, 1, 3, 3, 3, 2, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0], [1, 7, 6, 4], [7, 1], [64], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [0, 1, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 8, 6, 3, 18, 18, 11, 7, 1, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))))))), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)))), tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.sqrt(grad)))))))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.sqrt(tf.math.add(grad, tf.math.add(beta, beta)))))), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), alpha))", "other_info": {"loss": [2.3019405055622366, 2.302524497275654, 2.3061259927498967, 2.3332444536624535, 2.5415285254639564, 3.4588901849234532, NaN], "accuracy": [0.10368511080741882, 0.10632677376270294, 0.10355303436517715, 0.09998679161071777, 0.09998679161071777, 0.09787346422672272, 0.09932637959718704], "val_loss": [1.973855631692069, 1.974961825779506, 1.9832260949271066, 2.0488693373543874, 2.5570130348205566, 3.693834032331194, NaN], "val_accuracy": [0.09566666930913925, 0.10366666316986084, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10366666316986084, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [1, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [6, 4, 1, 3, 2, 0, 3, 9, 8, 8, 7, 3, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [0, 1, 3, 3, 0, 3, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 5, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(grad, tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [2, 2, 1, 3, 2, 1, 2, 1, 8, 8, 2, 3, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [4, 1, 3, 3, 0, 3, 2, 2, 1, 4, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [7, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [2, 1, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 19, 19, 10, 9, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(grad)))), tf.math.add(beta, beta))))), tf.math.add(beta, beta))), alpha))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 2, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [0, 4, 1, 3, 2, 0, 3, 9, 8, 8, 7, 3, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [0, 3, 3, 3, 0, 3, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 11, 8, 2, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(tf.math.multiply(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))))), tf.math.add(alpha, tf.math.subtract(tf.math.negative(tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), alpha)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [7, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [6, 4, 1, 3, 2, 0, 3, 9, 8, 8, 7, 3, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [3, 3, 1, 3, 0, 3, 2, 3, 1, 4, 4, 3, 1, 4, 1, 3], [50, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07132479548454285, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 2, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [0, 4, 1, 3, 2, 0, 3, 9, 8, 8, 7, 3, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [4, 3, 3, 3, 0, 3, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 29, 29, 16, 13, 5, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), grad))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))))))))))))), lambda shape,  alpha, beta, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [1, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 4, 2, 3, 9, 0, 3, 9, 2, 8, 7, 3, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [3, 1, 3, 3, 0, 3, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 31, 5, 73, 40, 57, 35, 9, 54, 64], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [3, 1, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.04171428456902504, "mapping_values": [1, 4, 4, 2, 2, 1, 24, 24, 16, 8, 4, 7, 5, 3, 2, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha))), grad)))), tf.math.add(beta, tf.math.add(tf.math.multiply(grad, tf.math.add(tf.math.add(beta, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), grad)), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))), tf.math.add(grad, tf.math.square(tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, grad), tf.math.add(sigma, alpha))))), sigma)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3040004993048737, 2.3024972573782807, 2.302624869702467, 2.301485081453365, 2.301616249146195, 2.3012643731139546], "accuracy": [0.08915598690509796, 0.09153348207473755, 0.09219389408826828, 0.09008057415485382, 0.09113723784685135, 0.09034473448991776], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [5, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [2, 4, 9, 3, 2, 1, 0, 1, 8, 8, 2, 3, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [4, 1, 3, 3, 0, 3, 3, 2, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.0357142873108387, "mapping_values": [1, 2, 2, 1, 1, 0, 16, 16, 10, 6, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.subtract(tf.math.negative(tf.math.subtract(tf.math.add(beta, grad), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(grad)))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.304535277405309, 2.3046303398778267, 2.306532587782739, 2.3072774635408657, 2.3099696504882363, 2.3127627620576097], "accuracy": [0.08902391046285629, 0.0878351628780365, 0.08545766770839691, 0.08149518072605133, 0.08096684515476227, 0.07607977837324142], "val_loss": [1.9717962401253837, 1.973193781716483, 1.9745849200657435, 1.976360593523298, 1.9782511847359794, 1.9803810119628906], "val_accuracy": [0.033666666597127914, 0.026000000536441803, 0.020666666328907013, 0.019999999552965164, 0.02666666731238365, 0.03266666829586029]}}]