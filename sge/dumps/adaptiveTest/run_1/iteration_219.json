[{"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [4, 8, 2, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 2, 8, 4], [2, 1], [64], [0, 1, 0, 1, 0, 1], [3, 1, 9, 1, 2], [1, 0, 2], [15, 52, 13]], "fitness": -0.8425714373588562, "mapping_values": [1, 3, 3, 1, 2, 1, 8, 8, 5, 3, 0, 5, 4, 2, 2, 0, 5, 3, 2, 2], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.add(tf.math.negative(tf.math.negative(grad)), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, beta))), tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1657676562468104, 1.2911656601176114, 0.878471009396858, 0.7542976355823496, 0.7061721545720003, 0.6593362265227729, 0.6325662676542663, 0.5994608026721678, 0.5797626483142809, 0.5603143688930481, 0.5251728615441484, 0.517028762711321, 0.48625320022951074, 0.48046105517104726, 0.4695406355059237, 0.4503947668315838, 0.44618344596269627, 0.42523520351589916, 0.41605556831934887, 0.40730078797676716, 0.3941630127840605, 0.3789742903237991, 0.3713687457908902, 0.37076496989767016, 0.3500220694790395, 0.35333152495402353, 0.34198516358899056, 0.34468335255718724, 0.33955978348569754, 0.3205176790424106, 0.3153339498440792, 0.3116388220938835, 0.3023746133071084, 0.30051979030505965, 0.2884668228003044, 0.29325229327093894, 0.28466515526669517, 0.2824925112568424, 0.2759590357750666, 0.2705512037760294, 0.27337260609447145, 0.2684468971330413, 0.25613290804441124], "accuracy": [0.27222296595573425, 0.5560691952705383, 0.684982180595398, 0.7226257920265198, 0.7308149337768555, 0.7553823590278625, 0.7618544697761536, 0.7705719470977783, 0.7817989587783813, 0.7887993454933167, 0.8072909712791443, 0.8070268034934998, 0.8216879963874817, 0.8170651197433472, 0.8249900937080383, 0.8315942287445068, 0.8384625315666199, 0.8433496356010437, 0.8495575189590454, 0.8498216867446899, 0.852331280708313, 0.8607845902442932, 0.8610487580299377, 0.8627657890319824, 0.8677849769592285, 0.8681812286376953, 0.8683133125305176, 0.8697662353515625, 0.8741249442100525, 0.8798044919967651, 0.8823140859603882, 0.8825782537460327, 0.8817857503890991, 0.8899748921394348, 0.8873332738876343, 0.889578640460968, 0.8906353116035461, 0.8943336606025696, 0.8928807377815247, 0.8965790271759033, 0.8945978283882141, 0.8996169567108154, 0.9009377956390381], "val_loss": [1.2990553038460868, 0.6986134733472552, 0.5711603675569806, 0.5469297851834979, 0.508655343736921, 0.4927121911730085, 0.47461043085370747, 0.4600407566343035, 0.43827543939862934, 0.42363028866904123, 0.42117064339773996, 0.40066578558513094, 0.3899586967059544, 0.3850805333682469, 0.3738354189055307, 0.37006698335920063, 0.36560635907309397, 0.35708819116864887, 0.34379200424466816, 0.34432779039655415, 0.3438496845109122, 0.33759078809193205, 0.32956807953970774, 0.3359676940100534, 0.32624679803848267, 0.3284073386873518, 0.3296641707420349, 0.3241772311074393, 0.3260213392121451, 0.32930039508002146, 0.32914209365844727, 0.3208151970590864, 0.31528912271772114, 0.31397351196834017, 0.31812277010508944, 0.3277543783187866, 0.313777710710253, 0.3139615144048418, 0.31592272009168354, 0.31654817717415945, 0.3118272508893694, 0.31341253008161274, 0.31409421137401033], "val_accuracy": [0.5613333582878113, 0.7059999704360962, 0.7519999742507935, 0.7590000033378601, 0.7696666717529297, 0.7796666622161865, 0.7893333435058594, 0.8050000071525574, 0.8109999895095825, 0.8209999799728394, 0.8199999928474426, 0.8320000171661377, 0.8366666436195374, 0.8426666855812073, 0.847000002861023, 0.8523333072662354, 0.8513333201408386, 0.8526666760444641, 0.8566666841506958, 0.8586666584014893, 0.8543333411216736, 0.8586666584014893, 0.8656666874885559, 0.8640000224113464, 0.8663333058357239, 0.862333357334137, 0.8683333396911621, 0.8683333396911621, 0.8656666874885559, 0.8683333396911621, 0.8616666793823242, 0.8709999918937683, 0.8709999918937683, 0.8730000257492065, 0.874666690826416, 0.8663333058357239, 0.875, 0.878000020980835, 0.871666669845581, 0.8733333349227905, 0.875, 0.8756666779518127, 0.8703333139419556]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [29, 32, 5, 49, 25], [1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [4, 8, 8, 0, 9, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 62], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 1, 1, 0], [5, 9, 8, 4], [2, 1], [64], [0, 1, 0, 1, 0, 1], [3, 1, 9, 1, 2], [1, 0, 2], [1, 13, 13]], "fitness": -0.4422857165336609, "mapping_values": [1, 17, 17, 10, 7, 4, 6, 6, 5, 1, 1, 1, 1, 0, 1, 0, 5, 3, 2, 2], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.square(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(alpha))), tf.math.negative(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3021684013510804, 2.301926565963862, 2.3005678844867585, 2.299646557251287, 2.3014896035651016, 2.2993389638092823, 2.3006422460165794, 2.297030248693613, 2.297290320661578, 2.2970628897118104, 2.295006643496075, 2.2954117071201865, 2.2952017141071845, 2.2949577040124987, 2.2919541413301268, 2.2917621000300246, 2.2924757104555473, 2.290910928067656, 2.289532210738384, 2.286405848537249, 2.2880916528383093, 2.2876653685120703, 2.2856953513778167, 2.284911942189128, 2.2839492049750683, 2.281389731426186, 2.281638207326649, 2.28010755463236, 2.2792783731388266, 2.278333437708879, 2.2770784652275635, 2.2744982204794995, 2.2749806455318184, 2.2745172929581146, 2.2726619100652554, 2.2719676661185932, 2.2696483821097995, 2.2699850701763014, 2.267102588893652, 2.2677044388231047, 2.264965487446027, 2.2637048821643893, 2.2640933038819626, 2.261928013239901, 2.261611658111933, 2.2582189440333598, 2.2593953634659374, 2.2564964230191893, 2.255637456869736, 2.2525498806887048, 2.2527111666219235, 2.2521627641798028, 2.2501150440341524, 2.250028177920649, 2.246421829647376, 2.246162709527248, 2.2467033594449153, 2.2447080958898846, 2.243323420237525, 2.2423744378009918, 2.24187195349867, 2.2384098626367166, 2.2365955143493825, 2.2347215098034767, 2.237544303682927, 2.233286786309291, 2.231920743804204, 2.230873545981858, 2.2283703474997845, 2.228178442933729, 2.2262662722371305, 2.2231479046004967, 2.223005446964456, 2.2216606967091135, 2.2191645746391053, 2.217805087338066, 2.216738553992541, 2.214470933945172, 2.2139398425624606, 2.212270311533956, 2.2109954779127, 2.2092172665886354, 2.2068545848875156, 2.2054314298431996, 2.2025360587156206, 2.203092615318777, 2.200321890847747, 2.197359912541281, 2.1939966664448423, 2.194082390504695, 2.1914954203120818, 2.191295350689095, 2.1895435988517282, 2.1850331469832978, 2.1867328436461895, 2.1840750814318706, 2.18047244919447, 2.1805652471785972, 2.175601348995359, 2.1738570963686104], "accuracy": [0.08928807079792023, 0.08400475233793259, 0.09285431355237961, 0.09470347315073013, 0.09100515395402908, 0.09800554811954498, 0.09496764093637466, 0.10170386731624603, 0.10738343745470047, 0.10236428678035736, 0.10381719470024109, 0.10870426893234253, 0.10460969805717468, 0.10949676483869553, 0.11913882195949554, 0.11781799048185349, 0.1150442510843277, 0.11689341068267822, 0.12561088800430298, 0.12812046706676483, 0.1302337795495987, 0.1282525360584259, 0.13829085230827332, 0.13697001338005066, 0.1344604343175888, 0.14053626358509064, 0.14436666667461395, 0.1418570876121521, 0.1530841439962387, 0.15110288560390472, 0.15770703554153442, 0.15915995836257935, 0.15797120332717896, 0.16800950467586517, 0.16893409192562103, 0.1710474193096161, 0.1814819723367691, 0.17884030938148499, 0.1806894689798355, 0.1822744756937027, 0.1838594675064087, 0.19442610442638397, 0.18570862710475922, 0.19416193664073944, 0.1962752640247345, 0.2110685557126999, 0.20604939758777618, 0.20657773315906525, 0.21120063960552216, 0.22018226981163025, 0.2118610441684723, 0.22216351330280304, 0.22057852149009705, 0.2188614457845688, 0.2312772423028946, 0.22837141156196594, 0.2312772423028946, 0.23061682283878326, 0.23286223411560059, 0.24105137586593628, 0.23523972928524017, 0.24157971143722534, 0.2495046854019165, 0.2542596757411957, 0.2479196935892105, 0.25122177600860596, 0.2537313401699066, 0.2645621597766876, 0.27341169118881226, 0.26139214634895325, 0.26641130447387695, 0.2715625464916229, 0.27077004313468933, 0.2697133719921112, 0.282129168510437, 0.28780874609947205, 0.2822612524032593, 0.2822612524032593, 0.28582748770713806, 0.28199708461761475, 0.2903183102607727, 0.2900541424751282, 0.3016774654388428, 0.29520538449287415, 0.29705455899238586, 0.29863953590393066, 0.2965262234210968, 0.30563995242118835, 0.3073570132255554, 0.30947035551071167, 0.31462156772613525, 0.3139611780643463, 0.3093382716178894, 0.31501781940460205, 0.31462156772613525, 0.3151499032974243, 0.3214899003505707, 0.32426363229751587, 0.32426363229751587, 0.33166027069091797], "val_loss": [1.9708634104047502, 1.9706640924726213, 1.9703529221670968, 1.9699465206691198, 1.969459397452218, 1.9689038140433175, 1.9682938030787878, 1.9676344735281808, 1.96693297794887, 1.9661974225725447, 1.9654317583356584, 1.964639663696289, 1.9638264519827706, 1.9629954610552107, 1.962148598262242, 1.9612828663417272, 1.9604006494794572, 1.9595084871564592, 1.9586050169808524, 1.957690715789795, 1.9567654473440987, 1.9558332988194056, 1.9548931121826172, 1.9539470672607422, 1.9529945509774345, 1.9520322254725866, 1.9510624068123954, 1.9500863892691476, 1.9491027423313685, 1.9481135777064733, 1.947115353175572, 1.9461090224129813, 1.9450926780700684, 1.944068772452218, 1.9430364200047083, 1.9419988904680525, 1.940953186580113, 1.939899512699672, 1.9388413429260254, 1.9377760205950056, 1.9367013658796037, 1.935619558606829, 1.9345275333949499, 1.9334274700709753, 1.9323183468409948, 1.9311979157584054, 1.9300723757062639, 1.9289349828447615, 1.9277849197387695, 1.9266230719430106, 1.9254517555236816, 1.9242726734706335, 1.9230822154453822, 1.9218875340053014, 1.9206769806998116, 1.9194543021065849, 1.918229103088379, 1.9169926643371582, 1.915747914995466, 1.914494173867362, 1.9132303510393416, 1.911949293954032, 1.9106579508100237, 1.909343651362828, 1.908024856022426, 1.9066965239388602, 1.9053551810128349, 1.9040015765598841, 1.9026332582746233, 1.9012566293988908, 1.8998686926705497, 1.8984595707484655, 1.8970375742231096, 1.8956010001046317, 1.8941480772835868, 1.8926735605512346, 1.8911821501595634, 1.889671461922782, 1.8881456511361259, 1.8866126196725028, 1.8850696427481515, 1.8835056849888392, 1.881920678274972, 1.880317074911935, 1.8786932400294714, 1.8770493098667689, 1.8753881454467773, 1.87370422908238, 1.8719990594046456, 1.8702765192304338, 1.868523120880127, 1.8667511940002441, 1.8649535860334123, 1.8631323405674525, 1.8612969262259347, 1.8594495909554618, 1.8575694901602608, 1.8556667736598425, 1.8537381035940987, 1.8517868859427316], "val_accuracy": [0.03799999877810478, 0.04066666588187218, 0.04233333468437195, 0.04399999976158142, 0.045666664838790894, 0.04899999871850014, 0.054999999701976776, 0.05966666713356972, 0.06400000303983688, 0.06933332979679108, 0.07400000095367432, 0.07999999821186066, 0.0860000029206276, 0.09333333373069763, 0.10333333164453506, 0.11233333498239517, 0.11999999731779099, 0.12966667115688324, 0.140666663646698, 0.1496666669845581, 0.1586666703224182, 0.16633333265781403, 0.17633333802223206, 0.1836666613817215, 0.19300000369548798, 0.20233333110809326, 0.21166667342185974, 0.2213333398103714, 0.22733333706855774, 0.23866666853427887, 0.24799999594688416, 0.25699999928474426, 0.2683333456516266, 0.27399998903274536, 0.2800000011920929, 0.28833332657814026, 0.2953333258628845, 0.30133333802223206, 0.3076666593551636, 0.312666654586792, 0.3226666748523712, 0.3266666531562805, 0.33266666531562805, 0.3373333215713501, 0.3426666557788849, 0.34833332896232605, 0.35199999809265137, 0.3566666543483734, 0.3616666793823242, 0.367333322763443, 0.37166666984558105, 0.375, 0.3766666650772095, 0.3773333430290222, 0.3786666691303253, 0.3813333213329315, 0.382666677236557, 0.3853333294391632, 0.3863333463668823, 0.3876666724681854, 0.38999998569488525, 0.39366665482521057, 0.39800000190734863, 0.3996666669845581, 0.4026666581630707, 0.40400001406669617, 0.40533334016799927, 0.4050000011920929, 0.406333327293396, 0.40799999237060547, 0.40933331847190857, 0.4113333225250244, 0.41233333945274353, 0.41466665267944336, 0.4169999957084656, 0.41866666078567505, 0.4206666648387909, 0.42233332991600037, 0.4233333468437195, 0.4256666600704193, 0.4259999990463257, 0.42766666412353516, 0.42899999022483826, 0.43033334612846375, 0.43166667222976685, 0.4339999854564667, 0.4350000023841858, 0.437666654586792, 0.4386666715145111, 0.43933331966400146, 0.44066667556762695, 0.4423333406448364, 0.4436666667461395, 0.445333331823349, 0.44600000977516174, 0.4466666579246521, 0.4483333230018616, 0.4490000009536743, 0.44999998807907104, 0.45100000500679016]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [29, 32, 5, 49, 25], [1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [4, 8, 9, 9, 9, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 17], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 1, 1, 0], [5, 9, 8, 4], [1, 4, 0], [64], [0, 1, 0, 1, 0, 1], [5, 1, 9, 1, 2], [1, 0, 2], [15, 45, 13]], "fitness": -0.10428571701049805, "mapping_values": [1, 3, 3, 1, 2, 1, 4, 4, 3, 1, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(grad, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, alpha), tf.math.sqrt(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.square(alpha)", "other_info": {"loss": [2.3021893123704302, 2.302069919110289, 2.3009180452971334, 2.3002622240585753, 2.302379552478158, 2.3003692557672863, 2.3016215063215264, 2.298398001602439, 2.298877436109207, 2.298769844332549, 2.2973577873880964, 2.297942766565704, 2.2977519048250676, 2.298379063905427, 2.297365169105686, 2.2981020743269664, 2.2990869055838554, 2.299321766117576, 2.2991337755085093], "accuracy": [0.08928807079792023, 0.08387266844511032, 0.09232597798109055, 0.0940430611371994, 0.08875974267721176, 0.09602430462837219, 0.09417514503002167, 0.09866596013307571, 0.10130762308835983, 0.09853387624025345, 0.10527011007070541, 0.10434553027153015, 0.1088363528251648, 0.11174217611551285, 0.11055342853069305, 0.10896842926740646, 0.10289261490106583, 0.10487385839223862, 0.10249637067317963], "val_loss": [1.9709345272609167, 1.97090516771589, 1.9708194732666016, 1.9706644330705916, 1.9704224722726005, 1.9701040131705148, 1.9696721349443709, 1.9691858972821916, 1.9687200273786272, 1.9683550425938197, 1.9681682586669922, 1.9680402619498116, 1.9680675779070174, 1.9682983670915877, 1.9687772478376115, 1.969489438193185, 1.9701197487967355, 1.9706518309456962, 1.9709761483328683], "val_accuracy": [0.03766666725277901, 0.038333334028720856, 0.03999999910593033, 0.04066666588187218, 0.044333335012197495, 0.04866666719317436, 0.052000001072883606, 0.058666665107011795, 0.06800000369548798, 0.0793333351612091, 0.09000000357627869, 0.10366666316986084, 0.11033333092927933, 0.11166666448116302, 0.11133333295583725, 0.10366666316986084, 0.10133333504199982, 0.08833333104848862, 0.0806666687130928]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [1, 8, 0, 0, 8, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [46], [0, 0, 0, 1, 0, 0, 1, 1], [1, 0, 1, 1, 0], [5, 9, 8, 4], [2, 1], [64], [1, 1, 0, 1, 0, 1], [9, 1, 9, 1, 2], [1, 0, 2], [15, 77, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 3, 2, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.sqrt(alpha)), tf.math.negative(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08677849918603897, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [2, 1, 2, 6, 0, 9, 3, 9], [1, 3, 2, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 1, 0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [1, 2, 8, 4], [1, 4, 0], [64], [0, 1, 1, 1, 0, 1], [3, 1, 9, 1, 2], [1, 3, 2], [1, 92, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 10, 10, 6, 4, 1, 5, 4, 2, 2, 0, 3, 1, 2, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.divide_no_nan(tf.math.negative(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.add(beta, grad)), beta)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, tf.math.add(tf.math.add(sigma, alpha), tf.math.add(sigma, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, sigma)", "other_info": {"loss": [2.302037956251397, 2.1070727689773827e+17, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09060890227556229, 0.10632677376270294, 0.10170386731624603, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9782228469848633, NaN, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09566666930913925, 0.10100000351667404, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1], [4, 8, 2, 0, 4, 9, 3, 9], [1, 0, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 78], [0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 2, 8, 4], [1, 4, 0], [80], [0, 1, 0, 1, 0, 1, 1, 1, 1], [3, 1, 1, 1, 2], [1, 0, 2, 2, 2], [63, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 9, 9, 6, 3, 2, 3, 1, 1, 0, 0, 7, 3, 4, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), tf.math.subtract(beta, beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [29, 32, 5, 49, 25], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [4, 8, 0, 9, 9, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [14, 2], [0, 0, 1, 0, 1, 0, 1, 1], [0, 0, 0, 1, 0], [7, 2, 8, 4], [2, 1], [64], [0, 0, 0, 1, 1, 1], [3, 1, 9, 1, 2], [1, 0, 2], [7, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 5, 5, 5, 0, 2, 6, 4, 3, 1, 0, 5, 3, 2, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)))))), tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.sqrt(sigma)))), tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), alpha), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.2997690614156907, 2.302470028408294, 2.3025959881462708, 2.302596525225767, 2.302596254938267, 2.3026015078308184, 2.302610648479822], "accuracy": [0.12495046854019165, 0.10381719470024109, 0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09285431355237961], "val_loss": [1.9735591070992606, 1.9736576761518205, 1.9736646243504115, 1.9736645562308175, 1.973674706050328, 1.973672321864537, 1.9736758640834264], "val_accuracy": [0.09733333438634872, 0.09799999743700027, 0.0949999988079071, 0.0949999988079071, 0.0949999988079071, 0.0949999988079071, 0.09566666930913925]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [2, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [4, 4, 2, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [1, 0, 1, 0, 1, 0, 1, 1], [1, 0, 1, 1, 0], [7, 2, 8, 4], [2, 1], [64], [0, 1, 0, 1, 0, 1], [3, 8, 9, 1, 2], [1, 0, 2], [15, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 8, 8, 4, 4, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.pow(tf.math.add(tf.math.negative(grad), grad), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.sqrt(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3083389973391664, 2.344219186916611, 2.4141105298967, 2.5790984151606167, 3.441373936236574, 243.41045855228785, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07832518965005875, 0.031039493158459663, 0.0165103692561388, 0.008585391566157341, 0.016114119440317154, 0.09272222965955734, 0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9910954747881209, 2.038766179765974, 2.1281956263950894, 2.378901890345982, 5.569716044834682, 31726.49776785714, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.00566666666418314, 0.004333333112299442, 0.004999999888241291, 0.008333333767950535, 0.07533333450555801, 0.10066666454076767, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [4, 8, 0, 0, 9, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [10, 62], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 1, 1, 0], [5, 9, 8, 4], [2, 1], [64], [0, 1, 0, 1, 0, 1], [9, 1, 9, 1, 2], [1, 0, 2], [15, 77, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302598243218844, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [29, 32, 5, 49, 25], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [4, 8, 2, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [5, 9, 8, 4], [1, 4, 0], [64], [1, 1, 1, 1, 0, 1], [3, 1, 9, 1, 2], [1, 2, 2], [94, 32, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 2, 2, 0, 1, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08717474341392517, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [4, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1], [4, 8, 2, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 1, 1, 0], [5, 9, 8, 4], [2, 1], [64], [0, 1, 0, 1, 0, 1], [3, 4, 9, 1, 2], [1, 0, 2], [15, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 8, 8, 6, 2, 1, 1, 1, 0, 1, 0, 5, 3, 2, 2], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, grad), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.add(tf.math.negative(tf.math.negative(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.pow(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [9, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [4, 8, 2, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [5, 9, 8, 4], [2, 1], [64], [0, 1, 0, 1, 0, 1], [3, 1, 9, 1, 2], [1, 0, 2], [4, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 8, 8, 6, 2, 1, 2, 1, 1, 0, 0, 5, 3, 2, 2], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.negative(tf.math.negative(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))), alpha))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302603596693741, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1], [4, 3, 2, 0, 5, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 0, 1, 0, 1, 0, 1, 1], [0, 0, 1, 1, 0], [7, 2, 8, 4], [2, 4], [64], [0, 1, 1, 1, 0, 1], [3, 4, 9, 1, 2], [2, 0, 2], [15, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 9, 9, 6, 3, 1, 5, 3, 2, 1, 0, 3, 1, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.multiply(tf.math.add(tf.math.negative(tf.math.square(grad)), tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, beta))), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [2, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [29, 32, 5, 49, 25], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [4, 8, 2, 2, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 2, 8, 4], [2, 1], [64], [0, 1, 0, 1, 1, 1], [3, 1, 9, 1, 2], [1, 0, 2], [15, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 4, 9, 9, 5, 4, 0, 3, 1, 1, 0, 0, 5, 2, 3, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.square(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), grad)), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [4, 3, 2, 0, 9, 9, 3, 9], [2, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [9, 2, 8, 4], [2, 1], [64], [0, 1, 0, 1, 0, 1], [3, 1, 9, 1, 2], [1, 0, 2], [15, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 17, 17, 10, 7, 4, 8, 8, 4, 4, 0, 1, 1, 1, 0, 1, 5, 3, 2, 2], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.square(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(grad))), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302190216477867, 2.302088801949929, 2.3009965172879623, 2.3004626881696795, 2.302798486199944, 2.301204161070215], "accuracy": [0.08928807079792023, 0.08374059200286865, 0.09232597798109055, 0.09351472556591034, 0.08875974267721176, 0.09391097724437714], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [60, 32, 5, 49, 25], [1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 3, 2, 9, 9, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 8], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 1, 1, 0], [5, 9, 8, 4], [2, 1], [64], [0, 1, 0, 1, 0, 1], [3, 3, 9, 1, 2], [1, 0, 2], [15, 24, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 5, 3, 2, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.multiply(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302203903770119, 2.3021931849796977, 2.301280895606512, 2.3010235012262537, 2.30373457243036, 2.3025985084677796], "accuracy": [0.08928807079792023, 0.08347642421722412, 0.09140139818191528, 0.09259014576673508, 0.0866464152932167, 0.09259014576673508], "val_loss": [1.9709865025111608, 1.9711179052080428, 1.9713343211582728, 1.9716343879699707, 1.9720193999154227, 1.9724901063101632], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.036666665226221085, 0.03566666692495346, 0.03466666489839554, 0.03333333507180214]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [2, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [18, 32, 5, 49, 25], [1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], [4, 8, 2, 9, 9, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 26], [0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [5, 9, 8, 4], [2, 1], [64], [1, 1, 0, 1, 0, 1], [3, 1, 9, 1, 2], [1, 0, 2], [1, 32, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 17, 17, 10, 7, 4, 3, 3, 1, 2, 0, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.square(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, alpha), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.302190216477867, 2.302088801949929, 2.3009965172879623, 2.3004626881696795, 2.302798486199944, 2.301204161070215], "accuracy": [0.08928807079792023, 0.08374059200286865, 0.09232597798109055, 0.09351472556591034, 0.08875974267721176, 0.09391097724437714], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [13, 32, 5, 49, 25], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], [4, 8, 2, 9, 9, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [74, 26], [0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [5, 9, 8, 4], [2, 1], [64], [0, 0, 0, 1, 0, 1], [5, 1, 9, 1, 2], [1, 0, 2], [1, 32, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 3, 3, 1, 2, 1, 3, 3, 1, 2, 0, 2, 1, 1, 0, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.subtract(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), alpha))", "other_info": {"loss": [2.3021899600779108, 2.302086692239945, 2.300991582612257, 2.3004534889788535, 2.3027829169723195, 2.301182209240872], "accuracy": [0.08928807079792023, 0.08374059200286865, 0.09245806187391281, 0.09351472556591034, 0.08875974267721176, 0.09377889335155487], "val_loss": [1.970938069479806, 1.9709359577723913, 1.9709327561514718, 1.970928396497454, 1.9709228788103377, 1.9709160668509347], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [29, 32, 5, 49, 25], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [4, 8, 2, 4, 9, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [45], [0, 0, 1, 0, 1, 0, 1, 1], [0, 0, 0, 1, 0], [1, 2, 8, 4], [1, 4, 0], [64], [0, 1, 1, 1, 0, 1], [3, 1, 9, 1, 2], [1, 0, 2], [15, 45, 13]], "fitness": -0.04085714370012283, "mapping_values": [1, 17, 17, 10, 7, 4, 8, 8, 4, 4, 0, 6, 4, 3, 1, 0, 3, 1, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.square(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.add(grad, tf.math.pow(grad, tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.sqrt(sigma)))), tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.302226249678197, 2.3023551332637258, 2.30169901610397, 2.3017972080919487, 2.3049359840251484, 2.304248590668384], "accuracy": [0.08928807079792023, 0.08308017253875732, 0.09074098616838455, 0.09100515395402908, 0.08360850811004639, 0.08915598690509796], "val_loss": [1.9710627964564733, 1.9713901792253767, 1.9718992369515556, 1.9725617681230818, 1.9733563831874303, 1.9742614201136999], "val_accuracy": [0.03766666725277901, 0.035999998450279236, 0.03500000014901161, 0.03333333507180214, 0.028333334252238274, 0.025333333760499954]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [29, 32, 5, 49, 25], [0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1], [3, 8, 2, 0, 9, 9, 3, 9], [3, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 26], [0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [1, 2, 8, 4], [4, 1], [64], [0, 1, 0, 1, 0, 1], [3, 2, 9, 1, 2], [1, 0, 2], [15, 24, 13]], "fitness": -0.036571428179740906, "mapping_values": [1, 3, 3, 1, 2, 1, 3, 3, 1, 2, 0, 3, 1, 1, 0, 0, 5, 3, 2, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.add(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302448003960638, 2.303998733224996, 2.30602258071451, 2.3100439899113545, 2.3182576084023596, 2.3235321217177805], "accuracy": [0.08889182657003403, 0.08030643314123154, 0.08017434924840927, 0.07555144280195236, 0.0606260746717453, 0.056531500071287155], "val_loss": [1.9718266214643205, 1.974158695765904, 1.9777849061148507, 1.9825755528041296, 1.9884420803615026, 1.9952970232282365], "val_accuracy": [0.03533333167433739, 0.025333333760499954, 0.014999999664723873, 0.009333333000540733, 0.007666666526347399, 0.006000000052154064]}}]