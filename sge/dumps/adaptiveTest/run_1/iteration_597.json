[{"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 4, 8, 2, 2, 1, 3, 9, 8, 3, 7, 2, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [0, 2, 3, 3, 0, 3, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3], [8, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8391428589820862, "mapping_values": [1, 4, 4, 2, 2, 1, 14, 14, 7, 7, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.pow(tf.math.add(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), grad)))))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.1111919980684624, 1.8871232729703837, 1.0966159474533217, 0.908529377396175, 0.7352575432150481, 0.6676122174759299, 0.6554204370477621, 0.6327683088597117, 0.6000005380982311, 0.5590522327065358, 0.5420999776858852, 0.5225431475625487, 0.48901350096531393, 0.5020727295216442, 0.4942486651459264, 0.4716323015594117, 0.471299299832742, 0.4562960094850392, 0.4337470803152474, 0.45953033413979605, 0.4121579341742939, 0.41742621378938927, 0.4102068644126708, 0.4061631457664869, 0.3983195458562572, 0.3851758947209943, 0.377241318531481, 0.37688491776981187, 0.3891578894155278, 0.36749477975986666, 0.36513974991031783, 0.35847856991043214, 0.3447617262251515, 0.3303156367083267, 0.32305725926752055, 0.3145184047099952, 0.3202720404757705, 0.3252834412659857, 0.3145565234627533, 0.30153759530254753, 0.28916908413459125, 0.3218258365766326, 0.28714795942241017], "accuracy": [0.32241448760032654, 0.3928146958351135, 0.5937128663063049, 0.6782459616661072, 0.7226257920265198, 0.752212405204773, 0.7512878179550171, 0.7648923397064209, 0.7712323069572449, 0.7909126877784729, 0.796328067779541, 0.8000264167785645, 0.8171972036361694, 0.8067626357078552, 0.8140271902084351, 0.826310932636261, 0.8231409192085266, 0.8230088353157043, 0.8359529972076416, 0.8296129703521729, 0.8466516733169556, 0.8388587832450867, 0.8441421389579773, 0.8453308939933777, 0.850350022315979, 0.8578787446022034, 0.8576145768165588, 0.8595958352088928, 0.8545766472816467, 0.8628978729248047, 0.8601241707801819, 0.86553955078125, 0.8671245574951172, 0.878879964351654, 0.8805969953536987, 0.8829745054244995, 0.8778232932090759, 0.8799365758895874, 0.8805969953536987, 0.8836349248886108, 0.8953903317451477, 0.8780874609947205, 0.8911636471748352], "val_loss": [1.5886352062225342, 0.8610118627548218, 0.7253640208925519, 0.6237546716417585, 0.5305571385792324, 0.4837016889027187, 0.5133369309561593, 0.4714029686791556, 0.4578840562275478, 0.451871429170881, 0.462759120123727, 0.3984208106994629, 0.3920610887663705, 0.42652513299669537, 0.40496339968272616, 0.39459418398993357, 0.3832689012799944, 0.3791261485644749, 0.44070922476904734, 0.3622446911675589, 0.36119272879191805, 0.3802861145564488, 0.3881618635995047, 0.36948532717568533, 0.35080987215042114, 0.35664860691343037, 0.3570167337145124, 0.3670943634850638, 0.33687271390642437, 0.33840387208121164, 0.344168952533177, 0.341701260634831, 0.34348708391189575, 0.3444730043411255, 0.34080258437565397, 0.33113038539886475, 0.3481247510228838, 0.31939079080309185, 0.3280471478189741, 0.324699376310621, 0.35250880888530184, 0.32262453862598967, 0.3272762639181955], "val_accuracy": [0.43666666746139526, 0.6066666841506958, 0.6926666498184204, 0.7176666855812073, 0.7680000066757202, 0.7856666445732117, 0.7666666507720947, 0.7889999747276306, 0.7926666736602783, 0.8053333163261414, 0.7846666574478149, 0.8263333439826965, 0.8333333134651184, 0.7993333339691162, 0.8246666789054871, 0.8220000267028809, 0.840666651725769, 0.8320000171661377, 0.7873333096504211, 0.8443333506584167, 0.8493333458900452, 0.8433333039283752, 0.8363333344459534, 0.8403333425521851, 0.8519999980926514, 0.8489999771118164, 0.8539999723434448, 0.847000002861023, 0.8506666421890259, 0.8566666841506958, 0.859000027179718, 0.859333336353302, 0.8573333621025085, 0.8586666584014893, 0.8603333234786987, 0.8666666746139526, 0.8533333539962769, 0.8703333139419556, 0.8659999966621399, 0.8690000176429749, 0.8500000238418579, 0.8659999966621399, 0.8659999966621399]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [3, 5, 2, 5, 9, 1, 3, 2, 8, 3, 7, 2, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [5, 2, 2, 3, 3, 3, 1, 2, 1, 4, 4, 3, 1, 4, 1, 3], [8, 26, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0], [6, 1, 6, 5], [7, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8382856845855713, "mapping_values": [1, 4, 4, 2, 2, 1, 7, 7, 5, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.square(tf.math.add(beta, grad)), tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))), tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.1249311549426415, 1.753729853710683, 1.3157470003173903, 0.8213363719055792, 0.6807795968415983, 0.6239846596281998, 0.6282320253176066, 0.598885063167104, 0.5466308714518096, 0.5184112923051766, 0.5011815684598435, 0.47819924330541314, 0.47691239980485506, 0.4766719177209816, 0.4555415226688569, 0.43641691589084647, 0.4442542276173346, 0.42730204756501455, 0.42296900438311363, 0.4096666206662933, 0.3908818923266588, 0.39047790965966545, 0.3903344312891622, 0.4007306962264543, 0.37830454579528294, 0.3578275544784167], "accuracy": [0.3004887104034424, 0.43204331398010254, 0.5448421835899353, 0.6946242451667786, 0.7323999404907227, 0.7604015469551086, 0.7609298825263977, 0.776251494884491, 0.7905164361000061, 0.8034605979919434, 0.8112534880638123, 0.8207634687423706, 0.8206313848495483, 0.8207634687423706, 0.8290846943855286, 0.8356888294219971, 0.8315942287445068, 0.8372738361358643, 0.8405758738517761, 0.846387505531311, 0.8520671129226685, 0.8519350290298462, 0.8531237840652466, 0.8436138033866882, 0.8602562546730042, 0.8663320541381836], "val_loss": [1.7433767999921526, 1.530106816973005, 0.6112225225993565, 0.5461124692644391, 0.5143329075404576, 0.49090286663600374, 0.5123763765607562, 0.44403702872140066, 0.4312666484287807, 0.4396768978663853, 0.3890898312841143, 0.3797402211597988, 0.3807512862341745, 0.3773901121956961, 0.3690687417984009, 0.3741568071501596, 0.37344439540590557, 0.3611674904823303, 0.3888084718159267, 0.34059745924813406, 0.3373678071158273, 0.36334225109645296, 0.4139544793537685, 0.35601738521030973, 0.3420872262545994, 0.3826793261936733], "val_accuracy": [0.46033334732055664, 0.3583333194255829, 0.7273333072662354, 0.750333309173584, 0.7666666507720947, 0.7716666460037231, 0.7630000114440918, 0.8019999861717224, 0.800000011920929, 0.809333324432373, 0.8363333344459534, 0.8416666388511658, 0.8353333473205566, 0.8356666564941406, 0.8426666855812073, 0.8246666789054871, 0.8416666388511658, 0.8443333506584167, 0.8190000057220459, 0.8569999933242798, 0.8600000143051147, 0.8426666855812073, 0.8173333406448364, 0.8510000109672546, 0.8560000061988831, 0.8496666550636292]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 6, 2, 2, 6, 1, 1, 9, 8, 3, 7, 2, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [0, 2, 3, 3, 0, 3, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3], [8, 59, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8342857360839844, "mapping_values": [1, 4, 4, 2, 2, 1, 15, 15, 8, 7, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), grad)), tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), grad)))))), tf.math.add(beta, grad))), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.1249937792306786, 1.7511366697555015, 1.2836627302751125, 0.8262453097252247, 0.6879306003213197, 0.6483599400602201, 0.6108265953560893, 0.5866445789342197, 0.5828716501489276, 0.5193816386650362, 0.5076393384140527, 0.48611977429138653, 0.47782078257420785, 0.4638172530101322, 0.4682158591244687, 0.4326382183112237], "accuracy": [0.30022454261779785, 0.4295337498188019, 0.5392946600914001, 0.6960771083831787, 0.7339849472045898, 0.7530049085617065, 0.7685906887054443, 0.7794214487075806, 0.7792893648147583, 0.8043851256370544, 0.8112534880638123, 0.8208954930305481, 0.8219521641731262, 0.8256505131721497, 0.8248580098152161, 0.8383304476737976], "val_loss": [1.7438694408961706, 1.3694851739065987, 0.7883674928120205, 0.5788423504148211, 0.5202865941183907, 0.48244590418679373, 0.48008765493120464, 0.45758186067853657, 0.4294923458780561, 0.4378452641623361, 0.3930131196975708, 0.39294942787715365, 0.37646128450121197, 0.3816984551293509, 0.3754920022828238, 0.3970451184681484], "val_accuracy": [0.4623333215713501, 0.3633333444595337, 0.6663333177566528, 0.7419999837875366, 0.7663333415985107, 0.7979999780654907, 0.7793333530426025, 0.7923333048820496, 0.809333324432373, 0.8109999895095825, 0.8410000205039978, 0.8309999704360962, 0.8396666646003723, 0.8336666822433472, 0.8403333425521851, 0.8036666512489319]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [6, 4, 8, 9, 2, 1, 3, 9, 8, 3, 7, 2, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [0, 2, 1, 3, 0, 3, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3], [8, 52, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0], [6, 1, 6, 5], [7, 1], [64], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8237142562866211, "mapping_values": [1, 4, 4, 2, 2, 1, 6, 6, 4, 2, 2, 1, 0, 0, 0, 0, 3, 1, 2, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.pow(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))), beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, beta)", "other_info": {"loss": [2.11119869192751, 1.8849174136955504, 1.1114384291225878, 0.8073438436379443, 0.7247866598480587, 0.6628633083574146, 0.6359715476295558, 0.6484762890983519, 0.5942365410006388, 0.5661617136744775, 0.5465593138674483, 0.5343838853370623, 0.4950491279391187, 0.49870630037105945, 0.48441825205419103, 0.46708974331566183, 0.4633231438453313, 0.44506843800022616, 0.4339294627696579], "accuracy": [0.32241448760032654, 0.3932109475135803, 0.589750349521637, 0.7025492191314697, 0.7246070504188538, 0.7500990629196167, 0.7582882046699524, 0.7572315335273743, 0.7744023203849792, 0.7864218950271606, 0.7944789528846741, 0.7971205711364746, 0.8121780753135681, 0.8113855719566345, 0.8187822103500366, 0.8265751004219055, 0.8273676037788391, 0.830669641494751, 0.8397833704948425], "val_loss": [1.58759948185512, 0.844484669821603, 0.6196949822562081, 0.6302197660718646, 0.523902143750872, 0.5130742618015834, 0.49064806529453825, 0.4766141176223755, 0.46124090467180523, 0.4626369135720389, 0.48002420152936665, 0.40104485409600393, 0.39116668701171875, 0.3809555343219212, 0.41572724069867817, 0.38850620814732145, 0.3960050514766148, 0.3798408934048244, 0.4583559376852853], "val_accuracy": [0.4359999895095825, 0.6240000128746033, 0.734333336353302, 0.7163333296775818, 0.7673333287239075, 0.7576666474342346, 0.7796666622161865, 0.7829999923706055, 0.7906666398048401, 0.7973333597183228, 0.7836666703224182, 0.8266666531562805, 0.8333333134651184, 0.8399999737739563, 0.8243333101272583, 0.824999988079071, 0.8353333473205566, 0.8339999914169312, 0.7733333110809326]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [3, 8, 2, 2, 9, 1, 3, 2, 8, 3, 7, 2, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [4, 2, 3, 3, 3, 3, 1, 2, 1, 4, 4, 3, 1, 4, 1, 3], [8, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8191428780555725, "mapping_values": [1, 4, 4, 2, 2, 1, 8, 8, 5, 3, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(beta, grad)), tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.111240884678601, 1.8889560005085706, 1.185977705654577, 0.8301599413931976, 0.7134669044423712, 0.6737817989254137, 0.6474419980158722, 0.6344344740798209, 0.5943910485686343, 0.5656747393966461, 0.5393270985671731, 0.526329854066582, 0.4970582780222678, 0.4994235092843166, 0.4828053476229131, 0.4685988530207619, 0.47624359307524045, 0.4411141321076819], "accuracy": [0.32241448760032654, 0.3899088501930237, 0.5736362338066101, 0.6869634389877319, 0.7308149337768555, 0.7465327978134155, 0.7581561207771301, 0.7627789974212646, 0.7761194109916687, 0.7884030938148499, 0.7991018295288086, 0.7980451583862305, 0.81548011302948, 0.8095363974571228, 0.8183859586715698, 0.8296129703521729, 0.8226125836372375, 0.8345000743865967], "val_loss": [1.591324976512364, 0.8747252736772809, 0.6517261777605329, 0.5679610286440168, 0.5398822511945452, 0.48215011187962126, 0.5079577139445713, 0.47429394721984863, 0.46299781118120464, 0.44476754324776785, 0.4453057902199881, 0.40486340863364084, 0.386822121483939, 0.4175012878009251, 0.39813752685274395, 0.4003246937479292, 0.39199464661734446, 0.37289726734161377], "val_accuracy": [0.4359999895095825, 0.6056666374206543, 0.6880000233650208, 0.7540000081062317, 0.7599999904632568, 0.7900000214576721, 0.7646666765213013, 0.7789999842643738, 0.784333348274231, 0.8090000152587891, 0.8006666898727417, 0.8266666531562805, 0.8410000205039978, 0.812333345413208, 0.831333339214325, 0.8163333535194397, 0.8396666646003723, 0.8373333215713501]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 4, 8, 2, 2, 1, 5, 9, 8, 3, 7, 2, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [0, 2, 0, 2, 3, 2, 3, 2, 3, 4, 2, 3, 1, 4, 1, 3], [8, 31, 30, 73, 40, 57, 35, 9, 54, 64], [0, 0, 0, 1, 0, 0, 1, 1], [0, 0, 0, 1, 1], [6, 1, 6, 3], [4, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8019999861717224, "mapping_values": [1, 4, 4, 2, 2, 1, 13, 13, 7, 6, 2, 7, 5, 3, 2, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.pow(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.square(tf.math.add(beta, grad))))))))))), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.divide_no_nan(sigma, tf.math.add(sigma, grad))), tf.math.add(sigma, alpha))), sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2053520347558435, 2.0827479388625347, 1.8572607252182443, 1.355667332726825, 0.9350871835654327, 0.7870388662164804, 0.7229135141648542, 0.699086177972613, 0.6496517714917495, 0.6219690773607072, 0.6190770435027789, 0.5803793961298606, 0.5618382198400249, 0.5723016326532325, 0.5583822486218272, 0.5301846949305627, 0.5277851152933347, 0.5129083330605119, 0.5125968518620547, 0.4978876120819628, 0.5083943946155906, 0.4759073548895761, 0.47884700150222764, 0.4674331938207992, 0.45872374505036856, 0.45624785128995143, 0.44133655055560267, 0.4286381601106379, 0.4615862702594347, 0.4334926615498558, 0.4444455381523679, 0.4157272330356737, 0.4176552808476855, 0.4069133283140606, 0.39848920364799345, 0.40761749585543045, 0.38455750140074996], "accuracy": [0.2690529525279999, 0.3051116168498993, 0.368511438369751, 0.5193501710891724, 0.6540747880935669, 0.695813000202179, 0.7253995537757874, 0.7386078238487244, 0.7535332441329956, 0.763967752456665, 0.7652885913848877, 0.7804781198501587, 0.7866860628128052, 0.7828556299209595, 0.7853652238845825, 0.8018755912780762, 0.8005547523498535, 0.8078193068504333, 0.8034605979919434, 0.8099326491355896, 0.8117818236351013, 0.8173292875289917, 0.8202351331710815, 0.824329674243927, 0.8252542614936829, 0.83119797706604, 0.8323867321014404, 0.8399154543876648, 0.8216879963874817, 0.8364813327789307, 0.8322546482086182, 0.8449346423149109, 0.8399154543876648, 0.8465195894241333, 0.8504821062088013, 0.8422929644584656, 0.8536521196365356], "val_loss": [1.9388205664498466, 1.2946531772613525, 1.1274266924176897, 0.9262049538748605, 0.6022181340626308, 0.642924427986145, 0.6049054861068726, 0.5619951486587524, 0.4731254577636719, 0.48826546328408377, 0.46056858130863737, 0.4476490191050938, 0.44359988825661795, 0.4581548827035086, 0.4347954647881644, 0.4724571534565517, 0.4472454956599644, 0.44790509768894743, 0.4094724825450352, 0.3890105741364615, 0.386519261768886, 0.4286912849971226, 0.4273360712187631, 0.3841008373669216, 0.3776865856988089, 0.3787813527243478, 0.383672901562282, 0.3860203879220145, 0.4139374664851597, 0.3727070689201355, 0.3747299909591675, 0.3619268962315151, 0.3642668298312596, 0.3820285541670663, 0.3758870022637503, 0.3617706894874573, 0.395478572164263], "val_accuracy": [0.3019999861717224, 0.3799999952316284, 0.5410000085830688, 0.6236666440963745, 0.7193333506584167, 0.7099999785423279, 0.7110000252723694, 0.7383333444595337, 0.7896666526794434, 0.781000018119812, 0.800000011920929, 0.8053333163261414, 0.8019999861717224, 0.7893333435058594, 0.8119999766349792, 0.7673333287239075, 0.7903333306312561, 0.7923333048820496, 0.8113333582878113, 0.8339999914169312, 0.8353333473205566, 0.8180000185966492, 0.7870000004768372, 0.8376666903495789, 0.8396666646003723, 0.8399999737739563, 0.8370000123977661, 0.8299999833106995, 0.8159999847412109, 0.8403333425521851, 0.8443333506584167, 0.8479999899864197, 0.840666651725769, 0.8420000076293945, 0.8463333249092102, 0.8473333120346069, 0.8213333487510681]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [24, 66, 89, 50, 85, 46], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 4, 8, 2, 2, 1, 3, 9, 8, 3, 7, 2, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [0, 2, 0, 3, 0, 3, 3, 2, 0, 4, 4, 3, 1, 4, 1, 3], [95, 31, 30, 73, 40, 57, 35, 9, 54, 64], [0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0], [1, 7, 6, 1], [7, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.7559999823570251, "mapping_values": [1, 4, 4, 2, 2, 1, 14, 14, 7, 7, 3, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.negative(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.pow(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.subtract(grad, tf.math.multiply(tf.math.add(beta, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))))))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.297196540472262, 2.2845647306080745, 2.275208281519674, 2.2609275625586873, 2.2479855551018675, 2.2318106058519027, 2.215694080899971, 2.1963714583674916, 2.171924868405944, 2.150794611284525, 2.1174774604812985, 2.081790475230632, 2.0432793832710154, 2.0040370967992467, 1.9521887264294537, 1.8994438261041677, 1.8445355506258838, 1.7845337143852538, 1.7145832516277597, 1.6591240244141, 1.6024557746806085, 1.5442203750951715, 1.485964341926348, 1.4372849443317515, 1.4002297332872253, 1.3716169357646206, 1.3264230474772596, 1.2876287371081572, 1.2591542301712066, 1.238202556737457, 1.203404296973378, 1.1946280675084915, 1.1555211896421478, 1.136027480947847, 1.1228664120379503, 1.0948235635759966, 1.0829819688203706, 1.079577194543767, 1.0614702956331026, 1.044431632551708, 1.0373136782296628, 1.0224397885265635, 1.0171902374804942, 1.007425555888735, 0.9926052879679393, 0.9869535872177629, 0.9681968941286712, 0.9674896359711338, 0.9458788830559125, 0.9391571296645413, 0.925075372424911, 0.9233688178347118, 0.9223472618108822, 0.9104365475772, 0.9096892386883509, 0.8986707668514804, 0.8860044826716165, 0.883855523804569, 0.8852853035457603, 0.8834875976845668, 0.8607351067138307, 0.8630314506024512, 0.8603565093784789, 0.8547070168658427, 0.8542985058164615, 0.8482968731012169, 0.8480710415650573, 0.8429313562470908, 0.8256676170127172, 0.8291653905798494, 0.8304647441632114, 0.8342447347566042, 0.8270657260136723, 0.8188090151594835, 0.8162795131736507, 0.8046052501564092, 0.8092373133713402, 0.8048672665458203, 0.8059824226538991, 0.797493847786963, 0.7971030703908527, 0.7909085571553335, 0.797461146117044, 0.7798820665452333, 0.7757405424083402, 0.782212911367322, 0.7765365151948995], "accuracy": [0.10659094154834747, 0.13934750854969025, 0.15982036292552948, 0.2005019187927246, 0.2262580841779709, 0.27037379145622253, 0.2876766622066498, 0.3093382716178894, 0.3357548415660858, 0.34883105754852295, 0.3667943477630615, 0.39083343744277954, 0.40404173731803894, 0.41209879517555237, 0.42345792055130005, 0.44630828499794006, 0.44947826862335205, 0.4633469879627228, 0.48289525508880615, 0.49108439683914185, 0.4939902126789093, 0.5108968615531921, 0.5325584411621094, 0.5309734344482422, 0.535332202911377, 0.5406154990196228, 0.5506538152694702, 0.5635979175567627, 0.5720512270927429, 0.5741645693778992, 0.5840708017349243, 0.5890899300575256, 0.5983357429504395, 0.6090344786643982, 0.6069211363792419, 0.614317774772644, 0.6239598393440247, 0.6207898855209351, 0.6277902722358704, 0.6320168972015381, 0.6384889483451843, 0.6382247805595398, 0.6419231295585632, 0.6428477168083191, 0.6493197679519653, 0.6452252268791199, 0.6559239029884338, 0.6528860330581665, 0.6618676781654358, 0.6571126580238342, 0.6708492636680603, 0.6616035103797913, 0.6704530715942383, 0.672698438167572, 0.6781138777732849, 0.683000922203064, 0.6860388517379761, 0.6831330060958862, 0.6851142644882202, 0.6848500967025757, 0.6959450244903564, 0.6909258961677551, 0.6840575933456421, 0.6935675740242004, 0.6860388517379761, 0.6935675740242004, 0.6988508701324463, 0.6951525807380676, 0.6979262828826904, 0.6992471218109131, 0.6947563290596008, 0.6991150379180908, 0.7016246318817139, 0.7067758440971375, 0.6997754573822021, 0.7043983340263367, 0.7099458575248718, 0.7065116763114929, 0.7065116763114929, 0.7071720957756042, 0.7125874757766724, 0.7145687341690063, 0.7094175219535828, 0.7157574892044067, 0.7153612375259399, 0.7144366502761841, 0.719852089881897], "val_loss": [1.9599058968680245, 1.9488876887730189, 1.937680789402553, 1.9255133356366838, 1.9123247010367257, 1.8973994936261858, 1.8805609430585588, 1.8610962459019251, 1.8385605812072754, 1.812845230102539, 1.7826644352504186, 1.747893946511405, 1.7084126472473145, 1.6642491817474365, 1.6149027006966727, 1.5611385617937361, 1.5045313835144043, 1.4453705038343156, 1.383587224142892, 1.3228357178824288, 1.2638897895812988, 1.2083985124315535, 1.156109298978533, 1.107872758592878, 1.0654633385794503, 1.027005365916661, 0.99235429082598, 0.9601324626377651, 0.9319442680903843, 0.9067230905805316, 0.8830387932913644, 0.8623432431902204, 0.8427346774509975, 0.8253793546131679, 0.8097083057676043, 0.7943961279732841, 0.7801694529397147, 0.7691550425120762, 0.7579209123338971, 0.747711317879813, 0.7378609350749424, 0.7282507249287197, 0.7196517160960606, 0.7127535854067121, 0.7052934850965228, 0.6979031903403146, 0.6911081416266305, 0.6853126287460327, 0.6777727433613369, 0.6722344500677926, 0.6665697949273246, 0.661697336605617, 0.6566150188446045, 0.6512912341526577, 0.6475763320922852, 0.6433342695236206, 0.6384861298969814, 0.6349393469946725, 0.6315203053610665, 0.6280041251863752, 0.6235659292766026, 0.6201569012233189, 0.6173301935195923, 0.6148005042757306, 0.6119074310575213, 0.6072702578135899, 0.6058948891503471, 0.6029330492019653, 0.598767740385873, 0.5975044795445034, 0.5943224770682198, 0.5931177650179181, 0.5901752710342407, 0.589119723864964, 0.5851673058101109, 0.5829610483986991, 0.5803820235388619, 0.5775362082890102, 0.5761650460106986, 0.575516836983817, 0.573447551046099, 0.5704165697097778, 0.5695175954273769, 0.5671802418572562, 0.5651294674192157, 0.5638636861528669, 0.5624162639890399], "val_accuracy": [0.1276666671037674, 0.23466666042804718, 0.31966665387153625, 0.3766666650772095, 0.4046666622161865, 0.4193333387374878, 0.43933331966400146, 0.45500001311302185, 0.4676666557788849, 0.4846666753292084, 0.49666666984558105, 0.5113333463668823, 0.5273333191871643, 0.5389999747276306, 0.5483333468437195, 0.5590000152587891, 0.5676666498184204, 0.5799999833106995, 0.5879999995231628, 0.5929999947547913, 0.6033333539962769, 0.612333357334137, 0.6259999871253967, 0.6396666765213013, 0.6480000019073486, 0.6546666622161865, 0.6666666865348816, 0.67166668176651, 0.67166668176651, 0.6783333420753479, 0.6806666851043701, 0.687333345413208, 0.6919999718666077, 0.6936666369438171, 0.6966666579246521, 0.6993333101272583, 0.703000009059906, 0.7070000171661377, 0.7056666612625122, 0.7059999704360962, 0.7103333473205566, 0.7113333344459534, 0.7170000076293945, 0.718999981880188, 0.722000002861023, 0.7243333458900452, 0.7246666550636292, 0.7233333587646484, 0.7289999723434448, 0.7303333282470703, 0.7289999723434448, 0.7293333411216736, 0.7336666584014893, 0.7353333234786987, 0.7363333106040955, 0.7386666536331177, 0.7396666407585144, 0.7416666746139526, 0.7416666746139526, 0.7426666617393494, 0.7426666617393494, 0.7443333268165588, 0.7450000047683716, 0.7450000047683716, 0.7436666488647461, 0.7486666440963745, 0.7473333477973938, 0.7490000128746033, 0.7523333430290222, 0.7480000257492065, 0.7513333559036255, 0.7513333559036255, 0.7546666860580444, 0.749666690826416, 0.7543333172798157, 0.7570000290870667, 0.7553333044052124, 0.7573333382606506, 0.7573333382606506, 0.7556666731834412, 0.7563333511352539, 0.7596666812896729, 0.7573333382606506, 0.7563333511352539, 0.7590000033378601, 0.7573333382606506, 0.7573333382606506]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [27, 66, 89, 50, 85, 46], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [9, 4, 8, 3, 2, 3, 3, 4, 8, 5, 7, 2, 7, 3, 2, 5, 8, 2, 2, 6, 5, 8, 9, 9], [0, 2, 3, 3, 0, 3, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3], [8, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 1, 1, 0, 0, 1], [1, 0, 0, 0, 0], [6, 7, 6, 5], [7, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.6748571395874023, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2768846750101943, 2.0696271655896807, 1.538732827300204, 1.3181190011901562, 0.9524752139698764, 0.9105764725708675, 0.863122726302373, 0.8500501586382871, 0.8101052301608025, 0.8026976911241605, 0.7723009986900115, 0.7444610019259843, 0.7142382734062146, 0.6970304908171117, 0.6793975614128395, 0.6714826520281918, 0.6763328797214807, 0.6593499440700308, 0.6500906120075951, 0.6519460245964943, 0.6766447275306224, 0.6833145897449235, 0.6855473156854571, 0.7305147601093488, 0.748669573139946, 0.7639809748468587, 0.820128848689375], "accuracy": [0.1640470176935196, 0.3763043284416199, 0.47827234864234924, 0.5765420794487, 0.6509047746658325, 0.6653017997741699, 0.6767930388450623, 0.678642213344574, 0.6789063811302185, 0.7028133869171143, 0.719852089881897, 0.717870831489563, 0.7257958054542542, 0.7296261787414551, 0.7469290494918823, 0.7498348951339722, 0.7411174178123474, 0.754589855670929, 0.7646281719207764, 0.7559106945991516, 0.7528728246688843, 0.7548540234565735, 0.7460044622421265, 0.7516840696334839, 0.7306828498840332, 0.7421740889549255, 0.7207766771316528], "val_loss": [1.884815011705671, 1.4450111048562186, 0.8220015083040509, 0.7202271393367222, 0.7287535667419434, 0.6404930182865688, 0.6217051914760044, 0.6003880841391427, 0.6463280916213989, 0.5784715414047241, 0.5677014929907662, 0.5146275929042271, 0.513384257044111, 0.5128601619175502, 0.49513632910592215, 0.49401484216962543, 0.4876682928630284, 0.49539571149008615, 0.4925609827041626, 0.49640158244541716, 0.4995816094534738, 0.49259238583701, 0.5143415927886963, 0.5489143814359393, 0.5481793199266706, 0.59422767162323, 0.5912301370075771], "val_accuracy": [0.3973333239555359, 0.512666642665863, 0.6783333420753479, 0.7093333601951599, 0.721666693687439, 0.715666651725769, 0.718666672706604, 0.7269999980926514, 0.7363333106040955, 0.7490000128746033, 0.7446666955947876, 0.7766666412353516, 0.7799999713897705, 0.7636666893959045, 0.7870000004768372, 0.7786666750907898, 0.7900000214576721, 0.7923333048820496, 0.7823333144187927, 0.796999990940094, 0.7886666655540466, 0.800000011920929, 0.7983333468437195, 0.7696666717529297, 0.7990000247955322, 0.746999979019165, 0.7853333353996277]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [3, 8, 2, 2, 9, 1, 3, 2, 8, 3, 7, 2, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [0, 2, 3, 3, 3, 3, 1, 2, 1, 4, 4, 3, 1, 4, 1, 3], [8, 52, 30, 73, 40, 57, 35, 9, 54, 64], [0, 0, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0], [6, 1, 2, 9], [7, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.11171428859233856, "mapping_values": [1, 4, 4, 2, 2, 1, 3, 3, 1, 2, 1, 7, 4, 3, 1, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.subtract(sigma, sigma)), tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, grad))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.49827725064438, 233983835.96255943, NaN, NaN, NaN, NaN], "accuracy": [0.2623167335987091, 0.13155461847782135, 0.09694888442754745, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9625555447169714, 6.825015019768381e+18, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.09733333438634872, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 6, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 6, 2, 2, 2, 8, 1, 9, 8, 3, 7, 2, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [0, 3, 3, 3, 3, 3, 1, 2, 1, 4, 4, 3, 1, 4, 1, 3], [8, 31, 30, 73, 40, 57, 35, 9, 54, 64], [0, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 0, 1], [1, 7, 6, 4], [7, 1], [64], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 4, 4, 2, 14, 14, 8, 6, 2, 3, 1, 1, 0, 0, 3, 1, 2, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.divide_no_nan(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.sqrt(tf.math.subtract(tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))))), tf.math.add(beta, grad))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [3, 1, 2, 0, 5, 1, 3, 2, 8, 3, 7, 2, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [0, 2, 1, 3, 0, 3, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3], [8, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0], [1, 7, 6, 4], [7, 1], [64], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [2, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 3, 1, 2, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(beta, beta)", "other_info": {"loss": [15.144071053709132, 896.6601928501333, 13455.94410156766, 90967.87293414013, 398244.1815149914, 1310354.0557059834], "accuracy": [0.09972262382507324, 0.10289261490106583, 0.10091137140989304, 0.10487385839223862, 0.09457138925790787, 0.09879804402589798], "val_loss": [73.90147181919643, 2395.1173270089284, 24120.31417410714, 129076.59375, 479619.35714285716, 1408783.392857143], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 4, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [3, 5, 2, 2, 9, 1, 3, 2, 8, 3, 7, 2, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [4, 2, 3, 3, 3, 3, 1, 2, 1, 4, 4, 3, 1, 4, 1, 3], [8, 52, 30, 73, 40, 57, 35, 9, 54, 64], [0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 0, 1, 0, 1], [1, 1, 6, 0], [7, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 20, 20, 11, 9, 4, 8, 8, 5, 3, 1, 8, 6, 4, 2, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.pow(tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), grad)))), tf.math.add(alpha, tf.math.subtract(tf.math.negative(tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))), alpha)), tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(grad, tf.math.square(tf.math.add(tf.math.add(beta, beta), tf.math.add(grad, tf.math.add(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, grad), tf.math.add(sigma, tf.math.negative(sigma)))))), tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 4, 8, 2, 9, 1, 3, 9, 8, 3, 7, 2, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [1, 3, 1, 3, 0, 3, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3], [8, 52, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0], [6, 1, 6, 5], [7, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 2, 8, 8, 5, 3, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.pow(alpha, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), grad)))), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3029349452988535, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 2, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 4, 8, 2, 2, 1, 3, 9, 8, 3, 7, 2, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [0, 2, 1, 1, 0, 3, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3], [18, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 8, 6, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.pow(tf.math.add(beta, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07779685407876968, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [3, 8, 2, 2, 9, 1, 3, 2, 8, 3, 7, 2, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [5, 2, 3, 3, 0, 3, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3], [8, 52, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0], [6, 1, 6, 5], [7, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [2, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 4, 4, 2, 23, 23, 14, 9, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))), grad)))))), tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))))), tf.math.multiply(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, alpha))), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 6, 2, 2, 2, 1, 1, 9, 8, 3, 7, 2, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [0, 3, 3, 3, 3, 3, 1, 2, 1, 4, 4, 3, 1, 4, 1, 3], [85, 52, 30, 73, 40, 57, 35, 9, 54, 64], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0], [6, 1, 6, 5], [7, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 4, 4, 2, 15, 15, 8, 7, 2, 8, 5, 4, 1, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), grad)))))), tf.math.add(beta, alpha))), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, grad), tf.math.add(sigma, tf.math.square(sigma)))))), sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 1, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 4, 8, 2, 2, 1, 3, 9, 8, 3, 7, 2, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [0, 0, 1, 3, 3, 2, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3], [8, 89, 30, 73, 40, 57, 35, 9, 54, 64], [0, 0, 1, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 0, 1], [1, 7, 6, 4], [7, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 11, 8, 2, 14, 14, 8, 6, 3, 9, 6, 4, 2, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), grad)))), tf.math.add(alpha, tf.math.subtract(tf.math.negative(tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), alpha)), tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.add(alpha, grad))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.pow(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha)), tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, beta)))))))), tf.math.add(beta, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, grad), tf.math.add(sigma, tf.math.pow(sigma, sigma)))))), tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [12, 66, 89, 50, 85, 46], [0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 4, 8, 2, 2, 1, 3, 9, 8, 3, 7, 2, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [0, 3, 3, 3, 3, 3, 1, 2, 1, 4, 4, 3, 1, 4, 1, 3], [8, 52, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 11, 8, 3, 14, 14, 7, 7, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)), grad)))), tf.math.add(alpha, tf.math.subtract(tf.math.negative(tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))), alpha)), tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.add(alpha, grad))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.pow(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad))))))))), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 6, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 2, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [9, 4, 8, 2, 2, 1, 3, 9, 8, 3, 7, 2, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [0, 1, 1, 3, 0, 3, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3], [8, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [2, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.09914285689592361, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.4579298994749323, 4.275126642381605, 8.881119401337465, 16.12278069166255, 26.444020017483577, 40.25060762317976], "accuracy": [0.09602430462837219, 0.1014397069811821, 0.09998679161071777, 0.10645885765552521, 0.09496764093637466, 0.09932637959718704], "val_loss": [2.3276398522513255, 4.2536933081490655, 7.953059332711356, 13.392585754394531, 20.752261025565012, 30.248473031180247], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [1, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [10, 66, 89, 50, 85, 46], [1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [3, 5, 2, 2, 9, 1, 3, 2, 8, 3, 7, 2, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [0, 2, 3, 3, 0, 3, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3], [8, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0], [6, 1, 6, 5], [7, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [3, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.04171428456902504, "mapping_values": [1, 4, 4, 2, 2, 1, 14, 14, 8, 6, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(alpha, tf.math.negative(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(tf.math.add(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta))), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3021476216808114, 2.3015663108616584, 2.3039605924875635, 2.3026837207354323, 2.3028058700589233, 2.3020324023990835], "accuracy": [0.09325055778026581, 0.09060890227556229, 0.08981640636920929, 0.08638224750757217, 0.09285431355237961, 0.09272222965955734], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}]