[{"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [5, 8, 2, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 7, 8, 4], [1, 1], [64], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [3, 1, 9, 1, 2, 0, 5, 3, 2, 2, 8], [1, 0, 2, 3, 3, 2, 3], [15, 86, 13]], "fitness": -0.8402857184410095, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0, 0, 5, 3, 2, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0405802957259938, 1.1291437718248196, 0.8172782179056267, 0.7465308815606944, 0.6716612551773166, 0.6131280314306683, 0.5864271176347895, 0.547702783457182, 0.5312245443331457, 0.49996456849088505, 0.47557927497452623, 0.46961380134499886, 0.4453951103095885, 0.4296690396558119, 0.4193618996992654, 0.39892376826864745, 0.38204578897263697, 0.3742599451680461, 0.36463870389381847, 0.3542625576497825, 0.34689704374535807, 0.3419076446387211, 0.32917543239581537, 0.32511323019655514, 0.3082342015092462, 0.3067693794447559, 0.2999408536457414, 0.2966556050372461, 0.28512593557837457, 0.2682088419564758, 0.2651007062471491, 0.25165361646632195, 0.253141220050355, 0.24739048159503507, 0.23806732962073557, 0.2424997051693366, 0.22414773961241535, 0.2258290480003066, 0.21639781849826126, 0.21250025021669305, 0.21413992782074306, 0.20324762201170643, 0.19720187211875917, 0.2027893701954257, 0.2008044680155122, 0.1937183597363879, 0.1862896554316701], "accuracy": [0.3181878328323364, 0.59661865234375, 0.6913221478462219, 0.7218332886695862, 0.7434949278831482, 0.7667415142059326, 0.7725531458854675, 0.789988100528717, 0.802800178527832, 0.816008448600769, 0.8274996876716614, 0.8249900937080383, 0.8352925777435303, 0.842028796672821, 0.845859169960022, 0.8512746095657349, 0.859199583530426, 0.8607845902442932, 0.8654074668884277, 0.8688416481018066, 0.8701624870300293, 0.8720116019248962, 0.8795403242111206, 0.8742570281028748, 0.8845595121383667, 0.8849557638168335, 0.883238673210144, 0.8910315632820129, 0.8968431949615479, 0.8972394466400146, 0.8986923694610596, 0.9041078090667725, 0.9026548862457275, 0.9037115573883057, 0.9074098467826843, 0.9075419306755066, 0.913617730140686, 0.9137498140335083, 0.9183727502822876, 0.9189010858535767, 0.9181085824966431, 0.9192973375320435, 0.9212785363197327, 0.9190331697463989, 0.9227314591407776, 0.9249768853187561, 0.927882730960846], "val_loss": [0.8698722975594657, 0.6490027393613543, 0.5793101106371198, 0.5247728994914463, 0.5002398320606777, 0.47987473011016846, 0.4542116607938494, 0.4322430746895926, 0.41765334776469637, 0.3893412096159799, 0.37825536727905273, 0.36955392360687256, 0.365498491695949, 0.3518876773970468, 0.34617085116250174, 0.3406424607549395, 0.34001160519463675, 0.3268395406859262, 0.32578381470271517, 0.3246027571814401, 0.3295778291566031, 0.3354659846850804, 0.3298382673944746, 0.32735322202954975, 0.31636490140642437, 0.33423412697655813, 0.33090418577194214, 0.3188564692224775, 0.3103166137422834, 0.3199306215558733, 0.3198438116482326, 0.3143203173364912, 0.30910693747656687, 0.3175610899925232, 0.31881122078214374, 0.32580147470746723, 0.3301008003098624, 0.31238665751048494, 0.3199080058506557, 0.33148794514792307, 0.3234039119311741, 0.31915169102805, 0.3359320248876299, 0.3169888087681362, 0.3252614906855992, 0.32301483835492817, 0.3372627241270883], "val_accuracy": [0.6493333578109741, 0.7253333330154419, 0.7413333058357239, 0.7639999985694885, 0.7799999713897705, 0.7883333563804626, 0.8029999732971191, 0.8226666450500488, 0.8213333487510681, 0.8389999866485596, 0.8416666388511658, 0.8423333168029785, 0.8493333458900452, 0.8576666712760925, 0.8556666374206543, 0.8619999885559082, 0.8583333492279053, 0.862666666507721, 0.8676666617393494, 0.8686666488647461, 0.8640000224113464, 0.8616666793823242, 0.8579999804496765, 0.8633333444595337, 0.8703333139419556, 0.8656666874885559, 0.8646666407585144, 0.8723333477973938, 0.875333309173584, 0.871999979019165, 0.8740000128746033, 0.8766666650772095, 0.874666690826416, 0.8763333559036255, 0.8730000257492065, 0.8769999742507935, 0.8759999871253967, 0.8759999871253967, 0.8776666522026062, 0.8776666522026062, 0.878000020980835, 0.8836666941642761, 0.8730000257492065, 0.8766666650772095, 0.8833333253860474, 0.8786666393280029, 0.8816666603088379]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [5, 8, 2, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 7, 8, 4], [1, 1], [64], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [3, 1, 9, 1, 2, 0, 5, 3, 2, 2, 8], [1, 0, 2, 3, 3, 2, 3], [15, 86, 13]], "fitness": -0.833142876625061, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0, 0, 5, 3, 2, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.040578485322493, 1.1290806714632822, 0.817478673884173, 0.7459097858181309, 0.6708899851582857, 0.6124004898148757, 0.585575426180664, 0.5488964244201749, 0.5325528484065661, 0.4996088202902512, 0.4770209143001484, 0.46974076571371326, 0.4479759613347485, 0.43144347477252093, 0.4238262059681955, 0.4017233887974927, 0.38414130249374245, 0.3764844688371251, 0.37112143766831224, 0.35500616174505656, 0.34971867067749945, 0.3463763451028289, 0.3399805006625362, 0.3291672195276296, 0.3179248358162245], "accuracy": [0.3181878328323364, 0.5964865684509277, 0.6906617283821106, 0.722229540348053, 0.7432307600975037, 0.7662131786346436, 0.7746664881706238, 0.7927618622779846, 0.8006868362426758, 0.8149517774581909, 0.8249900937080383, 0.8234050869941711, 0.8354246616363525, 0.8438779711723328, 0.843481719493866, 0.8514066934585571, 0.8590674996376038, 0.8615770936012268, 0.8621054291725159, 0.8692378997802734, 0.8706908226013184, 0.8713511824607849, 0.8713511824607849, 0.8739928603172302, 0.8767666220664978], "val_loss": [0.8698885100228446, 0.649290953363691, 0.5778838736670358, 0.5232753072466169, 0.5005440541676113, 0.47706057344164166, 0.4548471825463431, 0.43285218306950163, 0.4153551459312439, 0.38787553140095304, 0.3786905493055071, 0.3689554078238351, 0.36677293266568867, 0.35240700415202547, 0.3433910437992641, 0.3428137557847159, 0.3378709299223764, 0.3286744867052351, 0.32799229451588224, 0.3277209997177124, 0.33219889232090544, 0.3358253410884312, 0.33281147480010986, 0.3315566437585013, 0.320728063583374], "val_accuracy": [0.6493333578109741, 0.7239999771118164, 0.7406666874885559, 0.7636666893959045, 0.7820000052452087, 0.7923333048820496, 0.7996666431427002, 0.8180000185966492, 0.8246666789054871, 0.8396666646003723, 0.8423333168029785, 0.847000002861023, 0.846666693687439, 0.8560000061988831, 0.8569999933242798, 0.8629999756813049, 0.8576666712760925, 0.8643333315849304, 0.8673333525657654, 0.8683333396911621, 0.8636666536331177, 0.859000027179718, 0.8566666841506958, 0.8619999885559082, 0.8683333396911621]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [5, 8, 2, 0, 0, 9, 3, 9], [2, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 7, 8, 4], [1, 1], [64], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [3, 0, 9, 1, 2], [1, 0, 2], [15, 86, 13]], "fitness": -0.5428571701049805, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.negative(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3025644375364367, 2.300920291678182, 2.3016073832249266, 2.2961812240415167, 2.2945494418131, 2.2954006853860682, 2.2916527986054125, 2.290652745844839, 2.2869867555784307, 2.287138517396388, 2.2846248464467203, 2.2812829742247733, 2.278871124194771, 2.2780330867311345, 2.276556017691386, 2.2748630683907995, 2.2731178984933638, 2.270201340390549, 2.2689726352376742, 2.266988985920469, 2.263532712301794, 2.2626496683321515, 2.2610349147515985, 2.2583509278162013, 2.2579322202944754, 2.2541827236924266, 2.251413407374241, 2.2495240381034516, 2.2485036772192744, 2.2469619181114906, 2.2437060476372883, 2.2395896027982825, 2.238417974946175, 2.2336357366045183, 2.234081773678577, 2.230223871760632, 2.229900401958999, 2.2258293602240165, 2.222827901362806, 2.2202578111804, 2.2173924225038935, 2.2157428445376426, 2.212112741290208, 2.2083301207550354, 2.2075382584294845, 2.199945570565706, 2.197995756626948, 2.196785815812971, 2.193654311158323, 2.1894092044621223, 2.1858211662066753, 2.1829001190262134, 2.1793566969454705, 2.173183471393497, 2.169691538561951, 2.167764570577317, 2.1632260020067977, 2.160088687572245, 2.1549457607173554, 2.1497208712485487, 2.1469290803184506, 2.1423033727646628, 2.1350301434697414, 2.1300494195983206, 2.1257541868365784, 2.1242877409804874, 2.1171969016151593, 2.112624010720415, 2.1071451480252286, 2.103930643032791, 2.0950649018615795, 2.091416416891247, 2.082219034122391, 2.0773040496315764, 2.07482037700446, 2.0656729135625413, 2.0594327733217845, 2.050834716161512, 2.0454383472079347, 2.0413018365058098, 2.0320935735865007, 2.030164830452573, 2.0191872307905006, 2.012813217446883, 2.0035256790116542, 1.9985448409380173, 1.9918551518066512, 1.9805197510910135, 1.9775260252140736, 1.9685832378870902, 1.9587291236314885, 1.949002608914716, 1.944229581919423, 1.9296943699568805, 1.924126409142796, 1.9173615360146643, 1.907052609867282, 1.900754627566123, 1.887396458322346, 1.8774616571544043], "accuracy": [0.09338264167308807, 0.08585391938686371, 0.09642054885625839, 0.10527011007070541, 0.1088363528251648, 0.11055342853069305, 0.11306300014257431, 0.12138422578573227, 0.13591335713863373, 0.13142253458499908, 0.13961167633533478, 0.14093250036239624, 0.14859332144260406, 0.15176330506801605, 0.1578391194343567, 0.1636507660150528, 0.16853784024715424, 0.1764628142118454, 0.18584071099758148, 0.18412363529205322, 0.18755778670310974, 0.20063400268554688, 0.1958790123462677, 0.2086910605430603, 0.21291771531105042, 0.2145027071237564, 0.22097477316856384, 0.22995641827583313, 0.22401267290115356, 0.22876766324043274, 0.2390701323747635, 0.2502971887588501, 0.24765552580356598, 0.2607317268848419, 0.2576938271522522, 0.2583542466163635, 0.2723550498485565, 0.26997753977775574, 0.27605336904525757, 0.27803459763526917, 0.280940443277359, 0.2864879071712494, 0.29203540086746216, 0.2921674847602844, 0.2969224750995636, 0.311319500207901, 0.3070928454399109, 0.30405494570732117, 0.3143574297428131, 0.3147536516189575, 0.31964072585105896, 0.31805574893951416, 0.3331131935119629, 0.3287544548511505, 0.3387927711009979, 0.3319244384765625, 0.3409060835838318, 0.3401135802268982, 0.3431515097618103, 0.3517369031906128, 0.3555673062801361, 0.35926562547683716, 0.35807687044143677, 0.36507725715637207, 0.3695680797100067, 0.361378937959671, 0.3677189350128174, 0.36943599581718445, 0.3731343150138855, 0.3751155734062195, 0.38264429569244385, 0.3747193217277527, 0.387399286031723, 0.38660678267478943, 0.3887201249599457, 0.39664509892463684, 0.4027208983898163, 0.3963809311389923, 0.4037775695323944, 0.39928674697875977, 0.39149385690689087, 0.40668338537216187, 0.4131554663181305, 0.414608359336853, 0.4171179533004761, 0.4085325598716736, 0.4131554663181305, 0.41249504685401917, 0.42002376914024353, 0.4235900044441223, 0.4309866726398468, 0.4224012792110443, 0.4247787594795227, 0.4340245723724365, 0.43745872378349304, 0.43389248847961426, 0.4371945559978485, 0.4348170757293701, 0.4395720660686493, 0.4449874460697174], "val_loss": [1.970339366367885, 1.9690892355782645, 1.9675540242876326, 1.9658913612365723, 1.9641573769705636, 1.9623955999101912, 1.9606172697884696, 1.9588490894862585, 1.957075868334089, 1.9553070068359375, 1.9535369873046875, 1.9517722129821777, 1.9499964032854353, 1.9482042448861259, 1.9464048658098494, 1.9445904323032923, 1.9427743639264787, 1.940948145730155, 1.9391098022460938, 1.937253543308803, 1.9353686741420202, 1.9334583282470703, 1.9315228462219238, 1.9295783724103654, 1.9276114872523717, 1.9256174223763602, 1.9235785348074776, 1.9215065411158971, 1.9194019181387765, 1.9172767911638533, 1.9151249613080705, 1.9129343714032854, 1.9106937135968889, 1.90840482711792, 1.9060587882995605, 1.9036945615495955, 1.9012802668980189, 1.8988276890345983, 1.896320138658796, 1.8937514850071497, 1.891120433807373, 1.8884361812046595, 1.885707105909075, 1.882911545889718, 1.880033084324428, 1.8770883423941476, 1.8740814753941126, 1.8710128239222936, 1.867873055594308, 1.8646610123770577, 1.8613506044660295, 1.8579622677394323, 1.854485103062221, 1.8509209496634347, 1.8472741671970911, 1.843529292515346, 1.8397033555167062, 1.8358125005449568, 1.831820011138916, 1.8277205739702498, 1.823549815586635, 1.819253376552037, 1.814859049660819, 1.8103607722691126, 1.805748667035784, 1.8010479382106237, 1.7962355613708496, 1.79132114137922, 1.7862909861973353, 1.7811538151332311, 1.7759202548435755, 1.7705697332109724, 1.765082699911935, 1.7594435555594308, 1.7537055696759904, 1.7478529385157995, 1.74186795098441, 1.7357516288757324, 1.7294926643371582, 1.7231292724609375, 1.7166195256369454, 1.7100306919642858, 1.7033186640058244, 1.6964387212480818, 1.6894004344940186, 1.6822558811732702, 1.675001757485526, 1.667583669934954, 1.6599901063101632, 1.6523258004869734, 1.6445246083395821, 1.6365570000239782, 1.6285068988800049, 1.6203467505318778, 1.6119907583509172, 1.6035521371023995, 1.5950207710266113, 1.586442300251552, 1.5776794637952531, 1.5687406063079834], "val_accuracy": [0.04233333468437195, 0.04933333396911621, 0.05999999865889549, 0.07199999690055847, 0.0860000029206276, 0.10433333367109299, 0.11999999731779099, 0.13966666162014008, 0.16333332657814026, 0.17633333802223206, 0.19366666674613953, 0.21133333444595337, 0.2303333282470703, 0.2473333328962326, 0.26466667652130127, 0.2750000059604645, 0.2876666784286499, 0.2996666729450226, 0.31299999356269836, 0.32499998807907104, 0.3330000042915344, 0.34066668152809143, 0.35066667199134827, 0.35766667127609253, 0.36633333563804626, 0.3723333477973938, 0.375, 0.3799999952316284, 0.38600000739097595, 0.3889999985694885, 0.3919999897480011, 0.39633333683013916, 0.3986666798591614, 0.4026666581630707, 0.40433332324028015, 0.40799999237060547, 0.41100001335144043, 0.4129999876022339, 0.4169999957084656, 0.4183333218097687, 0.42133334279060364, 0.4256666600704193, 0.4283333420753479, 0.43033334612846375, 0.4326666593551636, 0.4350000023841858, 0.43933331966400146, 0.4426666796207428, 0.4440000057220459, 0.44699999690055847, 0.4483333230018616, 0.4519999921321869, 0.45399999618530273, 0.4566666781902313, 0.46000000834465027, 0.460999995470047, 0.4633333384990692, 0.4659999907016754, 0.46799999475479126, 0.4716666638851166, 0.4753333330154419, 0.47733333706855774, 0.4776666760444641, 0.4819999933242798, 0.48399999737739563, 0.4846666753292084, 0.48633334040641785, 0.4883333444595337, 0.49300000071525574, 0.49666666984558105, 0.49799999594688416, 0.4986666738986969, 0.5009999871253967, 0.5053333044052124, 0.5080000162124634, 0.5106666684150696, 0.5113333463668823, 0.512333333492279, 0.5139999985694885, 0.5183333158493042, 0.5233333110809326, 0.5253333449363708, 0.5270000100135803, 0.5286666750907898, 0.5306666493415833, 0.5326666831970215, 0.5346666574478149, 0.5370000004768372, 0.5379999876022339, 0.5396666526794434, 0.5403333306312561, 0.5419999957084656, 0.5429999828338623, 0.5443333387374878, 0.5460000038146973, 0.54666668176651, 0.5496666431427002, 0.5519999861717224, 0.5526666641235352, 0.5540000200271606]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [5, 8, 2, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 7, 8, 4], [2, 1], [64], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1], [3, 1, 8, 1, 2, 0, 5, 3, 2, 2, 8, 2, 4, 8], [1, 0, 2, 3, 3, 2, 3, 2, 0, 2], [45, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 2, 1, 0, 24, 14, 10, 2], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, beta))))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.math.sqrt(tf.math.subtract(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.negative(tf.math.square(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.sqrt(sigma), sigma)), beta))), sigma))), tf.math.add(beta, tf.math.pow(tf.math.sqrt(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), beta))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10117553919553757, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [5, 8, 2, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 7, 8, 4], [1, 1], [64], [1, 1, 0, 1, 0, 1], [3, 1, 9, 1, 2, 0, 5, 3, 2, 2, 8], [1, 0, 2], [15, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 4, 2, 2, 1, 1, 0, 4, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.square(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, alpha))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [67.23713016900498, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.03579447790980339, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [3.977014607380068e+19, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [2, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [5, 8, 2, 0, 0, 9, 3, 9], [0, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 7, 8, 4], [2, 1], [64], [0, 1, 0, 1, 0, 1], [3, 1, 9, 1, 2], [0, 0, 2], [15, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 1, 4, 3, 2, 1, 0, 5, 3, 2, 3], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, beta))))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3030562487418202, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10117553919553757, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [5, 8, 2, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 7, 8, 4], [1, 1], [64], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1], [3, 1, 3, 1, 2, 0, 5, 3, 2, 2, 8, 7, 0, 7, 2, 2, 5], [1, 2, 2, 3, 3, 2, 3, 2, 2, 0, 0, 0, 3], [15, 86, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 4, 1, 1, 0, 1, 0, 2, 1, 1, 0, 0, 30, 17, 13, 3], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.square(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.math.multiply(tf.math.subtract(beta, tf.math.add(tf.math.negative(tf.math.square(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.sqrt(sigma), sigma)), beta))), sigma)), tf.math.add(tf.math.negative(beta), tf.math.add(beta, tf.math.add(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))))))), sigma))", "other_info": {"loss": [2.302712996244399, 2.3007738970022285, 2.300961728990983, 2.295218171822696, 2.310995631072468, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09285431355237961, 0.08572183549404144, 0.1018359512090683, 0.11042134463787079, 0.11596883088350296, 0.10579843819141388, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9704588481358118, 1.9675632204328264, 1.9638262476239885, 1.9590542657034737, 1.9663023948669434, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.04100000113248825, 0.04633333161473274, 0.052666667848825455, 0.0963333323597908, 0.09000000357627869, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [5, 8, 2, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 7, 8, 4], [1, 1], [64], [0, 1, 0, 1, 0, 1, 1], [7, 1, 7, 1, 2, 0, 5, 3, 2, 2, 8], [1, 0, 2, 3, 3, 2, 3], [15, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 3, 4, 1], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, sigma)))", "other_info": {"loss": [2.5132820634989425e+33, 90.20671696650936, 288.12730831961983, 601.9808264477788, 1029.8343678379827, 1575.0463411378792], "accuracy": [0.08717474341392517, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [32.20239039829799, 161.2283979143415, 389.0842023577009, 715.4166782924107, 1140.5840890066963, 1664.0287388392858], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [5, 8, 2, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [1, 7, 8, 4], [1, 1], [64], [0, 1, 0, 1, 1, 1], [3, 1, 9, 1, 2, 0, 5, 3, 2, 2, 8], [1, 0, 2], [42, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 4, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 5, 2, 3, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.square(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [2.3423137527179128, 2.6960619037271947, 2.6610808490903826, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.05005943775177002, 0.010434553027153015, 0.015453704632818699, 0.08942015469074249, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.107056277138846, 2.2978362355913435, 2.0948450905936107, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.004999999888241291, 0.01066666655242443, 0.017999999225139618, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [5, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [0, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [5, 8, 2, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 7, 8, 4], [1, 1], [64], [0, 0, 1, 1, 0, 1], [3, 1, 9, 1, 2, 0, 5, 3, 2, 2, 8], [1, 3, 2, 3, 3, 2, 3], [15, 86, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(alpha, sigma), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.5634580562930647, 17.197672713812175, 133.4623373906059, 685.2290834107687, 2700.2305637491127, 8670.90002520411], "accuracy": [0.09576013684272766, 0.09470347315073013, 0.09945846349000931, 0.10355303436517715, 0.10421344637870789, 0.09906221181154251], "val_loss": [3.365448134286063, 32.79821559361049, 204.63551112583704, 916.5618722098214, 3194.7536272321427, 9122.566964285714], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 3, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [62, 32, 5, 49, 25], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [5, 8, 2, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 7, 8, 4], [1, 1], [64], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [3, 1, 9, 1, 2, 0, 5, 3, 2, 2, 8], [1, 0, 2, 3, 2, 0, 1], [94, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 11, 8, 3, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 18, 11, 7, 3], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))))))), tf.math.pow(tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.negative(tf.math.square(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.sqrt(sigma), beta)), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))), alpha))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10117553919553757, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [5, 8, 2, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0], [8, 7, 8, 4], [0, 1], [64], [1, 1, 0, 1, 0, 1], [3, 0, 9, 1, 2], [1, 0, 2], [15, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08691058307886124, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [14, 32, 5, 49, 25], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [5, 8, 2, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 7, 8, 4], [1, 1], [64], [1, 0, 1, 1, 0, 1], [8, 0, 9, 1, 2], [1, 0, 2], [15, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08691058307886124, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [4, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [5, 8, 2, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 7, 8, 4], [1, 1], [64], [0, 1, 0, 1, 0, 1], [9, 1, 9, 1, 2, 0, 5, 3, 2, 2, 8], [2, 0, 2, 3, 3, 2, 3], [15, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 4, 1, 1, 0, 1, 0, 2, 1, 1, 0, 0, 1, 1, 0, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.square(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3031292764376246, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 2, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [5, 8, 2, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 7, 8, 4], [2, 1], [64], [1, 0, 1, 0, 0, 1], [3, 1, 9, 1, 2, 0, 5, 3, 2, 2, 8], [1, 3, 2], [40, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [99.87361748815921, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.045568618923425674, 0.10117553919553757, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1114301.5714285714, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10199999809265137, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [5, 8, 2, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 7, 8, 4], [1, 1], [64], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [5, 4, 9, 1, 2, 0, 5, 3, 2, 2, 8], [1, 0, 2, 3, 3, 2, 3], [15, 86, 13]], "fitness": -0.07599999755620956, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.square(alpha)", "other_info": {"loss": [2.302724837501051, 2.301829979357041, 2.303512324652006, 2.2995836405690477, 2.2992949407366146, 2.3015756576194457, 2.2997751050479756, 2.3002681068976667, 2.298997334044576, 2.300297316055036, 2.299586323636193, 2.2979775020522277, 2.2973276284612982, 2.2985805368631302, 2.2990089003845466, 2.299213711926651, 2.2993639425878056, 2.2994504614497346, 2.29960068326191, 2.2997052780058658], "accuracy": [0.09259014576673508, 0.08360850811004639, 0.09074098616838455, 0.09655263274908066, 0.09721305221319199, 0.09602430462837219, 0.09589222073554993, 0.09694888442754745, 0.10579843819141388, 0.09879804402589798, 0.1018359512090683, 0.10817593336105347, 0.10593052208423615, 0.1002509593963623, 0.10672302544116974, 0.09866596013307571, 0.10170386731624603, 0.09800554811954498, 0.10645885765552521, 0.09866596013307571], "val_loss": [1.9708516938345773, 1.9705447469438826, 1.970141819545201, 1.9697829655238561, 1.9695910726274763, 1.9694395746503557, 1.9693878037588937, 1.9693826266697474, 1.9693565368652344, 1.9692933218819755, 1.9691707066127233, 1.9690637588500977, 1.9690119879586356, 1.9690162113734655, 1.9690824236188615, 1.9692144393920898, 1.9693986347743444, 1.9695954322814941, 1.9698021071297782, 1.9700519016810827], "val_accuracy": [0.03966666758060455, 0.0430000014603138, 0.046666666865348816, 0.050333332270383835, 0.0560000017285347, 0.06266666948795319, 0.06366666406393051, 0.0676666647195816, 0.07066666334867477, 0.0729999989271164, 0.07466666400432587, 0.07733333110809326, 0.07733333110809326, 0.07900000363588333, 0.08033332973718643, 0.07766667008399963, 0.07533333450555801, 0.07333333045244217, 0.070333331823349, 0.06866666674613953]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [5, 8, 2, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 7, 8, 4], [2, 1], [64], [0, 1, 0, 0, 0, 1], [3, 0, 9, 1, 2], [3, 0, 2], [15, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 4, 2, 2, 0, 4, 3, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, beta), tf.math.add(sigma, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3027528718855907, 2.3020971490564976, 2.3042796298639097, 2.300644485123201, 2.300831933173332, 2.3036843135671496], "accuracy": [0.09272222965955734, 0.08334434032440186, 0.09126931428909302, 0.09496764093637466, 0.0948355570435524, 0.08915598690509796], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [5, 8, 2, 0, 0, 9, 3, 9], [2, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 7, 8, 4], [2, 1], [64], [0, 1, 0, 1, 0, 1], [3, 1, 9, 1, 2], [1, 0, 2], [15, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 17, 17, 10, 7, 4, 1, 1, 0, 1, 0, 2, 1, 1, 0, 0, 5, 3, 2, 2], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.square(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3027528718855907, 2.3020971490564976, 2.3042796298639097, 2.300644485123201, 2.300831933173332, 2.3036843135671496], "accuracy": [0.09272222965955734, 0.08334434032440186, 0.09126931428909302, 0.09496764093637466, 0.0948355570435524, 0.08915598690509796], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [1, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 2, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [5, 8, 2, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 7, 8, 4], [1, 1], [64], [0, 1, 0, 1, 0, 1], [3, 0, 9, 1, 2], [1, 0, 2], [15, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.negative(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3027528718855907, 2.3020971490564976, 2.3042796298639097, 2.300644485123201, 2.300831933173332, 2.3036843135671496], "accuracy": [0.09272222965955734, 0.08334434032440186, 0.09126931428909302, 0.09496764093637466, 0.0948355570435524, 0.08915598690509796], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [5, 8, 2, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [6, 4, 8, 4], [0, 1], [64], [0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1], [3, 1, 9, 1, 2, 0, 5, 3, 2, 2, 8], [1, 0, 2, 3, 3, 2, 3], [15, 52, 13]], "fitness": -0.03857142850756645, "mapping_values": [1, 17, 17, 10, 7, 4, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 3, 1, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.square(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3029401278404467, 2.3032580826182043, 2.3069044592641585, 2.3050261519730224, 2.30701854612849, 2.3118512040950585], "accuracy": [0.09232597798109055, 0.08017434924840927, 0.08360850811004639, 0.08519349992275238, 0.0796460211277008, 0.07528728246688843], "val_loss": [1.9715334347316198, 1.972761835370745, 1.9742678914751326, 1.9759060995919364, 1.9776227814810616, 1.979379517691476], "val_accuracy": [0.035999998450279236, 0.03166666626930237, 0.02566666714847088, 0.019333332777023315, 0.015333333052694798, 0.013333333656191826]}}]