[{"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1], [8, 9, 8, 6, 5, 2, 0, 5, 6, 8, 4, 4], [3, 0, 2, 0, 3, 1, 0, 0, 0], [31, 32, 3, 66], [1, 1, 1, 1, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 1], [3, 7, 6, 5, 5, 7, 3, 9], [4, 3, 3, 4, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [1, 3, 9, 1, 2], [3, 0, 2], [20, 52, 13]], "fitness": -0.6974285840988159, "mapping_values": [1, 2, 2, 2, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [2.2952466103945897, 2.2561169145224103, 2.1702222731198146, 1.9886618343562876, 1.6591575398436942, 1.4190572278532039, 1.364567104489371, 1.2066917886445552, 0.9953154093238892, 0.9101648245347789, 0.9183865514067359, 0.8520216033710953, 0.8148572714478978, 0.8127214001264585, 0.8033799787853152, 0.786808872133151, 0.7530020218263324, 0.7382700329900118, 0.7334567194034741, 0.7290381148837388, 0.7136314234965355, 0.7019154798038222, 0.6819104969446386, 0.672607681408314, 0.6585370107979397, 0.6462265327070934, 0.6258617393281781, 0.6212636810000295, 0.6140903954839095, 0.6048707484474681, 0.5879100927776271, 0.5812457854233524, 0.5802775605117577, 0.5484175050672744, 0.5594757005696315, 0.553142938489817, 0.5511050495993051, 0.536082269627074, 0.5351046289372297, 0.525468378515134, 0.5141867124810746, 0.5153375254913706, 0.5005479339697673, 0.5099811332809329, 0.5042691549148227, 0.5019232086289152, 0.4879163494042087, 0.4798439066045713, 0.4838382225026544, 0.47317826111381867, 0.4671007149436171, 0.47042664898904624, 0.46447663000309863, 0.45389335565815164, 0.45881964755395244, 0.45783137751608133, 0.4434584631006306, 0.4357608157559283, 0.43629295958456754, 0.44241385013672024, 0.43425514366270573, 0.4190652503266295, 0.4228076640806335, 0.42983102688636954, 0.4179030284354432, 0.4085909686092026, 0.4138533480336496, 0.4049513006899981, 0.4134689907844371, 0.39227569562222714, 0.4046465550014104, 0.38391920715165, 0.3886120919782283, 0.3878328461003672, 0.38020959960597145, 0.3736928187939532, 0.385563660862266, 0.3625548332595019, 0.3670845806181407, 0.3650968626718228, 0.36575241976363104, 0.3604965286562865, 0.35186967776829714, 0.35666812112570406, 0.3506637190224677, 0.3368627107642535, 0.3475972459166986], "accuracy": [0.11227050423622131, 0.2071060687303543, 0.3377360999584198, 0.3910976052284241, 0.45370492339134216, 0.5046889185905457, 0.5501254796981812, 0.6003170013427734, 0.6462818384170532, 0.6519614458084106, 0.6756042838096619, 0.6897371411323547, 0.6901333928108215, 0.6991150379180908, 0.6935675740242004, 0.7008321285247803, 0.7108704447746277, 0.7124554514884949, 0.7164179086685181, 0.7214370369911194, 0.7293620109558105, 0.7376832365989685, 0.7445515990257263, 0.7403249144554138, 0.7466648817062378, 0.7510236501693726, 0.7597411274909973, 0.7627789974212646, 0.7631752490997314, 0.7696473598480225, 0.7766477465629578, 0.7803460359573364, 0.778761088848114, 0.7921014428138733, 0.7935543656349182, 0.793422281742096, 0.7901201844215393, 0.8043851256370544, 0.8038568496704102, 0.8005547523498535, 0.8070268034934998, 0.8012151718139648, 0.8101968169212341, 0.805177628993988, 0.8075551390647888, 0.8049134612083435, 0.8098005652427673, 0.8178576231002808, 0.8181217908859253, 0.8210275769233704, 0.8280280232429504, 0.8274996876716614, 0.8260467648506165, 0.8329150676727295, 0.8329150676727295, 0.8318583965301514, 0.8337075710296631, 0.8352925777435303, 0.8323867321014404, 0.828820526599884, 0.8341038227081299, 0.8413683772087097, 0.8388587832450867, 0.8355567455291748, 0.8387266993522644, 0.8454629778862, 0.8436138033866882, 0.8428213000297546, 0.8425571322441101, 0.8498216867446899, 0.8453308939933777, 0.8508783578872681, 0.8536521196365356, 0.8512746095657349, 0.8562937378883362, 0.8593316674232483, 0.8518029451370239, 0.852331280708313, 0.856689989566803, 0.863029956817627, 0.8627657890319824, 0.8622375130653381, 0.8656716346740723, 0.8598600029945374, 0.8557654023170471, 0.8665962219238281, 0.8650112152099609], "val_loss": [1.9489764486040388, 1.8920350074768066, 1.7746246882847376, 1.5081006458827428, 1.1130268233163017, 0.8509410790034703, 0.7456118379320417, 0.7285089152199882, 0.6630050965717861, 0.6998193945203509, 0.6863588265010289, 0.619523320879255, 0.6093164001192365, 0.6005562714168003, 0.6000819206237793, 0.5847689083644322, 0.5682864189147949, 0.572758640561785, 0.5726819038391113, 0.5611588954925537, 0.5486025299344744, 0.5333357368196759, 0.5180080447878156, 0.5066183975764683, 0.48774867398398264, 0.4792682613645281, 0.47454285621643066, 0.47736510208674837, 0.4754735401698521, 0.46239510604313444, 0.4511302539280483, 0.4447669301714216, 0.44061076641082764, 0.44223242146628244, 0.44515275955200195, 0.44138399192265104, 0.4338845270020621, 0.42849280153002056, 0.42824224063328337, 0.42716323477881296, 0.4260139635631016, 0.42860792364392963, 0.42997649737766813, 0.43150804724012104, 0.43054055316107614, 0.4204423427581787, 0.4166102409362793, 0.4146289655140468, 0.4163548265184675, 0.4158593160765512, 0.4085944550377982, 0.4033040234020778, 0.39999284063066753, 0.40085476636886597, 0.40277762923921856, 0.40188957963671, 0.3999006748199463, 0.39709843908037457, 0.39275061232703073, 0.3909022467476981, 0.38704075132097515, 0.383576716695513, 0.38609522581100464, 0.3896248085158212, 0.3916810325213841, 0.3926428641591753, 0.3833136899130685, 0.3773300732885088, 0.3747496349470956, 0.3722589186259678, 0.3730930430548532, 0.38184761149542673, 0.38617112806865145, 0.3754515903336661, 0.3690791130065918, 0.3699332986559187, 0.36609959602355957, 0.3681072337286813, 0.3733972566468375, 0.3889804993356977, 0.393913950238909, 0.3823039787156241, 0.37518666471753803, 0.37029495409556795, 0.36739661012377056, 0.372781549181257, 0.37957427331379484], "val_accuracy": [0.24766667187213898, 0.3943333327770233, 0.4449999928474426, 0.5103333592414856, 0.6056666374206543, 0.6776666641235352, 0.6933333277702332, 0.7149999737739563, 0.7123333215713501, 0.7136666774749756, 0.7289999723434448, 0.7296666502952576, 0.7350000143051147, 0.7336666584014893, 0.7379999756813049, 0.7413333058357239, 0.746999979019165, 0.746666669845581, 0.7549999952316284, 0.7646666765213013, 0.7673333287239075, 0.7726666927337646, 0.7739999890327454, 0.7763333320617676, 0.7889999747276306, 0.7876666784286499, 0.7866666913032532, 0.7863333225250244, 0.7896666526794434, 0.7960000038146973, 0.8029999732971191, 0.8090000152587891, 0.8149999976158142, 0.8173333406448364, 0.8186666369438171, 0.8186666369438171, 0.8230000138282776, 0.8183333277702332, 0.8169999718666077, 0.8203333616256714, 0.8223333358764648, 0.8253333568572998, 0.828000009059906, 0.8220000267028809, 0.824999988079071, 0.8276666402816772, 0.8263333439826965, 0.82833331823349, 0.8320000171661377, 0.8353333473205566, 0.8309999704360962, 0.8330000042915344, 0.8379999995231628, 0.8416666388511658, 0.840666651725769, 0.8389999866485596, 0.8396666646003723, 0.8396666646003723, 0.8423333168029785, 0.8450000286102295, 0.8426666855812073, 0.8460000157356262, 0.8483333587646484, 0.8473333120346069, 0.8493333458900452, 0.8500000238418579, 0.8523333072662354, 0.8539999723434448, 0.8526666760444641, 0.8539999723434448, 0.8576666712760925, 0.8543333411216736, 0.8510000109672546, 0.856333315372467, 0.856333315372467, 0.8586666584014893, 0.8573333621025085, 0.8569999933242798, 0.859333336353302, 0.8613333106040955, 0.8629999756813049, 0.8656666874885559, 0.8610000014305115, 0.8600000143051147, 0.8636666536331177, 0.8629999756813049, 0.8629999756813049]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0], [0, 8, 8, 6, 5, 2, 6, 2, 3, 5, 4, 4], [3, 0, 2, 0, 3, 1, 0, 0, 0], [31, 32, 3, 66], [1, 1, 1, 1, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 1], [3, 7, 6, 5, 5, 7, 3, 9], [4, 3, 3, 4, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [1, 3, 9, 1, 2], [3, 0, 2], [20, 52, 13]], "fitness": -0.6902857422828674, "mapping_values": [1, 16, 16, 10, 6, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(grad, tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.square(alpha))))))))))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [2.2952466103945897, 2.2561169145224103, 2.1702222416287857, 1.9886632759526044, 1.6591576591474568, 1.4190551714732773, 1.3645783201452448, 1.2066605754296038, 0.9952968901032864, 0.9102029973773152, 0.918392949431186, 0.8519623938363856, 0.8147484008205597, 0.8124549326218351, 0.8032920335214907, 0.7867790554980907, 0.7528614723813092, 0.7384055980901046, 0.7338734900222368, 0.7295127858370523, 0.7137784684858522, 0.7015586258586939, 0.6815051260310677, 0.6726789173590525, 0.6587543511718192, 0.6463523650244951, 0.6260663311258834, 0.6214333702827946, 0.614276322021366, 0.6052424558999909, 0.5883072443673514, 0.5814364701922795, 0.5801517130078074, 0.5485812547798595, 0.5608078994062583, 0.5539569793643733, 0.5509551909259282, 0.5358451654362782, 0.5353274652514207, 0.5266412380128693, 0.5143601604739925, 0.5165831021203845, 0.5031407694885239, 0.5104379899245779, 0.5061411035531673, 0.5022971797549981, 0.48693692403903427, 0.48012707077075994, 0.4851223286179787, 0.4734110676451854, 0.4667029386820999, 0.4715184023698024, 0.4657167069050047, 0.45388242830264647, 0.4570169080210683, 0.4562216688967526, 0.444748920401436, 0.4384584586145761, 0.4353155811756294, 0.44221232240430874, 0.43196881671607484, 0.4169969235814684, 0.42510673897361806, 0.42831981278539666, 0.4155712599736069, 0.4100004097592199, 0.4153931728797802, 0.41055396482252, 0.41685493016649217, 0.3962854202617791, 0.40950251626237794, 0.3882878782837036, 0.3900127881089096, 0.39043574444747886, 0.37984238794262165, 0.3730903392368068, 0.38860340674067406, 0.3650292672650878, 0.3749859968054926, 0.3693395546752984], "accuracy": [0.11227050423622131, 0.2071060687303543, 0.3377360999584198, 0.3910976052284241, 0.45370492339134216, 0.5048210024833679, 0.5502575635910034, 0.6003170013427734, 0.6465460062026978, 0.6520935297012329, 0.6752080321311951, 0.689869225025177, 0.689869225025177, 0.6993792057037354, 0.6936996579170227, 0.7004358768463135, 0.7112666964530945, 0.711530864238739, 0.7164179086685181, 0.722229540348053, 0.7302865982055664, 0.7376832365989685, 0.7450799345970154, 0.7388719916343689, 0.746268630027771, 0.750759482383728, 0.7594769597053528, 0.7629110813140869, 0.7635715007781982, 0.7705719470977783, 0.7763835787773132, 0.7795535326004028, 0.778232753276825, 0.7906485199928284, 0.7942147850990295, 0.7943468689918518, 0.7907806038856506, 0.8041210174560547, 0.802271842956543, 0.8009510040283203, 0.8043851256370544, 0.7991018295288086, 0.8104609847068787, 0.8062343001365662, 0.8070268034934998, 0.8049134612083435, 0.8112534880638123, 0.8156121969223022, 0.8186501264572144, 0.8238013386726379, 0.8284242749214172, 0.8271034359931946, 0.8248580098152161, 0.8322546482086182, 0.8335754871368408, 0.832650899887085, 0.8323867321014404, 0.8333113193511963, 0.8354246616363525, 0.8317263126373291, 0.8347642421722412, 0.8412362933158875, 0.8355567455291748, 0.8334434032440186, 0.8389908671379089, 0.8417646288871765, 0.8411042094230652, 0.8425571322441101, 0.8381983637809753, 0.8467837572097778, 0.8438779711723328, 0.8495575189590454, 0.8516708612442017, 0.8521991968154907, 0.8536521196365356, 0.8584070801734924, 0.8511425256729126, 0.8539162874221802, 0.8552370667457581, 0.858671247959137], "val_loss": [1.9489764486040388, 1.8920350755964006, 1.7746248245239258, 1.508103575025286, 1.1130216121673584, 0.8509325640542167, 0.7456087384905133, 0.7285143477576119, 0.6629644462040493, 0.6997795956475394, 0.6862416097096035, 0.6195448296410697, 0.609076738357544, 0.6004599843706403, 0.600091644695827, 0.5847448451178414, 0.5681718247277396, 0.5729330096926007, 0.57313300882067, 0.5614300114767892, 0.5485406773430961, 0.5331092391695295, 0.5177586078643799, 0.5064389024462018, 0.4874323776790074, 0.47882074969155447, 0.4741866077695574, 0.4771348919187273, 0.47542519228799, 0.46237553868974957, 0.45132490566798616, 0.4450813702174595, 0.4410142387662615, 0.44307402202061247, 0.44629406929016113, 0.44179487228393555, 0.4336110694067819, 0.4287117804799761, 0.4284790669168745, 0.4273491416658674, 0.4271301712308611, 0.43068431104932514, 0.4306272097996303, 0.43072893789836336, 0.42979184218815397, 0.41881816727774485, 0.41600742510386873, 0.41611247403281076, 0.41911572217941284, 0.41857244287218365, 0.4106175218309675, 0.4049914138657706, 0.40184980630874634, 0.40116182395390104, 0.402841397694179, 0.4027524675641741, 0.40269324609211515, 0.40036995921816143, 0.3956987942968096, 0.39415214742933, 0.38986451285226004, 0.3872606839452471, 0.3909394996506827, 0.3942298207964216, 0.4002121772084917, 0.3994204657418387, 0.38800486496516634, 0.3820535029683794, 0.37990287372044157, 0.3802884135927473, 0.3804911715643747, 0.38684228488377165, 0.3888631207602365, 0.3781135678291321, 0.37447220938546316, 0.37914179052625385, 0.37606968198503765, 0.37919742720467703, 0.3855991618973868, 0.3927691664014544], "val_accuracy": [0.24766667187213898, 0.3943333327770233, 0.4449999928474426, 0.5099999904632568, 0.6056666374206543, 0.6776666641235352, 0.6933333277702332, 0.7153333425521851, 0.7123333215713501, 0.7153333425521851, 0.7289999723434448, 0.7306666374206543, 0.7360000014305115, 0.7333333492279053, 0.7386666536331177, 0.7403333187103271, 0.7476666569709778, 0.746666669845581, 0.7543333172798157, 0.765333354473114, 0.7666666507720947, 0.7726666927337646, 0.7743333578109741, 0.7756666541099548, 0.7879999876022339, 0.7886666655540466, 0.7856666445732117, 0.7873333096504211, 0.7903333306312561, 0.7943333387374878, 0.8050000071525574, 0.8090000152587891, 0.8136666417121887, 0.8163333535194397, 0.8159999847412109, 0.8196666836738586, 0.8236666917800903, 0.8169999718666077, 0.8149999976158142, 0.8183333277702332, 0.8226666450500488, 0.8243333101272583, 0.824999988079071, 0.8223333358764648, 0.8213333487510681, 0.8270000219345093, 0.8243333101272583, 0.8270000219345093, 0.8339999914169312, 0.8353333473205566, 0.8299999833106995, 0.8333333134651184, 0.8383333086967468, 0.8413333296775818, 0.8416666388511658, 0.8413333296775818, 0.8360000252723694, 0.8396666646003723, 0.843999981880188, 0.8453333377838135, 0.8443333506584167, 0.8443333506584167, 0.8456666469573975, 0.8450000286102295, 0.8446666598320007, 0.846666693687439, 0.8510000109672546, 0.8503333330154419, 0.8513333201408386, 0.8503333330154419, 0.8536666631698608, 0.8529999852180481, 0.8506666421890259, 0.8546666502952576, 0.8573333621025085, 0.8573333621025085, 0.8566666841506958, 0.8546666502952576, 0.8526666760444641, 0.8556666374206543]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 8, 8, 6, 1, 2, 6, 2, 3, 5, 9, 4, 3, 9], [3, 0, 2, 0, 3, 1, 1, 0, 0, 3], [31, 32, 73, 24, 44], [0, 1, 1, 1, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 1], [3, 7, 6, 5, 5, 7, 3, 9], [4, 3, 3, 4, 1, 5, 1, 4, 5, 5, 4, 3, 0], [98, 75], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 0, 1], [1, 6, 9, 1, 2], [3, 0, 2], [20, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 21, 21, 14, 7, 4, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), grad)))))), tf.math.pow(tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.divide_no_nan(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [135.44786937050043, 1889.51822306127, 8339.28252245926, 22538.028428016856, 47566.28521403629, 86947.81897206446], "accuracy": [0.10117553919553757, 0.09866596013307571, 0.10130762308835983, 0.09417514503002167, 0.09959053993225098, 0.1022322028875351], "val_loss": [413.9690726143973, 2852.084054129464, 9270.802734375, 21615.270647321428, 41827.55803571428, 71851.54464285714], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [0, 8, 8, 6, 1, 2, 6, 2, 3, 5, 4, 4], [0, 2, 2, 0, 3, 1, 0, 0, 0], [17, 32, 3, 66], [0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 1, 1, 0, 1], [3, 7, 6, 5, 5, 7, 3, 9], [4, 3, 3, 4, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 0, 0, 0, 1, 0, 1, 1, 1], [1, 3, 9, 1, 2], [3, 0, 2, 0], [7, 56, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 12, 7, 5, 2, 9, 9, 5, 4, 0, 1, 0, 0, 0, 0, 9, 5, 4, 3], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))), tf.math.add(beta, grad)), tf.math.square(grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, tf.math.add(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), beta))), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [5.627005625331658, 5.416014329648021, 2.3557327526466896, 2.34006246291037, 2.4068700326290493, 2.7673942439701924], "accuracy": [0.10117553919553757, 0.09787346422672272, 0.09866596013307571, 0.09377889335155487, 0.09972262382507324, 0.10130762308835983], "val_loss": [9.235390799386161, 1.9964056696210588, 1.9778054782322474, 1.9811158861432756, 1.9767308235168457, 1.972719396863665], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1], [0, 8, 8, 6, 5, 8, 6, 2, 3, 5, 2, 4], [3, 0, 2, 0, 3, 1, 0, 0, 0], [31, 32, 80, 66], [1, 1, 1, 1, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 1], [3, 7, 6, 5, 5, 7, 3, 9], [4, 3, 3, 4, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 0, 0, 1, 1, 1], [1, 3, 9, 1, 2], [0, 0, 2], [20, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 6, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 3, 2, 3], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.sqrt(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))))))))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3030133264695554, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10210011899471283, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [1, 0, 0, 0, 1, 0, 0, 1, 0, 1], [0, 8, 8, 6, 1, 2, 6, 2, 3, 5, 4, 4], [2, 2, 2, 0, 3, 1, 0, 0, 0], [31, 32], [1, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [3, 2, 6, 9, 8, 7, 3, 9], [2, 3, 3, 4, 3, 2, 3, 2, 0, 2, 2, 2, 1, 0, 2, 1, 0, 1, 2, 2, 1], [98, 49, 80, 73, 7, 92], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 0, 0, 1, 1, 1], [1, 3, 9, 1, 2], [3, 0, 2], [7, 59, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 7, 7, 4, 3, 1, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.divide_no_nan(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), sigma), tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [824694588.6918292, 15488885142.299828, 73075230158.7003, 202255342565.35516, 432227728124.7201, 796005277437.3964], "accuracy": [0.10130762308835983, 0.09813763201236725, 0.1014397069811821, 0.09430722147226334, 0.09972262382507324, 0.10210011899471283], "val_loss": [3056170569.142857, 24440998180.57143, 82479029101.71428, 195494618258.2857, 381813241563.4286, 659755930185.1428], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0], [1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1], [0, 8, 8, 6, 5, 2, 6, 2, 3, 5, 4, 4], [3, 0, 2, 0, 1, 1, 0, 0, 0], [31, 32, 3, 66], [1, 1, 1, 1, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 1], [3, 7, 6, 5, 5, 7, 3, 9], [4, 3, 3, 4, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 0, 1, 1], [1, 3, 9, 1, 2], [3, 0, 2], [20, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [17.30175674306466, 160.19251739860698, 590.52320947472, 1484.6686849517278, 3026.862615901497, 5426.050973183034], "accuracy": [0.10130762308835983, 0.09853387624025345, 0.10117553919553757, 0.09417514503002167, 0.09945846349000931, 0.10249637067317963], "val_loss": [42.454268319266184, 216.1512930733817, 626.6127406529018, 1393.974574497768, 2631.2282366071427, 4454.309849330357], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1], [0, 8, 8, 6, 1, 2, 6, 1, 3, 5, 4, 4, 9], [3, 2, 2, 0, 3, 1, 0, 0, 0], [31, 32, 3, 66], [0, 0, 1, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 0, 1, 1], [3, 7, 6, 5, 5, 7, 3, 9], [0, 3, 3, 4, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [4, 3, 4, 1, 2], [2, 0, 2, 0], [20, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 21, 21, 13, 8, 4, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.multiply(grad, tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))))))), tf.math.pow(tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), alpha))), tf.math.add(alpha, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.pow(beta, tf.math.multiply(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10210011899471283, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1], [0, 8, 8, 6, 1, 2, 6, 2, 3, 5, 4, 4], [2, 2, 2, 0, 0, 1, 0, 0, 0], [47, 32, 3, 66], [0, 1, 1, 1, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 1], [3, 7, 6, 5, 5, 7, 3, 9], [4, 3, 3, 4, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 1, 1, 1, 1], [1, 3, 9, 1, 2], [3, 0, 2], [20, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 6, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [45.524917747145864, 521.6996940519076, 2150.6403585768267, 5677.204004693072, 11850.742538990267, 21531.070271224078], "accuracy": [0.10117553919553757, 0.09853387624025345, 0.1014397069811821, 0.09417514503002167, 0.09959053993225098, 0.1022322028875351], "val_loss": [125.40030779157367, 752.2601143973214, 2355.3069893973216, 5407.592215401785, 10383.68247767857, 17753.565290178572], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 8, 8, 6, 6, 2, 6, 2, 3, 5, 4, 4], [3, 0, 2, 0, 3, 1, 0, 0, 0], [31, 32, 3, 66], [1, 1, 1, 1, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 1], [3, 7, 6, 5, 5, 7, 3, 9], [4, 3, 3, 4, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 0, 1, 1], [1, 3, 9, 1, 2], [3, 0, 2], [20, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 3, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [17.30175674306466, 160.19251739860698, 590.52320947472, 1484.6686849517278, 3026.862615901497, 5426.050973183034], "accuracy": [0.10130762308835983, 0.09853387624025345, 0.10117553919553757, 0.09417514503002167, 0.09945846349000931, 0.10249637067317963], "val_loss": [42.454268319266184, 216.1512930733817, 626.6127406529018, 1393.974574497768, 2631.2282366071427, 4454.309849330357], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [1, 0, 0, 0, 1, 0, 0, 1, 0, 1], [0, 8, 8, 6, 1, 2, 6, 2, 3, 5, 4, 4], [3, 2, 2, 0, 3, 1, 0, 0, 0], [31, 32], [0, 0, 1, 1, 1, 0, 0, 1, 0], [0, 1, 0, 1, 0, 1, 1, 0, 1], [3, 4, 6, 5, 1, 7, 3, 9], [4, 0, 3, 4, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [1, 0, 0, 0, 1, 0, 1], [4, 3, 4, 1, 2], [2, 0, 2, 0], [7, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 7, 7, 3, 4, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.pow(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08809932321310043, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [9, 8, 8, 6, 5, 2, 6, 2, 3, 5, 4, 4], [2, 2, 2, 0, 3, 1, 0, 1, 0], [2, 32, 3, 66], [1, 1, 1, 1, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 1], [3, 7, 6, 5, 5, 7, 3, 9], [4, 3, 3, 4, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 0, 0, 1, 1, 1], [1, 3, 9, 1, 2], [3, 0, 2], [7, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), sigma), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [301762246.6566951, 5666190056.296923, 26730770095.49069, 73982269359.65976, 158099998262.57455, 291159782280.03064], "accuracy": [0.10130762308835983, 0.09813763201236725, 0.1014397069811821, 0.09430722147226334, 0.09972262382507324, 0.10210011899471283], "val_loss": [1118118326.857143, 8940659858.285715, 30169999652.57143, 71508478244.57143, 139658082011.42856, 241321827181.7143], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0], [0, 8, 8, 6, 5, 2, 0, 2, 3, 5, 4, 4], [3, 0, 2, 0, 3, 1, 0, 0, 0], [85, 32, 3, 66], [1, 1, 1, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1], [3, 7, 6, 5, 5, 7, 3, 9], [4, 3, 3, 4, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [1, 3, 9, 1, 2], [3, 0, 2], [15, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 12, 8, 4, 2, 8, 8, 4, 4, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.add(grad, tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))))))))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))), tf.math.add(beta, grad)), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [2.3030077179173247, 2.3025823820378912, 2.3026056727083244, 2.3026245297883023, 2.3026772820167003, 2.3027836307479785], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9736370359148299, 1.9736168725149972, 1.973611899784633, 1.973621436527797, 1.9736446653093611, 1.9736814498901367], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [0, 8, 8, 6, 1, 2, 6, 2, 3, 5, 4, 4], [3, 0, 2, 0, 3, 1, 0, 0, 0], [31, 32, 3, 66], [1, 1, 1, 1, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 1], [3, 7, 6, 5, 5, 7, 3, 9], [4, 3, 3, 4, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1], [1, 3, 8, 1, 2, 1, 2], [3, 0, 2, 1, 1, 2, 3], [7, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 3, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 7, 7, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(alpha, tf.math.square(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))))))))))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.sqrt(tf.math.subtract(sigma, tf.math.add(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), beta))), alpha), tf.math.subtract(tf.math.add(alpha, beta), sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10210011899471283, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0], [0, 8, 8, 6, 5, 2, 6, 2, 3, 5, 4, 4], [3, 0, 2, 0, 3, 1, 0, 0, 0], [31, 32, 3, 66], [1, 1, 1, 1, 0, 0, 0, 1, 0], [0, 0, 0, 1, 0, 1, 1, 0, 1], [3, 7, 6, 5, 5, 7, 3, 9], [4, 3, 3, 4, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 0, 0, 1, 1, 1], [1, 3, 9, 1, 2], [3, 3, 2], [20, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 5, 4, 0, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))), tf.math.add(beta, grad)), tf.math.square(tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), sigma), sigma)", "other_info": {"loss": [2.301623857504719, 2.303185012189074, 2.3020211742097803, 2.304459399991835, 2.3016818979271116, 2.3022856052919165], "accuracy": [0.09642054885625839, 0.0866464152932167, 0.0944393053650856, 0.08453308790922165, 0.0936468094587326, 0.09232597798109055], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [0, 8, 8, 6, 5, 2, 8, 2, 9, 0, 4, 4], [2, 1, 2, 2, 3, 1, 0, 0, 0, 3], [31, 32, 73, 24, 44], [0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1], [3, 7, 6, 5, 5, 7, 3, 9, 8, 7, 5, 9, 5, 7, 5, 6, 6, 1, 1], [3, 2, 3, 4, 2, 5, 1, 4, 5, 5, 4, 3, 0], [98, 75, 69], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [1, 1, 0, 0, 1, 1], [1, 2, 9, 1, 2], [3, 0, 2], [7, 59, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 12, 12, 8, 4, 0, 18, 18, 13, 5, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(alpha, grad)))), tf.math.add(alpha, grad))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, beta)))), tf.math.add(beta, grad)), tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.square(tf.math.add(beta, beta)))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.301623857504719, 2.303185012189074, 2.3020211742097803, 2.304459399991835, 2.3016818979271116, 2.3022856052919165], "accuracy": [0.09642054885625839, 0.0866464152932167, 0.0944393053650856, 0.08453308790922165, 0.0936468094587326, 0.09232597798109055], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [1, 0, 0, 0, 1, 0, 0, 1, 0, 1], [0, 8, 8, 6, 5, 2, 6, 2, 4, 0, 4, 4], [2, 2, 2, 0, 3, 1, 0, 1, 0], [31, 32], [1, 1, 1, 1, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 1], [3, 7, 6, 5, 5, 7, 3, 9], [0, 3, 3, 4, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 0, 1, 1], [8, 3, 9, 1, 2], [3, 0, 2], [87, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(sigma)", "other_info": {"loss": [2.301623857504719, 2.303185012189074, 2.3020211742097803, 2.304459399991835, 2.3016818979271116, 2.3022856052919165], "accuracy": [0.09642054885625839, 0.0866464152932167, 0.0944393053650856, 0.08453308790922165, 0.0936468094587326, 0.09232597798109055], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [0, 8, 8, 3, 9, 2, 6, 2, 3, 5, 9, 4], [2, 2, 2, 0, 3, 1, 0, 1, 0], [89, 32, 3, 66], [1, 1, 1, 1, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 1], [3, 7, 6, 5, 5, 7, 3, 9], [3, 3, 3, 4, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [1, 0, 9, 1, 2], [3, 3, 2], [26, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.negative(sigma))", "other_info": {"loss": [2.301623857504719, 2.303185012189074, 2.3020211742097803, 2.304459399991835, 2.3016818979271116, 2.3022856052919165], "accuracy": [0.09642054885625839, 0.0866464152932167, 0.0944393053650856, 0.08453308790922165, 0.0936468094587326, 0.09232597798109055], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1], [1, 8, 8, 6, 5, 2, 6, 2, 3, 5, 4, 4], [3, 0, 2, 0, 3, 1, 0, 0, 0], [31, 32, 3, 66], [0, 1, 1, 1, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 1], [3, 7, 6, 5, 5, 7, 3, 9], [4, 3, 3, 4, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 0, 0, 0, 1, 1, 1, 1, 1], [1, 3, 4, 4, 2], [3, 2, 2, 3, 3], [7, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 5, 5, 3, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 4, 5, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.pow(tf.math.pow(sigma, beta), beta), sigma), sigma)", "other_info": {"loss": [2.301623857504719, 2.303185012189074, 2.3020211742097803, 2.304459399991835, 2.3016818979271116, 2.3022856052919165], "accuracy": [0.09642054885625839, 0.0866464152932167, 0.0944393053650856, 0.08453308790922165, 0.0936468094587326, 0.09232597798109055], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 8, 6, 6, 5, 2, 2, 2, 4, 0, 4, 4], [2, 2, 2, 0, 3, 1, 0, 0, 0], [31, 32, 3, 66], [1, 1, 1, 1, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 1], [3, 7, 6, 5, 5, 7, 3, 9], [4, 3, 3, 4, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [5, 3, 9, 1, 2], [3, 0, 2], [20, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 5, 5, 3, 2, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.square(sigma)", "other_info": {"loss": [2.301623857504719, 2.303185012189074, 2.3020211742097803, 2.304459399991835, 2.3016818979271116, 2.3022856052919165], "accuracy": [0.09642054885625839, 0.0866464152932167, 0.0944393053650856, 0.08453308790922165, 0.0936468094587326, 0.09232597798109055], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}]