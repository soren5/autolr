[{"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [2, 4, 1, 3, 2, 1, 0, 1, 8, 8, 2, 3, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [4, 1, 3, 3, 0, 3, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8374285697937012, "mapping_values": [1, 4, 4, 2, 2, 1, 17, 17, 9, 8, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.subtract(tf.math.negative(tf.math.subtract(tf.math.add(beta, grad), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))))), tf.math.sqrt(grad))), grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.1176259168276714, 2.0076556012079685, 1.9705864151534056, 1.6930473319543524, 0.9209563488642837, 0.7889037564162644, 0.6899251623900654, 0.6371921154612232, 0.6293950625430198, 0.6038247539052055, 0.5741169518719669, 0.5641559846192429, 0.5384514904245803, 0.520763573928705, 0.5161914694633593, 0.5266486660380169, 0.49518575042135854, 0.5047775548935063, 0.47923440061162226, 0.4653868179956778, 0.46496180559209216, 0.4363521097508152, 0.4597477624287553, 0.42348924122151443, 0.42760470439855214, 0.41175089336625653, 0.4134960879841501, 0.41102667121193776, 0.38902476020555893, 0.3935718549681913, 0.39449613225175056, 0.379141625061704, 0.36611309311393386, 0.3656401509787381, 0.36423709980721297, 0.35949107116522994, 0.3463237149415314, 0.33988293686547316, 0.3648973340686475, 0.3331829975538124, 0.33054903088984566, 0.3402303834010928, 0.31131661033129665, 0.3180516232132298, 0.3031073151412909, 0.31155473848438503, 0.3049115127639181, 0.3085112892806711], "accuracy": [0.2996962070465088, 0.34328359365463257, 0.308149516582489, 0.40430590510368347, 0.6779817938804626, 0.7074362635612488, 0.7416457533836365, 0.7609298825263977, 0.7646281719207764, 0.7736098170280457, 0.7893276810646057, 0.7930260300636292, 0.796328067779541, 0.8055738806724548, 0.8064984679222107, 0.8038568496704102, 0.8136309385299683, 0.8078193068504333, 0.817989706993103, 0.8278959393501282, 0.8261788487434387, 0.835160493850708, 0.8302733898162842, 0.8429533839225769, 0.8486329317092896, 0.8457271456718445, 0.8473120927810669, 0.8462554216384888, 0.854708731174469, 0.8499537706375122, 0.8532558679580688, 0.8599920868873596, 0.8603883385658264, 0.8588033318519592, 0.8631620407104492, 0.8610487580299377, 0.872407853603363, 0.8708229064941406, 0.8607845902442932, 0.8705587387084961, 0.874389111995697, 0.8721436858177185, 0.8809932470321655, 0.8749174475669861, 0.8825782537460327, 0.8841632604598999, 0.885219931602478, 0.8816536664962769], "val_loss": [1.402247599193028, 1.921222414289202, 1.8479645592825753, 0.7250588110515049, 0.6643876518521991, 0.5292949335915702, 0.49139698914119173, 0.487955059323992, 0.501476526260376, 0.44798856122153147, 0.4428492103304182, 0.4248681238719395, 0.42664659874779837, 0.4103345274925232, 0.4075651935168675, 0.42746191365378244, 0.3982762524059841, 0.3908708691596985, 0.3833475964409964, 0.4234253764152527, 0.39301598072052, 0.38046495403562275, 0.3781313214983259, 0.39260369539260864, 0.36015174218586515, 0.37054044008255005, 0.35660903794424875, 0.3663882953780038, 0.3625638314655849, 0.34750118425914217, 0.38370237180164884, 0.3563200320516314, 0.35255396366119385, 0.3559348498071943, 0.34381626333509174, 0.34531635897500174, 0.3338332772254944, 0.3651993785585676, 0.367461485522134, 0.3503177506583078, 0.352600634098053, 0.3416155661855425, 0.34527553830827984, 0.3474736383983067, 0.3624510679926191, 0.34189891815185547, 0.3627450636454991, 0.3427428347723825], "val_accuracy": [0.367333322763443, 0.21266666054725647, 0.23933333158493042, 0.6986666917800903, 0.7110000252723694, 0.762333333492279, 0.7860000133514404, 0.7929999828338623, 0.7723333239555359, 0.8100000023841858, 0.8130000233650208, 0.8180000185966492, 0.8169999718666077, 0.8253333568572998, 0.8240000009536743, 0.8163333535194397, 0.8293333053588867, 0.8293333053588867, 0.8293333053588867, 0.8133333325386047, 0.8330000042915344, 0.8349999785423279, 0.8376666903495789, 0.8299999833106995, 0.846666693687439, 0.8353333473205566, 0.8489999771118164, 0.8353333473205566, 0.8493333458900452, 0.8513333201408386, 0.8366666436195374, 0.847000002861023, 0.8526666760444641, 0.8496666550636292, 0.8553333282470703, 0.8560000061988831, 0.8610000014305115, 0.8446666598320007, 0.8496666550636292, 0.8476666808128357, 0.8539999723434448, 0.862333357334137, 0.8640000224113464, 0.8519999980926514, 0.8479999899864197, 0.862666666507721, 0.8460000157356262, 0.8569999933242798]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [2, 4, 1, 3, 2, 1, 0, 1, 8, 8, 2, 3, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [4, 1, 3, 3, 0, 3, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8371428847312927, "mapping_values": [1, 4, 4, 2, 2, 1, 18, 18, 10, 8, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.subtract(tf.math.negative(tf.math.subtract(tf.math.add(beta, grad), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(grad))))))), grad)), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.1176256876832, 2.003885320495416, 1.9138995582684866, 1.501922004604856, 0.8132755456741034, 0.7782285259919727, 0.6971401017198096, 0.6239180836096857, 0.5993030867824118, 0.5852495522200549, 0.5681254467660599, 0.5456290563666636, 0.5291004730780929, 0.5254206909810264, 0.5243270760750207, 0.5164270601244556, 0.48918686783734155, 0.4888324036322344, 0.4667147113985279, 0.46785197645650173, 0.4569327391732276, 0.4590297501832896], "accuracy": [0.2996962070465088, 0.3465856611728668, 0.3459252417087555, 0.4861973226070404, 0.6983225345611572, 0.7124554514884949, 0.7368907928466797, 0.767401933670044, 0.7770439982414246, 0.7799497842788696, 0.7915731072425842, 0.7991018295288086, 0.8018755912780762, 0.8053097128868103, 0.8031964302062988, 0.805177628993988, 0.819442629814148, 0.8158763647079468, 0.8255184292793274, 0.8274996876716614, 0.8309338092803955, 0.8259146809577942], "val_loss": [1.402247326714652, 1.9210323606218611, 1.4621521404811315, 0.6901958329336983, 0.6853986978530884, 0.5151467834200177, 0.4927293062210083, 0.46636918612888884, 0.5014861140932355, 0.43957986150469097, 0.43763933862958637, 0.4399572099958147, 0.4198894074984959, 0.44668471813201904, 0.4097517899104527, 0.4236238939421518, 0.39584911721093313, 0.38076208318982807, 0.38332466568265644, 0.3989880510738918, 0.41112376962389263, 0.39477172919682096], "val_accuracy": [0.367333322763443, 0.20533333718776703, 0.4933333396911621, 0.7070000171661377, 0.6946666836738586, 0.7710000276565552, 0.7846666574478149, 0.7979999780654907, 0.765999972820282, 0.8090000152587891, 0.809333324432373, 0.8100000023841858, 0.8216666579246521, 0.8003333210945129, 0.8333333134651184, 0.8230000138282776, 0.8363333344459534, 0.8349999785423279, 0.8363333344459534, 0.8233333230018616, 0.8083333373069763, 0.8339999914169312]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [2, 4, 1, 3, 2, 1, 0, 1, 8, 8, 2, 3, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [4, 1, 3, 3, 0, 3, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8311428427696228, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.117594641811576, 1.8877665868697937, 1.9322749903299363, 1.3179937991578234, 0.845757429869955, 0.7934163017453078, 0.6875466317186392, 0.6411224849361706, 0.5998134513368003, 0.5835043016426033, 0.5530616306098162, 0.548475046947317, 0.5280950945980277, 0.524204364581556, 0.49753317257763136, 0.5007542907845279, 0.47953417139471544, 0.46680407586067485, 0.4570437444435717, 0.4462342433657991, 0.45618298224265375, 0.42788480848306204, 0.45726720489027195, 0.4162089690564095, 0.4306938477345682, 0.40476896134286966, 0.39845101260757876, 0.40439154992423526], "accuracy": [0.29982829093933105, 0.3681151866912842, 0.33443403244018555, 0.5540879964828491, 0.6868313550949097, 0.7104741930961609, 0.7498348951339722, 0.7531369924545288, 0.7757231593132019, 0.7790252566337585, 0.7922335267066956, 0.7906485199928284, 0.7989697456359863, 0.8104609847068787, 0.8144234418869019, 0.809140145778656, 0.8204993009567261, 0.8259146809577942, 0.8284242749214172, 0.8364813327789307, 0.8277638554573059, 0.8384625315666199, 0.8310658931732178, 0.8409721255302429, 0.843481719493866, 0.8470479249954224, 0.8527275323867798, 0.8494254350662231], "val_loss": [1.4036005565098353, 1.9410398347037179, 0.9394994122641427, 0.7945305279323033, 0.64242913041796, 0.530855621610369, 0.50736175264631, 0.47855143887656076, 0.5016136850629535, 0.44898206847054617, 0.43432735545294626, 0.42442325183323454, 0.4513092722211565, 0.4202828747885568, 0.4206446664673941, 0.4128445301737104, 0.3935739483152117, 0.37840787853513447, 0.37908992597035, 0.40353011233466013, 0.38820475339889526, 0.3699541517666408, 0.3707342573574611, 0.4476991891860962, 0.37502522127968924, 0.38288813829421997, 0.3744001729147775, 0.3880597012383597], "val_accuracy": [0.367000013589859, 0.17533333599567413, 0.6273333430290222, 0.6073333621025085, 0.7020000219345093, 0.7670000195503235, 0.7863333225250244, 0.7926666736602783, 0.7703333497047424, 0.8023333549499512, 0.8119999766349792, 0.8193333148956299, 0.8016666769981384, 0.8213333487510681, 0.815666675567627, 0.8240000009536743, 0.8356666564941406, 0.8389999866485596, 0.8349999785423279, 0.8209999799728394, 0.8309999704360962, 0.8426666855812073, 0.8433333039283752, 0.8086666464805603, 0.8413333296775818, 0.840666651725769, 0.8413333296775818, 0.8343333601951599]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [2, 4, 4, 3, 2, 1, 6, 1, 8, 8, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [0, 3, 3, 3, 0, 3, 3, 3, 2, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 8, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8291428685188293, "mapping_values": [1, 4, 4, 2, 2, 1, 19, 19, 10, 9, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.subtract(tf.math.divide_no_nan(grad, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), grad)))), tf.math.add(beta, tf.math.subtract(tf.math.sqrt(grad), tf.math.sqrt(tf.math.add(beta, grad)))))), tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.117544174997357, 2.030928097443889, 1.9350962548475727, 1.3884872945544426, 0.8991194844891477, 0.7201152162592188, 0.6708777941543947, 0.6300483595315634, 0.5966963177076215, 0.5832773274150995, 0.5470313410465476, 0.5502213473333234, 0.525538351100906, 0.5226060486173648, 0.5089342141935554, 0.5041306865938021, 0.4736690508014002, 0.4722375338064319, 0.45178645093443215, 0.4464555671028945, 0.44446972993859024, 0.4340415753118114, 0.44816216292665967, 0.40260224425561236], "accuracy": [0.2996962070465088, 0.349359393119812, 0.3279619514942169, 0.5171047449111938, 0.6708492636680603, 0.7275128960609436, 0.7536653280258179, 0.7611940503120422, 0.7783648371696472, 0.7808743715286255, 0.7981772422790527, 0.7911768555641174, 0.8031964302062988, 0.8045172095298767, 0.8121780753135681, 0.8100647330284119, 0.8235371708869934, 0.8202351331710815, 0.8285563588142395, 0.8342359066009521, 0.8321225643157959, 0.8343679904937744, 0.8358209133148193, 0.8474441766738892], "val_loss": [1.4026604720524378, 1.931722572871617, 1.4997663157326835, 0.8440346717834473, 0.557020902633667, 0.5027276447841099, 0.4936390774590628, 0.46844559056418283, 0.48901498317718506, 0.43614470958709717, 0.42884563548224314, 0.42395178760801044, 0.4195644514901297, 0.41621420213154386, 0.4203139543533325, 0.4094518082482474, 0.39918302638190134, 0.3756340060915266, 0.3689881307738168, 0.402866576399122, 0.39804416043417795, 0.38184436729976107, 0.37513939823423115, 0.4106630342347281], "val_accuracy": [0.36800000071525574, 0.19966666400432587, 0.33266666531562805, 0.6159999966621399, 0.768666684627533, 0.7726666927337646, 0.7889999747276306, 0.8003333210945129, 0.7763333320617676, 0.8143333196640015, 0.8153333067893982, 0.8169999718666077, 0.8169999718666077, 0.8230000138282776, 0.8236666917800903, 0.8253333568572998, 0.8286666870117188, 0.840666651725769, 0.8426666855812073, 0.831333339214325, 0.8173333406448364, 0.8363333344459534, 0.8356666564941406, 0.824999988079071]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [56, 66, 89, 50, 85, 46], [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [0, 4, 1, 3, 2, 0, 3, 9, 8, 8, 7, 3, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [5, 1, 3, 3, 0, 3, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.7960000038146973, "mapping_values": [1, 4, 4, 2, 2, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.385764237203461, 2.2763238371071988, 2.2871758425476654, 2.1467920110178755, 2.2967155255882132, 2.248334577574533, 2.181150927362252, 1.9641179281407817, 1.6234129310646204, 1.4293806620277765, 1.160281316786237, 0.9217724300111053, 0.8494772413985887, 0.8026598611323273, 0.7606113961092186, 0.7575928949330383, 0.7111752961904082, 0.6835223221193136, 0.6899407979692875, 0.6405151999936742, 0.6428189100669344, 0.6239104723382415, 0.6087100980398662, 0.5769959243060954, 0.5656303748667532, 0.5833305040008561, 0.5664602294101723, 0.5700807285630046, 0.5310203362851174], "accuracy": [0.23840972781181335, 0.12732796370983124, 0.13459251821041107, 0.24646678566932678, 0.11715757846832275, 0.1628582775592804, 0.2207106053829193, 0.3381323516368866, 0.4637432396411896, 0.5140668153762817, 0.5945053696632385, 0.6667547225952148, 0.6907938122749329, 0.7086250185966492, 0.7205125093460083, 0.7248712182044983, 0.7368907928466797, 0.7543256878852844, 0.7429665923118591, 0.7582882046699524, 0.7652885913848877, 0.7660810947418213, 0.7725531458854675, 0.7815347909927368, 0.7915731072425842, 0.7802139520645142, 0.791969358921051, 0.7873464822769165, 0.7989697456359863], "val_loss": [1.9752494948250907, 1.7696653774806432, 1.9279629162379675, 1.975334848676409, 1.8418186051504952, 1.97367034639631, 1.200910976954869, 1.3591903277805872, 1.6486990111214774, 0.6946507692337036, 0.7405571937561035, 0.6623553548540387, 0.5900613750730243, 0.560506922858102, 0.5709423167364938, 0.5215672765459333, 0.5199416364942279, 0.5240038973944527, 0.5154064723423549, 0.49629039423806326, 0.5329179763793945, 0.5004420110157558, 0.4584528037479946, 0.46259076254708426, 0.48058416162218365, 0.4470360789980207, 0.4668086086000715, 0.48032227584293913, 0.4559311866760254], "val_accuracy": [0.10366666316986084, 0.23633334040641785, 0.2996666729450226, 0.10066666454076767, 0.2616666555404663, 0.1106666699051857, 0.5320000052452087, 0.48100000619888306, 0.34566667675971985, 0.706333339214325, 0.6729999780654907, 0.7020000219345093, 0.7250000238418579, 0.7583333253860474, 0.7429999709129333, 0.7649999856948853, 0.7823333144187927, 0.7716666460037231, 0.7906666398048401, 0.7900000214576721, 0.7440000176429749, 0.7609999775886536, 0.800000011920929, 0.8213333487510681, 0.7893333435058594, 0.815666675567627, 0.7893333435058594, 0.7876666784286499, 0.8066666722297668]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [27, 66, 89, 50, 85, 46], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [2, 4, 1, 3, 2, 1, 0, 3, 4, 8, 9, 0, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [4, 2, 3, 3, 2, 3, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0], [1, 7, 6, 4], [7, 1], [64], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [63, 97, 13, 96, 41]], "fitness": -0.7877143025398254, "mapping_values": [1, 4, 4, 2, 2, 1, 19, 19, 11, 8, 1, 1, 0, 0, 0, 0, 7, 3, 4, 2], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.negative(tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta))), tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.sqrt(tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))), beta)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.multiply(tf.math.multiply(alpha, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2841297127173608, 2.239868460267117, 2.1705314550008032, 2.067433404601277, 1.9036244501794855, 1.701571206280647, 1.5129031466297769, 1.3578922916412857, 1.2365536228887095, 1.1613844105627684, 1.0992303654313356, 1.047668957675626, 1.0051340679010112, 0.9753928129478705, 0.932258123577452, 0.9259292353901645, 0.884223975250041, 0.8770495414529195, 0.8543334141887332, 0.840717889503355, 0.8327445410356357, 0.8202511338887828, 0.8040506312277464, 0.7874885084464991, 0.7857303377140027, 0.7763447046610563, 0.7614301591265266, 0.7590144878569973, 0.7452410926451662, 0.7444169292785645, 0.7333509223399114, 0.7307579685841507, 0.7245004553568756, 0.7153181714184013, 0.7093790828937616, 0.6951176489364705, 0.6994757588907019, 0.697238051360703, 0.6917907915504585, 0.6864796396196794, 0.6784239682098185, 0.6641581910806892, 0.6753451276244331, 0.6681399805875518, 0.6658338480511551, 0.6709193986530679, 0.6588950091034367, 0.648943165911817, 0.6593812138113788, 0.658377179451087, 0.6529396334029522, 0.6370915633387271, 0.6437735777757171], "accuracy": [0.13432836532592773, 0.2440892904996872, 0.3337736129760742, 0.3847576379776001, 0.4361378848552704, 0.47510236501693726, 0.5122177004814148, 0.5418042540550232, 0.5758816599845886, 0.5972790718078613, 0.6170915365219116, 0.6320168972015381, 0.6457535624504089, 0.6527539491653442, 0.6639809608459473, 0.6633205413818359, 0.6841896772384644, 0.6806234121322632, 0.6888125538825989, 0.7010962963104248, 0.700700044631958, 0.7073041796684265, 0.7020208835601807, 0.7103421092033386, 0.7131158113479614, 0.7206445932388306, 0.7207766771316528, 0.7265883088111877, 0.7288337349891663, 0.7251353859901428, 0.728701651096344, 0.7298903465270996, 0.7366266250610352, 0.743891179561615, 0.7396644949913025, 0.7428345084190369, 0.743891179561615, 0.7376832365989685, 0.7415136694908142, 0.7427024245262146, 0.7520803213119507, 0.7544577717781067, 0.7498348951339722, 0.7547219395637512, 0.7531369924545288, 0.7541936039924622, 0.755118191242218, 0.7563069462776184, 0.7592127919197083, 0.7540615797042847, 0.7539294958114624, 0.7617223858833313, 0.7593448758125305], "val_loss": [1.9313336099897112, 1.8809573990958077, 1.7993768964494978, 1.6712920665740967, 1.486433982849121, 1.2794130189078194, 1.1007628440856934, 0.9694435596466064, 0.8791816575186593, 0.8173443589891706, 0.7700601645878383, 0.7349777051380703, 0.705130934715271, 0.678170885358538, 0.6604055166244507, 0.6476420334407261, 0.6321530001504081, 0.619178192956107, 0.6144606385912214, 0.6102569954735892, 0.5945275511060443, 0.5846491881779262, 0.5802704266139439, 0.5711240768432617, 0.5651383399963379, 0.5611855983734131, 0.5541784593037197, 0.553315281867981, 0.544849191393171, 0.5419460024152484, 0.5389332941600254, 0.5351106779915946, 0.5301604441234044, 0.5274004936218262, 0.5234864268984113, 0.5181168488093785, 0.516517196382795, 0.5186431578227452, 0.5108933789389474, 0.5093580654689244, 0.5032185656683785, 0.5021316153662545, 0.502243093081883, 0.4980547939028059, 0.49959771973746164, 0.49476397037506104, 0.49700020040784565, 0.48978235040392193, 0.49168055398123606, 0.48842988695417133, 0.4880181550979614, 0.48695639201572966, 0.48479299885886057], "val_accuracy": [0.3476666808128357, 0.4320000112056732, 0.4776666760444641, 0.5326666831970215, 0.5619999766349792, 0.6036666631698608, 0.6489999890327454, 0.6693333387374878, 0.6779999732971191, 0.6930000185966492, 0.6953333616256714, 0.7126666903495789, 0.7229999899864197, 0.7260000109672546, 0.7300000190734863, 0.731333315372467, 0.7476666569709778, 0.7459999918937683, 0.7446666955947876, 0.7390000224113464, 0.7436666488647461, 0.7580000162124634, 0.7509999871253967, 0.7573333382606506, 0.7676666378974915, 0.7540000081062317, 0.7716666460037231, 0.7603333592414856, 0.7670000195503235, 0.7630000114440918, 0.7733333110809326, 0.7673333287239075, 0.7699999809265137, 0.7693333625793457, 0.7770000100135803, 0.7836666703224182, 0.7860000133514404, 0.7720000147819519, 0.7820000052452087, 0.7833333611488342, 0.7913333177566528, 0.7833333611488342, 0.7836666703224182, 0.793666660785675, 0.7929999828338623, 0.7896666526794434, 0.7870000004768372, 0.7983333468437195, 0.7926666736602783, 0.7953333258628845, 0.7919999957084656, 0.7889999747276306, 0.7889999747276306]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 3, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [2, 4, 1, 3, 2, 1, 0, 1, 8, 8, 2, 3, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [4, 1, 3, 3, 0, 3, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.7785714268684387, "mapping_values": [1, 20, 20, 11, 9, 4, 18, 18, 10, 8, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.multiply(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), grad))))), tf.math.add(alpha, tf.math.subtract(tf.math.negative(tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))), alpha)), tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.add(alpha, grad))))))), tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.subtract(tf.math.negative(tf.math.subtract(tf.math.add(beta, grad), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(grad))))))), grad)), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.072838960558652, 1.662344590248669, 1.3418261563820437, 1.2514332890935689, 1.0499615724674698, 1.0032678174698562, 0.9093721059209179, 0.878508290822842, 0.909612751600686, 0.8087825698150919, 0.710613433899991, 0.673351818638833, 0.6819018830775648, 0.6286881966141189, 0.628840174555007, 0.6562288974915765, 0.6144585304287966, 0.6054349130155104, 0.6121712238749871], "accuracy": [0.2798837721347809, 0.4091929793357849, 0.5194822549819946, 0.5424646735191345, 0.6353189945220947, 0.6355831623077393, 0.6515651941299438, 0.6617355942726135, 0.651168942451477, 0.6931713223457336, 0.7174745798110962, 0.7368907928466797, 0.7413815855979919, 0.7537974119186401, 0.7510236501693726, 0.7411174178123474, 0.7601373791694641, 0.763967752456665, 0.774798572063446], "val_loss": [1.6715897492000036, 1.089385952268328, 1.1316093717302596, 0.7700365781784058, 0.7453684466225761, 0.7345881291798183, 0.7181225163596017, 0.6811912059783936, 0.6497247048786708, 0.578201140676226, 0.5616394111088344, 0.5804049798420498, 0.5321261712482998, 0.49382879052843365, 0.5096596990312848, 0.5542992353439331, 0.536324313708714, 0.5147241524287632, 0.508816020829337], "val_accuracy": [0.22733333706855774, 0.5486666560173035, 0.5333333611488342, 0.6606666445732117, 0.6933333277702332, 0.6516666412353516, 0.6819999814033508, 0.7210000157356262, 0.7146666646003723, 0.7279999852180481, 0.7300000190734863, 0.7386666536331177, 0.7606666684150696, 0.7826666831970215, 0.7706666588783264, 0.7403333187103271, 0.7386666536331177, 0.7799999713897705, 0.7776666879653931]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 4, 9, 5, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [0, 4, 1, 3, 2, 0, 3, 9, 8, 8, 7, 3, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [2, 1, 3, 3, 0, 3, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.2354285717010498, "mapping_values": [1, 8, 8, 5, 3, 3, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.pow(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), grad)))))))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [894273.9404027178, 2681460.042695813, 4548892.942940166, 6395497.203341698, 8291742.393343019, 10137995.110421345, 12080239.307489103, 13868379.016378285], "accuracy": [0.11610091477632523, 0.11953506618738174, 0.11887465417385101, 0.1208558976650238, 0.12798838317394257, 0.1298375427722931, 0.12032756209373474, 0.12323339283466339], "val_loss": [780769.9642857143, 1484415.7142857143, 2114842.6428571427, 2946332.714285714, 3564062.6428571427, 4252660.142857143, 4941146.285714285, 5691456.714285715], "val_accuracy": [0.2056666612625122, 0.2056666612625122, 0.21799999475479126, 0.2056666612625122, 0.2056666612625122, 0.2056666612625122, 0.2056666612625122, 0.2056666612625122]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [1, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [46, 66, 89, 50, 85, 46], [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [9, 9, 1, 3, 1, 1, 0, 4, 8, 8, 2, 3, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [4, 2, 3, 3, 3, 3, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 31, 30, 73, 40, 57, 35, 9, 54, 64], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0], [1, 7, 6, 4], [7, 1], [64], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [3, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 0, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 11, 8, 3, 1, 1, 1, 0, 1, 7, 5, 3, 2, 0, 5, 4, 1, 2], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.subtract(tf.math.negative(tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))), alpha)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.add(alpha, grad)))))))))), lambda shape,  alpha, beta, grad: tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, grad), tf.math.add(sigma, alpha))))), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09694888442754745, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [2, 3, 1, 8, 2, 1, 4, 3, 4, 6, 2, 8, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [4, 3, 3, 3, 0, 3, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0], [1, 7, 6, 4], [7, 1], [64], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 24, 24, 13, 11, 1, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(grad)))), lambda shape,  alpha, beta, grad: tf.math.add(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, grad)), tf.math.add(beta, grad)))))))))), alpha)), tf.math.add(beta, tf.math.add(tf.math.sqrt(grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.square(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302630381230838, 2.3027302172079755, 2.3026709714664553, 2.302699294529256, 2.302723677340059, 2.302717501162034, 2.3027296093681375, 2.3027165459761485, 2.302731006026756], "accuracy": [0.09259014576673508, 0.09325055778026581, 0.09813763201236725, 0.0952318087220192, 0.09760929644107819, 0.09721305221319199, 0.09417514503002167, 0.09681680053472519, 0.09734513610601425], "val_loss": [1.9736731392996651, 1.9737159184047155, 1.9736667360578264, 1.9736174174717493, 1.973658629826137, 1.9736810411725725, 1.9736670766557967, 1.973679678780692, 1.973731245313372], "val_accuracy": [0.0949999988079071, 0.0949999988079071, 0.09666666388511658, 0.10366666316986084, 0.10366666316986084, 0.10233332961797714, 0.09566666930913925, 0.09566666930913925, 0.0949999988079071]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 5, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [1, 2, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [0, 4, 1, 3, 2, 0, 3, 9, 8, 8, 7, 3, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [4, 1, 3, 3, 0, 3, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 11, 8, 2, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.subtract(tf.math.negative(tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), alpha)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.add(alpha, grad))))))))))), lambda shape,  alpha, beta, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [5, 0, 1, 3, 2, 1, 1, 1, 4, 8, 2, 3, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [3, 1, 3, 3, 0, 3, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.square(grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06498481333255768, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [2, 4, 1, 3, 2, 2, 0, 1, 8, 8, 2, 3, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [4, 1, 3, 3, 3, 3, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 11, 8, 3, 18, 18, 10, 8, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.multiply(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), grad))))))), tf.math.add(alpha, tf.math.subtract(tf.math.negative(tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))), alpha)), tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.subtract(tf.math.add(beta, grad), grad)), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(grad))))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07779685407876968, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [56, 66, 89, 50, 85, 46], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [0, 4, 1, 3, 2, 0, 3, 9, 8, 8, 7, 3, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [3, 1, 3, 3, 0, 2, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [2, 1, 0, 0, 0, 2, 2], [63, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 11, 8, 4, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.subtract(tf.math.negative(tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))), alpha)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.add(alpha, grad)))))))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [6.641228248697971, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1608770340681076, 0.08955223858356476, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [22.517108372279576, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09399999678134918, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [2, 4, 1, 3, 4, 1, 0, 1, 8, 8, 2, 3, 5, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [4, 1, 3, 3, 0, 3, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [34, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 2, 23, 23, 14, 9, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), grad))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))))))), tf.math.add(beta, grad))), grad)), tf.math.multiply(tf.math.square(alpha), tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3024964957047667, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 3, 8, 2, 1, 0, 2, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 2, 2, 0, 2, 2, 0, 2, 3, 3, 0], [8, 63, 89, 50, 85, 46], [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [9, 9, 1, 3, 1, 1, 0, 4, 8, 8, 2, 3, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [3, 1, 3, 3, 0, 2, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [0, 1, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3024964957047667, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [27, 66, 89, 50, 85, 46], [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [0, 4, 1, 3, 2, 0, 3, 9, 8, 8, 7, 3, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [2, 1, 3, 3, 0, 2, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0], [1, 7, 6, 4], [7, 1], [64], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [63, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 11, 8, 3, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 5, 4, 1, 2], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.subtract(tf.math.negative(tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))), alpha)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: tf.math.negative(beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.multiply(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [27, 66, 89, 50, 85, 46], [1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [2, 6, 1, 3, 2, 1, 0, 1, 8, 4, 2, 3, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [3, 1, 1, 3, 0, 2, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0], [1, 7, 6, 4], [7, 1], [64], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 1, 9, 3, 0, 1, 3, 2, 2, 5], [1, 0, 0, 0, 0, 2, 2], [63, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 24, 24, 14, 10, 2, 1, 0, 0, 0, 0, 7, 3, 4, 3], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.subtract(tf.math.negative(tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))))), beta)), tf.math.add(beta, tf.math.subtract(tf.math.sqrt(tf.math.add(beta, grad)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(beta, tf.math.multiply(tf.math.negative(alpha), tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.292529680316065, 2.269754880738375, 2.245674082568734, 2.223358756720256, 2.196055389839377, 2.1588522990807064, 2.136482911165978, 2.1026458413357494, 2.069498977955889, 2.051628208809116, 2.0266185934989838, 2.0006672655350464, 1.9733470297760385, 1.950927402963413, 1.9137863857304305, 1.9119669306846643, 1.8635423079678222, 1.8530861381148587, 1.8320184675394788, 1.7929352090469268, 1.7811430860205002, 1.772358251899666, 1.738374880150309, 1.7255461175349474, 1.7043907674327896, 1.6834560306930995, 1.652124420038666, 1.6362386918606429, 1.626679555567705, 1.6116874161145753, 1.593478985308908, 1.5612943369273764, 1.542507167883427, 1.5269547553346488, 1.5242067362102991, 1.4899095095632067, 1.4821933661910442, 1.461312391848974, 1.453313329484028, 1.4179654469059884, 1.418118262303551, 1.3975153504707842, 1.4011526289806233, 1.3788215919901996, 1.3736268332164836, 1.3725291113607194, 1.371773635375895, 1.343743303920835, 1.3461155403150056, 1.35187519509889, 1.346272892577852, 1.3209056277332398, 1.3315854707272485, 1.3234219346709648, 1.3221505871223436, 1.3108836088544578, 1.3040901073107645, 1.294022766795251, 1.2849037161813106, 1.2771452570226072, 1.2978921731575495, 1.2870033236699978, 1.2860563888116487, 1.2921037970910596, 1.2952761413272913, 1.2825195426717961, 1.2814087956384062, 1.2735546004140792, 1.2601646941493232, 1.2751265394689226, 1.2674113317109716, 1.2719014923192444, 1.2759517932281423, 1.2657471610696451, 1.2620404841578348, 1.2666625761951138, 1.2468903217459273, 1.272212740074705, 1.2447515296551845, 1.2498649980854664, 1.2747071622747235, 1.2595976074184991, 1.2432620323030248, 1.2637830245858563, 1.2548164249238023, 1.2548572144346497, 1.2661933510326486, 1.2656940967021695], "accuracy": [0.10527011007070541, 0.1352529376745224, 0.16034869849681854, 0.17276449501514435, 0.19284109771251678, 0.21357811987400055, 0.22137102484703064, 0.24395720660686493, 0.26059964299201965, 0.2677321434020996, 0.2822612524032593, 0.28305375576019287, 0.2981112003326416, 0.30643242597579956, 0.3291507065296173, 0.3267732262611389, 0.3479065001010895, 0.3461894094944, 0.35305771231651306, 0.37287017703056335, 0.37326639890670776, 0.37722888588905334, 0.39149385690689087, 0.3910976052284241, 0.4019284248352051, 0.41328755021095276, 0.4224012792110443, 0.4278166592121124, 0.4315149784088135, 0.4329679012298584, 0.4461762011051178, 0.4547615945339203, 0.45885616540908813, 0.46664905548095703, 0.4633469879627228, 0.4839519262313843, 0.47549861669540405, 0.49266940355300903, 0.49465063214302063, 0.4987452030181885, 0.5070664286613464, 0.5081230998039246, 0.5071985125541687, 0.5205389261245728, 0.5215955376625061, 0.5227842926979065, 0.5219917893409729, 0.5308413505554199, 0.5349359512329102, 0.5336151123046875, 0.5396909117698669, 0.544181764125824, 0.5387663245201111, 0.542728841304779, 0.5419363379478455, 0.551050066947937, 0.5499933958053589, 0.5522388219833374, 0.5588429570198059, 0.5565975308418274, 0.5584467053413391, 0.5542200207710266, 0.5665037631988525, 0.5588429570198059, 0.5609562993049622, 0.5670320987701416, 0.568749189376831, 0.5628054141998291, 0.563730001449585, 0.5620129704475403, 0.566239595413208, 0.5674283504486084, 0.5651829242706299, 0.5671641826629639, 0.5740324854850769, 0.5742966532707214, 0.573107898235321, 0.5686171054840088, 0.5757495760917664, 0.5791836977005005, 0.5676925182342529, 0.5704662799835205, 0.5851274728775024, 0.5688812732696533, 0.570730447769165, 0.5723153948783875, 0.5703341960906982, 0.5610883831977844], "val_loss": [1.9426847866603307, 1.9038969448634557, 1.8623078210013253, 1.8203391347612654, 1.7799453054155623, 1.7419259888785226, 1.7083758967263358, 1.6735711778913225, 1.6391253130776542, 1.6092605590820312, 1.577737467629569, 1.5502032893044608, 1.520587989262172, 1.4947508403233118, 1.4629613331386022, 1.4425618989127023, 1.4129638671875, 1.391197715486799, 1.370330538068499, 1.3450600079127721, 1.3252837317330497, 1.3088628905160087, 1.2824547971997942, 1.26432888848441, 1.2369625227791923, 1.219458988734654, 1.206275803702218, 1.1899200507572718, 1.1678307056427002, 1.1591716493879045, 1.136664526803153, 1.1195101397378104, 1.1035381044660295, 1.0800115380968367, 1.0727159295763289, 1.0503366674695696, 1.0352293423243932, 1.0122483798435755, 1.0083109991891044, 0.9812300545828683, 0.9691121918814523, 0.9570795808519635, 0.9492436477116176, 0.9489222254071917, 0.9327702522277832, 0.9276602949414935, 0.9250298568180629, 0.9094772679465157, 0.9033982413155692, 0.9092629296439034, 0.8997393335614886, 0.8894048077719552, 0.8879469803401402, 0.8870237214224679, 0.8895624705723354, 0.8811471802847726, 0.8788552624838692, 0.863737804549081, 0.8600003549030849, 0.8650934015001569, 0.8704139334814889, 0.8616818700517926, 0.8554599114826748, 0.8609239373888288, 0.860224723815918, 0.8616811207362584, 0.8605447326387677, 0.85734908921378, 0.8447128534317017, 0.8493176528385707, 0.8495547260556903, 0.8490951572145734, 0.8490701913833618, 0.854717663356236, 0.8393285955701556, 0.8426809481212071, 0.8344179051262992, 0.8397905826568604, 0.8338441337857928, 0.8348442316055298, 0.8413909673690796, 0.834389226777213, 0.8373295409338815, 0.8482005596160889, 0.8339874403817313, 0.8339688777923584, 0.8455844776971, 0.8366061959947858], "val_accuracy": [0.1223333328962326, 0.20266667008399963, 0.24699999392032623, 0.273333340883255, 0.3113333284854889, 0.37033334374427795, 0.4256666600704193, 0.4729999899864197, 0.5193333625793457, 0.5630000233650208, 0.5786666870117188, 0.5839999914169312, 0.5933333039283752, 0.6026666760444641, 0.6079999804496765, 0.6060000061988831, 0.609333336353302, 0.6106666922569275, 0.6156666874885559, 0.6240000128746033, 0.6269999742507935, 0.625, 0.6276666522026062, 0.6320000290870667, 0.6299999952316284, 0.637333333492279, 0.637666642665863, 0.6386666893959045, 0.6396666765213013, 0.6456666588783264, 0.6493333578109741, 0.6523333191871643, 0.6546666622161865, 0.6633333563804626, 0.6669999957084656, 0.6660000085830688, 0.6710000038146973, 0.6723333597183228, 0.6776666641235352, 0.6779999732971191, 0.6796666383743286, 0.684333324432373, 0.684333324432373, 0.6863333582878113, 0.6890000104904175, 0.6869999766349792, 0.6869999766349792, 0.6896666884422302, 0.6913333535194397, 0.6919999718666077, 0.6943333148956299, 0.6946666836738586, 0.6933333277702332, 0.6963333487510681, 0.6933333277702332, 0.6933333277702332, 0.6956666707992554, 0.6963333487510681, 0.6976666450500488, 0.6980000138282776, 0.6980000138282776, 0.6976666450500488, 0.7009999752044678, 0.7016666531562805, 0.6993333101272583, 0.7013333439826965, 0.7020000219345093, 0.703000009059906, 0.7023333311080933, 0.7009999752044678, 0.7003333568572998, 0.7003333568572998, 0.70333331823349, 0.70333331823349, 0.7026666402816772, 0.7026666402816772, 0.706333339214325, 0.7056666612625122, 0.7076666951179504, 0.7056666612625122, 0.706333339214325, 0.7059999704360962, 0.7093333601951599, 0.7066666483879089, 0.7046666741371155, 0.7066666483879089, 0.7036666870117188, 0.7059999704360962]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [56, 66, 89, 50, 85, 46], [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [0, 4, 1, 3, 2, 0, 3, 9, 8, 8, 7, 3, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [4, 2, 3, 3, 3, 3, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [3, 1, 0, 0, 0, 2, 2], [63, 97, 13, 96, 41]], "fitness": -0.04171428456902504, "mapping_values": [1, 4, 4, 2, 2, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.301674365493458, 2.3031905891243114, 2.301231481931024, 2.3026866557937904, 2.3018072695701255, 2.302213756399793], "accuracy": [0.09060890227556229, 0.08955223858356476, 0.09668471664190292, 0.09008057415485382, 0.08955223858356476, 0.0936468094587326], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [1, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [2, 4, 1, 3, 2, 8, 1, 1, 8, 8, 2, 3, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [4, 1, 3, 3, 0, 3, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [50, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.04171428456902504, "mapping_values": [1, 4, 4, 2, 2, 1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.301674365493458, 2.3031905891243114, 2.301231481931024, 2.3026866557937904, 2.3018072695701255, 2.302213756399793], "accuracy": [0.09060890227556229, 0.08955223858356476, 0.09668471664190292, 0.09008057415485382, 0.08955223858356476, 0.0936468094587326], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}]