[{"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [4, 6, 9, 3, 2, 2, 3, 9, 8, 1, 7, 7, 4, 9, 2, 4, 2], [1, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0], [85, 80, 63], [0, 1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8465714454650879, "mapping_values": [1, 4, 4, 2, 2, 1, 5, 5, 3, 2, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.0858852352684734, 1.1711302379087418, 0.8414999283284339, 0.7375181685144623, 0.666397910399318, 0.6268641349268218, 0.599417346170345, 0.5556177471717272, 0.5341286245763515, 0.4988194703898331, 0.49075006432914936, 0.45963032266734977, 0.4399695978574371, 0.4289457974865641, 0.4068000177744436, 0.39375137290414836, 0.38132734036385785, 0.36474208379261025, 0.36021873172657476, 0.3554836296882486, 0.34892639647290974, 0.34280300547796044, 0.32899477733849, 0.31938157440129367, 0.30396065390294236, 0.2860192820034196, 0.2932297777049435, 0.288985552493812, 0.27682401701018733, 0.27684416643081483, 0.26613659707782855, 0.2520244530934888, 0.24195648001374317, 0.24085714449468085, 0.24272816430906718, 0.23596722024180838], "accuracy": [0.29982829093933105, 0.5885615944862366, 0.6894729733467102, 0.7186633348464966, 0.7456082701683044, 0.7621186375617981, 0.7751948237419128, 0.7924976944923401, 0.7993659973144531, 0.816008448600769, 0.8210275769233704, 0.8274996876716614, 0.837537944316864, 0.8425571322441101, 0.847840428352356, 0.854708731174469, 0.8577466607093811, 0.8610487580299377, 0.8613129258155823, 0.8667283058166504, 0.870030403137207, 0.8677849769592285, 0.8767666220664978, 0.878879964351654, 0.8823140859603882, 0.8879936337471008, 0.8837670087814331, 0.8882578015327454, 0.8922203183174133, 0.8939374089241028, 0.898428201675415, 0.9045040011405945, 0.9076740145683289, 0.9064852595329285, 0.9080702662467957, 0.9083344340324402], "val_loss": [1.0296525955200195, 0.7040584938866752, 0.5659384557179042, 0.5264565093176705, 0.4987497159412929, 0.46968116079057964, 0.45894750526973177, 0.4345224073954991, 0.4083149603434971, 0.39594336066927227, 0.3827392203467233, 0.3754814352308001, 0.36963780437197, 0.35567320244652884, 0.3431507093565805, 0.33694601910454886, 0.3343815292630877, 0.333564749785832, 0.33427044323512484, 0.32849946192332674, 0.32371833494731356, 0.3218703866004944, 0.3262018305914743, 0.3154759236744472, 0.3229699305125645, 0.3132156899997166, 0.3160104751586914, 0.31861047233854023, 0.3219576988901411, 0.3131830777440752, 0.31213351658412386, 0.3089779700551714, 0.32044070959091187, 0.3173201595033918, 0.3120062691824777, 0.332014867237636], "val_accuracy": [0.6179999709129333, 0.7036666870117188, 0.7516666650772095, 0.7643333077430725, 0.7803333401679993, 0.7943333387374878, 0.7990000247955322, 0.812333345413208, 0.8273333311080933, 0.8343333601951599, 0.8399999737739563, 0.8453333377838135, 0.8460000157356262, 0.8556666374206543, 0.8629999756813049, 0.8659999966621399, 0.8629999756813049, 0.8659999966621399, 0.8610000014305115, 0.8706666827201843, 0.8736666440963745, 0.8636666536331177, 0.8659999966621399, 0.8709999918937683, 0.8693333268165588, 0.875333309173584, 0.874666690826416, 0.8676666617393494, 0.875333309173584, 0.8700000047683716, 0.8793333172798157, 0.8763333559036255, 0.8756666779518127, 0.875, 0.8773333430290222, 0.8740000128746033]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [1, 2, 3, 3, 2, 1, 3, 2, 0, 9, 0, 4, 5, 2, 9, 5, 1, 3, 3, 5, 2, 2, 2, 2, 5, 2, 1], [1, 3, 3, 3, 3, 5, 3, 1, 1, 4, 4, 0, 2, 3, 4, 1, 3, 0], [85, 80, 14, 73], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8451428413391113, "mapping_values": [1, 4, 4, 2, 2, 1, 45, 45, 27, 18, 4, 4, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.negative(grad)), tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), grad), tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))))), grad)))))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, alpha)))))), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.multiply(grad, tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.add(beta, tf.math.add(tf.math.add(tf.math.square(tf.math.add(beta, tf.math.add(tf.math.subtract(grad, grad), alpha))), tf.math.add(beta, grad)), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, sigma))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.085884524531699, 1.1712721696760928, 0.8409585028969458, 0.7385781940027014, 0.6686351833216282, 0.6267540471869657, 0.6017287379840991, 0.5579027254678128, 0.534023175748458, 0.49987167497872204, 0.4917838311174904, 0.4611797068042211, 0.4401252144253123, 0.43016880158231147, 0.4090977316842087, 0.39471121032192974, 0.38357284726515234, 0.36624958699468485, 0.365744295278954, 0.35663209453849054, 0.3489459119673182, 0.3425229509682026, 0.3236549476181527, 0.3175649442385846, 0.3083947871528392, 0.2893562939432807, 0.29361989115207515, 0.28646566749422103, 0.27969950203724886, 0.28019994609092347, 0.2644544181224141], "accuracy": [0.2999603748321533, 0.5885615944862366, 0.6886804699897766, 0.7164179086685181, 0.7452120184898376, 0.7609298825263977, 0.7758552432060242, 0.7924976944923401, 0.7977809906005859, 0.8144234418869019, 0.8201030492782593, 0.8265751004219055, 0.8362171649932861, 0.8408400416374207, 0.8459912538528442, 0.8551049828529358, 0.8555012345314026, 0.8626337051391602, 0.8598600029945374, 0.8687095642089844, 0.8705587387084961, 0.8726720213890076, 0.8791441321372986, 0.8791441321372986, 0.8836349248886108, 0.8883898854255676, 0.8864086866378784, 0.8910315632820129, 0.8893144726753235, 0.8910315632820129, 0.9012019634246826], "val_loss": [1.0296524933406286, 0.7035235336848668, 0.5661388805934361, 0.526023098400661, 0.49687608650752474, 0.4715527296066284, 0.4593644823346819, 0.4324660301208496, 0.40695098468235563, 0.3961898684501648, 0.3870840498379299, 0.37508177757263184, 0.3728749666895185, 0.3594893046787807, 0.3472160952431815, 0.34172431911740986, 0.33813864844185965, 0.33394263471875874, 0.3365300382886614, 0.3301173448562622, 0.32769440753119333, 0.32363189118249075, 0.3287562983376639, 0.3195166758128575, 0.3245665431022644, 0.3204729897635324, 0.3187758837427412, 0.3208627275058201, 0.3239699602127075, 0.3118775657245091, 0.3230243240083967], "val_accuracy": [0.6176666617393494, 0.7036666870117188, 0.7506666779518127, 0.7663333415985107, 0.7803333401679993, 0.7946666479110718, 0.7983333468437195, 0.8136666417121887, 0.8266666531562805, 0.8323333263397217, 0.8410000205039978, 0.8453333377838135, 0.8429999947547913, 0.8516666889190674, 0.8640000224113464, 0.8566666841506958, 0.8629999756813049, 0.8646666407585144, 0.8653333187103271, 0.8700000047683716, 0.8736666440963745, 0.8629999756813049, 0.8666666746139526, 0.8676666617393494, 0.8696666955947876, 0.8756666779518127, 0.871999979019165, 0.8650000095367432, 0.8669999837875366, 0.875333309173584, 0.8736666440963745]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1], [4, 6, 2, 3, 2, 2, 3, 9, 2, 4, 7, 6, 7, 9, 5, 9, 8, 6, 8, 8, 5, 7, 4, 1, 9], [1, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0, 1], [85, 80, 14, 73, 38], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8448571562767029, "mapping_values": [1, 4, 4, 2, 2, 1, 38, 38, 25, 13, 5, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.multiply(grad, tf.math.add(beta, grad)), tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), tf.math.square(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))))), tf.math.add(beta, grad))))), beta))))))), tf.math.add(beta, alpha)), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(grad, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.subtract(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), alpha))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.085884891244729, 1.171075244101677, 0.8413205612699322, 0.7369764396039298, 0.6667103299989424, 0.625731268673525, 0.5991683244909892, 0.5561660499053782, 0.5330544367064542, 0.5009728787896687, 0.49036752181739035, 0.45910629130956, 0.44179672620016525, 0.4309706417891674, 0.4106026965400971, 0.396021198457211, 0.3835239258377449, 0.36821661144987056, 0.361378003014644, 0.3584411615756021, 0.3488849863053754, 0.34324918801301757, 0.320860653513411, 0.31447064555347903, 0.30550950179876607, 0.2891394502104801, 0.29454312549212414, 0.2857023471374207, 0.2794924429449911], "accuracy": [0.29982829093933105, 0.5888257622718811, 0.6890767216682434, 0.7194558382034302, 0.7486461400985718, 0.7609298825263977, 0.7751948237419128, 0.7948752045631409, 0.7981772422790527, 0.8150838613510132, 0.8230088353157043, 0.8286884427070618, 0.8389908671379089, 0.8425571322441101, 0.8457271456718445, 0.8558974862098694, 0.8561616539955139, 0.8622375130653381, 0.8631620407104492, 0.8626337051391602, 0.8717474341392517, 0.8716153502464294, 0.8815215826034546, 0.8782195448875427, 0.8844274282455444, 0.886672854423523, 0.8838990926742554, 0.8897107243537903, 0.8891823887825012], "val_loss": [1.029648951121739, 0.7036372763769967, 0.5662188700267247, 0.5247473887034825, 0.4952460357121059, 0.46971167836870464, 0.46084223474775043, 0.43091108969279696, 0.4080497792788914, 0.39397765908922466, 0.3853072353771755, 0.3747262443814959, 0.37146046331950594, 0.35672456877572195, 0.34433094944272724, 0.341350325516292, 0.33505373341696604, 0.33313547713415964, 0.33239825282778057, 0.3306169169289725, 0.32751322644097464, 0.32165123735155376, 0.32129645347595215, 0.31450337171554565, 0.32546675205230713, 0.3168363741465977, 0.3214148793901716, 0.31908037832805086, 0.3230233022144863], "val_accuracy": [0.6176666617393494, 0.7036666870117188, 0.7526666522026062, 0.7676666378974915, 0.7816666960716248, 0.7946666479110718, 0.8003333210945129, 0.8163333535194397, 0.82833331823349, 0.8373333215713501, 0.8410000205039978, 0.8479999899864197, 0.8446666598320007, 0.8550000190734863, 0.8613333106040955, 0.8606666922569275, 0.862333357334137, 0.8659999966621399, 0.8619999885559082, 0.8703333139419556, 0.8696666955947876, 0.8646666407585144, 0.871999979019165, 0.8740000128746033, 0.8703333139419556, 0.8740000128746033, 0.8713333606719971, 0.8709999918937683, 0.8713333606719971]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1], [5, 4, 3, 3, 2, 2, 3, 9, 2, 9, 0, 4, 6, 2, 9, 5, 1], [1, 1, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0], [85, 80, 14, 73], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [0, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.843999981880188, "mapping_values": [1, 4, 4, 2, 2, 1, 26, 26, 17, 9, 3, 4, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.multiply(tf.math.add(beta, alpha), alpha), tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), grad), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)))), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), grad)), tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, beta)))))), tf.math.add(beta, alpha)))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, sigma))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.0850911677678847, 1.1677638119111964, 0.8388744549209006, 0.7361445045663286, 0.6674202529824468, 0.625559924962325, 0.6001984403354145, 0.5569651349188236, 0.5351255412713302, 0.5016999668716644, 0.4926989576394894, 0.46444069949107764, 0.4440144851671911, 0.43317820269748786, 0.4131781237394015, 0.39991119861004454, 0.39060790037923027, 0.3751886682605794, 0.3650837019725546, 0.362329039004784, 0.35804707914090916, 0.35556252567822577, 0.3298868575643759, 0.3244449536656471, 0.31799842562689334, 0.2939209757684449, 0.30011378811051614, 0.2883835817411544, 0.2840763038498394, 0.2753409267637031, 0.269470406328887, 0.2625969537827695, 0.24943810305764189, 0.2467056338018068, 0.24469877268345033, 0.23008829585518017, 0.229999469340501, 0.22282460886749372, 0.22393474266230234, 0.20826522534581035, 0.21159072696233644, 0.20139742714381567, 0.20240735665225493, 0.19810135378742796], "accuracy": [0.2995641231536865, 0.591731607913971, 0.6905296444892883, 0.7177387475967407, 0.7436270117759705, 0.7588165402412415, 0.7741381525993347, 0.7959318161010742, 0.8000264167785645, 0.8132346868515015, 0.8201030492782593, 0.8267071843147278, 0.8372738361358643, 0.837141752243042, 0.8432175517082214, 0.8541803956031799, 0.8553691506385803, 0.8537842035293579, 0.8605204224586487, 0.8640866279602051, 0.8702945709228516, 0.8652753829956055, 0.8770307898521423, 0.878879964351654, 0.8792761564254761, 0.8873332738876343, 0.8844274282455444, 0.8914278149604797, 0.8894465565681458, 0.8943336606025696, 0.900409460067749, 0.8956544995307922, 0.9041078090667725, 0.9085986018180847, 0.9085986018180847, 0.9096552729606628, 0.9142781496047974, 0.9132214784622192, 0.9144102334976196, 0.9190331697463989, 0.9192973375320435, 0.9202219247817993, 0.9192973375320435, 0.9232597947120667], "val_loss": [1.021583046231951, 0.7019552162715367, 0.5663979394095284, 0.5252161026000977, 0.4900516612189157, 0.46898019313812256, 0.45840695926121305, 0.4406463248389108, 0.41188705818993704, 0.39725754090717863, 0.3859344550541469, 0.3752980487687247, 0.3722102471760341, 0.35894203186035156, 0.3502752695764814, 0.34474122524261475, 0.3420882821083069, 0.33239331415721346, 0.3351454564503261, 0.3331025924001421, 0.33459233386175974, 0.3243468574115208, 0.3299844435283116, 0.3237351519720895, 0.3241631303514753, 0.3210536071232387, 0.31790716307503836, 0.3228609136172703, 0.32254375730242046, 0.3227338876043047, 0.31363593680518015, 0.30928558111190796, 0.31993870224271503, 0.3160733239991324, 0.3130565030234201, 0.3212009498051235, 0.32610440254211426, 0.32471912247794016, 0.31985874686922344, 0.327394928250994, 0.3244286520140512, 0.32612106629780363, 0.3281714235033308, 0.3300189716475351], "val_accuracy": [0.6243333220481873, 0.7056666612625122, 0.749666690826416, 0.7683333158493042, 0.7846666574478149, 0.7986666560173035, 0.7950000166893005, 0.8069999814033508, 0.8246666789054871, 0.8309999704360962, 0.8376666903495789, 0.8450000286102295, 0.8410000205039978, 0.8519999980926514, 0.8586666584014893, 0.8553333282470703, 0.8606666922569275, 0.8633333444595337, 0.8629999756813049, 0.8673333525657654, 0.8606666922569275, 0.8659999966621399, 0.8633333444595337, 0.8690000176429749, 0.8666666746139526, 0.8713333606719971, 0.8726666569709778, 0.8690000176429749, 0.8656666874885559, 0.8706666827201843, 0.875, 0.875, 0.8776666522026062, 0.8786666393280029, 0.8813333511352539, 0.8773333430290222, 0.871666669845581, 0.8809999823570251, 0.8826666474342346, 0.8766666650772095, 0.8799999952316284, 0.8790000081062317, 0.8816666603088379, 0.8790000081062317]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1], [4, 6, 2, 3, 2, 2, 3, 9, 7, 9, 7, 6, 7, 9, 2, 9, 8, 6, 8], [1, 3, 3, 3, 3, 1, 3, 3, 1, 4, 4, 0], [79, 80, 19, 73], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8394285440444946, "mapping_values": [1, 4, 4, 2, 2, 1, 28, 28, 18, 10, 4, 4, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad))))))), grad)), tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), grad)))))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, sigma))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.0858850035574834, 1.1710657208839097, 0.8412048444929313, 0.737125898042076, 0.6673591388152056, 0.6272555991422704, 0.6004780041007884, 0.5556231228871635, 0.5325257689992844, 0.4957474739071936, 0.4905655708303226, 0.4577082763565624, 0.4397021286979784, 0.42559065649994704, 0.40778870110451315, 0.39485143928668914, 0.38023785660846626, 0.3658514782784401, 0.36319520460175264, 0.3543566460890336, 0.35110336224070127, 0.3415451770831156, 0.3261170457571788, 0.31326022302910733, 0.3039112937661399, 0.287538693301855, 0.2952983206478266, 0.2840833261918083, 0.2795302831477902], "accuracy": [0.29982829093933105, 0.5888257622718811, 0.6889446377754211, 0.7185312509536743, 0.7475894689559937, 0.7609298825263977, 0.7754589915275574, 0.7928939461708069, 0.8018755912780762, 0.8141592741012573, 0.816008448600769, 0.830669641494751, 0.8378021121025085, 0.8437458872795105, 0.8475762605667114, 0.8541803956031799, 0.8544445633888245, 0.8584070801734924, 0.8601241707801819, 0.8693699836730957, 0.8669924736022949, 0.8709549307823181, 0.8787478804588318, 0.8823140859603882, 0.8850878477096558, 0.8894465565681458, 0.8808611631393433, 0.8907673954963684, 0.8906353116035461], "val_loss": [1.0296533788953508, 0.7038058723722186, 0.5661259549004691, 0.5260147026606968, 0.4993039199284145, 0.471271208354405, 0.4597729444503784, 0.42994747843061176, 0.40661091463906424, 0.3946392365864345, 0.3813422066824777, 0.3743507776941572, 0.37208313601357595, 0.357188812323979, 0.3463085719517299, 0.33976586375917706, 0.33853157077516827, 0.33362551246370586, 0.3352703792708261, 0.32882624864578247, 0.33276974303381784, 0.31544954436165945, 0.3256579892975943, 0.31880080699920654, 0.32226264476776123, 0.319652191230229, 0.3170003039496286, 0.3312789797782898, 0.32289135456085205], "val_accuracy": [0.6176666617393494, 0.7036666870117188, 0.7519999742507935, 0.7680000066757202, 0.781333327293396, 0.7916666865348816, 0.7963333129882812, 0.8140000104904175, 0.8263333439826965, 0.8373333215713501, 0.8413333296775818, 0.8476666808128357, 0.8456666469573975, 0.8506666421890259, 0.8616666793823242, 0.859666645526886, 0.8583333492279053, 0.8636666536331177, 0.8619999885559082, 0.8723333477973938, 0.8650000095367432, 0.8666666746139526, 0.8659999966621399, 0.8733333349227905, 0.8723333477973938, 0.8703333139419556, 0.8730000257492065, 0.8703333139419556, 0.8669999837875366]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [1, 3, 3, 3, 2, 2, 3, 9, 5, 9, 0, 0, 1, 2, 9, 5, 1], [1, 2, 3, 3, 2, 3, 3, 2, 1, 4, 4, 0], [85, 80, 14, 73], [0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8357142806053162, "mapping_values": [1, 4, 4, 2, 2, 1, 16, 16, 10, 6, 2, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, grad))), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, beta)), tf.math.add(beta, grad))), tf.math.square(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.0858854959984465, 1.1711264390672091, 0.8412568211209079, 0.7388332017408685, 0.6669367741064672, 0.6257440872542563, 0.5996122363614778, 0.5558367697412564, 0.5325218274640275, 0.5004453554743584, 0.4885153034580162, 0.4601690368511579, 0.43977234504005897, 0.42807050675385977, 0.4090431505001578, 0.39529963000071694, 0.38427432418546625, 0.3706769845418296, 0.3680647525726261, 0.35881968672957953, 0.34682592107178656, 0.34395553097827575, 0.3236136281880815, 0.3203907901104557, 0.3038746888619278, 0.2840482370334767, 0.2920433075680567, 0.28736709250970494, 0.2784067049175757, 0.2712311148426993, 0.26321390365659914, 0.2555021432766809, 0.24638715337185954, 0.24918921845873443, 0.2523392145628344, 0.2321158813140679, 0.23003092242458698, 0.2218680488903446, 0.21470692664436014, 0.21348687790884333, 0.21026181235659502, 0.20054970152421225, 0.20383787997536387], "accuracy": [0.2999603748321533, 0.5885615944862366, 0.689869225025177, 0.7177387475967407, 0.7467969655990601, 0.7602694630622864, 0.7770439982414246, 0.7909126877784729, 0.7997622489929199, 0.8142913579940796, 0.8197067975997925, 0.8300092220306396, 0.8409721255302429, 0.8428213000297546, 0.8474441766738892, 0.8557654023170471, 0.8560295701026917, 0.8585391640663147, 0.8603883385658264, 0.8654074668884277, 0.871879518032074, 0.8696341514587402, 0.8813894987106323, 0.8780874609947205, 0.8848236799240112, 0.8927486538887024, 0.8860124349594116, 0.8897107243537903, 0.8907673954963684, 0.897899866104126, 0.8997490406036377, 0.9049002528190613, 0.9055606722831726, 0.9059569239616394, 0.9037115573883057, 0.9099194407463074, 0.9093911051750183, 0.9137498140335083, 0.9174481630325317, 0.9186369180679321, 0.9163914918899536, 0.9218068718910217, 0.9183727502822876], "val_loss": [1.0296539579119002, 0.704140135220119, 0.5660274199077061, 0.5257142611912319, 0.4962473596845354, 0.4704583542687552, 0.4649540867124285, 0.43846069063459125, 0.40974687678473337, 0.39741961445127216, 0.3811327644756862, 0.37545099428721834, 0.370788037776947, 0.35584977694920134, 0.3494805949074881, 0.3390247736658369, 0.3362182378768921, 0.333627598626273, 0.3353780337742397, 0.3340089235986982, 0.32742290837424143, 0.32013343061719624, 0.3271439330918448, 0.31538340875080656, 0.3240950959069388, 0.3138303075517927, 0.32056425298963276, 0.32183938367026194, 0.32395797967910767, 0.3177095225879124, 0.3175551380429949, 0.31025551898138864, 0.3143755623272487, 0.30849859544209074, 0.3177874599184309, 0.3241876704352243, 0.3140221493584769, 0.3251517925943647, 0.3175091232572283, 0.3264475549970354, 0.3206328749656677, 0.32970772470746723, 0.3217032892363412], "val_accuracy": [0.6176666617393494, 0.7036666870117188, 0.7523333430290222, 0.7680000066757202, 0.7803333401679993, 0.7919999957084656, 0.7919999957084656, 0.8056666851043701, 0.8259999752044678, 0.8333333134651184, 0.8433333039283752, 0.847000002861023, 0.8416666388511658, 0.8553333282470703, 0.859000027179718, 0.8603333234786987, 0.8610000014305115, 0.8636666536331177, 0.8610000014305115, 0.8673333525657654, 0.8703333139419556, 0.8640000224113464, 0.8650000095367432, 0.8696666955947876, 0.8706666827201843, 0.8756666779518127, 0.8713333606719971, 0.8653333187103271, 0.8683333396911621, 0.8703333139419556, 0.8763333559036255, 0.8706666827201843, 0.8786666393280029, 0.8796666860580444, 0.878333330154419, 0.8736666440963745, 0.8796666860580444, 0.8830000162124634, 0.8820000290870667, 0.8786666393280029, 0.8759999871253967, 0.878000020980835, 0.8793333172798157]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1], [4, 6, 2, 3, 2, 2, 3, 9, 8, 6, 7, 6, 7, 9, 2, 9, 8, 2, 8, 6, 5, 8, 9], [1, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0], [47, 80, 14, 73], [0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8339999914169312, "mapping_values": [1, 4, 4, 2, 2, 1, 34, 34, 23, 11, 4, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.pow(alpha, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad))), grad), tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.sqrt(beta)), alpha)))))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(grad)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))))))), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.085884355850003, 1.171281506876353, 0.8404185162039638, 0.7373554870405564, 0.6688401605459079, 0.6258849355176518, 0.6012635396660878, 0.5576585135235054, 0.532514532929351, 0.4970305675544507, 0.4924455451856688, 0.4620338974572475, 0.44204671628376624, 0.42756832405686646, 0.40955507500595845, 0.39559313180565975, 0.3824944116491069, 0.36474798554600096, 0.3625285260437376, 0.3555910506221392, 0.3522171655886555, 0.34131695493699504, 0.3235293409772726, 0.31550307960998997, 0.3061204487621477, 0.2885444362039784, 0.2957903862141221, 0.2839894285527644, 0.27959592496525293], "accuracy": [0.2999603748321533, 0.5885615944862366, 0.6894729733467102, 0.7162858247756958, 0.7457403540611267, 0.7611940503120422, 0.7779685854911804, 0.7922335267066956, 0.7987055778503418, 0.8152159452438354, 0.8193105459213257, 0.8260467648506165, 0.8363492488861084, 0.843481719493866, 0.846387505531311, 0.8564258217811584, 0.8525954484939575, 0.8602562546730042, 0.8646149635314941, 0.8652753829956055, 0.8652753829956055, 0.8722757697105408, 0.8805969953536987, 0.8816536664962769, 0.8828424215316772, 0.8898428082466125, 0.8868049383163452, 0.8891823887825012, 0.8879936337471008], "val_loss": [1.0296491895403181, 0.7035953487668719, 0.5651999711990356, 0.525570103100368, 0.49640817301613943, 0.47051501274108887, 0.45919876439230783, 0.4326556750706264, 0.4068681938307626, 0.3955214875085013, 0.389095527785165, 0.3759406464440482, 0.3681455595152719, 0.35744065046310425, 0.3456708448273795, 0.34058429513658794, 0.33705869742802214, 0.3309210113116673, 0.3340500678334917, 0.336736832346235, 0.3308247838701521, 0.32421263626643587, 0.3250179886817932, 0.31488466262817383, 0.32582493339266094, 0.3227168491908482, 0.32205705983298166, 0.32391826595578876, 0.3239460928099496], "val_accuracy": [0.6176666617393494, 0.7043333053588867, 0.7506666779518127, 0.7663333415985107, 0.7816666960716248, 0.7953333258628845, 0.7953333258628845, 0.8140000104904175, 0.8273333311080933, 0.8330000042915344, 0.8366666436195374, 0.847000002861023, 0.847000002861023, 0.8523333072662354, 0.8616666793823242, 0.8579999804496765, 0.862666666507721, 0.8686666488647461, 0.8646666407585144, 0.8700000047683716, 0.8659999966621399, 0.8619999885559082, 0.8676666617393494, 0.875, 0.8683333396911621, 0.8726666569709778, 0.8700000047683716, 0.8703333139419556, 0.8683333396911621]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1], [4, 6, 9, 3, 2, 2, 1, 5], [0, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 80, 14, 73], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8320000171661377, "mapping_values": [1, 4, 4, 2, 2, 1, 11, 11, 6, 5, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad))), alpha)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.0858853001557383, 1.1713037184751927, 0.841376867426259, 0.7381730923531723, 0.6682397356169997, 0.6267106934718609, 0.6001692323038497, 0.5564497597953505, 0.5338980872963933, 0.49987174087369984, 0.49183864948016115, 0.4623520526714675, 0.4393777077767386, 0.43016407222417774, 0.4079208351113714, 0.3985267510865705, 0.3841693026672155, 0.37019407809796256, 0.3665891407172536, 0.357192395893401, 0.3528893333085382, 0.34227924823776734, 0.3261191025937254, 0.31418397779777113, 0.30849392443064766, 0.2888733097008269, 0.29382136829021255, 0.2838471255888477, 0.2806168536720432, 0.27338949744932217], "accuracy": [0.2999603748321533, 0.5886936783790588, 0.6885483860969543, 0.7190595865249634, 0.7464007139205933, 0.7606657147407532, 0.7766477465629578, 0.7928939461708069, 0.7987055778503418, 0.8152159452438354, 0.8182538747787476, 0.8253863453865051, 0.839519202709198, 0.842028796672821, 0.8471800088882446, 0.8541803956031799, 0.8580108284950256, 0.8588033318519592, 0.8615770936012268, 0.8706908226013184, 0.8648791313171387, 0.8684453964233398, 0.8795403242111206, 0.8833707571029663, 0.884691596031189, 0.8911636471748352, 0.8844274282455444, 0.8911636471748352, 0.8886540532112122, 0.8969752788543701], "val_loss": [1.0296573298318046, 0.7037398815155029, 0.5663341794695173, 0.5248164449419294, 0.49925029277801514, 0.47094193526676725, 0.4593848841530936, 0.4329238789422171, 0.4092028651918684, 0.3947228619030544, 0.3871098245893206, 0.374582256589617, 0.3718824897493635, 0.3568219372204372, 0.34447341305868967, 0.34082535334995817, 0.33733826875686646, 0.33846551179885864, 0.3404959099633353, 0.33023951734815327, 0.3286346197128296, 0.3189891151019505, 0.32340378420693533, 0.3167106424059187, 0.3243739434650966, 0.31790125370025635, 0.32336283581597464, 0.32547863892146517, 0.3208515729222979, 0.31454148462840487], "val_accuracy": [0.6176666617393494, 0.7036666870117188, 0.7519999742507935, 0.7670000195503235, 0.7789999842643738, 0.7940000295639038, 0.7993333339691162, 0.8159999847412109, 0.8266666531562805, 0.8356666564941406, 0.8386666774749756, 0.8460000157356262, 0.8463333249092102, 0.8566666841506958, 0.862666666507721, 0.8610000014305115, 0.8633333444595337, 0.859333336353302, 0.859333336353302, 0.8703333139419556, 0.8673333525657654, 0.8706666827201843, 0.8709999918937683, 0.8709999918937683, 0.8743333220481873, 0.8726666569709778, 0.8706666827201843, 0.8713333606719971, 0.871999979019165, 0.8726666569709778]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1], [4, 6, 2, 3, 2, 2, 3, 9, 7, 9, 7, 6, 7, 9, 5, 9, 8, 6, 8], [1, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0], [85, 80, 14, 73], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8271428346633911, "mapping_values": [1, 4, 4, 2, 2, 1, 28, 28, 19, 9, 4, 4, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad))), grad), tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(grad, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))), alpha)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, sigma))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.085885079907483, 1.1711037319570312, 0.8412875129625136, 0.7391324998239375, 0.6674145273780622, 0.6266205303736052, 0.5984024210864873, 0.5552348408480487, 0.5327915953308159, 0.4980669844152118, 0.4905544040170344, 0.46108113904954134, 0.4409177064572847, 0.43140696861630246, 0.40835543904857485, 0.3972753336629249, 0.38186648761229414, 0.37239156673061946, 0.37052896825109316, 0.35291654777690606, 0.3510755857991788, 0.34728479861677786, 0.32831013473490084, 0.31893669873212294, 0.30590859186206876, 0.2928255703770143, 0.29820171182402183, 0.2889947335103783, 0.2823753648028791, 0.27439127425712256, 0.2627247001957569, 0.2558767870708212], "accuracy": [0.2999603748321533, 0.5888257622718811, 0.6897371411323547, 0.7187954187393188, 0.7470611333847046, 0.7598732113838196, 0.7775723338127136, 0.7915731072425842, 0.7988376617431641, 0.8142913579940796, 0.8182538747787476, 0.8278959393501282, 0.8354246616363525, 0.8396512866020203, 0.8475762605667114, 0.8519350290298462, 0.8585391640663147, 0.8568220734596252, 0.8595958352088928, 0.8665962219238281, 0.8681812286376953, 0.8708229064941406, 0.8778232932090759, 0.8794082403182983, 0.8842953443527222, 0.8905032277107239, 0.8828424215316772, 0.887201189994812, 0.8907673954963684, 0.8957865834236145, 0.89988112449646, 0.9039757251739502], "val_loss": [1.0296617916652135, 0.7038512400218419, 0.5666076455797467, 0.5256918498447963, 0.4962725469044277, 0.4699922800064087, 0.46063932350703646, 0.4288845488003322, 0.40721590178353445, 0.3949048604284014, 0.38436016866139006, 0.3754121661186218, 0.3748921666826521, 0.3583908677101135, 0.34406145981379915, 0.3398237313543047, 0.3405134507587978, 0.3434635485921587, 0.3394350750105722, 0.3279489278793335, 0.3312091486794608, 0.31673920154571533, 0.32685247489384245, 0.3157734956060137, 0.3254349912915911, 0.3156904322760446, 0.3201537387711661, 0.3186908875192915, 0.32489897523607525, 0.3178320527076721, 0.3174950054713658, 0.31572424513953073], "val_accuracy": [0.6176666617393494, 0.7039999961853027, 0.7506666779518127, 0.7643333077430725, 0.7789999842643738, 0.7919999957084656, 0.793666660785675, 0.8140000104904175, 0.8263333439826965, 0.8343333601951599, 0.840666651725769, 0.8456666469573975, 0.8420000076293945, 0.8516666889190674, 0.8640000224113464, 0.8603333234786987, 0.8576666712760925, 0.8586666584014893, 0.8553333282470703, 0.8683333396911621, 0.8659999966621399, 0.871666669845581, 0.8709999918937683, 0.8696666955947876, 0.8706666827201843, 0.8733333349227905, 0.8759999871253967, 0.8683333396911621, 0.8666666746139526, 0.8693333268165588, 0.875, 0.8733333349227905]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [44, 32, 5, 49, 25], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [1, 4, 6, 3, 2, 2, 4, 9, 0, 9, 0, 4, 4, 2, 9, 5, 1], [0, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0], [85, 80, 14, 73], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.7037143111228943, "mapping_values": [1, 4, 4, 2, 2, 1, 24, 24, 16, 8, 4, 4, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(grad), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))), tf.math.add(beta, grad)), tf.math.negative(grad)))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(grad, tf.math.add(beta, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.square(tf.math.add(beta, beta))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, sigma))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.1340619651255057, 1.610243572991648, 0.9207580000370753, 1.3226997670464749, 1.4500495574698236, 1.346335597136521, 1.1788881461948781, 1.2627759853043592], "accuracy": [0.31264033913612366, 0.45145952701568604, 0.6567164063453674, 0.594241201877594, 0.5498613119125366, 0.5709945559501648, 0.5884295105934143, 0.5890899300575256], "val_loss": [1.8525120190211706, 0.7743619510105678, 0.5712883813040597, 0.7375279324395316, 0.9915312698909214, 0.8330026183809552, 0.7132382563182286, 9.517664500645228], "val_accuracy": [0.25966668128967285, 0.6513333320617676, 0.7446666955947876, 0.6990000009536743, 0.6513333320617676, 0.6576666831970215, 0.6880000233650208, 0.2666666805744171]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1], [4, 6, 2, 3, 2, 2, 3, 9, 7, 9, 7, 6, 7, 9, 5, 9, 8, 6, 8], [0, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 80, 14, 73], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [9, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.6520000100135803, "mapping_values": [1, 4, 4, 2, 2, 1, 17, 17, 10, 7, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), grad), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, alpha)))))), tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)), grad)), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.057984716667711, 1.2424375886662666, 1.0140196907049503, 1.034403887974068, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.2954695522785187, 0.5893540978431702, 0.6339981555938721, 0.6365077495574951, 0.5218597054481506, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [0.9582063129970005, 0.8782192298344204, 0.7242229495729718, 0.7052939278738839, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.6516666412353516, 0.6673333048820496, 0.6779999732971191, 0.6990000009536743, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [2, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1], [5, 6, 9, 3, 2, 2, 5, 9, 8, 4], [0, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 80, 63], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 14, 14, 10, 4, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))), tf.math.sqrt(tf.math.pow(tf.math.add(beta, grad), grad)))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [166815.38529666906, 4590377.209153349, 19624213.39743759, 64065974.21899353, 129437591.4547616, 221255739.57270846], "accuracy": [0.09787346422672272, 0.09417514503002167, 0.08968432247638702, 0.08809932321310043, 0.09959053993225098, 0.09879804402589798], "val_loss": [558954.8392857143, 3631806.785714286, 5915835.285714285, 11753258.857142856, 1680605.9642857143, 6061888.142857143], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [2, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1], [1, 4, 6, 3, 2, 2, 3, 9, 3, 9, 0, 4, 6, 2, 9, 5, 1], [1, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0], [85, 80, 26, 73], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [4, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 27, 27, 17, 10, 3, 5, 4, 2, 2, 0, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.multiply(grad, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)), tf.math.add(beta, grad)))), tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), grad)), tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, beta)))))))), tf.math.add(beta, alpha))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, sigma))), tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1447.8929602242952, 2.331347533504268, 2.311483606418614, 2.305186298245909, 2.3034534288702893, 2.302966122708505], "accuracy": [0.09681680053472519, 0.09549596905708313, 0.09140139818191528, 0.09840179979801178, 0.09655263274908066, 0.09602430462837219], "val_loss": [2.0091662406921387, 1.9847869873046875, 1.976550851549421, 1.9743243626185827, 1.9736847877502441, 1.9737134660993303], "val_accuracy": [0.10366666316986084, 0.09666666388511658, 0.09666666388511658, 0.09666666388511658, 0.09566666930913925, 0.09566666930913925]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [0, 1, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1], [4, 1, 5, 3, 2, 2, 3, 9, 3, 8, 5, 4, 1, 1, 9, 1, 4, 5, 2, 0, 3, 5, 0, 5], [0, 0, 3, 3, 1, 5, 3, 2, 1, 2, 4, 0, 5], [85, 80, 14, 73], [0, 0, 1, 0, 0, 0, 1, 1], [1, 0, 1, 1, 0], [8, 7, 8, 4], [4, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [0, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302456911481556, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10117553919553757, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1], [4, 6, 9, 3, 6, 2, 1, 9], [1, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0], [85, 80, 14, 73], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 13, 13, 8, 5, 2, 4, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.subtract(grad, tf.math.add(beta, grad)), grad), tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, sigma))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07858935743570328, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 7, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 3, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1], [4, 6, 9, 9, 2, 2, 3, 9], [0, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 80, 3], [0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [2, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 5, 5, 4, 1, 3, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.302418784631667, 2.3178915394579085, 1.6416198546215595e+21, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09021265059709549, 0.08387266844511032, 0.08677849918603897, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.97503628049578, 1.995703901563372, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.02433333359658718, 0.08966666460037231, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [0, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [79, 32, 5, 49, 25], [0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1], [2, 6, 9, 9, 2, 2, 3, 9], [1, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0], [85, 80, 14, 73], [0, 0, 0, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [6, 2, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [2, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 18, 11, 7, 5, 5, 5, 3, 2, 1, 3, 3, 1, 2, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))))), tf.math.pow(tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, sigma), tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10117553919553757, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 5, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [4, 6, 9, 3, 2, 2, 3, 9, 8, 6, 8, 7, 5, 9, 0, 9], [1, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0], [85, 80, 14, 73], [0, 0, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 13, 13, 8, 5, 2, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.square(grad), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad))), tf.math.add(beta, grad)), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, sigma))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.301281292708385, 2.3022317563884402, 2.303319468175132, 2.30680409004943, 2.3132383569577084, 2.31775202528833, 2.336807396118714, 2.36339878676952, 2.4679570518007936, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09126931428909302, 0.08836349099874496, 0.08889182657003403, 0.08400475233793259, 0.07594769448041916, 0.08083476126194, 0.07687227427959442, 0.0870426595211029, 0.08268392831087112, 0.09655263274908066, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9711877959115165, 1.9720329557146346, 1.9737509318760462, 1.976419448852539, 1.9803917748587472, 1.9858337811061315, 1.9961295127868652, 2.02182674407959, 2.213128158024379, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.03733333200216293, 0.03133333474397659, 0.024000000208616257, 0.019999999552965164, 0.02866666577756405, 0.052000001072883606, 0.08633333444595337, 0.10066666454076767, 0.10066666454076767, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [4, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1], [4, 6, 9, 9, 2, 2, 3, 9, 9, 9], [0, 3, 5, 3, 1, 5, 3, 2, 1, 4, 4, 0], [82, 80, 3, 26, 65, 31], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 11, 11, 10, 1, 6, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)))), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10117553919553757, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 9, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [44, 32, 5, 49, 25], [0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1], [4, 6, 2, 3, 2, 2, 3, 9, 7, 9, 7, 6, 7, 9, 5, 9, 8, 6, 8], [3, 0, 3, 3, 1, 5, 3, 2, 1, 2, 4, 0, 5], [30, 80, 3], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.04171428456902504, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 4, 3, 2, 1, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, sigma))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.3012127425645117, 2.3015134089878915, 2.3011076617880173, 2.301569541872705, 2.302616086854533, 2.301039950313223], "accuracy": [0.09140139818191528, 0.09008057415485382, 0.0952318087220192, 0.09008057415485382, 0.09047681838274002, 0.09272222965955734], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}]