[{"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 0, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 3, 6, 4, 6, 2, 2, 5, 5, 4, 6, 5, 9, 2, 8, 6, 3, 3, 4, 1, 2, 9, 6, 1, 6, 4, 5, 2, 6, 5, 4, 0, 0, 2, 3, 7, 9, 6, 2, 4, 1, 6, 0, 2], [3, 3, 0, 3, 0, 3, 0, 3, 0, 0, 2, 3, 3, 2, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [17, 88, 70, 97, 48, 12, 60, 9, 54, 64], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1], [2, 9, 0, 9, 6, 8, 4], [0, 4, 2], [87, 74, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.8382856845855713, "mapping_values": [1, 4, 4, 2, 2, 1, 3, 3, 1, 2, 0, 3, 3, 2, 1, 2, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), tf.math.add(sigma, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.993216226696417, 1.3938357910585915, 0.8288807920287896, 0.69901298021738, 0.6423522351818188, 0.5911566275237747, 0.5521405928831815, 0.5154740116332012, 0.5065388356681986, 0.4856457521595487, 0.4569423725466136, 0.4603805944526263, 0.4454557696873281, 0.4334851685744613, 0.41927189069448634, 0.39939188141990345, 0.3838026846766771, 0.377544336535628, 0.36852434941995194, 0.34906923613055757, 0.3397923731147306, 0.3340617241112784, 0.3182994665809516, 0.31698970043774155, 0.3014296441581413, 0.2952709647001072, 0.30248095912153, 0.2819089527300808, 0.27744660075503474, 0.27816932451109355], "accuracy": [0.3457931578159332, 0.5527671575546265, 0.6861709356307983, 0.7349095344543457, 0.7535332441329956, 0.7705719470977783, 0.7924976944923401, 0.8026680946350098, 0.8063663840293884, 0.8136309385299683, 0.8281601071357727, 0.8322546482086182, 0.830669641494751, 0.8330471515655518, 0.8437458872795105, 0.8556333184242249, 0.8556333184242249, 0.8570862412452698, 0.8631620407104492, 0.8681812286376953, 0.8759741187095642, 0.8716153502464294, 0.878879964351654, 0.8766345381736755, 0.8864086866378784, 0.8845595121383667, 0.8878615498542786, 0.8889182209968567, 0.8963148593902588, 0.8944657444953918], "val_loss": [1.6349872520991735, 0.6977112122944423, 0.56953878062112, 0.5157915694372994, 0.4909506355013166, 0.4427533234868731, 0.4247418301446097, 0.4088370289121355, 0.4063741479601179, 0.39439653498785837, 0.4088920865740095, 0.3749462195805141, 0.3874695471354893, 0.3597014716693333, 0.36842470509665354, 0.35036545991897583, 0.36867300953183857, 0.3469903724534171, 0.3395451818193708, 0.343560482774462, 0.3262298107147217, 0.34068104199000765, 0.33034463439668926, 0.32860611166272846, 0.32245584045137676, 0.32522123200552805, 0.32280971322740826, 0.3185344082968576, 0.3410681060382298, 0.3288431933947972], "val_accuracy": [0.6116666793823242, 0.6833333373069763, 0.7286666631698608, 0.7559999823570251, 0.7713333368301392, 0.79666668176651, 0.8059999942779541, 0.8119999766349792, 0.8230000138282776, 0.8323333263397217, 0.8216666579246521, 0.8353333473205566, 0.8186666369438171, 0.8389999866485596, 0.8346666693687439, 0.843666672706604, 0.8423333168029785, 0.8433333039283752, 0.8586666584014893, 0.8456666469573975, 0.856333315372467, 0.8536666631698608, 0.8640000224113464, 0.8656666874885559, 0.8683333396911621, 0.8643333315849304, 0.862333357334137, 0.8653333187103271, 0.8583333492279053, 0.8673333525657654]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 0, 2, 2, 2, 0, 2, 3, 3, 0], [43, 11, 89, 50, 85, 46], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 2, 6, 4, 6, 2, 2, 5, 5, 4, 6, 2, 2, 2, 8, 5, 3, 3, 4, 1, 2, 9, 6, 1, 6, 4, 5, 2, 6, 5, 4, 0, 0, 2, 3, 7, 9, 6, 2, 4, 1, 6, 0, 2], [3, 3, 1, 0, 0, 3, 3, 3, 0, 2, 2, 3, 3, 0, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [17, 88, 70, 97, 48, 12, 60, 9, 54, 64], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1], [0, 3, 2, 9, 6, 8, 4], [0, 4, 2], [23, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 3, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.8291428685188293, "mapping_values": [1, 4, 4, 2, 2, 1, 10, 10, 5, 5, 2, 2, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.square(grad), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.pow(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9931129359644733, 1.39370607244907, 0.8291449065945955, 0.6985789688665476, 0.6426345343839192, 0.5938400686881514, 0.5526559770839435, 0.5159245554041381, 0.5039507215954545, 0.48744019333004024, 0.4581872987166183, 0.4570083001097353, 0.43532243335976056, 0.4290021015369283, 0.41640859614384096, 0.4036278178734062, 0.38904957782086946, 0.3856110947715639, 0.3748915609532753, 0.3522401912896357, 0.34432974341223976, 0.3380584062846298, 0.32048260679476137, 0.317665334166537, 0.3059599396299456, 0.298931378668971, 0.29983402487702926, 0.2793919723960686, 0.28014253525686084, 0.2725255001553329, 0.2771564211867127, 0.2639290160113133, 0.2599768614461157, 0.24630758844944842, 0.2520058980124769, 0.24048077644074928, 0.2282851510150416, 0.22767200197652032], "accuracy": [0.34566107392311096, 0.5526350736618042, 0.6859067678451538, 0.7366266250610352, 0.7577598690986633, 0.7693831920623779, 0.789988100528717, 0.8031964302062988, 0.8090080618858337, 0.8131026029586792, 0.829216718673706, 0.8321225643157959, 0.8348963260650635, 0.8389908671379089, 0.8438779711723328, 0.8481045961380005, 0.8508783578872681, 0.8560295701026917, 0.8577466607093811, 0.8691058158874512, 0.8725399374961853, 0.8705587387084961, 0.8803328275680542, 0.8819178342819214, 0.8833707571029663, 0.8835028409957886, 0.8881257176399231, 0.8932769894599915, 0.897899866104126, 0.8972394466400146, 0.8930128216743469, 0.9014661312103271, 0.8996169567108154, 0.9063531756401062, 0.9034473896026611, 0.906749427318573, 0.9108440279960632, 0.9101836085319519], "val_loss": [1.6343001638139998, 0.6983929361615863, 0.5674782310213361, 0.5143622330256871, 0.49389941351754324, 0.4451352783611843, 0.4298557298524039, 0.4055207542010716, 0.4093091998781477, 0.3933392081941877, 0.3903933508055551, 0.3704651253564017, 0.39411933932985577, 0.3531814473015921, 0.37305791888918194, 0.34737049681799753, 0.3708246094839914, 0.35686637674059185, 0.34096786805561613, 0.3339446187019348, 0.33139184543064665, 0.3471301112856184, 0.32728601353509085, 0.3260663662637983, 0.32158071654183523, 0.3230364833559309, 0.31868196385247366, 0.31969434874398367, 0.3230667199407305, 0.32559968744005474, 0.3218912993158613, 0.33095385347093853, 0.3167612552642822, 0.3289437975202288, 0.32264926603862215, 0.32258832454681396, 0.3187360678400312, 0.32183469193322317], "val_accuracy": [0.6116666793823242, 0.6809999942779541, 0.7356666922569275, 0.7549999952316284, 0.7689999938011169, 0.7973333597183228, 0.8133333325386047, 0.8146666884422302, 0.8213333487510681, 0.8296666741371155, 0.8326666951179504, 0.8396666646003723, 0.815666675567627, 0.8453333377838135, 0.8286666870117188, 0.8453333377838135, 0.8373333215713501, 0.840666651725769, 0.856333315372467, 0.8510000109672546, 0.8550000190734863, 0.8533333539962769, 0.8603333234786987, 0.862666666507721, 0.8646666407585144, 0.8633333444595337, 0.8676666617393494, 0.8713333606719971, 0.8669999837875366, 0.8676666617393494, 0.8663333058357239, 0.859000027179718, 0.8723333477973938, 0.8636666536331177, 0.8709999918937683, 0.8703333139419556, 0.871999979019165, 0.871666669845581]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 0, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [8, 5, 2, 6, 4, 6, 2, 2, 5, 5, 4, 6, 2, 2, 2, 8, 5, 3, 3, 4, 1, 2, 9, 6, 1, 6, 4, 5, 2, 6, 5, 4, 0, 0, 2, 3, 7, 9, 6, 2, 4, 1, 6, 0, 2], [3, 3, 1, 0, 0, 3, 3, 3, 0, 2, 2, 3, 3, 0, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [17, 88, 70, 97, 48, 12, 60, 9, 54, 64], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1], [0, 3, 2, 9, 6, 8, 4], [2, 4, 2], [68, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 3, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.8237142562866211, "mapping_values": [1, 4, 4, 2, 2, 1, 3, 3, 2, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.square(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9768558471997368, 1.312073141741888, 1.2076564206423273, 0.9037069073049006, 0.8062336809914488, 0.7816802695238075, 0.7384765513065138, 0.6891476959678964, 0.6795831628369146, 0.666241415959969, 0.6592938733721264, 0.6345425601790311, 0.6086251631451951, 0.6165573364471826, 0.5912757838060513, 0.5974502971285386, 0.5566411656616008, 0.541340539019578, 0.5595763973461686, 0.562687679517066, 0.5329909062798092, 0.5303776361025587, 0.5158991160417639, 0.5067666561108193, 0.5108861715140801, 0.48093305432313094, 0.49867864711456894, 0.4791481713136394, 0.48939658428038335, 0.465714896780987, 0.4725900482444904, 0.45285050231845797, 0.4629903199642468, 0.44506464588990097, 0.4486370589069923, 0.43532045256223945, 0.43655168136286304, 0.43630494480245796, 0.4204230138481159, 0.40831435567919194, 0.4073711657969707, 0.4155500870984795, 0.39751500327431877, 0.4021393278444668, 0.39065400602842415, 0.38979274682034404, 0.3880217997602043, 0.38721915245008914, 0.37983273205708645, 0.3704404281650347, 0.37249641863818905, 0.3676004630542151, 0.37336701621957, 0.3606092013962879, 0.3568894925323444], "accuracy": [0.3443402349948883, 0.5410117506980896, 0.5756174921989441, 0.6617355942726135, 0.6960771083831787, 0.7108704447746277, 0.7271166443824768, 0.7309470176696777, 0.7382115721702576, 0.7460044622421265, 0.7491744756698608, 0.7594769597053528, 0.7655527591705322, 0.7609298825263977, 0.7790252566337585, 0.7733456492424011, 0.7865539789199829, 0.7959318161010742, 0.7877426743507385, 0.7884030938148499, 0.7991018295288086, 0.8017435073852539, 0.8010830879211426, 0.8132346868515015, 0.8054417967796326, 0.8207634687423706, 0.813498854637146, 0.8190463781356812, 0.8144234418869019, 0.8241975903511047, 0.8212917447090149, 0.8280280232429504, 0.8269713521003723, 0.8314621448516846, 0.830669641494751, 0.8396512866020203, 0.8339717388153076, 0.8322546482086182, 0.8429533839225769, 0.844010055065155, 0.8449346423149109, 0.8455950617790222, 0.8495575189590454, 0.8448025584220886, 0.8536521196365356, 0.8565579056739807, 0.8557654023170471, 0.8555012345314026, 0.8549728989601135, 0.8642187118530273, 0.8593316674232483, 0.863029956817627, 0.8589354157447815, 0.8634262084960938, 0.8667283058166504], "val_loss": [1.2523786681038993, 0.9351355688912528, 0.6992231266839164, 0.6499686581747872, 0.6045903989246914, 0.5979433400290353, 0.5604933500289917, 0.5601027011871338, 0.5185147183282035, 0.5254660333905902, 0.5337894644056048, 0.5094352109091622, 0.5149197578430176, 0.4856901168823242, 0.47624058382851736, 0.4592120477131435, 0.451820433139801, 0.4570081744875227, 0.4599361760275705, 0.4382756267275129, 0.49126768112182617, 0.42888134717941284, 0.4232735974448068, 0.4179754768099104, 0.4275396636554173, 0.3990799273763384, 0.4184993505477905, 0.4345539127077375, 0.4082326207842146, 0.3872237801551819, 0.3902368886130197, 0.3988942163331168, 0.37608650752476286, 0.41429311888558523, 0.3790692090988159, 0.3829096896307809, 0.43618580273219515, 0.38145837613514494, 0.3724241171564375, 0.374455920287541, 0.36828239474977764, 0.3788705553327288, 0.3654151899474008, 0.3566176380429949, 0.37952911853790283, 0.36604005098342896, 0.3695946080344064, 0.3664245009422302, 0.347829384463174, 0.3436448233468192, 0.34977532284600393, 0.34826959882463726, 0.3464832731655666, 0.3512476938111441, 0.35387198414121357], "val_accuracy": [0.5299999713897705, 0.5619999766349792, 0.6666666865348816, 0.7009999752044678, 0.7353333234786987, 0.7319999933242798, 0.7396666407585144, 0.7243333458900452, 0.765999972820282, 0.750333309173584, 0.7429999709129333, 0.7699999809265137, 0.7613333463668823, 0.7716666460037231, 0.7796666622161865, 0.7926666736602783, 0.796999990940094, 0.7910000085830688, 0.7986666560173035, 0.8026666641235352, 0.7773333191871643, 0.8016666769981384, 0.8106666803359985, 0.8143333196640015, 0.8083333373069763, 0.8289999961853027, 0.8173333406448364, 0.7926666736602783, 0.8169999718666077, 0.8373333215713501, 0.8303333520889282, 0.8163333535194397, 0.8353333473205566, 0.8106666803359985, 0.8413333296775818, 0.8343333601951599, 0.8053333163261414, 0.8386666774749756, 0.8420000076293945, 0.8339999914169312, 0.8370000123977661, 0.8366666436195374, 0.840666651725769, 0.8483333587646484, 0.828000009059906, 0.8453333377838135, 0.8423333168029785, 0.8456666469573975, 0.8583333492279053, 0.8586666584014893, 0.8483333587646484, 0.8546666502952576, 0.8543333411216736, 0.8433333039283752, 0.8453333377838135]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 6, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 0, 2, 2, 2, 2, 2, 3, 3, 0], [43, 76, 4, 50, 87, 46], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [2, 2, 2, 2, 6, 1, 9, 4, 5, 5, 4, 2, 0, 2, 2, 6, 2, 3, 2, 3, 2, 2, 9, 6, 1, 6, 4, 5, 2, 2, 5, 4, 0, 0, 2, 9, 7, 2, 6, 0, 4, 1, 6, 0, 2], [3, 3, 1, 0, 0, 3, 1, 3, 0, 2, 2, 3, 3, 0, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [17, 88, 70, 97, 21, 12, 60, 9, 54, 64], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1], [0, 3, 2, 9, 6, 8, 4], [4, 4, 2], [87, 74, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 3, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 20, 20, 12, 8, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.negative(tf.math.add(alpha, grad)), tf.math.subtract(tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), alpha)), tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.add(alpha, grad)))), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1014397069811821, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 0, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [2, 5, 3, 6, 8, 6, 2, 2, 5, 5, 4, 6, 5, 9, 2, 8, 6, 3, 3, 4, 1, 2, 9, 6, 1, 6, 4, 5, 2, 6, 5, 4, 0, 0, 2, 3, 7, 9, 6, 2, 4, 1, 6, 0, 2], [3, 3, 0, 3, 0, 3, 0, 3, 0, 0, 2, 3, 3, 2, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [17, 88, 70, 97, 48, 12, 60, 9, 54, 64], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1], [0, 3, 2, 9, 6, 8, 4], [3, 4, 2], [87, 74, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 3, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 9, 9, 5, 4, 1, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, sigma))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [11921932.502151957, 226955874.02456743, 1061541421.242108, 2951701147.0674944, 6322350300.732797, 11512940023.817198], "accuracy": [0.10289261490106583, 0.09747721254825592, 0.09734513610601425, 0.10051512718200684, 0.1010434553027153, 0.10394927859306335], "val_loss": [44710092.571428575, 357170029.71428573, 1204875227.4285715, 2855329865.142857, 5576036644.571428, 9634507922.285715], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 6, 3, 8, 2, 4, 0, 1, 5, 4, 1, 2, 6, 3, 6, 5, 8], [0, 2, 2, 1, 0, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [2, 2, 6, 2, 6, 1, 9, 4, 0, 5, 4, 2, 0, 2, 2, 6, 2, 3, 2, 3, 2, 2, 9, 6, 1, 6, 4, 5, 2, 2, 5, 4, 0, 0, 2, 9, 7, 2, 6, 0, 4, 1, 6, 0, 2], [3, 3, 3, 0, 0, 3, 3, 3, 0, 3, 2, 3, 3, 0, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [76, 88, 17, 97, 21, 12, 60, 9, 54, 64], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1], [5, 3, 2, 9, 6, 8, 4], [0, 4, 2], [68, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 3, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 18, 10, 8, 2, 1, 1, 0, 1, 0, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(grad)), tf.math.add(tf.math.add(alpha, alpha), tf.math.pow(tf.math.negative(tf.math.subtract(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.add(alpha, tf.math.square(tf.math.pow(grad, grad))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1014397069811821, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 0, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 3, 6, 4, 6, 2, 2, 5, 5, 4, 6, 5, 9, 2, 8, 6, 3, 3, 4, 1, 2, 9, 6, 1, 6, 4, 5, 2, 6, 5, 4, 0, 0, 2, 3, 7, 9, 6, 2, 4, 1, 6, 0, 2], [4, 3, 1, 0, 0, 3, 3, 3, 0, 2, 2, 3, 3, 0, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [17, 88, 70, 97, 48, 12, 60, 9, 54, 64], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1], [0, 3, 2, 9, 6, 8, 4], [0, 4, 2], [24, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [2, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 3, 3, 1, 2, 0, 2, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(grad, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.301079651494115, 2.3048800149251756, 2.3076085463302043, 2.3096100776391717, 2.3117216016953064, 2.3166633907830034, 2.318989352307, 2.324143649186787, 2.333737810793932, 2.3474201665436665, 2.40042556454839, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09338264167308807, 0.08638224750757217, 0.08109892904758453, 0.08030643314123154, 0.08083476126194, 0.08083476126194, 0.07224937528371811, 0.07753269374370575, 0.07409853488206863, 0.0734381154179573, 0.08149518072605133, 0.10117553919553757, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.97234651020595, 1.9737565176827567, 1.975611754826137, 1.9778775487627303, 1.9802682740347726, 1.9833645820617676, 1.9865045547485352, 1.9908991541181291, 1.9983417647225517, 2.0138320241655623, 2.202189173017229, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.03033333271741867, 0.024000000208616257, 0.02266666665673256, 0.024000000208616257, 0.027666667476296425, 0.0430000014603138, 0.054999999701976776, 0.06966666877269745, 0.08833333104848862, 0.09733333438634872, 0.09733333438634872, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 6, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 0, 2, 2, 2, 0, 2, 3, 3, 0], [30, 76, 89, 50, 85, 46], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [2, 2, 2, 2, 4, 1, 9, 4, 5, 5, 4, 4, 0, 2, 2, 6, 2, 3, 2, 3, 2, 2, 9, 2, 1, 6, 4, 5, 2, 2, 5, 4, 0, 0, 2, 9, 7, 2, 6, 0, 4, 1, 6, 0, 2], [3, 3, 1, 0, 0, 3, 3, 3, 0, 2, 2, 3, 1, 0, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [15, 88, 70, 97, 48, 12, 60, 9, 54, 64], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1], [0, 3, 2, 9, 6, 8, 4], [0, 4, 2], [87, 74, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [0, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 3, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [6, 23, 13, 96, 41, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 17, 17, 10, 7, 3, 2, 2, 1, 1, 1, 1, 0, 1, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.pow(tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.pow(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(beta, grad)))))))))), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3011670526401984, 2.3025854578611478, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 4, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 0, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 2, 6, 4, 6, 2, 2, 5, 5, 4, 6, 2, 2, 2, 8, 5, 3, 3, 4, 1, 2, 9, 6, 1, 6, 4, 5, 2, 6, 5, 4, 0, 0, 2, 3, 7, 9, 6, 2, 4, 1, 6, 0, 2], [0, 3, 1, 0, 0, 3, 3, 3, 0, 2, 2, 3, 3, 0, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [17, 88, 70, 97, 48, 12, 60, 9, 54, 64], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1], [0, 3, 2, 9, 6, 8, 4], [0, 4, 2], [97, 2, 82], [0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [3, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 3, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 2, 8, 8, 4, 4, 2, 1, 1, 0, 1, 1, 49, 29, 20, 6], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.pow(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.square(tf.math.add(beta, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(sigma, tf.math.add(tf.math.add(tf.math.subtract(beta, tf.math.pow(tf.math.subtract(tf.math.pow(beta, tf.math.subtract(sigma, tf.math.sqrt(tf.math.add(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), sigma)))), beta), tf.math.add(tf.math.pow(tf.math.sqrt(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), alpha), sigma))), tf.math.multiply(tf.math.multiply(tf.math.subtract(sigma, tf.math.negative(tf.math.negative(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))), alpha), beta)), tf.math.add(tf.math.negative(beta), tf.math.subtract(tf.math.negative(tf.math.square(tf.math.divide_no_nan(tf.math.multiply(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(alpha, tf.math.negative(sigma))))), tf.math.square(tf.math.square(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1014397069811821, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 0, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 3, 6, 4, 6, 2, 2, 5, 5, 4, 6, 5, 9, 2, 8, 6, 3, 3, 4, 1, 2, 9, 6, 1, 6, 4, 5, 2, 6, 5, 4, 0, 0, 2, 3, 7, 9, 6, 2, 4, 1, 6, 0, 2], [3, 3, 0, 3, 0, 3, 0, 3, 0, 0, 2, 3, 3, 2, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [17, 88, 70, 97, 48, 12, 60, 9, 54, 64], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1], [2, 9, 0, 9, 6, 8, 4], [0, 4, 2], [87, 74, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 4, 2, 1, 4, 4, 2, 2, 0, 3, 3, 2, 1, 2, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), tf.math.add(sigma, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1014397069811821, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 0, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 3, 6, 4, 6, 2, 2, 5, 5, 4, 6, 5, 9, 2, 8, 6, 3, 3, 4, 1, 2, 9, 6, 1, 6, 4, 5, 2, 6, 5, 4, 0, 0, 2, 3, 7, 9, 6, 2, 4, 1, 6, 0, 2], [5, 3, 1, 0, 0, 3, 3, 3, 0, 2, 2, 3, 3, 0, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [17, 88, 70, 97, 48, 12, 60, 9, 54, 64], [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1], [2, 9, 0, 9, 6, 8, 4], [4, 4, 2], [19, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 9, 5, 3, 3, 3, 1, 2, 0, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(grad, tf.math.pow(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.subtract(tf.math.square(tf.math.add(alpha, alpha)), tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10236428678035736, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 0, 2, 2, 2, 0, 2, 3, 3, 0], [66, 66, 89, 50, 85, 46], [0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [0, 2, 2, 2, 6, 1, 4, 4, 5, 9, 9, 2, 0, 2, 2, 6, 2, 3, 2, 6, 2, 2, 6, 9, 1, 6, 4, 5, 2, 2, 5, 4, 0, 0, 2, 9, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 3, 1, 0, 0, 3, 3, 3, 2, 2, 2, 3, 3, 3, 3, 1, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [17, 88, 70, 97, 21, 51, 60, 9, 54, 64], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1], [0, 3, 2, 9, 6, 8, 4], [4, 4, 2], [68, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [2, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 3, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 36, 36, 21, 15, 5, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32), tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), alpha)), tf.math.subtract(tf.math.add(beta, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.pow(tf.math.square(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(beta, beta)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad))))), grad))))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10289261490106583, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 0, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 3, 6, 4, 6, 2, 2, 5, 5, 4, 6, 5, 9, 2, 8, 6, 3, 3, 4, 1, 2, 9, 6, 1, 6, 4, 5, 2, 6, 5, 4, 0, 0, 2, 3, 7, 9, 6, 2, 4, 1, 6, 0, 2], [3, 3, 1, 0, 0, 3, 1, 3, 0, 2, 2, 3, 3, 0, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [17, 88, 70, 97, 21, 12, 60, 9, 54, 64], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1], [2, 9, 0, 9, 6, 8, 4], [4, 4, 2], [87, 74, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 3, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 3, 3, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3019113386973196, 2.302484531349683, 2.3024950974086145, 2.302496249980269, 2.3025128286213308, 2.3025018330877485], "accuracy": [0.10830801725387573, 0.09998679161071777, 0.11161009222269058, 0.10579843819141388, 0.10368511080741882, 0.10236428678035736], "val_loss": [1.9736621039254325, 1.973660605294364, 1.9736511366707938, 1.973649501800537, 1.9736383983067103, 1.9736401012965612], "val_accuracy": [0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 8, 2, 4, 3, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 0, 2, 2, 2, 0, 2, 3, 3, 0], [43, 30, 89, 50, 85, 46], [0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [8, 5, 2, 6, 4, 6, 2, 2, 5, 5, 4, 6, 2, 2, 2, 8, 5, 3, 3, 4, 1, 2, 9, 6, 1, 6, 4, 5, 2, 6, 5, 4, 0, 0, 2, 3, 7, 9, 6, 2, 4, 1, 6, 0, 2], [3, 0, 1, 0, 0, 3, 1, 3, 0, 2, 2, 3, 3, 0, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [79, 88, 70, 97, 48, 12, 60, 9, 54, 64], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1], [6, 4, 1, 1, 6, 8, 4], [3, 4, 2], [87, 74, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 3, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [2, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 1, 2, 1, 0, 1, 3, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 3, 1, 1, 3, 3, 2, 1, 0, 12, 7, 6, 1, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.square(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, sigma), tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.sqrt(sigma)), sigma)))))), sigma)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09589222073554993, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [2, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 0, 2, 2, 2, 0, 2, 3, 3, 0], [69, 66, 89, 50, 85, 46], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 3, 6, 4, 6, 2, 2, 5, 5, 4, 6, 5, 9, 2, 8, 6, 3, 3, 4, 1, 2, 9, 6, 1, 6, 4, 5, 2, 6, 5, 4, 0, 0, 2, 3, 7, 9, 6, 2, 4, 1, 6, 0, 2], [3, 3, 0, 3, 0, 3, 0, 3, 0, 0, 2, 3, 3, 2, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [17, 88, 70, 97, 48, 12, 60, 9, 54, 64], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1], [2, 9, 0, 9, 6, 8, 4], [0, 4, 2], [87, 74, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 3, 3, 2, 1, 2, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), tf.math.add(sigma, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [48634633213.786575, 7285477155513.905, 126081409148415.39, 892765002885304.2, 3906616252046803.0, 1.2791034885052868e+16], "accuracy": [0.10289261490106583, 0.09747721254825592, 0.09708096832036972, 0.1006472036242485, 0.1010434553027153, 0.10421344637870789], "val_loss": [402691457024.0, 21709316648374.855, 233019927429120.0, 1270493048696246.8, 4758737097663634.0, 1.40299868001871e+16], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 0, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 2, 6, 4, 6, 2, 2, 5, 5, 4, 6, 2, 2, 2, 8, 5, 3, 3, 4, 1, 2, 9, 6, 1, 6, 4, 5, 2, 6, 5, 4, 0, 0, 2, 3, 7, 9, 6, 2, 4, 1, 6, 0, 2], [0, 3, 3, 0, 0, 3, 3, 3, 2, 2, 2, 3, 3, 0, 3, 1, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [17, 88, 70, 97, 48, 12, 60, 9, 54, 64], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1], [0, 3, 2, 9, 6, 8, 4], [4, 4, 2], [68, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 3, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 3, 3, 1, 2, 1, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [549206643.7381548, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.05547483637928963, 0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [7.170137265246935e+26, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 2, 1, 0, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [4, 2, 3, 2, 6, 8, 9, 6, 5, 5, 4, 2, 0, 2, 2, 6, 2, 3, 2, 3, 2, 2, 9, 6, 1, 6, 4, 5, 2, 2, 5, 4, 0, 0, 2, 9, 7, 2, 6, 0, 4, 1, 6, 0, 2], [3, 3, 0, 3, 0, 0, 0, 3, 0, 0, 2, 3, 3, 2, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [17, 85, 70, 97, 21, 12, 60, 9, 54, 64], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1], [5, 3, 2, 9, 6, 8, 4], [0, 4, 2], [87, 74, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 3, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 15, 15, 9, 6, 4, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.sqrt(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))), grad)), tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))))), tf.math.divide_no_nan(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.0288596528476326e+29, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.05639941990375519, 0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09600000083446503, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 2, 0, 1, 0, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 2, 6, 4, 6, 2, 2, 5, 5, 4, 6, 2, 2, 2, 8, 5, 3, 3, 4, 1, 2, 9, 6, 1, 6, 4, 5, 2, 6, 5, 4, 0, 0, 2, 3, 7, 9, 6, 2, 4, 1, 6, 0, 2], [3, 3, 1, 0, 0, 3, 3, 3, 0, 2, 2, 3, 3, 0, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [17, 45, 70, 97, 48, 12, 60, 9, 54, 64], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1], [0, 3, 2, 9, 6, 8, 4], [4, 4, 2], [68, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 3, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.0714285746216774, "mapping_values": [1, 4, 4, 2, 2, 0, 34, 34, 19, 15, 4, 9, 7, 6, 1, 1, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), grad))))), tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.square(beta)))), grad)))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), sigma)), tf.math.add(sigma, tf.math.divide_no_nan(sigma, tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, grad))))))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3005469679564783, 2.3018406542174774, 2.3015452933081577, 2.3010362788686476, 2.300272450234833, 2.3007261946752102, 2.2994458938649522, 2.298877548658144, 2.2995431762345637, 2.2992130346805855, 2.300244251341159, 2.299507466415609, 2.300775939352902], "accuracy": [0.09457138925790787, 0.09377889335155487, 0.09417514503002167, 0.0940430611371994, 0.09972262382507324, 0.0952318087220192, 0.09813763201236725, 0.10289261490106583, 0.09681680053472519, 0.1002509593963623, 0.09972262382507324, 0.09998679161071777, 0.09734513610601425], "val_loss": [1.9708544867379325, 1.9704127311706543, 1.9701112338474818, 1.9701448849269323, 1.9701756068638392, 1.9700582368033273, 1.97003173828125, 1.9700026512145996, 1.970020362309047, 1.9702469280787878, 1.9703726087297713, 1.9705664770943778, 1.970820358821324], "val_accuracy": [0.04333333298563957, 0.05066666752099991, 0.05533333495259285, 0.057999998331069946, 0.05966666713356972, 0.06533333659172058, 0.0676666647195816, 0.0689999982714653, 0.06833333522081375, 0.06400000303983688, 0.06666667014360428, 0.06433333456516266, 0.06300000101327896]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 1, 0, 1, 0, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [0, 5, 3, 6, 4, 6, 2, 2, 5, 5, 4, 6, 5, 9, 2, 8, 6, 3, 3, 4, 1, 2, 9, 6, 1, 6, 4, 5, 2, 6, 5, 4, 0, 0, 2, 3, 7, 9, 6, 2, 4, 1, 6, 0, 2], [3, 3, 0, 3, 0, 3, 0, 3, 0, 0, 2, 3, 3, 2, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [17, 88, 70, 97, 48, 12, 60, 9, 54, 64], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1], [2, 9, 0, 9, 6, 8, 4], [0, 4, 2], [87, 74, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.040571428835392, "mapping_values": [1, 4, 4, 2, 2, 1, 2, 2, 1, 1, 0, 3, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.math.negative(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3007640288159865, 2.302931938377968, 2.303370167345907, 2.3028945977645954, 2.3020991569874765, 2.303039034989689], "accuracy": [0.09351472556591034, 0.09047681838274002, 0.08796724677085876, 0.08889182657003403, 0.09457138925790787, 0.09206181764602661], "val_loss": [1.971440383366176, 1.971440383366176, 1.971440383366176, 1.971440383366176, 1.971440383366176, 1.971440383366176], "val_accuracy": [0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 0, 2, 2, 2, 0, 2, 3, 3, 0], [43, 11, 89, 50, 85, 46], [0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [2, 2, 2, 6, 9, 6, 9, 4, 5, 5, 4, 2, 1, 2, 2, 2, 2, 3, 2, 3, 2, 2, 9, 6, 1, 6, 4, 5, 2, 2, 5, 4, 0, 0, 2, 9, 7, 2, 6, 0, 4, 1, 6, 0, 2], [2, 1, 3, 0, 0, 3, 3, 3, 0, 2, 2, 3, 3, 0, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [37, 13, 87, 97, 18, 12, 93, 9, 54, 64], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1], [3, 3, 2, 9, 6, 8, 4], [0, 4, 2], [68, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [2, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.040571428835392, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 7, 4, 4, 0, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))), sigma)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3007640288159865, 2.302931938377968, 2.303370167345907, 2.3028945977645954, 2.3020991569874765, 2.303039034989689], "accuracy": [0.09351472556591034, 0.09047681838274002, 0.08796724677085876, 0.08889182657003403, 0.09457138925790787, 0.09206181764602661], "val_loss": [1.971440383366176, 1.971440383366176, 1.971440383366176, 1.971440383366176, 1.971440383366176, 1.971440383366176], "val_accuracy": [0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161]}}]