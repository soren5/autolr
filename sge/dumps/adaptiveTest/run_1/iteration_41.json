[{"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0], [0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [5, 9, 8, 3, 8, 2, 5], [0, 2, 0, 2, 3], [46, 90, 79, 31], [1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1], [2, 6, 5, 9, 1, 3, 9, 1, 5], [2, 1, 5, 0], [99, 40], [1, 0, 1], [0, 0, 1], [6, 2], [1], [76, 71], [1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1], [8, 0, 3, 7], [2, 1, 3, 1], [80, 55, 71, 29, 59, 45, 36, 41, 89]], "fitness": -0.12428571283817291, "mapping_values": [1, 2, 2, 1, 1, 1, 10, 10, 7, 3, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 17, "evaluations": [-0.12428571283817291, -0.12428571283817291, -0.12428571283817291, -0.12428571283817291, -0.12428571283817291], "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.subtract(alpha, tf.math.multiply(grad, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [98052480.0, 1997831296.0, 9005772800.0, 31038418944.0, 120856805376.0, 425006891008.0], "accuracy": [0.10077928751707077, 0.11200633645057678, 0.107647605240345, 0.09787346422672272, 0.10038304328918457, 0.09668471664190292], "val_loss": [859222592.0, 6940717568.0, 24545835008.0, 124646514688.0, 489961816064.0, 1424300572672.0], "val_accuracy": [0.125, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1], [4, 8, 4, 3, 0, 2, 5, 6, 7, 3, 6, 7, 8, 1, 0, 9], [0, 0, 0, 2, 3, 0, 3, 2, 3, 0, 3], [43, 90, 56, 49, 55, 34], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [1], [2, 1, 5, 9, 1, 3, 9, 1, 5], [2, 1, 5, 0], [], [1, 0, 0], [0, 0], [6, 2], [4, 7], [], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [8, 6, 3, 8, 4, 1, 7, 5, 8, 5, 3, 5], [1, 1, 3, 2, 0, 2, 3], [93]], "fitness": -0.036571428179740906, "mapping_values": [1, 11, 11, 6, 5, 3, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 19, 12, 7, 1], "tree_depth": 17, "evaluations": [-0.036571428179740906, -0.036571428179740906, -0.036571428179740906, -0.036571428179740906, -0.036571428179740906], "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)))), tf.math.negative(tf.math.add(tf.math.add(alpha, grad), grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(alpha), tf.math.pow(tf.math.subtract(alpha, tf.math.add(tf.math.square(sigma), beta)), tf.math.sqrt(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.multiply(beta, tf.math.square(sigma)))))", "other_info": {"loss": [2.3038790225982666, 2.3032748699188232, 2.302300453186035, 2.3037474155426025, 2.3032047748565674, 2.302614212036133], "accuracy": [0.08506141602993011, 0.09034473448991776, 0.09417514503002167, 0.0882314071059227, 0.08902391046285629, 0.09272222965955734], "val_loss": [2.299229621887207, 2.299229621887207, 2.299229621887207, 2.299229621887207, 2.299229621887207, 2.299229621887207], "val_accuracy": [0.036666665226221085, 0.036666665226221085, 0.036666665226221085, 0.036666665226221085, 0.036666665226221085, 0.036666665226221085]}}]