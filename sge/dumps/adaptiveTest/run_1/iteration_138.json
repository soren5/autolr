[{"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 32, 29, 49, 25], [0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 0, 1], [4, 7, 6, 5, 0, 7, 3, 9], [3, 3, 0, 3, 1], [98], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 0, 1], [3, 1, 9, 1, 2], [3, 1, 2], [23, 52, 13]], "fitness": -0.7488571405410767, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 5, 4, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(grad, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.subtract(alpha, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2968522596352954, 2.288985357088042, 2.27883832972079, 2.2686139470660818, 2.2585638997230735, 2.2481584309933287, 2.2345454929653115, 2.2234241300806348, 2.2076955043786173, 2.1911195412193543, 2.1724643546041325, 2.1494206856301967, 2.125503015650451, 2.0991542472846914, 2.068639045409743, 2.0374093117447516, 2.0011413404104212, 1.963084383190993, 1.9201078671883787, 1.8752284789239695, 1.8266648292195102, 1.7788995576336273, 1.7294546829128403, 1.6787517492907504, 1.6339578955889285, 1.5850912564623671, 1.5417609907900258, 1.5025703162092654, 1.4531447163284448, 1.4231439812497346, 1.3870249478698264, 1.3615581636903717, 1.3260549654845375, 1.3035485148508599, 1.2769209992033757, 1.2368781045443347, 1.217879916163263, 1.2124240110736435, 1.1886319131773098, 1.1696499603267958, 1.1554885098270027, 1.1254147410377016, 1.122420511367283, 1.10713008663768, 1.098381201321218, 1.0734582773808712, 1.06368803877195, 1.0465860708971317, 1.0512639356248368, 1.039082759406982, 1.0244725897579523, 1.019855913894209, 1.012590751325481, 0.9941927287336417, 0.9749906507969344, 0.9729950977527486, 0.9786430682409804, 0.9593051851323221, 0.9594279175830666, 0.9519634146448518, 0.9447361735493957, 0.9343537016787848, 0.9247398219482065, 0.9244317611320978, 0.9128715518584987, 0.9060958709856617, 0.9030995631671427, 0.9059897221200707, 0.9052452454241339, 0.8831278861096475, 0.8894612580683442, 0.8771004707050235, 0.8845477106548839, 0.8776476269447887, 0.87258191784816, 0.8672917537433502, 0.8634912249528973, 0.8564881158700126, 0.8532875224725524, 0.8557967268606581, 0.8446335913703237, 0.840616011088944, 0.844338698331092, 0.8384654259228231, 0.8381802760347037, 0.8403004816400061, 0.819734431079917, 0.8241933570672114, 0.8260178613373003, 0.8195404782271294, 0.8231150456832746], "accuracy": [0.10513802617788315, 0.12270505726337433, 0.15149913728237152, 0.18016114830970764, 0.20380398631095886, 0.22797517478466034, 0.25082552433013916, 0.27539294958114624, 0.2999603748321533, 0.3109232485294342, 0.337339848279953, 0.3549068868160248, 0.3626997768878937, 0.3731343150138855, 0.3887201249599457, 0.40324923396110535, 0.4084004759788513, 0.4275524914264679, 0.4336283206939697, 0.4403645396232605, 0.4507991075515747, 0.4649319648742676, 0.4714040458202362, 0.483819842338562, 0.49372607469558716, 0.5024435520172119, 0.5045568346977234, 0.5194822549819946, 0.5346717834472656, 0.533350944519043, 0.5420684218406677, 0.5408796668052673, 0.5521067380905151, 0.5532954931259155, 0.5672962665557861, 0.5802403688430786, 0.5786554217338562, 0.5824857950210571, 0.5909391045570374, 0.5954299569129944, 0.6007132530212402, 0.6034870147705078, 0.6079778075218201, 0.6176198720932007, 0.6102232336997986, 0.6264694333076477, 0.6258090138435364, 0.63096022605896, 0.6258090138435364, 0.635451078414917, 0.6415268778800964, 0.6346585750579834, 0.639809787273407, 0.6495839357376099, 0.6515651941299438, 0.6532822847366333, 0.6548672318458557, 0.6560559868812561, 0.658961832523346, 0.6605468392372131, 0.659490168094635, 0.6672830581665039, 0.6671509742736816, 0.6734909415245056, 0.6696605682373047, 0.6789063811302185, 0.6796988248825073, 0.6704530715942383, 0.6785101294517517, 0.6806234121322632, 0.6790384650230408, 0.684982180595398, 0.6833971738815308, 0.6811517477035522, 0.6822084188461304, 0.684982180595398, 0.6856426000595093, 0.7018887996673584, 0.6921146512031555, 0.693831741809845, 0.694360077381134, 0.6901333928108215, 0.6944921612739563, 0.698190450668335, 0.6991150379180908, 0.6939638257026672, 0.7100779414176941, 0.7012283802032471, 0.6973979473114014, 0.6975300312042236, 0.7005679607391357], "val_loss": [1.9618334770202637, 1.95292786189488, 1.9438965661185128, 1.9344661576407296, 1.924356188092913, 1.913572038922991, 1.9016249520438058, 1.8885670389447893, 1.873861244746617, 1.8573598861694336, 1.838693414415632, 1.8176076752798898, 1.7939561435154505, 1.7675161361694336, 1.7379358155386788, 1.705090114048549, 1.668980598449707, 1.6295621735709054, 1.5871999604361398, 1.5419354438781738, 1.494281836918422, 1.4452509880065918, 1.3957790987832206, 1.3462344237736292, 1.2977794919695174, 1.2509329659598214, 1.2053823471069336, 1.1629452024187361, 1.122847591127668, 1.0866780281066895, 1.0530226571219308, 1.0222434656960624, 0.9940356867653983, 0.9681119237627301, 0.9441027641296387, 0.9212769780840192, 0.9003570420401437, 0.8820595741271973, 0.8650035006659371, 0.849425230707441, 0.834508981023516, 0.8201112917491368, 0.8078859363283429, 0.7959969554628644, 0.7842499017715454, 0.7738414491925921, 0.7636037043162754, 0.7542679309844971, 0.7456930705479213, 0.7381772143500192, 0.7306275538035801, 0.7229710647038051, 0.7164682149887085, 0.7097181592668805, 0.7028213228498187, 0.6976813418524606, 0.6916739089148385, 0.6867430891309466, 0.6811556475503104, 0.6764908347811017, 0.6724906138011387, 0.668203490121024, 0.6628241879599435, 0.6593440430504935, 0.6548476730074201, 0.6513135092599052, 0.6478711026055473, 0.6443546499524798, 0.6403893232345581, 0.6364801611219134, 0.6336288622447422, 0.6298559563500541, 0.6277614491326469, 0.6243612936564854, 0.6217427934919085, 0.6190388883863177, 0.6163383211408343, 0.6136598587036133, 0.6114744458879743, 0.6091508524758475, 0.6068593944822039, 0.6042799779347011, 0.6020327465874808, 0.5997917311532157, 0.5976220028741019, 0.5957896539143154, 0.5939444133213588, 0.5921416963849749, 0.5901269231523786, 0.5879953929356166, 0.5857957090650286], "val_accuracy": [0.109333336353302, 0.19866666197776794, 0.27666667103767395, 0.3370000123977661, 0.3763333261013031, 0.39500001072883606, 0.4090000092983246, 0.42133334279060364, 0.43833333253860474, 0.45233333110809326, 0.460999995470047, 0.4753333330154419, 0.4806666672229767, 0.49300000071525574, 0.5040000081062317, 0.515999972820282, 0.5296666622161865, 0.5393333435058594, 0.5456666946411133, 0.5533333420753479, 0.5590000152587891, 0.5649999976158142, 0.5773333311080933, 0.5896666646003723, 0.593999981880188, 0.6043333411216736, 0.6140000224113464, 0.6223333477973938, 0.6299999952316284, 0.6446666717529297, 0.6556666493415833, 0.6616666913032532, 0.6696666479110718, 0.6733333468437195, 0.6740000247955322, 0.6756666898727417, 0.6783333420753479, 0.6793333292007446, 0.6859999895095825, 0.6899999976158142, 0.6930000185966492, 0.6949999928474426, 0.6966666579246521, 0.6973333358764648, 0.699999988079071, 0.7056666612625122, 0.7036666870117188, 0.7066666483879089, 0.7073333263397217, 0.7093333601951599, 0.7113333344459534, 0.7143333554267883, 0.7160000205039978, 0.7193333506584167, 0.7233333587646484, 0.721666693687439, 0.7253333330154419, 0.7253333330154419, 0.7283333539962769, 0.7286666631698608, 0.7286666631698608, 0.7300000190734863, 0.7323333621025085, 0.7319999933242798, 0.734666645526886, 0.734000027179718, 0.7350000143051147, 0.7363333106040955, 0.7393333315849304, 0.7400000095367432, 0.7406666874885559, 0.7419999837875366, 0.7400000095367432, 0.7426666617393494, 0.7419999837875366, 0.7440000176429749, 0.7463333606719971, 0.7463333606719971, 0.7450000047683716, 0.7493333220481873, 0.750333309173584, 0.75, 0.7506666779518127, 0.7509999871253967, 0.7516666650772095, 0.7543333172798157, 0.750333309173584, 0.7506666779518127, 0.7509999871253967, 0.753000020980835, 0.7540000081062317]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 2, 4, 0, 5, 5, 8, 4, 4, 6, 3, 6], [1, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 32, 29, 49, 25], [1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 7, 6, 5, 5, 7, 3, 9], [2, 3, 3, 3, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 0, 1], [1, 3, 9, 1, 2], [3, 1, 2], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 9, 5, 2, 5, 5, 2, 3, 0, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(alpha)))))))), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(beta, tf.math.add(grad, tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(alpha, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 2, 4, 3, 5, 5, 8, 4, 4, 6, 3, 6], [3, 0, 1, 0, 2, 1, 2, 2, 0], [31, 32, 29, 49, 25], [0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1], [3, 2, 6, 6, 3, 7, 3, 9, 2, 9, 4, 2, 5, 4, 5, 3, 3, 8], [2, 3, 3, 1, 1, 5, 3, 2, 1, 4, 4, 0], [98, 91, 97], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 0, 0, 0, 1, 1, 1, 1], [1, 3, 8, 1, 2], [3, 0, 2, 2], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 30, 30, 18, 12, 3, 1, 0, 0, 0, 0, 8, 4, 4, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.multiply(beta, grad), tf.math.add(beta, grad))), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)), alpha))), alpha), tf.math.add(beta, tf.math.pow(tf.math.add(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.square(tf.math.add(beta, grad)), tf.math.multiply(beta, tf.math.add(beta, alpha))))))), tf.math.add(beta, grad)))), tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.sqrt(tf.math.subtract(sigma, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32))), beta), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 9, 4, 0, 5, 5, 8, 4, 4, 6, 3, 6], [3, 2, 1, 2, 2, 1, 2, 2, 0], [31, 32, 29, 49, 25], [0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 7, 2, 5, 5, 7, 3, 9], [2, 3, 3, 3, 1, 0, 0], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 0, 0, 1, 1], [1, 3, 9, 1, 2], [0, 0, 2], [61, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 5, 2, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 7, 4, 3, 3], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), beta)))", "other_info": {"loss": [2.3025596667085546, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 8, 6, 2, 2, 0, 1, 5, 8, 4, 4, 6, 3, 6], [1, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 95, 29, 49, 25], [0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 0, 1], [4, 7, 6, 5, 0, 7, 3, 9], [3, 1, 0, 3, 1], [7], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [1, 3, 8, 1, 2], [3, 1, 2], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 9, 9, 5, 4, 1, 1, 1, 0, 1, 0, 5, 2, 3, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, alpha), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(grad, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(alpha, beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 6, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 0, 0], [31, 32, 29, 49, 53, 46, 93], [1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 7, 9, 5, 5, 7, 3, 9], [2, 3, 3, 3, 1], [98], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 0, 1, 0, 1, 1], [1, 3, 3, 1, 2], [1, 0, 2, 1, 3], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 29, 29, 17, 12, 7, 5, 5, 3, 2, 1, 1, 1, 0, 1, 0, 9, 4, 5, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), grad)))), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.sqrt(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))))))))))), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(alpha, tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.multiply(beta, tf.math.subtract(alpha, sigma))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 8, 6, 2, 2, 0, 1, 5, 8, 4, 4, 6, 3, 6], [1, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 95, 29, 49, 25], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 1, 1], [3, 7, 6, 2, 9, 7, 3, 9, 3, 6, 7, 4, 6], [3, 3, 0, 3, 1], [33], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 0, 1], [7, 1, 9, 1, 2], [3, 1, 2], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 23, 23, 13, 10, 4, 9, 9, 4, 5, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.square(alpha), tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.sqrt(tf.math.pow(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, grad)))))))))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(grad, tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, alpha)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(alpha, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 8, 6, 2, 2, 0, 1, 5, 8, 4, 4, 6, 3, 6], [3, 2, 1, 0, 2, 1, 2, 2, 0], [31, 95, 29, 49, 25], [1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1], [3, 7, 6, 2, 5, 7, 3, 9, 3, 6, 5, 4, 6], [0, 3, 3, 2, 1, 1, 3, 2, 2, 1], [98, 85, 73], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 0, 1, 1], [1, 4, 8, 1, 2], [3, 0, 2], [0, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 18, 18, 10, 8, 2, 1, 0, 0, 0, 0, 6, 3, 3, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.add(beta, tf.math.square(grad)))), tf.math.add(tf.math.add(beta, beta), tf.math.multiply(tf.math.add(beta, alpha), tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.divide_no_nan(grad, beta)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.pow(tf.math.sqrt(tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1006472036242485, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 32, 29, 49, 25], [1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 1], [3, 7, 6, 5, 5, 7, 3, 9], [3, 3, 0, 3, 1], [98], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 1, 0, 0, 1], [3, 6, 9, 1, 2], [3, 0, 2], [31, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 8, 8, 4, 4, 1, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.multiply(grad, tf.math.add(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.square(grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3231466472770843, 2.4024045374793084, 2.666163407422611, 5.081029430078557e+27, 2.3042971135571397, 2.3043691933414863, 2.304440905499562, 2.304520601641154, 2.3046005237308775], "accuracy": [0.059833575040102005, 0.013076212257146835, 0.010302470065653324, 0.08770307898521423, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.023902484348842, 2.128727504185268, 3.013789245060512, NaN, 1.9749569211687361, 1.9750136647905623, 1.975076471056257, 1.9751387323651994, 1.9752076012747628], "val_accuracy": [0.004999999888241291, 0.004999999888241291, 0.039000000804662704, 0.10233332961797714, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 8, 5, 3, 2, 0, 1, 5, 8, 2, 4, 4, 3, 6], [3, 0, 1, 0, 2, 0, 2, 2, 0, 2], [42, 32, 29, 49, 25], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 0, 1, 0, 1, 1], [3, 7, 6, 5, 9, 7, 3, 9, 3, 6, 7, 4, 6], [3, 3, 3, 0, 1], [73, 50, 53], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [1, 2, 9, 1, 2, 7], [3, 1, 2, 2, 2], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 8, 5, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 11, 6, 5, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))))), tf.math.add(alpha, tf.math.subtract(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.add(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, alpha)), tf.math.add(beta, tf.math.add(beta, beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 2, 4, 0, 5, 5, 8, 4, 4, 6, 3, 6], [2, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 32, 29, 49, 25], [1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 7, 6, 5, 0, 7, 3, 9], [3, 3, 0, 3, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 0, 0, 1, 1, 1], [3, 1, 9, 1, 2], [1, 0, 1], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 9, 9, 5, 4, 1, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(grad, tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(grad, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.negative(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), alpha), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 2, 4, 0, 5, 5, 8, 4, 4, 6, 3, 6], [2, 0, 1, 0, 2, 1, 2, 2, 0], [31, 32, 29, 49, 25], [1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 1], [4, 7, 6, 5, 5, 7, 3, 9], [2, 3, 3, 3, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 0, 0, 1, 1, 1], [1, 3, 9, 1, 2], [1, 0, 2], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 9, 5, 2, 8, 8, 4, 4, 0, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(alpha)))))))), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: tf.math.pow(beta, tf.math.add(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.square(grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), alpha), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09774138033390045, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 2], [1, 0, 0, 0, 2, 0, 2, 2, 0, 2, 0, 0, 2], [31, 32, 29, 49, 25, 93, 52, 43], [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [3, 7, 6, 5, 5, 7, 3, 9], [2, 3, 3, 3, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 0, 1], [3, 3, 9, 1, 2], [3, 1, 2], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 30, 30, 17, 13, 8, 11, 11, 6, 5, 0, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))))), tf.math.pow(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.multiply(grad, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))))))))))), grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, tf.math.square(beta))), tf.math.add(grad, grad)), tf.math.add(beta, grad)), alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.multiply(alpha, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 2, 4, 0, 5, 5, 8, 4, 4, 6, 3, 6], [3, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 32, 29, 49, 25], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 1, 0, 1, 0, 1, 1], [4, 7, 6, 9, 9, 7, 3, 9], [2, 3, 3, 3, 1], [98], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 1, 1, 1, 1], [1, 3, 9, 1, 2], [3, 1, 3], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 7, 7, 4, 3, 1, 1, 1, 0, 1, 0, 3, 1, 2, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, alpha)", "other_info": {"loss": [6.022066032377925, 5.916143105251565e+24, NaN, NaN, NaN, NaN], "accuracy": [0.2429005354642868, 0.12521463632583618, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [18.820043291364396, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 2, 4, 0, 5, 5, 8, 4, 4, 6, 3, 6], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [31, 32, 29, 49, 25], [1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [3, 0, 6, 2, 3, 7, 3, 9], [2, 3, 3, 3, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 0, 0, 0, 1, 1, 1], [3, 2, 9, 2, 2, 7], [1, 3, 0], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 4, 4, 2, 2, 0, 1, 0, 0, 0, 0, 7, 4, 3, 2], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.multiply(beta, tf.math.negative(tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.add(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, sigma)), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3024895659464226, 2.323167055384704, 8.908073007847891, 894038.7648556877, 149605948645.67218, 2.3925513377146116e+16], "accuracy": [0.10210011899471283, 0.09998679161071777, 0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9743695940290178, 2.0740042413984026, 185.2974112374442, 30386045.714285713, 5102976143945.143, 8.169207252996963e+17], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 2, 4, 0, 5, 5, 8, 4, 4, 6, 3, 6], [2, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [31, 32, 29, 49, 25], [0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1], [3, 5, 6, 2, 3, 7, 3, 9], [2, 3, 3, 3, 1], [98], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 0, 0, 0, 1, 1, 1], [1, 0, 9, 1, 2], [0, 2, 0], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 6, 4, 2, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.negative(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [314750634.565631, 5896095907.3855505, 27139263472.175407, 74853775067.58315, 160459879182.84402, 299805318762.2412], "accuracy": [0.10091137140989304, 0.09826971590518951, 0.09893012791872025, 0.10038304328918457, 0.10566636174917221, 0.09813763201236725], "val_loss": [1143631542.857143, 9144695661.714285, 30858492781.714287, 73139989942.85715, 142844592128.0, 246827291209.14285], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 32, 29, 49, 25], [0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 1], [5, 7, 6, 3, 0, 7, 3, 9], [2, 3, 3, 3, 1], [98], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 0, 1], [5, 1, 1, 1, 2], [3, 1, 2], [23, 52, 13]], "fitness": -0.07171428203582764, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.square(sigma)", "other_info": {"loss": [2.3006420516539494, 2.3016386385748744, 2.3005453100167936, 2.3001568293165238, 2.3006157024488347, 2.300719887872398, 2.2998957803078994, 2.300663172875917, 2.299849357209453, 2.2991053276152704, 2.299588553358488, 2.2993081538369546, 2.298798597499821, 2.2997648745574466], "accuracy": [0.0956280529499054, 0.09298639744520187, 0.0936468094587326, 0.09232597798109055, 0.0956280529499054, 0.09681680053472519, 0.09906221181154251, 0.10011887550354004, 0.09945846349000931, 0.09655263274908066, 0.09760929644107819, 0.09932637959718704, 0.09760929644107819, 0.09509972482919693], "val_loss": [1.9704249245779855, 1.9698936598641532, 1.969512598855155, 1.9695231573922294, 1.9695737702505929, 1.9695439338684082, 1.9694905962262834, 1.9693689346313477, 1.9694111687796456, 1.9694886207580566, 1.9697048323495048, 1.970029354095459, 1.9703014918736048, 1.9706504685538155], "val_accuracy": [0.04466666653752327, 0.050999999046325684, 0.05766666680574417, 0.06233333423733711, 0.06400000303983688, 0.070333331823349, 0.07400000095367432, 0.07999999821186066, 0.08100000023841858, 0.07833333313465118, 0.07766667008399963, 0.07266666740179062, 0.06866666674613953, 0.06800000369548798]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 2, 4, 0, 5, 5, 8, 4, 4, 6, 3, 6], [1, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 32, 29, 49, 25], [1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1], [4, 9, 6, 5, 0, 7, 3, 9], [2, 3, 3, 3, 1], [98], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 0, 1], [3, 1, 0, 1, 2], [1, 0, 2], [23, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 6, 3, 3, 1], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.pow(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.negative(beta)))", "other_info": {"loss": [2.300970172176681, 2.302805151213209, 2.3024864645209595, 2.30217549565005, 2.3029324987923165, 2.3030645280796946], "accuracy": [0.0944393053650856, 0.09126931428909302, 0.08902391046285629, 0.08968432247638702, 0.08836349099874496, 0.08770307898521423], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 2, 4, 0, 5, 5, 8, 4, 4, 6, 3, 6], [1, 0, 1, 0, 2, 0, 2, 2, 0, 2], [31, 79, 29, 49, 25], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1], [3, 7, 6, 5, 6, 7, 3, 9, 3, 6, 7, 4, 6], [0, 3, 0, 2, 1, 1, 3, 2, 2, 1], [98, 90], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [1, 1, 1, 0, 1, 1], [1, 9, 9, 1, 2], [3, 3, 2], [23, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 14, 14, 9, 5, 2, 12, 12, 6, 6, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(alpha)))))))), tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.divide_no_nan(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(grad, tf.math.add(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, beta)))))), alpha), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.300970172176681, 2.302805151213209, 2.3024864645209595, 2.30217549565005, 2.3029324987923165, 2.3030645280796946], "accuracy": [0.0944393053650856, 0.09126931428909302, 0.08902391046285629, 0.08968432247638702, 0.08836349099874496, 0.08770307898521423], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 32, 29, 49, 25], [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1], [3, 7, 6, 2, 0, 7, 3, 9], [3, 3, 0, 3, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [1, 1, 0, 1, 0, 1], [3, 9, 9, 1, 2], [3, 2, 2], [23, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.300970172176681, 2.302805151213209, 2.3024864645209595, 2.30217549565005, 2.3029324987923165, 2.3030645280796946], "accuracy": [0.0944393053650856, 0.09126931428909302, 0.08902391046285629, 0.08968432247638702, 0.08836349099874496, 0.08770307898521423], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}]