[{"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [2, 2, 1, 2, 8, 0, 8, 5, 2, 2, 9, 2, 2, 8, 9, 0, 2, 2, 2, 6, 6, 3, 3, 5, 1, 2, 0, 3, 5, 4, 8, 6, 0, 8, 6, 3, 7, 1, 0, 6, 6, 3, 6, 0], [4, 3, 3, 1, 0, 3, 3, 3, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [25, 9, 52, 66, 2, 57, 35, 9, 54, 64], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 1, 0, 0], [6, 7, 3, 4, 8], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8394285440444946, "mapping_values": [1, 4, 4, 2, 2, 1, 11, 11, 6, 5, 1, 10, 7, 5, 2, 2, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, grad)), grad)), grad)), alpha)), tf.math.negative(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), sigma)), tf.math.add(sigma, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))), tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.sqrt(sigma)), sigma)))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9701044283932259, 1.1974079692525919, 0.9103696989959588, 0.8272992207263644, 0.7492673177493011, 0.6950103931690896, 0.6805868116367951, 0.6596763937338831, 0.6457979288461454, 0.6159117968720751, 0.5790352190427336, 0.5833015307978932, 0.5689606458566696, 0.5526342161374715, 0.5489289112071225, 0.5115761742647282, 0.5175874226160369, 0.4970523649006157, 0.47563122864554286, 0.48205013171068634, 0.45632535767136406, 0.48178836524982527, 0.4572170630831524, 0.4546462683007859, 0.44306237069591475, 0.41485192471916615, 0.42185384364979, 0.4045512931631257, 0.4171952188070093, 0.40773460646079374, 0.39817935880212074, 0.4003599014508647], "accuracy": [0.339321106672287, 0.5757495760917664, 0.6583014130592346, 0.6893408894538879, 0.7209087014198303, 0.7338528633117676, 0.7429665923118591, 0.7477215528488159, 0.7580240368843079, 0.7666094303131104, 0.7849689722061157, 0.7812706232070923, 0.7868181467056274, 0.7910447716712952, 0.793422281742096, 0.8070268034934998, 0.8078193068504333, 0.8132346868515015, 0.8216879963874817, 0.8204993009567261, 0.828820526599884, 0.8168009519577026, 0.8294808864593506, 0.8352925777435303, 0.8356888294219971, 0.8459912538528442, 0.8436138033866882, 0.852859616279602, 0.8454629778862, 0.8494254350662231, 0.8496896028518677, 0.8527275323867798], "val_loss": [1.192962578364781, 0.6704128129141671, 0.6666679212025234, 0.5705351999827794, 0.5512646777289254, 0.5158184766769409, 0.5036722591945103, 0.5165685244968959, 0.48243732111794607, 0.4608795813151768, 0.46573184217725483, 0.4958861214773996, 0.43963563442230225, 0.4592137336730957, 0.4297280396733965, 0.421144894191197, 0.4336817945752825, 0.39533462694713045, 0.40102886302130564, 0.3827450360570635, 0.3904382416180202, 0.39333690064293997, 0.4267082469803946, 0.40004884345190866, 0.370169997215271, 0.36200317314692904, 0.35021786178861347, 0.36089861392974854, 0.3652635472161429, 0.36956779445920673, 0.36212853874479023, 0.3856831448418753], "val_accuracy": [0.5303333401679993, 0.7066666483879089, 0.6856666803359985, 0.7490000128746033, 0.7486666440963745, 0.7639999985694885, 0.777999997138977, 0.7726666927337646, 0.7976666688919067, 0.7976666688919067, 0.7960000038146973, 0.7823333144187927, 0.8103333115577698, 0.7943333387374878, 0.8193333148956299, 0.8166666626930237, 0.8146666884422302, 0.8379999995231628, 0.8306666612625122, 0.8429999947547913, 0.8429999947547913, 0.8326666951179504, 0.8216666579246521, 0.8263333439826965, 0.8486666679382324, 0.8486666679382324, 0.8566666841506958, 0.8500000238418579, 0.843666672706604, 0.8443333506584167, 0.8496666550636292, 0.8243333101272583]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 2, 2, 2, 6, 2, 2, 4, 2, 2, 6, 3, 8, 2, 0, 0, 2, 2, 2, 6, 1, 3, 9, 0, 1, 2, 0, 3, 9, 1, 8, 3, 0, 0, 8, 3, 7, 5, 6, 0, 0, 1, 4, 0, 2, 1, 9], [3, 3, 3, 1, 2, 3, 2, 3, 3, 3, 2, 3, 3, 3, 1, 3, 4, 3, 0, 0, 0, 1, 1, 1, 2, 3, 1, 3, 5, 5, 2, 5, 1, 2, 1, 5, 3, 3, 2, 1, 5], [74, 9, 7, 66, 40, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8299999833106995, "mapping_values": [1, 4, 4, 2, 2, 1, 76, 76, 47, 29, 6, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 55, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(grad, tf.math.pow(tf.math.add(beta, tf.math.add(grad, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(grad)), tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(grad, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, grad))))))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(grad, tf.math.multiply(tf.math.add(beta, beta), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, grad)))), tf.math.negative(grad))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.subtract(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), grad))))), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))), tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(beta, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.multiply(tf.math.negative(tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.negative(tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), beta))))))), grad)))))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, tf.math.subtract(grad, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))))), grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9701466297256225, 1.198545981061268, 0.9101296994491197, 0.8218300594173135, 0.7523052181865025, 0.6991617407198548, 0.6824098630761426, 0.663625676303476, 0.6451659597709367, 0.6118698726083309, 0.5859211615095238, 0.5883450903487543, 0.5811311895616491, 0.5491573116200207, 0.5533580736020585, 0.5122448978265357, 0.5199411662184504, 0.49635126833288407, 0.47661586634282344, 0.4807695602074811, 0.4583387035562094, 0.483918240549479, 0.45603043500694695, 0.4539391822023572, 0.4468645100084357, 0.41535346628636766, 0.4254233634601007, 0.40826985826896656, 0.4139503968854732, 0.41557943338353354, 0.39546748826910305, 0.3957027151143436], "accuracy": [0.33945319056510925, 0.5742966532707214, 0.658961832523346, 0.6913221478462219, 0.720380425453186, 0.7306828498840332, 0.7400607466697693, 0.7454761862754822, 0.754589855670929, 0.7666094303131104, 0.7810064554214478, 0.77677983045578, 0.783119797706604, 0.7927618622779846, 0.7903843522071838, 0.8070268034934998, 0.8080834746360779, 0.8137630224227905, 0.8228767514228821, 0.8210275769233704, 0.8289526104927063, 0.8169330358505249, 0.8301413059234619, 0.8387266993522644, 0.8341038227081299, 0.847840428352356, 0.843481719493866, 0.8506141901016235, 0.8455950617790222, 0.8430854678153992, 0.8527275323867798, 0.852331280708313], "val_loss": [1.1927467754908971, 0.6719873292105538, 0.655914170401437, 0.576753990990775, 0.5604157958711896, 0.5231951134545463, 0.5011880908693586, 0.5183074814932687, 0.483099171093532, 0.465401291847229, 0.4717484031404768, 0.48431215967450825, 0.43958338669368197, 0.46758207253047396, 0.4291844538279942, 0.42206246512276785, 0.42811467817851473, 0.3957593526159014, 0.404159562928336, 0.38255120175225393, 0.3886546322277614, 0.38703567641122, 0.4228783335004534, 0.4051823616027832, 0.37287438767296927, 0.3609795229775565, 0.355589645249503, 0.37424711670194355, 0.37590646743774414, 0.3671525887080601, 0.3623719300542559, 0.41298225947788786], "val_accuracy": [0.531333327293396, 0.7093333601951599, 0.6899999976158142, 0.7436666488647461, 0.7383333444595337, 0.7540000081062317, 0.7770000100135803, 0.7680000066757202, 0.7963333129882812, 0.796999990940094, 0.7916666865348816, 0.793666660785675, 0.8100000023841858, 0.7906666398048401, 0.8213333487510681, 0.8193333148956299, 0.8206666707992554, 0.8386666774749756, 0.8259999752044678, 0.8453333377838135, 0.8413333296775818, 0.8370000123977661, 0.8213333487510681, 0.8259999752044678, 0.8479999899864197, 0.8483333587646484, 0.8543333411216736, 0.8410000205039978, 0.8420000076293945, 0.8426666855812073, 0.8450000286102295, 0.812333345413208]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [1, 2, 1, 2, 6, 2, 2, 1, 2, 2, 6, 3, 8, 2, 0, 0, 2, 2, 2, 6, 1, 3, 9, 0, 1, 2, 0, 3, 9, 4, 8, 3, 0, 0, 8, 3, 7, 5, 6, 0, 0, 1, 6, 0, 2], [4, 3, 3, 1, 0, 3, 3, 3, 3, 3, 2, 3, 3, 3, 0, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 0, 4, 2, 1, 4, 4], [25, 9, 52, 66, 30, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8268571496009827, "mapping_values": [1, 4, 4, 2, 2, 1, 72, 72, 44, 28, 6, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(grad, tf.math.add(beta, grad)), tf.math.subtract(grad, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.negative(grad)))))))), tf.math.add(grad, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(beta, tf.math.add(beta, grad)), tf.math.multiply(tf.math.add(beta, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), tf.math.negative(grad)))))))), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.subtract(tf.math.add(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.negative(beta)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)))))), tf.math.pow(grad, tf.math.sqrt(tf.math.add(beta, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.multiply(tf.math.negative(tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, grad)))))), tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(alpha, alpha))), tf.math.add(beta, tf.math.negative(tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), grad)))))))))), alpha)), tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9701052085834645, 1.1963517568398303, 0.911083181418322, 0.8266575878023267, 0.738361870899271, 0.6990979749213876, 0.6904057705753499, 0.6521580556931356, 0.6502648393837941, 0.6099971332538712, 0.5876212268142715, 0.5888299220242221, 0.5743105591185861, 0.5471039305604318, 0.5607754712398608, 0.5102932572663972, 0.5208085656496733, 0.49495568525884065, 0.47863354568058836, 0.4825346286916273, 0.4604791345936102, 0.4793207483316189, 0.46122178817154347, 0.45427320124671255, 0.44485924802814036, 0.41707660291078713, 0.4219180388323714, 0.40811538811624953, 0.41389148810583415, 0.41511329859711665, 0.397791027085908, 0.4019534958588244], "accuracy": [0.339321106672287, 0.5766741633415222, 0.6590939164161682, 0.6906617283821106, 0.7250033020973206, 0.7341170310974121, 0.7337207794189453, 0.7508915662765503, 0.754589855670929, 0.7696473598480225, 0.780610203742981, 0.7769119143486023, 0.7857614755630493, 0.7935543656349182, 0.7891955971717834, 0.8076872229576111, 0.8082155585289001, 0.8131026029586792, 0.8198388814926147, 0.8203672170639038, 0.828292191028595, 0.817989706993103, 0.8284242749214172, 0.8356888294219971, 0.835160493850708, 0.8429533839225769, 0.844010055065155, 0.8495575189590454, 0.8449346423149109, 0.8450667262077332, 0.8531237840652466, 0.8525954484939575], "val_loss": [1.1928844792502267, 0.6699053219386509, 0.6615594795772007, 0.5838850906917027, 0.5458664383207049, 0.5244613374982562, 0.4996748311179025, 0.5187047719955444, 0.47729638644627165, 0.4681260245186942, 0.4688206740788051, 0.4856072323662894, 0.4392390251159668, 0.48025311742510113, 0.42498704365321566, 0.4186478172029768, 0.42259375538144794, 0.3948477676936558, 0.41006387983049664, 0.3854582394872393, 0.38722045932497295, 0.39914638655526297, 0.42129264559064594, 0.399224477154868, 0.37066978216171265, 0.36185901505606516, 0.35344016551971436, 0.36877516337803434, 0.3707617350987026, 0.3688786370413644, 0.3633532864706857, 0.393658493246351], "val_accuracy": [0.5303333401679993, 0.7076666951179504, 0.6883333325386047, 0.7353333234786987, 0.7519999742507935, 0.7553333044052124, 0.7796666622161865, 0.7663333415985107, 0.7956666946411133, 0.7960000038146973, 0.7926666736602783, 0.7916666865348816, 0.8080000281333923, 0.7799999713897705, 0.8230000138282776, 0.8230000138282776, 0.8236666917800903, 0.8373333215713501, 0.8270000219345093, 0.8403333425521851, 0.8383333086967468, 0.831333339214325, 0.8209999799728394, 0.8299999833106995, 0.8489999771118164, 0.8483333587646484, 0.8546666502952576, 0.8420000076293945, 0.8433333039283752, 0.8426666855812073, 0.8483333587646484, 0.8216666579246521]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [25, 66, 89, 50, 85, 46], [1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0], [2, 7, 6, 2, 6, 2, 0, 3, 2, 8, 6, 3, 4, 4, 0, 0, 2, 2, 2, 6, 1, 3, 6, 0, 8, 5, 6, 3, 2, 4, 8, 3, 0, 1, 8, 5, 4, 6, 4, 3, 0, 2, 6, 0, 6, 4, 3, 7, 2, 5, 9, 2, 2, 9, 7, 2, 9], [3, 3, 3, 1, 3, 3, 2, 3, 3, 3, 2, 0, 3, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 2, 3, 1, 3, 5, 1, 2, 3, 3, 2, 0, 5, 3, 3, 2, 3, 5], [74, 9, 7, 66, 40, 57, 35, 9, 54, 64], [0, 0, 0, 0, 1, 0, 0, 0, 1], [1, 0, 1, 1, 1, 0, 0], [4, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.7754285931587219, "mapping_values": [1, 4, 4, 2, 2, 1, 93, 93, 55, 38, 6, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 52, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.negative(tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.negative(grad), grad)), tf.math.multiply(grad, tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.pow(beta, grad))), tf.math.negative(tf.math.add(beta, grad)))))), grad)))), tf.math.add(beta, beta)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, grad), tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.sqrt(tf.math.square(grad))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.multiply(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32))))))))))), tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, alpha)), alpha)), tf.math.add(beta, beta)), tf.math.add(beta, tf.math.negative(grad))))))))))), tf.math.add(alpha, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.pow(tf.math.add(beta, grad), alpha))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.add(grad, tf.math.add(beta, beta)), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))))))))))), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, grad))))))))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.29640921348468, 2.281276902376527, 2.2670275741454207, 2.250106634354909, 2.2331476917891626, 2.2123719218101296, 2.1887378777337823, 2.160247383147907, 2.1279704350962882, 2.0815984185314167, 2.034953230265944, 1.9809443152827861, 1.9198731567094103, 1.848958810779318, 1.7784474824854506, 1.709089830519737, 1.6354509118116292, 1.5637163521670048, 1.5089379218843053, 1.4419606332340575, 1.386898211862244, 1.3487449861111311, 1.299460287737163, 1.2719384686916322, 1.2180960244821315, 1.1971114901913125, 1.161389821067919, 1.153067309244544, 1.1270623878323565, 1.1140310733923902, 1.0716920741529292, 1.0614323705147444, 1.0495857987279795, 1.027095403574902, 1.016345760211685, 1.0046926440186175, 0.9928123880260892, 0.9701698580516911, 0.969272655408459, 0.9498781935256375, 0.9333954118797414, 0.9374799586683925, 0.9152952661887136, 0.9192319102905147, 0.9064278219118095, 0.9046609110410865, 0.9038872612843724, 0.8865841417626903, 0.886911679370733, 0.8718020804191955, 0.8581759454772268, 0.8607082776169279, 0.8564042915222179, 0.8457195708040296, 0.8447087081888521, 0.839145358055023, 0.8312583770403662, 0.8196401568829595, 0.812314748118472, 0.8235228650243354, 0.8104229815301327, 0.8121018713853615, 0.8121649667398253, 0.8021339930091095, 0.8059080889306568, 0.7941793393559696, 0.7879958894305997, 0.7927794844766318, 0.7893499206510974, 0.7727633002978652, 0.7796774542862319, 0.7751526482085416, 0.7720444379481405, 0.7697691782480375, 0.77214586015989, 0.7647818915753585, 0.7647594891959933, 0.7534289269273496, 0.7476017093850542, 0.7539399417872285, 0.758227192580881, 0.7518321556138671, 0.741962624562966, 0.7477284655075315, 0.7424953419062219, 0.7474932213422251, 0.7378892990119736, 0.7291191178164257, 0.725964537519962, 0.7243050702291158, 0.730079685290728, 0.7224446299636306, 0.735725146746985, 0.7218949118893081, 0.720826193554495, 0.7255234544413547, 0.714046762359928, 0.706701943092122, 0.7077708075531816, 0.708064967764682], "accuracy": [0.10513802617788315, 0.14898955821990967, 0.18531237542629242, 0.21793685853481293, 0.25042927265167236, 0.2859595715999603, 0.3225465714931488, 0.3443402349948883, 0.3605864346027374, 0.3883238732814789, 0.40509840846061707, 0.4205521047115326, 0.43864747881889343, 0.4492141008377075, 0.47364944219589233, 0.4810461103916168, 0.4934619069099426, 0.49768856167793274, 0.5182934999465942, 0.5311055183410645, 0.5488046407699585, 0.550521731376648, 0.5571258664131165, 0.5672962665557861, 0.5774666666984558, 0.5876370072364807, 0.5993924140930176, 0.5992603302001953, 0.6059965491294861, 0.6067890524864197, 0.6206578016281128, 0.6240919232368469, 0.6293752193450928, 0.6370360851287842, 0.6394135355949402, 0.6431118845939636, 0.6429798007011414, 0.6490556001663208, 0.6516972780227661, 0.6605468392372131, 0.6649055480957031, 0.6621318459510803, 0.6695284843444824, 0.672170102596283, 0.6742834448814392, 0.6686038970947266, 0.6716417670249939, 0.6820763349533081, 0.6779817938804626, 0.6856426000595093, 0.6947563290596008, 0.6951525807380676, 0.6870955228805542, 0.6901333928108215, 0.6946242451667786, 0.6992471218109131, 0.6995112895965576, 0.6997754573822021, 0.7092854380607605, 0.6991150379180908, 0.705058753490448, 0.7069079279899597, 0.7053229212760925, 0.7061154246330261, 0.7079645991325378, 0.7077004313468933, 0.7108704447746277, 0.7102100253105164, 0.7165499925613403, 0.7215691208839417, 0.709021270275116, 0.7182670831680298, 0.7136441469192505, 0.7154933214187622, 0.720380425453186, 0.7224937081336975, 0.7186633348464966, 0.7259278893470764, 0.7251353859901428, 0.7257958054542542, 0.7195879220962524, 0.726192057132721, 0.7273808121681213, 0.7285695672035217, 0.7264562249183655, 0.7223616242408752, 0.7284374833106995, 0.7296261787414551, 0.7296261787414551, 0.7323999404907227, 0.7302865982055664, 0.7316074371337891, 0.7308149337768555, 0.7351737022399902, 0.7353057861328125, 0.7318716049194336, 0.7386078238487244, 0.7416457533836365, 0.7400607466697693, 0.7392682433128357], "val_loss": [1.9575740950448173, 1.9442400932312012, 1.9301107270377023, 1.9142430169241769, 1.8962853295462472, 1.875192505972726, 1.8500614166259766, 1.8202015331813268, 1.7849176270621163, 1.7427212851388114, 1.6934357711247034, 1.637143543788365, 1.574279853275844, 1.5054501465388708, 1.433662278311593, 1.360811471939087, 1.289036410195487, 1.2210016250610352, 1.1586576189313615, 1.101881810597011, 1.0510749816894531, 1.006477219717843, 0.9665044035230365, 0.9322102410452706, 0.8997659342629569, 0.8728757926395961, 0.8487794910158429, 0.8269160645348685, 0.8085030487605503, 0.7918574810028076, 0.7747290985924857, 0.7602365527834211, 0.7466314520154681, 0.7343400376183646, 0.7242259127753121, 0.7141607829502651, 0.7043504204068866, 0.6949481112616402, 0.6879283700670514, 0.6789963075092861, 0.6710440261023385, 0.6646957908357892, 0.658462473324367, 0.6542478459221976, 0.6484089749200004, 0.6431021520069667, 0.638609766960144, 0.6330397639955793, 0.6287144933428083, 0.6247846909931728, 0.6206247636250087, 0.6155399084091187, 0.6123354434967041, 0.6090495245797294, 0.6057559081486293, 0.601387483733041, 0.5979727847235543, 0.5961035830633981, 0.5928301300321307, 0.5894461699894497, 0.5865635871887207, 0.5841070924486432, 0.5813959496361869, 0.5783583436693464, 0.5769089800970895, 0.573576807975769, 0.5721556459154401, 0.5701852866581508, 0.5670733622142247, 0.5650050299508231, 0.5640994991574969, 0.561312232698713, 0.5594028064182827, 0.5583095720836094, 0.556331855910165, 0.5533197607312884, 0.551819886480059, 0.5501951660428729, 0.5490201711654663, 0.5469709464481899, 0.5471201964787075, 0.544628347669329, 0.5429050411496844, 0.541280848639352, 0.5399948528834752, 0.5383775234222412, 0.5369276489530291, 0.5357657330376762, 0.5357353006090436, 0.5328769513538906, 0.5319455351148333, 0.5312631811414447, 0.5296887670244489, 0.5295843737465995, 0.52740478515625, 0.5257876600537982, 0.5257127795900617, 0.5247363192694527, 0.5223480973924909, 0.5219744443893433], "val_accuracy": [0.15433333814144135, 0.27433332800865173, 0.35600000619888306, 0.38866665959358215, 0.41466665267944336, 0.437333345413208, 0.45899999141693115, 0.48133334517478943, 0.5023333430290222, 0.5133333206176758, 0.5266666412353516, 0.5446666479110718, 0.5556666851043701, 0.5613333582878113, 0.5706666707992554, 0.5889999866485596, 0.5996666550636292, 0.609000027179718, 0.6330000162124634, 0.6433333158493042, 0.6579999923706055, 0.6639999747276306, 0.671999990940094, 0.6779999732971191, 0.6816666722297668, 0.684333324432373, 0.6863333582878113, 0.6930000185966492, 0.6953333616256714, 0.6963333487510681, 0.7020000219345093, 0.7056666612625122, 0.7070000171661377, 0.7093333601951599, 0.7136666774749756, 0.7179999947547913, 0.7203333377838135, 0.7226666808128357, 0.7233333587646484, 0.7269999980926514, 0.7300000190734863, 0.7323333621025085, 0.7316666841506958, 0.7319999933242798, 0.7329999804496765, 0.737666666507721, 0.7386666536331177, 0.7390000224113464, 0.7400000095367432, 0.7403333187103271, 0.7403333187103271, 0.7463333606719971, 0.7473333477973938, 0.7473333477973938, 0.7476666569709778, 0.7546666860580444, 0.7513333559036255, 0.7513333559036255, 0.7519999742507935, 0.7553333044052124, 0.7549999952316284, 0.7546666860580444, 0.7553333044052124, 0.7553333044052124, 0.7556666731834412, 0.7556666731834412, 0.7549999952316284, 0.7580000162124634, 0.762333333492279, 0.7596666812896729, 0.7556666731834412, 0.7596666812896729, 0.7633333206176758, 0.7606666684150696, 0.7609999775886536, 0.7673333287239075, 0.7636666893959045, 0.765999972820282, 0.7643333077430725, 0.7680000066757202, 0.7643333077430725, 0.7696666717529297, 0.7683333158493042, 0.7726666927337646, 0.7706666588783264, 0.7710000276565552, 0.7696666717529297, 0.7743333578109741, 0.768666684627533, 0.7739999890327454, 0.7710000276565552, 0.7713333368301392, 0.7756666541099548, 0.7746666669845581, 0.7733333110809326, 0.7773333191871643, 0.7720000147819519, 0.7743333578109741, 0.7746666669845581, 0.7763333320617676]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [6, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 2, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [47, 66, 89, 50, 85, 46], [1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [8, 7, 1, 2, 6, 2, 5, 3, 2, 8, 6, 3, 4, 5, 0, 0, 2, 2, 2, 6, 1, 3, 6, 5, 1, 5, 0, 2, 2, 4, 8, 6, 0, 1, 8, 6, 7, 8, 3, 8, 0, 2, 6, 1, 9, 4, 3, 7, 7, 5, 1, 2, 2, 9, 7, 2, 9], [4, 0, 3, 0, 0, 3, 3, 3, 3, 3, 2, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [25, 42, 52, 66, 1, 57, 35, 9, 54, 64], [0, 0, 0, 0, 1, 0, 0, 0, 1], [1, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 0, 2, 2, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3028410705419784, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 7, 1, 2, 8, 0, 8, 5, 2, 2, 9, 2, 2, 2, 0, 0, 2, 2, 2, 6, 6, 3, 3, 5, 1, 2, 0, 3, 5, 4, 8, 6, 0, 8, 8, 6, 7], [3, 3, 3, 1, 2, 3, 2, 3, 3, 3, 2, 0, 3, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 2, 3, 1, 3, 5, 5, 2, 5, 1, 2, 1, 5, 3, 3, 2, 1, 5], [74, 9, 7, 66, 40, 57, 35, 9, 54, 64], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 0, 1, 1, 0, 0, 1], [1, 7, 3, 4, 5], [0, 0, 3], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 10, 8, 5, 3, 2, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), sigma)), tf.math.add(sigma, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))), tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.square(sigma)), tf.math.add(sigma, sigma))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0820235088467598, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 2, 8, 2, 2, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 2, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [1, 2, 1, 2, 6, 2, 2, 1, 2, 2, 6, 3, 8, 2, 0, 0, 2, 2, 5, 6, 1, 3, 9, 0, 1, 2, 0, 3, 9, 4, 8, 3, 0, 0, 8, 3, 7, 5, 6, 0, 0, 1, 6, 0, 2], [4, 3, 3, 1, 0, 3, 3, 3, 3, 3, 2, 3, 3, 3, 0, 2, 2, 3, 0, 1, 3, 1, 1, 1, 5, 1, 3, 0, 4, 2, 1, 4, 4], [25, 9, 52, 66, 89, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 18, 10, 8, 1, 57, 57, 35, 22, 5, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), grad)), tf.math.add(alpha, tf.math.sqrt(grad)))), tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.subtract(alpha, grad))), tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(grad, tf.math.add(beta, grad)), tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, grad))), tf.math.add(tf.math.negative(grad), grad))), tf.math.add(beta, grad)))), tf.math.negative(grad)), tf.math.add(beta, beta))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), grad)), tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.negative(tf.math.subtract(beta, tf.math.add(beta, tf.math.add(beta, tf.math.negative(grad))))))))))))), tf.math.multiply(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32), tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.negative(tf.math.sqrt(tf.math.add(beta, grad))))), tf.math.add(beta, alpha)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 7, 1, 2, 8, 0, 8, 5, 2, 2, 9, 2, 2, 2, 0, 0, 2, 2, 2, 6, 6, 3, 3, 5, 1, 2, 0, 3, 5, 4, 8, 6, 0, 8, 8, 6, 7], [4, 3, 3, 1, 0, 3, 3, 3, 3, 3, 2, 3, 3, 3, 0, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 0, 4, 2, 1, 4, 4], [47, 9, 52, 66, 40, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [2, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08215559273958206, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 6, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [1, 2, 1, 2, 6, 4, 2, 8, 2, 2, 6, 3, 8, 2, 0, 0, 2, 0, 2, 6, 1, 3, 9, 0, 1, 2, 0, 3, 9, 4, 8, 3, 0, 0, 8, 3, 7, 5, 6, 0, 0, 1, 6, 0, 2], [0, 3, 0, 1, 0, 3, 0, 3, 3, 3, 2, 3, 2, 3, 3, 2, 4, 2, 2, 1, 3, 3, 0, 1, 5, 2, 3, 0, 4, 2, 1, 4, 4], [47, 9, 52, 58, 30, 57, 35, 9, 54, 64], [0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 1, 40, 40, 23, 17, 5, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(tf.math.subtract(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.pow(grad, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(tf.math.negative(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(beta, grad))))))), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)))), tf.math.negative(tf.math.add(beta, beta))))))))), tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(beta, beta)), tf.math.subtract(tf.math.add(beta, tf.math.multiply(grad, grad)), tf.math.add(beta, beta))))))), tf.math.add(beta, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10447761416435242, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 5, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [34, 66, 89, 50, 85, 46], [1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [1, 2, 1, 2, 8, 2, 2, 2, 2, 2, 3, 3, 6, 2, 0, 0, 2, 2, 2, 8, 1, 3, 9, 0, 3, 6, 5, 8, 2, 4, 8, 4, 0, 1, 2, 6, 8, 5, 3, 3, 0, 1, 6, 0, 2], [3, 3, 3, 3, 3, 3, 2, 0, 3, 3, 2, 0, 3, 3, 0, 3, 4, 3, 3, 0, 4, 1, 1, 1, 2, 3, 1, 3, 5, 5, 2, 5, 1, 2, 1, 5, 3, 3, 2, 1, 5], [71, 9, 52, 66, 30, 57, 35, 9, 54, 64], [0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08215559273958206, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [5, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0], [1, 2, 1, 2, 6, 2, 2, 1, 2, 2, 6, 3, 2, 2, 0, 0, 2, 2, 3, 6, 1, 1, 9, 6, 1, 3, 0, 3, 9, 4, 8, 3, 0, 0, 1, 3, 7, 5, 6, 0, 0, 1, 6, 0, 2, 2, 3], [3, 3, 3, 2, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 1, 3, 4, 3, 0, 0, 0, 1, 2, 3, 5, 1, 3, 5, 3, 1, 4, 0, 5, 1, 2, 2, 5, 5, 4, 4, 3], [25, 42, 52, 83, 1, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.303360626477418, 2.316248164342584, 24032196601.44007, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08387266844511032, 0.08189142495393753, 0.09206181764602661, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9736698014395577, 1.9898089000156947, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.01966666616499424, 0.08533333241939545, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 2, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [1, 2, 1, 2, 6, 2, 2, 1, 2, 2, 6, 3, 8, 2, 0, 0, 2, 2, 2, 6, 1, 3, 9, 0, 1, 2, 0, 3, 9, 4, 8, 3, 0, 0, 8, 3, 7, 5, 6, 0, 0, 1, 6, 0, 2], [4, 3, 3, 1, 0, 3, 3, 3, 3, 3, 2, 3, 3, 3, 0, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 0, 4, 2, 1, 4, 4], [47, 9, 52, 66, 40, 57, 35, 9, 54, 64], [0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [0, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 1, 0, 1, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3028410705419784, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [2, 9, 2, 2, 3, 2, 8, 5, 2, 2, 9, 2, 2, 2, 0, 0, 2, 2, 2, 6, 6, 3, 3, 5, 1, 2, 0, 3, 5, 4, 8, 6, 0, 8, 8, 6, 7], [2, 3, 3, 1, 0, 3, 3, 3, 3, 3, 2, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [64, 26, 29, 66, 30, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08215559273958206, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1], [0, 2, 1, 2, 3, 2, 2, 1, 1, 2, 6, 3, 6, 2, 2, 0, 2, 2, 2, 4, 1, 3, 9, 3, 8, 6, 0, 0, 2, 4, 8, 4, 0, 1, 8, 6, 8, 5, 3, 3, 3, 1, 6, 0, 2, 9], [3, 3, 3, 1, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 2, 4, 0, 0, 1, 3, 1, 1, 1, 5, 1, 3, 0, 4, 2, 1, 4, 4], [25, 9, 52, 66, 30, 50, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06670188903808594, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 7, 1, 2, 8, 0, 8, 5, 2, 2, 9, 2, 2, 2, 0, 0, 2, 2, 2, 6, 6, 3, 3, 5, 1, 2, 0, 3, 5, 4, 8, 6, 0, 8, 8, 6, 7], [4, 3, 3, 1, 2, 3, 2, 3, 3, 3, 2, 3, 3, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [47, 9, 52, 66, 40, 57, 35, 9, 54, 64], [0, 0, 0, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [4, 7, 3, 4], [0, 0], [35, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 4, 2, 2, 2, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.math.add(sigma, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))), sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08215559273958206, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [2, 8, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0], [2, 7, 1, 2, 8, 1, 8, 5, 2, 6, 5, 2, 2, 2, 0, 0, 2, 2, 2, 6, 6, 3, 3, 5, 1, 2, 0, 3, 5, 4, 8, 6, 0, 8, 8, 6, 7], [3, 3, 3, 1, 2, 3, 2, 3, 3, 3, 2, 0, 3, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 2, 3, 1, 3, 5, 5, 2, 5, 1, 2, 1, 5, 3, 3, 2, 1, 5], [74, 9, 7, 66, 40, 57, 35, 9, 54, 64], [0, 1, 0, 0, 0, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [4, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 19, 19, 11, 8, 0, 5, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(grad, tf.math.sqrt(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.sqrt(grad), grad))), grad), alpha), tf.math.add(beta, beta))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(grad)), tf.math.add(beta, beta))), tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10342095047235489, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1], [2, 7, 6, 2, 6, 2, 3, 3, 3, 8, 6, 3, 4, 4, 0, 0, 2, 2, 2, 5, 1, 3, 5, 0, 1, 2, 2, 3, 2, 0, 8, 6, 0, 1, 8, 9, 4, 6, 3, 3, 0, 4, 6, 0, 6, 4, 3, 7, 7, 5, 9, 2, 2, 9, 7, 2, 9], [3, 3, 3, 1, 2, 3, 2, 3, 3, 3, 2, 0, 3, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 2, 3, 1, 3, 5, 5, 2, 5, 1, 2, 1, 5, 3, 3, 2, 1, 5], [25, 9, 52, 66, 30, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.09628571569919586, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.298562160651162, 3.348696026174132, 2.419968893625292, NaN, NaN, NaN], "accuracy": [0.22691850364208221, 0.15400871634483337, 0.09576013684272766, 0.12032756209373474, 0.09998679161071777, 0.09998679161071777], "val_loss": [3.9446898869105746, 2.0284434046064104, 2.5090490749904086, NaN, NaN, NaN], "val_accuracy": [0.10633333027362823, 0.0949999988079071, 0.09866666793823242, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 2, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0], [2, 8, 1, 2, 6, 2, 3, 3, 2, 9, 6, 3, 4, 4, 0, 0, 2, 2, 2, 6, 1, 3, 6, 0, 1, 5, 0, 3, 2, 4, 8, 6, 0, 1, 9, 6, 7, 6, 3, 3, 0, 2, 0, 0, 0, 4, 3, 2, 7, 5, 1, 2, 2, 9, 7, 2, 9], [3, 2, 3, 0, 3, 3, 3, 3, 2, 3, 3, 3, 2, 3, 1, 3, 4, 3, 2, 0, 0, 1, 2, 3, 5, 3, 3, 5, 3, 1, 4, 1, 5, 1, 2, 3, 5, 0, 4, 4, 3], [74, 9, 7, 66, 40, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.06971428543329239, "mapping_values": [1, 4, 4, 2, 2, 0, 26, 26, 14, 12, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.multiply(grad, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad))), grad))), tf.math.pow(grad, beta))), tf.math.pow(tf.math.add(beta, grad), grad)))), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.302116024905129, 2.3004215172394913, 2.300751802644489, 2.2996236606910796, 2.300378490479993, 2.3000524809268867, 2.2999527434536873, 2.299823262483342, 2.300243021364556, 2.298751840470505, 2.2998434504371796, 2.299791222943795, 2.2998313579765908, 2.3002580876174683], "accuracy": [0.09021265059709549, 0.09694888442754745, 0.09708096832036972, 0.09628847241401672, 0.0952318087220192, 0.10077928751707077, 0.09959053993225098, 0.09602430462837219, 0.09734513610601425, 0.1006472036242485, 0.09153348207473755, 0.09893012791872025, 0.09430722147226334, 0.09787346422672272], "val_loss": [1.970385960170201, 1.9698215893336706, 1.9697311946323939, 1.9696765627179826, 1.9697089876447404, 1.9697485651288713, 1.9697326251438685, 1.9695995194571358, 1.9695492471967424, 1.9696536745343889, 1.9698762893676758, 1.9700661386762346, 1.9702792848859514, 1.9705301693507604], "val_accuracy": [0.045666664838790894, 0.05366666615009308, 0.0560000017285347, 0.061666667461395264, 0.06599999964237213, 0.0689999982714653, 0.07066666334867477, 0.07433333247900009, 0.07766667008399963, 0.07633333653211594, 0.07199999690055847, 0.07199999690055847, 0.07233333587646484, 0.06800000369548798]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [12, 66, 89, 50, 85, 46], [1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [1, 2, 1, 2, 6, 8, 2, 1, 2, 2, 6, 3, 8, 0, 0, 0, 2, 2, 2, 6, 1, 3, 9, 0, 1, 2, 0, 3, 9, 4, 1, 3, 0, 0, 8, 3, 4, 0, 6, 0, 0, 1, 6, 0, 2], [4, 3, 3, 1, 3, 3, 3, 3, 1, 3, 2, 3, 3, 3, 0, 2, 1, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 0, 4, 2, 1, 4, 4], [25, 9, 52, 66, 30, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [3, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.04171428456902504, "mapping_values": [1, 7, 7, 4, 3, 1, 48, 48, 29, 19, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.sqrt(grad))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.add(grad, tf.math.add(beta, grad)))), tf.math.subtract(grad, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), grad)), tf.math.add(beta, tf.math.sqrt(grad)))), tf.math.add(beta, tf.math.negative(tf.math.negative(grad))))), tf.math.negative(tf.math.add(beta, grad))))), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(beta, tf.math.add(beta, grad)), tf.math.multiply(tf.math.add(beta, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), grad))))), grad))), tf.math.add(beta, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.negative(tf.math.subtract(beta, tf.math.add(alpha, tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))))))), tf.math.multiply(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3024080195809242, 2.3016387643815346, 2.3022263913563354, 2.3015656768842665, 2.3023334689159842, 2.302448760343659], "accuracy": [0.08809932321310043, 0.09457138925790787, 0.08968432247638702, 0.08809932321310043, 0.08651433140039444, 0.09285431355237961], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 6, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [14, 66, 89, 50, 85, 46], [1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [4, 2, 1, 2, 6, 2, 2, 6, 2, 2, 6, 3, 8, 2, 0, 2, 2, 2, 2, 6, 9, 3, 9, 0, 2, 9, 0, 8, 3, 8, 8, 3, 0, 0, 8, 3, 7, 5, 6, 0, 0, 1, 6, 0, 2], [4, 3, 1, 1, 2, 3, 2, 3, 3, 1, 2, 3, 3, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 0, 5, 2, 5, 1], [62, 78, 52, 66, 40, 57, 35, 9, 54, 64], [0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.03342857211828232, "mapping_values": [1, 3, 3, 1, 2, 1, 44, 44, 26, 18, 3, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, grad), grad), alpha)), alpha), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), grad)), tf.math.add(beta, beta))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.multiply(tf.math.sqrt(grad), tf.math.add(tf.math.add(beta, alpha), tf.math.negative(tf.math.add(beta, tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))))))))))))), tf.math.add(grad, tf.math.add(beta, alpha)))), tf.math.add(tf.math.divide_no_nan(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.negative(grad)))))), tf.math.add(tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3030677860785533, 2.3039026276751313, 2.3061443009727336, 2.3071692869443114, 2.30963144713641, 2.3114547344671816], "accuracy": [0.08717474341392517, 0.08902391046285629, 0.0812310129404068, 0.07660810649394989, 0.07224937528371811, 0.07172103971242905], "val_loss": [1.9724175589425224, 1.973902974809919, 1.97540739604405, 1.9769346373421806, 1.978480270930699, 1.9800341469900948], "val_accuracy": [0.03333333507180214, 0.026000000536441803, 0.021666666492819786, 0.017000000923871994, 0.014333332888782024, 0.013000000268220901]}}]