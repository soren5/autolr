[{"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 2, 4, 0, 5, 5, 8, 4, 4, 6, 3, 6], [3, 0, 1, 0, 2, 1, 2, 2, 0], [31, 32, 29, 49, 25], [1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 1], [3, 7, 6, 5, 5, 7, 3, 9], [2, 3, 3, 3, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [1, 3, 9, 1, 2], [3, 0, 2], [23, 52, 13]], "fitness": -0.7139999866485596, "mapping_values": [1, 14, 14, 9, 5, 2, 9, 9, 5, 4, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(alpha)))))))), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))), tf.math.square(grad)), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [2.2990481379545122, 2.2487303327654393, 2.106540231152989, 1.747784046842721, 1.458263894932507, 1.37667817325325, 1.0550013637152236, 0.958192783772843, 0.8983352647843599, 0.8566466625954544, 0.9028618012311012, 0.9409813730157109, 0.9258021125231657, 0.947860650634564, 1.0029817761258206, 1.0734390666251483], "accuracy": [0.09853387624025345, 0.21952186524868011, 0.35120856761932373, 0.433760404586792, 0.5048210024833679, 0.5659754276275635, 0.6402060389518738, 0.6482630968093872, 0.6767930388450623, 0.6951525807380676, 0.6997754573822021, 0.6795667409896851, 0.6704530715942383, 0.6662263870239258, 0.6502443552017212, 0.6662263870239258], "val_loss": [1.9504968098231725, 1.8659259932381767, 1.6324430193219865, 1.137192726135254, 0.8178822313036237, 0.7182095732007708, 0.6664396013532367, 0.6872222934450422, 0.6211891514914376, 0.6098450081689017, 0.6212227514811924, 0.5843253476279122, 0.6158703224999564, 0.6009964602334159, 0.619925958769662, 0.6343503338950021], "val_accuracy": [0.19200000166893005, 0.4506666660308838, 0.4880000054836273, 0.5666666626930237, 0.6859999895095825, 0.7126666903495789, 0.7203333377838135, 0.7200000286102295, 0.7476666569709778, 0.7423333525657654, 0.7483333349227905, 0.7393333315849304, 0.7323333621025085, 0.7463333606719971, 0.7416666746139526, 0.7480000257492065]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1], [8, 2, 8, 6, 9, 4, 8, 5, 5, 8, 4, 4, 6, 3, 6, 5, 9], [1, 2, 2, 0, 2, 1, 2, 2, 1, 2, 2, 1, 1, 1], [92, 32, 29, 49, 25], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1], [3, 4, 6, 9, 9, 7, 3, 9, 6, 5, 0], [3, 3, 1, 3, 1], [69, 17, 4], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [1, 4, 9, 1, 2], [1, 0, 2, 0, 2, 3], [51, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 5, 2, 1, 15, 15, 11, 4, 3, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.sqrt(alpha), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32))), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.negative(grad)))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(alpha, tf.math.pow(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1], [0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [4, 2, 8, 6, 2, 4, 0, 5, 5, 8, 4, 4, 6, 3, 6], [3, 0, 1, 0, 2, 1, 2, 2, 0], [74, 32, 29, 49, 25], [1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 1, 1], [3, 7, 6, 0, 0, 7, 3, 9], [2, 3, 3, 1, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [2, 3, 9, 1, 2], [0, 0, 2, 0, 0, 0], [33, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 8, 6, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 2], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.divide_no_nan(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.square(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), grad))))))), tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [2.3028304265742414, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [9, 1, 8, 6, 8, 4, 0, 2, 4, 8, 4, 3, 2, 3, 6, 4, 1], [3, 0, 1, 0, 2, 1, 2, 2, 0, 1, 2], [66, 32, 29, 49, 25], [1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [3, 7, 2, 6, 6, 7, 3, 9, 9, 8, 6, 2, 6, 3, 1, 7, 4, 7, 3, 0, 2, 2, 5, 0, 7, 8, 0, 2, 7, 7, 5, 6, 0, 0, 7, 3, 1, 7, 5, 8, 7, 9], [2, 3, 3, 3, 1, 2, 0, 1, 5, 4, 4, 5, 4, 3, 4, 1, 4, 5, 5, 2, 4, 1, 5, 2, 4, 2], [98, 73, 7, 62], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [1, 3, 9, 1, 2], [3, 0, 2], [97, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 68, 68, 42, 26, 4, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 58, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(tf.math.multiply(grad, tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))), grad), grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(alpha, beta)), tf.math.subtract(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.pow(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.square(tf.math.negative(tf.math.add(tf.math.sqrt(tf.math.add(beta, grad)), grad))))))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.divide_no_nan(tf.math.negative(grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha))))), tf.math.add(tf.math.add(beta, tf.math.multiply(grad, grad)), tf.math.subtract(tf.math.add(beta, grad), beta)))), tf.math.add(tf.math.square(grad), tf.math.add(beta, tf.math.sqrt(alpha)))))))))))), tf.math.add(tf.math.add(beta, grad), tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, beta))), grad))))), beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 2, 4, 0, 4, 5, 8, 4, 4, 6, 3, 6, 8, 8], [3, 0, 1, 0, 2, 1, 2, 2, 0], [31, 32, 29, 49, 25], [1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 4, 9, 5, 5, 7, 3, 9], [0, 3, 3, 4, 1], [72, 91], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [0], [64], [1, 1, 0, 0, 1, 1, 1], [1, 3, 9, 1, 2], [3, 0, 2], [88, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 20, 20, 12, 8, 2, 5, 5, 3, 2, 2, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), alpha))), tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)))), tf.math.sqrt(tf.math.add(alpha, tf.math.pow(alpha, tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, grad)))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.pow(tf.math.add(beta, tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)), grad), tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [1066587761.6864935, 20455949955.39823, 94769955655.65024, 260788592074.1017, 553980525293.5718, 1040989294547.0961], "accuracy": [0.09496764093637466, 0.1026284471154213, 0.10421344637870789, 0.10236428678035736, 0.09721305221319199, 0.09959053993225098], "val_loss": [3941931885.714286, 31525473718.857143, 106386592329.14285, 252163606820.57144, 492492647862.8571, 851013177929.1428], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [4, 0, 2, 5, 6, 2, 0, 2, 6, 8, 4, 4, 6, 3, 6, 4, 0], [3, 0, 1, 0, 2, 1, 2, 2, 2, 3, 3, 2, 2, 3], [31, 32, 29, 85, 25], [1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 1], [3, 7, 0, 9, 5, 7, 3, 9], [2, 2, 3, 1, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [1, 1, 0, 1, 0, 1], [6, 3, 5, 1, 2], [0, 0, 2], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 8, 6, 2, 6, 6, 4, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, grad))))), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.multiply(beta, tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3028304265742414, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1], [1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1], [0, 6, 8, 1, 2, 4, 0, 5, 9, 8, 4, 4, 6, 3, 6], [1, 1, 1, 2, 0, 1, 2, 2, 0, 2, 0, 2, 0], [31, 32, 29, 49, 25], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 1], [3, 8, 6, 5, 5, 7, 3, 9], [3, 0, 1, 1, 3, 3, 4, 1, 0], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1], [1, 3, 9, 1, 2, 9], [2, 0, 0, 0, 2, 3], [23, 52, 13, 65]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 8, 8, 5, 3, 1, 1, 0, 0, 0, 0, 9, 6, 3, 4], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))))))), tf.math.square(alpha))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(beta, tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [8, 2, 5, 5, 6, 4, 8, 5, 2, 0, 4, 2, 6, 3, 6], [3, 0, 1, 0, 2, 1, 2, 2, 0], [31, 12, 29, 49, 25], [1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 1, 1], [3, 4, 6, 9, 5, 7, 3, 9], [2, 3, 3, 3, 1], [88, 55], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 0, 1, 1], [1, 3, 9, 1, 2], [1, 3, 2, 0, 2, 3], [46, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 9, 5, 2, 7, 7, 4, 3, 1, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(alpha, tf.math.square(tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)), grad)))))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(beta, tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(alpha, tf.math.multiply(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1014397069811821, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 5, 6, 2, 4, 0, 5, 5, 8, 4, 4, 6, 3, 6], [3, 0, 1, 0, 2, 1, 2, 2, 0], [31, 36, 29, 49, 25], [1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 1], [3, 7, 6, 5, 5, 7, 3, 9], [2, 3, 3, 3, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [1, 3, 9, 1, 2], [3, 0, 2], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 9, 5, 2, 9, 9, 5, 4, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.square(tf.math.add(alpha, tf.math.square(alpha))))))), tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.divide_no_nan(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.square(grad)), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [4342764689133.7896, 2.3200258734424306, 2.3729163877653203, 2.4703855193632784, 2.622233393894226, 2.821199524183756], "accuracy": [0.09417514503002167, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9791435514177596, 2.0112271308898926, 2.079695020403181, 2.191506998879569, 2.347787516457694, 2.538778850010463], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [6, 1, 8, 6, 2, 4, 2, 9, 4, 8, 4, 4, 9, 8, 6, 4, 1, 4, 8], [1, 0, 1, 2, 2, 1, 2, 2, 0, 1, 2], [87, 1, 29, 67, 25], [1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0], [3, 7, 6, 6, 6, 1, 9, 9, 2, 8], [2, 3, 3, 3, 1, 4, 4], [98, 95], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 0, 1, 1], [1, 3, 5, 1, 2], [3, 0, 2], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 8, 6, 2, 13, 13, 6, 7, 0, 1, 0, 0, 0, 0, 6, 3, 3, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(alpha, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))))))), tf.math.add(alpha, tf.math.pow(tf.math.add(grad, alpha), tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.multiply(beta, tf.math.add(grad, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(beta, grad))))), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(tf.math.square(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 2, 4, 0, 5, 5, 8, 4, 4, 6, 3, 6], [3, 2, 1, 0, 2, 1, 2, 2, 0], [6, 32, 29, 49, 25], [1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0], [3, 3, 6, 5, 5, 7, 3, 9], [2, 3, 3, 3, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [4], [64], [0, 1, 0, 1, 1, 1], [4, 4, 9, 1, 2], [2, 0, 2], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 23, 23, 14, 9, 2, 13, 13, 8, 5, 1, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(alpha, tf.math.sqrt(grad)))))), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)))))), tf.math.pow(tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.multiply(grad, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.square(tf.math.add(grad, tf.math.multiply(tf.math.add(beta, grad), grad))))))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.pow(beta, tf.math.pow(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1], [1, 1, 8, 6, 8, 4, 0, 2, 4, 8, 4, 3, 2, 3, 6, 4, 1, 3, 1, 9], [3, 2, 2, 2, 2, 0, 2, 2, 0, 0, 2, 1, 2, 3, 0], [31, 32, 29, 49, 25], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 1], [3, 8, 6, 5, 5, 7, 3, 9], [1, 3, 3, 3, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [1, 3, 9, 1, 2, 0, 8], [3, 0, 2], [23, 52, 13, 65]], "fitness": -0.10000000149011612, "mapping_values": [1, 35, 35, 20, 15, 5, 4, 4, 2, 2, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.subtract(grad, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.pow(grad, grad))))))))), tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)), tf.math.add(alpha, grad))))))))))))), tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 8, 2, 4, 4, 8, 8, 5, 8, 4, 4, 2, 1, 6, 5, 9, 7], [3, 0, 1, 0, 2, 1, 2, 2, 0, 0, 0], [31, 32, 29, 49, 25, 79], [1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 1], [3, 2, 9, 5, 0, 7, 3, 9], [2, 2, 0, 1, 1, 4], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 0, 1, 1], [1, 3, 9, 1, 2], [1, 0, 0, 0, 2, 3], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 29, 29, 18, 11, 6, 6, 6, 4, 2, 1, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.pow(tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))))))), alpha), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.pow(tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))), tf.math.divide_no_nan(grad, grad)), tf.math.square(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), beta)), tf.math.square(beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(alpha, tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 1, 8, 6, 2, 4, 4, 5, 5, 8, 4, 4, 6, 3, 6], [3, 0, 1, 0, 2, 1, 2, 2, 0], [31, 32, 29, 49, 25], [1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 1], [3, 7, 6, 5, 5, 7, 3, 9], [2, 3, 3, 3, 1], [98], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 1, 1, 1, 1], [1, 3, 9, 1, 2], [3, 0, 2], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 7, 7, 2, 9, 9, 5, 4, 0, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, alpha))), grad)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.square(grad))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10236428678035736, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 2, 4, 0, 5, 6, 8, 4, 4, 6, 3, 6], [2, 2, 2, 0, 2, 1, 2, 2, 0, 2, 2, 1], [95, 32, 29, 49, 25], [1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [1, 0, 6, 5, 5, 7, 3, 9], [2, 1, 3, 3, 1], [98, 17], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [1, 1, 0, 0, 1, 1, 1], [1, 3, 9, 1, 2], [3, 0, 2], [46, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 20, 20, 12, 8, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(grad, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))))), grad), tf.math.sqrt(tf.math.pow(alpha, tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))))))))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08360850811004639, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 2, 4, 0, 5, 5, 8, 4, 4, 6, 3, 6], [3, 0, 1, 0, 2, 1, 2, 2, 0], [31, 32, 29, 49, 25], [1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1], [1, 0, 1, 1, 0, 1, 0, 1, 0], [3, 7, 6, 5, 5, 7, 3, 9], [2, 3, 3, 2, 1, 4], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [1, 3, 9, 1, 2], [3, 0, 2], [65, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(grad), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [2.302579580249567, 2.302516890995538, 2.301889928891564, 2.302897073557789, 2.302249619233657, 2.302545115113526], "accuracy": [0.09126931428909302, 0.09166556596755981, 0.09417514503002167, 0.08915598690509796, 0.09047681838274002, 0.09351472556591034], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1], [1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1], [1, 1, 8, 3, 8, 4, 6, 2, 4, 8, 4, 3, 2, 3, 6, 4, 1], [1, 1, 1, 2, 0, 1, 2, 2, 0, 2, 0, 2, 0], [31, 32, 29, 49, 25], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1], [1, 1, 0, 1, 0, 1, 0, 0, 1], [3, 7, 6, 2, 5, 7, 3, 9], [2, 3, 3, 3, 1], [98, 55, 92], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [1, 3, 9, 1, 2], [3, 0, 2], [23, 34, 13, 80]], "fitness": -0.04171428456902504, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [2.302579580249567, 2.302516890995538, 2.301889928891564, 2.302897073557789, 2.302249619233657, 2.302545115113526], "accuracy": [0.09126931428909302, 0.09166556596755981, 0.09417514503002167, 0.08915598690509796, 0.09047681838274002, 0.09351472556591034], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 2, 4, 0, 5, 5, 8, 4, 4, 6, 3, 6], [3, 0, 1, 2, 2, 1, 2, 2, 0], [18, 1, 29, 49, 25], [1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [8, 7, 6, 9, 2, 5, 3, 9, 5], [2, 3, 3, 3, 1, 4], [98, 95], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [1, 3, 9, 1, 2, 6], [3, 0, 2], [73, 52, 13, 63, 64, 34, 88, 83]], "fitness": -0.04171428456902504, "mapping_values": [1, 7, 7, 4, 3, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(grad, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha)))))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [2.302579580249567, 2.302516890995538, 2.301889928891564, 2.302897073557789, 2.302249619233657, 2.302545115113526], "accuracy": [0.09126931428909302, 0.09166556596755981, 0.09417514503002167, 0.08915598690509796, 0.09047681838274002, 0.09351472556591034], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [1, 0, 1, 2, 6, 2, 0, 2, 6, 8, 4, 2, 6, 3, 6, 0, 0], [2, 2, 2, 0, 2, 1, 2, 2, 0, 3, 3, 3, 0, 3], [31, 32, 29, 85, 25], [1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1], [1, 1, 0, 0, 0, 1, 0, 1, 1], [3, 7, 6, 5, 2, 7, 3, 9], [2, 3, 3, 1, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [6, 3, 5, 1, 2], [0, 0, 2], [23, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [2.302579580249567, 2.302516890995538, 2.301889928891564, 2.302897073557789, 2.302249619233657, 2.302545115113526], "accuracy": [0.09126931428909302, 0.09166556596755981, 0.09417514503002167, 0.08915598690509796, 0.09047681838274002, 0.09351472556591034], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [1, 1, 6, 8, 8, 4, 0, 2, 4, 8, 4, 3, 2, 3, 6, 4, 1, 4], [3, 0, 1, 0, 2, 1, 2, 2, 0, 1, 2, 2, 2, 0, 2], [31, 32, 29, 85, 25], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0], [0, 1, 0, 0, 0, 1, 0, 1, 1], [3, 7, 0, 5, 5, 7, 3, 9], [2, 3, 3, 2, 1, 4], [98, 95], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [1, 1, 0, 1, 0, 1], [6, 3, 5, 1, 2], [3, 0, 2], [93, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 33, 33, 18, 15, 4, 8, 8, 5, 3, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.pow(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), alpha)), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, grad)), tf.math.sqrt(tf.math.add(alpha, tf.math.pow(alpha, tf.math.multiply(grad, tf.math.add(alpha, grad))))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.pow(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), grad))), grad), grad)), tf.math.pow(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.multiply(beta, tf.math.add(tf.math.negative(tf.math.square(grad)), tf.math.square(grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.302579580249567, 2.302516890995538, 2.301889928891564, 2.302897073557789, 2.302249619233657, 2.302545115113526], "accuracy": [0.09126931428909302, 0.09166556596755981, 0.09417514503002167, 0.08915598690509796, 0.09047681838274002, 0.09351472556591034], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}]