[{"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 7, 1, 2, 6, 2, 8, 1, 3, 2, 9, 3, 5, 2, 0, 0, 2, 2, 2, 6, 6, 3, 9, 5, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [4, 0, 3, 1, 0, 3, 3, 3, 3, 3, 2, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [47, 9, 7, 66, 40, 57, 35, 9, 54, 64], [0, 1, 0, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8382856845855713, "mapping_values": [1, 4, 4, 2, 2, 1, 26, 26, 15, 11, 3, 5, 3, 2, 1, 1, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)), alpha)), tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.square(grad)), tf.math.add(beta, grad))))), tf.math.add(grad, tf.math.negative(tf.math.add(beta, grad)))))), tf.math.add(beta, grad))))), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), sigma)))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9828541864414793, 1.2316350532859748, 0.9017574187786886, 0.8007624319925158, 0.7654029722888283, 0.7319279604536935, 0.6812053623610106, 0.6477322997733225, 0.6095234698481516, 0.6294714383650072, 0.6268545663855913, 0.569281640187892, 0.5786171713367886, 0.5503645495826133, 0.5212516400792327, 0.5236805978153266, 0.505731130213927, 0.49482125265093496, 0.4936603708486704, 0.4858648903798811, 0.47527414105666266, 0.46189989841389006, 0.46074206256564143, 0.4414323084878096, 0.4392794886867935, 0.4272494430059235, 0.4313573186360708, 0.4112666020532247, 0.4047615233232568, 0.4234811337892295, 0.3869402312394761, 0.3831454580840402, 0.3893934872683879, 0.3723316852167188, 0.36914209919346797, 0.37085084596471923, 0.3556411241212809, 0.34975387549450715, 0.34616384241622217], "accuracy": [0.33984941244125366, 0.5787875056266785, 0.6691322326660156, 0.7036058902740479, 0.722229540348053, 0.7300224304199219, 0.7416457533836365, 0.7577598690986633, 0.7744023203849792, 0.7577598690986633, 0.7668735980987549, 0.7882710099220276, 0.7823272943496704, 0.7961959838867188, 0.8030643463134766, 0.8072909712791443, 0.8161405324935913, 0.8170651197433472, 0.8168009519577026, 0.8171972036361694, 0.8272355198860168, 0.8319904804229736, 0.8280280232429504, 0.8418967127799988, 0.8397833704948425, 0.8379341959953308, 0.8400475382804871, 0.8496896028518677, 0.8500858545303345, 0.843481719493866, 0.8568220734596252, 0.8595958352088928, 0.8580108284950256, 0.8647470474243164, 0.8676528930664062, 0.859199583530426, 0.8676528930664062, 0.8735966086387634, 0.8737286925315857], "val_loss": [1.1810933181217738, 0.7868189471108573, 0.6769824368613107, 0.5788030624389648, 0.5962779521942139, 0.5282284872872489, 0.5117692436490741, 0.49651895250592915, 0.5049984795706612, 0.594353199005127, 0.46895488670894075, 0.5085290840693882, 0.43454199177878244, 0.44964025701795307, 0.4254431298800877, 0.4209790144647871, 0.42299701486315044, 0.40280130931309294, 0.4093898619924273, 0.3832850967134748, 0.41642635209219797, 0.37460629429136005, 0.38243857451847624, 0.3934589794703892, 0.36823793819972445, 0.3774088280541556, 0.36787503957748413, 0.3481246658733913, 0.3816430909293039, 0.3430760162217276, 0.34215167590550016, 0.33782985380717684, 0.3603450911385672, 0.3399851322174072, 0.38441104548318045, 0.33654836245945524, 0.35170176199504305, 0.33215395893369404, 0.35822937318256926], "val_accuracy": [0.5099999904632568, 0.6579999923706055, 0.6853333115577698, 0.7416666746139526, 0.7356666922569275, 0.7760000228881836, 0.781333327293396, 0.778333306312561, 0.7739999890327454, 0.7400000095367432, 0.7960000038146973, 0.7616666555404663, 0.8186666369438171, 0.7963333129882812, 0.8100000023841858, 0.809333324432373, 0.8206666707992554, 0.8323333263397217, 0.824999988079071, 0.8420000076293945, 0.8166666626930237, 0.846666693687439, 0.8399999737739563, 0.8296666741371155, 0.8403333425521851, 0.8443333506584167, 0.8473333120346069, 0.8543333411216736, 0.843666672706604, 0.8533333539962769, 0.8573333621025085, 0.8586666584014893, 0.847000002861023, 0.8666666746139526, 0.8333333134651184, 0.8553333282470703, 0.8550000190734863, 0.8616666793823242, 0.8516666889190674]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 5, 1, 2, 6, 2, 1, 1, 3, 2, 3, 3, 5, 2, 0, 0, 2, 2, 2, 6, 6, 3, 9, 5, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [0, 1, 3, 1, 3, 3, 3, 3, 2, 3, 2, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [44, 19, 7, 66, 40, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 1, 1, 1, 0, 0], [4, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8357142806053162, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.988259975196285, 1.2522775870996963, 0.9097941583252508, 0.7847256635740968, 0.7585301317984102, 0.7233141072201706, 0.6906780142038411, 0.6506132337993807, 0.6192879497713621, 0.6253771670049507, 0.6248867525369137, 0.5668691620378289, 0.5838509281597054, 0.5526842370465951, 0.5277909650550369, 0.5224577958919842, 0.5057915914107496, 0.4977695205586068, 0.5033906688858347, 0.4930627885834416, 0.4821065759236834, 0.46945117625578, 0.45691953466600194, 0.4434357153158524, 0.44735018971762747, 0.4303306301768115, 0.43873159570260023, 0.41631369780256544, 0.40608943533730496, 0.43322912072304015, 0.3892201913613937, 0.38515934305199856, 0.4017981782274129, 0.37635046730991273, 0.373900116355963, 0.38197981472800135, 0.3596689564409257], "accuracy": [0.33866068720817566, 0.581429123878479, 0.6670188903808594, 0.705058753490448, 0.7219653725624084, 0.7304186820983887, 0.7383436560630798, 0.7543256878852844, 0.7650244235992432, 0.7604015469551086, 0.7648923397064209, 0.7905164361000061, 0.7783648371696472, 0.7930260300636292, 0.8010830879211426, 0.8075551390647888, 0.8146876096725464, 0.8166688680648804, 0.8101968169212341, 0.8153480291366577, 0.8231409192085266, 0.8232730031013489, 0.8290846943855286, 0.8389908671379089, 0.8355567455291748, 0.8350284099578857, 0.8350284099578857, 0.8469158411026001, 0.8521991968154907, 0.8387266993522644, 0.8510104417800903, 0.8574824929237366, 0.8498216867446899, 0.8646149635314941, 0.8625016212463379, 0.8581429123878479, 0.867520809173584], "val_loss": [1.1965339865003313, 0.8044032539640155, 0.6736980846949986, 0.5945359638759068, 0.5776952845709664, 0.5493875401360648, 0.5199453490121024, 0.4900107554027012, 0.5018358400889805, 0.6015355587005615, 0.4678074972970145, 0.49116362844194683, 0.436711175101144, 0.4628922769001552, 0.4296701124736241, 0.42151608637401033, 0.4284518190792629, 0.4068243418421064, 0.41398751735687256, 0.38795989751815796, 0.42678537539073397, 0.38053612198148457, 0.3839265448706491, 0.3917698178972517, 0.36905133724212646, 0.38322038309914724, 0.37075778416224886, 0.3484289475849697, 0.383080678326743, 0.34574962513787405, 0.3420286008289882, 0.3427790658814566, 0.3634657348905291, 0.3502339635576521, 0.37759797062192646, 0.3481176665851048, 0.3463833672659738], "val_accuracy": [0.515999972820282, 0.640333354473114, 0.6803333163261414, 0.7386666536331177, 0.7360000014305115, 0.7593333125114441, 0.7806666493415833, 0.7900000214576721, 0.7743333578109741, 0.7363333106040955, 0.7933333516120911, 0.7726666927337646, 0.8190000057220459, 0.7860000133514404, 0.8056666851043701, 0.8149999976158142, 0.8133333325386047, 0.8233333230018616, 0.8216666579246521, 0.8399999737739563, 0.8096666932106018, 0.8433333039283752, 0.8426666855812073, 0.8366666436195374, 0.8410000205039978, 0.8399999737739563, 0.843999981880188, 0.8539999723434448, 0.8373333215713501, 0.8543333411216736, 0.856333315372467, 0.8586666584014893, 0.8493333458900452, 0.8586666584014893, 0.8379999995231628, 0.8496666550636292, 0.8550000190734863]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 7, 1, 2, 6, 2, 8, 1, 3, 2, 9, 3, 8, 2, 0, 0, 2, 2, 2, 6, 6, 3, 9, 5, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [4, 1, 3, 1, 0, 3, 3, 3, 3, 3, 2, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [44, 19, 7, 66, 40, 57, 35, 9, 54, 64], [0, 1, 0, 0, 1, 0, 0, 0, 1], [0, 1, 1, 1, 1, 0, 0], [2, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.828000009059906, "mapping_values": [1, 4, 4, 2, 2, 1, 23, 23, 13, 10, 2, 3, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.subtract(tf.math.add(alpha, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(grad)), tf.math.add(beta, grad))))), grad)), grad)))))))))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9878378732408184, 1.2497141590806173, 0.9136594351823414, 0.7946801592157092, 0.750614221140756, 0.7487133707525928, 0.6804436626388349, 0.6468860007957334, 0.6265405113151312, 0.6296758945938336, 0.6228700932526176, 0.5699548049137466, 0.5849045115596725, 0.5579044397764391, 0.525561832477073, 0.5239225095289258, 0.5073252814777491, 0.4969104750832515, 0.5006795742445304, 0.4867880232400898, 0.47922904486149814, 0.4677849596541209, 0.45886723879243024, 0.44165763774993255, 0.4358102001093319, 0.43532328202330506, 0.44061244076521106, 0.41478982511890594, 0.407447783560596, 0.41963961125679805, 0.38847343008972635, 0.3832733560594129, 0.4069847983651709, 0.3747427975693714, 0.3746631878352263, 0.3776109139515566], "accuracy": [0.3387927711009979, 0.5822216272354126, 0.6679434776306152, 0.7003037929534912, 0.7215691208839417, 0.7161537408828735, 0.7450799345970154, 0.7584202885627747, 0.7607977986335754, 0.7621186375617981, 0.7671377658843994, 0.7857614755630493, 0.7798177003860474, 0.7889314293861389, 0.8001585006713867, 0.807158887386322, 0.8185180425643921, 0.8164047002792358, 0.8129705190658569, 0.8193105459213257, 0.8248580098152161, 0.8290846943855286, 0.828820526599884, 0.8422929644584656, 0.8393871188163757, 0.8330471515655518, 0.8360850811004639, 0.8475762605667114, 0.8499537706375122, 0.8448025584220886, 0.8564258217811584, 0.857218325138092, 0.8488970994949341, 0.8656716346740723, 0.8634262084960938, 0.8580108284950256], "val_loss": [1.1959399495806013, 0.8010437999452863, 0.6531928947993687, 0.6013612065996442, 0.6365019764219012, 0.5402674674987793, 0.5231557062694004, 0.4931004898888724, 0.5141175304140363, 0.5857668093272618, 0.46990331581660677, 0.5056129353387016, 0.4390465532030378, 0.4430325371878488, 0.4290636437279837, 0.42004809209278654, 0.4273639065878732, 0.4068694029535566, 0.4104407174246652, 0.3833156909261431, 0.4162030816078186, 0.38081214257649015, 0.3825819066592625, 0.37972575426101685, 0.3725697994232178, 0.3809044786861965, 0.36818396193640573, 0.35284297806876047, 0.3715312991823469, 0.34574830532073975, 0.3417165109089443, 0.343525230884552, 0.3607501643044608, 0.3441211921828134, 0.39261263608932495, 0.3382609486579895], "val_accuracy": [0.5146666765213013, 0.6413333415985107, 0.6926666498184204, 0.7336666584014893, 0.7049999833106995, 0.7710000276565552, 0.7799999713897705, 0.7913333177566528, 0.7676666378974915, 0.7390000224113464, 0.7900000214576721, 0.762333333492279, 0.8169999718666077, 0.8029999732971191, 0.8046666383743286, 0.8113333582878113, 0.8196666836738586, 0.8256666660308838, 0.8263333439826965, 0.8420000076293945, 0.815666675567627, 0.843666672706604, 0.8396666646003723, 0.8420000076293945, 0.8360000252723694, 0.8413333296775818, 0.8496666550636292, 0.8516666889190674, 0.8446666598320007, 0.8516666889190674, 0.8616666793823242, 0.8569999933242798, 0.8516666889190674, 0.8610000014305115, 0.8323333263397217, 0.8533333539962769]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 5, 2, 2, 6, 2, 1, 1, 3, 2, 3, 3, 5, 2, 0, 0, 2, 2, 2, 6, 6, 3, 9, 5, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 2, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [44, 19, 7, 66, 40, 57, 35, 9, 54, 64], [0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [67, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8251428604125977, "mapping_values": [1, 4, 4, 2, 2, 1, 8, 8, 4, 4, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad))), grad))), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9880530471106437, 1.2486867438280949, 0.9076391992992839, 0.798216004452575, 0.7510579965133803, 0.7385401849371331, 0.6844556839742272, 0.6534408497189991, 0.6194911751418365, 0.6341681218008717, 0.621181527833897, 0.5702738494149383, 0.5798183149507946, 0.552021716461678, 0.5315786231234876, 0.5216746984566082, 0.5053139316242101, 0.49449088796727203, 0.4979236555129404, 0.4879066129291944, 0.476591655268346, 0.46704090396174824, 0.4554714064800571, 0.4408113793642797, 0.45091862472891414, 0.42602777759381066, 0.43612344897796357, 0.4135680399149196, 0.40799916696712213, 0.4208894955318334, 0.3892054471869148, 0.3832476143949713, 0.39019503232164, 0.37445649570005446, 0.3776217260184053, 0.3857615474208534, 0.35885384498554496, 0.3516389631426739, 0.34480192913686], "accuracy": [0.3389248549938202, 0.5823537111282349, 0.6647734642028809, 0.7013604640960693, 0.7236824631690979, 0.7253995537757874, 0.7436270117759705, 0.7582882046699524, 0.7629110813140869, 0.7614582180976868, 0.7675340175628662, 0.789459764957428, 0.7817989587783813, 0.7917051911354065, 0.7994980812072754, 0.8105930685997009, 0.8153480291366577, 0.816008448600769, 0.8107251524925232, 0.8185180425643921, 0.82683926820755, 0.8251221776008606, 0.8298771381378174, 0.8455950617790222, 0.8315942287445068, 0.8378021121025085, 0.8372738361358643, 0.8459912538528442, 0.8485008478164673, 0.846387505531311, 0.8519350290298462, 0.8599920868873596, 0.8580108284950256, 0.8636903762817383, 0.8615770936012268, 0.8558974862098694, 0.8672566413879395, 0.870030403137207, 0.8728041052818298], "val_loss": [1.1959117480686732, 0.8025918858391898, 0.7042464358466012, 0.5937112058912005, 0.5971630641392299, 0.5457644462585449, 0.5452490874699184, 0.4904761144093105, 0.5095853294645037, 0.5756686074393136, 0.46952353204999653, 0.5111173902239118, 0.4354546751294817, 0.4638222966875349, 0.43008133343287874, 0.4144765819822039, 0.4246307781764439, 0.4080564039094107, 0.4134079558508737, 0.3817441037722996, 0.4163023999759129, 0.3766998733792986, 0.37865952934537617, 0.3899060828345163, 0.3653827820505415, 0.3807326555252075, 0.36718871763774324, 0.3488509144101824, 0.3753226399421692, 0.3424691217286246, 0.3397871766771589, 0.3373126643044608, 0.36286083289555143, 0.3446716581072126, 0.4009564689227513, 0.34349576916013447, 0.3464455434254238, 0.3306759425571987, 0.34801974466868807], "val_accuracy": [0.5146666765213013, 0.6489999890327454, 0.6576666831970215, 0.7329999804496765, 0.7266666889190674, 0.7666666507720947, 0.7616666555404663, 0.7870000004768372, 0.7716666460037231, 0.7450000047683716, 0.793666660785675, 0.7643333077430725, 0.8130000233650208, 0.7850000262260437, 0.8043333292007446, 0.8230000138282776, 0.8206666707992554, 0.82833331823349, 0.8230000138282776, 0.843999981880188, 0.8176666498184204, 0.8456666469573975, 0.8453333377838135, 0.8356666564941406, 0.8399999737739563, 0.8413333296775818, 0.8479999899864197, 0.8529999852180481, 0.843999981880188, 0.8533333539962769, 0.8606666922569275, 0.8616666793823242, 0.8456666469573975, 0.8643333315849304, 0.8286666870117188, 0.8510000109672546, 0.8546666502952576, 0.8616666793823242, 0.8553333282470703]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 7, 0, 1, 2, 2, 2, 1, 3, 2, 9, 3, 1, 2, 0, 0, 2, 2, 2, 6, 6, 3, 9, 5, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [4, 1, 3, 1, 3, 3, 3, 3, 2, 3, 2, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [44, 19, 7, 66, 40, 57, 35, 9, 54, 64], [0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 1, 1, 1, 0, 0], [4, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.7919999957084656, "mapping_values": [1, 4, 4, 2, 2, 1, 16, 16, 8, 8, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, grad), alpha), tf.math.add(beta, grad)))), alpha)), tf.math.add(grad, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.0351920871371845, 1.6585863600349098, 1.0426591364242428, 0.8970919452590902, 0.7857223537619781, 0.7181669915860843, 0.6848844681055696, 0.685646431580857, 0.6651065158900678, 0.6267482530344841, 0.6031577407235184, 0.6016813510948437, 0.5657212969224215, 0.5548567866699617], "accuracy": [0.3283582031726837, 0.46704530715942383, 0.6218464970588684, 0.6604147553443909, 0.7033417224884033, 0.7195879220962524, 0.7397965788841248, 0.7401928305625916, 0.7417778372764587, 0.7574957013130188, 0.7676661014556885, 0.7711002230644226, 0.7839123010635376, 0.7872143983840942], "val_loss": [1.852135249546596, 0.9692163126809257, 0.630368709564209, 0.6446971723011562, 0.5910306828362601, 0.5306937864848545, 0.555331996509007, 0.54158467905862, 0.47899564674922396, 0.5142428364072528, 0.47148965086255756, 0.4751176152910505, 0.4882859332220895, 0.46735388892037527], "val_accuracy": [0.34599998593330383, 0.6006666421890259, 0.7289999723434448, 0.7009999752044678, 0.7473333477973938, 0.7633333206176758, 0.746666669845581, 0.746999979019165, 0.7993333339691162, 0.7483333349227905, 0.7866666913032532, 0.7986666560173035, 0.7823333144187927, 0.7796666622161865]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 7, 1, 1, 6, 2, 2, 1, 8, 2, 9, 3, 2, 4, 0, 0, 2, 2, 2, 6, 6, 3, 9, 5, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7, 2, 8, 5], [3, 0, 2, 5, 3, 3, 0, 3, 3, 3, 2, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [44, 19, 7, 66, 40, 57, 35, 9, 54, 64], [0, 1, 0, 0, 1, 0, 0, 0, 1], [0, 1, 1, 1, 1, 0, 0], [2, 7, 3, 4], [0, 0], [61, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.7682856917381287, "mapping_values": [1, 4, 4, 2, 2, 1, 24, 24, 13, 11, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.subtract(tf.math.subtract(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, beta)), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)))), grad))))), grad)), tf.math.add(beta, grad))))))))), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.957899224221226, 1.5357724949510863, 1.0392495731494336, 0.8446184136627877, 0.7814700107186493, 0.7534615353602051, 0.68191903482386, 0.6685908967871408, 0.628392904654407, 0.6175825031930114, 0.6145128042407244, 0.5923794414137081, 0.5833692942565033], "accuracy": [0.3459252417087555, 0.5328226089477539, 0.6234315037727356, 0.6802271604537964, 0.6964733600616455, 0.7141724824905396, 0.7424382567405701, 0.7465327978134155, 0.7581561207771301, 0.7557786107063293, 0.7621186375617981, 0.7770439982414246, 0.7798177003860474], "val_loss": [1.6853783471243722, 0.7661301067897252, 0.7033887420381818, 0.6347637517111642, 0.5796899284635272, 0.5562139579227993, 0.5161131279809135, 0.5053799322673252, 0.5168360642024449, 0.5306412833077567, 0.49315571784973145, 0.47222752230507986, 0.4717450312205723], "val_accuracy": [0.5550000071525574, 0.6779999732971191, 0.6606666445732117, 0.7146666646003723, 0.7200000286102295, 0.7450000047683716, 0.7766666412353516, 0.7873333096504211, 0.7699999809265137, 0.7573333382606506, 0.7806666493415833, 0.7866666913032532, 0.7846666574478149]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [12, 66, 89, 50, 85, 46], [1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [9, 7, 1, 2, 6, 2, 8, 1, 8, 2, 9, 0, 8, 2, 0, 0, 2, 2, 2, 6, 6, 3, 9, 5, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [4, 1, 3, 1, 3, 3, 3, 2, 3, 3, 2, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [47, 9, 7, 66, 40, 57, 35, 9, 54, 64], [0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.45085713267326355, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 1, 0, 1, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.301690323162923, 2.2992714575615225, 2.3008618286776743, 2.299712481137831, 2.296494859856165, 2.2965979808514634, 2.294637420315705, 2.2937375156713466, 2.292321346061514, 2.291921172017954, 2.291978239902904, 2.2893544992419943, 2.290601719387802, 2.2877010057127123, 2.2858678267663732, 2.285897324224111, 2.2839932410535306, 2.2827715935125767, 2.283039649275111, 2.2813063270899883, 2.2795090469087764, 2.2809487064642724, 2.277956904327046, 2.2755655235917325, 2.276071826338752, 2.276486665596973, 2.2751144938040024, 2.273151864055724, 2.272066549460618, 2.27092311946298, 2.2686163327004603, 2.267969317802144, 2.267843551796976, 2.2656403801239966, 2.265802527746237, 2.263707247329599, 2.262211638765407, 2.2619421308885523, 2.2618887412187494, 2.257309373847529, 2.2595207950048883, 2.257799189749836, 2.2549883976997935, 2.255208583603036, 2.2550347788836804, 2.252099230525327, 2.2506917568796805, 2.2501691047147974, 2.2482570517946465, 2.2465871223731364, 2.246888011217653, 2.2467496167745855, 2.242399432765904, 2.2413984577275694, 2.2416890957068616, 2.2359929739476323, 2.235778844493523, 2.236422771350063, 2.235376699646907, 2.2328453250076823, 2.2317447265251644, 2.231099577785215, 2.2296260815286493, 2.22812490002858, 2.2252684939161127, 2.224741672559453, 2.225292416989386, 2.2207042446635294, 2.2189136938632457, 2.219270886903772, 2.2174912314326174, 2.2144594850352473, 2.215651005644289, 2.2115999410307055, 2.2117906011027935, 2.2080646755987896, 2.2084211161926737, 2.2070476008034685, 2.205077421931291, 2.2029451295731484, 2.1996683088732656, 2.2005483430878297, 2.1976233975384387, 2.194596319308197, 2.1934927316657338, 2.1899018522896676, 2.1893135866453117, 2.187589279082095, 2.1855854310411202, 2.1829747292406885, 2.1825673479398384, 2.178166728119856, 2.1790605551846007, 2.174851256622347, 2.1760289754377555, 2.1693450639654444, 2.169342001809294, 2.1664371139038634, 2.165072047526196, 2.162792510958616], "accuracy": [0.08994849026203156, 0.09681680053472519, 0.09496764093637466, 0.09853387624025345, 0.09985470771789551, 0.10355303436517715, 0.11213842034339905, 0.11359133571386337, 0.11874257028102875, 0.11451591551303864, 0.11081759631633759, 0.12072381377220154, 0.1208558976650238, 0.12878087162971497, 0.12759213149547577, 0.13697001338005066, 0.13697001338005066, 0.13961167633533478, 0.13815876841545105, 0.13736626505851746, 0.14674416184425354, 0.14978206157684326, 0.15559370815753937, 0.15968827903270721, 0.15955619513988495, 0.15598995983600616, 0.16232994198799133, 0.16933034360408783, 0.17157575488090515, 0.17144367098808289, 0.17897239327430725, 0.1846519559621811, 0.18174614012241364, 0.18240654468536377, 0.18478403985500336, 0.18663319945335388, 0.19970941543579102, 0.1970677524805069, 0.20235107839107513, 0.20578522980213165, 0.201294407248497, 0.21014396846294403, 0.21252146363258362, 0.2056531459093094, 0.2172764539718628, 0.2215031087398529, 0.2238806039094925, 0.22255976498126984, 0.22705058753490448, 0.22956016659736633, 0.22639016807079315, 0.22401267290115356, 0.24514594674110413, 0.24659886956214905, 0.23722097277641296, 0.25637298822402954, 0.2553163468837738, 0.2499009370803833, 0.2537313401699066, 0.2603355050086975, 0.2635054886341095, 0.2537313401699066, 0.26958128809928894, 0.266939640045166, 0.2785629332065582, 0.2731475234031677, 0.26799631118774414, 0.28080835938453674, 0.2856954038143158, 0.27777042984962463, 0.28318583965301514, 0.2837141752243042, 0.2895258367061615, 0.2938845455646515, 0.2933562397956848, 0.29903578758239746, 0.2989037036895752, 0.2957337200641632, 0.3032624423503876, 0.29824328422546387, 0.3031303584575653, 0.30260202288627625, 0.30999869108200073, 0.31884822249412537, 0.3066965937614441, 0.320169061422348, 0.316470742225647, 0.31884822249412537, 0.32082948088645935, 0.32281073927879333, 0.3205653131008148, 0.3263769745826721, 0.3269053101539612, 0.33786818385124207, 0.320169061422348, 0.33601900935173035, 0.3265090584754944, 0.3362831771373749, 0.3389248549938202, 0.3391890227794647], "val_loss": [1.9699564661298479, 1.9689485004970007, 1.967965739113944, 1.966982296534947, 1.9660024642944336, 1.9650141852242606, 1.964043208530971, 1.9630682127816337, 1.9620874268668038, 1.9611080033438546, 1.9601261956351144, 1.9591625077383858, 1.9581784520830428, 1.957193170275007, 1.9562198093959264, 1.9552486283438546, 1.9542766298566545, 1.9533070836748396, 1.9523321560450964, 1.9513451712472099, 1.9503604343959264, 1.9493842806134904, 1.948392595563616, 1.9473977088928223, 1.9464082036699568, 1.9454069818769182, 1.9443902288164412, 1.9433847154889787, 1.9423792021615165, 1.941366127559117, 1.9403438568115234, 1.9393162727355957, 1.9382848058428084, 1.9372377395629883, 1.9361951691763741, 1.935136181967599, 1.934072698865618, 1.9330126217433385, 1.931938852582659, 1.9308434895106725, 1.92975800377982, 1.9286676134381975, 1.927558149610247, 1.9264323370797294, 1.9253072057451521, 1.9241648401532854, 1.9230228151593889, 1.9218626703534807, 1.9206878798348563, 1.9195130893162318, 1.9183207239423479, 1.9171324457441057, 1.9159091540745325, 1.914680004119873, 1.9134379114423479, 1.9121737480163574, 1.9108936446053642, 1.9096101352146693, 1.9083327565874373, 1.9070147786821638, 1.905698231288365, 1.9043634278433663, 1.9030190876552038, 1.9016625540597099, 1.9002791132245744, 1.8988832065037318, 1.897489275251116, 1.8960386684962682, 1.8945839064461845, 1.8931306430271693, 1.8916558538164412, 1.8901489121573312, 1.8886409487043108, 1.887120246887207, 1.885580267224993, 1.8839951242719377, 1.8824090276445662, 1.880810328892299, 1.8791851316179549, 1.8775381360735213, 1.8758745193481445, 1.8741928509303503, 1.8724805286952428, 1.8707489967346191, 1.8689797265189034, 1.8671872956412179, 1.8653643471854073, 1.8635437147957938, 1.861684799194336, 1.8597854205540247, 1.857888902936663, 1.855945382799421, 1.8540055411202567, 1.8520219666617257, 1.8500203405107771, 1.8479602677481515, 1.84590026310512, 1.843811307634626, 1.8416998726981026, 1.8395566259111678], "val_accuracy": [0.044333335012197495, 0.04899999871850014, 0.05766666680574417, 0.06466666609048843, 0.07100000232458115, 0.07866666465997696, 0.08566666394472122, 0.09399999678134918, 0.10733333230018616, 0.11633333563804626, 0.125, 0.13466666638851166, 0.14866666495800018, 0.16033333539962769, 0.16699999570846558, 0.17533333599567413, 0.1836666613817215, 0.19599999487400055, 0.20600000023841858, 0.2163333296775818, 0.22499999403953552, 0.234333336353302, 0.24433332681655884, 0.25433334708213806, 0.2619999945163727, 0.2709999978542328, 0.2786666750907898, 0.28433331847190857, 0.28999999165534973, 0.29466667771339417, 0.3036666810512543, 0.3113333284854889, 0.3163333237171173, 0.32366666197776794, 0.3310000002384186, 0.33633333444595337, 0.33899998664855957, 0.3449999988079071, 0.35199999809265137, 0.3556666672229767, 0.359333336353302, 0.3633333444595337, 0.3686666786670685, 0.3713333308696747, 0.37566667795181274, 0.37700000405311584, 0.3803333342075348, 0.3840000033378601, 0.3866666555404663, 0.38866665959358215, 0.3893333375453949, 0.39100000262260437, 0.3919999897480011, 0.39366665482521057, 0.3959999978542328, 0.3970000147819519, 0.40066665410995483, 0.4026666581630707, 0.4050000011920929, 0.40566667914390564, 0.40700000524520874, 0.40966665744781494, 0.40933331847190857, 0.4103333353996277, 0.41100001335144043, 0.4129999876022339, 0.41466665267944336, 0.41733333468437195, 0.4176666736602783, 0.4206666648387909, 0.42266666889190674, 0.42533332109451294, 0.4256666600704193, 0.4273333251476288, 0.43033334612846375, 0.4309999942779541, 0.4320000112056732, 0.43433332443237305, 0.4346666634082794, 0.4350000023841858, 0.43833333253860474, 0.44066667556762695, 0.4413333237171173, 0.4423333406448364, 0.4436666667461395, 0.44466665387153625, 0.44566667079925537, 0.4463333189487457, 0.4483333230018616, 0.44999998807907104, 0.45100000500679016, 0.4519999921321869, 0.45233333110809326, 0.45399999618530273, 0.4533333480358124, 0.45500001311302185, 0.45766666531562805, 0.4593333303928375, 0.46033334732055664, 0.46166667342185974]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 7, 1, 2, 6, 2, 8, 1, 3, 2, 9, 3, 8, 2, 0, 0, 2, 2, 2, 6, 6, 3, 9, 5, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [3, 1, 2, 4, 3, 3, 3, 3, 3, 1, 2, 0, 2, 1, 0, 3, 4, 3, 0, 0, 4, 1, 1, 3, 5], [44, 19, 7, 66, 40, 57, 35, 9, 54, 64], [0, 1, 0, 0, 1, 0, 0, 0, 1], [0, 1, 1, 1, 1, 0, 0], [2, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.21942856907844543, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 3, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3944592474946385, 2.200034823037882, 4.060348853957147e+29, NaN, NaN, NaN, NaN], "accuracy": [0.3117157518863678, 0.26720380783081055, 0.1418570876121521, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9015938895089286, 1.6852012021200997, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.30533334612846375, 0.32866665720939636, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [86, 66, 89, 50, 85, 46], [1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 7, 1, 2, 6, 2, 2, 1, 3, 2, 9, 3, 8, 2, 0, 0, 2, 2, 2, 6, 6, 3, 9, 5, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [3, 1, 3, 1, 3, 3, 3, 3, 3, 3, 2, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [44, 19, 7, 66, 40, 57, 35, 9, 54, 64], [0, 1, 0, 0, 1, 0, 0, 0, 1], [1, 1, 1, 1, 1, 0, 0], [6, 7, 3, 4], [4, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.2134285718202591, "mapping_values": [1, 4, 4, 2, 2, 1, 24, 24, 13, 11, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.add(beta, grad)))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), grad))), tf.math.add(beta, grad))), tf.math.multiply(grad, tf.math.sqrt(tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.399024733557378, 13.265599341865512, NaN, NaN, NaN, NaN], "accuracy": [0.20353981852531433, 0.15149913728237152, 0.10830801725387573, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.021324566432408, 314.79323032924106, NaN, NaN, NaN, NaN], "val_accuracy": [0.12166666984558105, 0.08399999886751175, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [6, 7, 1, 2, 6, 0, 8, 1, 8, 2, 4, 3, 9, 2, 0, 0, 2, 2, 2, 6, 6, 3, 9, 5, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [3, 1, 2, 4, 3, 3, 3, 3, 3, 1, 2, 0, 2, 1, 0, 3, 4, 3, 0, 0, 4, 1, 1, 3, 5], [30, 19, 7, 66, 40, 57, 35, 9, 54, 64], [0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 1, 1, 1, 0, 0], [4, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.16599999368190765, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.4034528616097908, 2.8111173356796506, 2.4020533488332445, 2.33586061200792, 2.332521254187168, 2.3319240451536127], "accuracy": [0.20393607020378113, 0.1608770340681076, 0.11676132678985596, 0.09087307006120682, 0.09681680053472519, 0.0948355570435524], "val_loss": [2.0641258103506908, 1.9820194925580705, 1.9935519354684013, 1.982593332018171, 1.9935599735804967, 2.006255490439279], "val_accuracy": [0.1469999998807907, 0.11033333092927933, 0.10199999809265137, 0.10366666316986084, 0.09666666388511658, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 7, 1, 2, 6, 2, 8, 1, 2, 2, 9, 3, 5, 2, 0, 0, 2, 2, 2, 6, 6, 3, 9, 5, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [3, 3, 2, 1, 3, 3, 3, 3, 3, 1, 2, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [44, 19, 7, 66, 40, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10542856901884079, "mapping_values": [1, 2, 2, 1, 1, 0, 25, 25, 14, 11, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.subtract(beta, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha))), tf.math.add(beta, grad))))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), grad))))), grad)), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.403446393761857, 2.645960008715437, 2.4232701161565595, 2.3541437832277214, 4.450933459695966, 34.78092256333645, NaN], "accuracy": [0.20393607020378113, 0.17038699984550476, 0.1935015171766281, 0.10302469879388809, 0.08255184441804886, 0.09470347315073013, 0.09377889335155487], "val_loss": [2.067805358341762, 1.8328518186296736, 1.971372400011335, 3.348151615687779, 2.0115084648132324, 31317.51785714286, NaN], "val_accuracy": [0.11599999666213989, 0.23266667127609253, 0.14033333957195282, 0.0063333334401249886, 0.10199999809265137, 0.050333332270383835, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 4, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 2, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 7, 1, 2, 2, 2, 0, 1, 3, 2, 9, 3, 5, 2, 0, 0, 2, 2, 2, 6, 6, 3, 9, 5, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [2, 1, 3, 1, 3, 3, 3, 3, 3, 3, 1, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [44, 19, 7, 66, 40, 57, 35, 9, 54, 64], [0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 0, 27, 27, 16, 11, 1, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.pow(grad, tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.add(grad, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(grad, grad)))), tf.math.negative(grad)))), tf.math.negative(tf.math.add(beta, grad))))))))), tf.math.add(beta, grad))), tf.math.add(beta, grad))), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 7, 0, 1, 2, 2, 8, 1, 3, 2, 9, 3, 1, 2, 0, 0, 2, 2, 2, 6, 6, 3, 9, 5, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [4, 1, 3, 1, 3, 3, 3, 3, 2, 3, 2, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [44, 19, 7, 66, 40, 57, 35, 9, 54, 64], [0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 1, 1, 1, 0, 0], [1, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.080042265355587, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 6, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [15, 66, 89, 50, 85, 46], [1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 7, 6, 2, 6, 2, 8, 1, 3, 2, 9, 3, 8, 2, 0, 0, 2, 2, 2, 6, 6, 3, 9, 5, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [3, 1, 2, 1, 0, 3, 3, 3, 3, 3, 2, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [44, 80, 7, 66, 40, 57, 35, 9, 54, 64], [0, 1, 0, 0, 1, 0, 0, 0, 1], [1, 1, 1, 1, 1, 0, 0], [4, 7, 3, 4], [0, 0], [69, 2], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 1, 23, 23, 13, 10, 2, 1, 1, 0, 1, 1, 6, 3, 3, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(beta, beta)), tf.math.divide_no_nan(alpha, tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad)))), grad)), tf.math.sqrt(grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.square(tf.math.multiply(beta, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 7, 2, 2, 6, 0, 8, 1, 3, 2, 1, 3, 8, 1, 0, 0, 2, 2, 6, 6, 6, 3, 9, 5, 3, 1, 0, 3, 4, 4, 2, 6, 0, 8, 8, 6, 7, 2, 8, 6], [2, 1, 3, 1, 3, 3, 3, 3, 3, 3, 2, 2, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [44, 19, 7, 26, 40, 57, 35, 9, 54, 64], [0, 1, 0, 0, 1, 0, 0, 0, 1], [1, 1, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [3, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 48, 48, 28, 20, 3, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.subtract(tf.math.multiply(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, alpha))), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(grad)), grad)))))))), tf.math.subtract(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, grad))))), grad)), tf.math.add(beta, beta))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.square(tf.math.multiply(grad, tf.math.subtract(grad, tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))))))), tf.math.multiply(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [1164230662.0668325, 22564755870.68551, 103756503329.71179, 286413838063.0596, 613129892341.518, 1137604678095.647], "accuracy": [0.09919429570436478, 0.09919429570436478, 0.09642054885625839, 0.1006472036242485, 0.09826971590518951, 0.09708096832036972], "val_loss": [4349219986.285714, 34783172315.42857, 117380752530.28572, 278221797083.4286, 543386894336.0, 938950431305.1428], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 8, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 7, 1, 2, 6, 2, 2, 1, 3, 2, 6, 3, 8, 2, 0, 0, 2, 2, 2, 6, 6, 3, 9, 5, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [4, 1, 3, 1, 0, 3, 3, 3, 3, 1, 2, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [44, 19, 7, 66, 40, 57, 35, 9, 54, 64], [0, 1, 0, 0, 1, 0, 0, 0, 1], [0, 1, 1, 1, 1, 0, 0], [2, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 26, 26, 13, 13, 1, 3, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.sqrt(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.sqrt(grad)), tf.math.add(beta, grad)), grad), grad)), alpha)))), tf.math.add(beta, beta)), tf.math.add(beta, grad)))))))), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07357019931077957, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 3, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 7, 1, 2, 6, 2, 8, 1, 3, 2, 9, 3, 5, 2, 0, 0, 2, 2, 2, 6, 6, 3, 9, 5, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [4, 1, 3, 1, 3, 3, 3, 3, 3, 3, 2, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [30, 19, 7, 66, 40, 57, 35, 9, 54, 64], [0, 1, 0, 0, 1, 0, 0, 0, 1], [0, 1, 1, 1, 1, 0, 0], [1, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 0, 1, 1, 0, 1, 0, 3, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(grad, tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.sqrt(grad)))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09734513610601425, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [5, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [6, 7, 1, 2, 6, 0, 8, 1, 8, 2, 4, 3, 9, 2, 0, 0, 2, 2, 2, 6, 6, 3, 9, 5, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [4, 1, 3, 1, 3, 3, 3, 3, 3, 3, 2, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [30, 19, 7, 66, 40, 57, 35, 9, 54, 64], [0, 1, 0, 0, 1, 0, 0, 0, 1], [0, 1, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 1, 22, 22, 13, 9, 1, 3, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.negative(tf.math.add(grad, tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, grad), alpha), tf.math.add(beta, tf.math.negative(grad))), tf.math.sqrt(alpha))), tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))))), tf.math.pow(tf.math.add(beta, tf.math.multiply(grad, grad)), tf.math.add(beta, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09351472556591034, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [15, 66, 89, 50, 85, 46], [1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 7, 1, 2, 6, 2, 8, 1, 3, 2, 9, 3, 8, 2, 0, 0, 2, 2, 2, 6, 6, 3, 9, 5, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [4, 1, 3, 1, 3, 3, 3, 3, 2, 3, 2, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [44, 19, 7, 66, 40, 57, 35, 9, 54, 64], [1, 1, 0, 0, 1, 0, 0, 0, 1], [0, 1, 1, 1, 1, 0, 0], [4, 7, 3, 4], [0, 0], [69, 2], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.09057142585515976, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 3, 3, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.square(tf.math.multiply(beta, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.6689650649958914, 2.3027513667088866, 2.3045340292268914, 2.307564423210538, 2.3117587458361504, 2.3208378617159835], "accuracy": [0.10130762308835983, 0.10474177449941635, 0.10091137140989304, 0.09615638852119446, 0.1018359512090683, 0.10051512718200684], "val_loss": [1.9737890788487025, 1.9747915949140276, 1.9770969663347517, 1.9812133652823312, 1.9871784618922643, 1.9941497530255998], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.09566666930913925]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [1, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [15, 66, 89, 50, 85, 46], [0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [6, 7, 1, 2, 6, 2, 2, 2, 3, 2, 9, 3, 0, 5, 0, 0, 2, 2, 2, 6, 6, 3, 9, 5, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [4, 0, 0, 1, 3, 3, 3, 3, 2, 3, 2, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [44, 19, 7, 66, 40, 57, 35, 9, 54, 64], [0, 1, 0, 0, 1, 0, 0, 0, 1], [1, 1, 1, 1, 1, 0, 0], [1, 7, 3, 4], [0, 0], [44, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.04171428456902504, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 2, 3, 2, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.302126899544652, 2.300810258370569, 2.3034516954780995, 2.3033812897883355, 2.301241335347974, 2.3024589574851886], "accuracy": [0.08928807079792023, 0.09311848133802414, 0.08928807079792023, 0.08968432247638702, 0.09087307006120682, 0.09140139818191528], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}]