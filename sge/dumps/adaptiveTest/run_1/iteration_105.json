[{"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 2, 4, 0, 5, 5, 8, 4, 4, 6, 3, 6], [3, 0, 1, 0, 2, 1, 2, 2, 0], [31, 32, 29, 49, 25], [1, 0, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1], [3, 7, 6, 5, 5, 7, 3, 9], [2, 3, 0, 4, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [1, 3, 9, 1, 2], [3, 0, 2], [23, 52, 13]], "fitness": -0.7497143149375916, "mapping_values": [1, 13, 13, 8, 5, 2, 8, 8, 4, 4, 1, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.square(alpha)))), tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), grad)))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.square(grad))), tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [2.2839950973552057, 2.131390129554667, 1.6317589704182012, 1.3154360973099677, 0.9822021694372925, 0.9045439479042746, 0.8629613339609679, 0.821764121210224, 0.7859598133920159, 0.774143749523503, 0.7355233136500035, 0.6970143371632291, 0.6764852942854831, 0.650005993613509, 0.647469534889393, 0.6085928965080936, 0.5933216279917515, 0.5831005607912837, 0.5699574386108317, 0.5586655031987594, 0.5565677121913413, 0.531559325031333, 0.5346099246116661, 0.5178788313146406, 0.5420540622110144, 0.5147267867151804, 0.5075973305861554, 0.49776709049432316, 0.4806117591069375, 0.4715352245073718, 0.46542169633731706, 0.4626101254314684, 0.45422080107620755, 0.46084610206764987, 0.44435989964970385, 0.4385316988275886, 0.4258639005944871, 0.4188059785417704, 0.4159121373585895, 0.4250929622704626, 0.415521009731066, 0.40831176910843153, 0.41165139829131514, 0.40391619946143853, 0.38603863468842187, 0.37916521817591403, 0.3821224554056473, 0.38157809653365304, 0.3784460044768445, 0.37403447878217466, 0.3703664654887757, 0.37011754332894364, 0.35645374552590453, 0.361078740000772, 0.3510836513050953, 0.3524490229843504], "accuracy": [0.13974376022815704, 0.34222692251205444, 0.4511953592300415, 0.5528992414474487, 0.6406022906303406, 0.6647734642028809, 0.6752080321311951, 0.6894729733467102, 0.6948884129524231, 0.7088891863822937, 0.7193237543106079, 0.7371549606323242, 0.7341170310974121, 0.7565711140632629, 0.7633073329925537, 0.7675340175628662, 0.7750627398490906, 0.7799497842788696, 0.7812706232070923, 0.7936864495277405, 0.7911768555641174, 0.793950617313385, 0.8034605979919434, 0.8063663840293884, 0.7967243194580078, 0.8038568496704102, 0.8074230551719666, 0.8121780753135681, 0.8211596608161926, 0.8185180425643921, 0.8244617581367493, 0.8319904804229736, 0.8231409192085266, 0.8232730031013489, 0.8354246616363525, 0.8352925777435303, 0.8345000743865967, 0.8409721255302429, 0.8448025584220886, 0.8409721255302429, 0.8485008478164673, 0.8446704745292664, 0.8411042094230652, 0.8488970994949341, 0.8544445633888245, 0.8543124794960022, 0.8486329317092896, 0.8510104417800903, 0.8562937378883362, 0.8529917001724243, 0.8617091774940491, 0.8607845902442932, 0.8631620407104492, 0.8602562546730042, 0.8605204224586487, 0.8676528930664062], "val_loss": [1.9046897206987654, 1.5827032838548933, 0.8672656672341483, 0.7597495998655047, 0.716843707220895, 0.6304129191807338, 0.6196183817727225, 0.5936473097120013, 0.5923491546085903, 0.5674846172332764, 0.5414408104760307, 0.5133955819266183, 0.48946804659707205, 0.492529102734157, 0.46912024702344624, 0.45771089621952604, 0.4531079019818987, 0.4476255348750523, 0.4366039548601423, 0.4316526310784476, 0.43296566179820467, 0.4426680973597935, 0.44728713376181467, 0.4248951588358198, 0.4201338972364153, 0.4171363966805594, 0.4121702143124172, 0.40663808584213257, 0.39714519466672626, 0.3922485794339861, 0.41238334349223543, 0.4020074946539743, 0.39619593960898264, 0.3902881145477295, 0.3975590978349958, 0.4068469149725778, 0.39928057364055086, 0.405854412487575, 0.3970370888710022, 0.3905541811670576, 0.4023166809763227, 0.4025601404053824, 0.4125059502465384, 0.4023092474256243, 0.3853875994682312, 0.3857590045247759, 0.3968906913484846, 0.39646235534123014, 0.39028477668762207, 0.3954029849597386, 0.40230365310396465, 0.39494091272354126, 0.3794504148619516, 0.38072681427001953, 0.39306555475507465, 0.39853711639131817], "val_accuracy": [0.36933332681655884, 0.47433334589004517, 0.671999990940094, 0.7073333263397217, 0.6986666917800903, 0.7246666550636292, 0.7129999995231628, 0.7300000190734863, 0.7486666440963745, 0.7620000243186951, 0.7603333592414856, 0.7766666412353516, 0.7860000133514404, 0.7746666669845581, 0.7913333177566528, 0.8063333630561829, 0.8066666722297668, 0.8063333630561829, 0.8146666884422302, 0.8270000219345093, 0.8220000267028809, 0.8203333616256714, 0.8293333053588867, 0.8286666870117188, 0.8230000138282776, 0.8223333358764648, 0.8326666951179504, 0.831333339214325, 0.8326666951179504, 0.8399999737739563, 0.8450000286102295, 0.8473333120346069, 0.8453333377838135, 0.8479999899864197, 0.8516666889190674, 0.8463333249092102, 0.8506666421890259, 0.8523333072662354, 0.8546666502952576, 0.8506666421890259, 0.8486666679382324, 0.8503333330154419, 0.8536666631698608, 0.856333315372467, 0.8539999723434448, 0.8539999723434448, 0.856333315372467, 0.859333336353302, 0.859333336353302, 0.856333315372467, 0.8619999885559082, 0.859666645526886, 0.8553333282470703, 0.8529999852180481, 0.8616666793823242, 0.8616666793823242]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 6, 0, 6, 2, 4, 0, 5, 5, 8, 4, 4, 6, 3, 6], [0, 0, 1, 0, 2, 1, 2, 2, 0], [31, 32, 29, 49, 25], [0, 0, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1], [3, 7, 1, 5, 5, 7, 3, 9], [2, 1, 0, 4, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [1, 3, 9, 1, 2], [3, 0, 2], [20, 52, 13]], "fitness": -0.7160000205039978, "mapping_values": [1, 14, 14, 8, 6, 3, 8, 8, 4, 4, 1, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.square(alpha)))), tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))), grad)))))), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.subtract(beta, tf.math.add(beta, tf.math.square(alpha))), tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [2.299957323351462, 2.294736534203552, 2.290170666280597, 2.2837497138422806, 2.279697841767228, 2.2745701024686937, 2.2693587206043286, 2.2619790839103424, 2.255803461418711, 2.2502708894197796, 2.243557747565146, 2.2379725427832886, 2.2298135196591065, 2.220216146817281, 2.214691109771285, 2.2068495616275463, 2.196849803095717, 2.186140176469246, 2.176974130013773, 2.166075548333987, 2.1539362069244445, 2.1422189193678225, 2.131514184400311, 2.117835820925754, 2.1008474182821204, 2.0824348627379416, 2.065119283137273, 2.0462016440212545, 2.0299177522499328, 2.0096101330696805, 1.9812330236335425, 1.9640863366241013, 1.9421325470430977, 1.9136936768501693, 1.8855006031277723, 1.8651883701653984, 1.8341322988803124, 1.8092312372403139, 1.7826239609400263, 1.7543657220916788, 1.7224507572124694, 1.6909795802865502, 1.6667724416681395, 1.6409480686846536, 1.6174981816569811, 1.5853829000289368, 1.5560646725840903, 1.5363225121586912, 1.5150050386194036, 1.4931832873322126, 1.4715669438067744, 1.436747146572309, 1.4234510875570145, 1.405223570164751, 1.3903301228401195, 1.3710340733509871, 1.3493543165927675, 1.3372326462795674, 1.314933590365596, 1.302103474281562, 1.2909751735768378, 1.2657165424682997, 1.2628364394983642, 1.2503292775503665, 1.242091605282573, 1.2341540990142208, 1.2155915896150304, 1.202448599452844, 1.1753316858834784, 1.1887381271584758, 1.1661161172186867, 1.1566588496645411, 1.152965543638871, 1.146955249016988, 1.1354521093209815, 1.1274497899648899, 1.1236416042882376, 1.1131465337878252, 1.105582908065548, 1.0906919020986703, 1.0874088001666902, 1.0786023041229238, 1.083094865922143, 1.0674004743537253, 1.0552810542319886, 1.0405917199154604, 1.0418274364986628, 1.0292033166334913, 1.037772263943354, 1.0228436328259127, 1.0207654905986823, 1.0199703843822536, 1.0091035488086086, 1.0103388066305035, 1.0017853279974105, 0.9999410111780385, 0.9848343367432371, 0.9852584421264654, 0.975817906771511, 0.9805811077155583], "accuracy": [0.09840179979801178, 0.11279883980751038, 0.12376172095537186, 0.14053626358509064, 0.1508387327194214, 0.16417910158634186, 0.17553824186325073, 0.19759608805179596, 0.21476687490940094, 0.2226918488740921, 0.23616431653499603, 0.24858011305332184, 0.26363757252693176, 0.28120461106300354, 0.2925637364387512, 0.29560163617134094, 0.30563995242118835, 0.32505613565444946, 0.3315281867980957, 0.337339848279953, 0.34566107392311096, 0.3551710546016693, 0.3571522831916809, 0.36507725715637207, 0.3759080767631531, 0.38845595717430115, 0.3907013535499573, 0.39387133717536926, 0.40589091181755066, 0.4127592146396637, 0.41989168524742126, 0.416589617729187, 0.4301941692829132, 0.4383833110332489, 0.4468366205692291, 0.44868576526641846, 0.4497424364089966, 0.46030908823013306, 0.45951658487319946, 0.4644036591053009, 0.47629112005233765, 0.47972527146339417, 0.4835556745529175, 0.4970281422138214, 0.4896314740180969, 0.4974243938922882, 0.5116893649101257, 0.5079910159111023, 0.5097081065177917, 0.5209351181983948, 0.5223880410194397, 0.5326905250549316, 0.535860538482666, 0.5359926223754883, 0.5370492935180664, 0.5474838018417358, 0.54655921459198, 0.5499933958053589, 0.5576542019844055, 0.5635979175567627, 0.5602958798408508, 0.5686171054840088, 0.5679566860198975, 0.579447865486145, 0.5741645693778992, 0.5756174921989441, 0.5787875056266785, 0.5844670534133911, 0.5908070206642151, 0.5906749367713928, 0.5954299569129944, 0.6032228469848633, 0.6036190986633301, 0.6017699241638184, 0.6038832664489746, 0.6041474342346191, 0.6040153503417969, 0.6152423620223999, 0.6147140264511108, 0.6197332143783569, 0.6178840398788452, 0.6242240071296692, 0.6221106648445129, 0.625148594379425, 0.6262052655220032, 0.6419231295585632, 0.6312243938446045, 0.635451078414917, 0.6296393871307373, 0.6386210322380066, 0.637828528881073, 0.6366398334503174, 0.6373002529144287, 0.6413947939872742, 0.6445648074150085, 0.6470743417739868, 0.6560559868812561, 0.6501122713088989, 0.6560559868812561, 0.6476026773452759], "val_loss": [1.9660014425005232, 1.9610659735543388, 1.9561882019042969, 1.9513093403407507, 1.9463990756443568, 1.9413695335388184, 1.9362070901053292, 1.9308490753173828, 1.9252546855381556, 1.9194305964878626, 1.913330350603376, 1.9069249970572335, 1.9001354490007674, 1.8928491728646415, 1.8852148737226213, 1.8771087101527624, 1.8683844293866838, 1.859008516584124, 1.848990031651088, 1.8382322447640556, 1.8267008236476354, 1.8143907274518694, 1.8014346531459264, 1.7875935690743583, 1.772782802581787, 1.7569138663155692, 1.7401112147739954, 1.7222950117928642, 1.7035499981471471, 1.6836610180991036, 1.662295205252511, 1.640244518007551, 1.6170241151537215, 1.5926803180149622, 1.567305598940168, 1.5416762488228934, 1.514895030430385, 1.4877317973545618, 1.4600224154336112, 1.4324631350381034, 1.403921365737915, 1.3754959106445312, 1.34730897630964, 1.3193303857530867, 1.2920937878744942, 1.2647478580474854, 1.238016128540039, 1.212878908429827, 1.188236849648612, 1.164659125464303, 1.1421148095812117, 1.1198406219482422, 1.0987287248883928, 1.078794275011335, 1.0598290647779192, 1.0416854790278844, 1.0241695131574358, 1.007683413369315, 0.9919440065111432, 0.9768774850027901, 0.9629405566624233, 0.9490752220153809, 0.9365283080509731, 0.9244282586233956, 0.9128473145621163, 0.9020538670676095, 0.8913366113390241, 0.8811401299067906, 0.8709477356501988, 0.8620328051703317, 0.8528510843004499, 0.8441673346928188, 0.836086630821228, 0.828173177582877, 0.8206717116492135, 0.8133925710405622, 0.8064640249524798, 0.7996326684951782, 0.7933309929711478, 0.7869987147194999, 0.781095061983381, 0.7754473345620292, 0.7701226643153599, 0.7646856307983398, 0.7594501461301532, 0.7540513447352818, 0.7491238287517002, 0.7444804395948138, 0.7403945071356637, 0.7357393843787057, 0.7313619341169085, 0.727397084236145, 0.7232409545353481, 0.7193573883601597, 0.7148302282605853, 0.7110217298780169, 0.7077315194266183, 0.7039087670189994, 0.7006383453096662, 0.6974631377628872], "val_accuracy": [0.07133333384990692, 0.11733333021402359, 0.1679999977350235, 0.21766667068004608, 0.26466667652130127, 0.29899999499320984, 0.3319999873638153, 0.35600000619888306, 0.3733333349227905, 0.3856666684150696, 0.3930000066757202, 0.4036666750907898, 0.4103333353996277, 0.4183333218097687, 0.42800000309944153, 0.4403333365917206, 0.44699999690055847, 0.4543333351612091, 0.46266666054725647, 0.46799999475479126, 0.47433334589004517, 0.48100000619888306, 0.48500001430511475, 0.49000000953674316, 0.49933332204818726, 0.5056666731834412, 0.5139999985694885, 0.5173333287239075, 0.5243333578109741, 0.5320000052452087, 0.5389999747276306, 0.5419999957084656, 0.5453333258628845, 0.5490000247955322, 0.5536666512489319, 0.5553333163261414, 0.559333324432373, 0.5613333582878113, 0.5673333406448364, 0.5753333568572998, 0.5799999833106995, 0.5856666564941406, 0.5920000076293945, 0.5943333506584167, 0.6003333330154419, 0.6046666502952576, 0.6086666584014893, 0.612333357334137, 0.6169999837875366, 0.6223333477973938, 0.6313333511352539, 0.6356666684150696, 0.6413333415985107, 0.6486666798591614, 0.6516666412353516, 0.6566666960716248, 0.6623333096504211, 0.6663333177566528, 0.6700000166893005, 0.6703333258628845, 0.6736666560173035, 0.6746666431427002, 0.6773333549499512, 0.6769999861717224, 0.6806666851043701, 0.6786666512489319, 0.6806666851043701, 0.6836666464805603, 0.6856666803359985, 0.6859999895095825, 0.6886666417121887, 0.6909999847412109, 0.6916666626930237, 0.6940000057220459, 0.6966666579246521, 0.6966666579246521, 0.6976666450500488, 0.6980000138282776, 0.6983333230018616, 0.6993333101272583, 0.6993333101272583, 0.7023333311080933, 0.7016666531562805, 0.7036666870117188, 0.7056666612625122, 0.7076666951179504, 0.7070000171661377, 0.7073333263397217, 0.7080000042915344, 0.7089999914169312, 0.7113333344459534, 0.7113333344459534, 0.7123333215713501, 0.7133333086967468, 0.7163333296775818, 0.718999981880188, 0.7200000286102295, 0.7213333249092102, 0.7226666808128357, 0.7229999899864197]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [5, 2, 8, 6, 2, 4, 0, 5, 5, 8, 4, 4, 6, 3, 6], [3, 0, 1, 1, 2, 1, 2, 2, 0], [31, 32, 29, 49, 25], [1, 0, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 1, 1, 0, 0, 1], [3, 7, 6, 5, 5, 7, 3, 9], [2, 3, 0, 2, 1], [98], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [1, 1, 0, 1, 1, 1, 1], [1, 3, 9, 1, 2], [3, 0, 2], [41, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 8, 5, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(tf.math.pow(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.square(alpha)))), alpha), grad)))))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0758156105875969, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 2, 4, 0, 4, 5, 8, 4, 4, 6, 3, 6], [3, 0, 1, 2, 2, 1, 2, 2, 0], [52, 89, 29, 49, 25], [1, 0, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1], [3, 7, 2, 5, 5, 7, 3, 9], [1, 3, 2, 4, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 0, 1, 1, 1, 1], [4, 3, 9, 1, 2], [3, 0, 2], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 8, 6, 1, 8, 8, 4, 4, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.pow(alpha, grad)))), grad)), tf.math.add(alpha, alpha)))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))), tf.math.add(beta, beta))), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.multiply(sigma, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 5, 8, 6, 2, 4, 0, 5, 5, 8, 4, 4, 6, 3, 6], [2, 0, 1, 2, 2, 1, 2, 2, 0], [31, 42, 29, 49, 25], [1, 0, 1, 1, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 1, 1], [3, 5, 6, 5, 5, 7, 3, 9], [3, 3, 0, 4, 1], [98], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 1, 1, 1, 1], [1, 3, 9, 1, 2], [3, 2, 3], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 0, 8, 8, 5, 3, 1, 1, 1, 0, 1, 0, 3, 1, 2, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.square(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.divide_no_nan(tf.math.square(tf.math.square(tf.math.add(beta, grad))), tf.math.add(beta, grad)))), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07885351777076721, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 8, 8, 6, 1, 1, 0, 5, 5, 8, 4, 4, 6, 3, 6], [3, 0, 1, 0, 2, 1, 2, 2, 0], [31, 32, 29, 49, 25], [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1], [5, 9, 6, 5, 5, 7, 3, 9], [2, 3, 0, 2, 1], [98, 55], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1, 1], [2, 3, 1, 1, 2], [3, 0, 2, 1], [41, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 3, 1, 0, 2, 2, 2, 0, 1, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [4434760.74443087, 83842323.7955356, 392971492.78879935, 1077303941.0212653, 2317818380.0036983, 4284090484.249901], "accuracy": [0.09774138033390045, 0.10077928751707077, 0.09576013684272766, 0.09576013684272766, 0.09615638852119446, 0.10091137140989304], "val_loss": [16307731.42857143, 130200155.42857143, 439134445.71428573, 1040567661.7142857, 2031955748.5714285, 3510756352.0], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 2, 4, 0, 5, 5, 8, 4, 4, 6, 3, 6], [3, 0, 1, 0, 2, 1, 2, 2, 0], [31, 32, 29, 49, 25], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0], [0, 0, 0, 1, 0, 1, 1, 1], [3, 7, 6, 5, 5, 7, 3, 9], [2, 3, 5, 5, 1], [42], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 0, 0, 1, 1, 1, 1], [1, 3, 9, 1, 2], [2, 0, 2], [23, 83, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 8, 8, 4, 4, 0, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))), tf.math.add(beta, grad)), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), beta), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09509972482919693, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 1, 8, 6, 2, 4, 0, 8, 5, 8, 4, 4, 6, 3, 6], [3, 0, 1, 0, 2, 1, 2, 2, 0], [7, 5, 29, 49, 25], [1, 0, 1, 1, 1, 1, 0, 1], [1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [0, 7, 2, 9, 5, 6, 3, 4, 6, 5, 4], [2, 3, 0, 4, 1], [98], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 0, 0, 0, 1, 1, 1], [1, 0, 9, 1, 2], [3, 3, 0], [63, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.negative(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, sigma))", "other_info": {"loss": [1034476929.426759, 19613981913.892483, 92010641666.33311, 252338096492.9124, 543021535585.2807, 1003819402224.4459], "accuracy": [0.09774138033390045, 0.10077928751707077, 0.09576013684272766, 0.09576013684272766, 0.09628847241401672, 0.10091137140989304], "val_loss": [3810660498.285714, 30475603382.857143, 102844256841.14285, 243766441691.42856, 476091187200.0, 822672883712.0], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 9, 6, 9, 0, 5, 5, 8, 4, 4, 6, 3, 6], [3, 0, 1, 0, 2, 1, 2, 2, 0], [30, 32, 29, 49, 25], [1, 0, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1], [3, 7, 6, 5, 5, 7, 3, 9], [2, 3, 0, 4, 1], [8], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [1, 0, 0, 0, 1, 1, 1], [1, 4, 9, 1, 2], [1, 0, 1], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 7, 7, 3, 4, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, beta), tf.math.add(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 2, 4, 5, 5, 5, 8, 4, 4, 6, 3, 6], [2, 1, 2, 0, 2, 1, 2, 2, 0, 0], [31, 32, 29, 49, 25], [0, 0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 1, 1, 1], [2, 7, 6, 5, 5, 7, 3, 9], [2, 3, 1, 4, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [1, 1, 9, 1, 2, 2], [3, 0, 2, 0, 0], [23, 52, 83, 75]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 8, 5, 1, 8, 8, 4, 4, 0, 1, 0, 0, 0, 0, 7, 4, 3, 2], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.square(tf.math.square(grad)))), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), grad)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), tf.math.add(beta, alpha))), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.subtract(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 2, 4, 4, 5, 5, 8, 4, 4, 6, 3, 6], [3, 0, 1, 2, 3, 1, 2, 0, 0], [31, 32, 29, 49, 25], [0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0], [0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1], [3, 7, 6, 0, 5, 7, 3, 9], [3, 3, 3, 4, 1, 5], [29], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [1, 3, 9, 2, 2, 2], [1, 0, 1, 2, 1], [97, 29, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 7, 7, 3, 4, 0, 1, 0, 0, 0, 0, 11, 6, 5, 2], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(grad, tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), alpha)), tf.math.add(beta, alpha))", "other_info": {"loss": [2.303037835527893, 2.3025824367378083, 2.302570924436443, 2.3025915223090028, 2.3025870949222806, 2.3025845154291287, 2.3025854134587975], "accuracy": [0.1026284471154213, 0.10619468986988068, 0.09998679161071777, 0.09998679161071777, 0.10249637067317963, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9736264773777552, 1.9736224583217077, 1.9736229351588659, 1.973630428314209, 1.9736338342939104, 1.9736380577087402, 1.9736556325639998], "val_accuracy": [0.10199999809265137, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [8, 2, 8, 6, 2, 4, 0, 5, 5, 1, 3, 4, 6, 3, 6, 5, 4, 8, 2, 9, 3, 2, 8, 2], [2, 0, 1, 0, 0, 1, 2, 2, 0, 0, 2, 1, 1, 0, 2, 2], [31, 32, 29, 49, 25, 88, 60], [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0], [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1], [3, 4, 6, 5, 5, 7, 6, 9], [2, 3, 0, 4, 3, 5], [8, 84], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [1, 1, 0, 1, 1, 1], [9, 3, 9, 1, 2], [1, 0, 2], [51, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09602430462837219, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 5, 8, 6, 2, 4, 0, 5, 5, 8, 4, 4, 6, 3, 6], [3, 0, 1, 2, 2, 1, 2, 2, 0], [31, 42, 29, 49, 25], [0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1], [3, 7, 6, 5, 5, 7, 2, 9, 7, 1, 5, 1, 4], [3, 3, 3, 4, 1, 5, 1, 0, 0], [88, 71, 32], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 0, 0, 1, 0, 1, 1], [4, 3, 9, 1, 2], [3, 2, 2], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 22, 22, 13, 9, 3, 1, 0, 0, 0, 0, 7, 4, 3, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(grad))), tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.square(grad)))))))))), tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), sigma), tf.math.subtract(beta, beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 4, 8, 6, 2, 6, 2, 4, 5, 8, 4, 4, 6, 3, 6], [3, 0, 1, 2, 1, 2, 2, 2, 0, 1], [31, 25, 29, 49, 25], [1, 0, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1], [3, 7, 6, 5, 5, 7, 3, 9], [3, 3, 0, 4, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [4, 3, 9, 1, 2], [3, 0, 1], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 23, 23, 13, 10, 2, 8, 8, 4, 4, 1, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, alpha), grad), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))))))), tf.math.sqrt(tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, grad)))))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha))))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.square(grad))), tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.pow(sigma, tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 6, 8, 6, 2, 1, 0, 5, 5, 8, 4, 4, 6, 3, 6, 2, 0], [0, 2, 1, 0, 0, 1, 2, 2, 0, 0, 2, 0], [31, 97, 29, 49, 25, 3], [1, 0, 1, 1, 1, 1, 0, 1, 1], [0, 0, 1, 1, 1, 1, 0, 0, 1], [3, 7, 6, 1, 5, 7, 3, 9], [2, 3, 2, 4, 1, 5], [47], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [9, 3, 9, 1, 2], [2, 0, 2], [41, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 29, 29, 17, 12, 6, 5, 5, 2, 3, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.negative(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.square(tf.math.square(grad)))), alpha)), tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))))), tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.add(alpha, grad)), tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(beta, grad)), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3030351812435477, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 2, 5, 0, 5, 5, 8, 4, 4, 6, 3, 6], [2, 0, 1, 0, 2, 1, 2, 2, 0], [31, 13, 29, 49, 25], [0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0], [3, 7, 6, 2, 5, 7, 3, 9], [2, 3, 0, 4, 1, 0], [98, 47, 74], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [1, 3, 9, 1, 2], [3, 0, 0], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 12, 8, 4, 2, 14, 14, 8, 6, 3, 1, 0, 0, 0, 0, 5, 2, 3, 2], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(alpha, tf.math.negative(tf.math.square(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))))), alpha))), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, tf.math.add(tf.math.multiply(grad, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))), tf.math.add(beta, alpha)))), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [61.3486107952323, 750.1044503956297, 3155.1765872268566, 8319.917966041268, 17566.961284991663, 32106.937601641956], "accuracy": [0.09893012791872025, 0.10051512718200684, 0.09602430462837219, 0.09576013684272766, 0.09602430462837219, 0.10091137140989304], "val_loss": [172.98366001674108, 1084.717808314732, 3440.1256975446427, 7943.744419642857, 15295.45424107143, 26194.129464285714], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 8, 8, 6, 1, 1, 0, 5, 5, 8, 4, 4, 6, 3, 6], [3, 0, 1, 0, 2, 1, 2, 2, 0], [31, 32, 29, 49, 25], [1, 0, 1, 1, 0, 1, 0, 1, 1], [0, 1, 1, 0, 1, 1, 0, 0, 1], [5, 7, 6, 5, 5, 7, 3, 9], [2, 3, 0, 2, 1], [47], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 0, 1, 1, 1], [2, 3, 1, 1, 2], [3, 0, 2, 1], [41, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 7, 3, 4, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(grad), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.subtract(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), beta), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 2, 4, 0, 5, 5, 8, 4, 4, 6, 3, 6], [2, 0, 1, 0, 0, 1, 2, 2, 0], [74, 58, 29, 49, 25], [1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0], [0, 0, 0, 1, 0, 1, 1, 1, 1], [3, 7, 6, 1, 5, 7, 3, 9], [2, 3, 0, 4, 1], [98, 55], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [9, 3, 9, 1, 2], [2, 0, 2], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 8, 5, 3, 9, 9, 4, 5, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(grad, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.square(alpha)))), tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))), tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))), grad)), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3030351812435477, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 9, 2, 6, 0, 5, 5, 8, 4, 4, 6, 3, 6], [3, 0, 1, 0, 2, 1, 2, 2, 0], [31, 32, 29, 49, 25], [1, 0, 1, 1, 0, 1, 0, 1, 0], [1, 0, 0, 1, 0, 1, 1, 0, 1], [3, 1, 6, 5, 5, 7, 3, 9], [2, 3, 0, 4, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [4, 3, 9, 1, 2], [3, 2, 3], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 12, 9, 3, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.square(tf.math.square(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, alpha))))))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.pow(sigma, tf.math.multiply(beta, sigma))", "other_info": {"loss": [2.3030351812435477, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 0, 6, 2, 4, 4, 5, 5, 8, 4, 4, 6, 3, 6], [1, 0, 2, 0, 2, 1, 2, 2, 0], [26, 32, 29, 49, 25], [1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1], [5, 7, 6, 5, 5, 7, 3, 8, 5], [2, 3, 2, 4, 1], [42], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [1, 1, 0, 0, 1, 1], [1, 3, 9, 2, 2], [3, 3, 2], [23, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 2, 2, 1, 1, 0, 7, 7, 4, 3, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(alpha)), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.square(grad))), tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3021556917922905, 2.302370265112451, 2.30302294496343, 2.3018713081517572, 2.3029799940028384, 2.3034553935955766], "accuracy": [0.09259014576673508, 0.09192973375320435, 0.09311848133802414, 0.08968432247638702, 0.08981640636920929, 0.09060890227556229], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}]