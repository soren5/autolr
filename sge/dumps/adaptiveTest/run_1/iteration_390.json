[{"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1], [4, 6, 9, 3, 2, 2, 3, 9], [0, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 80, 3], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8451428413391113, "mapping_values": [1, 4, 4, 2, 2, 1, 13, 13, 8, 5, 3, 4, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad))), grad), tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, sigma))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.088747797703872, 1.184725001535049, 0.8442567611540533, 0.729874479347106, 0.6666158343491978, 0.6140555536915456, 0.5739280108321596, 0.5512065582775468, 0.5238327341797078, 0.49544363474691583, 0.481229186979157, 0.45374265159236093, 0.4386298566241825, 0.418988879047223, 0.40663009232864433, 0.38768899413998004, 0.37849768678966594, 0.36546411929255257, 0.35502893243168543, 0.33470951084683775, 0.3391864567880916, 0.3309255594063145, 0.32515293106647325, 0.31060625050817703, 0.30558057310259684, 0.30109116138248015, 0.2984774746261552, 0.2769071957840187, 0.2768008989578288, 0.2684233311011161, 0.27629399407478356, 0.26873694974724893, 0.2542693308119005, 0.2471411707689891, 0.23429226733595546, 0.23504260741149618, 0.2338717224977083, 0.22231792273294373], "accuracy": [0.29282790422439575, 0.5892220139503479, 0.6885483860969543, 0.7314753532409668, 0.7467969655990601, 0.7713643908500671, 0.7852331399917603, 0.7927618622779846, 0.8087438941001892, 0.811649739742279, 0.8253863453865051, 0.832650899887085, 0.8399154543876648, 0.8454629778862, 0.8465195894241333, 0.8569541573524475, 0.860652506351471, 0.8676528930664062, 0.8644828796386719, 0.8737286925315857, 0.8746532797813416, 0.8765024542808533, 0.8791441321372986, 0.8815215826034546, 0.8842953443527222, 0.8836349248886108, 0.8881257176399231, 0.8972394466400146, 0.8914278149604797, 0.89552241563797, 0.8963148593902588, 0.8980319499969482, 0.9062210917472839, 0.9034473896026611, 0.9101836085319519, 0.9075419306755066, 0.9108440279960632, 0.9149385690689087], "val_loss": [1.0289511680603027, 0.7238091741289411, 0.5771296194621495, 0.5305942807878766, 0.4910827704838344, 0.4551584209714617, 0.43716730390276226, 0.43116735560553415, 0.4160645433834621, 0.39209153822490145, 0.37958230291094097, 0.3672593491418021, 0.3539178456578936, 0.3456629684993199, 0.3348022699356079, 0.3349769285746983, 0.33279956238610403, 0.325021709714617, 0.32747141804013935, 0.33102820600782124, 0.33308558804648264, 0.3246689183371408, 0.3181898423603603, 0.3308010186467852, 0.3196206944329398, 0.3241924132619585, 0.31931404556546894, 0.3187698040689741, 0.32064515352249146, 0.31645076615469797, 0.3209869350705828, 0.3107002377510071, 0.312316289969853, 0.3171074220112392, 0.3197003092084612, 0.3172388587679182, 0.31582058327538626, 0.3223007151058742], "val_accuracy": [0.6166666746139526, 0.706333339214325, 0.746999979019165, 0.7649999856948853, 0.7876666784286499, 0.7960000038146973, 0.8090000152587891, 0.8146666884422302, 0.8196666836738586, 0.8339999914169312, 0.8413333296775818, 0.8479999899864197, 0.8536666631698608, 0.859666645526886, 0.8633333444595337, 0.8606666922569275, 0.8646666407585144, 0.8679999709129333, 0.8633333444595337, 0.8643333315849304, 0.8576666712760925, 0.8700000047683716, 0.8673333525657654, 0.8646666407585144, 0.8709999918937683, 0.8643333315849304, 0.8706666827201843, 0.8709999918937683, 0.8730000257492065, 0.8723333477973938, 0.8703333139419556, 0.8776666522026062, 0.8786666393280029, 0.8743333220481873, 0.871666669845581, 0.8776666522026062, 0.875333309173584, 0.878333330154419]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], [4, 6, 9, 3, 5, 3, 3, 4], [3, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 41, 10], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 7, 8, 4], [2, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8408571481704712, "mapping_values": [1, 4, 4, 2, 2, 1, 5, 5, 3, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), grad)), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.088747350310826, 1.184779891516192, 0.8442957506062033, 0.7296794286383268, 0.666378144244193, 0.6150325167023227, 0.5745575267640969, 0.5503585277421206, 0.5232371936274589, 0.49459817741824463, 0.4801898457630514, 0.45313520464820317, 0.4378673529399778, 0.4187289604326958, 0.4037223277137957, 0.38458420748975786, 0.37994679213436194, 0.3705032174503169, 0.35538989450748587, 0.33432553118293346, 0.3408873464453096, 0.33023695508565537, 0.3222533157158049, 0.3128832866447697, 0.3053145542073606, 0.3013546860898254, 0.29638642632824286, 0.2765806816934579, 0.27543930478887063, 0.273295147760496, 0.2838926475754409, 0.27738694667918506, 0.2576210518924709, 0.24279032026645986, 0.23384424949980304, 0.2296897328808449, 0.22855078280877444, 0.21388888975506712, 0.20699449675336035, 0.20491825000658137, 0.19557655536267168, 0.1973029013992285, 0.1880199185920319, 0.19790134168674192], "accuracy": [0.29282790422439575, 0.5889578461647034, 0.687887966632843, 0.7318716049194336, 0.743891179561615, 0.7692511081695557, 0.7847048044204712, 0.7905164361000061, 0.8084797263145447, 0.8136309385299683, 0.8267071843147278, 0.8323867321014404, 0.8399154543876648, 0.8459912538528442, 0.8488970994949341, 0.8574824929237366, 0.8619733452796936, 0.8671245574951172, 0.8634262084960938, 0.8729361891746521, 0.8713511824607849, 0.8776912093162537, 0.8802007436752319, 0.8841632604598999, 0.8844274282455444, 0.8856161832809448, 0.887597382068634, 0.8906353116035461, 0.8920882344245911, 0.8943336606025696, 0.8928807377815247, 0.89552241563797, 0.9022586345672607, 0.9076740145683289, 0.9089948534965515, 0.9085986018180847, 0.9089948534965515, 0.9179764986038208, 0.9215427041053772, 0.9247127175331116, 0.9245806336402893, 0.9214106202125549, 0.9261656403541565, 0.9203540086746216], "val_loss": [1.0289458887917655, 0.7234505755560738, 0.5784665175846645, 0.5310794285365513, 0.4912486587251936, 0.455457295690264, 0.4371486221040998, 0.43161084822246004, 0.41493890966687885, 0.38903368370873587, 0.37809284244264874, 0.36628248010362896, 0.35709090743746075, 0.34964856931141447, 0.33622075830187115, 0.3340340682438442, 0.33580091169902254, 0.3305561287062509, 0.3286153163228716, 0.3296707953725542, 0.3272696052278791, 0.3217664531299046, 0.3165505017553057, 0.328747068132673, 0.3188641922814505, 0.32411934648241314, 0.3188655376434326, 0.3207096883228847, 0.3231678605079651, 0.3156064748764038, 0.31465403522763935, 0.3094733016831534, 0.3096197928701128, 0.3144031507628305, 0.3180323668888637, 0.32105657884052824, 0.31717751707349506, 0.31918598072869436, 0.32165741068976267, 0.3161162223134722, 0.3228385789053781, 0.32090143646512714, 0.3336452330861773, 0.32714218752724783], "val_accuracy": [0.6166666746139526, 0.7066666483879089, 0.746666669845581, 0.7633333206176758, 0.7879999876022339, 0.7976666688919067, 0.8113333582878113, 0.8146666884422302, 0.8186666369438171, 0.8376666903495789, 0.8443333506584167, 0.8489999771118164, 0.8496666550636292, 0.8573333621025085, 0.8616666793823242, 0.8610000014305115, 0.8600000143051147, 0.859666645526886, 0.8690000176429749, 0.8653333187103271, 0.8643333315849304, 0.8693333268165588, 0.8663333058357239, 0.8633333444595337, 0.8700000047683716, 0.8643333315849304, 0.871999979019165, 0.8706666827201843, 0.8673333525657654, 0.8740000128746033, 0.8730000257492065, 0.8740000128746033, 0.8793333172798157, 0.8799999952316284, 0.8799999952316284, 0.8759999871253967, 0.8793333172798157, 0.8813333511352539, 0.8833333253860474, 0.8813333511352539, 0.8776666522026062, 0.8823333382606506, 0.8790000081062317, 0.8786666393280029]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0], [4, 6, 9, 3, 5, 3, 3, 9], [0, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [38, 79, 10], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 7, 8, 4], [2, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8308571577072144, "mapping_values": [1, 4, 4, 2, 2, 1, 10, 10, 6, 4, 2, 4, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)))), tf.math.square(tf.math.multiply(grad, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, beta))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.0879102480677627, 1.1762965097088525, 0.842391916427315, 0.7284561841007017, 0.6661859858289544, 0.613029568430896, 0.5760060203483218, 0.5525868767051964, 0.5239344039739257, 0.4926801373410329, 0.479871496335784, 0.4550431668719029, 0.4387015886845889, 0.4215572758546642, 0.40921968367310435, 0.38570630472444223, 0.3807711789180039, 0.3765813701495424, 0.36025787141455035, 0.34098809403262165, 0.3471423280261149, 0.3331434124094888, 0.32018901097335206, 0.3080544931155469, 0.3061628605569626, 0.3016174780835943, 0.29295628144205393, 0.281942880581934, 0.2791220897641621, 0.26959712305608724, 0.279531868693536, 0.268751086333818, 0.259066780434466, 0.24943789522078816, 0.23463959557552536, 0.24179978974349525, 0.2309066468379627, 0.22513853184354304, 0.21610961806434037, 0.21560232246225977, 0.21186855828221984, 0.2085319505789182, 0.1977857122579822, 0.19612353757317072, 0.19681963410359868, 0.18626206102600784, 0.17884042076722206], "accuracy": [0.2922995686531067, 0.5892220139503479, 0.6894729733467102, 0.7296261787414551, 0.7469290494918823, 0.7729493975639343, 0.7858935594558716, 0.7952714562416077, 0.8075551390647888, 0.8157442808151245, 0.826310932636261, 0.8310658931732178, 0.8416325449943542, 0.8504821062088013, 0.8450667262077332, 0.8565579056739807, 0.8590674996376038, 0.863029956817627, 0.8650112152099609, 0.8733324408531189, 0.8716153502464294, 0.874389111995697, 0.8815215826034546, 0.8816536664962769, 0.8864086866378784, 0.8833707571029663, 0.8899748921394348, 0.8926165699958801, 0.8918240666389465, 0.8960506916046143, 0.8926165699958801, 0.8972394466400146, 0.8996169567108154, 0.9068815112113953, 0.9091269373893738, 0.9056927561759949, 0.9097873568534851, 0.9170519113540649, 0.9142781496047974, 0.9148064851760864, 0.9165235757827759, 0.9208822846412659, 0.920089840888977, 0.9224672913551331, 0.9212785363197327, 0.926429808139801, 0.9301280975341797], "val_loss": [1.0213713645935059, 0.7149067435945783, 0.5746958085468837, 0.528765218598502, 0.4882434776851109, 0.45722038405282156, 0.4393470117024013, 0.42681701694216045, 0.41102672474724905, 0.38826831749507357, 0.37750887870788574, 0.3662385174206325, 0.3527273620877947, 0.3478990452630179, 0.33816730976104736, 0.33566692045756746, 0.3327972037451608, 0.331428587436676, 0.3262923189571926, 0.32769133363451275, 0.3266810008457729, 0.3213696650096348, 0.3181066768510001, 0.32373119252068655, 0.31406400884900776, 0.320081285067967, 0.32087003333227976, 0.31754864965166363, 0.3234366348811558, 0.31332695484161377, 0.3215506502560207, 0.317020731312888, 0.3131727235657828, 0.3159463746207101, 0.31578803062438965, 0.31915310450962614, 0.30992439814976286, 0.3140346663338797, 0.31895892109189716, 0.31418495518820627, 0.32734635898045134, 0.3159715362957546, 0.31865776436669485, 0.32702901533671785, 0.32015733207975117, 0.3310095156942095, 0.3266799194472177], "val_accuracy": [0.6209999918937683, 0.7116666436195374, 0.750333309173584, 0.7649999856948853, 0.7906666398048401, 0.7973333597183228, 0.8073333501815796, 0.8190000057220459, 0.8209999799728394, 0.8376666903495789, 0.8450000286102295, 0.8500000238418579, 0.8536666631698608, 0.8573333621025085, 0.8640000224113464, 0.8640000224113464, 0.8633333444595337, 0.8640000224113464, 0.8673333525657654, 0.8696666955947876, 0.862666666507721, 0.8713333606719971, 0.8693333268165588, 0.8656666874885559, 0.871999979019165, 0.8673333525657654, 0.8723333477973938, 0.8700000047683716, 0.8686666488647461, 0.8709999918937683, 0.871666669845581, 0.8773333430290222, 0.8766666650772095, 0.8766666650772095, 0.8773333430290222, 0.875333309173584, 0.8820000290870667, 0.8809999823570251, 0.8846666812896729, 0.8823333382606506, 0.875333309173584, 0.8863333463668823, 0.8840000033378601, 0.8796666860580444, 0.8809999823570251, 0.8813333511352539, 0.8836666941642761]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1], [4, 6, 9, 3, 2, 2, 3, 9], [3, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 80, 3], [0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 0, 1, 0], [3, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.7760000228881836, "mapping_values": [1, 4, 4, 2, 2, 1, 13, 13, 8, 5, 2, 6, 4, 3, 1, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad))), grad), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.subtract(sigma, sigma)), tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, sigma))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2333685413658375, 1.8554235665931393, 1.315614286635483, 1.1357600819307185, 1.0109279357352514, 0.9045582050424383, 0.8673873789211889, 0.8111576651223127, 0.7891734358483711, 0.7693927861585782, 0.7417322219937563, 0.7118880477374838, 0.738942160196686, 0.710775254842171, 0.6958481272953911, 0.6885374588595405, 0.6765294850321336, 0.65291710959418, 0.6491672842494092], "accuracy": [0.23774930834770203, 0.44023245573043823, 0.5597675442695618, 0.5912032723426819, 0.6399418711662292, 0.6688680648803711, 0.6870955228805542, 0.700700044631958, 0.7136441469192505, 0.7170783281326294, 0.7187954187393188, 0.7371549606323242, 0.7215691208839417, 0.7384757399559021, 0.7354378700256348, 0.741909921169281, 0.7474573850631714, 0.7536653280258179, 0.7592127919197083], "val_loss": [1.772163254874093, 1.1741920879908971, 0.8508439915520805, 0.7721253122602191, 0.6989059618541172, 0.6856901134763446, 0.6416797467640468, 0.6107459579195295, 0.572864328111921, 0.5567247867584229, 0.5428177118301392, 0.5484983239855085, 0.5639273609433856, 0.519159163747515, 0.5342755658285958, 0.5131172963551113, 0.5157469681331089, 0.5163206372942243, 0.5039185115269252], "val_accuracy": [0.49300000071525574, 0.6200000047683716, 0.6740000247955322, 0.6809999942779541, 0.7073333263397217, 0.6963333487510681, 0.7193333506584167, 0.737666666507721, 0.7570000290870667, 0.7536666393280029, 0.7730000019073486, 0.765666663646698, 0.746666669845581, 0.7870000004768372, 0.753333330154419, 0.7680000066757202, 0.7676666378974915, 0.7663333415985107, 0.7820000052452087]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1], [4, 6, 9, 5, 5, 3, 3, 9], [0, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [35, 80, 7], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 7, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.7748571634292603, "mapping_values": [1, 4, 4, 2, 2, 1, 11, 11, 8, 3, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))))))), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2333684739120536, 1.8554129408429627, 1.3155902535640458, 1.1365381157424992, 1.0126590808904434, 0.9027255296455226, 0.8666833618597001, 0.8110024997382164, 0.7880543584773853, 0.7686203967436918, 0.7422276025970362, 0.7116538143397291, 0.739998816979355, 0.713322269170197, 0.6891055565704807, 0.6906727541313353, 0.6758305815941212, 0.649014375614783, 0.6498704459200824], "accuracy": [0.23774930834770203, 0.44023245573043823, 0.5601637959480286, 0.5908070206642151, 0.6400739550590515, 0.6699247360229492, 0.6877558827400208, 0.700700044631958, 0.7144366502761841, 0.7147008180618286, 0.7202483415603638, 0.7407211661338806, 0.7209087014198303, 0.7360982894897461, 0.739928662776947, 0.7425703406333923, 0.750759482383728, 0.7536653280258179, 0.7564390301704407], "val_loss": [1.772162641797747, 1.1741937909807478, 0.8508428846086774, 0.7696815729141235, 0.6996727160045079, 0.6880099262510028, 0.6408652748380389, 0.6090770448957171, 0.5724037545067924, 0.5577789715358189, 0.5424257176262992, 0.5490302528653827, 0.5613603591918945, 0.5187856810433524, 0.5429173537663051, 0.5106031554085868, 0.51528000831604, 0.5155802283968244, 0.5058631726673671], "val_accuracy": [0.49300000071525574, 0.6200000047683716, 0.675000011920929, 0.6823333501815796, 0.7110000252723694, 0.6943333148956299, 0.718999981880188, 0.7390000224113464, 0.7616666555404663, 0.7516666650772095, 0.7736666798591614, 0.7646666765213013, 0.7526666522026062, 0.7873333096504211, 0.7436666488647461, 0.7710000276565552, 0.7680000066757202, 0.7736666798591614, 0.7799999713897705]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [1, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [0, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1], [4, 9, 6, 3, 4, 8, 8, 9, 3], [3, 3, 1, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 80, 3], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 7, 8, 4], [2, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 2, 11, 11, 7, 4, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.multiply(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(grad))), tf.math.add(beta, alpha)))), grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [124051.89466564867, 2288822.5113591338, 10500206.98481046, 29349032.098269712, 62541035.61907278, 114831748.12098798], "accuracy": [0.10394927859306335, 0.10038304328918457, 0.09998679161071777, 0.1018359512090683, 0.09985470771789551, 0.10091137140989304], "val_loss": [448100.39285714284, 3559539.9285714286, 11986143.714285715, 28379769.14285714, 55392288.0, 95675259.42857143], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [4, 6, 6, 9, 4, 4, 8, 9, 2], [3, 3, 3, 2, 1, 5, 3, 2, 1, 4, 4, 0], [85, 80, 3], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 2, 8, 4], [4, 2], [64], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [6, 3, 4, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 14, 14, 9, 5, 2, 4, 3, 2, 1, 0, 7, 4, 3, 2], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), grad), tf.math.pow(tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)), grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.pow(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), alpha), beta), tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [0, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [4, 9, 6, 3, 5, 3, 8, 9, 3], [3, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 80, 3], [1, 0, 1, 0, 0, 0, 1, 1], [1, 0, 1, 1, 0], [7, 1, 8, 4], [2, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 2, 11, 11, 7, 4, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(grad)), grad))))), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3021214060606408, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [1, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1], [4, 6, 9, 3, 5, 2, 3, 9, 2, 6, 1, 5, 8, 7, 8], [0, 3, 3, 1, 1, 5, 3, 2, 1, 4, 4, 0], [85, 80, 3], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 1, 8, 4], [2, 4], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 23, 23, 15, 8, 3, 5, 4, 2, 2, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)))), grad))))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.subtract(tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.add(grad, grad))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, beta))), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.303205524311562, 2.3042363640245207, 2.3061383081354783, 2.3066196739870435, 2.3067397045941163, 2.30666299884062, 2.3108141551384946, 2.309148631500861, 2.3088494568390066], "accuracy": [0.08968432247638702, 0.09681680053472519, 0.10038304328918457, 0.09628847241401672, 0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09589222073554993, 0.10038304328918457], "val_loss": [1.9735516820635115, 1.974771159035819, 1.9759067126682825, 1.9777191707066126, 1.979726927621024, 1.9759890692574638, 1.9755100522722517, 1.9782517978123255, 1.9824201720101493], "val_accuracy": [0.10199999809265137, 0.09566666930913925, 0.10066666454076767, 0.10366666316986084, 0.10233332961797714, 0.10233332961797714, 0.10199999809265137, 0.10233332961797714, 0.0949999988079071]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 6, 8, 3, 5, 4, 8, 9], [2, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 80, 3], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 7, 8, 4], [2, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 18, 11, 7, 4, 11, 11, 7, 4, 0, 5, 4, 2, 2, 0, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.multiply(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))))))), tf.math.pow(tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, tf.math.square(tf.math.pow(tf.math.add(beta, tf.math.sqrt(grad)), tf.math.add(beta, grad))))))), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, beta))), tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0], [0, 8, 8, 3, 5, 5, 8, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 79, 10], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 7, 8, 4], [2, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [0, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 18, 11, 7, 4, 8, 8, 6, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))))))), tf.math.pow(tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.square(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3021214060606408, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1], [4, 6, 9, 3, 0, 3, 6, 9, 3], [0, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [16, 80, 82], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 7, 8, 4], [3, 1], [64], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 14, 14, 9, 5, 3, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.negative(tf.math.multiply(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))), grad))))))), tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [11.408878616637336, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.034605734050273895, 0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [670937.4642857143, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [2, 2, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [14, 32, 5, 49, 25], [1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1], [4, 6, 6, 3, 5, 3, 3, 9, 0, 8], [3, 3, 3, 2, 1, 5, 3, 2, 1, 4, 4, 0], [85, 79, 10], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 7, 8, 4], [2, 1], [64], [0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 0, 16, 16, 10, 6, 1, 5, 4, 2, 2, 0, 4, 3, 1, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(grad), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.multiply(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad))), beta))))), tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.negative(tf.math.sqrt(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, beta))), tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.301759410575239, 2.3054109926567636, 2.310934692530694, 2.325312509292373, 2.3766093080258877, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09338264167308807, 0.08360850811004639, 0.07568352669477463, 0.07687227427959442, 0.08532558381557465, 0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9716063226972307, 1.9751601900373186, 1.9827831132071358, 1.998163836342948, 2.0858543940952847, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.03566666692495346, 0.022333333268761635, 0.05400000140070915, 0.10000000149011612, 0.10066666454076767, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [68, 32, 41, 49, 25], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0], [4, 6, 9, 3, 2, 2, 3, 9, 1], [3, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0], [85, 81, 3], [0, 0, 1, 0, 0, 0, 1, 1], [1, 0, 1, 1, 0], [7, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 18, 11, 7, 4, 11, 11, 6, 5, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.pow(tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad))))))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [4, 6, 6, 3, 5, 3, 8, 9], [3, 3, 3, 2, 1, 5, 3, 2, 1, 4, 4, 0], [85, 79, 10], [0, 0, 1, 0, 0, 0, 1, 1], [1, 0, 1, 1, 0], [7, 7, 8, 4], [2, 1], [64], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [11.408849737600423, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.034605734050273895, 0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [670932.875, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0], [2, 6, 9, 3, 2, 2, 9, 2], [3, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 80, 3], [0, 0, 1, 0, 0, 0, 1, 1], [1, 0, 1, 1, 0], [7, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 11, 11, 7, 4, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), tf.math.add(beta, grad))))))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07792893797159195, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [5, 32, 5, 49, 25], [1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0], [4, 6, 9, 3, 5, 2, 3, 9], [0, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 79, 10], [0, 0, 1, 0, 0, 0, 1, 1], [1, 0, 1, 1, 0], [7, 7, 8, 4], [2, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 0, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07832518965005875, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1], [4, 6, 9, 3, 2, 2, 3, 9], [0, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 80, 3], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [2, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 5, 5, 3, 2, 2, 4, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, sigma))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [2, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [8, 32, 5, 49, 25], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [4, 6, 9, 5, 5, 2, 3, 9], [0, 0, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 80, 41], [0, 0, 1, 0, 0, 0, 1, 1], [1, 0, 1, 1, 0, 0], [7, 1, 8, 4], [2, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 4, 11, 11, 7, 4, 3, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.square(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.square(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.31165267772143, 2.396376802086468, 2.8290567995141194, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07436270266771317, 0.019680358469486237, 0.009377889335155487, 0.07211729139089584, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.007322379520961, 2.154369354248047, 3.5344438552856445, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.004666666500270367, 0.004999999888241291, 0.013333333656191826, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [6, 6, 9, 3, 2, 1, 3, 9, 4, 3, 4, 7, 7, 8, 2, 7], [0, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 80, 3, 14], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.04171428456902504, "mapping_values": [1, 4, 4, 2, 2, 1, 28, 28, 16, 12, 4, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad))), tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(grad, tf.math.add(beta, alpha)), tf.math.add(beta, grad))), tf.math.add(beta, grad))), tf.math.add(tf.math.sqrt(tf.math.add(beta, beta)), tf.math.add(beta, alpha))))))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.301547493964233, 2.3029235105598924, 2.3017246082017704, 2.301241938905032, 2.3023259722561398, 2.3017161175276013], "accuracy": [0.09311848133802414, 0.0882314071059227, 0.08849557489156723, 0.09628847241401672, 0.09206181764602661, 0.09694888442754745], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}]