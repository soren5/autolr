[{"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 2, 4, 0, 5, 5, 8, 4, 4, 6, 3, 6], [3, 0, 1, 0, 2, 1, 2, 2, 0], [31, 32, 29, 49, 25], [1, 0, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1], [3, 7, 6, 5, 5, 7, 3, 9], [2, 3, 0, 4, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [1, 3, 9, 1, 2], [3, 0, 2], [23, 52, 13]], "fitness": -0.7457143068313599, "mapping_values": [1, 13, 13, 8, 5, 2, 8, 8, 4, 4, 1, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.square(alpha)))), tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), grad)))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.square(grad))), tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [2.2838633565886335, 2.12694881797199, 1.6076283376482359, 1.2903691691304273, 0.9681265539638654, 0.9075416855178473, 0.8450278891013079, 0.8313687490654849, 0.8041106272430278, 0.7899130924723293, 0.7303045482022053, 0.7096075914507891, 0.6892067104865374, 0.6561267081268742, 0.6323570733482277, 0.6152731800721762, 0.5914998712745624, 0.5766624154636432, 0.5608998693495284, 0.562681603732441, 0.5490213179348986, 0.5328427401665667, 0.5141645145139139, 0.507527085736821, 0.5107579837700694, 0.5045053620600445, 0.49425113117296493, 0.4989343792251261, 0.48548189546012954, 0.46645791231286904, 0.46828982095046995, 0.44493904435450393, 0.44971214992778646, 0.4641254414160805, 0.43716087830285544, 0.44005516327729616, 0.43389729533716986], "accuracy": [0.1414608359336853, 0.3477744162082672, 0.4613657295703888, 0.5601637959480286, 0.6339981555938721, 0.6630563735961914, 0.6737551093101501, 0.6888125538825989, 0.6866992712020874, 0.6952846646308899, 0.7239466309547424, 0.7360982894897461, 0.7351737022399902, 0.750231146812439, 0.7568352818489075, 0.7631752490997314, 0.7725531458854675, 0.7774402499198914, 0.7869502305984497, 0.7866860628128052, 0.7996301651000977, 0.802271842956543, 0.802271842956543, 0.8095363974571228, 0.8076872229576111, 0.8108572363853455, 0.8141592741012573, 0.8169330358505249, 0.8206313848495483, 0.8210275769233704, 0.817989706993103, 0.8322546482086182, 0.8302733898162842, 0.8234050869941711, 0.8304054737091064, 0.8345000743865967, 0.837537944316864], "val_loss": [1.903024128505162, 1.5682791301182337, 0.8559836489813668, 0.7398779732840401, 0.7016843897955758, 0.6322603055409023, 0.6026883976800101, 0.5798789092472622, 0.5839850902557373, 0.5627424376351493, 0.5563885654721942, 0.5225242887224469, 0.5065958329609462, 0.4928081887108939, 0.46984044143131803, 0.45664152077266146, 0.45679780415126253, 0.45187572070530485, 0.4387075390134539, 0.44571966784340994, 0.4333978721073696, 0.4287297470229013, 0.42184649194989887, 0.41568907669612337, 0.4146197863987514, 0.4159276485443115, 0.41384670564106535, 0.40851747138159616, 0.4083301510129656, 0.39931605543409077, 0.3958710517202105, 0.38718730211257935, 0.38766928230013165, 0.38626646995544434, 0.38521452460970196, 0.3833213193075998, 0.3803705317633493], "val_accuracy": [0.4036666750907898, 0.4946666657924652, 0.6710000038146973, 0.7116666436195374, 0.6949999928474426, 0.7243333458900452, 0.7329999804496765, 0.7383333444595337, 0.7540000081062317, 0.7606666684150696, 0.7516666650772095, 0.7739999890327454, 0.7730000019073486, 0.7816666960716248, 0.7873333096504211, 0.8013333082199097, 0.8100000023841858, 0.8113333582878113, 0.812333345413208, 0.8076666593551636, 0.8180000185966492, 0.8140000104904175, 0.8240000009536743, 0.8243333101272583, 0.8323333263397217, 0.8246666789054871, 0.82833331823349, 0.8326666951179504, 0.8293333053588867, 0.8416666388511658, 0.8429999947547913, 0.847000002861023, 0.843999981880188, 0.8396666646003723, 0.8413333296775818, 0.843666672706604, 0.8460000157356262]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 2, 6, 2, 4, 0, 5, 9, 8, 3, 4, 6, 3, 6], [3, 0, 1, 0, 3, 1, 2, 0, 0], [37, 32, 29, 49, 25], [1, 1, 1, 1, 1, 0, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1], [3, 9, 2, 5, 5, 7, 3, 9], [2, 3, 3, 4, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [1, 3, 9, 1, 2], [3, 0, 1], [23, 52, 13]], "fitness": -0.7454285621643066, "mapping_values": [1, 1, 1, 0, 1, 0, 6, 6, 4, 2, 1, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), alpha))", "other_info": {"loss": [2.2984366776558702, 2.28926725967638, 2.2789751670584466, 2.2687611703024944, 2.257306012558096, 2.247622753887003, 2.234308271738107, 2.221358267764342, 2.206976047769561, 2.190649134088359, 2.1720652773301237, 2.1498348287477342, 2.1274676371748105, 2.098897527505252, 2.067187576246079, 2.0351689911128004, 2.0004560437421, 1.9628403795047318, 1.9230940697955543, 1.878845395066908, 1.8264182875295278, 1.7763584667681198, 1.7328132828543796, 1.682323364171653, 1.6284539149563626, 1.5856560172972947, 1.544045172520538, 1.4977473904034402, 1.451633335750148, 1.4167344734543081, 1.3909910083242207, 1.3511068126418728, 1.323114530175133, 1.2984478020192516, 1.2721018639411972, 1.2519991866759086, 1.2213059912551711, 1.2072954824209812, 1.1920921588696667, 1.1708392703128514, 1.1555476263765772, 1.1440146765641532, 1.1269878463785425, 1.102655836005709, 1.0827831953051477, 1.079935392494514, 1.0718653314479858, 1.0632094144663713, 1.0512982423767485, 1.0324113469444418, 1.0202938409891458, 1.01133162972792, 1.0098698082743005, 0.9998291433684153, 0.9923563538730074, 0.981386143313171, 0.9698330180173569, 0.9619300046522604, 0.9425069961282068, 0.9487279108990578, 0.9463361525311997, 0.9399158672382015, 0.9287787542965402, 0.9181332392715239, 0.9110401269782095, 0.9095611352851882, 0.9104261862493195, 0.8988403402236411, 0.9030739327447604, 0.8922402403452582, 0.8830355795587704, 0.8868099276053671, 0.8771702357491702, 0.8620821942963133, 0.8629441936931527, 0.866933257462342, 0.861629966928376, 0.8540223054740376, 0.8504133647569276, 0.8426458220030921, 0.8462283165227185, 0.8372895035761349, 0.8394708432273905, 0.8432620581917996, 0.8279921346415524, 0.8324246566372147, 0.8192928973017053], "accuracy": [0.09972262382507324, 0.12336547672748566, 0.15493330359458923, 0.1784440577030182, 0.20684190094470978, 0.22823932766914368, 0.25822216272354126, 0.27539294958114624, 0.3008849620819092, 0.3085457682609558, 0.3346982002258301, 0.3520010709762573, 0.35886937379837036, 0.37485140562057495, 0.3855501115322113, 0.40470215678215027, 0.40747588872909546, 0.4235900044441223, 0.42609959840774536, 0.439439982175827, 0.4519878625869751, 0.4682340621948242, 0.48091402649879456, 0.4831594228744507, 0.4877823293209076, 0.497820645570755, 0.5008585453033447, 0.5193501710891724, 0.5325584411621094, 0.5352001190185547, 0.5448421835899353, 0.553031325340271, 0.5546162724494934, 0.557390034198761, 0.5643904209136963, 0.5795799493789673, 0.5845991373062134, 0.5890899300575256, 0.5844670534133911, 0.5955620408058167, 0.5968828201293945, 0.6085061430931091, 0.6042794585227966, 0.6174877882003784, 0.6174877882003784, 0.6231673359870911, 0.6258090138435364, 0.6203936338424683, 0.6269977688789368, 0.6349227428436279, 0.6339981555938721, 0.6416589617729187, 0.6431118845939636, 0.6450931429862976, 0.6535464525222778, 0.6481310129165649, 0.6563201546669006, 0.650640606880188, 0.6668868064880371, 0.659490168094635, 0.6631884574890137, 0.6623960137367249, 0.6662263870239258, 0.6674151420593262, 0.6680755615234375, 0.672698438167572, 0.6741513609886169, 0.6730946898460388, 0.6762647032737732, 0.6860388517379761, 0.6843217611312866, 0.6812838315963745, 0.6859067678451538, 0.6901333928108215, 0.6890767216682434, 0.6819442510604858, 0.6863030195236206, 0.6931713223457336, 0.6940959095954895, 0.694360077381134, 0.698718786239624, 0.6923788189888, 0.6909258961677551, 0.6882842183113098, 0.7022850513458252, 0.6979262828826904, 0.7038700580596924], "val_loss": [1.9619797297886439, 1.9529832431248255, 1.9439619609287806, 1.9344807352338518, 1.9243738310677665, 1.9135820525033134, 1.9015151432582311, 1.888328960963658, 1.8736609050205775, 1.8570455823625838, 1.8383712087358748, 1.8172525678362166, 1.793576444898333, 1.7668523107256209, 1.7370001929146903, 1.7037911074502128, 1.6676923206874303, 1.6281983852386475, 1.5860963889530726, 1.5409602437700545, 1.4934168883732386, 1.4444631508418493, 1.3948479720524378, 1.3456953593662806, 1.2972664151872908, 1.2500642367771693, 1.2054663045065743, 1.163562536239624, 1.1236421380724226, 1.0867268698556083, 1.052746091570173, 1.021388326372419, 0.9928484984806606, 0.966954265322004, 0.9431213651384626, 0.9213095733097622, 0.9002740383148193, 0.8817775930677142, 0.8647430794579642, 0.8493560552597046, 0.8346589633396694, 0.8208879573004586, 0.8081534079142979, 0.7967662300382342, 0.7850143909454346, 0.7745020730154855, 0.7645231485366821, 0.755260705947876, 0.747213329587664, 0.7391329492841449, 0.7311435086386544, 0.7236517497471401, 0.7169404711042132, 0.710996321269444, 0.7047115394047329, 0.6990037134715489, 0.6926567384174892, 0.6874973092760358, 0.6818251950400216, 0.6768318925585065, 0.6728355033057076, 0.6691090038844517, 0.6637012277330671, 0.6599255800247192, 0.65565139906747, 0.6521262952259609, 0.6491034371512276, 0.6445713043212891, 0.6420246703284127, 0.6373486689158848, 0.6350904703140259, 0.6311175652912685, 0.6285554000309536, 0.6255424192973545, 0.6229502814156669, 0.6201507874897548, 0.6172159399305072, 0.6142458234514508, 0.6119392429079328, 0.6090224129813058, 0.6067140442984444, 0.6040318523134504, 0.6020837000438145, 0.5999058655330113, 0.5976804324558803, 0.5960210902350289, 0.5939533029283796], "val_accuracy": [0.10733333230018616, 0.19966666400432587, 0.28166666626930237, 0.33633333444595337, 0.37400001287460327, 0.39766666293144226, 0.4103333353996277, 0.42399999499320984, 0.4410000145435333, 0.44999998807907104, 0.46033334732055664, 0.47566667199134827, 0.4856666624546051, 0.4950000047683716, 0.5099999904632568, 0.5249999761581421, 0.5350000262260437, 0.5429999828338623, 0.5513333082199097, 0.5553333163261414, 0.562333345413208, 0.5693333148956299, 0.5766666531562805, 0.5860000252723694, 0.5933333039283752, 0.6029999852180481, 0.6110000014305115, 0.6263333559036255, 0.6353333592414856, 0.6413333415985107, 0.6516666412353516, 0.659333348274231, 0.668666660785675, 0.6690000295639038, 0.6726666688919067, 0.6746666431427002, 0.6769999861717224, 0.6806666851043701, 0.6869999766349792, 0.6886666417121887, 0.6919999718666077, 0.6936666369438171, 0.6990000009536743, 0.699999988079071, 0.6993333101272583, 0.7016666531562805, 0.7046666741371155, 0.7066666483879089, 0.7073333263397217, 0.7096666693687439, 0.7099999785423279, 0.7120000123977661, 0.7153333425521851, 0.7160000205039978, 0.7203333377838135, 0.7213333249092102, 0.7233333587646484, 0.7266666889190674, 0.7266666889190674, 0.7263333201408386, 0.7276666760444641, 0.7276666760444641, 0.731333315372467, 0.7300000190734863, 0.7316666841506958, 0.7333333492279053, 0.734666645526886, 0.737333357334137, 0.7379999756813049, 0.7390000224113464, 0.7363333106040955, 0.7396666407585144, 0.7400000095367432, 0.7413333058357239, 0.7419999837875366, 0.7423333525657654, 0.7450000047683716, 0.7473333477973938, 0.7463333606719971, 0.749666690826416, 0.7486666440963745, 0.7523333430290222, 0.749666690826416, 0.750333309173584, 0.7513333559036255, 0.7513333559036255, 0.7509999871253967]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 2, 4, 0, 5, 6, 8, 4, 4, 6, 3, 6], [3, 0, 2, 0, 3, 1, 2, 0, 0], [31, 32, 29, 49, 25], [1, 1, 1, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1], [3, 7, 6, 5, 5, 7, 3, 9], [2, 3, 3, 4, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [1, 3, 9, 1, 2], [3, 0, 2], [23, 52, 13]], "fitness": -0.347428560256958, "mapping_values": [1, 20, 20, 12, 8, 3, 8, 8, 4, 4, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.square(grad)))), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.sqrt(tf.math.add(alpha, tf.math.pow(alpha, tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))))))))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))), tf.math.add(beta, grad)), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [2.2920917139833064, 2.252886333296784, 2.1183465598769837, 1.7901442416859592, 1.6344121728732586, 7.463224303374406, NaN, NaN, NaN], "accuracy": [0.10791176557540894, 0.18518029153347015, 0.3027341067790985, 0.4081363081932068, 0.468630313873291, 0.3073570132255554, 0.16299036145210266, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9328524044581823, 1.8520509856087821, 1.644557067326137, 1.1532318592071533, 1.2024870259421212, 18.442826407296316, NaN, NaN, NaN], "val_accuracy": [0.18733333051204681, 0.3919999897480011, 0.4580000042915344, 0.5809999704360962, 0.5726666450500488, 0.3033333420753479, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [2, 0, 6, 6, 2, 2, 0, 5, 3, 8, 4, 4, 6, 3, 6], [3, 0, 2, 2, 3, 1, 2, 0, 0], [31, 32, 29, 49, 25], [1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [3, 7, 6, 0, 5, 7, 3, 9, 6], [2, 3, 1, 4, 1, 0], [98, 45], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [1, 3, 9, 1, 2], [3, 0, 2], [23, 52, 13]], "fitness": -0.10171428322792053, "mapping_values": [1, 3, 3, 1, 2, 1, 15, 15, 9, 6, 2, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.add(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha)))))))))), tf.math.add(beta, tf.math.divide_no_nan(grad, alpha))), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [27898456.53875485, 155207275.96143177, 165206252.67784968, 164244736.8791441, 167396645.6785101, 172676322.37749305, 169808458.2517501, 173608082.59305245], "accuracy": [0.09192973375320435, 0.11028926074504852, 0.1154404953122139, 0.11596883088350296, 0.11596883088350296, 0.11689341068267822, 0.11834631860256195, 0.1224408894777298], "val_loss": [63884018.28571428, 120704016.0, 120759901.71428572, 120759942.85714285, 120759942.85714285, 120759942.85714285, 120759942.85714285, 120759942.85714285], "val_accuracy": [0.050999999046325684, 0.10633333027362823, 0.1066666692495346, 0.1066666692495346, 0.1066666692495346, 0.1066666692495346, 0.1066666692495346, 0.1066666692495346]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 8, 8, 0, 6, 4, 2, 5, 8, 3, 9, 4, 6, 2, 6, 4, 2], [1, 0, 2, 0, 3, 1, 2, 0, 0], [31, 32, 65, 66, 75], [1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [3, 7, 6, 0, 5, 7, 3, 9], [4, 3, 1, 4, 1], [98], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 0, 0, 1, 1, 1], [1, 3, 5, 1, 2], [2, 0, 2], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 5, 3, 1, 11, 11, 6, 5, 0, 1, 1, 0, 1, 0, 6, 3, 3, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.sqrt(tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, grad), grad)))), alpha), grad), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.square(beta), tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 2, 2, 4, 0, 5, 6, 8, 4, 4, 6, 3, 6], [3, 0, 2, 0, 3, 1, 2, 0, 0], [31, 32, 65, 34], [0, 1, 1, 1, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 1], [5, 7, 6, 0, 5, 7, 3, 9], [2, 3, 3, 4, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [2, 3, 9, 1, 2], [3, 1, 0], [23, 38, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 12, 7, 5, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(alpha, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [3, 8, 8, 9, 2, 4, 0, 5, 2, 8, 9, 3, 8, 6, 6, 4, 2, 3, 5], [2, 1, 2, 0, 2, 1, 0, 0, 0, 2, 3, 1, 3, 1], [7, 32, 65, 34], [0, 1, 1, 1, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 1], [3, 7, 6, 5, 5, 7, 3, 9], [3, 3, 3, 4, 1], [98], [1, 1, 1, 0, 1], [0, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 0, 1, 1], [2, 3, 9, 1, 2], [3, 1, 0], [23, 38, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 13, 4, 3, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.pow(tf.math.negative(tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))))), tf.math.multiply(tf.math.add(alpha, alpha), tf.math.sqrt(tf.math.add(alpha, grad)))), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 2, 4, 0, 5, 6, 8, 4, 4, 6, 3, 6], [1, 0, 2, 2, 3, 1, 2, 0, 0], [31, 32, 29, 49, 25], [1, 1, 1, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1], [3, 7, 6, 0, 5, 7, 3, 9, 6], [2, 3, 1, 4, 1, 0], [98, 6], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 0, 1, 1], [1, 3, 9, 1, 2], [3, 0, 2], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 11, 6, 5, 1, 8, 8, 4, 4, 0, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(grad, grad)))))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))), tf.math.add(beta, alpha)), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [61.3869910493991, 746.1194513391715, 3099.784217867727, 8316.424571349558, 17240.999868175026, 31935.258828403614], "accuracy": [0.09879804402589798, 0.09893012791872025, 0.09734513610601425, 0.10170386731624603, 0.1022322028875351, 0.09787346422672272], "val_loss": [172.98366001674108, 1084.717808314732, 3440.1256975446427, 7943.744419642857, 15295.45424107143, 26194.129464285714], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 8, 8, 6, 2, 4, 2, 5, 2, 8, 9, 4, 2, 5, 6, 4, 2], [2, 0, 2, 0, 3, 1, 2, 0, 0], [31, 32, 65, 66, 11], [1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0], [3, 7, 6, 0, 5, 7, 3, 9, 6, 3, 9, 9], [4, 3, 1, 4, 1], [98, 66, 12], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 0, 0, 1, 1, 1], [0, 3, 9, 1, 2], [2, 0, 2], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 22, 22, 14, 8, 4, 17, 17, 12, 5, 3, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))))))), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), grad))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))), tf.math.add(beta, grad)), tf.math.add(tf.math.add(beta, alpha), tf.math.multiply(grad, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(tf.math.multiply(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32), alpha), tf.math.add(beta, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [5, 9, 8, 6, 2, 4, 0, 5, 6, 8, 4, 4, 6, 3, 6, 4, 2], [3, 0, 2, 0, 3, 1, 2, 0, 0], [31, 32, 65, 66], [1, 1, 1, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1], [3, 7, 6, 5, 5, 7, 3, 9], [3, 3, 3, 4, 1], [98], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 0, 1, 0, 1, 1], [1, 3, 9, 1, 2], [3, 2, 2], [89, 9, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 2, 0, 1, 8, 8, 4, 4, 0, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))), tf.math.add(beta, grad)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(sigma, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.3061156884129055, 4.279281540254576, 14.638491308463957, 39.779382741714215, 105.34854254762274, 256.8439047847048, 594.9523438934983], "accuracy": [0.10170386731624603, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.03301089150565, 7.475086212158203, 23.15635081699916, 58.55423191615513, 147.67880249023438, 353.1853463309152, 798.339093889509], "val_accuracy": [0.10066666454076767, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 2, 5, 0, 0, 8, 8, 4, 4, 6, 3, 6], [3, 0, 0, 1, 3, 1, 2, 0, 0], [31, 32, 29, 49, 25], [1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0, 0, 1, 1, 1], [3, 7, 6, 0, 0, 7, 3, 9], [4, 1, 3, 3, 1], [98], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 0, 0, 1, 0, 1, 1], [1, 4, 9, 1, 2], [3, 0, 2, 1], [83, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 5, 4, 0, 1, 1, 0, 1, 0, 9, 5, 4, 2], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha)))))), grad)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.pow(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1], [2, 2, 8, 4, 2, 4, 8, 1, 6, 2, 4, 4, 6, 3, 6, 4, 2], [0, 0, 2, 0, 3, 1, 2, 0, 0, 0, 3], [31, 13, 7, 66, 94, 73], [1, 1, 1, 1, 0, 0, 0, 1], [1, 1, 0, 1, 0, 1, 1, 1], [3, 9, 6, 5, 5, 7, 3, 9], [4, 3, 3, 4, 1], [98], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [2], [64], [0, 1, 0, 1, 1, 1], [1, 3, 9, 1, 2], [3, 0, 1], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 23, 23, 12, 11, 6, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 2, 3, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)))))), tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.math.pow(alpha, tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))))), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [3, 8, 8, 9, 2, 4, 0, 5, 6, 3, 4, 1, 0, 6, 6, 4, 2, 3, 5], [2, 1, 2, 0, 3, 1, 0, 0, 0, 2, 3, 1, 3, 1], [31, 97, 65, 34], [0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1], [3, 7, 6, 5, 5, 7, 3, 9], [3, 3, 3, 4, 1], [98], [0, 1, 1, 0, 1], [0, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [2, 3, 9, 1, 2], [3, 1, 0], [23, 38, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 11, 8, 3, 1, 13, 13, 8, 5, 1, 3, 1, 1, 0, 0, 5, 2, 3, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))))), tf.math.add(grad, tf.math.pow(tf.math.negative(tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))), tf.math.add(beta, grad)), tf.math.square(tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(alpha, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09470347315073013, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [3, 8, 8, 6, 2, 4, 0, 1, 6, 6, 4, 4, 6, 3, 6, 4, 2], [2, 0, 2, 0, 3, 1, 1, 0, 0, 3, 0], [31, 95, 67, 66, 90], [1, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 1, 1, 1], [3, 7, 0, 0, 0, 7, 3, 9], [4, 0, 3, 0, 1], [98], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [1, 4, 9, 1, 2], [3, 0, 2], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 24, 24, 13, 11, 5, 7, 7, 4, 3, 1, 1, 1, 0, 1, 0, 5, 2, 3, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, grad)))), tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), alpha))), tf.math.add(alpha, tf.math.pow(tf.math.pow(tf.math.add(alpha, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.negative(grad)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.pow(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09668471664190292, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 2, 4, 0, 1, 6, 8, 4, 4, 6, 3, 6], [0, 0, 2, 0, 0, 1, 0, 0, 0, 2], [65, 61, 29, 49, 25, 42, 41], [1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [4, 7, 6, 5, 5, 7, 3, 9], [2, 0, 3, 4, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 0, 1, 1], [1, 3, 9, 1, 2], [3, 0, 0], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 23, 23, 13, 10, 7, 11, 11, 6, 5, 1, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.subtract(grad, tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))))), tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(alpha, tf.math.add(alpha, tf.math.pow(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))))))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), grad)))))))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, tf.math.square(tf.math.add(beta, beta)))), tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [61.3869910493991, 746.1194513391715, 3099.784217867727, 8316.424571349558, 17240.999868175026, 31935.258828403614], "accuracy": [0.09879804402589798, 0.09893012791872025, 0.09734513610601425, 0.10170386731624603, 0.1022322028875351, 0.09787346422672272], "val_loss": [172.98366001674108, 1084.717808314732, 3440.1256975446427, 7943.744419642857, 15295.45424107143, 26194.129464285714], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 2, 2, 0, 5, 1, 3, 4, 4, 6, 3, 6, 8, 5], [3, 0, 0, 0, 3, 1, 2, 0, 0, 2, 1, 0], [65, 32, 65, 66, 31, 95], [1, 1, 1, 1, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 1], [3, 7, 6, 5, 5, 7, 3, 9], [4, 3, 3, 4, 1], [98], [0, 1, 1, 0, 1], [0, 0, 1], [3, 2, 8, 4], [6], [64], [0, 0, 0, 1, 1, 1], [0, 3, 9, 1, 2], [1, 0, 2], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 29, 29, 17, 12, 6, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 4, 3, 1, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.subtract(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32), tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))))), tf.math.multiply(tf.math.add(alpha, tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.add(alpha, tf.math.pow(alpha, tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.multiply(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(grad, tf.math.sqrt(tf.math.square(alpha))))))))), tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1], [8, 2, 8, 8, 2, 4, 0, 5, 6, 8, 4, 5, 6, 3, 6], [1, 0, 2, 0, 3, 1, 2, 0, 0], [31, 32, 29, 49, 25], [1, 1, 1, 1, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 1], [3, 7, 6, 5, 5, 7, 3, 9], [2, 3, 3, 4, 1], [98], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [1, 1, 0, 1, 1, 1], [1, 3, 9, 1, 2], [3, 2, 2], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07872143387794495, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [3, 8, 8, 9, 2, 4, 0, 5, 6, 8, 4, 3, 5, 6, 6, 4, 2, 3, 5], [3, 0, 2, 0, 0, 1, 2, 0, 0], [31, 75, 29, 49, 25], [0, 1, 1, 1, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 1], [3, 7, 6, 5, 5, 7, 3, 9], [3, 3, 3, 4, 1], [98], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [1, 4, 9, 1, 2], [3, 2, 2], [37, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 4, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 2, 3, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, grad)))), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.pow(beta, beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [3, 8, 8, 9, 2, 4, 0, 5, 6, 8, 4, 3, 3, 6, 6, 4, 2, 3, 5], [3, 0, 2, 0, 3, 1, 2, 0, 0], [31, 32, 65, 34], [1, 1, 1, 1, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 1], [3, 7, 6, 5, 5, 7, 3, 9], [3, 3, 3, 4, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [1, 0, 0, 1, 1, 1], [2, 3, 9, 1, 2], [2, 2, 2], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 4, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, grad)))), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07832518965005875, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [6, 8, 8, 6, 2, 4, 0, 1, 6, 8, 4, 4, 6, 3, 6, 4, 2], [2, 0, 1, 0, 3, 1, 2, 0, 0], [31, 32, 29, 49, 25], [1, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 1, 1], [3, 9, 6, 5, 5, 7, 3, 9], [2, 3, 3, 4, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [2], [64], [0, 1, 0, 1, 1, 1], [1, 3, 9, 1, 2], [1, 0, 2], [23, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 7, 7, 4, 3, 1, 6, 6, 4, 2, 1, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(grad), tf.math.add(alpha, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), alpha))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(alpha, tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [2.3024246795948047, 2.3032025130449143, 2.3024615021492623, 2.302450338799987, 2.3014177010752475, 2.3026403250270406], "accuracy": [0.08994849026203156, 0.08849557489156723, 0.0952318087220192, 0.08677849918603897, 0.09192973375320435, 0.09232597798109055], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}]