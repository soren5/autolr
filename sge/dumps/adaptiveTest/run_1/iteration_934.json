[{"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [1, 2, 1, 2, 6, 2, 2, 1, 2, 2, 6, 3, 8, 2, 0, 0, 2, 2, 2, 6, 1, 3, 9, 0, 1, 2, 0, 3, 9, 4, 8, 3, 0, 0, 8, 3, 7, 5, 6, 0, 0, 1, 6, 0, 2], [4, 3, 3, 1, 0, 3, 3, 3, 3, 3, 2, 3, 3, 3, 0, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 0, 4, 2, 1, 4, 4], [25, 9, 52, 66, 30, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8351428508758545, "mapping_values": [1, 4, 4, 2, 2, 1, 72, 72, 44, 28, 6, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(grad, tf.math.add(beta, grad)), tf.math.subtract(grad, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.negative(grad)))))))), tf.math.add(grad, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(beta, tf.math.add(beta, grad)), tf.math.multiply(tf.math.add(beta, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), tf.math.negative(grad)))))))), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.subtract(tf.math.add(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.negative(beta)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)))))), tf.math.pow(grad, tf.math.sqrt(tf.math.add(beta, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.multiply(tf.math.negative(tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, grad)))))), tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(alpha, alpha))), tf.math.add(beta, tf.math.negative(tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), grad)))))))))), alpha)), tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.928101973085828, 1.2274638108290135, 0.8875081199365852, 0.8073327325086678, 0.7573440546656266, 0.7147159946435604, 0.6671918214918395, 0.6695621185897285, 0.6540727554736215, 0.6182071736712009, 0.6062885545673403, 0.5820097338175493, 0.5939780071883579, 0.5647177823766694, 0.5356980881765298, 0.5415987395465555, 0.520748476019436, 0.5172752750201736, 0.4924452273034149, 0.48666762823064047, 0.46685528284790745, 0.47930138447832327, 0.4587305491949353, 0.4513545696879611, 0.4422892144114948, 0.44078962356659085, 0.4233382780750934, 0.4269972268490507, 0.43484752735740806, 0.420025892289024, 0.40731781846291953, 0.39742735110143584, 0.3830795695737305, 0.38615741286578825, 0.39039345627069755, 0.37251642259388174, 0.3597000376691026, 0.3667458599120115, 0.35368874726939775, 0.3946207411033193, 0.3403739982497785, 0.34287135230000654, 0.3474543982209657, 0.3378376419895975, 0.32585852547423116, 0.3281710761499726, 0.3294343528313297, 0.3075374158350484, 0.32172252417886105, 0.30638825139979237, 0.3067113876366392, 0.30146408410529574, 0.28626264974803595, 0.2974875116030207, 0.2904704735736018], "accuracy": [0.3541143834590912, 0.5654470920562744, 0.6691322326660156, 0.7003037929534912, 0.7102100253105164, 0.7304186820983887, 0.7467969655990601, 0.7470611333847046, 0.7594769597053528, 0.7671377658843994, 0.7707040309906006, 0.7839123010635376, 0.7737419009208679, 0.7878747582435608, 0.7994980812072754, 0.7927618622779846, 0.8068947196006775, 0.8034605979919434, 0.8169330358505249, 0.8257825970649719, 0.8286884427070618, 0.8215559124946594, 0.8297450542449951, 0.8359529972076416, 0.8358209133148193, 0.8400475382804871, 0.8479725122451782, 0.8433496356010437, 0.8352925777435303, 0.8418967127799988, 0.8470479249954224, 0.8582749962806702, 0.8584070801734924, 0.858671247959137, 0.8527275323867798, 0.8585391640663147, 0.8622375130653381, 0.8648791313171387, 0.8673887252807617, 0.8549728989601135, 0.878351628780365, 0.8713511824607849, 0.8735966086387634, 0.8722757697105408, 0.8767666220664978, 0.8765024542808533, 0.8772949576377869, 0.8902390599250793, 0.8794082403182983, 0.8861445188522339, 0.8808611631393433, 0.889050304889679, 0.8922203183174133, 0.887597382068634, 0.8938053250312805], "val_loss": [1.301203387124198, 0.7484817845480782, 0.6710202523640224, 0.5729680912835258, 0.5573958839688983, 0.5264399903161185, 0.5207290990012032, 0.5137432132448468, 0.48134396757398334, 0.4731156485421317, 0.46109514577048166, 0.46084165573120117, 0.45333138534000944, 0.44067074571337017, 0.42853212356567383, 0.41814762353897095, 0.4142232622419085, 0.41982150077819824, 0.394221944468362, 0.4000893235206604, 0.41801161425454275, 0.4014475090163095, 0.3798779078892299, 0.378411488873618, 0.37302426780973164, 0.3692804149218968, 0.402587958744594, 0.3849902067865644, 0.393320049558367, 0.3482528328895569, 0.3472601430756705, 0.3506566286087036, 0.35659717661993845, 0.34829574823379517, 0.3426476206098284, 0.3506352049963815, 0.34616980382374357, 0.33722005571637836, 0.41140968458993094, 0.3272129212106977, 0.33979988949639456, 0.3461981586047581, 0.33791799204690115, 0.34906199148723055, 0.3268250823020935, 0.32610715287072317, 0.3298714927264622, 0.33344705615724834, 0.3255406447819301, 0.31966985974993023, 0.31995751176561626, 0.35166241441454205, 0.3343081218855722, 0.33102039779935566, 0.32587497574942453], "val_accuracy": [0.5206666588783264, 0.6779999732971191, 0.7036666870117188, 0.7546666860580444, 0.7590000033378601, 0.7730000019073486, 0.7516666650772095, 0.7749999761581421, 0.7933333516120911, 0.7923333048820496, 0.7983333468437195, 0.8040000200271606, 0.796999990940094, 0.8083333373069763, 0.8193333148956299, 0.824999988079071, 0.831333339214325, 0.8169999718666077, 0.8366666436195374, 0.8306666612625122, 0.8083333373069763, 0.8196666836738586, 0.8389999866485596, 0.8376666903495789, 0.8393333554267883, 0.8433333039283752, 0.8163333535194397, 0.8326666951179504, 0.8206666707992554, 0.8553333282470703, 0.8536666631698608, 0.8539999723434448, 0.8533333539962769, 0.8539999723434448, 0.8610000014305115, 0.8526666760444641, 0.8560000061988831, 0.8583333492279053, 0.8246666789054871, 0.862333357334137, 0.8600000143051147, 0.8576666712760925, 0.8569999933242798, 0.862333357334137, 0.8666666746139526, 0.862333357334137, 0.8640000224113464, 0.859333336353302, 0.8666666746139526, 0.8679999709129333, 0.8679999709129333, 0.8539999723434448, 0.8603333234786987, 0.8579999804496765, 0.862666666507721]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [1, 2, 1, 2, 6, 2, 2, 1, 2, 2, 6, 3, 6, 2, 0, 0, 2, 2, 2, 6, 1, 3, 9, 0, 1, 6, 0, 3, 2, 4, 8, 4, 0, 1, 8, 6, 8, 5, 3, 3, 0, 1, 6, 0, 2], [4, 3, 3, 1, 0, 3, 3, 3, 3, 3, 2, 3, 2, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 0, 4, 2, 1, 4, 4], [47, 26, 29, 66, 30, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.834857165813446, "mapping_values": [1, 4, 4, 2, 2, 1, 33, 33, 17, 16, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(grad, grad)), grad), tf.math.add(alpha, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, grad))), grad)))), grad)), tf.math.add(tf.math.add(beta, grad), beta))), tf.math.add(beta, grad)))))), tf.math.add(beta, beta)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.negative(tf.math.add(grad, tf.math.add(beta, beta))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9281680275499231, 1.2257724938029233, 0.891764597082812, 0.8054799372100275, 0.7477959583086219, 0.7225757704482119, 0.6675626984708235, 0.6663081881833381, 0.655167703024857, 0.6188542234694496, 0.619011742815822, 0.5882972770237321, 0.580895895711372, 0.5556441231442165, 0.5382523264363457, 0.538347505457161, 0.5145961029449899, 0.5203430733865263, 0.4909627072846712, 0.4877754387728306, 0.4710576945977078, 0.4781379428372454, 0.46415958141905833, 0.4478459660017479, 0.4438112270184921, 0.44221276202694365, 0.42326928012091736, 0.434681853826382, 0.4378717907108667, 0.4262674144427255, 0.40949281665548565, 0.40072767373325485, 0.3846069609901578, 0.38510972237023283, 0.3895776295792614, 0.37053732415940455, 0.36020172863761746, 0.36681583559964986, 0.35468721809388465], "accuracy": [0.3543785512447357, 0.5641262531280518, 0.6654338836669922, 0.6999075412750244, 0.7148329019546509, 0.7240787148475647, 0.7494386434555054, 0.7436270117759705, 0.7584202885627747, 0.767930269241333, 0.7671377658843994, 0.7799497842788696, 0.7812706232070923, 0.7927618622779846, 0.7976489067077637, 0.7964601516723633, 0.8105930685997009, 0.8030643463134766, 0.8183859586715698, 0.822348415851593, 0.8230088353157043, 0.821820080280304, 0.8277638554573059, 0.8335754871368408, 0.834632158279419, 0.8389908671379089, 0.8449346423149109, 0.834632158279419, 0.8338396549224854, 0.843481719493866, 0.8459912538528442, 0.8553691506385803, 0.859199583530426, 0.8593316674232483, 0.8519350290298462, 0.8634262084960938, 0.8610487580299377, 0.8639545440673828, 0.8702945709228516], "val_loss": [1.3039906024932861, 0.746757047516959, 0.6753434113093785, 0.5820074251719883, 0.6021392856325422, 0.5300980806350708, 0.5209172964096069, 0.5099861451557705, 0.4829187733786447, 0.47664330686841694, 0.4643585852214268, 0.4518136126654489, 0.44893726280757357, 0.4481983184814453, 0.4236676607813154, 0.4159882238933018, 0.4236738681793213, 0.422508750643049, 0.396458557673863, 0.39982690129961285, 0.4130155188696725, 0.410546566758837, 0.37662300893238615, 0.38181877987725393, 0.36925932339259554, 0.3635568107877459, 0.4320874810218811, 0.3931828907557896, 0.39444868905203684, 0.3503469058445522, 0.34892505407333374, 0.3532960755484445, 0.3544107164655413, 0.3405795267650059, 0.34586846828460693, 0.3510991164616176, 0.35187712737492155, 0.3445074813706534, 0.3877791336604527], "val_accuracy": [0.5170000195503235, 0.6786666512489319, 0.7046666741371155, 0.7519999742507935, 0.7269999980926514, 0.768666684627533, 0.7513333559036255, 0.778333306312561, 0.7943333387374878, 0.7873333096504211, 0.7950000166893005, 0.8059999942779541, 0.7973333597183228, 0.7990000247955322, 0.8253333568572998, 0.8199999928474426, 0.8186666369438171, 0.815666675567627, 0.8370000123977661, 0.8293333053588867, 0.812666654586792, 0.8146666884422302, 0.8420000076293945, 0.8326666951179504, 0.8433333039283752, 0.8473333120346069, 0.7963333129882812, 0.8273333311080933, 0.8196666836738586, 0.8569999933242798, 0.8523333072662354, 0.8533333539962769, 0.8553333282470703, 0.859666645526886, 0.8560000061988831, 0.8519999980926514, 0.8516666889190674, 0.8536666631698608, 0.8339999914169312]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [1, 2, 1, 2, 6, 2, 2, 1, 2, 2, 6, 3, 8, 2, 0, 0, 2, 2, 2, 6, 1, 3, 9, 0, 1, 2, 0, 3, 2, 4, 8, 6, 0, 0, 8, 3, 7, 5, 3, 0, 0, 1, 6, 0, 2], [4, 3, 3, 1, 0, 3, 3, 3, 3, 3, 2, 3, 2, 3, 1, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 0, 4, 2, 1, 4, 4], [47, 9, 52, 66, 30, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8337143063545227, "mapping_values": [1, 4, 4, 2, 2, 1, 68, 68, 40, 28, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(grad, grad), tf.math.subtract(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))))), tf.math.negative(grad))), tf.math.negative(tf.math.add(beta, grad)))), grad))))), tf.math.add(beta, grad)), tf.math.add(beta, beta))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.subtract(tf.math.add(beta, grad), tf.math.multiply(alpha, tf.math.add(beta, beta)))), tf.math.add(beta, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))), tf.math.negative(grad)))))), tf.math.subtract(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.multiply(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.negative(tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.square(alpha)), alpha), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha)))))))))))), grad))))))))))), tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9279814592331723, 1.2263616868423324, 0.8927090273572942, 0.7928192334766512, 0.7711066383459565, 0.7333766287973827, 0.6745913354649189, 0.6622204574627285, 0.6500804880827079, 0.6216009064530652, 0.6113140390155779, 0.5936684596414155, 0.574954213806037, 0.5548293827673101, 0.5459038514612908, 0.5331485119824554, 0.5215404922219631, 0.5166819320693701, 0.49857154717660773, 0.4872220540169507, 0.46983876167791017, 0.4836817070627257, 0.4655955066935671, 0.446436230386993, 0.44799606019652927, 0.44318293581202894, 0.4177004298427243, 0.43037755443136283, 0.4395855739328918, 0.4222743832802083, 0.410793317976629, 0.39876307441007036, 0.38615428056337137, 0.3839628825948506, 0.3937754870492391, 0.37531893374724334, 0.3625375927518057, 0.36369560494194286, 0.35325833122964234, 0.39893945021840954, 0.342530857739652, 0.3462911719391611, 0.3503514676557918, 0.3418627843967345, 0.3264332660523703, 0.3347316881873746, 0.33159763257044683, 0.3079017839687155, 0.31874339477560226, 0.30657201451537885, 0.3080508556261731], "accuracy": [0.3543785512447357, 0.5650508403778076, 0.6659622192382812, 0.7065116763114929, 0.7117950320243835, 0.7226257920265198, 0.7461365461349487, 0.750231146812439, 0.7578919529914856, 0.7647602558135986, 0.7733456492424011, 0.7783648371696472, 0.7796856164932251, 0.7922335267066956, 0.7930260300636292, 0.8004226684570312, 0.8055738806724548, 0.8055738806724548, 0.813498854637146, 0.8210275769233704, 0.8240655064582825, 0.817461371421814, 0.8240655064582825, 0.8329150676727295, 0.8341038227081299, 0.8380662798881531, 0.8450667262077332, 0.8379341959953308, 0.8325188159942627, 0.8462554216384888, 0.8453308939933777, 0.8544445633888245, 0.8573504090309143, 0.8581429123878479, 0.8479725122451782, 0.8594637513160706, 0.8597279191017151, 0.8672566413879395, 0.870030403137207, 0.8539162874221802, 0.8758420348167419, 0.8714832663536072, 0.873860776424408, 0.8717474341392517, 0.8758420348167419, 0.8774270415306091, 0.8747853636741638, 0.8873332738876343, 0.8820499181747437, 0.8883898854255676, 0.8815215826034546], "val_loss": [1.3010452474866594, 0.7449644974299839, 0.6589725698743548, 0.6440072229930333, 0.5768653665270124, 0.5203635692596436, 0.5052884987422398, 0.5192001717431205, 0.4755832127162388, 0.479702353477478, 0.46814446789877756, 0.46942438398088726, 0.4462353672300066, 0.4380955866404942, 0.43147014720099314, 0.4152993219239371, 0.41682528597967966, 0.45017131737300325, 0.3971578563962664, 0.4004750166620527, 0.4173946465764727, 0.4072845322745187, 0.3773752450942993, 0.3866953338895525, 0.37483114855630056, 0.35819627557482037, 0.42156052589416504, 0.4052635942186628, 0.38515072209494455, 0.3474849888256618, 0.345686069556645, 0.35260512999125887, 0.35133860792432514, 0.3387249367577689, 0.34169477224349976, 0.3556791714259556, 0.34831132207598003, 0.33751448563167025, 0.3937095744269235, 0.32752334220068796, 0.3332699622426714, 0.348784225327628, 0.33668779475348337, 0.3468861494745527, 0.32920972790036884, 0.3241651143346514, 0.3368165833609445, 0.3279866320746286, 0.3247118762561253, 0.3245123454502651, 0.3201190488679068], "val_accuracy": [0.5193333625793457, 0.6803333163261414, 0.7110000252723694, 0.715666651725769, 0.7443333268165588, 0.7770000100135803, 0.7693333625793457, 0.7723333239555359, 0.7960000038146973, 0.781333327293396, 0.7900000214576721, 0.7960000038146973, 0.7963333129882812, 0.8086666464805603, 0.809333324432373, 0.8220000267028809, 0.8259999752044678, 0.7919999957084656, 0.8323333263397217, 0.8276666402816772, 0.8036666512489319, 0.8159999847412109, 0.8413333296775818, 0.8323333263397217, 0.8379999995231628, 0.8523333072662354, 0.8090000152587891, 0.8199999928474426, 0.8263333439826965, 0.8556666374206543, 0.8526666760444641, 0.8516666889190674, 0.8553333282470703, 0.8573333621025085, 0.859666645526886, 0.8503333330154419, 0.8569999933242798, 0.8569999933242798, 0.8333333134651184, 0.8629999756813049, 0.8643333315849304, 0.8519999980926514, 0.8603333234786987, 0.8606666922569275, 0.862333357334137, 0.8663333058357239, 0.8600000143051147, 0.8643333315849304, 0.8656666874885559, 0.8653333187103271, 0.8663333058357239]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 7, 1, 2, 8, 0, 8, 5, 2, 2, 9, 2, 2, 2, 0, 0, 2, 2, 2, 6, 6, 3, 3, 5, 1, 2, 0, 3, 5, 4, 8, 6, 0, 8, 8, 6, 7], [4, 3, 3, 1, 2, 3, 2, 3, 3, 3, 2, 3, 3, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [47, 9, 52, 66, 40, 57, 35, 9, 54, 64], [0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8328571319580078, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9280810182309658, 1.2272179551710936, 0.8892027187687516, 0.8102715009349354, 0.7580583344565848, 0.704836178323486, 0.6681443044553894, 0.6774335901939701, 0.6560588875120468, 0.6260380888375718, 0.6034252340090415, 0.5774874670189669, 0.6047930356266161, 0.5574812680785965, 0.5427333797446142, 0.5302232632846754, 0.5180861647252504, 0.5240217002706284, 0.4954202010324209, 0.4898243745745386, 0.46693854025090137, 0.4848938842160496, 0.4594836468788548, 0.45015155724672323, 0.44444812152285257, 0.4458093187473926, 0.41772040456293313, 0.4313235623315971, 0.432925600960522, 0.4293669372336456, 0.41259403911563997, 0.39984936163315543, 0.38696572764784887, 0.38410999099135384, 0.3919179712886808, 0.3718513355806535, 0.3634652044039046, 0.36832969493916984, 0.35196071940721096], "accuracy": [0.35424646735191345, 0.5650508403778076, 0.6680755615234375, 0.7000396251678467, 0.7091533541679382, 0.7314753532409668, 0.746268630027771, 0.7428345084190369, 0.7567031979560852, 0.7629110813140869, 0.7734777331352234, 0.7876105904579163, 0.7718927264213562, 0.7935543656349182, 0.7961959838867188, 0.800818920135498, 0.8072909712791443, 0.7991018295288086, 0.8145555257797241, 0.817989706993103, 0.8257825970649719, 0.817461371421814, 0.8290846943855286, 0.8329150676727295, 0.8355567455291748, 0.8396512866020203, 0.8481045961380005, 0.8362171649932861, 0.8366134166717529, 0.8433496356010437, 0.8446704745292664, 0.8552370667457581, 0.858671247959137, 0.86118084192276, 0.8508783578872681, 0.8598600029945374, 0.8590674996376038, 0.8647470474243164, 0.8688416481018066], "val_loss": [1.3024671758924211, 0.7469688483646938, 0.6766983611243111, 0.5736316101891654, 0.5595873764583043, 0.5184199639729091, 0.5256560870579311, 0.5194998128073556, 0.4813381774084909, 0.4859473534992763, 0.4527473449707031, 0.4804104396275112, 0.44808716433388845, 0.43907921654837473, 0.43366375139781405, 0.41778639384678434, 0.41297524315970285, 0.4374746084213257, 0.3985365203448704, 0.40105223655700684, 0.4035344975335257, 0.39481239659445627, 0.3811452218464443, 0.37832283122198923, 0.37810241324560984, 0.36478004285267424, 0.4034856302397592, 0.38243954522269114, 0.4005797335079738, 0.3503931760787964, 0.3482795698302133, 0.3515333618436541, 0.35310653277805876, 0.341232316834586, 0.3460072619574411, 0.35616229261670795, 0.36069594962256296, 0.3405988301549639, 0.3932474596159799], "val_accuracy": [0.5196666717529297, 0.6813333630561829, 0.7003333568572998, 0.7519999742507935, 0.7643333077430725, 0.7743333578109741, 0.7456666827201843, 0.7733333110809326, 0.7943333387374878, 0.778333306312561, 0.8059999942779541, 0.7896666526794434, 0.796999990940094, 0.8066666722297668, 0.8086666464805603, 0.8206666707992554, 0.8240000009536743, 0.8026666641235352, 0.8363333344459534, 0.82833331823349, 0.8140000104904175, 0.8293333053588867, 0.8399999737739563, 0.8383333086967468, 0.8376666903495789, 0.8446666598320007, 0.8183333277702332, 0.8363333344459534, 0.8173333406448364, 0.8546666502952576, 0.8513333201408386, 0.8529999852180481, 0.8560000061988831, 0.8583333492279053, 0.8546666502952576, 0.8526666760444641, 0.846666693687439, 0.8526666760444641, 0.8273333311080933]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0], [2, 7, 1, 2, 6, 2, 5, 3, 2, 8, 6, 3, 4, 4, 0, 0, 2, 2, 2, 6, 1, 3, 6, 0, 1, 5, 0, 3, 2, 4, 8, 6, 0, 1, 8, 6, 7, 6, 3, 3, 0, 2, 6, 0, 2, 4, 3, 7, 7, 5, 1, 2, 2, 9, 7, 2, 9], [3, 3, 3, 0, 3, 3, 3, 3, 2, 3, 3, 3, 2, 3, 1, 3, 4, 3, 0, 0, 0, 1, 2, 3, 5, 1, 3, 5, 3, 1, 4, 1, 5, 1, 2, 2, 5, 5, 4, 4, 3], [74, 9, 7, 66, 40, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8285714387893677, "mapping_values": [1, 4, 4, 2, 2, 1, 98, 98, 57, 41, 6, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 58, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.pow(tf.math.pow(grad, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), grad), tf.math.negative(grad))), grad)))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))), beta))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(grad, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.negative(tf.math.multiply(alpha, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(grad, grad)))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))))))))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.sqrt(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.negative(beta))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad))))), alpha)))))))), grad)), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.square(tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, alpha))), tf.math.add(beta, beta)), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), grad))))))))))), tf.math.add(beta, grad))), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad)))), tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9246504377175662, 1.2200157613314029, 0.8953212946633684, 0.7974007044800867, 0.7513429466460312, 0.7306538756576118, 0.6715448576744915, 0.6519231095825441, 0.6473601133579969, 0.6066380139071754, 0.6236460397760267, 0.578272264237732, 0.5698310943122836, 0.5540775754558507, 0.5374991671205465, 0.5263349773814224, 0.5170229102807542, 0.5173813361438857, 0.49360598414140433, 0.4837967649017579, 0.4658722275512062, 0.47475434403771566, 0.4566371768000513, 0.4429805834279824, 0.4449107025387958, 0.4435339400072643, 0.4179798549727804, 0.4246099129911616, 0.42928812563962565, 0.4205825234708092, 0.40131358113649135, 0.39816560328061856, 0.37984217180788177, 0.38117690299165374, 0.3869346597521863, 0.37028335024809494, 0.35741389442932464, 0.3611383877725114, 0.34829514248811055, 0.3838390683957756, 0.3362052473630163, 0.33839264914753603, 0.3397389256116532, 0.34030324664680855, 0.3215161128098293, 0.3279583116390796, 0.32465399070942424, 0.3038768061376314, 0.31309291677090156, 0.3014203721836747, 0.2998029595951221, 0.3022246290042085, 0.2876093438894773, 0.2913304471997946, 0.28794036556260144], "accuracy": [0.3547748029232025, 0.5679566860198975, 0.6700568199157715, 0.7073041796684265, 0.7129837274551392, 0.7230220437049866, 0.7477215528488159, 0.7510236501693726, 0.7556465268135071, 0.7729493975639343, 0.7675340175628662, 0.7852331399917603, 0.7845727205276489, 0.7898560166358948, 0.7987055778503418, 0.8026680946350098, 0.8076872229576111, 0.8054417967796326, 0.8156121969223022, 0.8212917447090149, 0.8280280232429504, 0.8222163319587708, 0.828820526599884, 0.8364813327789307, 0.8339717388153076, 0.8403117060661316, 0.8469158411026001, 0.8387266993522644, 0.8366134166717529, 0.8432175517082214, 0.850350022315979, 0.8607845902442932, 0.8628978729248047, 0.8599920868873596, 0.8555012345314026, 0.86118084192276, 0.8605204224586487, 0.8691058158874512, 0.8710870146751404, 0.8603883385658264, 0.8803328275680542, 0.8761062026023865, 0.8775591254234314, 0.8706908226013184, 0.8790120482444763, 0.8768987059593201, 0.8774270415306091, 0.8918240666389465, 0.8841632604598999, 0.8889182209968567, 0.8837670087814331, 0.8878615498542786, 0.8922203183174133, 0.8919561505317688, 0.8924844861030579], "val_loss": [1.3270084517342704, 0.7780567237309047, 0.6863188743591309, 0.5650814090456281, 0.560070446559361, 0.5222225700105939, 0.5024969407490322, 0.5219584022249494, 0.48045856612069265, 0.4759332963398525, 0.4560244764600481, 0.4583883796419416, 0.4433146204267229, 0.4356487137930734, 0.4263617822102138, 0.4130847454071045, 0.4144882048879351, 0.42915020670209614, 0.39547726086207796, 0.40109604597091675, 0.4022449680737087, 0.3946858048439026, 0.37603483881269184, 0.39356752804347445, 0.3741610986845834, 0.36048012120383127, 0.3998337813786098, 0.3782809376716614, 0.38815548590251375, 0.3449779152870178, 0.34758536304746357, 0.3530629277229309, 0.35272522483553204, 0.3434955818312509, 0.3409768172672817, 0.34665656089782715, 0.3445959516933986, 0.33899600165230886, 0.3865776743207659, 0.3289855122566223, 0.3345240865434919, 0.34156353984560284, 0.3344769903591701, 0.34465496029172626, 0.3302121673311506, 0.3238977789878845, 0.33152852739606586, 0.32665129218782696, 0.3258252229009356, 0.31866608347211567, 0.32340002059936523, 0.36657412563051495, 0.33401473079408917, 0.33846449851989746, 0.32074393544878277], "val_accuracy": [0.5176666378974915, 0.6703333258628845, 0.7016666531562805, 0.7559999823570251, 0.7473333477973938, 0.7786666750907898, 0.7789999842643738, 0.7680000066757202, 0.793666660785675, 0.7943333387374878, 0.8036666512489319, 0.8009999990463257, 0.8019999861717224, 0.8046666383743286, 0.8213333487510681, 0.8263333439826965, 0.8273333311080933, 0.8083333373069763, 0.8346666693687439, 0.8256666660308838, 0.8176666498184204, 0.831333339214325, 0.8433333039283752, 0.8230000138282776, 0.8403333425521851, 0.8473333120346069, 0.8193333148956299, 0.8399999737739563, 0.8230000138282776, 0.8550000190734863, 0.8523333072662354, 0.8529999852180481, 0.8566666841506958, 0.859000027179718, 0.8606666922569275, 0.8543333411216736, 0.8556666374206543, 0.8553333282470703, 0.8363333344459534, 0.8646666407585144, 0.8643333315849304, 0.8553333282470703, 0.8643333315849304, 0.8629999756813049, 0.8679999709129333, 0.8653333187103271, 0.8669999837875366, 0.862333357334137, 0.8686666488647461, 0.8706666827201843, 0.8653333187103271, 0.8463333249092102, 0.859333336353302, 0.859000027179718, 0.8676666617393494]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [25, 66, 89, 50, 85, 46], [1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 3, 8, 2, 6, 2, 8, 0, 3, 2, 0, 2, 5, 2, 0, 0, 2, 2, 2, 6, 6, 3, 9, 5, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [4, 3, 3, 4, 0, 3, 3, 3, 3, 3, 2, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [70, 9, 7, 66, 40, 57, 35, 9, 54, 64], [0, 0, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.7545714378356934, "mapping_values": [1, 4, 4, 2, 2, 1, 8, 8, 4, 4, 0, 5, 3, 2, 1, 1, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.negative(tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)))), sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2954609536412938, 2.2825366844826718, 2.266625099367296, 2.24977825677091, 2.234299671884541, 2.2130190693801497, 2.1885386233190585, 2.160797549748953, 2.1237712816523837, 2.0834274693817716, 2.0357658426287055, 1.982419304103899, 1.9179477914921785, 1.850939386918513, 1.7821028579448146, 1.7131881658442978, 1.6354846634869216, 1.569969551391007, 1.5125105026422978, 1.451587045008496, 1.4043379451116598, 1.3495417255782778, 1.3044730809701353, 1.2779507998226025, 1.2394542853751314, 1.2058316359918635, 1.173660777846757, 1.1471567756668954, 1.125946190835557, 1.0987587733873996, 1.0779466758298994, 1.0543903443067302, 1.0491835007877273, 1.0285243483078463, 1.0080150257185418, 1.006423948195632, 0.996774809259103, 0.977639506749977, 0.9684283037888549, 0.9572925988425826, 0.9559433779554628, 0.9253818289148116, 0.928515011435093, 0.9325308427913329, 0.9073034797000091, 0.9114489394203547, 0.8923113430810721, 0.8824622314115793, 0.8780656339092151, 0.8734053352552713, 0.8608840267892212, 0.8585012332008436, 0.8564696616941297, 0.8475456282195319, 0.852713834293105, 0.8451829193337813, 0.8431807337593267, 0.8232763614699888, 0.8265028136706449, 0.8197078725696791, 0.8183371294774494, 0.8174112577479923, 0.8072122654044444, 0.8063498058843103, 0.8013717542313755, 0.7970175326791626, 0.7834913434920577, 0.7919255249677569, 0.7828491960046093], "accuracy": [0.109232597053051, 0.1394795924425125, 0.1958790123462677, 0.22176727652549744, 0.2591467499732971, 0.2849029302597046, 0.3225465714931488, 0.34539690613746643, 0.35662394762039185, 0.3871351182460785, 0.4015321731567383, 0.4147404432296753, 0.4348170757293701, 0.4515916109085083, 0.4621582329273224, 0.47166821360588074, 0.49253731966018677, 0.5052172541618347, 0.5126138925552368, 0.5349359512329102, 0.5408796668052673, 0.5482763051986694, 0.5639941692352295, 0.5647866725921631, 0.5768062472343445, 0.5925241112709045, 0.5947695374488831, 0.5960903167724609, 0.6103553175926208, 0.618280291557312, 0.6218464970588684, 0.6302998065948486, 0.6301677227020264, 0.6341302394866943, 0.6446968913078308, 0.6450931429862976, 0.6399418711662292, 0.651168942451477, 0.6586976647377014, 0.6528860330581665, 0.6536785364151001, 0.6741513609886169, 0.6635847091674805, 0.6659622192382812, 0.672698438167572, 0.6811517477035522, 0.6778497099876404, 0.685510516166687, 0.6861709356307983, 0.6856426000595093, 0.6919825673103333, 0.6936996579170227, 0.6905296444892883, 0.6929071545600891, 0.6921146512031555, 0.6915863156318665, 0.6893408894538879, 0.7069079279899597, 0.7000396251678467, 0.7051908373832703, 0.7014925479888916, 0.7049266695976257, 0.7086250185966492, 0.7037379741668701, 0.7091533541679382, 0.7091533541679382, 0.7144366502761841, 0.7128516435623169, 0.713908314704895], "val_loss": [1.9573580878121513, 1.943927833012172, 1.9299255779811315, 1.9142251695905412, 1.8964172771998815, 1.8755560602460588, 1.8506159101213728, 1.820903709956578, 1.785419532230922, 1.7436511175973075, 1.6947859014783586, 1.638606343950544, 1.5754561083657401, 1.506979193006243, 1.4351881231580461, 1.3630434104374476, 1.291296856743949, 1.222238370350429, 1.1601815223693848, 1.103743553161621, 1.0534349169049944, 1.0086997236524309, 0.9689749990190778, 0.9342219148363385, 0.9038641452789307, 0.8764379024505615, 0.8517016342708043, 0.8307557106018066, 0.8099808011736188, 0.7918827533721924, 0.77542131287711, 0.7605417626244682, 0.7485851390021188, 0.7355584246771676, 0.7237362010138375, 0.7141330412455967, 0.7055523225239345, 0.6962218965802874, 0.689082213810512, 0.6818329436438424, 0.6754711355481829, 0.668452535356794, 0.661747796194894, 0.655673589025225, 0.6509136472429548, 0.6455853666578021, 0.6409308910369873, 0.6345543691090175, 0.6299283504486084, 0.6257844311850411, 0.621447137423924, 0.6170926434653146, 0.6154425144195557, 0.6097963196890694, 0.6077066659927368, 0.6040236949920654, 0.600070697920663, 0.5966100522450039, 0.5937280825206211, 0.5918668849127633, 0.5874360118593488, 0.585200309753418, 0.5838513374328613, 0.5790762731007167, 0.5789761883871896, 0.5739487750189645, 0.5715653555733817, 0.570269056728908, 0.5678369317735944], "val_accuracy": [0.16033333539962769, 0.28033334016799927, 0.35633334517478943, 0.3946666717529297, 0.41499999165534973, 0.4410000145435333, 0.4556666612625122, 0.4736666679382324, 0.492000013589859, 0.5099999904632568, 0.5296666622161865, 0.5363333225250244, 0.5486666560173035, 0.5566666722297668, 0.5756666660308838, 0.5846666693687439, 0.597000002861023, 0.609333336353302, 0.6266666650772095, 0.637333333492279, 0.6549999713897705, 0.6643333435058594, 0.6679999828338623, 0.6740000247955322, 0.6800000071525574, 0.6830000281333923, 0.6893333196640015, 0.6916666626930237, 0.6980000138282776, 0.6990000009536743, 0.7020000219345093, 0.7036666870117188, 0.706333339214325, 0.7089999914169312, 0.7183333039283752, 0.7203333377838135, 0.722000002861023, 0.7236666679382324, 0.7263333201408386, 0.7289999723434448, 0.7279999852180481, 0.7273333072662354, 0.7303333282470703, 0.734666645526886, 0.7333333492279053, 0.7366666793823242, 0.7369999885559082, 0.7393333315849304, 0.7419999837875366, 0.7426666617393494, 0.7429999709129333, 0.7443333268165588, 0.7400000095367432, 0.7490000128746033, 0.7436666488647461, 0.7456666827201843, 0.7509999871253967, 0.7493333220481873, 0.7526666522026062, 0.749666690826416, 0.7549999952316284, 0.753333330154419, 0.7506666779518127, 0.7616666555404663, 0.7509999871253967, 0.7559999823570251, 0.7583333253860474, 0.7566666603088379, 0.7543333172798157]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1], [2, 8, 1, 8, 2, 2, 8, 1, 3, 2, 9, 3, 8, 2, 0, 0, 2, 2, 2, 6, 6, 3, 9, 5, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [4, 3, 1, 1, 0, 3, 3, 3, 3, 3, 2, 3, 3, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [55, 18, 76, 66, 40, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.12800000607967377, "mapping_values": [1, 2, 2, 1, 1, 0, 20, 20, 12, 8, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(grad, grad)), alpha)))), tf.math.sqrt(alpha)))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad))))), grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [6.12526948813198, 2.3502966554929174, 2.2119178754495135, 22.733219492877904, 52.177951366327314, 6.349111424351933e+33, 2.8118366243470505, 2.6556685575483465], "accuracy": [0.1706511676311493, 0.10236428678035736, 0.17936864495277405, 0.15189538896083832, 0.10751552134752274, 0.10381719470024109, 0.09906221181154251, 0.09826971590518951], "val_loss": [2.0971177646092007, 1.9634300640651159, 1.6727227483476912, 2.0592151369367326, 475123.5, 2.5023533276149204, 2.29709563936506, 2.289382117135184], "val_accuracy": [0.09666666388511658, 0.0949999988079071, 0.3086666762828827, 0.09566666930913925, 0.12866666913032532, 0.10366666316986084, 0.10233332961797714, 0.09666666388511658]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1], [5, 8, 1, 2, 6, 0, 5, 0, 2, 1, 6, 3, 4, 2, 0, 0, 2, 2, 2, 6, 1, 3, 9, 2, 1, 5, 0, 3, 2, 4, 8, 6, 0, 1, 8, 6, 7, 6, 3, 3, 0, 2, 6, 0, 2], [3, 3, 3, 1, 3, 3, 3, 3, 1, 3, 3, 3, 2, 3, 1, 0, 4, 3, 0, 0, 0, 1, 2, 3, 5, 1, 3, 5, 3, 1, 4, 1, 5], [47, 9, 52, 66, 40, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [0, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 25, 25, 15, 10, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.negative(grad)), grad)), tf.math.square(tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, grad))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad)))), tf.math.negative(tf.math.add(beta, alpha)))), grad)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302142631014057, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 1, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [1, 2, 2, 2, 6, 2, 6, 1, 2, 2, 6, 3, 8, 2, 0, 0, 2, 2, 2, 6, 1, 3, 9, 0, 1, 2, 0, 3, 2, 4, 5, 6, 5, 0, 8, 3, 7, 5, 2, 0, 0, 1, 6, 0, 2, 3], [4, 3, 3, 1, 0, 3, 3, 3, 3, 3, 2, 3, 3, 3, 1, 2, 3, 3, 0, 1, 0, 1, 1, 0, 3, 1, 3, 0, 4, 2, 1, 4, 4], [70, 9, 7, 66, 40, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [0, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 0, 78, 78, 46, 32, 6, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(grad, grad), tf.math.subtract(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))))))), tf.math.negative(grad))), tf.math.negative(tf.math.add(beta, grad)))), grad))))), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.multiply(tf.math.add(beta, grad), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))), grad), tf.math.add(beta, alpha))))), tf.math.add(beta, tf.math.negative(tf.math.subtract(beta, tf.math.add(grad, tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))))))))), tf.math.multiply(tf.math.add(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.sqrt(tf.math.add(beta, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.negative(alpha))))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), grad)))), alpha))))))))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(grad, tf.math.multiply(beta, alpha))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302142631014057, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [29, 66, 89, 50, 85, 46], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1], [4, 7, 1, 2, 6, 2, 5, 8, 2, 2, 6, 3, 4, 2, 0, 0, 2, 2, 2, 6, 1, 3, 9, 0, 1, 5, 0, 3, 2, 4, 8, 6, 0, 1, 8, 6, 7, 6, 3, 3, 0, 2, 6, 0, 2], [3, 3, 3, 1, 2, 3, 3, 3, 2, 3, 3, 3, 2, 3, 1, 3, 4, 3, 0, 0, 0, 1, 2, 3, 5, 1, 3, 5, 3, 1, 4, 1, 5], [55, 18, 76, 66, 40, 57, 35, 9, 54, 64], [0, 1, 0, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [1, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 19, 19, 10, 9, 0, 5, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.square(tf.math.sqrt(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad)))))))))), tf.math.add(tf.math.add(beta, grad), beta))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, tf.math.add(sigma, tf.math.add(tf.math.add(sigma, alpha), sigma)))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.315728875167649, 2.3599024499805767, 2.425922637476409, 2.5862110665036293, 7.594320975683935, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06789063662290573, 0.02522784285247326, 0.015321621671319008, 0.012151631526648998, 0.05547483637928963, 0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.0037901060921803, 2.050257069723947, 2.134619985307966, 2.4080590520586287, 152.76524571010046, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.00566666666418314, 0.004666666500270367, 0.005333333276212215, 0.011666666716337204, 0.10066666454076767, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [2, 7, 1, 5, 6, 2, 2, 1, 2, 2, 1, 3, 3, 2, 0, 0, 2, 2, 2, 6, 1, 3, 2, 0, 1, 2, 0, 4, 6, 4, 3, 6, 4, 0, 8, 6, 7, 1, 3, 3, 9, 1, 6, 0, 2], [3, 3, 2, 1, 3, 3, 3, 3, 2, 0, 3, 3, 2, 3, 1, 3, 4, 3, 0, 0, 1, 1, 2, 3, 5, 1, 3, 3, 3, 1, 0, 1, 5], [47, 9, 53, 66, 40, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 66, 66, 36, 30, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.square(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), beta)))), tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.multiply(tf.math.multiply(tf.math.add(beta, alpha), grad), grad), tf.math.add(tf.math.add(beta, grad), grad))), tf.math.add(beta, tf.math.negative(beta)))), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)), tf.math.negative(tf.math.add(beta, tf.math.add(grad, beta)))))), tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.subtract(tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.subtract(tf.math.add(grad, grad), grad))), tf.math.add(beta, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.negative(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))), alpha)), tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.divide_no_nan(beta, tf.math.add(beta, grad)), grad)), tf.math.add(beta, tf.math.pow(tf.math.negative(tf.math.add(beta, tf.math.sqrt(alpha))), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, grad))))))))))), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [7.275376162233338e+22, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.05309734493494034, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 7, 9, 3, 6, 0, 8, 5, 2, 2, 9, 8, 2, 2, 0, 0, 2, 2, 2, 6, 6, 3, 9, 5, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [4, 3, 3, 1, 0, 3, 3, 3, 3, 3, 2, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [70, 9, 7, 66, 40, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 11, 11, 7, 4, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.sqrt(grad)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(beta, grad), tf.math.divide_no_nan(grad, tf.math.negative(tf.math.sqrt(alpha)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 7, 9, 2, 6, 0, 8, 5, 2, 2, 9, 8, 2, 2, 0, 0, 2, 2, 2, 6, 6, 3, 9, 5, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [4, 3, 3, 1, 0, 3, 3, 3, 3, 3, 2, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [70, 9, 7, 66, 40, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 11, 11, 7, 4, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.negative(grad)), grad)))), tf.math.sqrt(alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [6.16639978253207e+17, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.16470743715763092, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 7, 1, 2, 6, 0, 9, 5, 2, 2, 9, 2, 2, 8, 0, 1, 4, 2, 2, 6, 6, 3, 3, 5, 1, 2, 0, 3, 5, 4, 8, 6, 0, 8, 8, 6, 7], [4, 3, 3, 1, 0, 3, 3, 3, 3, 0, 2, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [70, 18, 7, 66, 40, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 27, 27, 17, 10, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.sqrt(grad)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.negative(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.square(grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), alpha)))))), tf.math.pow(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), grad))))), tf.math.add(beta, grad))))), grad)), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 9, 2, 2, 6, 0, 8, 5, 2, 2, 9, 2, 2, 2, 0, 0, 2, 2, 2, 6, 6, 3, 3, 5, 1, 2, 0, 3, 5, 4, 8, 6, 0, 8, 8, 6, 7], [4, 3, 3, 1, 0, 3, 3, 3, 3, 3, 2, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [34, 9, 7, 66, 40, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07594769448041916, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 1, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [1, 0, 1, 2, 6, 2, 2, 1, 2, 2, 6, 3, 8, 2, 0, 0, 2, 2, 2, 6, 2, 3, 9, 0, 1, 2, 0, 3, 6, 4, 8, 6, 0, 0, 8, 9, 7, 5, 3, 0, 0, 1, 6, 0, 2], [4, 3, 3, 1, 0, 3, 3, 3, 3, 3, 2, 3, 2, 3, 1, 2, 4, 3, 0, 3, 1, 1, 1, 2, 5, 2, 3, 0, 4, 2, 1, 4, 4], [70, 9, 48, 66, 40, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [2, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 0, 29, 29, 16, 13, 1, 1, 0, 0, 0, 0, 6, 3, 3, 1], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.sqrt(grad))))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(grad, grad), tf.math.add(alpha, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, grad)))), tf.math.add(grad, tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))))), grad)), tf.math.add(beta, beta)))))))), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(beta, tf.math.square(tf.math.multiply(beta, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [78, 66, 89, 50, 85, 46], [1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1], [2, 8, 1, 9, 2, 2, 8, 1, 3, 2, 9, 3, 8, 2, 0, 0, 2, 2, 2, 6, 6, 3, 9, 5, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [4, 3, 3, 1, 0, 3, 3, 3, 3, 3, 2, 3, 3, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [47, 9, 52, 66, 40, 57, 35, 9, 54, 64], [0, 1, 0, 1, 1, 0, 0, 0, 1], [1, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [4, 0], [69, 2], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 11, 11, 7, 4, 1, 1, 1, 0, 1, 0, 6, 3, 3, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.sqrt(tf.math.subtract(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad))), tf.math.add(beta, grad))))), tf.math.sqrt(alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.square(tf.math.multiply(beta, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [2, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1], [2, 7, 9, 2, 6, 0, 8, 5, 2, 2, 9, 8, 2, 2, 0, 0, 2, 2, 2, 6, 6, 3, 9, 5, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [4, 3, 3, 1, 0, 3, 3, 3, 3, 3, 2, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [70, 9, 7, 66, 40, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 9, 9, 5, 4, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(grad, tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3017877729073524, 2.302326840621259, 2.3027583765174264, 2.3049872530890716, 2.314982568992521, 2.3579347254562024], "accuracy": [0.10738343745470047, 0.09998679161071777, 0.10394927859306335, 0.1072513535618782, 0.09998679161071777, 0.1006472036242485], "val_loss": [1.973606858934675, 1.9736806324550085, 1.9745257922581263, 1.9782416479928153, 1.995851789202009, 2.0763211931501115], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 5, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 7, 1, 2, 6, 0, 8, 5, 2, 2, 4, 1, 8, 2, 0, 0, 2, 2, 2, 6, 6, 3, 9, 5, 4, 4, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [2, 0, 3, 1, 1, 3, 3, 3, 3, 3, 1, 3, 2, 1, 1, 1, 4, 2, 0, 0, 1, 1, 1, 1, 5, 5, 4, 4, 4, 2, 3, 5, 4], [47, 32, 52, 66, 40, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 27, 27, 16, 11, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.square(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), alpha)), tf.math.add(beta, alpha)))), tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, grad), tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.sqrt(grad), tf.math.add(grad, tf.math.add(beta, tf.math.negative(grad))))), tf.math.add(beta, grad))), tf.math.negative(tf.math.add(beta, alpha)))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3734890461093983, 14440556507251.586, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.03803988918662071, 0.05824857950210571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.2163799830845425, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.007000000216066837, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 2, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [1, 66, 89, 50, 85, 46], [1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1], [2, 1, 1, 2, 6, 9, 8, 5, 2, 2, 9, 2, 2, 2, 0, 0, 2, 2, 2, 6, 6, 3, 9, 2, 1, 2, 0, 3, 2, 4, 8, 6, 0, 8, 8, 6, 7], [4, 2, 3, 1, 0, 3, 3, 3, 3, 3, 2, 3, 2, 3, 3, 2, 4, 3, 0, 0, 4, 1, 1, 1, 5], [70, 9, 7, 66, 40, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [3, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.04171428456902504, "mapping_values": [1, 4, 4, 2, 2, 0, 12, 12, 7, 5, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, grad), tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta))), grad), tf.math.sqrt(alpha))), tf.math.add(beta, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.301563437494226, 2.3034260130010464, 2.30178007246906, 2.3010889220121213, 2.302472026545563, 2.3016032695518334], "accuracy": [0.0940430611371994, 0.08691058307886124, 0.09576013684272766, 0.09021265059709549, 0.09153348207473755, 0.09298639744520187], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}]