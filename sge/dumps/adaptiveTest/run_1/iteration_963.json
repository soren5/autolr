[{"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [6, 8, 4, 2, 8, 5, 9, 8, 6, 1, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [90, 95, 52, 66, 2, 57, 35, 9, 54, 64], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.831428587436676, "mapping_values": [1, 4, 4, 2, 2, 1, 13, 13, 9, 4, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.square(alpha))), tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.sqrt(tf.math.divide_no_nan(grad, tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.908700887679172, 1.4092315877149952, 0.9491239902428695, 0.8564164408083684, 0.7758991043675671, 0.7064105339054072, 0.6795820869537881, 0.6536027846272123, 0.652954837744026, 0.6230550970714389, 0.6114333770719454, 0.5806131857245463, 0.5741227301844611, 0.5499029734965722, 0.5597644956781722, 0.5448176560699821, 0.5132483557829091, 0.49542850758248097, 0.5027845944663585, 0.4849443996051803, 0.48389494880047834, 0.4671660848321097, 0.4541811408533349, 0.4623045335553184, 0.443784386128199, 0.43936292032571345, 0.4549628285652516, 0.42363300244443847, 0.4257627287875896, 0.40082347544192826, 0.40581399224390524, 0.39992696337333966, 0.4022699741442694, 0.3804825589389471, 0.39883702354912337, 0.3805421997905329, 0.3629617197772437, 0.36777096070381693, 0.35938600018638206, 0.3614802607148787, 0.35307403749415683, 0.330283295126513, 0.3370084402473328], "accuracy": [0.3609826862812042, 0.5209351181983948, 0.6530181169509888, 0.6789063811302185, 0.7120591998100281, 0.7313432693481445, 0.7458723783493042, 0.7506273984909058, 0.7537974119186401, 0.767930269241333, 0.7700436115264893, 0.7857614755630493, 0.7848368883132935, 0.7950072884559631, 0.7833839654922485, 0.7965922355651855, 0.8090080618858337, 0.8156121969223022, 0.8128384351730347, 0.8211596608161926, 0.8240655064582825, 0.8274996876716614, 0.8318583965301514, 0.8297450542449951, 0.8350284099578857, 0.8392550349235535, 0.8317263126373291, 0.8399154543876648, 0.8412362933158875, 0.848368763923645, 0.8481045961380005, 0.8511425256729126, 0.8499537706375122, 0.8609166741371155, 0.8560295701026917, 0.8602562546730042, 0.8691058158874512, 0.8667283058166504, 0.8663320541381836, 0.8671245574951172, 0.8705587387084961, 0.876370370388031, 0.8754457831382751], "val_loss": [1.5494826521192278, 0.8939007690974644, 0.6021525859832764, 0.5842746155602592, 0.5746914999825614, 0.5121313333511353, 0.5206658499581474, 0.5552623271942139, 0.4861312764031546, 0.472321833883013, 0.46759988580431255, 0.4585604156766619, 0.44724864619118826, 0.46579863343920025, 0.43369197845458984, 0.42278399637767244, 0.40956568717956543, 0.40103834867477417, 0.4242038471358163, 0.39954486915043425, 0.3895554116794041, 0.39930697849818636, 0.38114952189581736, 0.3784090791429792, 0.40817181553159443, 0.381770840712956, 0.39306551218032837, 0.3661347712789263, 0.3667372039386204, 0.3709625686917986, 0.38902156693594797, 0.353768059185573, 0.3679730551583426, 0.3525961296898978, 0.3360351834978376, 0.33763473374503, 0.3620900341442653, 0.3364598751068115, 0.3442169002124241, 0.3532424143382481, 0.3366877777235849, 0.35253453254699707, 0.3410294141088213], "val_accuracy": [0.32233333587646484, 0.6076666712760925, 0.7333333492279053, 0.7423333525657654, 0.7306666374206543, 0.778333306312561, 0.7676666378974915, 0.7436666488647461, 0.7919999957084656, 0.7870000004768372, 0.7973333597183228, 0.8016666769981384, 0.7983333468437195, 0.7866666913032532, 0.8143333196640015, 0.8226666450500488, 0.8220000267028809, 0.8306666612625122, 0.8103333115577698, 0.8309999704360962, 0.8353333473205566, 0.8323333263397217, 0.8373333215713501, 0.8370000123977661, 0.8206666707992554, 0.8370000123977661, 0.8296666741371155, 0.8479999899864197, 0.8429999947547913, 0.8403333425521851, 0.8316666483879089, 0.8546666502952576, 0.8416666388511658, 0.8539999723434448, 0.8583333492279053, 0.8560000061988831, 0.840666651725769, 0.8619999885559082, 0.8536666631698608, 0.8500000238418579, 0.859333336353302, 0.8456666469573975, 0.8566666841506958]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 0, 4, 2, 0, 0, 9, 2, 8, 0, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [2, 1, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [90, 95, 52, 66, 2, 57, 35, 9, 54, 64], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8214285969734192, "mapping_values": [1, 4, 4, 2, 2, 1, 13, 13, 9, 4, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.pow(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.negative(alpha))), tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.add(tf.math.sqrt(grad), grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.908758972960535, 1.410300533525255, 0.9584498147859928, 0.8509311609343138, 0.7479448112451389, 0.7158575628994478, 0.6773260151233026, 0.6573514098331299, 0.6534959042328948, 0.6313142078018239, 0.6037959768992247, 0.5914609235480256, 0.5748510630202253, 0.5539227702189052, 0.5566757649021882, 0.5358741330338381, 0.5126921235058585, 0.4958485560748776, 0.4962804805585312, 0.4900638639116016, 0.4828671587377948, 0.46871303886139726, 0.4562073175571126, 0.46175646388677166, 0.44499086702284074, 0.44130108433550125], "accuracy": [0.3609826862812042, 0.5208030939102173, 0.6483951807022095, 0.6762647032737732, 0.7197200059890747, 0.7298903465270996, 0.746268630027771, 0.7532690763473511, 0.7504953145980835, 0.7614582180976868, 0.7751948237419128, 0.7771760821342468, 0.7852331399917603, 0.7935543656349182, 0.7853652238845825, 0.800290584564209, 0.8084797263145447, 0.8177255392074585, 0.8153480291366577, 0.816008448600769, 0.8256505131721497, 0.8280280232429504, 0.8317263126373291, 0.830669641494751, 0.8347642421722412, 0.8379341959953308], "val_loss": [1.5510828495025635, 0.915024961744036, 0.6048618044172015, 0.5715649979455131, 0.5774939400809151, 0.5220836400985718, 0.5357475791658673, 0.5279375995908465, 0.48915198871067594, 0.472464850970677, 0.4806087017059326, 0.4639988967350551, 0.45594871044158936, 0.4442378112248012, 0.43689353125435965, 0.4191858172416687, 0.4088602917534964, 0.40421890360968454, 0.448854923248291, 0.40158543416431974, 0.3853156396320888, 0.3993652377809797, 0.38166812488010954, 0.38649024282182964, 0.40745091438293457, 0.3822899971689497], "val_accuracy": [0.32199999690055847, 0.6073333621025085, 0.7300000190734863, 0.7513333559036255, 0.7276666760444641, 0.7726666927337646, 0.7519999742507935, 0.7553333044052124, 0.7873333096504211, 0.7836666703224182, 0.7786666750907898, 0.7973333597183228, 0.7973333597183228, 0.8036666512489319, 0.8136666417121887, 0.8273333311080933, 0.8243333101272583, 0.8316666483879089, 0.7900000214576721, 0.828000009059906, 0.8396666646003723, 0.8320000171661377, 0.8320000171661377, 0.8293333053588867, 0.8203333616256714, 0.8356666564941406]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [6, 8, 4, 2, 0, 2, 9, 4, 6, 1, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [2, 1, 2, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [59, 72, 52, 66, 2, 57, 35, 9, 54, 64], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8197143077850342, "mapping_values": [1, 4, 4, 2, 2, 1, 11, 11, 7, 4, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, tf.math.pow(beta, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(alpha, beta))), grad))))), tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9139146233089943, 1.384617217968578, 0.9541825957113111, 0.8483020388502187, 0.7179297655092617, 0.737487404904802, 0.684126235435447, 0.651760241114909, 0.6613586939494402, 0.6250344417145884, 0.5942844561912664, 0.577342918024339, 0.5658986796682159, 0.5608675711505433, 0.5477377705412801, 0.5372032595820762, 0.5146349759354426, 0.49970088506481825, 0.49668798839820766, 0.48803372967512443, 0.4780987051806792, 0.47008124794139367, 0.4598662487945033, 0.45628452750953463, 0.43708528136816543, 0.43824790981246997, 0.44401105295996135, 0.4220514428448668, 0.4237215446089048, 0.3968900444524604, 0.41151238438034765, 0.39323861598417414, 0.40507012225806577, 0.3844225214472725, 0.38907024108848676, 0.38211296198232975, 0.35382746753439437, 0.3628613742122781, 0.3574672544896878, 0.35415319880915197, 0.34750159758114463], "accuracy": [0.35860520601272583, 0.5357284545898438, 0.651168942451477, 0.6793025732040405, 0.7351737022399902, 0.7218332886695862, 0.7368907928466797, 0.7563069462776184, 0.7486461400985718, 0.7640998363494873, 0.7775723338127136, 0.783119797706604, 0.791441023349762, 0.7928939461708069, 0.7874785661697388, 0.8010830879211426, 0.8094043135643005, 0.8157442808151245, 0.8178576231002808, 0.8158763647079468, 0.8293488025665283, 0.826310932636261, 0.8322546482086182, 0.8293488025665283, 0.8387266993522644, 0.8376700282096863, 0.833179235458374, 0.8428213000297546, 0.847840428352356, 0.8495575189590454, 0.8485008478164673, 0.8541803956031799, 0.8475762605667114, 0.8574824929237366, 0.859199583530426, 0.856689989566803, 0.8685774803161621, 0.8661999702453613, 0.867520809173584, 0.8735966086387634, 0.8742570281028748], "val_loss": [1.5381572927747453, 0.8712725469044277, 0.6186180114746094, 0.5916718414851597, 0.5671046461377826, 0.5361508982522147, 0.5265533413205828, 0.4895723717553275, 0.4858250447681972, 0.4759270293372018, 0.46191232545035227, 0.4542115756443569, 0.47265580722263884, 0.4467660869870867, 0.432934718472617, 0.41978038208825247, 0.40732515709740774, 0.40200118507657734, 0.4525722435542515, 0.3981406092643738, 0.389761745929718, 0.3935017841202872, 0.3805175508771624, 0.3758341840335301, 0.40650167635508944, 0.3926105243819101, 0.39411704880850656, 0.36233473675591604, 0.3641039558819362, 0.37980784688677105, 0.3751061132975987, 0.35425212553569246, 0.3618014795439584, 0.3579180751528059, 0.3333107488495963, 0.3346781645502363, 0.35516412769045147, 0.3440022724015372, 0.3485350949423654, 0.3496432219232832, 0.3438147561890738], "val_accuracy": [0.34466665983200073, 0.6016666889190674, 0.7303333282470703, 0.7366666793823242, 0.734000027179718, 0.7676666378974915, 0.762333333492279, 0.7766666412353516, 0.7906666398048401, 0.7860000133514404, 0.8040000200271606, 0.8053333163261414, 0.7889999747276306, 0.8026666641235352, 0.8163333535194397, 0.8196666836738586, 0.824999988079071, 0.831333339214325, 0.7889999747276306, 0.8276666402816772, 0.8336666822433472, 0.8356666564941406, 0.8360000252723694, 0.8333333134651184, 0.8223333358764648, 0.8236666917800903, 0.8273333311080933, 0.8529999852180481, 0.840666651725769, 0.8346666693687439, 0.8426666855812073, 0.8533333539962769, 0.8450000286102295, 0.8543333411216736, 0.856333315372467, 0.8600000143051147, 0.8453333377838135, 0.8546666502952576, 0.8486666679382324, 0.8486666679382324, 0.8569999933242798]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [6, 8, 4, 2, 0, 4, 9, 8, 6, 1, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [2, 1, 2, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [90, 95, 52, 66, 2, 57, 35, 9, 54, 64], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8157142996788025, "mapping_values": [1, 4, 4, 2, 2, 1, 16, 16, 10, 6, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, tf.math.pow(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.pow(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.sqrt(tf.math.divide_no_nan(beta, grad))))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9139989037885956, 1.3874879397610316, 0.9571614798270102, 0.817498185402839, 0.7367353181340801, 0.748102188551226, 0.697435657637325, 0.6665644945721695, 0.6546729544622708, 0.6294739174883773, 0.6069765867353698, 0.5753849653236587, 0.5947419302165311, 0.5581895437585113, 0.5631789376455102, 0.5380233685180826, 0.516129656647962, 0.5056661254324225, 0.5034075824576063, 0.48891170476216994, 0.4833567495382914, 0.4740525045060778, 0.4606862973858258, 0.46651834601802344, 0.44359503249293225, 0.4397762825208459], "accuracy": [0.35886937379837036, 0.535332202911377, 0.6468101739883423, 0.6910579800605774, 0.7264562249183655, 0.7197200059890747, 0.7323999404907227, 0.7467969655990601, 0.7543256878852844, 0.7619865536689758, 0.7705719470977783, 0.7849689722061157, 0.7761194109916687, 0.7897239327430725, 0.7864218950271606, 0.8004226684570312, 0.8082155585289001, 0.8142913579940796, 0.8108572363853455, 0.8198388814926147, 0.8236692547798157, 0.8278959393501282, 0.8300092220306396, 0.8245938420295715, 0.8358209133148193, 0.8396512866020203], "val_loss": [1.541241134916033, 0.8834283692496163, 0.6175657851355416, 0.6149273089000157, 0.5859232119151524, 0.528614912714277, 0.533615129334586, 0.49569530146462576, 0.48516946179526194, 0.4786533457892282, 0.47052458354404997, 0.44739515440804617, 0.4508117948259626, 0.5112795148577008, 0.4333509462220328, 0.42113631112234934, 0.4162335480962481, 0.3994239568710327, 0.43508483682359966, 0.4038638472557068, 0.3830914667674473, 0.4006978017943246, 0.3824972169739859, 0.3803844026156834, 0.40538404669080463, 0.38056974751608713], "val_accuracy": [0.3423333466053009, 0.6000000238418579, 0.7296666502952576, 0.7070000171661377, 0.7253333330154419, 0.7646666765213013, 0.7616666555404663, 0.7786666750907898, 0.7973333597183228, 0.7850000262260437, 0.8013333082199097, 0.8066666722297668, 0.8019999861717224, 0.7649999856948853, 0.8153333067893982, 0.8183333277702332, 0.8163333535194397, 0.8370000123977661, 0.8063333630561829, 0.8296666741371155, 0.8386666774749756, 0.8299999833106995, 0.8343333601951599, 0.8306666612625122, 0.8253333568572998, 0.8376666903495789]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [10, 66, 89, 50, 85, 46], [0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [9, 5, 4, 2, 1, 6, 9, 4, 6, 1, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [92, 95, 52, 66, 2, 57, 35, 9, 54, 64], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.7428571581840515, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3026055143084494, 2.295865176832829, 2.284591386598792, 2.2688572675387273, 2.244964551617047, 2.221150199923895, 2.1872204395569295, 2.142441886306801, 2.079780012876949, 1.9992785010875067, 1.892331299575848, 1.7645586471925432, 1.631801255563971, 1.5134093359303653, 1.4394822640268479, 1.385923947451562, 1.3772221795320039, 1.3899694370193694, 1.3508648396388587, 1.3056250796137296, 1.2091135958701926, 1.152465889309344, 1.054047607049777, 0.957816381496036, 0.9143100881683608, 0.8886528049776851, 0.9010369036852991, 0.9063718703838308, 0.9104728353903704, 0.9012007078537458, 0.8716614347533338, 0.8437325181647409, 0.8164396998337814, 0.8128092669382575], "accuracy": [0.08955223858356476, 0.09998679161071777, 0.13802668452262878, 0.1822744756937027, 0.2510896921157837, 0.2900541424751282, 0.3283582031726837, 0.35385021567344666, 0.37828555703163147, 0.4035134017467499, 0.4220050275325775, 0.43851539492607117, 0.450931191444397, 0.47404569387435913, 0.5032360553741455, 0.5192180871963501, 0.5255580544471741, 0.5418042540550232, 0.5565975308418274, 0.5744287371635437, 0.600581169128418, 0.6181482076644897, 0.6392814517021179, 0.6502443552017212, 0.658961832523346, 0.6688680648803711, 0.6567164063453674, 0.6604147553443909, 0.6679434776306152, 0.6820763349533081, 0.6856426000595093, 0.6870955228805542, 0.6921146512031555, 0.691850483417511], "val_loss": [1.9679248673575265, 1.9597249712262834, 1.9466906956263952, 1.9292044639587402, 1.907327515738351, 1.8799870354788644, 1.84429931640625, 1.7955616542271204, 1.7284541811261858, 1.637242215020316, 1.5179377964564733, 1.3752384185791016, 1.2248975890023368, 1.0892081260681152, 0.9799343517848423, 0.892162663596017, 0.8228567498070853, 0.7911073820931571, 0.7624743495668683, 0.7296593189239502, 0.7314837319510323, 0.723792314529419, 0.686328615461077, 0.6587131193705967, 0.6611166170665196, 0.6733726263046265, 0.6867155517850604, 0.6963199887956891, 0.6943599837166923, 0.6772335256849017, 0.6503983054842267, 0.6259582553591047, 0.6110630886895316, 0.6061479193823678], "val_accuracy": [0.05833333358168602, 0.13099999725818634, 0.2633333206176758, 0.3529999852180481, 0.3816666603088379, 0.4046666622161865, 0.4203333258628845, 0.437666654586792, 0.4586666524410248, 0.4866666793823242, 0.5136666893959045, 0.5473333597183228, 0.5770000219345093, 0.6083333492279053, 0.643666684627533, 0.6690000295639038, 0.6796666383743286, 0.6743333339691162, 0.6836666464805603, 0.7053333520889282, 0.7133333086967468, 0.718666672706604, 0.718666672706604, 0.7223333120346069, 0.7273333072662354, 0.7073333263397217, 0.7056666612625122, 0.7236666679382324, 0.7400000095367432, 0.7366666793823242, 0.7283333539962769, 0.7319999933242798, 0.7323333621025085, 0.7310000061988831]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [10, 66, 89, 50, 85, 46], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [2, 2, 5, 2, 0, 0, 5, 2, 8, 0, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [90, 95, 52, 66, 2, 57, 35, 9, 54, 64], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.404285728931427, "mapping_values": [1, 4, 4, 2, 2, 1, 15, 15, 10, 5, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, grad), tf.math.sqrt(grad)))))))))))), grad)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.303168352395631, 2.301372492837711, 2.3005689709902346, 2.3005398003149025, 2.2975387687554623, 2.299429587274888, 2.298047369119435, 2.29781906863938, 2.295676512252763, 2.293890357348173, 2.295905530791257, 2.2943712783259738, 2.2924238691051575, 2.2923698304682327, 2.292564788845316, 2.291034509319718, 2.290592598830074, 2.2903782706990645, 2.288300203467719, 2.2890137644208353, 2.28806659917412, 2.289181746669402, 2.28690508762607, 2.2857070321561856, 2.284854282808184, 2.284862104360973, 2.2835684849869198, 2.2826570503747283, 2.2821789189667325, 2.2807193627809066, 2.281335062653775, 2.278940021401273, 2.2791904319530905, 2.2778038347811354, 2.2776417390246197, 2.2776460858887813, 2.2754219384508962, 2.275049749728853, 2.2752921398935255, 2.274799170700031, 2.274531837971518, 2.2719043641751075, 2.2722919902403467, 2.271218051779398, 2.26839548387957, 2.269443432448043, 2.269080719534023, 2.2672563937235943, 2.267733586793405, 2.2673778082354192, 2.264661350774255, 2.265261558068663, 2.26458315990384, 2.2651870078445975, 2.264350364961172, 2.2628671718925424, 2.26328103187424, 2.2592250805457885, 2.2591558078717497, 2.259563465915761, 2.256588957139986, 2.2583169025783416, 2.255288724586901, 2.255218545128688, 2.2553985409528163, 2.2566104161347287, 2.253096720199575, 2.249671161670758, 2.252604021765946, 2.2505521970166193, 2.2496610518223608, 2.249376978022059, 2.248448856943524, 2.249116253559978, 2.2465858184555976, 2.2483108154833986, 2.24467917276553, 2.2450495372122745, 2.243952202365509, 2.242711334999416, 2.2409400072048653, 2.2396609309862443, 2.2396248218925354, 2.2391843206264306, 2.238015732382897, 2.238754074917714, 2.2355278156153546, 2.2355583569692064, 2.2337106571630825, 2.232359980422083, 2.2316343217808665, 2.2318705466949016, 2.2263435658966437, 2.229695922899177, 2.2287497115157238, 2.2267749276159305, 2.2265648170469174, 2.2284222450616604, 2.225773646264359, 2.2226152910989083], "accuracy": [0.0886276587843895, 0.08955223858356476, 0.09179764986038208, 0.09430722147226334, 0.10513802617788315, 0.09840179979801178, 0.10368511080741882, 0.09721305221319199, 0.10817593336105347, 0.10659094154834747, 0.10500594228506088, 0.11253467202186584, 0.11649715900421143, 0.11279883980751038, 0.1146479994058609, 0.11530841141939163, 0.11768590658903122, 0.11649715900421143, 0.12719587981700897, 0.1258750557899475, 0.12455421686172485, 0.1220446452498436, 0.1306300312280655, 0.13076211512088776, 0.12878087162971497, 0.13353586196899414, 0.1328754425048828, 0.1340641975402832, 0.1402720957994461, 0.1450270712375641, 0.13934750854969025, 0.15519747138023376, 0.14951789379119873, 0.15149913728237152, 0.1554616242647171, 0.15334829688072205, 0.16457535326480865, 0.16523577272891998, 0.1578391194343567, 0.16536785662174225, 0.16431118547916412, 0.1682736724615097, 0.16972659528255463, 0.17672698199748993, 0.17751948535442352, 0.1850482076406479, 0.17699114978313446, 0.187689870595932, 0.17936864495277405, 0.18280279636383057, 0.19059570133686066, 0.1888786107301712, 0.1946902722120285, 0.186104878783226, 0.1966715157032013, 0.1958790123462677, 0.19416193664073944, 0.19878484308719635, 0.2036719024181366, 0.20538897812366486, 0.21133272349834442, 0.2028794139623642, 0.20921939611434937, 0.21120063960552216, 0.2067098170518875, 0.21001188457012177, 0.22044643759727478, 0.23365473747253418, 0.21212521195411682, 0.2238806039094925, 0.22797517478466034, 0.2308809906244278, 0.22956016659736633, 0.22572976350784302, 0.22797517478466034, 0.22639016807079315, 0.23656055331230164, 0.23537181317806244, 0.23418307304382324, 0.23656055331230164, 0.244485542178154, 0.25214633345603943, 0.24422137439250946, 0.2413155436515808, 0.24963676929473877, 0.23933430016040802, 0.2502971887588501, 0.25742965936660767, 0.26495838165283203, 0.26363757252693176, 0.25822216272354126, 0.2642979919910431, 0.27301543951034546, 0.26363757252693176, 0.2631092369556427, 0.272090882062912, 0.26561880111694336, 0.26099589467048645, 0.26535463333129883, 0.27843084931373596], "val_loss": [1.97027131489345, 1.9696061270577567, 1.9689444133213587, 1.9682819502694267, 1.9676156044006348, 1.9669568198067802, 1.966306413922991, 1.9656530107770647, 1.964998381478446, 1.9643455232892717, 1.9636896678379603, 1.9630344254629952, 1.962381022317069, 1.961726120540074, 1.961078711918422, 1.9604269436427526, 1.9597796712602888, 1.9591315133231026, 1.9584845815386092, 1.9578376497541154, 1.9571905136108398, 1.9565448079790388, 1.955897263118199, 1.9552457673209054, 1.954598835536412, 1.9539504051208496, 1.9532965932573592, 1.9526472772870744, 1.9520011629377092, 1.9513447625296456, 1.9506893157958984, 1.9500391823904855, 1.9493774686540877, 1.9487175260271346, 1.9480596951075964, 1.9473980494907923, 1.9467408316476005, 1.9460808209010534, 1.945416041782924, 1.944744382585798, 1.9440767424447196, 1.9434029034205846, 1.9427282469613212, 1.9420576776776994, 1.9413787296840124, 1.9406967163085938, 1.940014089856829, 1.9393256051199776, 1.938633578164237, 1.9379465920584542, 1.9372521809169225, 1.936558450971331, 1.935851778302874, 1.9351500102451868, 1.9344469479152135, 1.9337375504629952, 1.9330312865121024, 1.9323088782174247, 1.931589194706508, 1.9308738027300154, 1.9301445143563407, 1.9294088227408273, 1.9286749022347587, 1.9279351234436035, 1.927196979522705, 1.9264520917619978, 1.925699234008789, 1.9249300275530135, 1.9241714477539062, 1.923398699079241, 1.9226280621119909, 1.921848910195487, 1.921060630253383, 1.9202794347490584, 1.9194914954049247, 1.918701444353376, 1.9178988592965263, 1.9170981815883092, 1.9162955284118652, 1.9154836790902274, 1.9146678107125419, 1.9138422012329102, 1.9130142756870814, 1.9121838297162737, 1.9113468442644392, 1.9104975291660853, 1.9096437862941198, 1.9087822777884347, 1.9079173633030482, 1.9070435932704382, 1.9061544282095773, 1.9052703721182687, 1.9043628147670202, 1.9034716742379325, 1.902569362095424, 1.9016515868050712, 1.9007369450160436, 1.8998171261378698, 1.8988983971732003, 1.8979520797729492], "val_accuracy": [0.04233333468437195, 0.045666664838790894, 0.05000000074505806, 0.054999999701976776, 0.058666665107011795, 0.06433333456516266, 0.07100000232458115, 0.07366666942834854, 0.07833333313465118, 0.0833333358168602, 0.08900000154972076, 0.09600000083446503, 0.10499999672174454, 0.109333336353302, 0.11633333563804626, 0.12166666984558105, 0.12999999523162842, 0.13766667246818542, 0.14499999582767487, 0.1536666601896286, 0.1599999964237213, 0.1653333306312561, 0.17100000381469727, 0.1756666600704193, 0.18199999630451202, 0.18733333051204681, 0.19433332979679108, 0.20200000703334808, 0.20866666734218597, 0.2150000035762787, 0.22166666388511658, 0.2290000021457672, 0.23499999940395355, 0.24133333563804626, 0.24699999392032623, 0.2549999952316284, 0.2606666684150696, 0.26633334159851074, 0.27000001072883606, 0.27433332800865173, 0.2796666622161865, 0.2840000092983246, 0.28866666555404663, 0.2919999957084656, 0.29600000381469727, 0.3019999861717224, 0.3073333203792572, 0.31033334136009216, 0.3140000104904175, 0.31833332777023315, 0.32366666197776794, 0.32866665720939636, 0.3319999873638153, 0.3346666693687439, 0.33666667342185974, 0.3409999907016754, 0.34433332085609436, 0.3473333418369293, 0.35066667199134827, 0.3556666672229767, 0.3566666543483734, 0.3580000102519989, 0.3630000054836273, 0.3646666705608368, 0.367000013589859, 0.36933332681655884, 0.3726666569709778, 0.37400001287460327, 0.37566667795181274, 0.3763333261013031, 0.37700000405311584, 0.3803333342075348, 0.38100001215934753, 0.3840000033378601, 0.3866666555404663, 0.38733333349227905, 0.3883333206176758, 0.3903333246707916, 0.39100000262260437, 0.39100000262260437, 0.3933333456516266, 0.3933333456516266, 0.3956666588783264, 0.3970000147819519, 0.39766666293144226, 0.398333340883255, 0.398333340883255, 0.4000000059604645, 0.4023333191871643, 0.40400001406669617, 0.4046666622161865, 0.4059999883174896, 0.40666666626930237, 0.40700000524520874, 0.40833333134651184, 0.4099999964237213, 0.41100001335144043, 0.4113333225250244, 0.41200000047683716, 0.41333332657814026]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 9, 2, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [4, 5, 4, 2, 0, 2, 2, 8, 8, 1, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [59, 95, 52, 66, 2, 57, 35, 9, 54, 64], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 17, 17, 10, 7, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))))), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), grad))), tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(tf.math.add(tf.math.sqrt(grad), tf.math.sqrt(grad)), tf.math.subtract(tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), grad))), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 6, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 2, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [0, 0, 4, 0, 6, 2, 2, 8, 4, 1, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [59, 72, 52, 66, 2, 57, 35, 9, 54, 64], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [0, 0], [69, 2], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 0, 5, 5, 3, 2, 0, 1, 0, 0, 0, 0, 6, 3, 3, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.negative(tf.math.add(beta, tf.math.pow(alpha, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.square(tf.math.multiply(beta, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [55, 66, 89, 50, 85, 46], [0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [4, 0, 4, 4, 0, 5, 9, 8, 8, 4, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [59, 72, 52, 66, 2, 57, 35, 9, 54, 64], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [1, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [9.698804552780874, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.21621978282928467, 0.1080438494682312, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2249.532645089286, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09166666865348816, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 6, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [6, 9, 4, 6, 0, 4, 3, 8, 8, 8, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [3, 3, 3, 2, 0, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [59, 95, 52, 66, 2, 57, 35, 9, 54, 64], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 18, 10, 8, 2, 8, 8, 5, 3, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.sqrt(grad), tf.math.add(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.negative(tf.math.subtract(tf.math.add(alpha, alpha), grad)), tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.negative(grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [2, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [4, 5, 4, 2, 0, 2, 9, 4, 2, 1, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [2, 1, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [73, 95, 52, 66, 2, 57, 35, 9, 54, 64], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 17, 17, 10, 7, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.pow(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.pow(tf.math.add(grad, grad), tf.math.subtract(tf.math.add(beta, grad), grad)))))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.301893077049714, 2.302220830953888, 2.302485513712327, 2.3032737877296183, 2.3070372522719675, 2.327253597381959], "accuracy": [0.10553427785634995, 0.10566636174917221, 0.10487385839223862, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973625591823033, 1.9736823354448592, 1.973945072719029, 1.9754492214747839, 1.9831764357430595, 2.0248853819710866], "val_accuracy": [0.10233332961797714, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [0, 66, 89, 50, 85, 46], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [1, 0, 4, 0, 6, 2, 2, 8, 4, 1, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [0, 3, 3, 3, 0, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [90, 95, 52, 66, 2, 57, 35, 9, 54, 64], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 22, 22, 13, 9, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(grad, tf.math.add(alpha, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.sqrt(grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.math.sqrt(grad)), tf.math.pow(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), grad))))), tf.math.add(beta, grad))))))), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.negative(tf.math.sqrt(tf.math.add(beta, grad)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 4, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [14, 66, 89, 50, 85, 46], [0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [6, 8, 4, 2, 0, 2, 5, 8, 6, 1, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [2, 1, 2, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [59, 72, 52, 66, 2, 57, 35, 9, 54, 64], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 2, 17, 17, 10, 7, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)), tf.math.pow(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, tf.math.negative(alpha)))), tf.math.add(tf.math.square(tf.math.add(beta, beta)), grad)))), tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), grad)), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [3.059036903598006, 9.387043935810775, 23.097332651714968, 45.675659348479414, 75.70271691959832, 116.47971468245144], "accuracy": [0.0952318087220192, 0.09998679161071777, 0.09681680053472519, 0.09760929644107819, 0.1006472036242485, 0.10276053100824356], "val_loss": [3.431133883340018, 9.677183423723493, 20.838631221226283, 37.34819030761719, 61.03934805733817, 89.1895773751395], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 8, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 0, 4, 5, 0, 0, 9, 2, 8, 0, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [90, 95, 52, 66, 2, 57, 35, 9, 54, 64], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 8, 8, 5, 3, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.pow(grad, tf.math.square(tf.math.add(beta, tf.math.negative(alpha))))))), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06577730923891068, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [4, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [4, 0, 4, 6, 0, 0, 9, 2, 8, 0, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [2, 1, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [90, 95, 52, 66, 2, 57, 35, 9, 54, 64], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 13, 13, 9, 4, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.pow(beta, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.negative(tf.math.add(beta, alpha)))), tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.math.add(tf.math.sqrt(grad), grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [4, 5, 4, 2, 9, 2, 9, 4, 6, 1, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [2, 3, 2, 1, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [80, 72, 52, 66, 2, 57, 35, 9, 54, 64], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.sqrt(grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [2, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 0, 4, 2, 0, 0, 9, 2, 8, 0, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [2, 1, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [90, 95, 52, 66, 2, 57, 35, 9, 54, 64], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [0, 0], [69, 2], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 4, 4, 2, 2, 0, 1, 0, 0, 0, 0, 6, 3, 3, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), tf.math.negative(tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.square(tf.math.multiply(beta, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07370228320360184, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 2, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [6, 8, 4, 2, 0, 2, 9, 8, 6, 1, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [59, 72, 52, 66, 2, 57, 35, 9, 54, 64], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.07342857122421265, "mapping_values": [1, 4, 4, 2, 2, 0, 12, 12, 8, 4, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(grad, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)))))), tf.math.sqrt(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.303054036843448, 2.3012705912695206, 2.3008073603771524, 2.300817229854527, 2.298848263072048, 2.3008715780797555, 2.3006023373727897, 2.3004469921906643, 2.299487569186949, 2.298630960487403, 2.300599523302964, 2.2999775921112793, 2.2999482332770502, 2.2998786082183993, 2.3005650555531676, 2.3004376875993646], "accuracy": [0.0886276587843895, 0.08809932321310043, 0.09140139818191528, 0.09576013684272766, 0.09945846349000931, 0.09549596905708313, 0.09813763201236725, 0.0940430611371994, 0.09853387624025345, 0.10342095047235489, 0.09800554811954498, 0.10196803510189056, 0.09893012791872025, 0.09998679161071777, 0.09747721254825592, 0.09351472556591034], "val_loss": [1.9702398436410087, 1.9698959759303503, 1.9697517667497908, 1.969609601157052, 1.969642230442592, 1.9696563993181502, 1.969649110521589, 1.96951539175851, 1.9695520401000977, 1.9696966579982214, 1.9699202265058244, 1.9701625279017858, 1.9704564639500208, 1.9706985609872, 1.9709138870239258, 1.9710934502737862], "val_accuracy": [0.04533333331346512, 0.05433333292603493, 0.05700000002980232, 0.061666667461395264, 0.06499999761581421, 0.07233333587646484, 0.07500000298023224, 0.07800000160932541, 0.07699999958276749, 0.07800000160932541, 0.0793333351612091, 0.07800000160932541, 0.07666666805744171, 0.07366666942834854, 0.0716666653752327, 0.07233333587646484]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [1, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [10, 66, 89, 50, 85, 46], [0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [4, 5, 4, 5, 0, 2, 9, 8, 8, 1, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [0, 3, 2, 0, 0, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [59, 95, 52, 66, 2, 57, 35, 9, 54, 64], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.04171428456902504, "mapping_values": [1, 4, 4, 2, 2, 1, 11, 11, 8, 3, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.square(tf.math.pow(tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(beta)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.303470729789588, 2.302406186393664, 2.3023313410356767, 2.3030342210820796, 2.3007594146559724, 2.3033698378867635], "accuracy": [0.0874389111995697, 0.0878351628780365, 0.0878351628780365, 0.08809932321310043, 0.09760929644107819, 0.08902391046285629], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [5, 9, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [10, 66, 89, 50, 85, 46], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [4, 5, 4, 6, 0, 2, 9, 4, 6, 0, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [0, 3, 3, 3, 0, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [59, 32, 52, 66, 2, 57, 35, 9, 54, 64], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [4, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.036571428179740906, "mapping_values": [1, 2, 2, 1, 1, 0, 11, 11, 6, 5, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.pow(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(grad, grad))), tf.math.add(beta, grad))))))), tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.303919136626546, 2.3040555481110205, 2.3055641522355255, 2.308777451090069, 2.308291262387442, 2.3152163534148054], "accuracy": [0.08572183549404144, 0.08321225643157959, 0.08598599582910538, 0.08255184441804886, 0.0866464152932167, 0.07726852595806122], "val_loss": [1.9718114307948522, 1.9727599280221122, 1.9740262031555176, 1.9758219037737166, 1.9777402196611678, 1.979977743966239], "val_accuracy": [0.03433333337306976, 0.02666666731238365, 0.02199999988079071, 0.01666666753590107, 0.020666666328907013, 0.028999999165534973]}}]