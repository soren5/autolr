[{"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [4, 6, 9, 3, 2, 2, 3, 9, 8, 1, 7, 7, 4, 9, 2, 4, 2], [1, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0], [85, 80, 63], [0, 1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8408571481704712, "mapping_values": [1, 4, 4, 2, 2, 1, 5, 5, 3, 2, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.0832750438746364, 1.1757749297741367, 0.8277461320937286, 0.7376993826084038, 0.672534520489712, 0.6283871244052146, 0.5803208425611537, 0.5509158896417382, 0.5181442221331165, 0.4943794845912781, 0.47696551044839736, 0.45085868415752534, 0.433200956563971, 0.42051144876988367, 0.41180571643683606, 0.3932217627452774, 0.3748898121973999, 0.36177223804698977, 0.3592710009639636, 0.35696642370649756, 0.34283961164575005, 0.33591595824289755, 0.32010015525664826, 0.316667434270466, 0.2999187720221866, 0.2912792923971332, 0.2896729874502257, 0.29072462877876426, 0.2727015465242106, 0.2559352367151966, 0.2606237975204185, 0.254627374454638, 0.254150820922354], "accuracy": [0.28899750113487244, 0.5918636918067932, 0.6892088055610657, 0.7168141603469849, 0.7473253011703491, 0.7633073329925537, 0.7825914621353149, 0.7951393723487854, 0.8025360107421875, 0.813498854637146, 0.8235371708869934, 0.8305375576019287, 0.8404437899589539, 0.8429533839225769, 0.8457271456718445, 0.8570862412452698, 0.8615770936012268, 0.8654074668884277, 0.8683133125305176, 0.8648791313171387, 0.8753136992454529, 0.8747853636741638, 0.8805969953536987, 0.8799365758895874, 0.8920882344245911, 0.8883898854255676, 0.8903711438179016, 0.8894465565681458, 0.8968431949615479, 0.9015982151031494, 0.8975036144256592, 0.8992207050323486, 0.9001452922821045], "val_loss": [1.0144624369485038, 0.6770704133169991, 0.5676988533564976, 0.5392528091158185, 0.49691482952662874, 0.4754394803728376, 0.44665820258004324, 0.4182197536740984, 0.40037816762924194, 0.3899868982178824, 0.3773695230484009, 0.3675620896475656, 0.3579574397632054, 0.3508963244301932, 0.352686413696834, 0.3449627331324986, 0.34354160513196674, 0.33569792338779997, 0.33211121388844084, 0.33372775997434345, 0.3321677190916879, 0.3243545378957476, 0.3223495994295393, 0.3119549495833261, 0.30789947509765625, 0.31540547949927195, 0.32120388746261597, 0.31376740762165617, 0.3118803415979658, 0.3191749794142587, 0.31628817319869995, 0.31528100797108244, 0.32895095007760183], "val_accuracy": [0.5933333039283752, 0.7250000238418579, 0.7493333220481873, 0.765666663646698, 0.7799999713897705, 0.7860000133514404, 0.8036666512489319, 0.8220000267028809, 0.8286666870117188, 0.8346666693687439, 0.8416666388511658, 0.846666693687439, 0.8493333458900452, 0.8583333492279053, 0.8556666374206543, 0.8610000014305115, 0.8579999804496765, 0.8666666746139526, 0.8693333268165588, 0.8586666584014893, 0.8636666536331177, 0.8713333606719971, 0.8676666617393494, 0.875333309173584, 0.874666690826416, 0.8730000257492065, 0.8673333525657654, 0.8773333430290222, 0.8736666440963745, 0.8709999918937683, 0.8756666779518127, 0.8703333139419556, 0.8673333525657654]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1], [1, 2, 3, 3, 2, 1, 3, 2, 0, 9, 0, 4, 5, 5, 9, 5, 1, 3, 3, 5, 2, 9, 2, 2, 5, 2, 3], [1, 3, 3, 2, 3, 5, 3, 2, 1, 4, 4, 0, 3, 4, 1, 4, 5, 0], [85, 80, 14, 73], [0, 0, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [8, 1, 8, 4], [4, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8399999737739563, "mapping_values": [1, 4, 4, 2, 2, 1, 33, 33, 22, 11, 3, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.negative(grad), tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), beta), tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.square(tf.math.add(beta, grad)))), tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))))))), grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))))))))))))))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.0832739921057652, 1.1755622156449532, 0.8281481227130308, 0.7369259396690214, 0.6723531686225194, 0.6291348901108004, 0.5819044054822049, 0.55322859964634, 0.5186513291964394, 0.497058422129152, 0.47728555656112404, 0.4522635602026788, 0.43380339855625644, 0.4246743655105576, 0.41358290726262126, 0.3919961246847713, 0.3744296917329926, 0.36389408671246576, 0.3604453992944399, 0.35421099420378566, 0.3447625994123346, 0.3317459636612528, 0.31931658631003434, 0.31593838605300045, 0.2962246154317011, 0.29266897143074994, 0.2884652998114873, 0.2862021330404023, 0.2697591539332108, 0.2540299924251158, 0.2587610922036406, 0.25176696295688467, 0.25421304779951176, 0.25381578483192313, 0.24049248246705102], "accuracy": [0.28899750113487244, 0.5919957756996155, 0.6909258961677551, 0.7174745798110962, 0.7446836829185486, 0.7613261342048645, 0.7810064554214478, 0.7922335267066956, 0.7991018295288086, 0.8113855719566345, 0.8230088353157043, 0.829216718673706, 0.8389908671379089, 0.8380662798881531, 0.8473120927810669, 0.857218325138092, 0.8601241707801819, 0.8646149635314941, 0.8658037185668945, 0.8687095642089844, 0.8746532797813416, 0.8755778670310974, 0.8774270415306091, 0.8828424215316772, 0.8897107243537903, 0.889578640460968, 0.8914278149604797, 0.8908994793891907, 0.8961827754974365, 0.901862382888794, 0.8988244533538818, 0.9030511379241943, 0.9029190540313721, 0.9039757251739502, 0.910711944103241], "val_loss": [1.014385155269078, 0.6761600119726998, 0.5658977372305733, 0.5388271808624268, 0.4962711674826486, 0.47690413679395405, 0.4476837090083531, 0.42065667254584177, 0.4025243180138724, 0.3879926971026829, 0.3779052666255406, 0.36917767354420256, 0.3625574367386954, 0.35148067133767263, 0.3536935108048575, 0.3465123176574707, 0.3435301184654236, 0.33942224298204693, 0.3333327089037214, 0.33634714569364277, 0.32832897560937063, 0.3260314464569092, 0.32039073535374235, 0.3168127281325204, 0.3146109240395682, 0.31639901229313444, 0.30980704511914936, 0.31327205896377563, 0.3110749466078622, 0.31367194652557373, 0.3179927383150373, 0.3242215769631522, 0.3427951761654445, 0.3142904298646109, 0.3233620013509478], "val_accuracy": [0.593666672706604, 0.7246666550636292, 0.7480000257492065, 0.7680000066757202, 0.7820000052452087, 0.7860000133514404, 0.8023333549499512, 0.8176666498184204, 0.82833331823349, 0.8373333215713501, 0.8413333296775818, 0.8463333249092102, 0.8463333249092102, 0.8543333411216736, 0.8539999723434448, 0.8566666841506958, 0.8569999933242798, 0.8659999966621399, 0.8653333187103271, 0.8579999804496765, 0.8646666407585144, 0.8709999918937683, 0.8686666488647461, 0.871999979019165, 0.871999979019165, 0.8683333396911621, 0.8663333058357239, 0.874666690826416, 0.8730000257492065, 0.8790000081062317, 0.8726666569709778, 0.8669999837875366, 0.8640000224113464, 0.8700000047683716, 0.8736666440963745]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [4, 6, 2, 0, 2, 2, 3, 9, 8, 6, 7, 0, 7, 9, 2, 9, 6, 2, 8, 6, 5, 8, 5, 7, 8, 3, 1, 4, 4, 4, 2, 8], [1, 3, 1, 3, 3, 5, 3, 2, 3, 4, 4, 0, 5, 3, 1, 0, 3, 0], [85, 80, 93, 73, 13, 52], [0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8368571400642395, "mapping_values": [1, 4, 4, 2, 2, 1, 50, 50, 32, 18, 6, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, alpha), tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, tf.math.multiply(grad, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad))))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.square(tf.math.sqrt(tf.math.add(beta, tf.math.square(beta))))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(grad)), tf.math.multiply(tf.math.add(beta, tf.math.subtract(grad, grad)), tf.math.add(beta, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))))), tf.math.pow(grad, tf.math.pow(tf.math.pow(tf.math.add(beta, grad), tf.math.add(alpha, tf.math.add(beta, tf.math.sqrt(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad))))))))), tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.0832740010964543, 1.1755520349653594, 0.8284278686854976, 0.736480787729055, 0.6715408909227932, 0.6278304136613451, 0.5804268710916509, 0.5524029998951868, 0.5196106261140115, 0.49801906408367375, 0.478505121840462, 0.4543185015443357, 0.4352411644695898, 0.4243975812260501, 0.4137244508676147, 0.3919325540795098, 0.3735373741867772, 0.36345333795442936, 0.3657169066730696, 0.357158984293665, 0.3474125535874524, 0.33196655886520593, 0.3224819870184693, 0.31912692329902786, 0.3004849896045519, 0.2953135411870982, 0.28979392720723685, 0.28999496732468555, 0.26942734995207623, 0.25492494594167486, 0.2580386264535808, 0.25245302757724336, 0.25104719744248555, 0.24343346617304024, 0.22698880466157104], "accuracy": [0.28899750113487244, 0.5919957756996155, 0.6896050572395325, 0.7187954187393188, 0.7448157668113708, 0.7625148296356201, 0.783119797706604, 0.7950072884559631, 0.8004226684570312, 0.8107251524925232, 0.8226125836372375, 0.83119797706604, 0.8417646288871765, 0.8360850811004639, 0.8451988101005554, 0.8569541573524475, 0.8615770936012268, 0.8651432991027832, 0.8643507957458496, 0.8658037185668945, 0.873860776424408, 0.8780874609947205, 0.8771628737449646, 0.8802007436752319, 0.8861445188522339, 0.8897107243537903, 0.889050304889679, 0.8878615498542786, 0.9000132083892822, 0.8990886211395264, 0.8992207050323486, 0.9001452922821045, 0.902390718460083, 0.9031832218170166, 0.9134856462478638], "val_loss": [1.0143853255680628, 0.6763392346245902, 0.5663936138153076, 0.5391052450452533, 0.49610439368656706, 0.4758857488632202, 0.4468839168548584, 0.4210186260087149, 0.40306982823780607, 0.3892588530267988, 0.3797913874898638, 0.3695750577109201, 0.35923389877591816, 0.35001238754817415, 0.35119002205984934, 0.34505631242479595, 0.3423403671809605, 0.34052289383752005, 0.3325315884181431, 0.3386343376977103, 0.32670559201921734, 0.3245821850640433, 0.3189228091921125, 0.315702634198325, 0.3106805000986372, 0.3189572777066912, 0.31147933857781546, 0.31002273729869295, 0.31191532952444895, 0.3154784270695278, 0.3147819723401751, 0.3227684923580715, 0.3360424722943987, 0.31816645179476055, 0.3237138731139047], "val_accuracy": [0.593666672706604, 0.7250000238418579, 0.7493333220481873, 0.765999972820282, 0.7803333401679993, 0.7856666445732117, 0.8023333549499512, 0.8193333148956299, 0.8276666402816772, 0.8363333344459534, 0.8416666388511658, 0.8450000286102295, 0.8513333201408386, 0.8543333411216736, 0.8539999723434448, 0.8529999852180481, 0.8576666712760925, 0.8663333058357239, 0.8646666407585144, 0.859000027179718, 0.8646666407585144, 0.8696666955947876, 0.8659999966621399, 0.8683333396911621, 0.871666669845581, 0.871999979019165, 0.8706666827201843, 0.875, 0.8759999871253967, 0.8766666650772095, 0.8723333477973938, 0.8676666617393494, 0.862666666507721, 0.8676666617393494, 0.8763333559036255]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1], [4, 6, 3, 3, 0, 2, 3, 9, 8, 6, 7, 6, 7, 9, 2, 9, 8, 2, 8, 6, 5, 8, 9], [1, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0], [47, 80, 14, 73], [1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8345714211463928, "mapping_values": [1, 4, 4, 2, 2, 1, 14, 14, 8, 6, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(grad, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, grad))))))), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.083275268736328, 1.1757723956989212, 0.8272925571459412, 0.7371775137198804, 0.6724680414871848, 0.6287540404898316, 0.5801713595363868, 0.5532048339179919, 0.5185316619171112, 0.4962117327257879, 0.4777146723756638, 0.4521383693496612, 0.4355447040478378, 0.4206764906695994, 0.4124098867984921, 0.3898866738759453, 0.3739387643508876, 0.35947632704979676, 0.3589959545827356, 0.35645707517866254, 0.3434063338875975, 0.33319624652243435, 0.32291588136832067, 0.3164445652922052, 0.2971920704899872, 0.2886742170279635, 0.2896550062735319, 0.28487653047212474, 0.26624930061211977, 0.25697493043400593], "accuracy": [0.28899750113487244, 0.5915995240211487, 0.6889446377754211, 0.7185312509536743, 0.7458723783493042, 0.7635715007781982, 0.7844406366348267, 0.7957997918128967, 0.8018755912780762, 0.8148196935653687, 0.819970965385437, 0.8300092220306396, 0.8392550349235535, 0.8383304476737976, 0.8457271456718445, 0.858671247959137, 0.8643507957458496, 0.8664641380310059, 0.8679170608520508, 0.8664641380310059, 0.8739928603172302, 0.873860776424408, 0.8751816153526306, 0.8795403242111206, 0.8916919827461243, 0.8898428082466125, 0.8908994793891907, 0.8908994793891907, 0.9005415439605713, 0.8973715305328369], "val_loss": [1.0144635609218053, 0.6772290808813912, 0.5672880581447056, 0.5396120888846261, 0.4968975782394409, 0.47559596811022076, 0.446267979485648, 0.4195525731359209, 0.40191392387662617, 0.3894992044993809, 0.37733706406184603, 0.3689809611865452, 0.3595129592078073, 0.3505432350294931, 0.34970868485314505, 0.34242717708860126, 0.34231135674885343, 0.33594982113157, 0.3360103283609663, 0.3322542224611555, 0.32491657563618254, 0.3226421390260969, 0.3199955139841352, 0.3129643627575466, 0.31167307921818327, 0.3168782506670271, 0.310492924281529, 0.3163809861455645, 0.31118821246283396, 0.32787082024983], "val_accuracy": [0.5933333039283752, 0.7246666550636292, 0.7493333220481873, 0.765333354473114, 0.7796666622161865, 0.7850000262260437, 0.8053333163261414, 0.8213333487510681, 0.82833331823349, 0.8360000252723694, 0.8426666855812073, 0.8503333330154419, 0.8493333458900452, 0.8566666841506958, 0.8566666841506958, 0.8636666536331177, 0.859666645526886, 0.8673333525657654, 0.8679999709129333, 0.8616666793823242, 0.8633333444595337, 0.8706666827201843, 0.8696666955947876, 0.8726666569709778, 0.8733333349227905, 0.871666669845581, 0.8703333139419556, 0.8726666569709778, 0.8730000257492065, 0.8713333606719971]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [2, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1], [4, 3, 2, 3, 2, 2, 3, 9, 2, 4, 7, 6, 7, 9, 5, 9, 1, 6, 8, 8, 5, 7, 4, 1, 9], [1, 1, 3, 3, 3, 5, 3, 3, 1, 4, 4, 0, 1, 0], [38, 80, 14, 73, 38, 82], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8337143063545227, "mapping_values": [1, 4, 4, 2, 2, 1, 39, 39, 25, 14, 6, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), alpha)), tf.math.add(beta, alpha))), tf.math.add(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), tf.math.square(grad)), grad))), tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))))), tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))), tf.math.add(beta, grad))), tf.math.square(tf.math.add(beta, alpha))))), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(grad, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.subtract(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), alpha)))), tf.math.add(beta, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.0832752777270165, 1.175767664360789, 0.8273687733162852, 0.7371531687061847, 0.672446604134652, 0.6288401190678142, 0.579939509482038, 0.5516862855957736, 0.518531232044886, 0.49512741242842573, 0.4773804818508474, 0.4518241577058058, 0.4339312633361484, 0.42325624743661766, 0.41313877542336, 0.39341073260724885, 0.3747786717951148, 0.3606698803653838, 0.3626460141359996, 0.35684229528206435, 0.3430484860265543, 0.33037146685019836, 0.3200828659142391, 0.3175261779161193, 0.30060953607239255, 0.2923061460740751, 0.28448753688927764, 0.2859476756040273, 0.27244114424290833, 0.25640798645595186, 0.2560211022366874, 0.2547736149406735, 0.24949510905484734], "accuracy": [0.28899750113487244, 0.591731607913971, 0.6893408894538879, 0.7182670831680298, 0.7464007139205933, 0.7630431652069092, 0.7835160493850708, 0.7951393723487854, 0.800290584564209, 0.8146876096725464, 0.8211596608161926, 0.830669641494751, 0.841500461101532, 0.8405758738517761, 0.8445383906364441, 0.8555012345314026, 0.8613129258155823, 0.8669924736022949, 0.8651432991027832, 0.8679170608520508, 0.8766345381736755, 0.8770307898521423, 0.8792761564254761, 0.8813894987106323, 0.887597382068634, 0.8922203183174133, 0.8928807377815247, 0.8902390599250793, 0.8988244533538818, 0.8989565372467041, 0.900409460067749, 0.9013340473175049, 0.9055606722831726], "val_loss": [1.0144615513937814, 0.6772264412471226, 0.5675269195011684, 0.5389873129980904, 0.49702657972063335, 0.47574290207454134, 0.4452985184533255, 0.41898544345583233, 0.40140877451215473, 0.38858275754111155, 0.378385637487684, 0.369505056313106, 0.35988291672297884, 0.3507528986249651, 0.35281775678907124, 0.3423993502344404, 0.34195733070373535, 0.33651561396462576, 0.3320879340171814, 0.3333962985447475, 0.3270445891789028, 0.3224215507507324, 0.3157791495323181, 0.31371928112847464, 0.31293331725256784, 0.3117685147694179, 0.3143114021846226, 0.3105516178267343, 0.30697267396109446, 0.3199874077524458, 0.3153341497693743, 0.3225607361112322, 0.32614797353744507], "val_accuracy": [0.5933333039283752, 0.7246666550636292, 0.7483333349227905, 0.7676666378974915, 0.7803333401679993, 0.7863333225250244, 0.8069999814033508, 0.8196666836738586, 0.82833331823349, 0.8370000123977661, 0.8426666855812073, 0.8463333249092102, 0.8479999899864197, 0.8576666712760925, 0.8519999980926514, 0.8606666922569275, 0.8579999804496765, 0.8656666874885559, 0.8696666955947876, 0.8600000143051147, 0.8666666746139526, 0.8703333139419556, 0.8713333606719971, 0.871666669845581, 0.8713333606719971, 0.8740000128746033, 0.8726666569709778, 0.8793333172798157, 0.8726666569709778, 0.8706666827201843, 0.8759999871253967, 0.8650000095367432, 0.8633333444595337]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1], [4, 6, 1, 2, 2, 2, 2, 9, 2, 4, 7, 8, 7, 4, 5, 9, 8, 2, 8, 8, 5, 7, 6, 1, 9], [1, 3, 3, 3, 3, 3, 3, 2, 1, 4, 4, 3, 1], [85, 80, 30, 73, 40], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8271428346633911, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 4, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, sigma))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.08327569595937, 1.1757929517199035, 0.8274866954966339, 0.7370922863129155, 0.6718933947129477, 0.6280456575436001, 0.5802776673450729, 0.5495370851925351, 0.51855421761055, 0.49460666884032567, 0.4775859545038014, 0.45184708551692293, 0.43481596978805664, 0.41818868534880826, 0.4130245317533866, 0.391550089850512, 0.37761091499469696, 0.360447335654183, 0.3639111876479859, 0.3549132846633378, 0.3399677035350684, 0.33242766225122267, 0.3228742344276134, 0.32063823650620477, 0.297712480804593, 0.29157780369259284, 0.2886722837700867, 0.28885076273433946, 0.2727529095022544, 0.2556735819156191, 0.25865804958951283, 0.2560140683217654, 0.25040055608878503], "accuracy": [0.28899750113487244, 0.591731607913971, 0.6894729733467102, 0.7173424959182739, 0.7458723783493042, 0.763439416885376, 0.785629391670227, 0.7956677079200745, 0.8004226684570312, 0.8137630224227905, 0.8219521641731262, 0.828820526599884, 0.8426892161369324, 0.8401796221733093, 0.8459912538528442, 0.8540483713150024, 0.8595958352088928, 0.8665962219238281, 0.8634262084960938, 0.8660678863525391, 0.8737286925315857, 0.8735966086387634, 0.8780874609947205, 0.8816536664962769, 0.889050304889679, 0.8910315632820129, 0.8907673954963684, 0.884691596031189, 0.8986923694610596, 0.9005415439605713, 0.8994848728179932, 0.9012019634246826, 0.9029190540313721], "val_loss": [1.0144679546356201, 0.6770960092544556, 0.5673027038574219, 0.538931131362915, 0.49639776774815153, 0.474549548966544, 0.44524710518973215, 0.41853258439472746, 0.4011792966297695, 0.3890265566962106, 0.3780493310519627, 0.367865903036935, 0.3569767049380711, 0.3501814178058079, 0.3527554188455854, 0.34558228084019255, 0.3431984526770456, 0.3379624230521066, 0.3316494567053659, 0.3335884894643511, 0.3261124236243112, 0.3202060120446341, 0.3216414451599121, 0.3160379443849836, 0.31701947110039846, 0.3200560893331255, 0.314787174974169, 0.31087898356573923, 0.31036122356142315, 0.3281776223863874, 0.3197265693119594, 0.32357559885297504, 0.3285837599209377], "val_accuracy": [0.5933333039283752, 0.7253333330154419, 0.749666690826416, 0.7663333415985107, 0.781333327293396, 0.7863333225250244, 0.8050000071525574, 0.8203333616256714, 0.824999988079071, 0.8356666564941406, 0.843666672706604, 0.8456666469573975, 0.8519999980926514, 0.8539999723434448, 0.8526666760444641, 0.8586666584014893, 0.8573333621025085, 0.8659999966621399, 0.8673333525657654, 0.859000027179718, 0.8666666746139526, 0.8713333606719971, 0.8696666955947876, 0.8736666440963745, 0.8743333220481873, 0.8709999918937683, 0.8713333606719971, 0.8766666650772095, 0.8726666569709778, 0.8723333477973938, 0.875333309173584, 0.8653333187103271, 0.8669999837875366]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [30, 32, 5, 49, 25], [1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [4, 9, 3, 3, 2, 2, 3, 9, 8, 1, 7, 7, 4, 9, 2, 4, 2], [1, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0], [57, 80, 63], [0, 1, 1, 0, 0, 0, 1, 1], [1, 1, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8148571252822876, "mapping_values": [1, 4, 4, 2, 2, 1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2562004773214652, 1.8303512787349692, 1.3153774825856828, 0.9796913567866001, 0.8767394384829564, 0.7889963291844262, 0.7346273164990996, 0.7073701514843165, 0.6734365128003343, 0.6422270136250481, 0.6180216058874174, 0.5863298642290519, 0.5657613598486342, 0.5506412960030951, 0.5299677990840458, 0.5173323324658473, 0.4907505473346128, 0.4734400966738697, 0.47149481702994017, 0.4575931175848465, 0.44842181913431656, 0.42995729519706505, 0.41918303676489843, 0.40219803440052804, 0.3875202238835269, 0.3789758256452903, 0.36834544013866327, 0.36219465973087195, 0.3566774485361905, 0.33121734262772395, 0.33911335049067914, 0.32301686289461295, 0.3251697150723431, 0.31017364876664877, 0.30296685177699495, 0.30070286022437454, 0.28823288110394946, 0.2871910761084775, 0.27463849194140216, 0.2748691606255507, 0.27251184246858445, 0.2594699005543076, 0.2527492813674482, 0.24540715427556767], "accuracy": [0.19284109771251678, 0.431779146194458, 0.5567296147346497, 0.643772304058075, 0.6851142644882202, 0.698190450668335, 0.7123233675956726, 0.7281733155250549, 0.7425703406333923, 0.7532690763473511, 0.7663452625274658, 0.7753269076347351, 0.7829877138137817, 0.7911768555641174, 0.8001585006713867, 0.8014793395996094, 0.8168009519577026, 0.8173292875289917, 0.8216879963874817, 0.8273676037788391, 0.8334434032440186, 0.8403117060661316, 0.8408400416374207, 0.8473120927810669, 0.8562937378883362, 0.8576145768165588, 0.8644828796386719, 0.8648791313171387, 0.8661999702453613, 0.8737286925315857, 0.8761062026023865, 0.8798044919967651, 0.8795403242111206, 0.8813894987106323, 0.8840311765670776, 0.8860124349594116, 0.8902390599250793, 0.8918240666389465, 0.8931449055671692, 0.8927486538887024, 0.89552241563797, 0.9021265506744385, 0.9014661312103271, 0.9051644206047058], "val_loss": [1.8084402765546526, 1.0092381749834334, 0.7375826495034354, 0.7033828667231968, 0.5953894512993949, 0.5623537983213153, 0.5550981760025024, 0.5318800721849714, 0.5077994380678449, 0.48022663593292236, 0.4629817008972168, 0.44486354078565327, 0.4350525311061314, 0.42478781938552856, 0.4164621148790632, 0.4025754758289882, 0.3954304967607771, 0.3843417593411037, 0.3769464407648359, 0.36838464226041523, 0.3632859247071402, 0.3574754425457546, 0.3529530337878636, 0.34511823313576834, 0.3459498030798776, 0.3360973766871861, 0.33603258643831524, 0.33922639914921354, 0.33101574012211393, 0.3339376619883946, 0.328103814806257, 0.32902428082057406, 0.32313287258148193, 0.33082790885652813, 0.3236520460673741, 0.3171588267598833, 0.31794955900737215, 0.3187030128070286, 0.3115016988345555, 0.30610181604112896, 0.3142473953110831, 0.31693845987319946, 0.3184654712677002, 0.31115630694798063], "val_accuracy": [0.4429999887943268, 0.6366666555404663, 0.7093333601951599, 0.7086666822433472, 0.7283333539962769, 0.7493333220481873, 0.753333330154419, 0.7649999856948853, 0.7596666812896729, 0.7860000133514404, 0.7929999828338623, 0.8066666722297668, 0.8016666769981384, 0.8173333406448364, 0.8146666884422302, 0.8270000219345093, 0.8349999785423279, 0.8410000205039978, 0.8456666469573975, 0.8506666421890259, 0.8543333411216736, 0.8566666841506958, 0.8560000061988831, 0.8610000014305115, 0.859000027179718, 0.8600000143051147, 0.8636666536331177, 0.8643333315849304, 0.8666666746139526, 0.8659999966621399, 0.8636666536331177, 0.8663333058357239, 0.8683333396911621, 0.8669999837875366, 0.871999979019165, 0.875, 0.8743333220481873, 0.8730000257492065, 0.8776666522026062, 0.8766666650772095, 0.8756666779518127, 0.874666690826416, 0.8763333559036255, 0.8766666650772095]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1], [4, 6, 2, 3, 2, 2, 5, 9, 2, 4, 7, 6, 7, 9, 5, 9, 8, 6, 8, 8, 5, 7, 4, 1, 9], [1, 3, 3, 3, 3, 2, 3, 3, 1, 4, 4, 0, 1], [81, 80, 71, 73, 38], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8005714416503906, "mapping_values": [1, 4, 4, 2, 2, 1, 28, 28, 18, 10, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.multiply(tf.math.add(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))), grad), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.square(grad))), tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.add(beta, grad)))))), grad))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2319291592148143, 1.8490380487264406, 1.3043903674211452, 1.1115711678004991, 0.9885737715679436, 0.9340776610431134, 0.8753731425144512, 0.8371539249112814, 0.7944867729258938, 0.7698067103504835, 0.7604852147216353, 0.7262588140514501, 0.7303006145003418, 0.7182319855897843, 0.7079395712280097, 0.6983917148877538, 0.6792139660617726, 0.6658911752253633, 0.6608687968711339, 0.6493254206703638, 0.6461816402694663, 0.6429837332929461, 0.6359403739358456, 0.6338527264171162, 0.619948713896911, 0.6056728799896407, 0.6004392450291325, 0.6064106608977045, 0.6015208206235331, 0.5915982245517177, 0.5976842657103594, 0.58662687218216, 0.5885743822766144, 0.5781079135818441, 0.5664924061167682, 0.5669238053497432, 0.5635586666975826, 0.564084919853737, 0.5642073378035768, 0.5550636625985869, 0.5436251341564434, 0.553827025965614, 0.5412986578722168, 0.5519007827233896, 0.5382456350257258, 0.5334717802572496, 0.532585333575662], "accuracy": [0.22876766324043274, 0.44551578164100647, 0.5575221180915833, 0.6050719618797302, 0.6493197679519653, 0.6655659675598145, 0.6807554960250854, 0.7028133869171143, 0.713908314704895, 0.7197200059890747, 0.7168141603469849, 0.7305507659912109, 0.7288337349891663, 0.7364945411682129, 0.7345132827758789, 0.7401928305625916, 0.7500990629196167, 0.7518161535263062, 0.7572315335273743, 0.759609043598175, 0.7598732113838196, 0.7618544697761536, 0.7700436115264893, 0.7635715007781982, 0.7687227725982666, 0.7765156626701355, 0.7763835787773132, 0.7758552432060242, 0.7784969210624695, 0.7832518815994263, 0.7781006693840027, 0.7820631265640259, 0.7829877138137817, 0.783119797706604, 0.7909126877784729, 0.7891955971717834, 0.7890635132789612, 0.7897239327430725, 0.791441023349762, 0.7969884872436523, 0.7972526550292969, 0.793950617313385, 0.8021397590637207, 0.7957997918128967, 0.7973847389221191, 0.807158887386322, 0.8039889335632324], "val_loss": [1.768829686301095, 1.1632882867540633, 0.8528154066630772, 0.8136628695896694, 0.7023479087012154, 0.6338376147406442, 0.6474742037909371, 0.6426634618214199, 0.5799099888120379, 0.5587157521929059, 0.5473174367632184, 0.5496016229901995, 0.5330676521573748, 0.5847574472427368, 0.5366897072110858, 0.504041280065264, 0.5123486689158848, 0.5112658568790981, 0.4932247059685843, 0.49354893820626394, 0.4868251255580357, 0.47701711314065115, 0.4836442300251552, 0.4890414646693638, 0.4741225072315761, 0.467289788382394, 0.47228096212659565, 0.48790691580091206, 0.4586909328188215, 0.4656697171075003, 0.4605898175920759, 0.4581720658711025, 0.48019206523895264, 0.44662390436444965, 0.4475208520889282, 0.4516948291233608, 0.4376399176461356, 0.4542555809020996, 0.4482647691454206, 0.4623929262161255, 0.43533684526171, 0.4296630450657436, 0.42826429435185026, 0.42612860032490324, 0.45668530464172363, 0.42769747972488403, 0.41843033688408987], "val_accuracy": [0.48899999260902405, 0.624666690826416, 0.6736666560173035, 0.6786666512489319, 0.6930000185966492, 0.7453333139419556, 0.7306666374206543, 0.7120000123977661, 0.7413333058357239, 0.746666669845581, 0.7609999775886536, 0.749666690826416, 0.7590000033378601, 0.7310000061988831, 0.7590000033378601, 0.7866666913032532, 0.7760000228881836, 0.7833333611488342, 0.7950000166893005, 0.7853333353996277, 0.7836666703224182, 0.7986666560173035, 0.7919999957084656, 0.7806666493415833, 0.7986666560173035, 0.8040000200271606, 0.8019999861717224, 0.7873333096504211, 0.7990000247955322, 0.8043333292007446, 0.8029999732971191, 0.8003333210945129, 0.7860000133514404, 0.8100000023841858, 0.8103333115577698, 0.8029999732971191, 0.8119999766349792, 0.8006666898727417, 0.8019999861717224, 0.7886666655540466, 0.812666654586792, 0.8236666917800903, 0.8169999718666077, 0.812333345413208, 0.7973333597183228, 0.8143333196640015, 0.8236666917800903]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [4, 4, 9, 3, 2, 2, 3, 9, 8, 1, 7, 7, 4, 9, 2, 4, 2], [1, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0], [85, 80, 14, 73, 38], [0, 1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [2, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.7817142605781555, "mapping_values": [1, 4, 4, 2, 2, 1, 28, 28, 17, 11, 3, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.pow(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.sqrt(grad)))), tf.math.subtract(tf.math.add(beta, grad), grad))), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, beta))), tf.math.add(beta, alpha))))), tf.math.add(beta, grad)))))))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2319291636865404, 1.8490631428723479, 1.30436943542877, 1.1116611820878983, 0.9900530775729235, 0.9362938788116348, 0.871536787742511, 0.8382815252819774, 0.7972456252790634, 0.7690770577178293, 0.7613966938778867, 0.7259544977548493, 0.7271336552930183, 0.7164536871142974, 0.7070755668367299, 0.6966978660065658, 0.6817686058636969, 0.6666779325166162, 0.6612635997733294, 0.651093554384972, 0.6458082617218814, 0.6444409180074839, 0.6363289963693635, 0.633969218581974, 0.6204136709306596, 0.6094157519656686, 0.6008182476461524, 0.6036532655320919, 0.6015684794378224, 0.5918508960570579, 0.5966414064936524, 0.5865375510044322], "accuracy": [0.22876766324043274, 0.4453836977481842, 0.557390034198761, 0.6045436263084412, 0.6495839357376099, 0.6653017997741699, 0.684982180595398, 0.7022850513458252, 0.711530864238739, 0.7193237543106079, 0.7137762308120728, 0.7297582626342773, 0.7317395210266113, 0.7392682433128357, 0.7338528633117676, 0.7396644949913025, 0.7479857206344604, 0.7528728246688843, 0.7568352818489075, 0.7577598690986633, 0.7607977986335754, 0.7605336308479309, 0.7700436115264893, 0.7614582180976868, 0.7680623531341553, 0.7726852297782898, 0.7778365015983582, 0.7766477465629578, 0.7757231593132019, 0.7820631265640259, 0.7788931727409363, 0.7835160493850708], "val_loss": [1.7688302312578474, 1.1633427483694894, 0.8533520698547363, 0.8118180206843785, 0.7171988657542637, 0.6276504482541766, 0.6577515602111816, 0.6476074968065534, 0.5814036471503121, 0.5646979127611432, 0.5475851467677525, 0.547680309840611, 0.5323317391531808, 0.5836214678628104, 0.5352130958012172, 0.5038261583873204, 0.5178448983601162, 0.5145526272909982, 0.4910967009408133, 0.49420882974352154, 0.4880130631583078, 0.47944165979112896, 0.4869356495993478, 0.4892627852303641, 0.4780536890029907, 0.46856071267809185, 0.4687213216509138, 0.4888716084616525, 0.4581762211663382, 0.46640099797930035, 0.46302664279937744, 0.4557568516050066], "val_accuracy": [0.48899999260902405, 0.6243333220481873, 0.6729999780654907, 0.6819999814033508, 0.6866666674613953, 0.746999979019165, 0.7243333458900452, 0.7080000042915344, 0.7386666536331177, 0.7440000176429749, 0.7630000114440918, 0.750333309173584, 0.7583333253860474, 0.7293333411216736, 0.7606666684150696, 0.7833333611488342, 0.7706666588783264, 0.7789999842643738, 0.7950000166893005, 0.7856666445732117, 0.7829999923706055, 0.7956666946411133, 0.7889999747276306, 0.7796666622161865, 0.7986666560173035, 0.8019999861717224, 0.8053333163261414, 0.7900000214576721, 0.7976666688919067, 0.7983333468437195, 0.8006666898727417, 0.8036666512489319]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1], [4, 6, 9, 3, 2, 2, 3, 9, 8, 1, 7, 7, 4, 9, 2, 4, 2], [3, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0], [93, 80, 63], [0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0], [2, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.6017143130302429, "mapping_values": [1, 4, 4, 2, 2, 1, 5, 5, 3, 2, 1, 5, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.subtract(sigma, sigma)), tf.math.add(sigma, sigma))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.061892005383551, 1.3267921270113012, 1.1003847748234035, 1.0397295058600229, 1.1646698006014105, 3.1826236028838797, 12152.646646193793, 7.520250119639188e+33, 11.598877787133407], "accuracy": [0.2965262234210968, 0.5735041499137878, 0.6118082404136658, 0.6172236204147339, 0.6112799048423767, 0.5091797709465027, 0.30418702960014343, 0.10579843819141388, 0.1006472036242485], "val_loss": [0.957876443862915, 0.9024436133248466, 0.7296956777572632, 0.6427338293620518, 1.0463087558746338, 3.7108760561261858, 101648150.85714285, 8.627911976405553, 12.339020047869], "val_accuracy": [0.6306666731834412, 0.6290000081062317, 0.6753333210945129, 0.7253333330154419, 0.5450000166893005, 0.3529999852180481, 0.10633333027362823, 0.10366666316986084, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [5, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [1, 2, 3, 3, 2, 1, 3, 2, 0, 9, 0, 4, 5, 2, 9, 5, 1, 3, 3, 5, 2, 2, 2, 2, 5, 2, 1], [1, 3, 3, 3, 3, 5, 3, 1, 3, 4, 4, 0, 2, 3, 4, 1, 3, 0], [85, 80, 14, 73], [0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 0, 5, 5, 2, 3, 0, 4, 4, 2, 2, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, sigma), tf.math.add(sigma, alpha))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3050781586828046, 2.3316507958591166, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08545766770839691, 0.0750231146812439, 0.09140139818191528, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9776600428989954, 2.0342704909188405, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.019999999552965164, 0.10066666454076767, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [2, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [4, 6, 2, 8, 2, 2, 1, 9, 7, 9, 7, 6, 7, 9, 5, 9, 8, 6, 8], [1, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0], [85, 80, 14, 73], [0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [2, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 26, 26, 18, 8, 4, 4, 4, 2, 2, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.sqrt(alpha)), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(grad, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.square(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))), grad)))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, grad))))))), tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, sigma), tf.math.add(sigma, alpha))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09668471664190292, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [1, 1, 3, 3, 2, 1, 3, 2, 0, 9, 0, 4, 5, 2, 9, 5, 1, 3, 3, 5, 2, 2, 2, 2, 5, 2, 1, 2, 2, 6, 7, 6, 6, 0, 9, 5, 6, 3, 3, 1, 1, 2, 3, 8, 8, 0, 0, 2, 2], [1, 1, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0, 3, 5, 2, 2, 0, 0, 0, 2, 2, 3, 0, 4, 1, 4, 0, 2, 5, 3, 4, 5], [73, 80, 14, 73, 85, 0, 43, 58, 47], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [5, 1, 8, 4], [0, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 18, 11, 7, 4, 81, 81, 49, 32, 9, 4, 3, 2, 1, 1, 1, 0, 1, 0], "tree_depth": 61, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)))))))))), tf.math.pow(tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), alpha)), tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.negative(tf.math.add(beta, grad)))), tf.math.add(beta, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.square(grad))))), tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.add(beta, beta))), tf.math.square(tf.math.add(tf.math.add(beta, alpha), grad)))))))), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.square(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(grad, tf.math.add(tf.math.add(beta, beta), tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta))), tf.math.add(beta, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), beta))), tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))))), alpha)))), tf.math.negative(tf.math.add(beta, grad))))))), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(beta))))), tf.math.add(grad, tf.math.add(tf.math.add(beta, grad), grad)))))))))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [2, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 2, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [4, 6, 2, 3, 2, 2, 3, 9, 7, 9, 7, 1, 7, 1, 2, 9, 8, 6, 8], [1, 3, 3, 3, 3, 1, 3, 3, 1, 4, 4, 0], [79, 80, 19, 73], [0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 0, 27, 27, 16, 11, 3, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), grad), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)))), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), grad)))), tf.math.add(beta, alpha))), tf.math.add(beta, grad))))))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07753269374370575, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [1, 3, 3, 3, 2, 2, 3, 9, 5, 9, 0, 0, 1, 2, 9, 5, 1], [1, 2, 3, 3, 2, 3, 3, 2, 1, 4, 4, 0], [85, 80, 14, 73], [0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [0, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 16, 16, 10, 6, 2, 2, 1, 1, 0, 0, 1, 0, 1, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, grad))), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.square(tf.math.add(beta, beta)))), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3026313087990915, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [4, 6, 9, 3, 2, 2, 3, 9, 8, 1, 7, 7, 4, 9, 2, 4, 2], [1, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0], [85, 80, 63], [0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 3, 2, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07753269374370575, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [6, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [86, 32, 5, 49, 25], [0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0], [5, 2, 2, 3, 2, 2, 3, 9, 7, 9, 7, 6, 7, 9, 2, 9, 4, 6, 8, 7, 3, 2, 0, 8, 8, 2, 2, 8, 1, 9], [1, 3, 3, 3, 3, 1, 3, 3, 1, 4, 4, 0, 2, 1, 1], [79, 80, 19, 97, 81, 57], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 18, 11, 7, 4, 45, 45, 30, 15, 6, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 50, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))))))), tf.math.pow(tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(beta, grad)))), grad), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), grad)))), tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(grad, tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))), beta)))))))))))), alpha), tf.math.sqrt(tf.math.subtract(tf.math.add(beta, alpha), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [2, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1], [4, 2, 2, 0, 2, 1, 3, 9, 2, 4, 7, 6, 7, 9, 5, 9, 8, 6, 8, 8, 5, 7, 4, 1, 9], [1, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0], [81, 80, 14, 73, 38], [0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 18, 11, 7, 4, 14, 14, 8, 6, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))))))), tf.math.pow(tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.negative(tf.math.add(tf.math.subtract(tf.math.multiply(tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), grad), grad), grad)))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 5, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 2, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1], [4, 6, 6, 3, 2, 2, 3, 9, 2, 4, 7, 6, 7, 2, 5, 4, 8, 6, 8, 8, 5, 7, 4, 1, 9, 5, 5, 2, 4, 6, 4, 8, 3, 4, 5, 7, 3, 7, 9, 2, 2, 5, 9, 6, 9, 1, 0], [1, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0, 1, 2, 5, 4, 2, 4, 1, 3, 0, 0, 1, 5, 4, 0, 4], [85, 80, 14, 73, 38, 17, 58, 50, 83], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 74, 74, 47, 27, 9, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 52, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.multiply(grad, tf.math.add(beta, grad)), tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.square(grad), tf.math.add(beta, tf.math.pow(tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))), tf.math.add(beta, beta)))), alpha))))), tf.math.add(beta, grad)), tf.math.square(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), alpha))))))))), tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.square(tf.math.square(beta)))), tf.math.add(grad, tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, tf.math.sqrt(grad)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), grad)), tf.math.square(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, grad))))))), tf.math.multiply(tf.math.add(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.square(tf.math.add(beta, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), alpha)))))), tf.math.subtract(tf.math.add(beta, grad), grad))))))), tf.math.add(beta, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.304706322912212, 2.321874235158489, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08598599582910538, 0.07687227427959442, 0.09298639744520187, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9756223133632116, 2.0009271757943288, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.02033333294093609, 0.09866666793823242, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1], [5, 4, 3, 3, 2, 2, 3, 9, 2, 9, 0, 4, 6, 2, 9, 5, 1, 4, 5], [1, 3, 3, 3, 3, 0, 3, 3, 1, 4, 4, 0], [79, 80, 19, 73], [0, 0, 1, 0, 0, 0, 1, 1], [1, 0, 1, 1, 0], [0, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.04171428456902504, "mapping_values": [1, 4, 4, 2, 2, 1, 29, 29, 19, 10, 4, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(alpha)), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.multiply(grad, grad)), grad), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))))), grad)), tf.math.add(beta, tf.math.add(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(tf.math.add(beta, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), alpha)), grad)))))))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.302952871157619, 2.302536990554058, 2.3018925759329725, 2.3042812691609056, 2.299928757303883, 2.302443108176354], "accuracy": [0.08915598690509796, 0.08955223858356476, 0.08532558381557465, 0.08281600475311279, 0.09219389408826828, 0.09021265059709549], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}]