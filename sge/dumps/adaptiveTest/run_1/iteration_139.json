[{"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 32, 29, 49, 25], [0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 0, 1], [4, 7, 6, 5, 0, 7, 3, 9], [3, 3, 0, 3, 1], [98], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 0, 1], [3, 1, 9, 1, 2], [3, 1, 2], [23, 52, 13]], "fitness": -0.7471428513526917, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 5, 4, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(grad, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.subtract(alpha, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2977533419496585, 2.2885324228488537, 2.279292676206656, 2.2685015937828856, 2.2594184586085726, 2.247387539110699, 2.2339083693676525, 2.223796180368115, 2.208606851445748, 2.1910774771091157, 2.1720847710327402, 2.151486059237213, 2.1276336783478524, 2.0999196356376717, 2.0685330003464557, 2.0374383689579063, 2.0041539028666793, 1.9593366759249469, 1.9182923490723063, 1.8784847585768543, 1.827912444939876, 1.7848164243405884, 1.72741582689347, 1.6769328160670771, 1.6335319729529005, 1.5875895005238605, 1.547606621325811, 1.4964178670524937, 1.459072126279087, 1.4209923411813852, 1.3834880213963594, 1.3601991709401942, 1.3172524668962224, 1.3030933625095666, 1.2726128063244733, 1.2509543248108428, 1.2208909693804746, 1.2182593612056194, 1.1822094282753133, 1.162233168548833, 1.1449341430734603, 1.1302522163129107, 1.11817241163774, 1.1034015545739853, 1.0857153896957326, 1.0834971872444843, 1.0656886848680978, 1.044848829188981, 1.054408984507993, 1.0368841118139283, 1.0180629709881406, 1.0079025575403273, 1.0145118726542157, 0.9957462537400459, 0.9920301318814206, 0.9834979408216545, 0.9795735424157886, 0.963102011428045, 0.9636668757582385, 0.9542404510688001, 0.9342907857838214, 0.9382531437671038, 0.9186610761587536, 0.9259337950470803, 0.9179283948134217, 0.917585716491929, 0.9014954913278156, 0.8935550253908664, 0.8971546121702344, 0.8937890356038272, 0.8862848886173195, 0.8784888605431574, 0.8862975395319406, 0.8795999697312514, 0.8673376961076232, 0.8632068033420556, 0.8521703843269932, 0.8606160733489123, 0.8503069787796352, 0.8535112594065491, 0.8476186050100885, 0.8437387772035353, 0.8422813325620456, 0.837840855365668, 0.8402999462374071, 0.8225629990048271, 0.8287164820829293, 0.8255720993295054, 0.8238745052360068, 0.8135963281179385], "accuracy": [0.1026284471154213, 0.1266675442457199, 0.1542728841304779, 0.18201030790805817, 0.20657773315906525, 0.22744683921337128, 0.26363757252693176, 0.270109623670578, 0.28741249442100525, 0.31805574893951416, 0.32782986760139465, 0.34645357728004456, 0.3646810054779053, 0.38304054737091064, 0.39400342106819153, 0.39849424362182617, 0.41249504685401917, 0.4224012792110443, 0.442609965801239, 0.4356095492839813, 0.4468366205692291, 0.4507991075515747, 0.4741777777671814, 0.4777440130710602, 0.4884427487850189, 0.4986131191253662, 0.5097081065177917, 0.5169726610183716, 0.5266147255897522, 0.537709653377533, 0.5403513312339783, 0.5535596609115601, 0.5567296147346497, 0.561880886554718, 0.5651829242706299, 0.5729758143424988, 0.5816932916641235, 0.5824857950210571, 0.5951657891273499, 0.6007132530212402, 0.6019020080566406, 0.6075815558433533, 0.6165632009506226, 0.6127327680587769, 0.6203936338424683, 0.6164311170578003, 0.624620258808136, 0.6268656849861145, 0.6283186078071594, 0.6324131488800049, 0.6416589617729187, 0.6409985423088074, 0.6400739550590515, 0.648659348487854, 0.6444327235221863, 0.6536785364151001, 0.6490556001663208, 0.6600185036659241, 0.6597543358802795, 0.6585655808448792, 0.6687359809875488, 0.6605468392372131, 0.6737551093101501, 0.6675472259521484, 0.6707172393798828, 0.6732267737388611, 0.683529257774353, 0.68101966381073, 0.6856426000595093, 0.6779817938804626, 0.6808875799179077, 0.6864351034164429, 0.6823405027389526, 0.6808875799179077, 0.6853784322738647, 0.6852463483810425, 0.6933034062385559, 0.6893408894538879, 0.6853784322738647, 0.6921146512031555, 0.6915863156318665, 0.6999075412750244, 0.6950204968452454, 0.6995112895965576, 0.6959450244903564, 0.6972658634185791, 0.7005679607391357, 0.7008321285247803, 0.6992471218109131, 0.7066437602043152], "val_loss": [1.961887972695487, 1.952914033617292, 1.9438146182468958, 1.9344802583966936, 1.9243762152535575, 1.9135665212358748, 1.9016078540257044, 1.8885794367109026, 1.874030930655343, 1.8574705123901367, 1.8387718200683594, 1.8177785873413086, 1.7942093440464564, 1.7676901136125838, 1.7378292083740234, 1.705030918121338, 1.6692031451633997, 1.6295274325779505, 1.5866763251168388, 1.5416807106563024, 1.4946956975119454, 1.4467121532985143, 1.3971915585654122, 1.3478457246507918, 1.299546582358224, 1.2522362981523787, 1.2078734806605749, 1.1653437614440918, 1.1255768707820348, 1.0889688900538854, 1.05451842716762, 1.0233663831438338, 0.9945380006517682, 0.9686869212559291, 0.9442271845681327, 0.9219561304364886, 0.9013460023062569, 0.8829624312264579, 0.8656606674194336, 0.8492012023925781, 0.8344098499843052, 0.8204386745180402, 0.8084736721856254, 0.7963148525782994, 0.7847433941704887, 0.7748594284057617, 0.7652035440717425, 0.7554424149649483, 0.747483389718192, 0.7385505097252982, 0.7302566596439907, 0.7228711332593646, 0.7166292837687901, 0.7093326534543719, 0.7035268885748727, 0.6980185508728027, 0.6935948644365583, 0.6874621084758213, 0.6822606665747506, 0.678269760949271, 0.6728417532784599, 0.6676738602774483, 0.6626454080854144, 0.6588895491191319, 0.6557278462818691, 0.6519430705479213, 0.647864750453404, 0.6441327503749302, 0.6414666857038226, 0.6380337647029332, 0.6348457506724766, 0.6309961080551147, 0.6288319826126099, 0.6263396058763776, 0.6234742403030396, 0.6202171189444405, 0.6171083620616368, 0.6146624599184308, 0.611970067024231, 0.6099977663585118, 0.6070034333637783, 0.6052330391747611, 0.6031578608921596, 0.6008923905236381, 0.5987841742379325, 0.5967980623245239, 0.5944664137704032, 0.5928638832909721, 0.5908671958105904, 0.5881569385528564], "val_accuracy": [0.10833333432674408, 0.19699999690055847, 0.28166666626930237, 0.3400000035762787, 0.3799999952316284, 0.3986666798591614, 0.41233333945274353, 0.4313333332538605, 0.4463333189487457, 0.4569999873638153, 0.46833333373069763, 0.4803333282470703, 0.49566665291786194, 0.5046666860580444, 0.5166666507720947, 0.5293333530426025, 0.5350000262260437, 0.5393333435058594, 0.5479999780654907, 0.5556666851043701, 0.5603333115577698, 0.5683333277702332, 0.5796666741371155, 0.5899999737739563, 0.5960000157356262, 0.6000000238418579, 0.6113333106040955, 0.6193333268165588, 0.628000020980835, 0.640666663646698, 0.6536666750907898, 0.6616666913032532, 0.6663333177566528, 0.6700000166893005, 0.6729999780654907, 0.6773333549499512, 0.6796666383743286, 0.6819999814033508, 0.6863333582878113, 0.6913333535194397, 0.6916666626930237, 0.6959999799728394, 0.6963333487510681, 0.6993333101272583, 0.7003333568572998, 0.7016666531562805, 0.7043333053588867, 0.7056666612625122, 0.7066666483879089, 0.7083333134651184, 0.7113333344459534, 0.7133333086967468, 0.7183333039283752, 0.7200000286102295, 0.7213333249092102, 0.721666693687439, 0.721666693687439, 0.7269999980926514, 0.7273333072662354, 0.7250000238418579, 0.7260000109672546, 0.7296666502952576, 0.7329999804496765, 0.7336666584014893, 0.7319999933242798, 0.7329999804496765, 0.7360000014305115, 0.7356666922569275, 0.737333357334137, 0.7386666536331177, 0.737666666507721, 0.7400000095367432, 0.7419999837875366, 0.7400000095367432, 0.7426666617393494, 0.7429999709129333, 0.746666669845581, 0.7459999918937683, 0.746666669845581, 0.746666669845581, 0.7519999742507935, 0.7516666650772095, 0.7506666779518127, 0.750333309173584, 0.7526666522026062, 0.749666690826416, 0.7516666650772095, 0.749666690826416, 0.7513333559036255, 0.7516666650772095]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 2, 4, 0, 5, 5, 8, 4, 4, 6, 3, 6], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [31, 32, 29, 49, 25], [1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [3, 0, 6, 2, 3, 7, 3, 9], [2, 3, 3, 3, 1], [98], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 0, 0, 0, 1, 0, 1, 1], [3, 0, 9, 2, 2, 7], [1, 3, 2], [23, 52, 13]], "fitness": -0.7177143096923828, "mapping_values": [1, 1, 1, 0, 1, 0, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 8, 5, 3, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.multiply(beta, tf.math.negative(tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(sigma, beta)))", "other_info": {"loss": [2.2864623880972084, 2.1983763610115297, 1.9384604097121207, 1.478589513077948, 1.287611609263553, 1.0996213674686999, 0.8753617922423018, 0.8367427880926817, 0.7957769919301477, 0.7665690163563995, 0.7400586439665393, 0.7296818921421465, 0.7043202102475588, 0.6938474845766565, 0.6741240492995704, 0.6602817346879347, 0.6484172391759218, 0.6277639306437117, 0.6177888270839016, 0.606150222941003, 0.576460165952915, 0.577217533477876, 0.5596611770530497, 0.5581556496571682, 0.5367684779370607, 0.5378688101235666, 0.527220024385189, 0.527951615723668, 0.5118159058977033, 0.49936240276939536, 0.4935734556367164, 0.4741923360855446, 0.4726082404661865, 0.4590775993214843, 0.4614647858335893, 0.45488475304647535, 0.43941158970286265, 0.44203640867564437, 0.4338241116466177, 0.423360933173901, 0.4139203284284647, 0.42284146731067657, 0.408725128693745, 0.40371716250407774, 0.39325391827415657], "accuracy": [0.1364416927099228, 0.3035266101360321, 0.4103817343711853, 0.5019152164459229, 0.5612204670906067, 0.6272619366645813, 0.666358470916748, 0.6976621150970459, 0.6985867023468018, 0.7065116763114929, 0.7180029153823853, 0.7165499925613403, 0.7230220437049866, 0.7338528633117676, 0.7442874312400818, 0.7493065595626831, 0.7466648817062378, 0.761590301990509, 0.7718927264213562, 0.7664773464202881, 0.7808743715286255, 0.780610203742981, 0.791969358921051, 0.7922335267066956, 0.7955356240272522, 0.7973847389221191, 0.800290584564209, 0.8042530417442322, 0.8021397590637207, 0.8138951063156128, 0.8158763647079468, 0.8212917447090149, 0.8235371708869934, 0.8271034359931946, 0.82683926820755, 0.8281601071357727, 0.8342359066009521, 0.829216718673706, 0.8334434032440186, 0.8421608805656433, 0.8425571322441101, 0.8411042094230652, 0.8471800088882446, 0.846387505531311, 0.8512746095657349], "val_loss": [1.9224483626229423, 1.7776957239423479, 1.3463728427886963, 0.8780739988599505, 0.7293258053915841, 0.6432074989591327, 0.637583817754473, 0.6148110628128052, 0.5738234349659511, 0.5597679104123797, 0.5531438418797084, 0.5456100361687797, 0.5333520684923444, 0.5208118643079486, 0.511360798563276, 0.5010360990251813, 0.4902677706309727, 0.47932038988385883, 0.4710166965212141, 0.46053034918648855, 0.44788856165749685, 0.4385179451533726, 0.4313587546348572, 0.42544009004320416, 0.41936694724219187, 0.4133882692881993, 0.4083696263177054, 0.40620441096169607, 0.4030269299234663, 0.3987568957465036, 0.39549720287323, 0.3958351867539542, 0.39723709651402067, 0.39408025571278166, 0.389603180544717, 0.3865530320576259, 0.38558459281921387, 0.384001578603472, 0.3812574403626578, 0.3823798639433725, 0.382745019027165, 0.3809033717427935, 0.38538709708622526, 0.3849374566759382, 0.3807877387319292], "val_accuracy": [0.3583333194255829, 0.4606666564941406, 0.5649999976158142, 0.6713333129882812, 0.7026666402816772, 0.7316666841506958, 0.7353333234786987, 0.7366666793823242, 0.7383333444595337, 0.7556666731834412, 0.7556666731834412, 0.7609999775886536, 0.7696666717529297, 0.7833333611488342, 0.7870000004768372, 0.7929999828338623, 0.79666668176651, 0.8003333210945129, 0.7979999780654907, 0.7996666431427002, 0.8053333163261414, 0.8159999847412109, 0.8233333230018616, 0.8276666402816772, 0.8296666741371155, 0.828000009059906, 0.8336666822433472, 0.8386666774749756, 0.8356666564941406, 0.8370000123977661, 0.8396666646003723, 0.8386666774749756, 0.840666651725769, 0.8413333296775818, 0.8429999947547913, 0.8486666679382324, 0.8476666808128357, 0.843666672706604, 0.8496666550636292, 0.8550000190734863, 0.8523333072662354, 0.8526666760444641, 0.8536666631698608, 0.8510000109672546, 0.8483333587646484]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [6, 0, 8, 5, 3, 2, 8, 1, 5, 8, 2, 4, 4, 3, 6], [2, 1, 1, 0, 2, 0, 2, 2, 0, 2], [42, 32, 29, 49, 25], [1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 1, 1], [3, 7, 6, 5, 9, 7, 3, 9, 3, 6, 7, 4, 6], [2, 3, 3, 3, 1], [73, 50, 53], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [1, 2, 9, 1, 2, 7], [3, 2, 2, 2, 2], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 9, 5, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 11, 6, 5, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(grad), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.add(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.subtract(sigma, beta)), tf.math.add(beta, tf.math.add(beta, beta)))", "other_info": {"loss": [2.302165839902288, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 9, 3, 6, 2, 2, 6, 1, 5, 9, 4, 2, 6, 3, 6, 5, 9], [2, 0, 1, 0, 1, 0, 1, 2, 0, 2, 3, 3, 0], [31, 32, 29, 49, 25, 18], [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1], [3, 7, 6, 5, 5, 7, 3, 9], [2, 3, 3, 3, 1], [98], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 0, 1], [1, 0, 9, 1, 2], [0, 2, 0], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.negative(beta))", "other_info": {"loss": [2.302165839902288, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 1, 9, 4, 0, 5, 5, 8, 4, 4, 6, 3, 6], [1, 2, 1, 2, 2, 1, 2, 2, 0], [31, 32, 29, 49, 25], [0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 0, 1, 0, 0, 1], [4, 9, 6, 5, 0, 7, 3, 9], [3, 1, 0, 3, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [1, 3, 9, 1, 2], [0, 0, 2], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 2], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [2.302445120106693, 2.3028661170891955, 2.3028344077015945, 2.3027990282550226, 2.302851811470593, 2.3028772435309848], "accuracy": [0.09747721254825592, 0.09879804402589798, 0.09708096832036972, 0.09576013684272766, 0.0944393053650856, 0.09509972482919693], "val_loss": [1.9737185069492884, 1.9737292698451452, 1.9737628528050013, 1.9737228666033064, 1.9737351281302316, 1.9737254551478796], "val_accuracy": [0.09799999743700027, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925, 0.09666666388511658]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [1, 2, 3, 6, 2, 2, 9, 3, 5, 4, 4, 2, 6, 3, 6, 5, 8], [1, 0, 1, 0, 2, 0, 0, 2, 0, 2, 0, 0, 1], [31, 32, 29, 49, 25, 13, 17, 1], [1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 0, 1], [4, 7, 6, 5, 0, 7, 3, 9], [3, 3, 1, 1, 1], [98], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1], [7, 1, 2, 1, 2, 5], [3, 1, 2, 3, 1, 0], [38, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 29, 29, 16, 13, 8, 9, 9, 5, 4, 0, 1, 1, 0, 1, 0, 12, 6, 6, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(alpha)), tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.pow(tf.math.pow(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), grad)))))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.math.pow(grad, tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.subtract(tf.math.add(sigma, tf.math.subtract(alpha, beta)), tf.math.add(sigma, tf.math.square(alpha))), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 2, 4, 4, 5, 5, 8, 4, 4, 6, 3, 6, 9], [2, 0, 1, 2, 1, 0, 2, 2, 0, 2, 3, 3, 0], [50, 32, 29, 49, 25], [0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1], [4, 7, 6, 5, 5, 7, 3, 9], [2, 3, 3, 3, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 0, 1, 1, 1], [1, 6, 0, 1, 2], [0, 2, 3], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 26, 26, 16, 10, 4, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 3, 3, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, alpha)), tf.math.add(alpha, grad))), tf.math.pow(tf.math.add(alpha, tf.math.pow(alpha, tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.multiply(grad, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.negative(beta), sigma))", "other_info": {"loss": [2.302165839902288, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 2, 4, 3, 5, 5, 8, 4, 4, 6, 3, 6], [3, 0, 1, 0, 2, 1, 2, 2, 0], [31, 32, 29, 49, 25], [0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1], [3, 2, 6, 4, 3, 9, 3, 9, 2, 9, 4, 2, 5, 4, 5, 3, 3, 8], [3, 3, 3, 1, 1, 5, 3, 2, 1, 4, 4, 0], [98, 91, 97], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1], [1, 3, 8, 1, 2, 8], [3, 0, 2, 2, 3], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 25, 25, 16, 9, 3, 1, 0, 0, 0, 0, 11, 6, 5, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(grad, grad))), tf.math.add(beta, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(beta, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(grad, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.pow(alpha, tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, grad)))))))), grad))))), beta), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.sqrt(tf.math.subtract(sigma, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, beta)), tf.math.sqrt(sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 8, 6, 2, 2, 0, 1, 5, 8, 4, 4, 6, 3, 6], [3, 2, 1, 0, 2, 1, 2, 2, 0], [31, 95, 29, 49, 25], [1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1], [3, 7, 6, 2, 5, 7, 3, 9, 3, 6, 5, 4, 6], [0, 3, 3, 2, 1, 1, 3, 2, 2, 1], [98, 85, 73], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 0, 1, 1], [1, 4, 8, 1, 2], [3, 0, 2], [54, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 21, 21, 12, 9, 2, 1, 0, 0, 0, 0, 6, 3, 3, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.add(beta, tf.math.square(tf.math.add(tf.math.multiply(tf.math.add(beta, grad), tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta)))))), tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.square(tf.math.pow(alpha, tf.math.add(beta, grad))))), beta))), beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.pow(tf.math.sqrt(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 32, 29, 49, 25], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 0, 1], [4, 7, 8, 5, 0, 7, 3, 9], [3, 3, 0, 3, 1], [98], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [2, 1, 9, 1, 2, 4, 2, 0, 6, 8], [3, 3, 2, 3, 0, 3, 3], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 6, 6, 3, 3, 1, 1, 1, 0, 1, 0, 17, 10, 7, 2], "tree_depth": 15, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.subtract(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), sigma), tf.math.subtract(sigma, tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.negative(sigma)), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(sigma, tf.math.sqrt(sigma)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 5, 8, 6, 2, 4, 0, 5, 5, 8, 4, 4, 6, 3, 6], [0, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [98, 32, 29, 49, 25], [1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1], [1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [4, 7, 5, 5, 0, 7, 3, 9], [3, 3, 3, 3, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 0, 0, 1, 1, 1], [3, 1, 9, 1, 2], [1, 0, 1], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.square(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), alpha), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.302165839902288, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [65, 95, 29, 49, 25], [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 0, 1], [6, 2, 6, 0, 0, 7, 3, 9], [3, 3, 0, 2, 1], [45], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 0, 1], [9, 5, 9, 1, 2], [3, 1, 2], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 9, 9, 5, 4, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, alpha), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.negative(tf.math.add(beta, beta)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302165839902288, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 2, 1, 2, 2, 0], [31, 32, 29, 49, 25], [0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [8, 2, 6, 6, 2, 6, 4, 9, 8, 9, 4, 2, 5, 4, 2, 3, 3, 8], [3, 3, 0, 3, 1, 3, 1, 4, 3, 3, 1, 1], [98, 73, 60], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [1, 3, 8, 1, 2, 1, 1, 8, 9, 0, 3, 0, 6, 0], [3, 0, 2, 2, 0, 3, 2, 3], [31, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 15, 15, 9, 6, 2, 1, 1, 0, 1, 0, 22, 14, 8, 3], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(grad, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(grad, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), tf.math.pow(tf.math.add(beta, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(alpha))))), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(tf.math.sqrt(tf.math.subtract(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), beta)), tf.math.add(tf.math.subtract(tf.math.subtract(tf.math.sqrt(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.multiply(tf.math.negative(beta), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(sigma, tf.math.negative(beta))), sigma)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1], [3, 6, 3, 6, 2, 2, 4, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8, 5], [2, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0, 2], [31, 32, 67, 2, 27, 38, 25], [0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 0, 1], [4, 7, 6, 5, 0, 7, 3, 9], [2, 3, 3, 3, 1], [98], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1], [2, 3, 3, 1, 2], [1, 0, 2, 1, 3, 3], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 31, 31, 18, 13, 7, 9, 9, 5, 4, 0, 1, 1, 0, 1, 0, 11, 5, 6, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))))), grad), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.square(grad))))), tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(beta, tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.multiply(beta, tf.math.subtract(tf.math.add(alpha, sigma), sigma))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 2, 2, 4, 0, 5, 5, 8, 4, 4, 6, 3, 6, 4, 1, 8], [1, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 95, 29, 49, 25, 51], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 1, 1, 0, 0, 1], [3, 7, 6, 5, 5, 7, 3, 9], [3, 3, 0, 3, 1], [70], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 0, 1], [7, 1, 9, 1, 2], [3, 1, 2], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 30, 30, 18, 12, 6, 5, 5, 2, 3, 1, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.sqrt(tf.math.add(alpha, alpha)))))))))), tf.math.add(alpha, tf.math.pow(tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.pow(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.math.sqrt(grad), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(grad, tf.math.add(tf.math.add(beta, grad), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(alpha, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 8, 6, 2, 2, 0, 1, 5, 8, 4, 4, 6, 3, 6], [3, 0, 1, 0, 2, 1, 2, 2, 0], [31, 95, 29, 49, 25], [0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [3, 2, 6, 6, 3, 7, 3, 9, 2, 3, 0, 2, 1, 6, 4, 3, 3, 8], [3, 3, 3, 1, 1, 5, 3, 2, 1, 4, 4, 0], [98, 85, 73], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 0, 1, 1, 1], [1, 3, 2, 1, 2], [3, 0, 2, 2], [92, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 15, 15, 8, 7, 1, 1, 0, 0, 0, 0, 7, 3, 4, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(grad, grad)), grad)), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha)))), tf.math.add(beta, grad)), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(tf.math.add(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), beta), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10236428678035736, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 2, 2, 4, 3, 5, 9, 8, 4, 4, 6, 3, 6], [1, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 32, 29, 49, 25], [1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 7, 2, 5, 5, 7, 3, 9], [2, 3, 3, 3, 1, 0, 0], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 0, 0, 1, 1], [1, 3, 9, 1, 2], [0, 0, 2], [61, 52, 22]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 7, 4, 3, 3], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), beta)))", "other_info": {"loss": [2.302165839902288, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 4, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 32, 29, 49, 25], [1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 1], [3, 7, 6, 5, 5, 7, 3, 9], [3, 3, 0, 3, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 1, 0, 0, 1], [3, 6, 9, 1, 2], [3, 0, 2], [35, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 23, 23, 13, 10, 5, 8, 8, 4, 4, 1, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha))))))), tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), grad)), tf.math.add(alpha, tf.math.pow(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, grad)))))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.multiply(grad, tf.math.add(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.square(grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.301816481010962, 2.3024500441069398, 2.302957303173522, 2.301943572064149, 2.3035701570446623, 2.302157682718114], "accuracy": [0.09179764986038208, 0.08902391046285629, 0.09179764986038208, 0.08585391938686371, 0.09126931428909302, 0.09047681838274002], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 32, 29, 49, 25], [1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0], [3, 7, 6, 2, 9, 7, 3, 9, 3, 6, 7, 4, 6], [3, 3, 0, 3, 1], [33, 1], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [1, 1, 0, 0, 0, 1], [3, 6, 9, 1, 2], [3, 0, 2], [23, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 5, 4, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.add(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(grad, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.301816481010962, 2.3024500441069398, 2.302957303173522, 2.301943572064149, 2.3035701570446623, 2.302157682718114], "accuracy": [0.09179764986038208, 0.08902391046285629, 0.09179764986038208, 0.08585391938686371, 0.09126931428909302, 0.09047681838274002], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 32, 29, 49, 25], [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1], [4, 7, 6, 5, 4, 7, 3, 9, 4, 3, 1, 6, 8, 6, 0, 5], [3, 3, 0, 3, 1, 0, 1, 1, 4, 5, 3], [98, 46, 96], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [3, 9, 9, 1, 2], [3, 1, 2], [23, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 1, 1, 0, 1, 0, 27, 27, 16, 11, 3, 1, 0, 0, 0, 0, 3, 2, 1, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.pow(tf.math.add(beta, tf.math.add(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(alpha, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), alpha)))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha))))), tf.math.add(beta, grad)))), tf.math.add(beta, grad)))))), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.301816481010962, 2.3024500441069398, 2.302957303173522, 2.301943572064149, 2.3035701570446623, 2.302157682718114], "accuracy": [0.09179764986038208, 0.08902391046285629, 0.09179764986038208, 0.08585391938686371, 0.09126931428909302, 0.09047681838274002], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}]