[{"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [8, 2, 4, 2, 0, 2, 2, 8, 8, 1, 6, 0, 8, 5, 0, 0, 2, 2, 2, 6, 1, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [3, 3, 3, 1, 0, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [25, 9, 52, 66, 2, 57, 35, 9, 54, 64], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8328571319580078, "mapping_values": [1, 4, 4, 2, 2, 1, 34, 34, 21, 13, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(grad, grad), tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), alpha)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))))))))))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.square(tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))))))))), tf.math.add(beta, tf.math.add(grad, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(beta, tf.math.add(beta, grad))), grad))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.005855179292777, 1.4129674392936251, 0.9626373791376581, 0.8283603572653364, 0.7597431120320145, 0.744624206324169, 0.6718078758171474, 0.6640286008915833, 0.6584854599444181, 0.6205311472925134, 0.6305529289729938, 0.589925126180106, 0.5664392604079654, 0.55522330609358, 0.5359744358103683, 0.5406792843346551, 0.5171703334537086, 0.5257556949781625, 0.5046521204731264, 0.4922222773459735, 0.46651823117811414, 0.4813691337961074, 0.45446667890381176, 0.4587662268536769, 0.4584170891356553, 0.43531067797520756, 0.4398018564404498, 0.4204939286690882, 0.42992725879398747, 0.4154593238048329, 0.39651491781031184, 0.39493176646126166, 0.41161656456065454, 0.3870768038989719, 0.3780505292569295, 0.3982283639956648, 0.3923980064120322, 0.3643662926149627, 0.35965285158239224, 0.3516281508120878, 0.34742965785314883, 0.35331084757448894, 0.3385738719448107, 0.33104434425584267, 0.3474382021014307, 0.3300678467887535, 0.33558593341435394, 0.324528869105179, 0.3136689410060388, 0.3162906002595267, 0.3114612398799762, 0.3062538938546902, 0.3021331485850448, 0.2977130488279615, 0.28953062222067233, 0.2822579110397749, 0.27802454380153935, 0.2816992814176197, 0.28612807222628844, 0.2798208145260134, 0.27939182241413935, 0.28971074036776573, 0.2645608887908922, 0.26624240981998726, 0.26333062180501593, 0.24953874079637273, 0.246502115070749, 0.24866577967157014, 0.23981029407349183, 0.25057270322666664, 0.24910353904725568, 0.2406425547047125], "accuracy": [0.33826443552970886, 0.5145951509475708, 0.6441685557365417, 0.6857746839523315, 0.7199841737747192, 0.7228899598121643, 0.7503632307052612, 0.7539294958114624, 0.7516840696334839, 0.7609298825263977, 0.7629110813140869, 0.7798177003860474, 0.7921014428138733, 0.7957997918128967, 0.8005547523498535, 0.8000264167785645, 0.8096684813499451, 0.804649293422699, 0.8133667707443237, 0.8175934553146362, 0.8281601071357727, 0.819442629814148, 0.8325188159942627, 0.8309338092803955, 0.8308017253875732, 0.837537944316864, 0.8376700282096863, 0.841500461101532, 0.8429533839225769, 0.8465195894241333, 0.854708731174469, 0.8543124794960022, 0.8494254350662231, 0.8556333184242249, 0.8614450097084045, 0.8514066934585571, 0.8562937378883362, 0.8660678863525391, 0.8673887252807617, 0.8672566413879395, 0.8729361891746521, 0.8673887252807617, 0.8758420348167419, 0.8745211958885193, 0.8688416481018066, 0.8772949576377869, 0.876370370388031, 0.8804649114608765, 0.8850878477096558, 0.8816536664962769, 0.8837670087814331, 0.8858803510665894, 0.8894465565681458, 0.8853520154953003, 0.8914278149604797, 0.891559898853302, 0.8986923694610596, 0.891559898853302, 0.894069492816925, 0.8967111110687256, 0.8938053250312805, 0.8906353116035461, 0.8969752788543701, 0.901862382888794, 0.9025228023529053, 0.9014661312103271, 0.9039757251739502, 0.9038436412811279, 0.9111081957817078, 0.9034473896026611, 0.9038436412811279, 0.9078060984611511], "val_loss": [1.6850697653634208, 0.9393047945840018, 0.6383549996784755, 0.5873316356113979, 0.5939453669956752, 0.5406238692147392, 0.5306567634854998, 0.5186593873160226, 0.47626892157963346, 0.5061591352735247, 0.46117028168269564, 0.45011069093431744, 0.44324398040771484, 0.4799285445894514, 0.4242637668337141, 0.4234624079295567, 0.440740704536438, 0.41378974063055857, 0.40714613028935026, 0.3973069616726467, 0.41156802007130217, 0.38733820404325214, 0.3845655747822353, 0.4114906447274344, 0.40498355456760954, 0.3657389623778207, 0.3666835938181196, 0.3575996926852635, 0.366324714251927, 0.3506006257874625, 0.3516202058110918, 0.41695120504924227, 0.35038433756147114, 0.34225294419697355, 0.36228918177740915, 0.35356688499450684, 0.33415078265326364, 0.33440230573926655, 0.3373211366789682, 0.3243612391608102, 0.334911584854126, 0.32999363967350553, 0.3239281177520752, 0.35418169839041574, 0.32292494603565763, 0.3316136768886021, 0.32644026620047434, 0.32211663893290926, 0.34511520181383404, 0.34537462677274433, 0.33314119066510883, 0.3244991217340742, 0.3268897107669285, 0.34927537611552645, 0.32480156421661377, 0.3108756797654288, 0.3222912039075579, 0.3168627619743347, 0.3245485765593393, 0.31800046137401033, 0.37215317147118704, 0.32505123955862864, 0.32379744734082905, 0.3166522128241403, 0.32422317777361187, 0.3318782533918108, 0.31428743260247366, 0.3185479555811201, 0.3183865121432713, 0.3126718997955322, 0.30648584025246756, 0.3174865927015032], "val_accuracy": [0.37533333897590637, 0.6003333330154419, 0.6986666917800903, 0.7476666569709778, 0.734000027179718, 0.7733333110809326, 0.7526666522026062, 0.7683333158493042, 0.7979999780654907, 0.7710000276565552, 0.8006666898727417, 0.8106666803359985, 0.8106666803359985, 0.7720000147819519, 0.8186666369438171, 0.8196666836738586, 0.8069999814033508, 0.8336666822433472, 0.8273333311080933, 0.831333339214325, 0.8216666579246521, 0.8416666388511658, 0.8366666436195374, 0.8196666836738586, 0.8226666450500488, 0.8500000238418579, 0.8483333587646484, 0.8536666631698608, 0.843666672706604, 0.8560000061988831, 0.8510000109672546, 0.8289999961853027, 0.8583333492279053, 0.8553333282470703, 0.8423333168029785, 0.8533333539962769, 0.8616666793823242, 0.8629999756813049, 0.8566666841506958, 0.8613333106040955, 0.8650000095367432, 0.8653333187103271, 0.8659999966621399, 0.8479999899864197, 0.8669999837875366, 0.862666666507721, 0.8663333058357239, 0.8673333525657654, 0.8443333506584167, 0.862666666507721, 0.8619999885559082, 0.8586666584014893, 0.8683333396911621, 0.8650000095367432, 0.8663333058357239, 0.8686666488647461, 0.8693333268165588, 0.8693333268165588, 0.8659999966621399, 0.8696666955947876, 0.8543333411216736, 0.8659999966621399, 0.8703333139419556, 0.8769999742507935, 0.8759999871253967, 0.8633333444595337, 0.878000020980835, 0.8759999871253967, 0.871666669845581, 0.8743333220481873, 0.875, 0.8713333606719971]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [5, 2, 2, 2, 8, 0, 8, 5, 2, 2, 9, 2, 2, 8, 9, 0, 2, 2, 2, 3, 6, 3, 3, 5, 1, 2, 0, 3, 5, 4, 8, 6, 0, 8, 6, 3, 7, 1, 0, 6, 6, 3, 6, 0], [3, 3, 3, 1, 0, 3, 3, 3, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [25, 9, 52, 66, 2, 57, 35, 9, 54, 64], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [6, 3, 3, 4, 8], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8271428346633911, "mapping_values": [1, 4, 4, 2, 2, 1, 48, 48, 31, 17, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.sqrt(grad)))), tf.math.square(tf.math.add(beta, tf.math.add(grad, tf.math.add(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(grad, tf.math.sqrt(tf.math.add(beta, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))))), tf.math.add(beta, alpha))))))))), tf.math.add(beta, tf.math.negative(tf.math.add(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.negative(tf.math.multiply(grad, tf.math.square(grad)))))))))))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), beta))))))), tf.math.sqrt(grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.005852014538855, 1.4131423646054957, 0.9654744343514519, 0.8256987690169814, 0.7479985347749566, 0.7355921986930957, 0.6895682804021759, 0.6729339361190796, 0.6460547614264498, 0.6273242983410561, 0.6262837523529794, 0.5943808798871225, 0.5684038531731432, 0.5488514897845692, 0.5447578584836097, 0.5483606119575344, 0.5223818972968564, 0.5317300536597582, 0.5089182175145788, 0.49870830142912126, 0.46605208392124986, 0.4839604754946125, 0.4580265139040772, 0.460011601987343, 0.4588848013549417, 0.4375652391141227, 0.43833479570233985, 0.4217082150797125, 0.4378308015508328, 0.4108204727065152, 0.3983964820965296, 0.4041019913117647, 0.412384606576032, 0.38604524680069485, 0.3825776080972782, 0.4017164485132721, 0.39605878549182044, 0.36712991343812384, 0.36160429394980464, 0.35165212965990966, 0.3517585317566725, 0.3495155209642218, 0.33745287236929916, 0.33062695195693476, 0.3463779647179315, 0.3325223636909042, 0.3403674260169571], "accuracy": [0.33826443552970886, 0.5145951509475708, 0.6432439684867859, 0.6905296444892883, 0.7265883088111877, 0.7273808121681213, 0.7427024245262146, 0.7483819723129272, 0.7586844563484192, 0.7582882046699524, 0.7644960880279541, 0.7754589915275574, 0.7901201844215393, 0.7947431206703186, 0.8000264167785645, 0.7930260300636292, 0.8058380484580994, 0.804649293422699, 0.8123101592063904, 0.8189142942428589, 0.8310658931732178, 0.8166688680648804, 0.8313300609588623, 0.832650899887085, 0.8308017253875732, 0.8400475382804871, 0.8366134166717529, 0.8416325449943542, 0.8384625315666199, 0.8482366800308228, 0.8556333184242249, 0.8500858545303345, 0.8481045961380005, 0.8558974862098694, 0.8601241707801819, 0.8519350290298462, 0.8574824929237366, 0.8654074668884277, 0.8656716346740723, 0.8665962219238281, 0.8701624870300293, 0.8685774803161621, 0.8726720213890076, 0.8754457831382751, 0.8721436858177185, 0.8784837126731873, 0.8753136992454529], "val_loss": [1.6849206856318883, 0.9429380212511335, 0.6343338319233486, 0.582539541380746, 0.5823122433253697, 0.5638686077935355, 0.5565024444035122, 0.5087529080254691, 0.4817240408488682, 0.5035665205546788, 0.4706278528485979, 0.4557329756872995, 0.4524132013320923, 0.48766141278403147, 0.42812566246305195, 0.42316304785864695, 0.4414758341653006, 0.4185850705419268, 0.4188708407538278, 0.3929316742079599, 0.4111179879733494, 0.386051458971841, 0.3900595137051174, 0.4142502120562962, 0.40526155063084196, 0.3619955522673471, 0.3710932050432478, 0.35640913248062134, 0.37297041927065167, 0.35087909017290386, 0.3573874831199646, 0.4031736169542585, 0.3542793393135071, 0.3413970811026437, 0.3637840151786804, 0.35425132513046265, 0.3337546672139849, 0.33219288076673237, 0.3374257343155997, 0.3252757361957005, 0.3394705482891628, 0.32763226543154034, 0.32336424929755075, 0.3475961174283709, 0.32506851639066425, 0.33717342785426546, 0.32741289479391916], "val_accuracy": [0.37566667795181274, 0.5993333458900452, 0.7049999833106995, 0.7509999871253967, 0.7436666488647461, 0.7329999804496765, 0.7379999756813049, 0.784333348274231, 0.8003333210945129, 0.7770000100135803, 0.7923333048820496, 0.809333324432373, 0.8040000200271606, 0.7706666588783264, 0.8143333196640015, 0.8206666707992554, 0.8066666722297668, 0.828000009059906, 0.8163333535194397, 0.8339999914169312, 0.8206666707992554, 0.8403333425521851, 0.8363333344459534, 0.8163333535194397, 0.8240000009536743, 0.8486666679382324, 0.8453333377838135, 0.8543333411216736, 0.8379999995231628, 0.8553333282470703, 0.8503333330154419, 0.8336666822433472, 0.8503333330154419, 0.8610000014305115, 0.8446666598320007, 0.8500000238418579, 0.862666666507721, 0.8659999966621399, 0.8606666922569275, 0.8646666407585144, 0.8629999756813049, 0.8683333396911621, 0.8676666617393494, 0.8503333330154419, 0.8646666407585144, 0.8560000061988831, 0.8650000095367432]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [25, 66, 89, 50, 85, 46], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [5, 3, 2, 3, 8, 0, 8, 5, 2, 2, 9, 9, 2, 8, 9, 0, 2, 2, 2, 3, 6, 3, 3, 5, 1, 2, 5, 3, 5, 4, 8, 6, 0, 8, 6, 3, 7, 1, 0, 6, 6, 3, 6, 0], [3, 2, 0, 1, 0, 3, 3, 3, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [78, 9, 52, 66, 2, 57, 35, 9, 54, 64], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 0, 1, 1, 0, 0, 1, 0], [6, 3, 3, 4, 8], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.776285707950592, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.negative(tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2948863061978724, 2.281563092216509, 2.2666543613036296, 2.25089742686723, 2.232816829122116, 2.211353019747862, 2.1889989879609666, 2.1577231487845543, 2.1242312948859015, 2.082245446970875, 2.033464736643091, 1.979419633098613, 1.916662495637913, 1.8498514841387317, 1.777129160524942, 1.7111318675738914, 1.6362189259023368, 1.5645002398303849, 1.4999865462294721, 1.4415781044641962, 1.3903582962575511, 1.339691041876627, 1.303173331095794, 1.264054078813935, 1.2285268988355496, 1.208774868806812, 1.174903547459936, 1.1606218104727153, 1.1305362876096752, 1.1067042530425362, 1.0840833176238867, 1.0518692122505893, 1.048376235333983, 1.0331965622066144, 1.0167406278121993, 1.0035124416947128, 0.997996309036277, 0.9717000219028671, 0.9645165145405059, 0.962692542791587, 0.9529537339220587, 0.9304502202283279, 0.9275346812539333, 0.9197844842311304, 0.9104567536698702, 0.9044262641897417, 0.8941892054512075, 0.8822707671058523, 0.8806469608386116, 0.87025839754808, 0.8714089409754875, 0.863780055079462, 0.8547351905824392, 0.8455818641565227, 0.8462662573708456, 0.8448539771707444, 0.825674280380576, 0.8345706147634909, 0.8151422095745939, 0.8195397250247024, 0.8173063269160317, 0.8309649508847473, 0.8153185048249451, 0.8160250813985277, 0.7900261651050964, 0.7932708012098807, 0.7886150517657039, 0.7955955803795828, 0.7784924678924675, 0.7806993653005565, 0.7844020745789198, 0.7792323249253331, 0.7742644322704189, 0.7732548262968733, 0.7723936519728613, 0.7635488877159776, 0.7676007495092095, 0.7537729006401851, 0.7513889219499205, 0.746271879673634, 0.7450255927802109, 0.7454249345631159, 0.7507498184404259, 0.7499628984901364, 0.7350297784367572, 0.737252017990662, 0.7378759313536641, 0.7388924872319397, 0.7296842106612698, 0.7324039011725251, 0.7189465905177421, 0.7232044971519851, 0.7206693730412882, 0.7196517349580622, 0.7185716493538169, 0.7221898181941357, 0.7178584418245169, 0.7032160569711084, 0.713307814992666, 0.7140824577323733], "accuracy": [0.10606260597705841, 0.1364416927099228, 0.18663319945335388, 0.2242768406867981, 0.25795799493789673, 0.2969224750995636, 0.3152819871902466, 0.34684982895851135, 0.36520934104919434, 0.387399286031723, 0.4115704596042633, 0.4193633496761322, 0.43626996874809265, 0.44327038526535034, 0.46427157521247864, 0.469819039106369, 0.48632940649986267, 0.501518964767456, 0.5235767960548401, 0.5260863900184631, 0.5428609251976013, 0.5453705191612244, 0.5617488026618958, 0.5643904209136963, 0.5756174921989441, 0.5884295105934143, 0.5919957756996155, 0.5964865684509277, 0.6022982597351074, 0.6133931875228882, 0.6262052655220032, 0.6326773166656494, 0.6346585750579834, 0.6365077495574951, 0.6436402201652527, 0.6446968913078308, 0.6482630968093872, 0.6586976647377014, 0.6604147553443909, 0.656980574131012, 0.6579051613807678, 0.6667547225952148, 0.6701889038085938, 0.6690001487731934, 0.6730946898460388, 0.6729626059532166, 0.681547999382019, 0.6892088055610657, 0.6831330060958862, 0.6869634389877319, 0.6857746839523315, 0.6954167485237122, 0.6907938122749329, 0.6915863156318665, 0.6935675740242004, 0.6951525807380676, 0.6989829540252686, 0.702681303024292, 0.7018887996673584, 0.7022850513458252, 0.7038700580596924, 0.6923788189888, 0.7043983340263367, 0.7012283802032471, 0.7067758440971375, 0.709021270275116, 0.7141724824905396, 0.7041342258453369, 0.7168141603469849, 0.7169462442398071, 0.7144366502761841, 0.7117950320243835, 0.7148329019546509, 0.7154933214187622, 0.7207766771316528, 0.7197200059890747, 0.7177387475967407, 0.7162858247756958, 0.7275128960609436, 0.7224937081336975, 0.724210798740387, 0.7257958054542542, 0.7236824631690979, 0.7244749665260315, 0.7320036888122559, 0.7259278893470764, 0.7306828498840332, 0.7320036888122559, 0.7314753532409668, 0.7316074371337891, 0.7378153204917908, 0.7304186820983887, 0.7367587089538574, 0.7327961921691895, 0.7331924438476562, 0.7390040755271912, 0.7322678565979004, 0.7408532500267029, 0.7333245277404785, 0.7383436560630798], "val_loss": [1.9575082233973913, 1.9441353252955846, 1.9299285752432687, 1.914177758353097, 1.896279948098319, 1.8752132143293108, 1.8502305575779505, 1.8201614788600378, 1.7845452172415597, 1.7424447195870536, 1.6929383277893066, 1.6363918781280518, 1.5730906895228796, 1.504507064819336, 1.4327495438711983, 1.3605379717690604, 1.2890877723693848, 1.2201337473733085, 1.1564363411494665, 1.0992893150874548, 1.0483498913901192, 1.0040332930428642, 0.9648306710379464, 0.9305251666477748, 0.899975095476423, 0.8735228947230748, 0.8499063934598651, 0.8287695816584996, 0.8091630254473005, 0.7921063559395927, 0.7750686577388218, 0.7605555398123605, 0.747074910572597, 0.735636728150504, 0.724351133619036, 0.7139582804271153, 0.7051093918936593, 0.6958685091563633, 0.6879778589521136, 0.6808042866843087, 0.6737567526953561, 0.6683286087853568, 0.6620692184993199, 0.6550490515572684, 0.6489439010620117, 0.6436820030212402, 0.6398362943104335, 0.6344187770571027, 0.6310711417879377, 0.6253940377916608, 0.6204708474023002, 0.6168234518596104, 0.6128128085817609, 0.6089951140539986, 0.6067553588322231, 0.6021278926304409, 0.5993278878075736, 0.5964251416070121, 0.5928936856133598, 0.5899360009602138, 0.5864756618227277, 0.5843793664659772, 0.5820227520806449, 0.5804827383586338, 0.5773591484342303, 0.5748685598373413, 0.5730962242398944, 0.5698416743959699, 0.5676813806806292, 0.5651796545301165, 0.5625693798065186, 0.5613023042678833, 0.5598361832754952, 0.5573468889508929, 0.5568622691290719, 0.5539694683892387, 0.5520872047969273, 0.5505644083023071, 0.5479510341371808, 0.5471457583563668, 0.5455613136291504, 0.5438902718680245, 0.5420761959893363, 0.5404946293149676, 0.5402486494609288, 0.5383597612380981, 0.5364184038979667, 0.5357294252940586, 0.5344651085989816, 0.5328016451426915, 0.5322436264583043, 0.530036176953997, 0.5282658849443708, 0.5277303116662162, 0.5265108687537057, 0.5254172086715698, 0.5242131437574115, 0.5242622409548078, 0.5227093355996268, 0.5206379038946969], "val_accuracy": [0.15299999713897705, 0.27666667103767395, 0.35066667199134827, 0.3869999945163727, 0.4099999964237213, 0.43066665530204773, 0.45133334398269653, 0.4729999899864197, 0.4906666576862335, 0.5096666812896729, 0.5270000100135803, 0.5403333306312561, 0.5513333082199097, 0.5586666464805603, 0.5720000267028809, 0.5860000252723694, 0.5960000157356262, 0.6116666793823242, 0.6306666731834412, 0.640999972820282, 0.656000018119812, 0.6663333177566528, 0.6700000166893005, 0.6756666898727417, 0.6813333630561829, 0.6833333373069763, 0.6863333582878113, 0.6940000057220459, 0.6963333487510681, 0.6996666789054871, 0.7036666870117188, 0.7039999961853027, 0.7070000171661377, 0.7103333473205566, 0.7133333086967468, 0.7163333296775818, 0.718999981880188, 0.7226666808128357, 0.7256666421890259, 0.7273333072662354, 0.7279999852180481, 0.7266666889190674, 0.7289999723434448, 0.7310000061988831, 0.734666645526886, 0.7379999756813049, 0.7369999885559082, 0.737666666507721, 0.7386666536331177, 0.7393333315849304, 0.7450000047683716, 0.7440000176429749, 0.7450000047683716, 0.746999979019165, 0.7453333139419556, 0.75, 0.746999979019165, 0.7476666569709778, 0.749666690826416, 0.7523333430290222, 0.7546666860580444, 0.7549999952316284, 0.7553333044052124, 0.7556666731834412, 0.7563333511352539, 0.7556666731834412, 0.753333330154419, 0.7580000162124634, 0.7616666555404663, 0.7599999904632568, 0.7599999904632568, 0.7603333592414856, 0.7599999904632568, 0.7620000243186951, 0.7590000033378601, 0.7646666765213013, 0.7666666507720947, 0.7673333287239075, 0.7666666507720947, 0.7673333287239075, 0.7663333415985107, 0.7703333497047424, 0.7693333625793457, 0.7693333625793457, 0.7693333625793457, 0.7699999809265137, 0.7720000147819519, 0.7710000276565552, 0.7723333239555359, 0.7743333578109741, 0.7706666588783264, 0.7743333578109741, 0.7730000019073486, 0.7756666541099548, 0.7743333578109741, 0.7743333578109741, 0.7770000100135803, 0.7723333239555359, 0.7743333578109741, 0.7766666412353516]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [25, 66, 89, 50, 85, 46], [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0], [2, 7, 6, 5, 6, 2, 0, 3, 2, 8, 2, 3, 4, 4, 3, 0, 4, 2, 9, 8, 1, 3, 6, 0, 8, 5, 6, 3, 2, 4, 8, 3, 9, 1, 8, 5, 1, 6, 4, 0, 0, 8, 6, 0, 8, 4, 3, 7, 2, 5, 9, 2, 2, 9, 7, 2, 9], [3, 2, 1, 1, 0, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [78, 9, 52, 66, 2, 57, 35, 9, 54, 64], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 1, 1, 1, 0, 0], [4, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.7562857270240784, "mapping_values": [1, 4, 4, 2, 2, 1, 20, 20, 11, 9, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.negative(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(grad, tf.math.add(beta, beta)), tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.divide_no_nan(alpha, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha))), tf.math.multiply(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), grad))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(grad, grad))), beta)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.294886935923975, 2.28155729424574, 2.2666260849105337, 2.2508363976942753, 2.232695997225815, 2.2111439165453697, 2.1886502135116443, 2.157123280900455, 2.12327268740536, 2.0807615708933214, 2.031241268797353, 1.9763193139783017, 1.912497148994347, 1.8445703712011672, 1.770813949718105, 1.7040077126682742, 1.6283796446717977, 1.556186310556256, 1.4915092485676258, 1.433343504083281, 1.38243203556155, 1.3322041312606816, 1.2962717862255806, 1.257380672496906, 1.2224041974744493, 1.2031406848626822, 1.1695023757780643, 1.1553340100372913, 1.1255456846403706, 1.1020296447233926, 1.0794018623992956, 1.047678241467101, 1.0442049492619465, 1.0294094463900616, 1.013002293677677, 0.9999962738869984, 0.9947366990260224, 0.9684683366411351, 0.9614319300701936, 0.9597494497653154, 0.9500766218991847, 0.9278260909917411, 0.9251263269879295, 0.9173381840233255, 0.9079751340059037, 0.9021396289144478, 0.8920398797845293, 0.8800682414398375, 0.8787499794225021, 0.8682067702868674, 0.8693734937497669, 0.8618589431744179, 0.8528029069357608, 0.8438625257044515, 0.8445033299893027, 0.8432203135344299, 0.8240491560956884, 0.8331115113084405, 0.8136219307731061, 0.818112884396339, 0.8159024207788199, 0.829693642282656, 0.8139861763240072, 0.8145042240123676, 0.7886423660370148, 0.7918974275539233, 0.7872712050745784, 0.7942845774380255, 0.7773457025854957, 0.779521181181579, 0.7833229408146384, 0.7780234847936679, 0.7732307331877897, 0.772078285860017], "accuracy": [0.10606260597705841, 0.1364416927099228, 0.18676528334617615, 0.22440892457962036, 0.25782591104507446, 0.29665830731391907, 0.3152819871902466, 0.34764233231544495, 0.36520934104919434, 0.3877955377101898, 0.41183462738990784, 0.42068418860435486, 0.4365341365337372, 0.4439307749271393, 0.46506404876708984, 0.4714040458202362, 0.4880464971065521, 0.5040285587310791, 0.524501383304596, 0.5271430611610413, 0.544710099697113, 0.5477479696273804, 0.561880886554718, 0.5658433437347412, 0.5766741633415222, 0.5906749367713928, 0.5935807824134827, 0.5978074073791504, 0.6042794585227966, 0.613789439201355, 0.6275261044502258, 0.6350548267364502, 0.6351869106292725, 0.6366398334503174, 0.644300639629364, 0.6454893946647644, 0.6503764390945435, 0.6588297486305237, 0.6609430909156799, 0.6573768258094788, 0.6579051613807678, 0.6676793098449707, 0.6707172393798828, 0.6692643165588379, 0.6733588576316833, 0.6730946898460388, 0.6816800832748413, 0.6889446377754211, 0.6839255094528198, 0.6873596906661987, 0.6863030195236206, 0.6960771083831787, 0.6922467350959778, 0.6921146512031555, 0.693831741809845, 0.6956809163093567, 0.698190450668335, 0.7020208835601807, 0.7022850513458252, 0.7025492191314697, 0.7030775547027588, 0.6931713223457336, 0.7045304179191589, 0.7020208835601807, 0.7067758440971375, 0.7096816897392273, 0.713908314704895, 0.7046625018119812, 0.7169462442398071, 0.7166820764541626, 0.7143045663833618, 0.7113987803459167, 0.7147008180618286, 0.7149649858474731], "val_loss": [1.9575065885271346, 1.9441161836896623, 1.9298860686165946, 1.9140870230538505, 1.8961173466273717, 1.8749391692025321, 1.8497682298932756, 1.819391863686698, 1.7833384105137415, 1.7405977249145508, 1.690237249646868, 1.6326543263026647, 1.5681522914341517, 1.4983254841395788, 1.425436224256243, 1.3522681508745467, 1.2801134926932198, 1.2106984002249581, 1.1468648229326521, 1.0899462699890137, 1.0394299030303955, 0.9956662654876709, 0.9570567607879639, 0.9232911382402692, 0.8933733531406948, 0.8674733298165458, 0.8443206037793841, 0.8235515696661813, 0.8043079035622733, 0.7876323291233608, 0.7708859613963536, 0.7566533429282052, 0.7434293712888446, 0.7322732380458287, 0.7211650609970093, 0.7109845195497785, 0.7022974831717355, 0.6932027680533273, 0.6854667833873204, 0.6784792627607074, 0.6716178485325405, 0.6663628476006644, 0.6600926262991769, 0.6531374113900321, 0.6470908778054374, 0.6418691873550415, 0.6380587305341449, 0.6327540022986275, 0.629564915384565, 0.6238071066992623, 0.6188550676618304, 0.6152516944067818, 0.6113615546907697, 0.6075882571084159, 0.605422820363726, 0.6007545334952218, 0.5979861702237811, 0.5950876133782523, 0.591671347618103, 0.5887478590011597, 0.585365755217416, 0.5834148100444249, 0.5809555564607892, 0.5794457197189331, 0.576291595186506, 0.5738831588200161, 0.5721077748707363, 0.568669148853847, 0.5666516167776925, 0.5642503840582711, 0.5615884235927037, 0.5604415961674282, 0.5589427437101092, 0.556533864566258], "val_accuracy": [0.15299999713897705, 0.27666667103767395, 0.35100001096725464, 0.3866666555404663, 0.4099999964237213, 0.4313333332538605, 0.45100000500679016, 0.4729999899864197, 0.4909999966621399, 0.5109999775886536, 0.5273333191871643, 0.5416666865348816, 0.5523333549499512, 0.5600000023841858, 0.5736666917800903, 0.5876666903495789, 0.5989999771118164, 0.612333357334137, 0.6309999823570251, 0.6423333287239075, 0.6583333611488342, 0.6663333177566528, 0.671999990940094, 0.6776666641235352, 0.6819999814033508, 0.6840000152587891, 0.687333345413208, 0.6943333148956299, 0.6966666579246521, 0.7009999752044678, 0.7036666870117188, 0.7049999833106995, 0.7073333263397217, 0.7116666436195374, 0.7133333086967468, 0.7179999947547913, 0.7200000286102295, 0.7233333587646484, 0.7263333201408386, 0.7273333072662354, 0.7293333411216736, 0.7266666889190674, 0.7303333282470703, 0.7316666841506958, 0.7356666922569275, 0.7379999756813049, 0.7369999885559082, 0.737666666507721, 0.7386666536331177, 0.7403333187103271, 0.7459999918937683, 0.7440000176429749, 0.7446666955947876, 0.7473333477973938, 0.7450000047683716, 0.7506666779518127, 0.746999979019165, 0.7483333349227905, 0.7493333220481873, 0.7516666650772095, 0.7540000081062317, 0.7556666731834412, 0.7559999823570251, 0.7559999823570251, 0.7563333511352539, 0.7549999952316284, 0.7536666393280029, 0.7573333382606506, 0.7630000114440918, 0.7603333592414856, 0.7599999904632568, 0.7606666684150696, 0.7606666684150696, 0.7630000114440918]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [79, 66, 89, 50, 85, 46], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0], [4, 2, 6, 2, 6, 2, 2, 1, 2, 2, 6, 6, 8, 2, 0, 0, 2, 2, 2, 2, 1, 4, 9, 4, 1, 2, 0, 3, 9, 0, 8, 3, 0, 0, 8, 1, 7, 2, 6, 3, 2, 1, 6, 0, 2, 5, 7], [0, 3, 3, 2, 0, 3, 3, 3, 3, 3, 2, 3, 1, 3, 3, 3, 4, 3, 2, 3, 3, 0, 0, 1, 5, 2, 3, 0, 4, 2, 1, 1, 4], [74, 59, 7, 3, 40, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [6, 7, 3, 4, 8], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.5214285850524902, "mapping_values": [1, 4, 4, 2, 2, 1, 29, 29, 15, 14, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.negative(tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(tf.math.add(beta, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.sqrt(tf.math.add(tf.math.add(beta, grad), beta)))))))), grad)), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.661608906155013, 2.5021347356840855, 2.2661086817018234, 2.1509372921289787, 1.9276491230536508, 2.2786250611999175, 2.3110277498749348, 2.3048240641529816, 2.302732137562403], "accuracy": [0.20235107839107513, 0.11015717685222626, 0.1674811840057373, 0.260071337223053, 0.3567560315132141, 0.2028794139623642, 0.09853387624025345, 0.09470347315073013, 0.1006472036242485], "val_loss": [2.912471498761858, 1.974245480128697, 1.5242784363882882, 1.3442133494785853, 1.791259799684797, 1.9858946119035994, 1.9757916586739677, 1.9740873745509557, 1.9732839039393835], "val_accuracy": [0.18400000035762787, 0.12800000607967377, 0.43066665530204773, 0.49566665291786194, 0.45533332228660583, 0.10199999809265137, 0.0949999988079071, 0.0949999988079071, 0.09733333438634872]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 8, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [25, 66, 89, 50, 85, 46], [0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [3, 3, 2, 2, 8, 0, 8, 5, 0, 2, 9, 9, 2, 8, 9, 0, 2, 2, 2, 3, 6, 3, 3, 5, 1, 2, 5, 3, 5, 4, 8, 6, 0, 8, 6, 3, 7, 1, 0, 6, 6, 3, 6, 0], [3, 2, 3, 1, 0, 3, 3, 3, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [13, 9, 67, 66, 2, 57, 35, 9, 54, 64], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 0, 1, 1, 0, 0, 1, 0], [6, 3, 3, 4, 8], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.29085713624954224, "mapping_values": [1, 2, 2, 1, 1, 0, 19, 19, 15, 4, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.sqrt(tf.math.negative(tf.math.sqrt(tf.math.add(beta, grad)))), tf.math.square(tf.math.negative(beta))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)))), alpha)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.6331442050520675, 2.3074519592993576, 2.292188884307837, 2.5458639984385307, 2.290714282149321, 2.3014373661835337, 2.3048754108108, 2.301707356093566, 2.2965350543755143, 2.212315682769058, 2.034944477554924, 2.3197900047549136, 2.304100508167759, 2.2624398756650743, 2.041517571230858], "accuracy": [0.20552106201648712, 0.09906221181154251, 0.1582353711128235, 0.10328886657953262, 0.11834631860256195, 0.16497160494327545, 0.09813763201236725, 0.10408136248588562, 0.107647605240345, 0.17250032722949982, 0.33060362935066223, 0.09628847241401672, 0.09457138925790787, 0.15136705338954926, 0.3019416332244873], "val_loss": [1.9859895706176758, 1.9631237302507674, 2.9104809761047363, 1.9742576054164342, 1.96378721509661, 1.976226466042655, 1.9729314531598772, 1.970808778490339, 1.9581716401236398, 1.6295301573617118, 2.0096143313816617, 1.97507871900286, 1.967585631779262, 1.7167342049734933, 1.8241745403834753], "val_accuracy": [0.10066666454076767, 0.10366666316986084, 0.2776666581630707, 0.10833333432674408, 0.28733333945274353, 0.0949999988079071, 0.09799999743700027, 0.09666666388511658, 0.16633333265781403, 0.3790000081062317, 0.0949999988079071, 0.10066666454076767, 0.1120000034570694, 0.3140000104904175, 0.2966666519641876]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 9, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [73, 66, 89, 50, 85, 46], [0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0], [5, 2, 2, 2, 8, 5, 8, 1, 2, 2, 9, 2, 2, 8, 9, 0, 2, 2, 2, 3, 6, 3, 3, 5, 1, 2, 0, 3, 5, 4, 8, 6, 0, 8, 6, 3, 7, 1, 0, 6, 6, 3, 6, 0], [0, 3, 0, 1, 0, 3, 0, 3, 2, 3, 2, 3, 2, 3, 3, 3, 4, 3, 2, 1, 3, 0, 3, 1, 5, 2, 3, 0, 4, 2, 1, 4, 4], [25, 9, 52, 66, 2, 57, 35, 9, 54, 64], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 1, 1, 1, 0, 0], [4, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07792893797159195, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [5, 2, 2, 8, 8, 1, 8, 5, 2, 2, 0, 2, 8, 8, 9, 0, 2, 2, 2, 3, 6, 3, 3, 5, 1, 2, 0, 6, 5, 4, 8, 6, 0, 8, 6, 3, 7, 1, 0, 6, 6, 3, 6, 0], [3, 3, 3, 1, 0, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [25, 9, 52, 66, 2, 57, 35, 9, 54, 64], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [6, 3, 3, 4, 8], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [2, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 2, 44, 44, 28, 16, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.sqrt(grad)), tf.math.add(beta, tf.math.sqrt(tf.math.subtract(grad, tf.math.sqrt(tf.math.add(beta, tf.math.square(grad))))))), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.negative(tf.math.add(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(grad, tf.math.multiply(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, beta), grad), tf.math.add(beta, grad))))))))))), tf.math.negative(grad))))))), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, beta))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [5, 2, 8, 2, 8, 5, 8, 1, 2, 2, 9, 2, 3, 8, 9, 0, 2, 2, 2, 3, 6, 3, 3, 5, 1, 2, 0, 3, 5, 4, 8, 6, 0, 5, 6, 3, 7, 1, 2, 6, 6, 3, 6, 0, 5, 8, 4, 5, 2], [3, 3, 3, 1, 0, 3, 3, 3, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 3, 5, 1, 3, 3, 4, 2, 1, 4, 4], [25, 9, 52, 66, 2, 57, 35, 9, 54, 64], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [6, 3, 3, 4, 8], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 22, 22, 16, 6, 3, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, grad)), tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.square(grad))), tf.math.sqrt(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(tf.math.add(tf.math.add(beta, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(alpha, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))))), tf.math.negative(grad)))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07872143387794495, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [73, 66, 89, 50, 85, 46], [0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0], [1, 2, 2, 2, 8, 0, 8, 5, 2, 2, 9, 2, 2, 8, 9, 0, 2, 2, 2, 3, 6, 3, 3, 5, 1, 2, 0, 3, 5, 4, 8, 6, 0, 8, 6, 3, 7, 1, 0, 6, 6, 3, 6, 0], [3, 3, 3, 1, 0, 3, 3, 3, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [25, 9, 52, 66, 2, 57, 35, 9, 54, 64], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [6, 3, 3, 4, 8], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 17, 17, 11, 6, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.negative(grad))), tf.math.sqrt(tf.math.add(beta, tf.math.square(grad))))), tf.math.add(alpha, tf.math.add(beta, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.add(grad, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [901130271787.9526, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1748778223991394, 0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [5.739133880574129e+33, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10366666316986084, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 4, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0], [1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [1, 2, 4, 2, 6, 2, 2, 8, 8, 2, 6, 6, 2, 5, 0, 0, 2, 2, 0, 6, 1, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [0, 3, 0, 1, 0, 3, 0, 3, 2, 3, 2, 3, 2, 3, 3, 3, 4, 3, 2, 1, 3, 0, 3, 1, 5, 2, 3, 0, 4, 2, 1, 4, 4], [25, 9, 52, 66, 2, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [4, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07911768555641174, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 5, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1], [2, 7, 6, 2, 6, 2, 6, 3, 2, 8, 6, 3, 4, 4, 0, 0, 2, 2, 2, 6, 1, 3, 6, 0, 8, 5, 6, 3, 2, 4, 8, 3, 9, 1, 8, 3, 1, 6, 4, 0, 0, 8, 6, 0, 8, 4, 3, 7, 2, 5, 8, 2, 2, 9, 7, 2, 9], [3, 3, 3, 3, 0, 3, 3, 3, 1, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 3, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4, 3, 2, 5, 0], [25, 9, 52, 66, 2, 57, 35, 9, 54, 64], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [6, 3, 3, 4, 8], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [2, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 94, 94, 57, 37, 6, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 79, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.divide_no_nan(grad, tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(grad, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.negative(tf.math.add(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, grad), grad), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(alpha, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, beta))))))), tf.math.add(beta, tf.math.multiply(tf.math.add(grad, grad), grad))))))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.sqrt(grad)), tf.math.multiply(beta, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))))))))))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.subtract(tf.math.sqrt(tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, alpha))))), tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))), grad)), alpha)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, tf.math.add(grad, tf.math.square(alpha))))), grad)), tf.math.add(beta, grad))))))))), tf.math.sqrt(tf.math.add(grad, tf.math.add(beta, beta))))), tf.math.add(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32), alpha)), tf.math.add(tf.math.add(beta, tf.math.add(grad, grad)), grad)), beta)), tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [5, 2, 0, 2, 8, 0, 8, 5, 2, 2, 9, 2, 2, 8, 9, 4, 2, 2, 8, 3, 6, 3, 3, 5, 1, 2, 0, 3, 5, 4, 4, 6, 0, 8, 6, 3, 7, 1, 0, 6, 6, 3, 6, 0], [0, 3, 0, 1, 0, 3, 0, 3, 2, 3, 2, 0, 2, 3, 3, 3, 4, 3, 2, 1, 3, 0, 3, 1, 5, 2, 3, 0, 4, 2, 1, 4, 4], [25, 9, 52, 66, 2, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0], [4, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 11, 11, 8, 3, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(tf.math.negative(tf.math.add(beta, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.sqrt(tf.math.negative(grad)), tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.606994942724581e+20, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06538105756044388, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0], [2, 7, 6, 2, 6, 2, 0, 3, 2, 8, 8, 3, 4, 3, 3, 0, 2, 2, 9, 8, 1, 3, 6, 2, 8, 5, 6, 3, 2, 4, 8, 1, 9, 1, 8, 5, 1, 9, 4, 4, 9, 8, 6, 0, 8, 4, 3, 7, 2, 5, 9, 2, 2, 9, 7, 2, 9], [3, 3, 3, 2, 1, 3, 3, 3, 2, 2, 2, 3, 3, 3, 3, 2, 1, 3, 0, 1, 3, 3, 1, 1, 5, 1, 3, 3, 3, 2, 1, 4, 4], [25, 9, 52, 66, 8, 57, 35, 9, 54, 64], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 1, 1, 1, 0, 0], [6, 3, 3, 4, 8], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [0, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 66, 66, 42, 24, 5, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 56, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.negative(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(grad, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), tf.math.pow(tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.add(tf.math.add(beta, tf.math.add(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.sqrt(beta)))))))), tf.math.add(beta, tf.math.subtract(beta, tf.math.multiply(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, grad)), tf.math.square(tf.math.divide_no_nan(grad, tf.math.multiply(grad, tf.math.add(tf.math.add(beta, beta), alpha))))))))))))), tf.math.pow(grad, tf.math.add(beta, tf.math.sqrt(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.subtract(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(tf.math.pow(tf.math.add(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), alpha), tf.math.add(beta, grad))))))))), tf.math.add(beta, grad)))))), alpha)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3027375280392595, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 1, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0], [0, 2, 2, 9, 5, 0, 8, 5, 2, 2, 9, 2, 2, 8, 9, 0, 4, 2, 2, 3, 6, 3, 3, 5, 1, 2, 0, 3, 5, 4, 8, 6, 0, 8, 6, 3, 7, 1, 0, 6, 6, 3, 6, 0], [3, 3, 3, 1, 0, 0, 3, 1, 0, 3, 2, 3, 3, 3, 3, 0, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [25, 9, 52, 66, 2, 57, 35, 9, 54, 64], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [6, 3, 3, 4, 8], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [2, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 0, 8, 8, 6, 2, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.negative(grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [31.71885933836359, 970739.352047879, 64168872358.633736, 4235129712772643.0, 2.7912713321108557e+20, 1.8253421229227766e+25], "accuracy": [0.09642054885625839, 0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1459.6253138950892, 28547090.285714287, 1870861996617.1428, 1.2260881181030107e+17, 8.035291090799891e+21, 5.2660083692666166e+26], "val_accuracy": [0.10199999809265137, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [73, 66, 89, 50, 85, 46], [0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0], [5, 2, 2, 2, 8, 0, 8, 5, 2, 2, 9, 2, 2, 8, 9, 0, 2, 2, 2, 3, 6, 3, 3, 5, 1, 2, 0, 3, 5, 4, 8, 6, 0, 8, 6, 3, 7, 1, 0, 6, 6, 3, 6, 0], [3, 3, 3, 1, 0, 3, 3, 3, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [25, 9, 52, 66, 2, 57, 35, 9, 54, 64], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 1, 1, 1, 0, 0], [6, 3, 3, 4, 8], [0, 0], [69, 2], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [0, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 4, 4, 2, 2, 0, 1, 0, 0, 0, 0, 6, 3, 3, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.sqrt(grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.multiply(beta, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.3027375280392595, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [73, 66, 89, 50, 85, 46], [1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0], [5, 2, 2, 2, 8, 5, 8, 1, 2, 2, 9, 2, 2, 8, 9, 0, 2, 2, 2, 3, 6, 3, 3, 5, 1, 2, 0, 3, 5, 4, 8, 6, 0, 8, 6, 3, 7, 1, 0, 6, 6, 3, 6, 0], [3, 3, 3, 1, 0, 3, 3, 3, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [25, 9, 52, 66, 2, 57, 35, 9, 54, 64], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 1, 1, 1, 0, 0], [6, 3, 3, 4, 8], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [0, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 4, 4, 2, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3027375280392595, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 4, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0], [2, 7, 6, 2, 6, 2, 0, 3, 1, 8, 8, 2, 4, 4, 3, 0, 9, 6, 9, 8, 1, 3, 6, 0, 8, 5, 6, 3, 2, 4, 8, 3, 9, 1, 8, 5, 1, 6, 4, 0, 0, 8, 6, 0, 8, 4, 3, 7, 2, 5, 9, 2, 2, 9, 7, 2, 9], [3, 2, 3, 1, 0, 3, 3, 3, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [78, 9, 52, 66, 2, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 1, 0, 0, 1, 0], [6, 3, 3, 4, 8], [0, 0], [69, 2], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 1, 11, 11, 5, 6, 1, 1, 0, 0, 0, 0, 6, 3, 3, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(grad, tf.math.pow(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, beta))), tf.math.divide_no_nan(tf.math.add(grad, tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.square(tf.math.multiply(beta, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08241976052522659, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [73, 66, 89, 50, 85, 46], [0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 2, 2, 9, 5, 2, 8, 5, 2, 2, 9, 2, 2, 8, 9, 0, 4, 2, 2, 3, 6, 3, 3, 5, 1, 2, 0, 3, 5, 4, 8, 6, 0, 8, 6, 3, 7, 1, 0, 6, 6, 3, 6, 0], [3, 3, 2, 1, 3, 3, 0, 3, 3, 3, 1, 0, 3, 3, 3, 3, 4, 3, 1, 0, 4, 1, 1, 1, 3, 3, 1, 3, 5, 3, 2, 0, 3, 2, 0, 5, 3, 3, 2, 3, 5], [25, 9, 52, 66, 2, 57, 35, 9, 54, 64], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0], [0, 0, 1, 1, 1, 0, 0], [6, 3, 3, 4, 8], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 9, 9, 6, 3, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.square(tf.math.add(grad, beta))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [25, 66, 89, 50, 85, 46], [0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [5, 3, 5, 2, 8, 0, 8, 5, 2, 2, 9, 9, 2, 8, 9, 0, 2, 2, 2, 3, 6, 3, 3, 5, 1, 2, 5, 3, 5, 4, 8, 6, 0, 8, 6, 3, 7, 1, 0, 6, 6, 3, 6, 0], [3, 3, 3, 1, 0, 0, 3, 1, 0, 3, 2, 3, 3, 3, 3, 0, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [25, 9, 52, 66, 2, 57, 35, 9, 54, 64], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [6, 3, 3, 4, 8], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.08371428400278091, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.638292039059503, 2.3088462291030267, 3.3389901375773716, 2.3092564201594312, 2.3046630780143573, 2.3032381294299866, 2.30313438192067], "accuracy": [0.20552106201648712, 0.09906221181154251, 0.14819706976413727, 0.09668471664190292, 0.09734513610601425, 0.09972262382507324, 0.09140139818191528], "val_loss": [1.9856799670628138, 1.972292491367885, 1.983410222189767, 1.975752898624965, 1.974132878439767, 1.973740713936942, 1.9745988845825195], "val_accuracy": [0.10233332961797714, 0.10833333432674408, 0.10466666519641876, 0.0949999988079071, 0.10366666316986084, 0.09799999743700027, 0.10233332961797714]}}]