[{"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [3, 8, 2, 2, 9, 1, 3, 2, 8, 3, 7, 2, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [0, 2, 3, 3, 3, 3, 1, 2, 1, 4, 4, 3, 1, 4, 1, 3], [8, 52, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0], [6, 1, 6, 5], [7, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8325714468955994, "mapping_values": [1, 4, 4, 2, 2, 1, 8, 8, 4, 4, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.sqrt(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, tf.math.add(beta, grad)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.0608700432750324, 1.5385267940636371, 0.9722830183974284, 0.7718948626231681, 0.6893475410047382, 0.6278466895397833, 0.6069080485738326, 0.5626905494519764, 0.5714226865875502, 0.5398228092436714, 0.519438123934462, 0.5058223872593507, 0.48093679263890615, 0.48123713319705635, 0.46233248913355823, 0.44869586347100787, 0.4241637931035699, 0.4348298677749732, 0.4263794435572709, 0.4092805505019326, 0.3934918042179332, 0.39621265064282835, 0.3743991588502276, 0.3611096781809505], "accuracy": [0.2942807972431183, 0.48474442958831787, 0.6347906589508057, 0.7181349992752075, 0.7457403540611267, 0.7630431652069092, 0.7726852297782898, 0.7878747582435608, 0.7839123010635376, 0.793422281742096, 0.8050455451011658, 0.8080834746360779, 0.8156121969223022, 0.8161405324935913, 0.8256505131721497, 0.8298771381378174, 0.8409721255302429, 0.8338396549224854, 0.8387266993522644, 0.846387505531311, 0.8551049828529358, 0.8535200357437134, 0.8598600029945374, 0.8621054291725159], "val_loss": [1.6485604558672224, 0.8719871725354876, 0.598454407283238, 0.538228052003043, 0.5336397886276245, 0.5129869495119367, 0.46270574842180523, 0.45661004952022005, 0.41562128918511526, 0.4089087588446481, 0.40920551334108624, 0.39801520109176636, 0.3811856508255005, 0.37604719400405884, 0.39590478794915335, 0.36588118757520405, 0.38907226494380404, 0.3707667418888637, 0.3411895888192313, 0.3453922356878008, 0.35520302397864206, 0.3362806098801749, 0.34044070754732403, 0.33667384726660593], "val_accuracy": [0.382999986410141, 0.612333357334137, 0.7453333139419556, 0.7556666731834412, 0.7596666812896729, 0.762666642665863, 0.7979999780654907, 0.7940000295639038, 0.8246666789054871, 0.8256666660308838, 0.8233333230018616, 0.8289999961853027, 0.8443333506584167, 0.8483333587646484, 0.8256666660308838, 0.8486666679382324, 0.8253333568572998, 0.840666651725769, 0.8629999756813049, 0.8543333411216736, 0.8569999933242798, 0.8616666793823242, 0.856333315372467, 0.8579999804496765]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 4, 8, 2, 2, 1, 3, 9, 8, 3, 7, 2, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [0, 2, 3, 3, 0, 3, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3], [8, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8277142643928528, "mapping_values": [1, 4, 4, 2, 2, 1, 14, 14, 7, 7, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.pow(tf.math.add(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), grad)))))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.0607766819164, 1.4873973653930888, 0.9364948246095158, 0.7843374082315017, 0.6837827529432972, 0.619912607590158, 0.6057708694273218, 0.5591573459896445, 0.553789842232674, 0.5145499335382718, 0.49856362361650364, 0.4969867668005737, 0.4795215228616034, 0.46679440514286513, 0.4641667711161635, 0.43705878184849734, 0.4209852095183097, 0.41996334289846293], "accuracy": [0.2945449650287628, 0.5001981258392334, 0.6552634835243225, 0.7132478952407837, 0.7456082701683044, 0.7652885913848877, 0.767930269241333, 0.789988100528717, 0.791969358921051, 0.8047813773155212, 0.8133667707443237, 0.8088759779930115, 0.8169330358505249, 0.8236692547798157, 0.8247259259223938, 0.8362171649932861, 0.842028796672821, 0.8412362933158875], "val_loss": [1.6478572913578577, 0.7899986846106393, 0.6161622830799648, 0.5404235465185983, 0.4997964416231428, 0.5067220415387835, 0.4714322771344866, 0.47316856043679373, 0.40516261543546406, 0.41809275320598055, 0.40971996103014263, 0.3816651701927185, 0.37163233757019043, 0.4039336272648403, 0.3889585052217756, 0.3655561549322946, 0.38451812097004484, 0.3618227413722447], "val_accuracy": [0.38233333826065063, 0.6736666560173035, 0.7256666421890259, 0.7606666684150696, 0.7760000228881836, 0.7689999938011169, 0.7913333177566528, 0.7806666493415833, 0.8276666402816772, 0.8163333535194397, 0.8236666917800903, 0.843666672706604, 0.8503333330154419, 0.8230000138282776, 0.8346666693687439, 0.8450000286102295, 0.8296666741371155, 0.8450000286102295]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 6, 8, 2, 6, 1, 1, 9, 8, 3, 7, 2, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [0, 3, 3, 3, 3, 3, 1, 2, 1, 4, 4, 3, 1, 4, 1, 3], [8, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0], [6, 1, 6, 5], [7, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8265714049339294, "mapping_values": [1, 4, 4, 2, 2, 1, 14, 14, 7, 7, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad))))))))), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.060712170969336, 1.4898176287710392, 0.9867129195257657, 0.791279606650046, 0.6779878926141749, 0.6224427371685767, 0.5959831262859828, 0.5571701548055745, 0.5580550232866988, 0.5555959050886194, 0.52778020320457, 0.49614972524465967, 0.4659328302057302, 0.4808612382249778, 0.45273130677080486, 0.4470060059242024, 0.4202429184572273, 0.42801916522907935], "accuracy": [0.29441288113594055, 0.499009370803833, 0.639809787273407, 0.7107383608818054, 0.7460044622421265, 0.7646281719207764, 0.7721568942070007, 0.7890635132789612, 0.7889314293861389, 0.7886672616004944, 0.8055738806724548, 0.8103289008140564, 0.8231409192085266, 0.817989706993103, 0.8264430165290833, 0.8318583965301514, 0.8385946154594421, 0.8392550349235535], "val_loss": [1.646935565131051, 0.7946715354919434, 0.6833948067256382, 0.5392688853400094, 0.49974046434674946, 0.4909991707120623, 0.4626698153359549, 0.4496805667877197, 0.4136020115443638, 0.41060646942683626, 0.40555548667907715, 0.3939539108957563, 0.3754029870033264, 0.3860237513269697, 0.3932672568729946, 0.3641280106135777, 0.39103543758392334, 0.366500266960689], "val_accuracy": [0.3803333342075348, 0.668666660785675, 0.7076666951179504, 0.7603333592414856, 0.7736666798591614, 0.7766666412353516, 0.7933333516120911, 0.7986666560173035, 0.8213333487510681, 0.8240000009536743, 0.8270000219345093, 0.8353333473205566, 0.8489999771118164, 0.8363333344459534, 0.8343333601951599, 0.8433333039283752, 0.8270000219345093, 0.8399999737739563]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [0, 4, 8, 2, 2, 1, 3, 0, 8, 3, 7, 2, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [1, 2, 3, 3, 0, 2, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3], [37, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8242856860160828, "mapping_values": [1, 4, 4, 2, 2, 1, 5, 5, 3, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.pow(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.060933155264632, 1.5070402372656497, 0.9032815445400012, 0.7735465468747537, 0.6913838453690263, 0.6271366812313364, 0.6070966257505476, 0.5748706304590857, 0.5553492937247357, 0.529026976413951, 0.5014621632100096, 0.5090232995585868, 0.48957392057297394, 0.4771835926328243, 0.46299090568557344, 0.44528441895756504, 0.4162000333155938, 0.4392536054780502, 0.41242725156191523, 0.3987800731060291, 0.39373664700233896, 0.3847894872522877, 0.37122045066283915, 0.3568882419015627, 0.36888408932892436, 0.3557320848676145, 0.3364843474151184, 0.3387839498694358, 0.3361317055171208, 0.32108676807125563, 0.31942871819161595, 0.3099824859717771, 0.29532066443813254, 0.2877034462910633, 0.2861876380937982, 0.28205531672589956, 0.2600982694432342], "accuracy": [0.2942807972431183, 0.4912164807319641, 0.667811393737793, 0.7187954187393188, 0.7446836829185486, 0.7611940503120422, 0.7711002230644226, 0.7774402499198914, 0.7897239327430725, 0.796328067779541, 0.8149517774581909, 0.8054417967796326, 0.8121780753135681, 0.8214238286018372, 0.8248580098152161, 0.83119797706604, 0.8455950617790222, 0.8322546482086182, 0.8418967127799988, 0.8500858545303345, 0.8527275323867798, 0.8573504090309143, 0.8647470474243164, 0.863558292388916, 0.8663320541381836, 0.8691058158874512, 0.872407853603363, 0.8714832663536072, 0.8745211958885193, 0.8776912093162537, 0.8758420348167419, 0.8838990926742554, 0.8877294659614563, 0.8889182209968567, 0.8908994793891907, 0.8923524022102356, 0.9008057117462158], "val_loss": [1.650658096585955, 0.7652769429343087, 0.6059604372297015, 0.5398289476122174, 0.5325357573372977, 0.5097682986940656, 0.4842510563986642, 0.47760285649980816, 0.41023736340659006, 0.4036039539745876, 0.4477693864277431, 0.3888390489986965, 0.37619566917419434, 0.4001556379454477, 0.3945589321000235, 0.35909862177712576, 0.37041659014565603, 0.3587473290307181, 0.34352404730660574, 0.3432043365069798, 0.3643749611718314, 0.3321703331811087, 0.3369646157537188, 0.343860992363521, 0.3469799501555307, 0.3268134423664638, 0.37100944348743986, 0.3296153630529131, 0.32086353642599924, 0.3277061751910618, 0.3403556432042803, 0.3224954775401524, 0.32506016322544645, 0.31898851905550274, 0.36739509446280344, 0.30917353289467947, 0.32176857335226877], "val_accuracy": [0.3816666603088379, 0.6856666803359985, 0.7250000238418579, 0.7599999904632568, 0.7606666684150696, 0.7646666765213013, 0.7766666412353516, 0.7836666703224182, 0.8256666660308838, 0.8270000219345093, 0.8086666464805603, 0.8370000123977661, 0.8456666469573975, 0.8303333520889282, 0.8330000042915344, 0.8510000109672546, 0.8429999947547913, 0.8456666469573975, 0.859333336353302, 0.859666645526886, 0.8486666679382324, 0.8643333315849304, 0.862666666507721, 0.8566666841506958, 0.8613333106040955, 0.8650000095367432, 0.8463333249092102, 0.8629999756813049, 0.8696666955947876, 0.8600000143051147, 0.8646666407585144, 0.875333309173584, 0.8706666827201843, 0.8740000128746033, 0.847000002861023, 0.874666690826416, 0.8740000128746033]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 4, 8, 2, 2, 1, 3, 9, 8, 3, 7, 2, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [0, 2, 3, 3, 0, 3, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3], [8, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8217142820358276, "mapping_values": [1, 4, 4, 2, 2, 1, 14, 14, 7, 7, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.pow(tf.math.add(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.060741498595956, 1.502306477048252, 0.9044837982363909, 0.7712850976046979, 0.6877185355056593, 0.6269739893260271, 0.6106621586745835, 0.5690416467424397, 0.5681723906867587, 0.5279189421437467, 0.5002186929293123, 0.5093980015009119, 0.48536861706498025, 0.4851986743857155, 0.45166646420223494, 0.45146561183823636, 0.4271654920838749, 0.4394073988688762], "accuracy": [0.29441288113594055, 0.4955752193927765, 0.669792652130127, 0.7177387475967407, 0.7432307600975037, 0.763439416885376, 0.7709681391716003, 0.7821952104568481, 0.7849689722061157, 0.7985734939575195, 0.8132346868515015, 0.8055738806724548, 0.8136309385299683, 0.8169330358505249, 0.8278959393501282, 0.8298771381378174, 0.8404437899589539, 0.8360850811004639], "val_loss": [1.6475910799843925, 0.7527757372174945, 0.5979188340050834, 0.5426477704729352, 0.519592114857265, 0.5086560930524554, 0.48431154659816195, 0.49855339527130127, 0.41055225474493845, 0.40782828841890606, 0.4398784807750157, 0.3939219968659537, 0.3729725054332188, 0.3750302110399519, 0.38266732011522564, 0.3635658877236502, 0.3839046614510672, 0.36855971813201904], "val_accuracy": [0.38233333826065063, 0.6903333067893982, 0.7300000190734863, 0.765666663646698, 0.7673333287239075, 0.7683333158493042, 0.7786666750907898, 0.765333354473114, 0.8256666660308838, 0.8206666707992554, 0.8066666722297668, 0.8389999866485596, 0.8506666421890259, 0.840666651725769, 0.8433333039283752, 0.8476666808128357, 0.8353333473205566, 0.8500000238418579]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [24, 66, 89, 50, 85, 46], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 4, 2, 3, 2, 3, 3, 4, 8, 5, 7, 2, 7, 3, 2, 5, 8, 2, 2, 6, 5, 8, 9, 9], [0, 2, 3, 3, 3, 3, 3, 2, 3, 4, 2, 3, 1, 4, 1, 3], [8, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0], [6, 1, 6, 5], [7, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.7580000162124634, "mapping_values": [1, 4, 4, 2, 2, 1, 11, 11, 5, 6, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.pow(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.add(beta, grad)))))), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.297900226563038, 2.2849711074080874, 2.2727410434936535, 2.260556635272785, 2.2454846017412016, 2.2329356937423563, 2.2177185871188256, 2.197472202370054, 2.174184815569671, 2.1497816744733718, 2.1206610288759817, 2.0801530416851675, 2.0437254750764824, 1.9999404724767542, 1.9505438077341155, 1.89651805879638, 1.8381926224232035, 1.7829041696416703, 1.7225244485029785, 1.6571806728123453, 1.603623762925571, 1.5335409945784118, 1.4926056216783716, 1.4407363472015096, 1.3936794165213346, 1.3586541022827376, 1.3154196306667496, 1.2899859618233684, 1.2595156368530973, 1.2275995962875803, 1.2072928941418324, 1.1863118107481687, 1.1593036335756308, 1.1285567340156768, 1.1270878254351693, 1.1024667549882787, 1.091083964808994, 1.06756746205262, 1.061737578086188, 1.0509027262657327, 1.034449390007158, 1.018810689850821, 1.003565475523763, 0.9955236728653349, 0.9873540479399037, 0.9732811560389577, 0.9713364313811107, 0.96800723778589, 0.9533738357956856, 0.9479652811523285, 0.9358069041480384, 0.9283900205737265, 0.9200415603630515, 0.9083777880230914, 0.9038778643062668, 0.8972609208055601, 0.8909978979787397, 0.8863622291039923, 0.8863733493105579, 0.871125509198536, 0.8648943311864863, 0.8614017954906846, 0.8659335623060188, 0.8468536916441685, 0.8535369303815038, 0.8474313894739681, 0.8462056028151698, 0.8371432451618629, 0.8410960480742026, 0.8229700207411101, 0.8323388052197684, 0.8242414080943917, 0.818830815942107, 0.8103667998263518, 0.812201176526099, 0.8062128395987634, 0.8095512241420335, 0.8090674567846118, 0.8022360881605263, 0.8048163313025481, 0.7954154346739029, 0.7927511154369293, 0.7847586354449158, 0.7858483670898133, 0.7832722761737767, 0.7792149669757813, 0.7709571131625746, 0.7745438850692802, 0.7723110773150538, 0.7657061744800664, 0.7719676147252341, 0.7582794800489302, 0.7666971622645784], "accuracy": [0.09972262382507324, 0.13802668452262878, 0.1702549159526825, 0.20935148000717163, 0.23523972928524017, 0.2603355050086975, 0.28582748770713806, 0.3135649263858795, 0.3287544548511505, 0.3469819128513336, 0.36705851554870605, 0.39149385690689087, 0.39624884724617004, 0.4161933660507202, 0.42226919531822205, 0.443798691034317, 0.4558182656764984, 0.4651961326599121, 0.4707436263561249, 0.4884427487850189, 0.5003302097320557, 0.5102364420890808, 0.5160480737686157, 0.5367851257324219, 0.5412759184837341, 0.544710099697113, 0.5624092221260071, 0.5669000148773193, 0.5713908076286316, 0.5807687044143677, 0.5831462144851685, 0.5919957756996155, 0.5949016213417053, 0.6096948981285095, 0.6032228469848633, 0.6160348653793335, 0.6180161237716675, 0.6363756656646729, 0.6280544400215149, 0.6296393871307373, 0.6317527294158936, 0.6395456194877625, 0.6409985423088074, 0.6439043879508972, 0.6540747880935669, 0.652621865272522, 0.6513010263442993, 0.6564522385597229, 0.6619997620582581, 0.6647734642028809, 0.6671509742736816, 0.6733588576316833, 0.6692643165588379, 0.6765288710594177, 0.6763967871665955, 0.6799629926681519, 0.678642213344574, 0.6782459616661072, 0.6811517477035522, 0.6847180128097534, 0.6911900639533997, 0.693831741809845, 0.6944921612739563, 0.6919825673103333, 0.6893408894538879, 0.6933034062385559, 0.6896050572395325, 0.6964733600616455, 0.694360077381134, 0.7016246318817139, 0.6973979473114014, 0.7020208835601807, 0.7037379741668701, 0.7034738063812256, 0.707040011882782, 0.7057191729545593, 0.7043983340263367, 0.705058753490448, 0.7071720957756042, 0.7042662501335144, 0.707568347454071, 0.7100779414176941, 0.7168141603469849, 0.713379979133606, 0.7145687341690063, 0.7206445932388306, 0.7165499925613403, 0.7199841737747192, 0.7239466309547424, 0.7174745798110962, 0.7143045663833618, 0.7156254053115845, 0.7211728692054749], "val_loss": [1.9598097120012556, 1.9488705226353236, 1.9376448222569056, 1.9255010059901647, 1.9120561735970634, 1.897280284336635, 1.8805503164018904, 1.8612523078918457, 1.838661057608468, 1.8128089904785156, 1.7829080990382604, 1.7477613857814245, 1.7080370358058385, 1.6631314413888114, 1.6131628581455775, 1.5586772646222795, 1.5008677755083357, 1.4411305018833704, 1.380530527659825, 1.3197171006883894, 1.2612248488834925, 1.2048287391662598, 1.1528040340968542, 1.1054297515324183, 1.0623224462781633, 1.0235180514199393, 0.9881444658551898, 0.9572503907339913, 0.9290316786084857, 0.9033270563398089, 0.8809654372079032, 0.8600656134741647, 0.8404409033911568, 0.8218790803636823, 0.8067536354064941, 0.7921438046864101, 0.7791082518441337, 0.767230749130249, 0.7557738849094936, 0.7456693819590977, 0.736164893422808, 0.7265052454812186, 0.7183760915483747, 0.7103734186717442, 0.7028339590345111, 0.6958121061325073, 0.6890778541564941, 0.6840475286756244, 0.6771683352334159, 0.671812721661159, 0.6661317007882255, 0.6604442937033517, 0.655877913747515, 0.6516041585377285, 0.6469245978764125, 0.6423472336360386, 0.637739726475307, 0.6342313630240304, 0.6304970128195626, 0.6267663240432739, 0.6230615207127163, 0.6190384456089565, 0.6161598648343768, 0.612417493547712, 0.6092360871178764, 0.6073963131223407, 0.6040443181991577, 0.6015306711196899, 0.5985879557473319, 0.5961617912564959, 0.5935882840837751, 0.5913035869598389, 0.588095852306911, 0.586528846195766, 0.5843176671436855, 0.5821259362357003, 0.5797842059816632, 0.5784551927021572, 0.5775489807128906, 0.5745123624801636, 0.5725623709814889, 0.5709597383226667, 0.5691193512507847, 0.5676537241254535, 0.5655972276415143, 0.5634065866470337, 0.561324919973101, 0.5596026011875698, 0.5589372600827899, 0.558120710509164, 0.5559895890099662, 0.5540280001504081, 0.5524811233792987], "val_accuracy": [0.12866666913032532, 0.24033333361148834, 0.320333331823349, 0.3763333261013031, 0.4013333320617676, 0.42100000381469727, 0.43833333253860474, 0.45533332228660583, 0.468666672706604, 0.4873333275318146, 0.4970000088214874, 0.5076666474342346, 0.5260000228881836, 0.5393333435058594, 0.5453333258628845, 0.5533333420753479, 0.5600000023841858, 0.5720000267028809, 0.5826666951179504, 0.590666651725769, 0.5983333587646484, 0.6113333106040955, 0.621666669845581, 0.637666642665863, 0.6503333449363708, 0.6596666574478149, 0.668666660785675, 0.6723333597183228, 0.6813333630561829, 0.6846666932106018, 0.6826666593551636, 0.687333345413208, 0.6909999847412109, 0.6936666369438171, 0.6963333487510681, 0.699999988079071, 0.7043333053588867, 0.7049999833106995, 0.7053333520889282, 0.7086666822433472, 0.7096666693687439, 0.7136666774749756, 0.7143333554267883, 0.7193333506584167, 0.722000002861023, 0.7223333120346069, 0.7260000109672546, 0.7239999771118164, 0.7276666760444641, 0.7279999852180481, 0.7303333282470703, 0.734333336353302, 0.734333336353302, 0.7360000014305115, 0.7379999756813049, 0.7383333444595337, 0.7390000224113464, 0.7409999966621399, 0.7419999837875366, 0.7426666617393494, 0.7436666488647461, 0.7456666827201843, 0.7459999918937683, 0.7490000128746033, 0.7473333477973938, 0.746666669845581, 0.7493333220481873, 0.7513333559036255, 0.7519999742507935, 0.7513333559036255, 0.7536666393280029, 0.753000020980835, 0.753000020980835, 0.7516666650772095, 0.7536666393280029, 0.7563333511352539, 0.7556666731834412, 0.7563333511352539, 0.7523333430290222, 0.7559999823570251, 0.7596666812896729, 0.7570000290870667, 0.7553333044052124, 0.7573333382606506, 0.7573333382606506, 0.7639999985694885, 0.7603333592414856, 0.765999972820282, 0.7593333125114441, 0.7590000033378601, 0.7596666812896729, 0.7646666765213013, 0.7620000243186951]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [15, 66, 89, 50, 85, 46], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [1, 2, 8, 2, 2, 1, 6, 9, 8, 3, 7, 2, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [0, 3, 3, 3, 3, 3, 3, 2, 3, 4, 2, 3, 1, 4, 1, 3], [8, 63, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0], [6, 1, 6, 5], [7, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.5479999780654907, "mapping_values": [1, 4, 4, 2, 2, 1, 23, 23, 14, 9, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad))), grad))))), tf.math.sqrt(tf.math.multiply(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.add(beta, grad)))), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.302119113293306, 2.2991981262607095, 2.2969295096167515, 2.2953075402448393, 2.2920252264073464, 2.2920899583899415, 2.2914999310114696, 2.288193042614299, 2.2854108317590205, 2.28390404567459, 2.2827817307896603, 2.2782698150607557, 2.277130674613607, 2.276571985500962, 2.274031330581512, 2.2713653628757804, 2.2694407365010667, 2.2678902708796023, 2.26681269778709, 2.2631187296940305, 2.2616129125885567, 2.257379370689266, 2.2576825901848245, 2.254948320862419, 2.2523463419195116, 2.250717411833574, 2.2479172374562597, 2.2452614669865305, 2.2437970037111405, 2.241496506683295, 2.2388031363030625, 2.2388458865713274, 2.236457559835988, 2.228822507311592, 2.229142170225735, 2.227217151693239, 2.2234673704437813, 2.219533372596113, 2.218667521563031, 2.2147454630035877, 2.2121806483242916, 2.207974045268139, 2.205213633195804, 2.202349622787155, 2.199059031312303, 2.194206804253595, 2.1899280585255116, 2.189641068655943, 2.185452015550145, 2.181720612968956, 2.177527490214523, 2.175962365960023, 2.170701995391604, 2.165055322388868, 2.1627712071516636, 2.157660736021758, 2.154903301867071, 2.1517258314266967, 2.145674580548969, 2.1377244207916037, 2.132404137123782, 2.1300647454002926, 2.1248709299875808, 2.118072597184721, 2.1147950629611074, 2.1082636241222557, 2.104152569697124, 2.0986200975247535, 2.0929662689100152, 2.0886857204150058, 2.0843417945554967, 2.074355652146194, 2.066511014543583, 2.0594359064902044, 2.0558505497273516, 2.0474318049414095, 2.0425485003940844, 2.0342511199547584, 2.0292504307710737, 2.0217177352066353, 2.012311175593516, 2.0100033096491843, 2.001587180240421, 1.9933408311707328, 1.984120395331256, 1.97433873073788, 1.9674234821370973, 1.955466773311271, 1.9493680139967888, 1.9422675442182313, 1.9349936550602922, 1.919963629726626, 1.9151505323968558, 1.9030428229542204, 1.8988515713022465, 1.8849250328082607, 1.8748980516833778, 1.8700871315173753, 1.8583941444067702, 1.8507780158335523], "accuracy": [0.08902391046285629, 0.09919429570436478, 0.10276053100824356, 0.11530841141939163, 0.1150442510843277, 0.11715757846832275, 0.120459645986557, 0.12389380484819412, 0.12970545887947083, 0.13776251673698425, 0.14198917150497437, 0.14674416184425354, 0.1574428677558899, 0.16457535326480865, 0.16616034507751465, 0.17117950320243835, 0.18214239180088043, 0.18980319797992706, 0.18650111556053162, 0.18953903019428253, 0.19614318013191223, 0.2032756507396698, 0.21212521195411682, 0.21555937826633453, 0.22216351330280304, 0.22295601665973663, 0.23074890673160553, 0.22982433438301086, 0.23735305666923523, 0.2429005354642868, 0.25280675292015076, 0.25042927265167236, 0.2467309534549713, 0.26284506916999817, 0.26376965641975403, 0.27182671427726746, 0.27103421092033386, 0.2771100103855133, 0.28384625911712646, 0.2849029302597046, 0.29362040758132935, 0.29824328422546387, 0.3047153651714325, 0.30418702960014343, 0.3074890971183777, 0.31039494276046753, 0.31726324558258057, 0.31184783577919006, 0.32439571619033813, 0.31924447417259216, 0.3230748772621155, 0.3276977837085724, 0.33522653579711914, 0.3403777480125427, 0.33720776438713074, 0.34645357728004456, 0.33958524465560913, 0.3479065001010895, 0.34486857056617737, 0.3657376766204834, 0.3564918637275696, 0.36243560910224915, 0.366530179977417, 0.366530179977417, 0.35860520601272583, 0.36983224749565125, 0.37088891863822937, 0.3769647479057312, 0.3800026476383209, 0.37207767367362976, 0.3823801279067993, 0.38026681542396545, 0.39228636026382446, 0.3953242599964142, 0.39506009221076965, 0.39585259556770325, 0.3963809311389923, 0.40641921758651733, 0.402588814496994, 0.4069475531578064, 0.4115704596042633, 0.40285298228263855, 0.4113062918186188, 0.41328755021095276, 0.4135517179965973, 0.42570334672927856, 0.41104212403297424, 0.4303262531757355, 0.4365341365337372, 0.4239862561225891, 0.4255712628364563, 0.43111875653266907, 0.43283581733703613, 0.4418174624443054, 0.44049662351608276, 0.43587371706962585, 0.4523840844631195, 0.44445911049842834, 0.4571390748023987, 0.4447232782840729], "val_loss": [1.9691064698355538, 1.9673072269984655, 1.965505599975586, 1.9637044497898646, 1.9619109971182687, 1.9601294653756278, 1.9583664621625627, 1.9565972600664412, 1.9548119817461287, 1.953047411782401, 1.9512626784188407, 1.949437141418457, 1.947619915008545, 1.945782048361642, 1.9439333506992884, 1.9420802252633231, 1.9402032579694475, 1.938331059047154, 1.9364370618547713, 1.9345034190586634, 1.9325623512268066, 1.9305567741394043, 1.9285464968000139, 1.9264797483171736, 1.9243909290858678, 1.9222771099635534, 1.920121465410505, 1.9179248809814453, 1.9157232557024275, 1.9134492874145508, 1.9111649649483817, 1.908857822418213, 1.9064877373831612, 1.9040311404636927, 1.9015330587114607, 1.899012633732387, 1.8964315141950334, 1.8937719208853585, 1.8910727500915527, 1.888308388846261, 1.885505267551967, 1.882591724395752, 1.8795998437064034, 1.8765788078308105, 1.87345974785941, 1.870248249598912, 1.8669813019888741, 1.863656452723912, 1.8602165494646346, 1.8567190851484026, 1.853132724761963, 1.8494764055524553, 1.8457303047180176, 1.8418575014386858, 1.837925706590925, 1.8339009284973145, 1.8298014913286482, 1.8256420407976424, 1.8213286399841309, 1.81684786932809, 1.8122989790780204, 1.807657173701695, 1.802917752947126, 1.798020703451974, 1.7930481774466378, 1.7879622323172433, 1.7827813284737724, 1.7774673870631628, 1.7720756530761719, 1.7665583746773856, 1.7609383719308036, 1.7551384653363908, 1.7491656030927385, 1.743079389844622, 1.7368835040501185, 1.7305328505379813, 1.724087919507708, 1.71748948097229, 1.7108264991215296, 1.7039736679622106, 1.6969796930040633, 1.6899306092943465, 1.6827064922877721, 1.6753231116703577, 1.6678272996629988, 1.6601605415344238, 1.6523637771606445, 1.644388232912336, 1.6363444328308105, 1.628169332231794, 1.6199393272399902, 1.611421721322196, 1.602867262704032, 1.5941001347133092, 1.5853380475725447, 1.5763524259839738, 1.5672538961683, 1.5581790379115514, 1.5489543165479387, 1.539661066872733], "val_accuracy": [0.04766666516661644, 0.061666667461395264, 0.07466666400432587, 0.09000000357627869, 0.10866666585206985, 0.12433333694934845, 0.1469999998807907, 0.16466666758060455, 0.18033333122730255, 0.19766665995121002, 0.21466666460037231, 0.23199999332427979, 0.2513333261013031, 0.26733332872390747, 0.2809999883174896, 0.2926666736602783, 0.30300000309944153, 0.31566667556762695, 0.32633334398269653, 0.3383333384990692, 0.3476666808128357, 0.35600000619888306, 0.3646666705608368, 0.3720000088214874, 0.3773333430290222, 0.38233333826065063, 0.3866666555404663, 0.3903333246707916, 0.3933333456516266, 0.39633333683013916, 0.39899998903274536, 0.4023333191871643, 0.40666666626930237, 0.4086666703224182, 0.41066667437553406, 0.41200000047683716, 0.4143333435058594, 0.41999998688697815, 0.42233332991600037, 0.4256666600704193, 0.4283333420753479, 0.4320000112056732, 0.4336666762828827, 0.43799999356269836, 0.4416666626930237, 0.4429999887943268, 0.44433334469795227, 0.4463333189487457, 0.4480000138282776, 0.44999998807907104, 0.4533333480358124, 0.4546666741371155, 0.4573333263397217, 0.4606666564941406, 0.46433332562446594, 0.4676666557788849, 0.4699999988079071, 0.4729999899864197, 0.47566667199134827, 0.476666659116745, 0.47866666316986084, 0.4819999933242798, 0.4830000102519989, 0.48533332347869873, 0.48766666650772095, 0.49000000953674316, 0.4946666657924652, 0.4963333308696747, 0.4976666569709778, 0.49933332204818726, 0.503000020980835, 0.5053333044052124, 0.5080000162124634, 0.5093333125114441, 0.5116666555404663, 0.515999972820282, 0.5196666717529297, 0.5226666927337646, 0.5253333449363708, 0.5266666412353516, 0.527999997138977, 0.5303333401679993, 0.5316666960716248, 0.534333348274231, 0.5366666913032532, 0.5370000004768372, 0.5376666784286499, 0.5413333177566528, 0.5423333048820496, 0.5429999828338623, 0.5440000295639038, 0.5456666946411133, 0.54666668176651, 0.5479999780654907, 0.5516666769981384, 0.5523333549499512, 0.5529999732971191, 0.5540000200271606, 0.5536666512489319, 0.5576666593551636]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [0, 4, 8, 2, 2, 1, 3, 9, 8, 3, 7, 2, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [0, 2, 3, 3, 0, 2, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3], [94, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10171428322792053, "mapping_values": [1, 4, 4, 2, 2, 1, 13, 13, 8, 5, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.pow(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [3.1115844733427545, 285634872097.7425, 4.024944147499892e+29, 802.9646484310506, 13747.507489515916, 228683.66573107912, 3880139.0416061287], "accuracy": [0.258090078830719, 0.11174217611551285, 0.1072513535618782, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.051691395895822, 2.615603493561451e+30, 167.8489772251674, 2727.880929129464, 46113.05915178572, 782923.4464285715, 13297749.714285715], "val_accuracy": [0.10366666316986084, 0.1120000034570694, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 2, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 4, 5, 3, 2, 8, 3, 4, 8, 5, 7, 2, 7, 3, 2, 5, 8, 2, 2, 6, 5, 8, 9, 9], [0, 2, 3, 3, 0, 3, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3], [62, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0], [1, 7, 6, 4], [7, 1], [64], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 11, 11, 6, 5, 2, 1, 0, 0, 0, 0, 3, 1, 2, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.pow(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, grad))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))))))), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 4, 8, 2, 2, 1, 3, 9, 8, 3, 7, 2, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [0, 2, 3, 3, 0, 2, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3], [8, 88, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 11, 8, 3, 12, 12, 6, 6, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.multiply(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), grad))))))), tf.math.add(alpha, tf.math.subtract(tf.math.negative(tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))), alpha)), tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.pow(tf.math.add(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07594769448041916, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 0, 8, 2, 2, 1, 3, 9, 8, 3, 7, 2, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [0, 2, 3, 3, 0, 2, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3], [8, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 11, 8, 3, 5, 5, 3, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.multiply(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), grad))))))), tf.math.add(alpha, tf.math.subtract(tf.math.negative(tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))), alpha)), tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.negative(tf.math.add(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))), tf.math.sqrt(beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07594769448041916, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 3, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [93, 66, 89, 50, 85, 46], [1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 3, 2, 8, 6, 1, 3, 9, 8, 3, 7, 2, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [0, 3, 3, 1, 3, 3, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3], [8, 31, 30, 73, 40, 57, 35, 9, 54, 64], [0, 0, 1, 0, 1, 0, 1, 1], [0, 0, 0, 1, 0], [6, 0, 6, 5], [7, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 6, 4, 3, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.negative(sigma)), tf.math.add(sigma, tf.math.divide_no_nan(sigma, tf.math.add(sigma, grad))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0758156105875969, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [1, 66, 89, 50, 85, 46], [1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 4, 8, 2, 2, 1, 3, 9, 8, 3, 7, 2, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [0, 2, 3, 3, 0, 3, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3], [96, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0], [1, 7, 6, 4], [7, 1], [64], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 14, 14, 7, 7, 2, 1, 0, 0, 0, 0, 3, 1, 2, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.pow(tf.math.add(beta, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 4, 8, 2, 2, 1, 3, 9, 8, 3, 7, 2, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [0, 3, 3, 3, 3, 3, 1, 2, 1, 4, 4, 3, 1, 4, 1, 3], [8, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0], [6, 1, 6, 5], [7, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 11, 8, 3, 10, 10, 5, 5, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), grad)))), tf.math.add(alpha, tf.math.subtract(tf.math.negative(tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))), alpha)), tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.add(alpha, grad))))))))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.pow(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))), tf.math.add(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad))), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07660810649394989, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 4, 5, 2, 2, 1, 3, 9, 8, 3, 7, 2, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [0, 2, 3, 2, 0, 3, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3], [8, 31, 30, 73, 40, 57, 35, 9, 54, 64], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1], [0, 0, 0, 1, 0, 0], [1, 7, 6, 4, 6], [7, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 11, 8, 3, 14, 14, 7, 7, 2, 11, 6, 5, 1, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.multiply(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), grad))))))), tf.math.add(alpha, tf.math.subtract(tf.math.negative(tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))), alpha)), tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.pow(tf.math.add(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(beta, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.add(sigma, sigma)), tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, grad), tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)))))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07594769448041916, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [1, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [3, 8, 2, 5, 9, 1, 3, 2, 8, 3, 7, 2, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [0, 4, 3, 3, 0, 3, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3], [8, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0], [1, 7, 6, 4], [7, 1], [64], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 3, 1, 2, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, beta)", "other_info": {"loss": [1.6825786081926752e+24, 7.474675943255976, 14.646510607278925, 21.846583807142483, 29.053386800592413, 36.25612332574947], "accuracy": [0.07832518965005875, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [3.953623499189104, 9.999975749424525, 16.16630118233817, 22.339147295270646, 28.50865500313895, 34.67053549630301], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [2, 4, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 0, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [8, 4, 8, 2, 2, 1, 3, 9, 8, 3, 7, 2, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [0, 2, 3, 3, 0, 3, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3], [8, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0], [6, 1, 6, 5], [7, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 4, 4, 3, 11, 11, 6, 5, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(grad, tf.math.pow(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)))), tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.pow(tf.math.add(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 9, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 0, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [6, 4, 8, 2, 2, 3, 2, 9, 8, 3, 7, 2, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [0, 2, 3, 3, 0, 3, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3], [8, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0], [1, 7, 6, 4], [7, 1], [64], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 7, 7, 2, 1, 0, 0, 0, 0, 3, 1, 2, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(beta, grad)), tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))))))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 8, 2, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [0, 4, 8, 2, 8, 1, 3, 9, 8, 3, 7, 2, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [0, 2, 1, 3, 0, 3, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3], [37, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [0, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302396354233159, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 9, 3, 8, 8, 1, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 0, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [3, 8, 2, 2, 9, 1, 3, 2, 8, 3, 7, 2, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [0, 3, 3, 3, 3, 3, 1, 2, 1, 4, 4, 3, 1, 4, 1, 3], [8, 31, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0], [1, 7, 6, 4], [7, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 1, 10, 10, 6, 4, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(beta, grad), grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07251353561878204, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}]