[{"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [4, 8, 2, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 2, 8, 4], [2, 1], [64], [0, 1, 0, 1, 0, 1], [3, 1, 9, 1, 2], [1, 0, 2], [15, 52, 13]], "fitness": -0.8454285860061646, "mapping_values": [1, 3, 3, 1, 2, 1, 8, 8, 5, 3, 0, 5, 4, 2, 2, 0, 5, 3, 2, 2], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.add(tf.math.negative(tf.math.negative(grad)), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, beta))), tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1569765200310727, 1.2878611054969675, 0.8815563263563732, 0.7502687632793512, 0.6859668924068149, 0.6487858457462017, 0.6171074903573437, 0.5765831097163355, 0.5658908827807752, 0.5473972023470275, 0.5167431474409052, 0.5044737704016545, 0.48398138282163944, 0.4675972037043916, 0.4670674933135124, 0.43558207763231754, 0.42845755926905493, 0.4255343774101596, 0.411339479808432, 0.39326924254487705, 0.38626965045881717, 0.37293339461351915, 0.368428018551776, 0.3604911685446549, 0.3485002075408696, 0.3480017893523147, 0.3440721992212846, 0.33212448914982245, 0.3249977042276342, 0.32013312824933504, 0.31188917881572376, 0.30549882816648, 0.2964468518929664, 0.2935647263290419, 0.28551430791014176, 0.27458747035366526, 0.2729637799025558, 0.26653044034603046, 0.2645628051892594, 0.253816354512507, 0.26090616877399275, 0.2438962173350121, 0.24302830061640454, 0.23932178495637557, 0.23992737447108575, 0.23472090021982295, 0.23127757609795901, 0.22973608560668257, 0.22873332015377829, 0.2254826527218289], "accuracy": [0.27737417817115784, 0.5480121374130249, 0.6753401160240173, 0.7174745798110962, 0.7403249144554138, 0.7585523724555969, 0.7663452625274658, 0.7837802171707153, 0.7876105904579163, 0.7992339134216309, 0.8086118102073669, 0.8136309385299683, 0.8228767514228821, 0.8249900937080383, 0.8286884427070618, 0.8393871188163757, 0.8424250483512878, 0.8433496356010437, 0.845859169960022, 0.8520671129226685, 0.8574824929237366, 0.8632941246032715, 0.863029956817627, 0.8673887252807617, 0.870030403137207, 0.869502067565918, 0.8792761564254761, 0.8730682730674744, 0.8795403242111206, 0.8791441321372986, 0.8838990926742554, 0.8886540532112122, 0.8891823887825012, 0.8914278149604797, 0.8927486538887024, 0.8949940800666809, 0.9006736278533936, 0.9006736278533936, 0.900409460067749, 0.9043719172477722, 0.9005415439605713, 0.9099194407463074, 0.9059569239616394, 0.9076740145683289, 0.9074098467826843, 0.9126931428909302, 0.9121648669242859, 0.9104477763175964, 0.9129573106765747, 0.9144102334976196], "val_loss": [1.2726646150861467, 0.7115768364497593, 0.5796874250684466, 0.5480279581887382, 0.5094632932118007, 0.49525679860796246, 0.46568214893341064, 0.44795664719172884, 0.4344153233936855, 0.42540572370801655, 0.4055205839020865, 0.40126281125204905, 0.38532330308641705, 0.3828877551215036, 0.36838144063949585, 0.3671151484761919, 0.3523490684373038, 0.34949287346431185, 0.3422342538833618, 0.34554966006960186, 0.33575555256434847, 0.33384065117154804, 0.3250577620097569, 0.32830633435930523, 0.3278077925954546, 0.32483816146850586, 0.32156617300851004, 0.3194909266063145, 0.3178100415638515, 0.32014207329068867, 0.31428687061582294, 0.3205681783812387, 0.31498477288654875, 0.31154660667691914, 0.3144088898386274, 0.3217679262161255, 0.312521185193743, 0.3107556274959019, 0.3182607889175415, 0.30562578780310495, 0.3116555554526193, 0.3189755848475865, 0.3138687184878758, 0.3295268246105739, 0.30760702065059115, 0.31735553060259136, 0.31261634826660156, 0.32441702910832, 0.32140420164380756, 0.31678160599299837], "val_accuracy": [0.5619999766349792, 0.7103333473205566, 0.7429999709129333, 0.7636666893959045, 0.7726666927337646, 0.7866666913032532, 0.796999990940094, 0.8059999942779541, 0.8149999976158142, 0.8163333535194397, 0.8303333520889282, 0.8389999866485596, 0.8446666598320007, 0.8453333377838135, 0.8503333330154419, 0.8489999771118164, 0.859666645526886, 0.856333315372467, 0.8586666584014893, 0.8610000014305115, 0.862333357334137, 0.862333357334137, 0.8673333525657654, 0.8673333525657654, 0.8663333058357239, 0.8679999709129333, 0.8643333315849304, 0.8709999918937683, 0.8690000176429749, 0.8663333058357239, 0.8709999918937683, 0.8726666569709778, 0.8703333139419556, 0.8776666522026062, 0.8723333477973938, 0.8713333606719971, 0.8723333477973938, 0.8790000081062317, 0.8743333220481873, 0.8803333044052124, 0.878000020980835, 0.8769999742507935, 0.8743333220481873, 0.8766666650772095, 0.8816666603088379, 0.8773333430290222, 0.8786666393280029, 0.8736666440963745, 0.8723333477973938, 0.8730000257492065]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [29, 32, 5, 49, 25], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [4, 8, 2, 0, 9, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [1, 2, 8, 4], [1, 4, 0], [64], [0, 1, 0, 1, 0, 1], [3, 1, 9, 1, 2], [1, 0, 2], [15, 45, 13]], "fitness": -0.8320000171661377, "mapping_values": [1, 3, 3, 1, 2, 1, 7, 7, 5, 2, 1, 3, 1, 1, 0, 0, 5, 3, 2, 2], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2910057048850514, 2.2235237964470906, 2.059836340917336, 1.6797024780780316, 1.3596997882207906, 1.250059741945661, 1.0043617293598819, 0.9050636700414916, 0.8677458483482223, 0.8047076388908148, 0.7712718049580191, 0.7477914883460288, 0.7207994238260541, 0.6940558066599247, 0.6772381311725112, 0.6550466138153596, 0.6432876404187368, 0.6394424278817047, 0.6169091242494332, 0.6070603164998595, 0.5972660982361591, 0.5843951594969694, 0.5677252134563837, 0.564428929867856, 0.5508421060431509, 0.5481009944523519, 0.5431930198960411, 0.5304171399764097, 0.5205658872318684, 0.5238296995467168, 0.5112867482727891, 0.4946116273665488, 0.4857183952908459, 0.48100729112092294, 0.47393679549555184, 0.47553277153459284, 0.46272740037276555, 0.45867655980210686, 0.4487112273180789, 0.44677383986131597, 0.4412558656311337, 0.4257048257054465, 0.4333774585568626, 0.41786906814783037, 0.42312471670733465, 0.4160381517413742, 0.40753623832564834, 0.4059917854122781, 0.4024706963794642, 0.3930928443621619, 0.39402231586261305, 0.3762059515028928, 0.38496335253676467, 0.3713490712549771, 0.3814287125875354, 0.3662341868305849, 0.3684169517736771, 0.36268122343260617, 0.35439219400080013, 0.3432339910959539, 0.3408977165198235], "accuracy": [0.11728965491056442, 0.2793554365634918, 0.39162594079971313, 0.46308282017707825, 0.5278034806251526, 0.573107898235321, 0.6386210322380066, 0.6605468392372131, 0.6910579800605774, 0.7013604640960693, 0.7088891863822937, 0.7165499925613403, 0.7264562249183655, 0.7338528633117676, 0.7416457533836365, 0.7518161535263062, 0.7592127919197083, 0.7621186375617981, 0.7655527591705322, 0.7717606425285339, 0.7790252566337585, 0.7839123010635376, 0.7861577272415161, 0.7865539789199829, 0.7988376617431641, 0.7950072884559631, 0.7973847389221191, 0.7979130744934082, 0.8064984679222107, 0.8024039268493652, 0.8092722296714783, 0.816008448600769, 0.8211596608161926, 0.8245938420295715, 0.8226125836372375, 0.828292191028595, 0.8317263126373291, 0.8329150676727295, 0.8381983637809753, 0.8334434032440186, 0.8362171649932861, 0.8408400416374207, 0.8392550349235535, 0.8471800088882446, 0.8428213000297546, 0.8470479249954224, 0.8485008478164673, 0.8527275323867798, 0.8531237840652466, 0.8555012345314026, 0.859199583530426, 0.8603883385658264, 0.857218325138092, 0.8618412613868713, 0.8557654023170471, 0.8640866279602051, 0.859199583530426, 0.8660678863525391, 0.8714832663536072, 0.8730682730674744, 0.872407853603363], "val_loss": [1.9345786230904716, 1.8361268043518066, 1.5655828884669714, 1.0876548971448625, 0.8004566431045532, 0.7172630514417376, 0.6663157088415963, 0.66731025491442, 0.6093009880610875, 0.5763506037848336, 0.5574847119195121, 0.5446610791342599, 0.5394853183201381, 0.5319635357175555, 0.5172246864863804, 0.5072125537054879, 0.4939129182270595, 0.4855489049639021, 0.4788268804550171, 0.47240216391427176, 0.4641197919845581, 0.45831808022090365, 0.4541876997266497, 0.4486204556056431, 0.4384916509900774, 0.4336280141557966, 0.4306866441454206, 0.4227976884160723, 0.41809011357171194, 0.41476246288844515, 0.40855481794902254, 0.40387325627463205, 0.39984279019492014, 0.3922534244401114, 0.38823091983795166, 0.38527984278542654, 0.37891932896205355, 0.3765174661363874, 0.37497092144829886, 0.36926357235227314, 0.36490166187286377, 0.3648081592151097, 0.36136081389018465, 0.35647995131356375, 0.35626302446637836, 0.3542304720197405, 0.34947011300495695, 0.3487119163785662, 0.34991536821637836, 0.3422637070928301, 0.34105379240853445, 0.33907013280051096, 0.3351523961339678, 0.3354844961847578, 0.33500310352870394, 0.33170907838003977, 0.33123508521488737, 0.33214441367558073, 0.32871114356177195, 0.3289133906364441, 0.33023090021950857], "val_accuracy": [0.34466665983200073, 0.4749999940395355, 0.5379999876022339, 0.5976666808128357, 0.6840000152587891, 0.7110000252723694, 0.7196666598320007, 0.7360000014305115, 0.7393333315849304, 0.7426666617393494, 0.7559999823570251, 0.7639999985694885, 0.768666684627533, 0.7789999842643738, 0.7753333449363708, 0.7760000228881836, 0.7833333611488342, 0.7850000262260437, 0.7919999957084656, 0.7990000247955322, 0.8043333292007446, 0.8073333501815796, 0.8023333549499512, 0.8073333501815796, 0.8113333582878113, 0.8163333535194397, 0.8140000104904175, 0.8209999799728394, 0.8199999928474426, 0.8196666836738586, 0.8233333230018616, 0.8289999961853027, 0.8336666822433472, 0.8393333554267883, 0.8379999995231628, 0.8410000205039978, 0.8486666679382324, 0.8489999771118164, 0.8446666598320007, 0.8486666679382324, 0.8523333072662354, 0.8503333330154419, 0.8533333539962769, 0.8529999852180481, 0.8543333411216736, 0.8573333621025085, 0.8586666584014893, 0.8603333234786987, 0.859666645526886, 0.8606666922569275, 0.8619999885559082, 0.8610000014305115, 0.862333357334137, 0.8603333234786987, 0.8629999756813049, 0.8683333396911621, 0.8683333396911621, 0.8676666617393494, 0.8679999709129333, 0.8683333396911621, 0.8673333525657654]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [4, 8, 9, 0, 9, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 62], [0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [5, 9, 8, 4], [2, 1], [64], [0, 1, 0, 1, 0, 1], [3, 1, 9, 1, 2], [1, 0, 2], [1, 32, 13]], "fitness": -0.798285722732544, "mapping_values": [1, 3, 3, 1, 2, 1, 5, 5, 5, 0, 2, 2, 1, 1, 0, 0, 5, 3, 2, 2], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))), tf.math.negative(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2976310729917486, 2.268448256923538, 2.223562208038862, 2.1573897106552073, 2.0504779780088964, 1.8841060660754874, 1.6614754010878061, 1.4549871371989362, 1.3069421755182682, 1.1905291313193556, 1.1119856215927815, 1.0260193055536706, 0.9749734177093118, 0.9340283154197389, 0.9027882471312589, 0.8731514063761329, 0.8437362392470507, 0.8361700693566833, 0.8151024750053386, 0.7986400696138869, 0.7873616581422274, 0.7682013580308158, 0.7598790162196327, 0.7512001816181852, 0.7464279925598051, 0.7317383135818393, 0.7229953775426667, 0.7087541693835573, 0.7049215805056608, 0.6942008128491816, 0.690142490765863, 0.6859301412740104, 0.668883038801587, 0.6701968420435173, 0.6687777773610605, 0.6623072288905814, 0.6579839951877723, 0.6515602144535585, 0.640381223671094, 0.6472746375970333, 0.631187673454917, 0.6406434894773261, 0.630108263128548, 0.6273687192005268, 0.6248650486443131, 0.6272971501927949, 0.60511789358429, 0.6151767193349975, 0.6106346231315587, 0.6101031603436539, 0.6071872935240311, 0.5980610855267174, 0.5992934277123464, 0.5922747280194287, 0.594180099598216, 0.5911110428346068, 0.5874165608394478, 0.5765096256289232, 0.5771875948938066, 0.5745499816631771, 0.5744963593770169], "accuracy": [0.10276053100824356, 0.18412363529205322, 0.28080835938453674, 0.34460440278053284, 0.3933430314064026, 0.4349491596221924, 0.47589486837387085, 0.5140668153762817, 0.5468233823776245, 0.5723153948783875, 0.5933166146278381, 0.6407343745231628, 0.6491876840591431, 0.667811393737793, 0.6800950765609741, 0.684982180595398, 0.6984546184539795, 0.6995112895965576, 0.707040011882782, 0.7055870890617371, 0.7162858247756958, 0.7201162576675415, 0.7185312509536743, 0.722757875919342, 0.7304186820983887, 0.7325320243835449, 0.7275128960609436, 0.7427024245262146, 0.7409853339195251, 0.7423061728477478, 0.7441553473472595, 0.7453441023826599, 0.7486461400985718, 0.7516840696334839, 0.7534011602401733, 0.754589855670929, 0.7586844563484192, 0.7614582180976868, 0.7600052952766418, 0.7594769597053528, 0.7643640041351318, 0.7563069462776184, 0.7637035846710205, 0.7602694630622864, 0.7663452625274658, 0.7708360552787781, 0.7779685854911804, 0.7685906887054443, 0.7713643908500671, 0.7714964747428894, 0.7763835787773132, 0.7766477465629578, 0.7779685854911804, 0.7823272943496704, 0.7766477465629578, 0.783119797706604, 0.7792893648147583, 0.7884030938148499, 0.7821952104568481, 0.7854973077774048, 0.7862898111343384], "val_loss": [1.9533792904445104, 1.9179434776306152, 1.8677729879106795, 1.7869987487792969, 1.6536543028695243, 1.456130129950387, 1.2256014006478446, 1.0233843326568604, 0.8857618400028774, 0.8027346134185791, 0.7519504683358329, 0.7133261135646275, 0.6809372050421578, 0.6563847746167865, 0.634992105620248, 0.617728556905474, 0.6029988186700004, 0.5927820035389492, 0.5830783843994141, 0.571823137147086, 0.5652688230787005, 0.5577410289219448, 0.5501165390014648, 0.5477260180882045, 0.5391159057617188, 0.5350704193115234, 0.5284614903586251, 0.5260435342788696, 0.5212956156049456, 0.5161182369504657, 0.5131667341504779, 0.5086279426302228, 0.5055367435727801, 0.5013857569013324, 0.5002515656607491, 0.4979704277856009, 0.4961001362119402, 0.4941284656524658, 0.49048333508627756, 0.4881456068583897, 0.4847558225904192, 0.48555716446467806, 0.4798126220703125, 0.4790265219552176, 0.4773185934339251, 0.4727046489715576, 0.4729096548897879, 0.4716847113200596, 0.47140961033957346, 0.46857380867004395, 0.46678134373256136, 0.465620756149292, 0.4620347874505179, 0.4593758242470877, 0.4600906882967268, 0.45788700239998953, 0.45724626949855257, 0.45491416113717215, 0.4545477458408901, 0.45329999923706055, 0.4523731470108032], "val_accuracy": [0.19733333587646484, 0.3803333342075348, 0.43799999356269836, 0.492333322763443, 0.5389999747276306, 0.5753333568572998, 0.6129999756813049, 0.6570000052452087, 0.6836666464805603, 0.6930000185966492, 0.703000009059906, 0.7183333039283752, 0.7296666502952576, 0.7316666841506958, 0.7393333315849304, 0.7429999709129333, 0.7456666827201843, 0.7486666440963745, 0.7506666779518127, 0.7573333382606506, 0.7593333125114441, 0.7599999904632568, 0.762333333492279, 0.762333333492279, 0.7666666507720947, 0.7693333625793457, 0.7723333239555359, 0.7720000147819519, 0.7756666541099548, 0.7776666879653931, 0.7763333320617676, 0.781333327293396, 0.7816666960716248, 0.784333348274231, 0.7839999794960022, 0.7853333353996277, 0.784333348274231, 0.7829999923706055, 0.7903333306312561, 0.7916666865348816, 0.7933333516120911, 0.7926666736602783, 0.793666660785675, 0.7946666479110718, 0.7973333597183228, 0.7960000038146973, 0.7950000166893005, 0.7996666431427002, 0.7983333468437195, 0.7976666688919067, 0.8019999861717224, 0.800000011920929, 0.8003333210945129, 0.8066666722297668, 0.8033333420753479, 0.8080000281333923, 0.8016666769981384, 0.8003333210945129, 0.8040000200271606, 0.8066666722297668, 0.8073333501815796]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [29, 32, 5, 49, 25], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [4, 8, 2, 9, 9, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 26], [0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [5, 9, 8, 4], [4, 1], [64], [0, 1, 0, 1, 0, 1], [3, 1, 9, 1, 2], [1, 0, 2], [15, 24, 13]], "fitness": -0.7391428351402283, "mapping_values": [1, 3, 3, 1, 2, 1, 6, 6, 5, 1, 2, 2, 1, 1, 0, 0, 5, 3, 2, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.add(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3035404356542184, 2.301426640181667, 2.2983479883377624, 2.2962579718670275, 2.29256874859026, 2.2878108973736775, 2.281407046862849, 2.277159687298447, 2.269106375054755, 2.2648001962948188, 2.2564295352237447, 2.2480791805757585, 2.2402030502753156, 2.2329698878980944, 2.2238060742825283, 2.2154653690211163, 2.203768890358438, 2.1943285963428556, 2.182115601258838, 2.1700199870007655, 2.157102680004756, 2.141812332491156, 2.125476076492402, 2.1090528452007478, 2.088024607612913, 2.070034811446664, 2.047637085857298, 2.02393728788298, 1.9991586286756167, 1.9697864226944741, 1.937248258731778, 1.9103382043614285, 1.873288274567125, 1.8408111423124112, 1.8066289993781675, 1.7605500564819565, 1.7263994996794274, 1.6943364134869003, 1.6594245437901207, 1.614010762891214, 1.5776584093770047, 1.5367501774767622, 1.5114144718705262, 1.4760544097434576, 1.4389579412943778, 1.4039716691924218, 1.3793095203674763, 1.3626211754571271, 1.3154106891985031, 1.2968866011375575, 1.2865319815703575, 1.252724017465214, 1.2494496373830455, 1.2277259394288331, 1.2056175087578718, 1.1757969993720547, 1.1709758219638946, 1.1522451680743573, 1.1377486066732583, 1.1360085523202514, 1.0969819853003817, 1.0834043858120894, 1.0765498771549074, 1.0688225360137753, 1.0540378649693596, 1.0367947376131808, 1.0395852720197387, 1.017083267903583, 1.0086822080227993, 1.002817992025032, 0.9931035379865276, 0.9739899580914189, 0.9722038849060483, 0.9715054965274303, 0.966227227103803, 0.9597901221610268, 0.9596698603074564, 0.9353751976885863, 0.9390408207853441, 0.9374853540578492, 0.9136688925602401, 0.9183646489317077, 0.9181865942697043, 0.9143907773952915, 0.904633763971393, 0.9032408347644385, 0.8927646255559295, 0.8885210387112521, 0.8921627116367061, 0.8769473983013021, 0.87121519282226, 0.8653615553302536, 0.8696657230888359, 0.861993023905504, 0.855196931492525, 0.8552636606440395, 0.854176031765354, 0.8456849488347923, 0.8410665017030242, 0.8333177805702684], "accuracy": [0.09074098616838455, 0.08809932321310043, 0.10328886657953262, 0.10394927859306335, 0.10989301651716232, 0.1270637959241867, 0.13908334076404572, 0.1624620258808136, 0.1834632158279419, 0.19416193664073944, 0.22018226981163025, 0.23286223411560059, 0.26178839802742004, 0.2709021270275116, 0.28582748770713806, 0.29520538449287415, 0.30682867765426636, 0.31845200061798096, 0.32967904210090637, 0.3469819128513336, 0.34539690613746643, 0.35886937379837036, 0.36745476722717285, 0.3691718280315399, 0.3777572214603424, 0.3851538896560669, 0.3909655213356018, 0.392550528049469, 0.4085325598716736, 0.4204200208187103, 0.4251750111579895, 0.43283581733703613, 0.43270373344421387, 0.44128912687301636, 0.4434024691581726, 0.4616298973560333, 0.4682340621948242, 0.4659886360168457, 0.469819039106369, 0.478140264749527, 0.4839519262313843, 0.4987452030181885, 0.5003302097320557, 0.5065380930900574, 0.5135384798049927, 0.5248976349830627, 0.5362567901611328, 0.5262184739112854, 0.5431250929832458, 0.5482763051986694, 0.5478800535202026, 0.5540879964828491, 0.5546162724494934, 0.5686171054840088, 0.5688812732696533, 0.5779950022697449, 0.5816932916641235, 0.5828820466995239, 0.5955620408058167, 0.5847312211990356, 0.6042794585227966, 0.6136573553085327, 0.614317774772644, 0.6222427487373352, 0.6223748326301575, 0.632941484451294, 0.6221106648445129, 0.6358473300933838, 0.6384889483451843, 0.641791045665741, 0.6449610590934753, 0.6431118845939636, 0.6493197679519653, 0.6540747880935669, 0.6491876840591431, 0.654999315738678, 0.651168942451477, 0.6606789231300354, 0.6643772125244141, 0.666358470916748, 0.6687359809875488, 0.6737551093101501, 0.674679696559906, 0.6741513609886169, 0.6749438643455505, 0.6752080321311951, 0.6789063811302185, 0.6819442510604858, 0.6744155287742615, 0.6808875799179077, 0.6828688383102417, 0.6869634389877319, 0.6881521344184875, 0.6876237988471985, 0.6888125538825989, 0.6909258961677551, 0.6841896772384644, 0.6907938122749329, 0.696209192276001, 0.6927750706672668], "val_loss": [1.9703051703316825, 1.968634809766497, 1.9660622051783971, 1.9627204622541154, 1.9587390763419015, 1.9542078971862793, 1.9492074421473913, 1.9438107354300362, 1.938037327357701, 1.9319175311497279, 1.925449984414237, 1.9186107090541296, 1.911372184753418, 1.9036857060023717, 1.8954887390136719, 1.886699948992048, 1.8772199494498116, 1.8669381822858537, 1.855757168361119, 1.8435888971601213, 1.8302980150495256, 1.8157679012843542, 1.7999194008963448, 1.7826404571533203, 1.7638158798217773, 1.7434074538094657, 1.7213117395128523, 1.697474786213466, 1.6718157359531947, 1.6442465782165527, 1.61472715650286, 1.583282811301095, 1.549985681261335, 1.5149313381740026, 1.478306429726737, 1.440375702721732, 1.401418856212071, 1.361835275377546, 1.3220991407121931, 1.282468557357788, 1.243260145187378, 1.2047932488577706, 1.1673288345336914, 1.1312075001852853, 1.096615961619786, 1.063673973083496, 1.0324745518820626, 1.0031436852046423, 0.9758235727037702, 0.9504795074462891, 0.9271935735430036, 0.9058870247432164, 0.8864618710109166, 0.8688220977783203, 0.8528234958648682, 0.8381009442465646, 0.8245939016342163, 0.8121648175375802, 0.8008517708097186, 0.7905188628605434, 0.7811169964926583, 0.7723843881062099, 0.764263357434954, 0.7565444537571498, 0.7491470745631627, 0.7420023168836322, 0.7351439339773995, 0.7285079785755703, 0.7221829720905849, 0.7160720143999372, 0.7101321731294904, 0.704483049256461, 0.6989204202379499, 0.693578805242266, 0.6884914296013969, 0.6836506639208112, 0.6790298053196498, 0.6745468378067017, 0.6701587949480329, 0.6658875942230225, 0.6617861986160278, 0.6577099050794329, 0.653817960194179, 0.6501445089067731, 0.6466403177806309, 0.6432499034064156, 0.6398108005523682, 0.6364611557551793, 0.6331995385033744, 0.6300334930419922, 0.6269588129861015, 0.6240486076899937, 0.6213391508374896, 0.6187211445399693, 0.6162161997386387, 0.6136949062347412, 0.6112439632415771, 0.608850257737296, 0.60646653175354, 0.6042686530521938], "val_accuracy": [0.04233333468437195, 0.052666667848825455, 0.07100000232458115, 0.1003333330154419, 0.1433333307504654, 0.18966667354106903, 0.24166665971279144, 0.28733333945274353, 0.32733333110809326, 0.35499998927116394, 0.3709999918937683, 0.3786666691303253, 0.3880000114440918, 0.39533331990242004, 0.4076666533946991, 0.41600000858306885, 0.42266666889190674, 0.4266666769981384, 0.43566668033599854, 0.4386666715145111, 0.4440000057220459, 0.45233333110809326, 0.46399998664855957, 0.47099998593330383, 0.47733333706855774, 0.48500001430511475, 0.4936666786670685, 0.5056666731834412, 0.5133333206176758, 0.5220000147819519, 0.5299999713897705, 0.5389999747276306, 0.5456666946411133, 0.5490000247955322, 0.5543333292007446, 0.5573333501815796, 0.5653333067893982, 0.5720000267028809, 0.5793333053588867, 0.5893333554267883, 0.5953333377838135, 0.6013333201408386, 0.6076666712760925, 0.6156666874885559, 0.6233333349227905, 0.6313333511352539, 0.6413333415985107, 0.6506666541099548, 0.6583333611488342, 0.6639999747276306, 0.6663333177566528, 0.67166668176651, 0.6769999861717224, 0.6790000200271606, 0.6853333115577698, 0.687666654586792, 0.6893333196640015, 0.6899999976158142, 0.6919999718666077, 0.6936666369438171, 0.6973333358764648, 0.6976666450500488, 0.6983333230018616, 0.6983333230018616, 0.7009999752044678, 0.703000009059906, 0.7039999961853027, 0.7066666483879089, 0.7089999914169312, 0.7120000123977661, 0.7146666646003723, 0.7176666855812073, 0.7193333506584167, 0.7223333120346069, 0.7250000238418579, 0.7263333201408386, 0.7283333539962769, 0.7283333539962769, 0.7283333539962769, 0.7306666374206543, 0.7306666374206543, 0.7306666374206543, 0.7319999933242798, 0.7333333492279053, 0.7333333492279053, 0.734666645526886, 0.7363333106040955, 0.7366666793823242, 0.7366666793823242, 0.7386666536331177, 0.7409999966621399, 0.7419999837875366, 0.7423333525657654, 0.7436666488647461, 0.7443333268165588, 0.7446666955947876, 0.7463333606719971, 0.746999979019165, 0.7490000128746033, 0.7490000128746033]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [4, 8, 2, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 0, 1, 0, 1, 0, 1, 1], [0, 0, 1, 1, 0], [7, 2, 8, 4], [2, 1], [64], [0, 1, 0, 1, 0, 1], [3, 8, 9, 1, 2], [1, 0, 2], [15, 52, 13]], "fitness": -0.5408571362495422, "mapping_values": [1, 2, 2, 1, 1, 0, 8, 8, 5, 3, 0, 5, 3, 2, 1, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.add(tf.math.negative(tf.math.negative(grad)), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, beta))), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.sqrt(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.241313804394187, 5916722526783.054, 5.2372503702497464e+32, 217610.13719187526, 57111139.15255581, 14466899198.410778], "accuracy": [0.24778760969638824, 0.22401267290115356, 0.1022322028875351, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [4.015131541660854, 3.2321752288928207e+33, 7283.785435267857, 1864595.5, 477336448.0, 122198130688.0], "val_accuracy": [0.5479999780654907, 0.10366666316986084, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925, 0.09566666930913925]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [29, 32, 5, 49, 25], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [4, 8, 2, 0, 9, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [5, 9, 8, 4], [1, 4, 0], [64], [0, 1, 1, 1, 0, 1], [3, 1, 9, 1, 2], [0, 0, 2], [21, 32, 13]], "fitness": -0.11257142573595047, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0, 0, 3, 1, 2, 2], "tree_depth": 6, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3023157529134353, 2.3025790336912713, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09826971590518951, 0.10170386731624603, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9735851969037737, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.11766666918992996, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [2, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 1, 1, 1, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [4, 8, 9, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 0, 1, 1, 0, 0, 1, 1], [1, 0, 1, 1, 0], [2, 5, 8, 4], [2, 1], [64], [0, 0, 1, 1, 1, 1], [3, 1, 8, 1, 2], [1, 0, 2], [15, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 25, 25, 14, 11, 3, 4, 4, 3, 1, 1, 1, 1, 0, 1, 0, 5, 2, 3, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha))), tf.math.add(alpha, alpha)))), tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))))), tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(grad, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))))), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.sqrt(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(alpha, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [29, 32, 5, 49, 25], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [8, 8, 2, 0, 0, 9, 3, 9], [1, 0, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [5, 6, 8, 4], [1, 4, 0], [80], [0, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 1, 1, 2], [3, 0, 2, 1, 0], [46, 52, 26]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 2, 1, 1, 0, 0, 9, 4, 5, 2], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.math.subtract(sigma, tf.math.subtract(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), beta)), alpha), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 0, 0, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [4, 6, 2, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [5, 9, 8, 4], [2, 1], [64], [1, 0, 0, 1, 1, 1, 1], [3, 1, 9, 1, 2], [0, 0, 2], [15, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 9, 9, 5, 4, 0, 2, 1, 1, 0, 0, 1, 0, 1, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, alpha), tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.negative(grad))), grad)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.303205169817051, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [2, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [4, 8, 2, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [5, 9, 8, 4], [2, 1], [64], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0], [3, 1, 9, 1, 2, 6, 7, 5, 9, 1, 6, 1, 8, 7, 3, 3, 1, 8, 9], [3, 2, 2, 1, 3, 0, 3, 1, 1, 3, 0], [81, 32, 13, 70, 92]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 4, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 30, 19, 11, 5], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.square(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(sigma, tf.math.divide_no_nan(beta, tf.math.add(tf.math.square(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), beta))), tf.math.subtract(tf.math.divide_no_nan(alpha, sigma), tf.math.subtract(tf.math.sqrt(tf.math.add(tf.math.multiply(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), sigma), tf.math.multiply(alpha, alpha))), sigma)))), tf.math.subtract(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09800554811954498, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [29, 32, 5, 49, 25], [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1], [4, 2, 2, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 2, 8, 4], [2, 1], [64], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 9, 1, 2], [2, 0, 2], [15, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 9, 9, 6, 3, 1, 5, 4, 2, 2, 0, 5, 3, 2, 2], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(tf.math.add(tf.math.negative(tf.math.negative(grad)), tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, beta))), tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), beta), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 2, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [29, 32, 5, 49, 25], [1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [4, 8, 2, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [1, 2, 8, 4], [2, 1], [64], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 9, 4, 2], [1, 2, 2], [1, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 7, 7, 4, 3, 0, 5, 4, 2, 2, 0, 5, 3, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.add(tf.math.add(beta, grad), tf.math.negative(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, beta))), tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), alpha), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0936468094587326, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [4, 8, 2, 0, 0, 9, 3, 9], [1, 3, 2, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [1, 2, 8, 4], [1, 4, 0], [64], [0, 1, 1, 1, 1, 1], [2, 1, 9, 1, 2], [0, 2, 2], [1, 52, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 8, 8, 5, 3, 0, 3, 1, 1, 0, 0, 3, 1, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.negative(grad))), tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [6, 8, 2, 0, 9, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [5, 9, 8, 4], [2, 1], [64], [0, 1, 0, 1, 0, 1], [9, 1, 9, 1, 2], [1, 0, 2], [15, 77, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 7, 7, 5, 2, 1, 2, 1, 1, 0, 0, 1, 1, 0, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(alpha)), tf.math.add(tf.math.negative(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.303205169817051, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [1, 8, 0, 0, 8, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [46], [0, 0, 0, 1, 0, 0, 1, 1], [1, 0, 1, 1, 0], [5, 9, 8, 4], [2, 1], [64], [0, 0, 1, 1, 1, 1], [3, 1, 9, 1, 2], [1, 1, 2], [15, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 7, 7, 5, 2, 0, 1, 1, 0, 1, 0, 5, 2, 3, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.subtract(alpha, tf.math.add(beta, tf.math.sqrt(tf.math.negative(tf.math.negative(tf.math.sqrt(grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(alpha, alpha), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [29, 32, 5, 49, 25], [0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1], [4, 8, 2, 0, 9, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [1, 2, 8, 4], [1, 4, 0], [64], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 9, 4, 2], [0, 0, 2], [1, 52, 11]], "fitness": -0.09971428662538528, "mapping_values": [1, 1, 1, 0, 1, 0, 7, 7, 5, 2, 1, 3, 1, 1, 0, 0, 5, 3, 2, 3], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.add(tf.math.negative(tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.5269846899193573, 5.023534854074684, 11.171799998320546, 20.83706638359863, 34.51556110445062, 53.029288182972195], "accuracy": [0.08730682730674744, 0.09668471664190292, 0.10157178342342377, 0.0944393053650856, 0.09985470771789551, 0.09985470771789551], "val_loss": [2.4870568002973283, 5.139144624982562, 10.063283375331334, 17.351282937186106, 27.309200831821986, 40.26255253383091], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [4, 3, 2, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 2, 8, 4], [2, 1], [64], [0, 1, 0, 1, 0, 1], [3, 1, 9, 1, 2], [1, 1, 2], [15, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 17, 17, 10, 7, 4, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.square(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(alpha, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.303726184794837, 2.302796750099526, 2.301982806201593, 2.303063347858917, 2.303249282135294, 2.3031022303045514], "accuracy": [0.09034473448991776, 0.08479725569486618, 0.09457138925790787, 0.08809932321310043, 0.08440100401639938, 0.09047681838274002], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [29, 32, 5, 49, 25], [0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [4, 8, 2, 0, 0, 9, 3, 9], [2, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 1, 1, 0], [7, 2, 8, 4], [2, 1], [64], [0, 1, 1, 1, 0, 1], [3, 1, 9, 1, 2], [1, 0, 2], [15, 48, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 2, 2, 1, 1, 0, 8, 8, 6, 2, 1, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.negative(tf.math.add(beta, tf.math.negative(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)))), beta))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.303726184794837, 2.302796750099526, 2.301982806201593, 2.303063347858917, 2.303249282135294, 2.3031022303045514], "accuracy": [0.09034473448991776, 0.08479725569486618, 0.09457138925790787, 0.08809932321310043, 0.08440100401639938, 0.09047681838274002], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [0, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [4, 3, 2, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 2, 8, 4], [2, 1], [64], [0, 1, 0, 1, 1, 1], [3, 1, 9, 1, 2], [1, 0, 2], [15, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 17, 17, 10, 7, 5, 1, 1, 0, 1, 0, 5, 4, 2, 2, 0, 5, 2, 3, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.square(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, beta))), tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [2.303726184794837, 2.302796750099526, 2.301982806201593, 2.303063347858917, 2.303249282135294, 2.3031022303045514], "accuracy": [0.09034473448991776, 0.08479725569486618, 0.09457138925790787, 0.08809932321310043, 0.08440100401639938, 0.09047681838274002], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [29, 32, 5, 49, 25], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1], [4, 8, 2, 0, 9, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [57], [0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [1, 2, 8, 4], [2, 1], [64], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [3, 1, 9, 4, 2], [1, 3, 2], [15, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 1, 1, 0, 1, 0, 7, 7, 5, 2, 1, 3, 1, 1, 0, 0, 5, 3, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.add(tf.math.negative(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), alpha), sigma)", "other_info": {"loss": [2.303726184794837, 2.302796750099526, 2.301982806201593, 2.303063347858917, 2.303249282135294, 2.3031022303045514], "accuracy": [0.09034473448991776, 0.08479725569486618, 0.09457138925790787, 0.08809932321310043, 0.08440100401639938, 0.09047681838274002], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}]