[{"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [31, 32, 29, 49, 25], [1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1], [3, 2, 6, 6, 3, 7, 4, 9, 2, 3, 0, 2, 1, 6, 4, 3, 3, 8], [1, 3, 3, 1, 1, 5, 3, 2, 1, 4, 4, 0], [98], [0, 1, 1, 0, 1], [0, 0, 1], [3, 2, 8, 4], [2], [64], [0, 1, 0, 1, 1, 1], [3, 1, 9, 1, 2], [1, 3, 0], [97, 52, 13]], "fitness": -0.8251428604125977, "mapping_values": [1, 3, 3, 1, 2, 1, 11, 11, 5, 6, 0, 3, 1, 1, 0, 0, 5, 2, 3, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, grad))), grad), tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, alpha))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(sigma, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2491246040045954, 1.718864024118457, 1.2079298237075171, 0.9014339660137022, 0.8181809417056117, 0.747885645915961, 0.7171825224366627, 0.6690882252916259, 0.6434207580990527, 0.6132698445162045, 0.5809557342321456, 0.56267960863012, 0.5376298665890148, 0.5192181949980145, 0.5009602097440877, 0.4886773194320103, 0.47170429345229675, 0.44789918419109, 0.43689361277226174, 0.42459390104297223, 0.41680992760867364, 0.3968676145184451, 0.3885884597797152, 0.38592447411540065, 0.36825154792394904, 0.3586553090110888, 0.3564429297509872, 0.3458968841711512, 0.335708163677662, 0.3288431254753961, 0.3205251260527121, 0.3213776361279405, 0.30665060381816284, 0.2914028531603447, 0.29564617818467226, 0.28150608931329696, 0.2760295921257852, 0.27457263468790677, 0.273759257677697, 0.25987714547538454, 0.25077869902433675], "accuracy": [0.20935148000717163, 0.44868576526641846, 0.5926561951637268, 0.6601505875587463, 0.6968696117401123, 0.7140403985977173, 0.7333245277404785, 0.746268630027771, 0.7581561207771301, 0.7656848430633545, 0.7800818681716919, 0.7877426743507385, 0.7969884872436523, 0.8049134612083435, 0.8080834746360779, 0.8120459914207458, 0.8239334225654602, 0.8348963260650635, 0.8370096683502197, 0.8449346423149109, 0.844010055065155, 0.8524633646011353, 0.8558974862098694, 0.8545766472816467, 0.8625016212463379, 0.863558292388916, 0.8681812286376953, 0.8665962219238281, 0.876370370388031, 0.8745211958885193, 0.8798044919967651, 0.8778232932090759, 0.8795403242111206, 0.8881257176399231, 0.8879936337471008, 0.8965790271759033, 0.8952582478523254, 0.8922203183174133, 0.8914278149604797, 0.8994848728179932, 0.9052965044975281], "val_loss": [1.7678701536996024, 0.8623940093176705, 0.6613285711833409, 0.6265788759504046, 0.5728146348680768, 0.5517253705433437, 0.535889846937997, 0.5096151317868914, 0.4802510738372803, 0.4606971911021641, 0.44064835139683317, 0.43118077516555786, 0.41498030935014996, 0.40157060963766916, 0.3951750823429653, 0.3842062268938337, 0.38368567398616243, 0.3691791125706264, 0.3630830304963248, 0.35511562653950285, 0.35033457619803293, 0.3465852311679295, 0.33594772645405363, 0.33123829535075594, 0.3326045445033482, 0.33311053684779574, 0.326894930430821, 0.3262655224118914, 0.3219582097870963, 0.31726560422352384, 0.32402447291782926, 0.3137968693460737, 0.32066649198532104, 0.30872430971690584, 0.31279850006103516, 0.3160420911652701, 0.30904596192496164, 0.3174689156668527, 0.3122400641441345, 0.3192688652447292, 0.3125213810375759], "val_accuracy": [0.4860000014305115, 0.6740000247955322, 0.7289999723434448, 0.7369999885559082, 0.7490000128746033, 0.7590000033378601, 0.7639999985694885, 0.778333306312561, 0.7879999876022339, 0.8019999861717224, 0.8050000071525574, 0.8113333582878113, 0.8276666402816772, 0.8309999704360962, 0.8346666693687439, 0.8356666564941406, 0.8416666388511658, 0.8506666421890259, 0.8536666631698608, 0.8566666841506958, 0.8573333621025085, 0.8600000143051147, 0.8616666793823242, 0.8633333444595337, 0.8640000224113464, 0.8676666617393494, 0.8636666536331177, 0.8656666874885559, 0.8706666827201843, 0.871999979019165, 0.8706666827201843, 0.8743333220481873, 0.8676666617393494, 0.8733333349227905, 0.875333309173584, 0.8763333559036255, 0.8730000257492065, 0.8696666955947876, 0.8759999871253967, 0.8740000128746033, 0.8743333220481873]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [21, 32, 29, 49, 25], [1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 2, 6, 6, 3, 7, 4, 9, 2, 3, 0, 2, 1, 6, 4, 3, 3, 8], [1, 3, 3, 1, 1, 5, 3, 2, 1, 4, 4, 0], [98], [1, 1, 1, 0, 1], [0, 0, 1], [3, 2, 8, 4], [2], [64], [0, 1, 0, 1, 0, 1], [3, 1, 9, 1, 2], [1, 2, 0], [97, 52, 13]], "fitness": -0.7005714178085327, "mapping_values": [1, 3, 3, 1, 2, 1, 5, 5, 2, 3, 0, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(grad, tf.math.add(alpha, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(beta, grad)), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(beta, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.294149313809424, 2.245496714009648, 2.1344826667379033, 1.8576484280743573, 1.4856467478783248, 1.356283242597619, 1.1693338880355033, 0.9479858552334158, 0.92989398864408, 0.8738127764205671, 0.8354859211504373, 0.8432115252306748, 0.8094392830764046, 0.7656072609538903, 0.773335510918241, 0.7527386393875825, 0.7509590118725885, 0.7157911083890683, 0.6872453215162846, 0.6734004055094867, 0.6787551181773941, 0.6672576799793896, 0.6487119711700322, 0.6417446546409077, 0.6163574868992509, 0.5996254523904836, 0.5952669108595752, 0.5861497364890038, 0.5686656475665468, 0.5721354587612497, 0.5664411579550155, 0.5479089804156078, 0.5412749767917542, 0.5172650703207975, 0.5410842731360825, 0.5360551803945912, 0.5230772455669807, 0.4984826828116801, 0.5034405463926859, 0.5191808244681645, 0.5121619095970469, 0.49962215586313874, 0.4911291470947739, 0.48032187881360766, 0.47659035868034416, 0.4619346286610936, 0.4671844491050417, 0.45547331131728036, 0.4553904953673374, 0.4534826310413735], "accuracy": [0.109232597053051, 0.24276845157146454, 0.35781270265579224, 0.418570876121521, 0.4920089840888977, 0.5451063513755798, 0.6110157370567322, 0.6407343745231628, 0.6478668451309204, 0.6753401160240173, 0.6782459616661072, 0.6804913282394409, 0.6955488324165344, 0.7054550051689148, 0.6954167485237122, 0.7131158113479614, 0.7145687341690063, 0.7310791015625, 0.7417778372764587, 0.7490423917770386, 0.7400607466697693, 0.7430986762046814, 0.7511557340621948, 0.7510236501693726, 0.7718927264213562, 0.7775723338127136, 0.7720248103141785, 0.7812706232070923, 0.7864218950271606, 0.7895918488502502, 0.793950617313385, 0.7935543656349182, 0.7959318161010742, 0.8083476424217224, 0.7952714562416077, 0.8005547523498535, 0.8059701323509216, 0.8178576231002808, 0.8157442808151245, 0.8088759779930115, 0.8128384351730347, 0.8150838613510132, 0.817461371421814, 0.8182538747787476, 0.8280280232429504, 0.82683926820755, 0.8296129703521729, 0.8289526104927063, 0.8321225643157959, 0.83119797706604], "val_loss": [1.9449545315333776, 1.8742573601858956, 1.700923272541591, 1.2782253537859236, 0.870490380695888, 0.7485673768179757, 0.6885453122002738, 0.6843934059143066, 0.6789990152631488, 0.6248220886502948, 0.6005633047648838, 0.5924194540296283, 0.5926216500146049, 0.5717853307723999, 0.57097327709198, 0.5759582008634295, 0.5566323484693255, 0.5273328849247524, 0.5259705611637661, 0.5101698807307652, 0.5001814024788993, 0.49224659374782015, 0.49779774461473736, 0.4864492927278791, 0.4751504489353725, 0.47522098677498953, 0.4605017219270979, 0.4508342913218907, 0.4500420604433332, 0.44371865476880756, 0.4406383889062064, 0.43956676551273893, 0.43356473105294363, 0.4298502802848816, 0.4416168076651437, 0.4376746245792934, 0.418866114956992, 0.41430667468479704, 0.41541387353624615, 0.4084686466625759, 0.4041815825871059, 0.4008179136684963, 0.3980744991983686, 0.3935776948928833, 0.3948745386941092, 0.40391690390450613, 0.3967804653303964, 0.38981146471840994, 0.3884658302579607, 0.38100054434367586], "val_accuracy": [0.2773333191871643, 0.42266666889190674, 0.45899999141693115, 0.5753333568572998, 0.6743333339691162, 0.6946666836738586, 0.7173333168029785, 0.7046666741371155, 0.7126666903495789, 0.7213333249092102, 0.7263333201408386, 0.7406666874885559, 0.7336666584014893, 0.7480000257492065, 0.7546666860580444, 0.7559999823570251, 0.7573333382606506, 0.7753333449363708, 0.7796666622161865, 0.7766666412353516, 0.7766666412353516, 0.7886666655540466, 0.7870000004768372, 0.7923333048820496, 0.7983333468437195, 0.7990000247955322, 0.8056666851043701, 0.8143333196640015, 0.815666675567627, 0.8180000185966492, 0.8169999718666077, 0.8173333406448364, 0.8216666579246521, 0.82833331823349, 0.8273333311080933, 0.8286666870117188, 0.8293333053588867, 0.8293333053588867, 0.831333339214325, 0.8293333053588867, 0.8309999704360962, 0.8389999866485596, 0.8399999737739563, 0.843999981880188, 0.8473333120346069, 0.8383333086967468, 0.8410000205039978, 0.8376666903495789, 0.8446666598320007, 0.8463333249092102]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [5, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [31, 32, 29, 49, 25], [1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1], [2, 2, 6, 6, 6, 7, 4, 9, 2, 3, 0, 2, 1, 6, 4, 3, 3, 8], [1, 3, 3, 1, 1, 2, 3, 2, 1, 4, 4, 0], [98], [1, 1, 1, 0, 1], [0, 0, 1], [3, 2, 8, 4], [2], [64], [0, 1, 0, 1, 1, 1], [3, 1, 9, 1, 2], [1, 3, 0], [97, 52, 13]], "fitness": -0.26657143235206604, "mapping_values": [1, 1, 1, 0, 1, 0, 11, 11, 5, 6, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, grad))), grad), tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, alpha))), beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(sigma, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [3.761835630087096, 2.431065003066692, 2.4864763040521187, 2.3266640865508323, 2.3243652870783857, 2.3431133938314357, 2.320624694627715], "accuracy": [0.17580240964889526, 0.12653546035289764, 0.1088363528251648, 0.09813763201236725, 0.10408136248588562, 0.09932637959718704, 0.1002509593963623], "val_loss": [2.0120699065072194, 1.8950413976396834, 1.9981047766549247, 1.9956487928118025, 1.9923263958522253, 1.9907595770699638, 1.989769390651158], "val_accuracy": [0.1420000046491623, 0.2016666680574417, 0.10233332961797714, 0.10366666316986084, 0.10066666454076767, 0.10233332961797714, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [31, 32, 29, 49, 25], [0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [4, 7, 0, 5, 0, 9, 3, 9], [1, 1, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [98], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [2], [64], [0, 1, 0, 1, 1, 1], [3, 1, 9, 1, 2], [1, 0, 0], [15, 52, 13]], "fitness": -0.1022857129573822, "mapping_values": [1, 1, 1, 0, 1, 0, 6, 6, 3, 3, 0, 1, 1, 0, 1, 0, 5, 2, 3, 2], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.negative(alpha)), tf.math.add(beta, alpha)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.545388823250864, 2.4675188963958976, 2.343369197379392, 2.364998053943854, 2.353817602268945, 2.3211462537389878], "accuracy": [0.23656055331230164, 0.10579843819141388, 0.09972262382507324, 0.09959053993225098, 0.09800554811954498, 0.09879804402589798], "val_loss": [2.0017127990722656, 2.032248156411307, 2.0241960116795132, 1.9983062744140625, 1.994744096483503, 2.013941969190325], "val_accuracy": [0.11866666376590729, 0.10066666454076767, 0.10199999809265137, 0.10366666316986084, 0.10233332961797714, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [4, 2, 1, 6, 8, 2, 4, 1, 1, 9, 4, 2, 6, 3, 6, 5, 8], [1, 1, 2, 1, 2, 2, 2, 2, 0, 2, 0, 0], [31, 32, 29, 64, 25, 26, 74, 54], [1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], [2, 7, 2, 8, 5, 4, 3, 9, 0, 4, 0], [1, 3, 5, 1, 1, 5, 3, 2, 1, 4, 4, 0], [98], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [2], [64], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [4, 6, 9, 4, 2, 4, 5, 2], [3, 0, 0, 1, 3, 1], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 18, 10, 8, 1, 5, 5, 2, 3, 0, 1, 1, 0, 1, 0, 14, 8, 6, 3], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, alpha)), tf.math.add(alpha, grad)), tf.math.add(tf.math.add(alpha, alpha), tf.math.pow(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), grad)))))))), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.divide_no_nan(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), sigma), tf.math.pow(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.pow(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.math.square(alpha)), tf.math.add(sigma, alpha))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [1, 2, 3, 6, 2, 2, 0, 5, 5, 9, 6, 2, 6, 3, 6, 5, 6, 0], [1, 1, 2, 0, 2, 2, 2, 2, 0, 2, 0, 0], [31, 32, 29, 64, 25, 26, 74, 54], [0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1], [2, 7, 2, 8, 5, 4, 3, 9, 0, 4, 0], [1, 3, 5, 1, 1, 5, 3, 2, 1, 4, 4, 0], [56, 22, 44, 7], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [1], [64], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1], [4, 6, 9, 1, 2, 7, 4, 4, 4, 6, 7, 2, 8, 4, 9, 5, 0, 1, 4, 4, 2, 4, 8, 4, 2, 2, 2, 7, 3, 8, 3, 8], [3, 0, 2, 1, 3, 1, 2, 1, 3, 2], [23, 20, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 8, 8, 4, 4, 0, 1, 1, 0, 1, 0, 21, 11, 10, 2], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, alpha), alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(alpha, tf.math.add(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.divide_no_nan(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), sigma), tf.math.subtract(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.pow(tf.math.pow(tf.math.divide_no_nan(alpha, sigma), alpha), beta), tf.math.add(alpha, sigma))), beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [2, 2, 4, 6, 2, 2, 0, 1, 5, 5, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [88, 32, 29, 58, 25], [1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1], [3, 2, 6, 5, 3, 7, 4, 9, 2, 3, 0, 2, 1, 6, 4, 3, 3, 8], [1, 1, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [98], [0, 1, 1, 0, 1], [0, 0, 1], [3, 2, 8, 4], [2], [64], [0, 1, 0, 1, 1, 1], [3, 1, 9, 1, 2], [1, 3, 0], [97, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 7, 7, 3, 5, 5, 2, 3, 0, 3, 1, 1, 0, 0, 5, 2, 3, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(tf.math.negative(tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.add(beta, alpha), alpha), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(sigma, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 6, 6, 2, 5, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [31, 32, 29, 49, 25], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1], [3, 2, 6, 5, 3, 7, 4, 1, 2, 3, 0, 2, 1, 6, 4, 3, 3, 8], [1, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0], [98], [0, 1, 1, 0, 1], [0, 0, 1], [3, 2, 8, 4], [2], [64], [0, 0, 0, 1, 1, 1], [3, 4, 9, 1, 2], [1, 3, 0], [37, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 20, 20, 12, 8, 4, 10, 10, 5, 5, 0, 3, 1, 1, 0, 0, 5, 3, 2, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.square(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))), grad)))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.square(grad)))), tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad)))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.pow(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), alpha), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 2, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [65, 32, 29, 49, 25], [0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 2, 6, 6, 3, 7, 4, 9, 2, 3, 0, 2, 1, 6, 4, 3, 3, 8], [1, 3, 3, 1, 1, 5, 3, 2, 1, 4, 4, 0], [98, 82], [0, 1, 1, 0, 1], [0, 0, 1], [3, 2, 8, 4], [2], [64], [0, 1, 1, 1, 1, 1], [2, 1, 9, 1, 2], [3, 1, 0], [97, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 5, 5, 2, 3, 0, 3, 1, 1, 0, 0, 3, 1, 2, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha)", "other_info": {"loss": [2.3029878419136187, 2.3183094946904474, 2.4010652952507357e+17, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09100515395402908, 0.07951393723487854, 0.08730682730674744, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9749970436096191, 1.9961638450622559, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.02133333310484886, 0.08833333104848862, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 6, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 0, 0, 2, 2, 0, 2, 3, 3, 0], [31, 32, 96, 49, 25], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [3, 2, 6, 5, 3, 7, 4, 9, 2, 3, 0, 2, 1, 6, 4, 3, 3, 8], [1, 1, 3, 3, 1, 3, 3, 2, 1, 4, 4, 0], [98], [0, 1, 1, 0, 1], [0, 0, 1], [3, 2, 8, 4], [2], [64], [0, 1, 0, 1, 1, 1], [3, 1, 9, 1, 2], [1, 3, 0], [37, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 11, 8, 5, 23, 23, 13, 10, 1, 3, 1, 1, 0, 0, 5, 2, 3, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))))))), tf.math.pow(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))), grad)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.square(tf.math.add(beta, alpha))))), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.pow(tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(alpha, grad)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.subtract(beta, tf.math.add(beta, alpha))))))))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(sigma, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [3.115434093120123, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.03790780529379845, 0.09417514503002167, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [841254554004918.9, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.009666666388511658, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 1, 1, 0, 2, 2, 0, 2, 3, 3, 0], [54, 32, 29, 49, 25], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1], [3, 2, 6, 5, 3, 7, 4, 9, 2, 3, 0, 2, 1, 6, 4, 3, 3, 8], [3, 1, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [98], [0, 1, 1, 0, 1], [0, 0, 1], [3, 2, 8, 4], [2], [64], [0, 1, 0, 1, 0, 1], [3, 1, 9, 1, 2], [1, 3, 0], [37, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 11, 8, 3, 16, 16, 9, 7, 1, 3, 1, 1, 0, 0, 5, 3, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(alpha, alpha)))), tf.math.subtract(tf.math.square(tf.math.add(alpha, alpha)), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.square(alpha)))), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad)), alpha))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(grad, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(sigma, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.12613920867443085, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [65, 32, 29, 49, 25], [1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 2, 6, 6, 3, 7, 4, 9, 2, 3, 0, 2, 1, 6, 4, 3, 3, 8], [1, 3, 1, 1, 1, 5, 3, 2, 1, 4, 4, 0], [98, 82], [0, 1, 1, 0, 1], [1, 0, 1], [1, 2, 8, 4], [2], [64], [0, 1, 0, 1, 1, 1], [2, 1, 9, 1, 2], [1, 3, 0], [97, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 5, 5, 2, 3, 0, 1, 1, 0, 1, 0, 5, 2, 3, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), grad)), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.subtract(sigma, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [76, 32, 29, 49, 25], [1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 7, 0, 5, 0, 9, 3, 9], [3, 4, 0, 3, 1, 4, 4, 1, 3, 0, 5, 4], [98, 16], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [5], [64], [0, 1, 1, 1, 0, 1, 1], [2, 1, 9, 1, 2], [0, 3, 0], [97, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 5, 5, 2, 3, 1, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(tf.math.add(beta, grad), grad), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), sigma)", "other_info": {"loss": [2.3022172820094147, 2.302248279038453, 2.3032847171635313, 2.307560951419085, 2.329418078673089, 2.449777205228774], "accuracy": [0.10394927859306335, 0.10170386731624603, 0.10355303436517715, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9736035891941615, 1.973773411342076, 1.9751067161560059, 1.9829464639936174, 2.0254556792122975, 2.2881905010768344], "val_accuracy": [0.10366666316986084, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 2, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [21, 32, 29, 49, 25], [1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 2, 6, 6, 3, 7, 4, 9, 2, 3, 0, 2, 1, 6, 4, 3, 3, 8], [1, 3, 3, 1, 1, 5, 3, 2, 1, 4, 4, 0], [98], [0, 1, 1, 0, 1], [0, 0, 0], [3, 9, 8, 4], [3], [64], [0, 1, 0, 0, 1, 1], [1, 1, 9, 1, 2], [1, 3, 0], [97, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 5, 5, 2, 3, 0, 3, 1, 1, 0, 0, 5, 3, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(alpha, tf.math.subtract(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09602430462837219, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [6, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [76, 32, 29, 49, 25], [1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1], [4, 7, 0, 5, 0, 9, 3, 9], [3, 4, 0, 3, 1, 4, 4, 1, 3, 0, 5, 4], [30], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [2], [64], [1, 1, 1, 1, 0, 1], [3, 1, 9, 1, 2], [2, 1, 2], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 4, 5, 5, 2, 3, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.square(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))))))), grad), lambda shape,  alpha, beta, grad: tf.math.pow(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [1, 2, 1, 6, 2, 2, 8, 1, 1, 9, 4, 2, 6, 3, 6, 5, 8], [1, 1, 2, 0, 2, 2, 2, 2, 0, 2, 0, 0], [76, 32, 29, 49, 25], [1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], [2, 6, 2, 8, 5, 4, 3, 9, 0, 4, 0], [1, 0, 5, 1, 1, 5, 3, 2, 1, 4, 4, 0], [98], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [4], [64], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [3, 6, 9, 1, 2, 4, 5, 1], [2, 1, 3, 2, 1, 1], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 18, 10, 8, 2, 5, 5, 2, 3, 1, 1, 1, 0, 1, 0, 14, 8, 6, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.subtract(tf.math.add(alpha, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.subtract(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), grad)))), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.divide_no_nan(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), beta), tf.math.subtract(alpha, tf.math.add(tf.math.pow(sigma, tf.math.square(beta)), tf.math.subtract(alpha, alpha))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [5, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 1, 2, 0, 2, 3, 3, 0], [31, 32, 29, 49, 25], [1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1], [3, 2, 6, 5, 3, 7, 4, 9, 2, 3, 0, 2, 1, 6, 4, 3, 3, 8], [1, 3, 3, 1, 1, 5, 3, 2, 1, 4, 4, 0], [98], [0, 1, 1, 0, 1], [0, 0, 1], [3, 2, 8, 4], [2], [64], [0, 1, 0, 1, 1, 1], [3, 1, 9, 1, 2], [1, 3, 0], [97, 52, 13]], "fitness": -0.08085714280605316, "mapping_values": [1, 2, 2, 1, 1, 0, 10, 10, 5, 5, 0, 3, 1, 1, 0, 0, 5, 2, 3, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), grad)), grad)), tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(sigma, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.300737123038428, 2.2996649612383426, 2.3013900333722472, 2.3023015510577727, 2.3022418465864356, 2.302718173747427, 2.303497425742421, 2.304922127689054, 2.3089165873673014, 2.33288378319358, 2515.4804318848383], "accuracy": [0.0940430611371994, 0.09655263274908066, 0.10117553919553757, 0.08585391938686371, 0.09126931428909302, 0.08268392831087112, 0.09906221181154251, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004, 0.10011887550354004], "val_loss": [1.9697761535644531, 1.9718219893319267, 1.9728688512529646, 1.9733238220214844, 1.9736952781677246, 1.9742059026445662, 1.9751612118312292, 1.977487632206508, 1.9860777173723494, 2.0484084401811873, 8724908324.571428], "val_accuracy": [0.06933332979679108, 0.09966666996479034, 0.09533333033323288, 0.08799999952316284, 0.10166666656732559, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 3, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [4, 32, 29, 49, 25], [1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1], [3, 2, 6, 6, 3, 7, 4, 9, 2, 3, 0, 2, 1, 6, 4, 3, 3, 8], [1, 3, 5, 1, 1, 5, 3, 2, 1, 4, 4, 0], [98], [1, 1, 1, 0, 1], [0, 0, 1], [3, 2, 8, 4], [2], [64], [1, 0, 0, 1, 0, 1], [0, 9, 9, 1, 2], [1, 3, 0], [99, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, alpha), grad), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3015804097416566, 2.3016816616814135, 2.30310787614216, 2.3018335795689095, 2.30325005520856, 2.3023754615415877], "accuracy": [0.09417514503002167, 0.08849557489156723, 0.09311848133802414, 0.09074098616838455, 0.08426892012357712, 0.08942015469074249], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [31, 32, 29, 49, 25], [1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 2, 6, 6, 3, 7, 4, 9, 2, 3, 0, 2, 1, 6, 4, 3, 3, 8], [1, 3, 4, 1, 1, 5, 3, 2, 1, 4, 4, 0], [98], [0, 1, 1, 0, 1], [0, 0, 1], [3, 2, 8, 4], [2], [64], [0, 1, 1, 1, 1, 1], [3, 1, 9, 1, 2], [1, 3, 2], [97, 52, 13]], "fitness": -0.03971428424119949, "mapping_values": [1, 17, 17, 10, 7, 4, 5, 5, 2, 3, 0, 3, 1, 1, 0, 0, 3, 1, 2, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(grad, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.square(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))))), grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad)), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, sigma)", "other_info": {"loss": [2.3015804097416566, 2.3016816616814135, 2.30310787614216, 2.3018335795689095, 2.30325005520856, 2.3043136748781357, 2.305202250215497, 2.3078718862481926, 2.3102522608374465, 2.3109029245067974, 2.3137657291239533], "accuracy": [0.09417514503002167, 0.08849557489156723, 0.09311848133802414, 0.09074098616838455, 0.08426892012357712, 0.08598599582910538, 0.08308017253875732, 0.0730418711900711, 0.07277770340442657, 0.07000396400690079, 0.06696605682373047], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9727394240243095, 1.9736385345458984, 1.978569575718471, 1.978569575718471, 1.9808887072971888, 1.9828968729291643], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03866666555404663, 0.03400000184774399, 0.020666666328907013, 0.020666666328907013, 0.010999999940395355, 0.011666666716337204]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [27, 32, 29, 49, 25], [1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], [3, 2, 6, 6, 3, 7, 4, 9, 2, 3, 0, 2, 1, 6, 4, 3, 3, 8], [0, 3, 4, 1, 1, 5, 3, 2, 1, 4, 4, 0], [98, 16], [0, 1, 0, 0, 1], [1, 0, 1], [3, 2, 8, 4], [5], [64], [0, 1, 1, 1, 0, 1, 1], [3, 1, 9, 1, 2], [1, 3, 0], [97, 52, 13]], "fitness": -0.0357142873108387, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 3, 1, 2, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, sigma)", "other_info": {"loss": [2.302040560402024, 2.303528377707797, 2.30714794213604, 2.3075219928911253, 2.3125794473624643, 2.315325260603228], "accuracy": [0.09338264167308807, 0.08545766770839691, 0.08611807972192764, 0.08374059200286865, 0.07700435817241669, 0.07515519857406616], "val_loss": [1.9718539374215263, 1.9731689180646623, 1.9748432295663017, 1.976499353136335, 1.9788027490888322, 1.9812318256923132], "val_accuracy": [0.032999999821186066, 0.02566666714847088, 0.020999999716877937, 0.019333332777023315, 0.01733333244919777, 0.02133333310484886]}}]