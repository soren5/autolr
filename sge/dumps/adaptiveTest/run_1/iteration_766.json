[{"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [6, 6, 2, 8, 0, 3, 9, 6, 8, 4, 2, 5, 2, 9, 2, 5, 8, 2, 4, 6, 9, 3, 9, 9], [1, 3, 2, 1, 1, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [84, 19, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0], [9, 9, 3, 4], [4, 0], [53, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8402857184410095, "mapping_values": [1, 4, 4, 3, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.078498614667319, 1.8776509810463942, 1.1540537925444228, 0.8415578299619896, 0.797250216623827, 0.7237379518812989, 0.6838477143301641, 0.7957544195464636, 0.6645949982759141, 0.6234832775433774, 0.5933538335047661, 0.5742755786633494, 0.5604511403711543, 0.5379297537117775, 0.5387423363233901, 0.5083957048903808, 0.50375489711667, 0.48815842785493274, 0.463001153236367, 0.48102057020284117, 0.45307062658588443, 0.43773416939223875, 0.4269885997203174, 0.41680624896839796, 0.4071685931804142, 0.41188694016099875, 0.4071409574014447, 0.3853753232614255, 0.38321557978770643, 0.3713833721928577, 0.3792552305895969, 0.3617130307835705, 0.3483653954385121], "accuracy": [0.3117157518863678, 0.38304054737091064, 0.5863162279129028, 0.6828688383102417, 0.6977941989898682, 0.7268524765968323, 0.7457403540611267, 0.7144366502761841, 0.7526086568832397, 0.7675340175628662, 0.7755910754203796, 0.7802139520645142, 0.7938185334205627, 0.796328067779541, 0.8009510040283203, 0.8132346868515015, 0.8120459914207458, 0.8191784620285034, 0.8277638554573059, 0.8230088353157043, 0.832650899887085, 0.837141752243042, 0.8451988101005554, 0.8466516733169556, 0.8473120927810669, 0.8469158411026001, 0.8451988101005554, 0.8549728989601135, 0.857218325138092, 0.8593316674232483, 0.8545766472816467, 0.8631620407104492, 0.8730682730674744], "val_loss": [1.8903403963361467, 1.1544568879263741, 0.637755172593253, 0.6244918618883405, 0.6059279952730451, 0.5288629361561367, 0.7115841593061175, 0.499651415007455, 0.5231134210314069, 0.4760987418038504, 0.45347670146397184, 0.43899238109588623, 0.4067607947758266, 0.4341644900185721, 0.4321584871837071, 0.39107134512492586, 0.3939035194260733, 0.3942054339817592, 0.37774386576243807, 0.3889272212982178, 0.38278430700302124, 0.3630522404398237, 0.37113589899880545, 0.3505070464951651, 0.37002175194876535, 0.35308821712221417, 0.3615320920944214, 0.34074435915265766, 0.34256782702037264, 0.35113251209259033, 0.3380585994039263, 0.3451765775680542, 0.3426827107157026], "val_accuracy": [0.22366666793823242, 0.5916666388511658, 0.7229999899864197, 0.7326666712760925, 0.7116666436195374, 0.7723333239555359, 0.6933333277702332, 0.7886666655540466, 0.7580000162124634, 0.7910000085830688, 0.7950000166893005, 0.8036666512489319, 0.8213333487510681, 0.8100000023841858, 0.8040000200271606, 0.8299999833106995, 0.843666672706604, 0.8330000042915344, 0.8383333086967468, 0.8326666951179504, 0.8343333601951599, 0.8486666679382324, 0.846666693687439, 0.8546666502952576, 0.8429999947547913, 0.8486666679382324, 0.8450000286102295, 0.8619999885559082, 0.8600000143051147, 0.8539999723434448, 0.8586666584014893, 0.8573333621025085, 0.8533333539962769]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [7, 4, 3, 6, 0, 9, 6, 2, 3, 3, 3, 3, 0, 9, 2, 5, 0, 2, 4, 6, 5, 8, 9, 9, 8, 8, 0, 9, 2, 5], [2, 5, 3, 2, 3, 1, 3, 3, 1, 3, 4, 3, 3, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [92, 19, 30, 73, 40, 57, 35, 9, 54, 64], [0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 1, 0, 0], [2, 9, 3, 4], [5, 0], [53, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8368571400642395, "mapping_values": [1, 4, 4, 3, 1, 1, 35, 35, 22, 13, 2, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, tf.math.multiply(tf.math.divide_no_nan(grad, tf.math.negative(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, beta))), tf.math.multiply(tf.math.multiply(tf.math.multiply(grad, tf.math.multiply(tf.math.add(beta, tf.math.negative(alpha)), tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), grad), grad)))))), tf.math.add(tf.math.add(beta, alpha), tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), grad)), tf.math.sqrt(grad)))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.0782540771923737, 1.8892666691597568, 1.2070269941921483, 0.9117055521224232, 0.8194306575469431, 0.7092562820681209, 0.6868186331050365, 0.8470695493416842, 0.649867621285017, 0.6384322099115052, 0.5772324790414204, 0.5596073709222634, 0.5674785523445472, 0.533100379503729, 0.5284897202372221, 0.5054456252526488, 0.4965729983396786, 0.4849695980966115, 0.4763232154451609, 0.46731342391220804, 0.44517162506763946, 0.4514818190465498, 0.42354459313668624, 0.4161086692833362, 0.4112970776026354, 0.40586336252869176, 0.4059229935983767, 0.39283939781930266, 0.3812233640918989, 0.36660053334483667, 0.3717448068781457, 0.3559565060701762, 0.3477367712262284], "accuracy": [0.3117157518863678, 0.3777572214603424, 0.5712587237358093, 0.6662263870239258, 0.6934354901313782, 0.7304186820983887, 0.7479857206344604, 0.7018887996673584, 0.7559106945991516, 0.759080708026886, 0.7819310426712036, 0.7909126877784729, 0.7869502305984497, 0.7968564033508301, 0.8016114234924316, 0.8152159452438354, 0.8149517774581909, 0.8230088353157043, 0.8238013386726379, 0.83119797706604, 0.8359529972076416, 0.8319904804229736, 0.8408400416374207, 0.8498216867446899, 0.8457271456718445, 0.848368763923645, 0.8448025584220886, 0.8552370667457581, 0.8593316674232483, 0.8618412613868713, 0.8590674996376038, 0.8684453964233398, 0.8720116019248962], "val_loss": [1.8894483021327428, 1.3274384907313757, 0.7485791785376412, 0.7538032702037266, 0.574953556060791, 0.5369817699704852, 0.7203850746154785, 0.5013576916285923, 0.4822006566183908, 0.46779513359069824, 0.4390840615545, 0.44646051951817106, 0.42408973830086844, 0.4206511207989284, 0.41092595032283236, 0.40381074803216116, 0.3847648245947702, 0.3867197973387582, 0.38970685856682913, 0.37463249479021343, 0.38428994587489534, 0.3718150087765285, 0.3580063836915152, 0.3531544378825596, 0.3626669304711478, 0.34360445397240774, 0.35289303745542255, 0.33926858220781597, 0.339822028364454, 0.3496383513723101, 0.33707995074135916, 0.34568218673978535, 0.3575133851596287], "val_accuracy": [0.2226666659116745, 0.5503333210945129, 0.6840000152587891, 0.6430000066757202, 0.7440000176429749, 0.7696666717529297, 0.7009999752044678, 0.7789999842643738, 0.777999997138977, 0.7933333516120911, 0.8029999732971191, 0.8019999861717224, 0.8146666884422302, 0.815666675567627, 0.8206666707992554, 0.8240000009536743, 0.8423333168029785, 0.8360000252723694, 0.8346666693687439, 0.8399999737739563, 0.8320000171661377, 0.847000002861023, 0.8560000061988831, 0.8523333072662354, 0.8453333377838135, 0.8556666374206543, 0.8493333458900452, 0.8610000014305115, 0.8600000143051147, 0.8573333621025085, 0.859000027179718, 0.8573333621025085, 0.8473333120346069]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [9, 4, 3, 9, 2, 1, 0, 5, 8, 0, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [1, 3, 3, 3, 3, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [84, 19, 30, 73, 40, 57, 35, 9, 54, 64], [0, 0, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 0, 0, 0], [3, 3, 3, 4], [4, 0], [77, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8317142724990845, "mapping_values": [1, 4, 4, 3, 1, 1, 1, 1, 1, 0, 1, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.0779181213552738, 1.8849473554287226, 1.1691756296970306, 0.970455228022738, 0.789239006893683, 0.7433869434527245, 0.6875645477522035, 0.6849039975583766, 0.6413379910678407, 0.6533164371588857, 0.5931915267347392, 0.5627665846512507, 0.5625325383574435, 0.5360153869804122, 0.5149955804069927, 0.5024211291922963, 0.5120970554371331, 0.4821399094768409, 0.4545751357705224, 0.47638898664745183, 0.45434075588831074, 0.4388210175295925, 0.4169213032213893, 0.41356709286552834, 0.40030796585963496, 0.39937639300613165, 0.3992335838908454, 0.38290486864331313, 0.3816158412005435], "accuracy": [0.31184783577919006, 0.3793422281742096, 0.5869766473770142, 0.6473385095596313, 0.7058512568473816, 0.7218332886695862, 0.7467969655990601, 0.7512878179550171, 0.7576277852058411, 0.7605336308479309, 0.7774402499198914, 0.7930260300636292, 0.7975168228149414, 0.8006868362426758, 0.8096684813499451, 0.8148196935653687, 0.8053097128868103, 0.8231409192085266, 0.8334434032440186, 0.8222163319587708, 0.8345000743865967, 0.8389908671379089, 0.8459912538528442, 0.8471800088882446, 0.8494254350662231, 0.8532558679580688, 0.8499537706375122, 0.8589354157447815, 0.8602562546730042], "val_loss": [1.8904410770961217, 1.1673197065080916, 0.6726456710270473, 0.6952601671218872, 0.5742800576346261, 0.5297539063862392, 0.5861106429781232, 0.4827998876571655, 0.46905274050576345, 0.4872359037399292, 0.4444950989314488, 0.4885657685143607, 0.42224161114011494, 0.41726837839399067, 0.41521428312574116, 0.38601759501865934, 0.38901110206331524, 0.3814286249024527, 0.3893644298825945, 0.39706947973796297, 0.3693759526525225, 0.35822478362492155, 0.3549468772751944, 0.35127969299043926, 0.35490440470831736, 0.34371042251586914, 0.3443900261606489, 0.3465632200241089, 0.33637568780354093], "val_accuracy": [0.22499999403953552, 0.593999981880188, 0.7059999704360962, 0.6746666431427002, 0.7210000157356262, 0.7766666412353516, 0.7440000176429749, 0.7853333353996277, 0.7960000038146973, 0.7776666879653931, 0.8009999990463257, 0.7789999842643738, 0.812666654586792, 0.8173333406448364, 0.8209999799728394, 0.8353333473205566, 0.8379999995231628, 0.8373333215713501, 0.8343333601951599, 0.8256666660308838, 0.8420000076293945, 0.8516666889190674, 0.8566666841506958, 0.8583333492279053, 0.8476666808128357, 0.8560000061988831, 0.8526666760444641, 0.8573333621025085, 0.8579999804496765]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [7, 6, 2, 6, 2, 3, 0, 6, 8, 4, 2, 5, 2, 9, 2, 5, 8, 2, 4, 6, 9, 3, 9, 9], [1, 3, 2, 2, 0, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [74, 19, 30, 73, 40, 57, 35, 9, 54, 64], [0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 1, 0, 0], [9, 9, 3, 4], [5, 0], [53, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8302857279777527, "mapping_values": [1, 4, 4, 3, 1, 1, 36, 36, 24, 12, 5, 1, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, beta))), tf.math.add(beta, tf.math.negative(beta))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), alpha)), tf.math.add(beta, tf.math.square(grad)))))), tf.math.add(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.square(tf.math.add(beta, grad)), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.divide_no_nan(tf.math.add(beta, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad)))))), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))))))), grad), tf.math.add(beta, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.0776487134309445, 1.887942913469464, 1.1913578373770815, 0.8830080658311558, 0.7863170306885074, 0.744486872184042, 0.6664140373015716, 0.6702717626571907, 0.6278000266922621, 0.619160163435623, 0.5928171068733048, 0.5587081727712634, 0.5482802099327228, 0.5381641875499307, 0.516108648478788, 0.4988831165814365, 0.4922664520164538, 0.4830795126489723, 0.4570044629672389, 0.4906654739975063, 0.45644359863933365, 0.43725230544707117, 0.4162434624320307, 0.41522211594163405, 0.4094808054889875, 0.40039522579994496, 0.40355780061760976, 0.3854470788062666, 0.38170677496693817, 0.360563854480133, 0.3879573254686982, 0.35242192067128164, 0.3533719154184269, 0.3447933349359336, 0.34159977692166466, 0.33941433095834384, 0.32904004025626193, 0.32108651908349994, 0.324454956783075, 0.3148658256158538, 0.2945923316653504, 0.3050125167826777], "accuracy": [0.31184783577919006, 0.3778893053531647, 0.5812970399856567, 0.6695284843444824, 0.7053229212760925, 0.7217012047767639, 0.7563069462776184, 0.7495707273483276, 0.7684586048126221, 0.767401933670044, 0.7728173136711121, 0.7910447716712952, 0.7988376617431641, 0.7987055778503418, 0.8101968169212341, 0.8210275769233704, 0.819442629814148, 0.822348415851593, 0.8301413059234619, 0.8201030492782593, 0.8341038227081299, 0.8413683772087097, 0.8450667262077332, 0.8477083444595337, 0.8429533839225769, 0.8507462739944458, 0.8504821062088013, 0.8549728989601135, 0.859199583530426, 0.8663320541381836, 0.8506141901016235, 0.867520809173584, 0.8693699836730957, 0.869502067565918, 0.8728041052818298, 0.8693699836730957, 0.8772949576377869, 0.8803328275680542, 0.8774270415306091, 0.8803328275680542, 0.885219931602478, 0.8800686597824097], "val_loss": [1.8899758883884974, 1.190783909388951, 0.7450734036309379, 0.6502768482480731, 0.6248727696282523, 0.5258328403745379, 0.543663467679705, 0.47664953981127056, 0.4821611302239554, 0.46165125710623606, 0.4464164972305298, 0.4483177661895752, 0.40745910576411654, 0.4307200142315456, 0.4005507911954607, 0.3847239443234035, 0.38308803524289814, 0.38739635263170513, 0.38259107725960867, 0.41804890973227365, 0.38089856931141447, 0.3655115876879011, 0.3580802934510367, 0.3553462624549866, 0.3698022961616516, 0.3455707771437509, 0.3567299246788025, 0.33990987709590365, 0.3386609809739249, 0.36652638231004986, 0.33624595403671265, 0.36442627225603375, 0.3516441753932408, 0.3287743330001831, 0.365009035382952, 0.3501474857330322, 0.33477459635053364, 0.3573654123714992, 0.3324012926646641, 0.32603804554258076, 0.32564943177359446, 0.32509844643729074], "val_accuracy": [0.22366666793823242, 0.5893333554267883, 0.6713333129882812, 0.7226666808128357, 0.7250000238418579, 0.7766666412353516, 0.7713333368301392, 0.7946666479110718, 0.7879999876022339, 0.7983333468437195, 0.7940000295639038, 0.7983333468437195, 0.8256666660308838, 0.8109999895095825, 0.8306666612625122, 0.8403333425521851, 0.8453333377838135, 0.8360000252723694, 0.8426666855812073, 0.8103333115577698, 0.8389999866485596, 0.8456666469573975, 0.8516666889190674, 0.8493333458900452, 0.8389999866485596, 0.8543333411216736, 0.8483333587646484, 0.8603333234786987, 0.859666645526886, 0.8479999899864197, 0.8613333106040955, 0.846666693687439, 0.8489999771118164, 0.8603333234786987, 0.8500000238418579, 0.8643333315849304, 0.8676666617393494, 0.8539999723434448, 0.8603333234786987, 0.8659999966621399, 0.8676666617393494, 0.8636666536331177]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [7, 6, 2, 6, 2, 3, 0, 2, 8, 4, 6, 5, 2, 9, 2, 5, 1, 2, 4, 6, 9, 6, 9, 9], [1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [74, 89, 32, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 1, 0, 0], [0, 3, 3, 4], [5, 0], [77, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8248571157455444, "mapping_values": [1, 4, 4, 3, 1, 1, 37, 37, 24, 13, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, grad))), tf.math.add(beta, tf.math.negative(grad))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), grad)), tf.math.add(beta, grad)))), grad))), tf.math.square(tf.math.add(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, grad), grad)))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)), tf.math.divide_no_nan(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.0626936195045023, 1.6499575046484638, 1.4414074423605692, 1.115147171349904, 0.8936078365232336, 0.839489140735405, 0.7443223320623793, 0.6904913555078377, 0.6953862959037068, 0.6826752311423502, 0.6273422242785489, 0.6018389909967471, 0.5947635670253677, 0.5475143785127764, 0.5733419732646919, 0.5248741597279645, 0.5400299515391637, 0.5329902209956585, 0.49829724774683753, 0.5016011984167853, 0.48831934581154357, 0.4878599026798021, 0.4776656713113809, 0.4761232425665512, 0.4386145618644924, 0.4630380787979799, 0.43546163294183393, 0.43941213356080294, 0.4389909994781702, 0.42075177094624927, 0.4174634056273327], "accuracy": [0.3078853487968445, 0.4319112300872803, 0.4962356388568878, 0.5963544845581055, 0.6705851554870605, 0.6827367544174194, 0.7172104120254517, 0.7428345084190369, 0.7343811988830566, 0.7423061728477478, 0.7652885913848877, 0.7753269076347351, 0.7812706232070923, 0.7902522683143616, 0.7848368883132935, 0.8033285140991211, 0.7954035401344299, 0.8020076751708984, 0.8109893202781677, 0.8124422430992126, 0.8181217908859253, 0.8168009519577026, 0.8182538747787476, 0.8206313848495483, 0.8387266993522644, 0.8227446675300598, 0.8363492488861084, 0.8338396549224854, 0.8396512866020203, 0.8469158411026001, 0.8405758738517761], "val_loss": [1.3363824231284005, 1.5497923237936837, 0.9424450738089425, 0.7282428571156093, 0.7251311881201608, 0.598409720829555, 0.5470307213919503, 0.5483104501451764, 0.498653735433306, 0.4882463216781616, 0.46575117111206055, 0.46551757199423655, 0.4639474153518677, 0.498816898890904, 0.4288966400282724, 0.43849953583308626, 0.4662363188607352, 0.3922790799822126, 0.43185943365097046, 0.43457571949277607, 0.3994796020644052, 0.3788501705442156, 0.38737015213285175, 0.3792109659739903, 0.4521786485399519, 0.36384389230183195, 0.4395594596862793, 0.3856032150132315, 0.4047870295388358, 0.36906146151678904, 0.36215631450925556], "val_accuracy": [0.5243333578109741, 0.38499999046325684, 0.5913333296775818, 0.7126666903495789, 0.6669999957084656, 0.7160000205039978, 0.7549999952316284, 0.7513333559036255, 0.7773333191871643, 0.7829999923706055, 0.7900000214576721, 0.793666660785675, 0.7986666560173035, 0.7673333287239075, 0.8183333277702332, 0.8053333163261414, 0.7853333353996277, 0.8386666774749756, 0.8090000152587891, 0.8026666641235352, 0.8263333439826965, 0.8463333249092102, 0.8306666612625122, 0.8346666693687439, 0.7996666431427002, 0.8493333458900452, 0.8119999766349792, 0.8379999995231628, 0.8389999866485596, 0.8426666855812073, 0.8479999899864197]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [9, 4, 3, 9, 2, 1, 0, 5, 8, 0, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [2, 2, 2, 2, 0, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [84, 19, 30, 73, 40, 57, 35, 9, 54, 64], [0, 0, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 1, 1, 0, 0], [0, 9, 3, 4], [5, 0], [48, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8102856874465942, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.0466555205979886, 1.7920042172776962, 1.6079913136383106, 1.278829056982666, 1.0478681345436913, 0.8972034699739545, 0.8339809985633823, 0.7782064912939871, 0.75440188098845, 0.748981149606638, 0.7134862664416324, 0.7177219974634087, 0.6514920120178795, 0.6386037476625519, 0.6356193829426723, 0.6000695063957308, 0.5933257350359831, 0.5901177358539145, 0.5444925600401305, 0.5527380638591145, 0.5567346236110915, 0.5411690802244131, 0.5343430035181365, 0.518224683128816, 0.49742828245569826, 0.5143017180174444, 0.49289844161594043, 0.5021026021201991, 0.4901768128790986, 0.47703190387405375, 0.45581384793784024], "accuracy": [0.2989037036895752, 0.42226919531822205, 0.4451195299625397, 0.5406154990196228, 0.5869766473770142, 0.6571126580238342, 0.6804913282394409, 0.6988508701324463, 0.7162858247756958, 0.7157574892044067, 0.7297582626342773, 0.7281733155250549, 0.7565711140632629, 0.7473253011703491, 0.7549861073493958, 0.7714964747428894, 0.7737419009208679, 0.780610203742981, 0.7909126877784729, 0.7810064554214478, 0.7869502305984497, 0.7861577272415161, 0.7952714562416077, 0.8094043135643005, 0.8127063512802124, 0.8050455451011658, 0.8113855719566345, 0.8038568496704102, 0.8131026029586792, 0.8195747137069702, 0.8334434032440186], "val_loss": [1.545100484575544, 1.6648040499005998, 1.1072209903172083, 1.1318934985569544, 0.7722760098321098, 0.6510392257145473, 0.6824571916035244, 0.5829571485519409, 0.6792410952704293, 0.5610865695135934, 0.556904673576355, 0.5449060882840838, 0.5249569245747158, 0.49528675419943674, 0.4782184192112514, 0.46853223868778776, 0.4670154026576451, 0.4558261973517282, 0.46101161411830355, 0.475041321345738, 0.45024657249450684, 0.4221327645438058, 0.4356334550040109, 0.4230468528611319, 0.42390014444078716, 0.40232969181878225, 0.45445527349199566, 0.4301017182213919, 0.4230437789644514, 0.38708791562489103, 0.410105151789529], "val_accuracy": [0.42366665601730347, 0.4386666715145111, 0.5809999704360962, 0.4663333296775818, 0.6620000004768372, 0.699999988079071, 0.6930000185966492, 0.7269999980926514, 0.6959999799728394, 0.7570000290870667, 0.753333330154419, 0.753000020980835, 0.7559999823570251, 0.7710000276565552, 0.7919999957084656, 0.7923333048820496, 0.7919999957084656, 0.7950000166893005, 0.7723333239555359, 0.7636666893959045, 0.7919999957084656, 0.8140000104904175, 0.812666654586792, 0.8176666498184204, 0.8153333067893982, 0.8353333473205566, 0.8040000200271606, 0.8053333163261414, 0.8096666932106018, 0.8353333473205566, 0.824999988079071]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [97, 66, 89, 50, 85, 46], [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [6, 6, 2, 8, 2, 3, 9, 6, 8, 4, 4, 5, 2, 9, 2, 5, 8, 2, 4, 6, 9, 3, 9, 9], [1, 3, 2, 2, 1, 1, 3, 1, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [92, 19, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0], [9, 9, 3, 4], [4, 0], [53, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.14971429109573364, "mapping_values": [1, 4, 4, 3, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [4.600164716458828, 2.3507231190346016, 2.299545492966571, 2.1664762294460926, 2.284191888415692, 2.3756802776438954, 2.3396125745149794, 2.3422400606243823, 2.3290891553810513], "accuracy": [0.1776515692472458, 0.09628847241401672, 0.11834631860256195, 0.18095363676548004, 0.16021661460399628, 0.12230881303548813, 0.09628847241401672, 0.0956280529499054, 0.10157178342342377], "val_loss": [2.0177550315856934, 1.98097596849714, 1.8325907843453544, 1.8094255583626884, 2.080021721976144, 1.959662573678153, 1.9937084061758858, 1.9981538908822196, 2.005628858293806], "val_accuracy": [0.10366666316986084, 0.10533333569765091, 0.1733333319425583, 0.2029999941587448, 0.0949999988079071, 0.1316666603088379, 0.10233332961797714, 0.10366666316986084, 0.10199999809265137]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 5, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [7, 6, 5, 6, 2, 3, 0, 6, 2, 4, 5, 5, 2, 2, 2, 5, 8, 2, 4, 6, 9, 3, 9, 3], [1, 3, 2, 2, 0, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [74, 19, 30, 73, 40, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 1, 0, 0], [1, 9, 3, 4], [5, 0], [53, 2], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 13, 13, 7, 6, 1, 1, 0, 0, 0, 0, 7, 3, 4, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.square(alpha), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, beta))), tf.math.add(beta, tf.math.multiply(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.pow(tf.math.multiply(beta, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 1, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [9, 4, 3, 9, 2, 1, 0, 5, 8, 0, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [1, 3, 3, 3, 3, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [84, 19, 30, 73, 40, 57, 35, 9, 54, 64], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0], [3, 3, 3, 4, 4, 8], [4, 5], [77, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 1, 0, 1, 12, 7, 6, 1, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, grad), tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.sqrt(sigma)), sigma)))), sigma)))), sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07594769448041916, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [7, 4, 3, 2, 0, 1, 6, 2, 3, 3, 3, 3, 8, 9, 6, 1, 2, 2, 4, 6, 5, 8, 9, 9, 8, 8, 2, 9, 2, 5], [2, 2, 2, 2, 0, 1, 3, 2, 1, 3, 3, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [92, 19, 30, 73, 40, 57, 35, 9, 54, 64], [0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 1, 0, 0], [3, 3, 3, 4], [4, 0], [77, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 22, 22, 11, 11, 1, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(grad)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, beta), beta), tf.math.multiply(beta, tf.math.add(tf.math.negative(beta), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, grad))), beta), alpha), grad), grad)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 4, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [7, 6, 2, 6, 2, 3, 0, 6, 2, 4, 2, 5, 2, 9, 2, 5, 8, 2, 4, 6, 9, 3, 9, 9], [1, 3, 1, 2, 0, 1, 3, 3, 1, 3, 1, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [18, 19, 30, 73, 40, 57, 35, 9, 54, 64], [0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 1, 0, 0], [9, 9, 3, 4], [5, 0], [53, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 2, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07594769448041916, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [7, 6, 2, 6, 2, 3, 0, 6, 8, 4, 2, 5, 2, 9, 2, 5, 8, 5, 4, 2, 9, 3, 9, 9], [1, 3, 2, 2, 0, 2, 3, 3, 1, 1, 1, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [74, 19, 30, 73, 40, 57, 35, 9, 54, 64], [0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 1, 0, 0], [6, 9, 3, 4], [5, 0], [13, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 9, 5, 3, 35, 35, 23, 12, 4, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.add(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(alpha, grad), tf.math.negative(tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))), alpha))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.negative(tf.math.add(beta, grad)), tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, beta))), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta))))))))), grad))), tf.math.add(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.square(tf.math.add(beta, grad)), tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(tf.math.add(beta, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, alpha)))))))))))), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 6, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [6, 6, 2, 8, 2, 3, 4, 6, 5, 4, 2, 5, 2, 9, 2, 5, 8, 2, 4, 6, 9, 3, 9, 9], [3, 3, 2, 1, 0, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [84, 19, 0, 73, 40, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0], [9, 9, 3, 4], [5, 0], [53, 2], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 28, 28, 17, 11, 2, 1, 0, 0, 0, 0, 7, 3, 4, 1], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(grad)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.add(grad, tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, tf.math.square(tf.math.pow(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(alpha, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))))))))))), tf.math.add(beta, grad))), grad), tf.math.add(tf.math.add(beta, alpha), grad))))))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.pow(tf.math.multiply(beta, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [9, 4, 3, 6, 0, 1, 6, 2, 3, 3, 3, 3, 0, 9, 2, 5, 8, 2, 2, 6, 5, 8, 9, 9, 8, 8, 2, 9], [2, 5, 3, 2, 3, 1, 3, 3, 3, 3, 3, 3, 3, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [92, 19, 30, 73, 40, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 1, 0, 0], [9, 9, 3, 4], [5, 0], [53, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [0, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 3, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302655430927158, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 1, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [1, 66, 89, 50, 85, 46], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [7, 6, 2, 6, 2, 3, 0, 6, 8, 4, 2, 5, 2, 9, 2, 5, 8, 2, 2, 6, 9, 3, 9, 9], [1, 3, 2, 2, 1, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [77, 15, 2, 73, 40, 57, 35, 9, 54, 64], [0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0], [9, 9, 3, 4], [4, 0], [53, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 2, 28, 28, 17, 11, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(beta, beta)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.negative(tf.math.divide_no_nan(tf.math.sqrt(tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad))), grad)), tf.math.square(tf.math.add(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, alpha), tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))))))))))))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.4291989189463762e+17, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.18293488025665283, 0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [2, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [7, 0, 2, 6, 2, 3, 0, 6, 8, 2, 2, 5, 5, 9, 2, 5, 8, 2, 4, 6, 9, 3, 2, 9], [1, 3, 2, 2, 0, 1, 3, 2, 1, 3, 3, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [84, 19, 30, 73, 93, 57, 35, 9, 54, 64], [0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0], [9, 9, 3, 4], [5, 0], [53, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 16, 16, 9, 7, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.add(grad, beta))), beta)))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.divide_no_nan(tf.math.sqrt(alpha), tf.math.add(beta, grad)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08189142495393753, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [1, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [9, 4, 3, 9, 2, 1, 0, 5, 8, 0, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [1, 2, 2, 2, 0, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [84, 19, 30, 73, 40, 57, 35, 9, 54, 64], [0, 0, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 1, 0, 0], [4, 9, 3, 4], [5, 0], [77, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.04171428456902504, "mapping_values": [1, 4, 4, 3, 1, 1, 1, 1, 1, 0, 1, 3, 2, 2, 0, 1, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3012394655996293, 2.302117822192616, 2.3018243401010574, 2.3031774954379527, 2.3015944399712125, 2.3038858143944134], "accuracy": [0.09576013684272766, 0.09430722147226334, 0.09259014576673508, 0.08440100401639938, 0.09615638852119446, 0.0870426595211029], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 4, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [1, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1], [7, 6, 2, 6, 2, 3, 0, 6, 2, 4, 8, 5, 2, 3, 2, 5, 8, 2, 0, 6, 9, 3, 9, 9, 1, 4, 8, 2, 8, 2], [1, 3, 2, 2, 0, 2, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [74, 19, 30, 73, 40, 57, 35, 9, 54, 64], [0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 1, 0, 0], [8, 9, 3, 4], [5, 0], [68, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.04171428456902504, "mapping_values": [1, 5, 5, 3, 2, 2, 1, 1, 0, 1, 0, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3012394655996293, 2.302117822192616, 2.3018243401010574, 2.3031774954379527, 2.3015944399712125, 2.3038858143944134], "accuracy": [0.09576013684272766, 0.09430722147226334, 0.09259014576673508, 0.08440100401639938, 0.09615638852119446, 0.0870426595211029], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 5, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [19, 66, 89, 50, 85, 46], [0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [6, 4, 2, 8, 2, 3, 9, 6, 8, 4, 2, 5, 2, 9, 2, 5, 8, 2, 4, 6, 9, 3, 9, 9], [3, 3, 2, 2, 0, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [84, 19, 71, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0], [9, 9, 3, 4], [4, 0], [53, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.04171428456902504, "mapping_values": [1, 4, 4, 3, 1, 1, 25, 25, 16, 9, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, beta))), tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(beta, tf.math.add(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.add(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, grad))))), alpha))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.30124327554175, 2.3021309708938023, 2.301846908713691, 2.3032092229014043, 2.3016355556661363, 2.303936233169068], "accuracy": [0.09576013684272766, 0.09430722147226334, 0.09259014576673508, 0.08440100401639938, 0.09602430462837219, 0.08691058307886124], "val_loss": [1.97094760622297, 1.9709561892918177, 1.9709647042410714, 1.970973219190325, 1.9709818022591727, 1.9709902490888322], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 3, 4, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [9, 4, 3, 6, 0, 1, 6, 2, 3, 3, 3, 3, 0, 9, 2, 5, 8, 2, 2, 6, 5, 8, 9, 9, 8, 8, 2, 9], [1, 3, 2, 2, 0, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [74, 19, 30, 73, 40, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 1, 0, 0], [9, 9, 3, 4], [5, 0], [53, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.03999999910593033, "mapping_values": [1, 5, 5, 2, 3, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.301388783619278, 2.3027005974705728, 2.302887439507346, 2.304966674174111, 2.3039874774180604, 2.3074365195943347], "accuracy": [0.09602430462837219, 0.09338264167308807, 0.09008057415485382, 0.08268392831087112, 0.09113723784685135, 0.08294808864593506], "val_loss": [1.9712067331586565, 1.9716004644121443, 1.9719929695129395, 1.9724762099129813, 1.972989627293178, 1.973609447479248], "val_accuracy": [0.03733333200216293, 0.03466666489839554, 0.03166666626930237, 0.027666667476296425, 0.024666666984558105, 0.022333333268761635]}}]