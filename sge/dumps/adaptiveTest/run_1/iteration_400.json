[{"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [4, 6, 3, 3, 0, 2, 3, 9, 8, 3, 7, 2, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [1, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0, 0, 1, 5, 0, 2, 1, 2, 2, 0, 5, 1], [85, 77, 30, 73, 40, 57, 35, 9, 54, 64], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [0, 1, 8, 4], [4, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8399999737739563, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 4, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, grad))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.0979808956136665, 1.1780953067027031, 0.8411049439119483, 0.7542007282551458, 0.6897909016877496, 0.6443082465786645, 0.5936756333843781, 0.5495695818716021, 0.5266655332668031, 0.5074737244955443, 0.48093426610579215, 0.4618984062823448, 0.4389812235921334, 0.4265608948495142, 0.416277533079954, 0.3994500351273357, 0.4001951649629555, 0.37833774619256155, 0.36536997646042196, 0.3637837537992049, 0.35612881741802754, 0.3461812180952232, 0.3328712076881637, 0.3242081514974359, 0.3189948822182592, 0.3110899964202082, 0.298978395725616, 0.2896471781312451, 0.2910272005786513, 0.27738115846866696, 0.27468504301938934, 0.2642693462554159], "accuracy": [0.2876766622066498, 0.5872408151626587, 0.6925109028816223, 0.71100252866745, 0.7371549606323242, 0.7569673657417297, 0.7736098170280457, 0.7940827012062073, 0.8010830879211426, 0.8070268034934998, 0.819442629814148, 0.8313300609588623, 0.8345000743865967, 0.8405758738517761, 0.8451988101005554, 0.8490291833877563, 0.8474441766738892, 0.8590674996376038, 0.8632941246032715, 0.8631620407104492, 0.8618412613868713, 0.8698983192443848, 0.8759741187095642, 0.8812574148178101, 0.8776912093162537, 0.882710337638855, 0.8828424215316772, 0.8912957310676575, 0.8878615498542786, 0.8945978283882141, 0.894069492816925, 0.9006736278533936], "val_loss": [1.018531220299857, 0.7052953924451556, 0.5663650206157139, 0.5399379559925624, 0.5103718893868583, 0.47896506105150494, 0.4553267274584089, 0.42687995944704327, 0.41052939210619244, 0.40070862429482595, 0.3843962720462254, 0.3751861538205828, 0.3759087920188904, 0.3692739520754133, 0.36135626690728323, 0.3545750209263393, 0.3470672369003296, 0.34191923482077463, 0.3334113785198757, 0.34273710421153475, 0.3285615529332842, 0.32389292546681, 0.32676561389650616, 0.3210319536072867, 0.3250660811151777, 0.3134987013680594, 0.3196021829332624, 0.32112238236836027, 0.32251369101660593, 0.3169355647904532, 0.33800695623670307, 0.3136650579316275], "val_accuracy": [0.6353333592414856, 0.7093333601951599, 0.7576666474342346, 0.7639999985694885, 0.777999997138977, 0.7873333096504211, 0.8043333292007446, 0.8206666707992554, 0.828000009059906, 0.8339999914169312, 0.8399999737739563, 0.8450000286102295, 0.8396666646003723, 0.8450000286102295, 0.8493333458900452, 0.8566666841506958, 0.8536666631698608, 0.8586666584014893, 0.8636666536331177, 0.8569999933242798, 0.8690000176429749, 0.8636666536331177, 0.8693333268165588, 0.8656666874885559, 0.8686666488647461, 0.8730000257492065, 0.8763333559036255, 0.871666669845581, 0.8733333349227905, 0.8713333606719971, 0.8713333606719971, 0.875333309173584]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 6, 1, 0, 2, 2, 2, 9, 2, 4, 7, 8, 7, 4, 5, 9, 8, 2, 8, 8, 5, 7, 6, 1, 6, 1, 6], [1, 3, 3, 3, 3, 3, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3], [85, 77, 30, 73, 40], [0, 0, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [8, 1, 8, 4], [4, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8371428847312927, "mapping_values": [1, 4, 4, 2, 2, 1, 26, 26, 16, 10, 2, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, tf.math.negative(alpha)), tf.math.add(tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)))), tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(grad, tf.math.pow(grad, tf.math.add(beta, beta)))))), tf.math.square(tf.math.add(beta, alpha))), tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.0979869613526536, 1.1782597569804607, 0.8417750303110095, 0.7555825117084376, 0.6900148628772352, 0.6452341155920204, 0.5944852571697787, 0.5502939383981408, 0.5278274751909342, 0.5080061475905634, 0.47993199405432724, 0.4603882897578809, 0.43770290693712743, 0.4225079613102898, 0.4102945307880077, 0.3958364991487655, 0.39595750247041833, 0.37093944941072765, 0.3597759209556539, 0.35634611885718637, 0.3465850250304666, 0.33995166613819133, 0.33529835897288096, 0.3215509326529462, 0.31235840139198834, 0.313170515051009, 0.29890370492953444, 0.2884941384769025, 0.28453657682529926, 0.27719952920093793, 0.27463604238810807, 0.27126048834190675, 0.25590427729431914, 0.2542340984835428], "accuracy": [0.2876766622066498, 0.5868445634841919, 0.6927750706672668, 0.7099458575248718, 0.735569953918457, 0.7604015469551086, 0.7724210619926453, 0.7909126877784729, 0.800818920135498, 0.8090080618858337, 0.8211596608161926, 0.8334434032440186, 0.8335754871368408, 0.841500461101532, 0.8454629778862, 0.8475762605667114, 0.8510104417800903, 0.8626337051391602, 0.8665962219238281, 0.8706908226013184, 0.8659358024597168, 0.8755778670310974, 0.8758420348167419, 0.8821820020675659, 0.8838990926742554, 0.878879964351654, 0.8853520154953003, 0.889050304889679, 0.8922203183174133, 0.8969752788543701, 0.8973715305328369, 0.8943336606025696, 0.9031832218170166, 0.9013340473175049], "val_loss": [1.018538577216012, 0.704933898789542, 0.5674238545554025, 0.5431927783148629, 0.5108033759253365, 0.4796493223735264, 0.4563068832669939, 0.4270320449556623, 0.41161138670785086, 0.402192873614175, 0.3848132576261248, 0.37159046104976107, 0.37617822204317364, 0.37279337644577026, 0.3624735644885472, 0.3477198396410261, 0.33630251032965525, 0.33300117935453144, 0.32709976605006624, 0.3356995327132089, 0.328217157295772, 0.32521203586033415, 0.3247257385935102, 0.3143579363822937, 0.3175477385520935, 0.3156548483031137, 0.32127634968076435, 0.3167403680937631, 0.3264096805027553, 0.3165987730026245, 0.3483309916087559, 0.3135132704462324, 0.3244741473879133, 0.30585417577198576], "val_accuracy": [0.6349999904632568, 0.7110000252723694, 0.7566666603088379, 0.7596666812896729, 0.7786666750907898, 0.7893333435058594, 0.8013333082199097, 0.8180000185966492, 0.8206666707992554, 0.8309999704360962, 0.840666651725769, 0.8479999899864197, 0.8410000205039978, 0.8456666469573975, 0.8513333201408386, 0.8586666584014893, 0.8616666793823242, 0.8663333058357239, 0.8669999837875366, 0.862333357334137, 0.8693333268165588, 0.8686666488647461, 0.8726666569709778, 0.8706666827201843, 0.8713333606719971, 0.8696666955947876, 0.8740000128746033, 0.875, 0.878000020980835, 0.8703333139419556, 0.871666669845581, 0.8769999742507935, 0.8733333349227905, 0.878000020980835]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [27, 32, 5, 49, 25], [1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0], [4, 2, 1, 2, 2, 2, 2, 9, 2, 4, 7, 8, 6, 5, 5, 9, 8, 2, 8, 6, 5, 7, 6, 1, 6, 1, 5, 4, 8, 4, 9, 8, 5, 5, 1, 3, 1, 5, 2, 0, 3, 8, 9], [1, 3, 3, 3, 3, 3, 3, 2, 1, 3, 4, 3, 1, 4, 1, 3, 2, 4, 3, 4, 3, 1, 3], [85, 77, 30, 73, 40], [0, 0, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [8, 1, 8, 4], [4, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.7862856984138489, "mapping_values": [1, 4, 4, 2, 2, 1, 3, 3, 1, 2, 0, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, alpha), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.278944959540991, 2.0934622678081545, 1.5754120129761742, 1.3247499012943933, 0.9972349976221049, 0.9233831990239108, 0.8239023113814422, 0.7949486816516721, 0.7468701080796647, 0.7354447812121447, 0.7068009948088052, 0.6829624380480895, 0.6586753404088512, 0.6355013191078034, 0.6133859065765906, 0.5969536091515795, 0.5822418474360637, 0.564752425933007, 0.5522735631303733, 0.528546876572599, 0.5132122452799764, 0.5060125589370728, 0.48521309418291575, 0.4832329974316524, 0.4693344358313967, 0.46313554137106727, 0.4508900882632206, 0.4335519868888875, 0.4327529911328269, 0.4199130865899626, 0.41164177262535845, 0.3975107314572153, 0.38849865613187134, 0.38627084233914827, 0.3760644375191483, 0.3641916635982459, 0.35873005697126037, 0.35860501352774865, 0.3467340378390642, 0.3446208436050435, 0.32518862322289727, 0.3181358036261508, 0.31955949536419787, 0.30325890727771226, 0.3098110975196978, 0.2961281024154781, 0.29135043063514565, 0.28620183786711656, 0.28535807665312973, 0.27443444859932725, 0.27156140174155285], "accuracy": [0.15110288560390472, 0.3781534731388092, 0.47589486837387085, 0.5567296147346497, 0.6441685557365417, 0.6674151420593262, 0.696209192276001, 0.7008321285247803, 0.7135120630264282, 0.7181349992752075, 0.7322678565979004, 0.7388719916343689, 0.746268630027771, 0.7581561207771301, 0.7685906887054443, 0.7753269076347351, 0.7737419009208679, 0.7798177003860474, 0.7936864495277405, 0.7956677079200745, 0.8017435073852539, 0.809140145778656, 0.8177255392074585, 0.8117818236351013, 0.8245938420295715, 0.8251221776008606, 0.8338396549224854, 0.842028796672821, 0.8339717388153076, 0.839519202709198, 0.8436138033866882, 0.8529917001724243, 0.8541803956031799, 0.8548408150672913, 0.8580108284950256, 0.8625016212463379, 0.8639545440673828, 0.8676528930664062, 0.8722757697105408, 0.8701624870300293, 0.8772949576377869, 0.8803328275680542, 0.8732003569602966, 0.8813894987106323, 0.8821820020675659, 0.8860124349594116, 0.8885219693183899, 0.8927486538887024, 0.8948619961738586, 0.8965790271759033, 0.8986923694610596], "val_loss": [1.8897131511143275, 1.5160128048488073, 0.8921684878213065, 0.7162591218948364, 0.7052114861352103, 0.627615111214774, 0.599031925201416, 0.567159720829555, 0.5694711548941476, 0.5608031068529401, 0.5339519807270595, 0.5159466436931065, 0.49830998693193707, 0.481351511819022, 0.4700261013848441, 0.4527550084250314, 0.4339698212487357, 0.4353609425680978, 0.42217769793101717, 0.41644333941595896, 0.40877169370651245, 0.4074498840740749, 0.39541371379579815, 0.38339763028281076, 0.38653465679713656, 0.3681678942271641, 0.3660809908594404, 0.37110161781311035, 0.36098166022981915, 0.35325063126427786, 0.34722457613263813, 0.3499847650527954, 0.34736136879239765, 0.34553886311394827, 0.3471276674951826, 0.34647262947899954, 0.3381876860346113, 0.3349809306008475, 0.3368013416017805, 0.3260555011885507, 0.32431731905256, 0.32971061979021343, 0.3264936123575483, 0.32266380957194735, 0.3250191978045872, 0.32146494729178293, 0.3217196209090097, 0.3240501029150827, 0.3272571308272226, 0.31755047185080393, 0.31764765296663555], "val_accuracy": [0.4463333189487457, 0.5413333177566528, 0.6656666398048401, 0.7196666598320007, 0.7076666951179504, 0.737666666507721, 0.7210000157356262, 0.7516666650772095, 0.7393333315849304, 0.7603333592414856, 0.7620000243186951, 0.7696666717529297, 0.777999997138977, 0.7903333306312561, 0.7943333387374878, 0.8059999942779541, 0.8096666932106018, 0.8050000071525574, 0.8183333277702332, 0.8223333358764648, 0.8233333230018616, 0.8259999752044678, 0.8326666951179504, 0.8433333039283752, 0.8360000252723694, 0.8473333120346069, 0.8463333249092102, 0.8479999899864197, 0.8516666889190674, 0.8566666841506958, 0.859000027179718, 0.8606666922569275, 0.859333336353302, 0.856333315372467, 0.8566666841506958, 0.862666666507721, 0.8629999756813049, 0.8619999885559082, 0.8650000095367432, 0.8666666746139526, 0.8653333187103271, 0.8659999966621399, 0.8666666746139526, 0.8686666488647461, 0.8709999918937683, 0.8733333349227905, 0.8693333268165588, 0.8679999709129333, 0.8703333139419556, 0.8693333268165588, 0.8706666827201843]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 5, 2, 2, 8, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 37, 40, 49, 25], [0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 6, 1, 3, 0, 2, 3, 9, 8, 3, 7, 2, 7, 9, 2, 9, 8, 2, 4, 6, 5, 8, 9, 9], [1, 3, 3, 3, 3, 5, 0, 3, 1, 4, 4, 0], [85, 7, 63], [1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [0, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.7120000123977661, "mapping_values": [1, 10, 10, 6, 4, 2, 23, 23, 14, 9, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(grad), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), alpha)), tf.math.add(alpha, tf.math.sqrt(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), grad), tf.math.sqrt(tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.multiply(tf.math.add(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(tf.math.add(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, alpha)))))))))), tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9537028469949302, 1.0330500985810533, 0.8241559528340879, 0.7108626905181672, 0.6221291334590325, 0.602306655518934, 0.7022628445808583, 1.2920657670131024, 1.79967492018173, NaN, NaN], "accuracy": [0.3354906737804413, 0.6379606127738953, 0.6892088055610657, 0.7269845604896545, 0.7623828053474426, 0.7775723338127136, 0.7643640041351318, 0.6659622192382812, 0.4974243938922882, 0.12336547672748566, 0.09998679161071777], "val_loss": [0.7927940743310111, 0.6315158605575562, 0.5600917339324951, 0.5070209673472813, 0.47502044269016813, 0.47433345658438547, 1.3669062001364571, 0.7130090168544224, 52.18639046805246, NaN, NaN], "val_accuracy": [0.6823333501815796, 0.731333315372467, 0.7426666617393494, 0.7676666378974915, 0.7963333129882812, 0.7996666431427002, 0.7559999823570251, 0.7419999837875366, 0.10466666519641876, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [9, 32, 5, 49, 25], [1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1], [4, 9, 3, 3, 0, 2, 3, 4, 8, 3, 7, 6, 2, 9, 2, 5, 8, 6, 4, 6, 5, 8, 9, 9, 6, 5, 2, 2, 3, 3, 6], [1, 2, 3, 3, 3, 3, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3], [85, 80, 63, 13, 48, 84, 18], [1, 0, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [8, 1, 8, 4], [4, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.7097142934799194, "mapping_values": [1, 4, 4, 2, 2, 1, 5, 5, 3, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(beta, alpha), beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.302214510074586, 2.2959426571711603, 2.2867031265889115, 2.275633078902515, 2.256060002455071, 2.2372443162061284, 2.2085926604229997, 2.1773678789742164, 2.1371730727416303, 2.0861272876446257, 2.018801046620743, 1.9328801507695381, 1.827142218494176, 1.71342151433627, 1.606720085424943, 1.5280259321583356, 1.4570218485895323, 1.3974636978303847, 1.3390349032557352, 1.309448151005226, 1.2752106323879566, 1.263383973795803, 1.2236987669485877, 1.1986323668736005, 1.1393511478596392, 1.0736067000790799, 1.0225637003478278, 1.0001114297300486, 0.947289928044027, 0.9242301350728852, 0.9169979802668764, 0.8979340637317502, 0.8963949275432467, 0.8827344083893081, 0.8749941876850675, 0.8593430601846682, 0.8395841910681311, 0.8280534847631997, 0.8107432638413209, 0.8014485034424914, 0.7961293319748252, 0.7886530013132278, 0.7779348651022251, 0.7560482596551202, 0.7486688640407048, 0.7486380017539057, 0.7439818324634601, 0.7465663592986396, 0.7357924415088679, 0.7333503287497639, 0.7180061573365645, 0.7214826653583443, 0.7008770280636344, 0.7015188629711309, 0.6947577545010198, 0.6971399293064268, 0.6865407461582189, 0.6727391975493778, 0.6855651296408516, 0.67463294158538, 0.6758350428336993, 0.6637306996088427, 0.6555846492612146, 0.6501504113771471, 0.6467162992472126, 0.6383020275493482, 0.640696284801197, 0.6246485626299179, 0.6315325507240965, 0.6261229568925343, 0.6293057064181227, 0.6233923995357856], "accuracy": [0.08994849026203156, 0.10487385839223862, 0.12957337498664856, 0.16602826118469238, 0.21965394914150238, 0.26363757252693176, 0.31026285886764526, 0.3465856611728668, 0.3646810054779053, 0.39043718576431274, 0.39743760228157043, 0.4161933660507202, 0.42847707867622375, 0.4443270266056061, 0.459780752658844, 0.4710077941417694, 0.4963677227497101, 0.5123497843742371, 0.5388984084129333, 0.5452384352684021, 0.5592392086982727, 0.570202112197876, 0.5753533244132996, 0.5879011750221252, 0.5976753234863281, 0.6181482076644897, 0.6367719173431396, 0.6477347612380981, 0.6627922058105469, 0.665830135345459, 0.6664905548095703, 0.6653017997741699, 0.6709813475608826, 0.6708492636680603, 0.6700568199157715, 0.6808875799179077, 0.6869634389877319, 0.6919825673103333, 0.6997754573822021, 0.7071720957756042, 0.7038700580596924, 0.7099458575248718, 0.707040011882782, 0.7168141603469849, 0.7131158113479614, 0.7189275026321411, 0.7162858247756958, 0.7113987803459167, 0.7156254053115845, 0.719852089881897, 0.72672039270401, 0.7284374833106995, 0.7318716049194336, 0.7358341217041016, 0.7415136694908142, 0.739400327205658, 0.7380794882774353, 0.7416457533836365, 0.7421740889549255, 0.7445515990257263, 0.7401928305625916, 0.7449478507041931, 0.7457403540611267, 0.7508915662765503, 0.748249888420105, 0.7549861073493958, 0.752212405204773, 0.7598732113838196, 0.7561748623847961, 0.7573636174201965, 0.7598732113838196, 0.7614582180976868], "val_loss": [1.9685232979910714, 1.9618971688406808, 1.9513137681143624, 1.937103203364781, 1.9194395882742745, 1.8982625007629395, 1.8726064818246024, 1.8399697712489538, 1.7975358963012695, 1.7420193127223425, 1.6695173467908586, 1.5766469410487585, 1.4645522662571497, 1.3436971391950334, 1.231954608644758, 1.1343654564448766, 1.043729645865304, 0.9591492584773472, 0.8900516373770577, 0.8408839872905186, 0.8030311209814889, 0.7650289194924491, 0.734056864465986, 0.7165543692452567, 0.7041376488549369, 0.6917098590305873, 0.7009783983230591, 0.6981332302093506, 0.6833039011274066, 0.6724549531936646, 0.6723531995500837, 0.6758254085268293, 0.6754905836922782, 0.6691178934914725, 0.6582217046192714, 0.6458229167120797, 0.6338212490081787, 0.6230342047555106, 0.6153400455202375, 0.6104794059480939, 0.6057320662907192, 0.5980829170772007, 0.5860646963119507, 0.5728604963847569, 0.563970821244376, 0.5602794885635376, 0.558571628161839, 0.5564327410289219, 0.5533844743456159, 0.5496822254998344, 0.5459059306553432, 0.5433477503912789, 0.5416818857192993, 0.5398988212857928, 0.5374050991875785, 0.5339223997933524, 0.5294350726263863, 0.5253260816846576, 0.5228553499494281, 0.5216959374291557, 0.5205639260155814, 0.5187817130770002, 0.5163576092038836, 0.5133026838302612, 0.5101800986698696, 0.5073256152016776, 0.5051612172807965, 0.503801805632455, 0.5033009563173566, 0.5031571388244629, 0.5026418822152274, 0.5010565178734916], "val_accuracy": [0.05366666615009308, 0.11033333092927933, 0.218666672706604, 0.33133333921432495, 0.3766666650772095, 0.39933332800865173, 0.4193333387374878, 0.4320000112056732, 0.44466665387153625, 0.46133333444595337, 0.48233333230018616, 0.5, 0.5183333158493042, 0.5346666574478149, 0.5463333129882812, 0.5770000219345093, 0.6076666712760925, 0.6460000276565552, 0.6679999828338623, 0.6823333501815796, 0.687333345413208, 0.6919999718666077, 0.6949999928474426, 0.6919999718666077, 0.7016666531562805, 0.7099999785423279, 0.7083333134651184, 0.7096666693687439, 0.7136666774749756, 0.7210000157356262, 0.7243333458900452, 0.7283333539962769, 0.7243333458900452, 0.7256666421890259, 0.7333333492279053, 0.7353333234786987, 0.7333333492279053, 0.737666666507721, 0.731333315372467, 0.7323333621025085, 0.734000027179718, 0.734333336353302, 0.7386666536331177, 0.7436666488647461, 0.7553333044052124, 0.7566666603088379, 0.7559999823570251, 0.7553333044052124, 0.7616666555404663, 0.765666663646698, 0.7673333287239075, 0.765333354473114, 0.7673333287239075, 0.7680000066757202, 0.7680000066757202, 0.7703333497047424, 0.7716666460037231, 0.7743333578109741, 0.7713333368301392, 0.7706666588783264, 0.7723333239555359, 0.7736666798591614, 0.7770000100135803, 0.7773333191871643, 0.7793333530426025, 0.7806666493415833, 0.7850000262260437, 0.7846666574478149, 0.7823333144187927, 0.781333327293396, 0.7793333530426025, 0.781000018119812]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 2, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 3, 3, 3, 0, 2, 0, 9, 3, 3, 7, 0, 3, 9, 2, 9, 8, 2, 4, 6, 5, 8, 9, 9], [1, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0], [85, 80, 63, 13, 48], [0, 0, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [0, 1, 8, 4], [4, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [3, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.27799999713897705, "mapping_values": [1, 4, 4, 2, 2, 0, 24, 24, 16, 8, 3, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, tf.math.negative(tf.math.add(grad, tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, grad))), tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(tf.math.add(beta, grad), tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.620404410434673, 3.2455213366246354, 2.9248462486985085, 2.4087131984198273, 2.3931752215476005, 2.3373315879429777], "accuracy": [0.19059570133686066, 0.13076211512088776, 0.10751552134752274, 0.1006472036242485, 0.09853387624025345, 0.1018359512090683], "val_loss": [2.6472975867135182, 3.8729211262294223, 2.0140587942940846, 2.068948405129569, 2.0221713611057828, 2.011116232190813], "val_accuracy": [0.20366667211055756, 0.18566666543483734, 0.0949999988079071, 0.10199999809265137, 0.10066666454076767, 0.10199999809265137]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [4, 6, 1, 0, 2, 2, 2, 9, 2, 4, 7, 8, 7, 4, 5, 2, 8, 2, 8, 8, 5, 7, 4, 1, 6, 1, 6, 9, 1, 2, 9, 7, 7, 9, 5, 3, 0, 3, 1, 8, 0, 4, 6, 9, 0, 9], [1, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0, 0, 1, 5, 0, 2, 1, 2, 2, 0, 5, 1], [57, 80, 14, 73], [0, 0, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [0, 1, 8, 4], [4, 1], [64], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.26514285802841187, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 8, 6, 1, 2, 2, 1, 1, 0, 2, 1, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(grad, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))))))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.621852984754023, 2.8174862790778485, 2.400232435926045, 2.3606049256506787, 2.359626233034508, 2.376930894349088], "accuracy": [0.19112402200698853, 0.1282525360584259, 0.10196803510189056, 0.0944393053650856, 0.09972262382507324, 0.09694888442754745], "val_loss": [2.590766293661935, 2.0215637343270436, 2.005849633898054, 2.0456760951450894, 2.0753468785967146, 2.009162970951625], "val_accuracy": [0.1993333399295807, 0.10066666454076767, 0.10366666316986084, 0.10199999809265137, 0.10066666454076767, 0.09666666388511658]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 2, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [4, 6, 1, 6, 2, 2, 2, 9, 2, 4, 7, 8, 7, 4, 5, 2, 8, 2, 2, 8, 5, 7, 4, 1, 6, 1, 6, 9, 1, 2, 9, 7, 7, 9, 5, 3, 0, 3, 1, 8, 0, 4, 6, 9, 0, 9, 5], [1, 3, 3, 3, 3, 1, 3, 2, 1, 4, 4, 3, 1, 2, 3, 0, 2, 1, 2, 2, 1, 5, 3, 2, 5], [85, 77, 97, 73, 40, 57, 35, 21, 54, 64], [0, 0, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [0, 1, 8, 4], [4, 1], [64], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 18, 11, 7, 3, 72, 72, 47, 25, 7, 2, 2, 1, 1, 0, 2, 1, 1, 0], "tree_depth": 59, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(grad), tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))))), tf.math.pow(tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.math.divide_no_nan(tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(tf.math.sqrt(grad), grad))), tf.math.add(tf.math.add(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha)))), tf.math.add(beta, grad)))))), beta), alpha), tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.add(grad, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))), grad)))), alpha), beta), tf.math.add(beta, tf.math.square(grad)))), tf.math.add(beta, tf.math.multiply(tf.math.negative(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(beta, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha))), beta))))))), tf.math.add(beta, beta))))))), tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))))), tf.math.negative(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))), tf.math.add(beta, beta))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 6, 1, 0, 5, 2, 2, 9, 2, 4, 7, 8, 7, 9, 5, 9, 8, 2, 8, 8, 5, 7, 6, 1, 6, 1, 6], [3, 3, 3, 3, 3, 3, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3], [85, 80, 63, 39, 49], [0, 1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [9, 1, 8, 4], [4, 1], [64], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 15, 15, 9, 6, 1, 1, 1, 1, 0, 1, 2, 1, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.math.negative(grad), tf.math.square(tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))))), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [12.517167066050842, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.03566239774227142, 0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1035543.5714285715, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [9, 6, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [92, 32, 5, 49, 25], [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 6, 3, 3, 0, 2, 3, 0, 8, 9, 6, 0, 3, 9, 2, 9, 8, 2, 4, 6, 5, 8, 9, 9], [1, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0], [85, 80, 63, 13, 48], [0, 0, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [0, 1, 8, 4], [4, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [2, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 16, 16, 10, 6, 1, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.divide_no_nan(tf.math.multiply(tf.math.multiply(alpha, tf.math.add(beta, grad)), tf.math.negative(grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, grad)))), grad))), tf.math.sqrt(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1], [4, 6, 1, 0, 2, 2, 2, 9, 2, 4, 7, 8, 7, 4, 5, 0, 5, 2, 8, 4, 5, 7, 6, 1, 2, 1, 6, 0], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0, 4, 1, 3, 1, 1, 0, 3, 0, 2], [85, 80, 63, 39, 49], [0, 1, 1, 0, 0, 0, 1, 1], [1, 1, 1, 1, 0], [9, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [0, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 0, 47, 47, 28, 19, 3, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.pow(grad, tf.math.add(tf.math.sqrt(grad), tf.math.add(tf.math.add(beta, tf.math.pow(alpha, tf.math.square(grad))), grad)))))), tf.math.negative(tf.math.add(beta, beta))))), tf.math.square(tf.math.add(beta, alpha))), tf.math.add(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(alpha, tf.math.add(beta, tf.math.add(tf.math.subtract(grad, tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, alpha)))), tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)))), tf.math.negative(tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302538977102628, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [46, 32, 5, 49, 25], [0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 6, 3, 3, 0, 2, 3, 9, 0, 3, 7, 0, 3, 9, 2, 9, 8, 2, 4, 6, 5, 8, 9, 9], [1, 3, 1, 3, 3, 3, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3], [85, 80, 63, 13, 48], [0, 1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [6, 1, 8, 4], [4, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 22, 22, 14, 8, 2, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.multiply(alpha, tf.math.negative(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))), tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, grad)))))), grad), tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.multiply(grad, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))))), grad))), tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07436270266771317, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 1, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1], [4, 6, 2, 3, 2, 2, 3, 9, 9, 6, 7, 0, 7, 9, 2, 8, 9, 8, 0, 0, 0, 8, 5, 7, 8, 3, 1, 4, 6, 4, 2, 8], [0, 3, 3, 3, 2, 5, 0, 2, 1, 2, 4, 0], [85, 80, 63, 44, 49, 80], [0, 0, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [9, 1, 8, 4], [3, 1], [29], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [2, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 0, 25, 25, 17, 8, 6, 1, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.multiply(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))), tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.add(tf.math.negative(grad), tf.math.add(tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.sqrt(beta), grad))))))), tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0940430611371994, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [9, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [30, 32, 5, 49, 25], [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1], [4, 6, 1, 3, 2, 2, 6, 6, 2, 4, 7, 8, 7, 4, 5, 5, 8, 2, 8, 8, 5, 7, 6, 1, 6, 1, 6], [1, 3, 3, 3, 3, 2, 3, 3, 1, 3, 4, 2, 1, 4, 1, 3], [85, 77, 30, 73, 40], [0, 0, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [6, 1, 8, 4], [1, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 36, 36, 21, 15, 0, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.multiply(tf.math.add(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)))), tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.pow(beta, grad), tf.math.square(tf.math.square(tf.math.add(beta, grad)))))), alpha), tf.math.add(beta, grad)))), grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))))), tf.math.add(beta, alpha))))), grad))))), tf.math.square(tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, alpha), sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [353852.61246116617, 52950387.36494519, 923824586.3891164, 6497719109.486197, 28402311889.16867, 92219968517.27487], "accuracy": [0.09972262382507324, 0.10540219396352768, 0.10408136248588562, 0.10091137140989304, 0.10117553919553757, 0.09932637959718704], "val_loss": [2939816.5714285714, 157661988.57142857, 1690567350.857143, 9213265334.857143, 34504928694.85714, 101770486930.28572], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 6, 2, 5, 2, 5, 3, 5, 5, 2, 7, 0, 7, 9, 2, 9, 6, 2, 0, 0, 0, 8, 5, 7, 8, 3, 1, 4, 6, 4, 2, 8], [1, 3, 3, 3, 3, 5, 3, 2, 3, 3, 4, 0, 5, 3, 1, 0, 3, 3], [62, 77, 30, 73, 40], [0, 0, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [0, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 0, 22, 22, 14, 8, 1, 2, 2, 1, 1, 0, 1, 0, 1, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.multiply(tf.math.square(tf.math.add(beta, grad)), grad)))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))))), grad), tf.math.add(beta, beta)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, sigma))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302538977102628, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1], [4, 6, 1, 3, 2, 2, 2, 9, 2, 4, 7, 5, 7, 4, 5, 9, 3, 0, 6, 8, 5, 5, 8, 1, 2, 1, 6, 7, 1, 1], [2, 1, 3, 3, 3, 5, 3, 3, 1, 4, 4, 0, 1, 1, 3, 1, 1, 0, 3, 0, 2], [57, 80, 14, 73, 74], [0, 1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [9, 1, 8, 4], [4, 1], [64], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [9, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 0, 50, 50, 30, 20, 5, 1, 1, 1, 0, 1, 1, 1, 0, 1], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, beta), tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.add(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(tf.math.add(beta, tf.math.pow(grad, tf.math.square(grad))), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.square(tf.math.add(beta, grad))))))))))), grad), tf.math.sqrt(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.add(alpha, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(grad, tf.math.add(beta, alpha)))), alpha))), tf.math.add(beta, tf.math.subtract(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302538977102628, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1], [4, 6, 1, 3, 2, 2, 2, 9, 2, 3, 5, 5, 7, 4, 5, 9, 4, 2, 8, 8, 5, 7, 6, 1, 6, 1, 6, 7, 1, 1], [1, 3, 3, 3, 3, 5, 3, 2, 0, 4, 4, 0, 4, 1, 3, 1, 1, 0, 3, 0, 2], [85, 80, 63, 39, 49, 29], [0, 0, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [0, 1, 8, 4], [1, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [2, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 0, 51, 51, 30, 21, 6, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.multiply(grad, tf.math.add(beta, tf.math.square(tf.math.square(tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), grad)))))))), grad), tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)))))))), tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))))))), tf.math.divide_no_nan(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.subtract(tf.math.divide_no_nan(alpha, tf.math.add(grad, tf.math.add(beta, alpha))), alpha))), tf.math.subtract(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0940430611371994, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [2, 6, 3, 3, 0, 2, 3, 9, 8, 3, 7, 2, 7, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [1, 3, 3, 3, 3, 5, 3, 2, 3, 4, 4, 0], [85, 77, 30, 73, 40], [1, 0, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [8, 1, 8, 4], [4, 1], [64], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.0454285703599453, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 2, 3, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, grad))), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.6202318169232672, 9.803345338496172, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.19112402200698853, 0.13049794733524323, 0.11411966383457184, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.7372408594403947, 100.32373918805804, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.19866666197776794, 0.23933333158493042, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1], [4, 6, 1, 3, 2, 2, 2, 8, 2, 4, 7, 5, 7, 4, 5, 9, 8, 3, 8, 8, 5, 1, 8, 1, 6, 1, 6, 7, 5, 1, 6, 1, 5, 0, 5, 8, 0, 2, 6, 6, 3, 3, 1, 1, 8, 7, 7, 5, 6, 6, 1, 5, 0, 4, 5, 0, 2, 0, 4, 0, 3, 8, 7, 7, 3, 0, 5, 6, 7, 3, 0, 6, 1], [1, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0, 0, 1, 5, 0, 2, 1, 3, 2, 0, 2, 1, 0, 3, 0, 0, 3, 0, 3, 3, 3, 5, 4, 4, 4, 4, 0, 1, 5, 4, 4, 4, 5, 1, 1, 2, 2, 1], [33, 63, 70, 39, 49, 14, 52, 49, 29, 66], [1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [9, 1, 8, 4], [4, 1], [64], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [3, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.04171428456902504, "mapping_values": [1, 4, 4, 2, 2, 1, 59, 59, 37, 22, 5, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 52, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(alpha, grad), tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(grad)), tf.math.add(tf.math.add(beta, grad), tf.math.pow(tf.math.square(tf.math.add(beta, grad)), grad)))), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(beta, grad)))))), tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, alpha)))), tf.math.add(beta, grad))), grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.sqrt(tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.subtract(tf.math.add(beta, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.subtract(alpha, grad))))), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.square(tf.math.add(beta, beta)))), tf.math.add(beta, alpha)), tf.math.negative(tf.math.add(beta, grad)))), tf.math.square(beta))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))))))))))))))), beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.30291469442594, 2.301135992345683, 2.3009287953581463, 2.303359344509126, 2.3012879447788372, 2.3026173021248257], "accuracy": [0.08902391046285629, 0.09179764986038208, 0.09008057415485382, 0.09087307006120682, 0.09351472556591034, 0.08770307898521423], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 8, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [82, 32, 5, 49, 25], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [8, 3, 1, 0, 2, 4, 6, 9, 2, 4, 7, 8, 7, 4, 5, 9, 8, 2, 8, 8, 5, 7, 6, 1, 6, 1, 6], [3, 3, 0, 3, 3, 3, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3], [19, 77, 30, 73, 40], [0, 0, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [1, 1, 8, 4], [4, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.04171428456902504, "mapping_values": [1, 4, 4, 2, 2, 1, 26, 26, 17, 9, 3, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.sqrt(alpha), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.pow(grad, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, grad)))), tf.math.add(beta, grad))))), tf.math.add(beta, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, beta))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.30291469442594, 2.301135992345683, 2.3009287953581463, 2.303359344509126, 2.3012879447788372, 2.3026173021248257], "accuracy": [0.08902391046285629, 0.09179764986038208, 0.09008057415485382, 0.09087307006120682, 0.09351472556591034, 0.08770307898521423], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}]