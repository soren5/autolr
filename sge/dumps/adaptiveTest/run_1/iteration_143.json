[{"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [31, 32, 29, 49, 25], [1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1], [3, 2, 6, 6, 3, 7, 4, 9, 2, 3, 0, 2, 1, 6, 4, 3, 3, 8], [1, 3, 3, 1, 1, 5, 3, 2, 1, 4, 4, 0], [98], [0, 1, 1, 0, 1], [0, 0, 1], [3, 2, 8, 4], [2], [64], [0, 1, 0, 1, 1, 1], [3, 1, 9, 1, 2], [1, 3, 0], [97, 52, 13]], "fitness": -0.8199999928474426, "mapping_values": [1, 3, 3, 1, 2, 1, 11, 11, 5, 6, 0, 3, 1, 1, 0, 0, 5, 2, 3, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, grad))), grad), tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, alpha))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(sigma, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.248773040804235, 1.714827081766961, 1.2077240381164007, 0.9139747996104156, 0.8239865397197726, 0.7539362295696433, 0.7205901028945887, 0.6734598530376467, 0.6512018535367375, 0.6285867820704351, 0.5977345322967441, 0.5642969629799512, 0.5461426839978388, 0.5328087632634998, 0.5068626471356851, 0.4947705338651856, 0.46912378125092485, 0.45606462998932473, 0.448793112338101, 0.43240307947159945, 0.42157388598281853, 0.41137132360368056, 0.39906600072808696, 0.3879431671021464, 0.38015753527154317, 0.3749935861276897, 0.36232902223974756, 0.3481573573925145, 0.34939110019282266, 0.3307309055277983, 0.3237144535031254, 0.32489811626990334, 0.31334612535967443, 0.3073249353574897, 0.29479765960915433, 0.2897170076414642, 0.29128105378091107, 0.2798632437944129, 0.27149312281810123, 0.26970253027645885], "accuracy": [0.21040813624858856, 0.44802534580230713, 0.5835424661636353, 0.6711134314537048, 0.6964733600616455, 0.718399167060852, 0.7243428826332092, 0.7510236501693726, 0.7549861073493958, 0.7635715007781982, 0.776251494884491, 0.7804781198501587, 0.7902522683143616, 0.8029322624206543, 0.8050455451011658, 0.8137630224227905, 0.8207634687423706, 0.8272355198860168, 0.8301413059234619, 0.8405758738517761, 0.8399154543876648, 0.8508783578872681, 0.8502179384231567, 0.8574824929237366, 0.8576145768165588, 0.856689989566803, 0.8623695969581604, 0.868049144744873, 0.8696341514587402, 0.8735966086387634, 0.8754457831382751, 0.8817857503890991, 0.8794082403182983, 0.8828424215316772, 0.8885219693183899, 0.8927486538887024, 0.8886540532112122, 0.8918240666389465, 0.8927486538887024, 0.8986923694610596], "val_loss": [1.7626188141959054, 0.8706909588405064, 0.7082904747554234, 0.6140107597623553, 0.5940043245043073, 0.5563191856656756, 0.5305084671292987, 0.514522773878915, 0.4888224261147635, 0.4783944572721209, 0.447567343711853, 0.4326427493776594, 0.42286605494362967, 0.41365733316966463, 0.40480888741356985, 0.3874387741088867, 0.3838695543152945, 0.37185047354016987, 0.36687053952898296, 0.35867044755390715, 0.3522912434169224, 0.3475743361881801, 0.3459592546735491, 0.34384348562785555, 0.34487748997552053, 0.34131719384874615, 0.3334802729742868, 0.32887360879353117, 0.3344452125685556, 0.32667970657348633, 0.32737376008714947, 0.3136293717793056, 0.33507273878370014, 0.325449321951185, 0.31692138739994596, 0.31546362808772493, 0.3213131512914385, 0.32727703877857756, 0.3263687321117946, 0.3222403696605137], "val_accuracy": [0.4806666672229767, 0.6660000085830688, 0.7026666402816772, 0.7326666712760925, 0.7416666746139526, 0.7536666393280029, 0.7676666378974915, 0.7706666588783264, 0.7799999713897705, 0.7913333177566528, 0.8013333082199097, 0.8113333582878113, 0.8176666498184204, 0.8203333616256714, 0.8223333358764648, 0.8376666903495789, 0.8356666564941406, 0.8493333458900452, 0.8489999771118164, 0.8536666631698608, 0.8603333234786987, 0.859000027179718, 0.8560000061988831, 0.8579999804496765, 0.8510000109672546, 0.8613333106040955, 0.8613333106040955, 0.8656666874885559, 0.8633333444595337, 0.8650000095367432, 0.871999979019165, 0.8696666955947876, 0.8643333315849304, 0.871666669845581, 0.8730000257492065, 0.871666669845581, 0.8700000047683716, 0.8686666488647461, 0.8703333139419556, 0.8723333477973938]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [31, 32, 29, 49, 25], [0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [3, 2, 6, 0, 3, 7, 4, 9, 2, 3, 0, 2, 1, 6, 4, 3, 3, 8], [1, 3, 3, 1, 1, 5, 3, 2, 3, 4, 4, 0], [98], [0, 1, 1, 0, 1], [0, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 1, 1], [3, 1, 9, 1, 2], [1, 3, 0], [97, 52, 13]], "fitness": -0.15600000321865082, "mapping_values": [1, 1, 1, 0, 1, 0, 16, 16, 9, 7, 1, 3, 1, 1, 0, 0, 5, 2, 3, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.pow(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.add(grad, grad)))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(sigma, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [3.269763710476451, 106504.262663726, Infinity, 2.9308302154976853, 2.966430290452934, 2.935796789694078], "accuracy": [0.1970677524805069, 0.14595165848731995, 0.09945846349000931, 0.1002509593963623, 0.09694888442754745, 0.09945846349000931], "val_loss": [2.0472213881356374, 46580413497344.0, 2.624095712389265, 2.3981835501534596, 2.3769929068429128, 2.6659042494637624], "val_accuracy": [0.14666666090488434, 0.09466666728258133, 0.10233332961797714, 0.10366666316986084, 0.10366666316986084, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 2, 4, 0, 5, 5, 8, 4, 4, 6, 3, 6], [3, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 32, 29, 49, 25], [1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 1, 1, 0, 1, 0, 0, 1], [7, 9, 6, 5, 0, 7, 3, 9], [1, 3, 3, 1, 1, 5, 3, 2, 1, 4, 4, 0], [98], [0, 1, 1, 0, 1], [0, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 0, 1, 1], [3, 3, 9, 1, 2], [1, 0, 2, 2], [92, 52, 13, 12, 0, 18]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 3, 3, 1, 2, 0, 3, 1, 1, 0, 0, 5, 3, 2, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(alpha, tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.multiply(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09694888442754745, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 32, 29, 49, 25], [0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1], [4, 7, 0, 5, 0, 7, 3, 9], [3, 3, 0, 3, 1], [98], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 0, 0, 1, 1], [3, 1, 9, 1, 2], [3, 1, 2], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 10, 10, 6, 4, 1, 1, 1, 0, 1, 0, 7, 4, 3, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(grad, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.subtract(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.subtract(alpha, beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09694888442754745, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 2, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [31, 32, 29, 49, 25], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1], [3, 2, 7, 6, 3, 7, 4, 9, 2, 3, 0, 2, 1, 6, 4, 3, 3, 8], [1, 3, 3, 1, 1, 5, 3, 2, 1, 4, 4, 0], [98], [1, 1, 1, 0, 1], [0, 0, 1], [3, 2, 8, 4], [2], [64], [1, 0, 0, 1, 1, 1], [3, 0, 9, 1, 2], [1, 1, 2], [97, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), grad)), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3035708042482863, 2.3035103788843183, 2.3049487950480327, 2.3087207696315337, 2.3092731032877265, 2.3140448978816073, 2.3192170662351526, 2.322625954735942, 2.3285358920152146, 2.3405379545513854, 2.371408201117384, 5.302904217380642e+30, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08334434032440186, 0.08677849918603897, 0.08809932321310043, 0.07832518965005875, 0.07991018146276474, 0.0750231146812439, 0.07687227427959442, 0.07700435817241669, 0.07158895581960678, 0.07700435817241669, 0.07634394615888596, 0.09457138925790787, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9718481472560339, 1.972782816205706, 1.9740310396466936, 1.9759347098214286, 1.9779550007411413, 1.9803670474461146, 1.9835869925362724, 1.9868988309587752, 1.9920761925833566, 2.0026798248291016, 2.037560599190848, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.03233333304524422, 0.025333333760499954, 0.024000000208616257, 0.024000000208616257, 0.029333332553505898, 0.03866666555404663, 0.059333331882953644, 0.07466666400432587, 0.08833333104848862, 0.09933333098888397, 0.10066666454076767, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 8, 1, 2, 9, 4, 2, 6, 3, 6, 5, 8, 9], [1, 0, 2, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 32, 29, 49, 25, 26, 74, 54], [1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1], [2, 7, 2, 8, 5, 4, 3, 9, 0, 4, 0], [3, 3, 0, 3, 1, 3, 2], [56], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [1], [64], [0, 1, 0, 0, 1, 1], [3, 6, 9, 1, 2], [3, 1, 2], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 30, 30, 18, 12, 8, 9, 9, 5, 4, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.pow(tf.math.add(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))), tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.add(tf.math.add(beta, tf.math.sqrt(grad)), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.square(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.divide_no_nan(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09694888442754745, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 32, 29, 49, 25], [1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 0, 1], [4, 7, 3, 5, 0, 7, 3, 9], [3, 3, 0, 3, 1, 4, 4, 1, 3, 0, 5, 4], [98, 36, 70, 24, 16, 38], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 1, 1, 0, 1], [3, 1, 9, 1, 2], [0, 0, 2], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 5, 4, 1, 1, 0, 0, 0, 0, 3, 1, 2, 2], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.pow(grad, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.302556486114645, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09694888442754745, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [1, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [2, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 32, 29, 49, 25], [0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 1, 6, 3, 7, 4, 9, 2, 3, 0, 2, 1, 6, 4, 3, 3, 8], [3, 3, 0, 3, 1, 5], [75], [0, 1, 0, 0, 1], [0, 0, 1], [3, 2, 8, 4], [2], [64], [0, 1, 0, 0, 0, 1], [2, 5, 9, 1, 2], [1, 3, 0], [97, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 3, 3, 1, 2, 0, 5, 3, 2, 1, 0, 4, 3, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, grad), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, tf.math.add(tf.math.add(sigma, beta), sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.square(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3022294662978435, 2.302302580247576, 2.302919059649372, 2.305735711959438, 2.320312702235387, 2.4069393807870836], "accuracy": [0.10513802617788315, 0.10408136248588562, 0.1014397069811821, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9735872404915946, 1.9735966409955705, 1.9744640759059362, 1.97950656073434, 2.007244791303362, 2.2273174694606235], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [1, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [31, 32, 29, 49, 25], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1], [3, 9, 6, 6, 3, 7, 4, 9, 2, 3, 0, 2, 1, 6, 4, 3, 3, 8], [1, 3, 3, 1, 5, 5, 3, 2, 1, 4, 4, 0], [98], [0, 1, 0, 0, 1], [0, 0, 1], [3, 2, 8, 4], [2], [64], [0, 1, 0, 1, 1, 1], [8, 8, 9, 1, 2], [1, 3, 0], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 11, 8, 4, 3, 3, 1, 2, 0, 5, 3, 2, 1, 0, 2, 1, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))))), tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))), tf.math.pow(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, tf.math.add(tf.math.add(sigma, beta), sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09694888442754745, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 32, 29, 49, 25], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1], [4, 7, 6, 5, 0, 7, 3, 9], [1, 3, 3, 1, 1, 5, 3, 2, 1, 4, 4, 0], [98], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 0, 0, 1, 1, 1], [7, 7, 9, 1, 2], [1, 1, 2], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.add(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), alpha), alpha)", "other_info": {"loss": [2.302556486114645, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09694888442754745, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [5, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 2, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 32, 29, 49, 25], [0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1], [2, 2, 6, 8, 5, 4, 3, 9, 0, 4, 0], [1, 3, 3, 1, 1, 5, 3, 2, 1, 4, 4, 0], [75, 75], [0, 1, 1, 0, 1], [0, 0, 1], [3, 2, 8, 4], [2], [64], [0, 1, 0, 0, 1, 1], [3, 1, 9, 1, 2], [3, 1, 2], [78, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 16, 10, 6, 3, 8, 8, 4, 4, 0, 3, 1, 1, 0, 0, 5, 3, 2, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.square(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(alpha, tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(beta, alpha)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.subtract(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), alpha))", "other_info": {"loss": [2.3031086071119207, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08492933213710785, 0.08294808864593506, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.97370331627982, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.03033333271741867, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 32, 29, 49, 25], [1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [4, 7, 6, 8, 4, 7, 3, 0, 8, 4, 0], [3, 1, 3, 1, 1, 3, 1, 2, 1, 4, 4, 0, 5, 2, 3, 3], [75, 35], [0, 1, 1, 0, 1], [0, 0, 1], [2, 2, 8, 4], [6], [64], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1], [3, 1, 2, 1, 2, 4, 6, 3, 7], [3, 1, 2, 3, 2, 1, 0, 3, 0, 0], [81, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 7, 7, 0, 3, 1, 1, 0, 0, 19, 9, 10, 3], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.pow(grad, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, alpha)))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.subtract(alpha, tf.math.add(beta, tf.math.subtract(sigma, tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.multiply(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), sigma), tf.math.add(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09694888442754745, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 32, 29, 49, 25], [0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 0, 1], [6, 7, 6, 5, 0, 7, 3, 9], [0, 0, 0, 0, 1], [98, 20, 44, 19], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 0, 0, 1, 0, 1, 1], [3, 1, 9, 1, 2], [3, 1, 2, 2], [23, 52, 13]], "fitness": -0.07428571581840515, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 5, 4, 4, 1, 1, 0, 1, 0, 7, 4, 3, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), sigma), tf.math.subtract(alpha, beta))", "other_info": {"loss": [2.3030724936094678, 2.301865473242011, 2.3016153795529255, 2.3027683201876643, 2.301179012681011, 2.3018829603992543, 2.3023804138522688, 2.3016680811437493, 2.300887820491103, 2.3015957069497746, 2.30324069582287, 2.3006785053539867, 2.302410021937991, 2.3028615772480094, 2.301009798094014, 2.3020584136424773, 2.301389743371363, 2.3007104884301195, 2.3019387387580657, 2.3025522863765704, 2.3013012758760625, 2.299784493405412, 2.300538054105864, 2.300986098071698, 2.301390071255955, 2.302088506186186, 2.3001661675087512, 2.299421760053714, 2.3005656195889848, 2.30081522749746, 2.3002851601400236, 2.3021848430061667, 2.301215403524955, 2.3006832208521315, 2.300464347872862, 2.3004755338641867, 2.2992291946799104, 2.3007251595965843, 2.3008089735680852, 2.3014447683702923, 2.300806676014114, 2.2997901549885347, 2.300618095987461, 2.2995105967183456, 2.3003118295774105, 2.2997505735365342, 2.300076777956127, 2.3008994893028816, 2.3012482850401392, 2.2989211474836715, 2.298590985995872, 2.299483733957533, 2.3008394809431167, 2.2995150889450957, 2.2998734815418915, 2.299088348313849, 2.2986445598252114, 2.298590294736299, 2.2998912353651666, 2.29946195356535, 2.2982907561011334, 2.2985011190392513, 2.2984083872177754, 2.2986266213070525, 2.298949650864103, 2.300962779248285, 2.299716327767, 2.2988679422253333, 2.2994000013588507, 2.2990409715095956, 2.297661342672495, 2.2986136584974095, 2.2984845844856294, 2.299058729143285, 2.2987971074388107, 2.297904403218189, 2.2988872336610715, 2.2984977729284943, 2.2982062622068296, 2.2995648000218596, 2.297383058686786, 2.29883930900739, 2.298974304119861, 2.300117125395912, 2.2973927845650692, 2.298411715567592, 2.2995111726892623, 2.299524459919484, 2.2980474202923564, 2.298524077605294, 2.2987325456337353, 2.2986143635815446, 2.299029318033948, 2.2980882996786005], "accuracy": [0.08506141602993011, 0.08942015469074249, 0.09259014576673508, 0.0878351628780365, 0.09338264167308807, 0.08902391046285629, 0.08981640636920929, 0.09166556596755981, 0.09060890227556229, 0.09140139818191528, 0.08757099509239197, 0.09589222073554993, 0.09100515395402908, 0.09126931428909302, 0.09021265059709549, 0.08968432247638702, 0.09166556596755981, 0.09272222965955734, 0.09338264167308807, 0.09100515395402908, 0.09100515395402908, 0.0948355570435524, 0.09470347315073013, 0.09615638852119446, 0.09325055778026581, 0.09708096832036972, 0.09602430462837219, 0.10328886657953262, 0.0956280529499054, 0.09589222073554993, 0.08955223858356476, 0.08875974267721176, 0.09126931428909302, 0.09338264167308807, 0.09285431355237961, 0.09549596905708313, 0.10038304328918457, 0.09708096832036972, 0.09298639744520187, 0.09351472556591034, 0.09430722147226334, 0.0948355570435524, 0.09602430462837219, 0.09721305221319199, 0.09628847241401672, 0.09708096832036972, 0.09008057415485382, 0.09113723784685135, 0.08928807079792023, 0.09813763201236725, 0.10236428678035736, 0.09800554811954498, 0.09747721254825592, 0.09932637959718704, 0.08902391046285629, 0.09668471664190292, 0.09602430462837219, 0.10077928751707077, 0.09298639744520187, 0.09417514503002167, 0.09694888442754745, 0.09800554811954498, 0.09813763201236725, 0.09998679161071777, 0.09853387624025345, 0.09179764986038208, 0.09668471664190292, 0.10038304328918457, 0.09919429570436478, 0.09655263274908066, 0.10011887550354004, 0.09681680053472519, 0.09589222073554993, 0.09932637959718704, 0.10130762308835983, 0.09932637959718704, 0.09985470771789551, 0.1010434553027153, 0.10210011899471283, 0.10342095047235489, 0.10474177449941635, 0.1014397069811821, 0.09787346422672272, 0.09774138033390045, 0.10368511080741882, 0.09681680053472519, 0.10117553919553757, 0.09893012791872025, 0.1006472036242485, 0.09932637959718704, 0.09826971590518951, 0.10342095047235489, 0.09734513610601425, 0.1006472036242485], "val_loss": [1.9708971296037947, 1.9708565303257533, 1.9708161354064941, 1.970775740487235, 1.970735686165946, 1.9706954274858748, 1.9706557818821497, 1.9706164768763952, 1.9705776487077986, 1.9705393654959542, 1.970501150403704, 1.9704630715506417, 1.9704253332955497, 1.9703876631600517, 1.9703499930245536, 1.9703120504106795, 1.9702743802751814, 1.9702370507376534, 1.9701998574393136, 1.970163140978132, 1.9701260839189803, 1.9700894355773926, 1.9700534684317452, 1.9700172288077218, 1.9699810573032923, 1.969945022038051, 1.9699094636099679, 1.9698742457798548, 1.969839300428118, 1.969804150717599, 1.9697694097246443, 1.9697347368512834, 1.9696997233799525, 1.9696657317025321, 1.9696318081447057, 1.969597612108503, 1.9695642335074288, 1.9695305824279785, 1.9694975444248743, 1.9694644383021764, 1.9694314002990723, 1.9693990434919084, 1.9693664823259627, 1.9693341936383928, 1.969301700592041, 1.9692699568612235, 1.969238349369594, 1.9692067418779646, 1.9691752706255232, 1.9691438674926758, 1.9691127368382044, 1.9690819467817033, 1.969050679888044, 1.969020162309919, 1.968989440373012, 1.9689594677516393, 1.9689290182931083, 1.9688991137913294, 1.968869345528739, 1.968839372907366, 1.9688094684055872, 1.9687798363821847, 1.9687507493155343, 1.968721662248884, 1.9686921664646693, 1.9686630793980189, 1.9686333111354284, 1.9686048371451241, 1.9685760225568498, 1.9685478210449219, 1.9685191426958357, 1.9684910774230957, 1.9684628759111678, 1.9684348787580217, 1.9684069497244698, 1.9683794975280762, 1.9683524540492467, 1.968324865613665, 1.9682975496564592, 1.9682707786560059, 1.9682436670575822, 1.968217032296317, 1.9681906018938338, 1.9681645802089147, 1.9681384904044015, 1.9681125368390764, 1.9680872644696916, 1.968061923980713, 1.9680370603288924, 1.9680118560791016, 1.9679872649056571, 1.9679629462105888, 1.9679382869175501, 1.9679137638636999], "val_accuracy": [0.03866666555404663, 0.03966666758060455, 0.03966666758060455, 0.0403333343565464, 0.0403333343565464, 0.04066666588187218, 0.04100000113248825, 0.04100000113248825, 0.041333332657814026, 0.0416666679084301, 0.0430000014603138, 0.043666668236255646, 0.043666668236255646, 0.044333335012197495, 0.044333335012197495, 0.04500000178813934, 0.04533333331346512, 0.045666664838790894, 0.04633333161473274, 0.046666666865348816, 0.046666666865348816, 0.04699999839067459, 0.04699999839067459, 0.04766666516661644, 0.04800000041723251, 0.04833333194255829, 0.04833333194255829, 0.04866666719317436, 0.04933333396911621, 0.050333332270383835, 0.050999999046325684, 0.05133333429694176, 0.052000001072883606, 0.052666667848825455, 0.052666667848825455, 0.0533333346247673, 0.0533333346247673, 0.05433333292603493, 0.05433333292603493, 0.054666668176651, 0.054666668176651, 0.054666668176651, 0.055666666477918625, 0.055666666477918625, 0.05533333495259285, 0.055666666477918625, 0.055666666477918625, 0.0560000017285347, 0.056333333253860474, 0.056333333253860474, 0.0560000017285347, 0.0560000017285347, 0.056333333253860474, 0.057999998331069946, 0.059333331882953644, 0.059333331882953644, 0.05966666713356972, 0.060333333909511566, 0.060333333909511566, 0.06066666543483734, 0.061000000685453415, 0.06133333221077919, 0.06199999898672104, 0.06333333253860474, 0.06433333456516266, 0.06499999761581421, 0.06533333659172058, 0.06533333659172058, 0.06599999964237213, 0.06666667014360428, 0.06700000166893005, 0.06733333319425583, 0.06800000369548798, 0.06800000369548798, 0.06833333522081375, 0.06866666674613953, 0.06966666877269745, 0.070333331823349, 0.070333331823349, 0.070333331823349, 0.07066666334867477, 0.07066666334867477, 0.07066666334867477, 0.07100000232458115, 0.07199999690055847, 0.07266666740179062, 0.07333333045244217, 0.07333333045244217, 0.07400000095367432, 0.07333333045244217, 0.07333333045244217, 0.07366666942834854, 0.07366666942834854, 0.07333333045244217]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [0, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 32, 29, 49, 25], [1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1], [4, 1, 6, 5, 5, 7, 3, 9, 7, 2, 3, 6, 2, 9, 0, 2, 2, 6, 3, 0, 4, 9, 6, 0, 9, 8, 1, 9, 4, 6, 7, 3, 1, 6, 1, 5, 0, 0, 1, 1, 4, 2, 0, 6, 6, 6], [1, 2, 3, 1, 3, 5, 3, 2, 1, 4, 3, 0, 5, 5, 3, 4, 2, 2, 1, 3, 2, 2, 5, 3, 0, 0, 3], [98, 36, 70, 24, 13, 38, 37, 14], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 1, 1, 0, 1], [3, 1, 9, 1, 2], [1, 3, 0], [23, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 3, 3, 1, 2, 2, 73, 73, 46, 27, 8, 1, 0, 0, 0, 0, 3, 1, 2, 0], "tree_depth": 50, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.pow(alpha, tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha)))))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(grad, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, beta)))))), tf.math.add(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), alpha))))), grad)))), tf.math.add(beta, grad))), tf.math.pow(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), grad), tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, grad)), tf.math.add(beta, beta))), tf.math.subtract(tf.math.add(beta, tf.math.square(tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.subtract(tf.math.add(beta, beta), alpha)))))), tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), beta)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta)))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(grad, grad)), tf.math.divide_no_nan(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))))))))))))), tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, sigma)", "other_info": {"loss": [2.3030946603650824, 2.3019348435382394, 2.30173201104984, 2.302952412238856, 2.301406111715335, 2.3021546661924646], "accuracy": [0.08506141602993011, 0.08942015469074249, 0.09272222965955734, 0.08677849918603897, 0.09298639744520187, 0.08836349099874496], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [2, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 32, 29, 49, 25], [1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 0, 1], [5, 7, 6, 2, 0, 7, 3, 9], [0, 3, 0, 3, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [1], [64], [0, 1, 0, 1, 0, 1], [3, 1, 9, 1, 2], [3, 0, 2], [23, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.square(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.subtract(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3030946603650824, 2.3019348435382394, 2.30173201104984, 2.302952412238856, 2.301406111715335, 2.3021546661924646], "accuracy": [0.08506141602993011, 0.08942015469074249, 0.09272222965955734, 0.08677849918603897, 0.09298639744520187, 0.08836349099874496], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 32, 29, 49, 25], [1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1], [3, 2, 6, 6, 3, 7, 4, 9, 2, 3, 0, 2, 1, 6, 4, 3, 3, 8], [1, 3, 3, 1, 1, 5, 3, 2, 1, 4, 4, 0], [98], [0, 1, 1, 0, 1], [0, 0, 1], [3, 2, 8, 4], [2], [64], [0, 1, 0, 1, 1, 1], [3, 1, 9, 1, 2], [1, 3, 0], [97, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 17, 17, 10, 7, 4, 5, 5, 2, 3, 0, 3, 1, 1, 0, 0, 5, 2, 3, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.square(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))))), grad)), lambda shape,  alpha, beta, grad: tf.math.multiply(alpha, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(sigma, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3030946603650824, 2.3019348435382394, 2.30173201104984, 2.302952412238856, 2.301406111715335, 2.3021546661924646], "accuracy": [0.08506141602993011, 0.08942015469074249, 0.09272222965955734, 0.08677849918603897, 0.09298639744520187, 0.08836349099874496], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [2, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 32, 29, 49, 25], [1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 0, 1], [5, 7, 6, 2, 0, 7, 3, 9], [3, 3, 0, 3, 1], [98], [0, 1, 1, 0, 1], [0, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 1, 1, 0, 1], [3, 1, 9, 1, 2], [3, 1, 2], [23, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 3, 1, 1, 0, 0, 3, 1, 2, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.square(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, alpha)", "other_info": {"loss": [2.3030946603650824, 2.3019348435382394, 2.30173201104984, 2.302952412238856, 2.301406111715335, 2.3021546661924646], "accuracy": [0.08506141602993011, 0.08942015469074249, 0.09272222965955734, 0.08677849918603897, 0.09298639744520187, 0.08836349099874496], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 2, 2, 8, 0, 1, 5, 9, 9, 2, 6, 3, 6, 5, 8], [2, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [83, 32, 29, 17, 25], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 0, 1], [2, 7, 6, 8, 5, 4, 3, 9, 0, 4, 0], [3, 3, 1, 3, 1, 3, 2], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 0, 1, 1], [8, 4, 9, 1, 2], [3, 1, 2], [23, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 16, 16, 11, 5, 4, 9, 9, 5, 4, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.square(alpha), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)))))), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(grad, tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(sigma)", "other_info": {"loss": [2.3030946603650824, 2.3019348435382394, 2.30173201104984, 2.302952412238856, 2.301406111715335, 2.3021546661924646], "accuracy": [0.08506141602993011, 0.08942015469074249, 0.09272222965955734, 0.08677849918603897, 0.09298639744520187, 0.08836349099874496], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 1, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [7, 32, 29, 49, 25], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], [3, 2, 6, 6, 3, 7, 4, 9, 2, 3, 0, 2, 1, 6, 4, 3, 3, 8], [1, 3, 2, 1, 1, 5, 3, 2, 1, 4, 4, 0, 5, 3, 2], [98, 87], [0, 1, 1, 0, 1], [0, 0, 1], [3, 2, 8, 4], [2], [64], [0, 1, 0, 1, 0, 1], [3, 1, 9, 1, 2], [1, 3, 0], [97, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 3, 3, 1, 2, 0, 32, 32, 17, 15, 2, 3, 1, 1, 0, 0, 5, 3, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(grad, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, beta))), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(alpha, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)))))), beta)))))), alpha), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(grad, tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, beta)))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(sigma, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3030946603650824, 2.3019348435382394, 2.30173201104984, 2.302952412238856, 2.301406111715335, 2.3021546661924646], "accuracy": [0.08506141602993011, 0.08942015469074249, 0.09272222965955734, 0.08677849918603897, 0.09298639744520187, 0.08836349099874496], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [2, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 32, 29, 49, 25], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 0, 1], [4, 8, 6, 5, 0, 7, 3, 9], [3, 3, 0, 3, 1], [75], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [1], [64], [0, 1, 1, 1, 0, 1], [8, 1, 9, 1, 2], [3, 1, 2], [23, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 1, 1, 0, 1, 0, 4, 4, 2, 2, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.sqrt(grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(sigma)", "other_info": {"loss": [2.3030946603650824, 2.3019348435382394, 2.30173201104984, 2.302952412238856, 2.301406111715335, 2.3021546661924646], "accuracy": [0.08506141602993011, 0.08942015469074249, 0.09272222965955734, 0.08677849918603897, 0.09298639744520187, 0.08836349099874496], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}]