[{"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 32, 29, 49, 25], [0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 0, 1], [4, 7, 6, 5, 0, 7, 3, 9], [3, 3, 0, 3, 1], [98], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 0, 1], [3, 1, 9, 1, 2], [3, 1, 2], [23, 52, 13]], "fitness": -0.7531428337097168, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 5, 4, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(grad, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.subtract(alpha, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.298342493310691, 2.288625296159522, 2.2774619293439624, 2.2667410364870255, 2.2580346945900063, 2.246756000006125, 2.2344174845784552, 2.2219267439108483, 2.20701789824466, 2.1870155183945537, 2.171019618033481, 2.148232866193262, 2.126047866502852, 2.099593087336044, 2.068345843777287, 2.0373105103108924, 2.0009495966533044, 1.961051189006674, 1.9143176172639653, 1.8724157198812856, 1.8243169006717488, 1.774248027719637, 1.729819766865147, 1.6777184566943213, 1.6291837934899118, 1.5850432774079333, 1.538999945795248, 1.499294373557993, 1.4595258670822504, 1.420392427619548, 1.3877404773114081, 1.352565451068901, 1.3429482675357627, 1.294837611919192, 1.2703764190479843, 1.2547466020699993, 1.2256157355396078, 1.204995398350742, 1.1836495540712362, 1.1673167412228447, 1.1510152813938268, 1.1391321075685334, 1.1170603686068052, 1.0926881618881428, 1.0859645103277735, 1.0737529930390104, 1.0684456725902152, 1.0513159240225853, 1.0515031568157895, 1.0320177668467678, 1.0288345370672445, 1.0053712182734007, 1.0063733480483974, 1.0017335877804598, 0.9906145774803268, 0.9783212333197261, 0.9691167623296689, 0.9526512659441573, 0.9540251416379687, 0.9489406745951205, 0.933885810310972, 0.9303277678036844, 0.9169150227096496, 0.9102395372919166, 0.9158098802999844, 0.9121174395375673, 0.9177460326589156, 0.905561504945338, 0.9017777452221982, 0.8856410954008328, 0.8988693508300736, 0.8823624656830544, 0.8759970132622186, 0.8678940603635755, 0.8678730920384258, 0.8565882016576087, 0.8560870170057914, 0.8556530967742508, 0.8502147942328765, 0.8432755136549701, 0.8476290235099319, 0.8446495697687583, 0.836582582427715, 0.8393233770061997, 0.8358070530029824, 0.8300349982092488, 0.8327748403651855, 0.8100776172364471, 0.8305699804581513, 0.82277678797006, 0.822511885837242, 0.8034835039837139, 0.8056056723776054, 0.8127609842315783, 0.8010711182519477, 0.7907667856694465, 0.7969970702573907, 0.7914306706346778, 0.781010207616894, 0.7904304583641705], "accuracy": [0.10117553919553757, 0.12442214041948318, 0.15493330359458923, 0.19059570133686066, 0.21265354752540588, 0.22744683921337128, 0.2645621597766876, 0.2790912687778473, 0.2989037036895752, 0.32003697752952576, 0.33007529377937317, 0.3483027219772339, 0.3704926669597626, 0.3761722445487976, 0.3932109475135803, 0.4037775695323944, 0.40509840846061707, 0.4283449947834015, 0.436930388212204, 0.44670453667640686, 0.4551578462123871, 0.46308282017707825, 0.46427157521247864, 0.481838583946228, 0.49465063214302063, 0.5000660419464111, 0.5023114681243896, 0.5122177004814148, 0.527010977268219, 0.5408796668052673, 0.5431250929832458, 0.5468233823776245, 0.5507858991622925, 0.5665037631988525, 0.5645225048065186, 0.5703341960906982, 0.5766741633415222, 0.5831462144851685, 0.5900145173072815, 0.5954299569129944, 0.5995244979858398, 0.5993924140930176, 0.6052040457725525, 0.615770697593689, 0.6135252714157104, 0.6205257177352905, 0.6243560910224915, 0.6283186078071594, 0.6292431354522705, 0.6366398334503174, 0.637432336807251, 0.6482630968093872, 0.6409985423088074, 0.6445648074150085, 0.6458855867385864, 0.6542068123817444, 0.655527651309967, 0.6588297486305237, 0.6602826714515686, 0.6622639298439026, 0.6680755615234375, 0.6713775992393494, 0.670320987701416, 0.6723021864891052, 0.6729626059532166, 0.6761326193809509, 0.6679434776306152, 0.6749438643455505, 0.6732267737388611, 0.6802271604537964, 0.6734909415245056, 0.6827367544174194, 0.683000922203064, 0.6840575933456421, 0.689869225025177, 0.6905296444892883, 0.689869225025177, 0.6934354901313782, 0.6951525807380676, 0.6964733600616455, 0.691850483417511, 0.6914542317390442, 0.6972658634185791, 0.6946242451667786, 0.7013604640960693, 0.6973979473114014, 0.7000396251678467, 0.7045304179191589, 0.698718786239624, 0.6971337795257568, 0.6980583667755127, 0.7083608508110046, 0.7077004313468933, 0.7071720957756042, 0.7096816897392273, 0.7107383608818054, 0.7073041796684265, 0.7154933214187622, 0.7131158113479614, 0.7140403985977173], "val_loss": [1.9618588175092424, 1.9529271125793457, 1.9438472475324358, 1.9341962678091866, 1.9241345269339425, 1.9132533754621233, 1.901362691606794, 1.8881055968148368, 1.8733495303562708, 1.8565145220075334, 1.8375898088727678, 1.8161975996834892, 1.7923618044172014, 1.7659120559692383, 1.7362467220851354, 1.703519650868007, 1.667271511895316, 1.6275594575064523, 1.5847151960645403, 1.5393128735678536, 1.4921907697405135, 1.4432998384748186, 1.3938048567090715, 1.3442278930119105, 1.295417104448591, 1.2482120650155204, 1.2033638613564628, 1.1615628174373083, 1.1225716727120536, 1.0861598764147078, 1.052222558430263, 1.0210528033120292, 0.9933196135929653, 0.9671073981693813, 0.9425256252288818, 0.9212607996804374, 0.9011000565120152, 0.8823605605534145, 0.8651298114231655, 0.8486278057098389, 0.8340631382805961, 0.8204368693487984, 0.8076879637581962, 0.7952456304005214, 0.783796889441354, 0.7740290675844465, 0.7647746120180402, 0.755398188318525, 0.7467236348560878, 0.7384473766599383, 0.7311503376279559, 0.7231635025569371, 0.7168680259159633, 0.7103106294359479, 0.7035291024616787, 0.6980617386954171, 0.6924884830202375, 0.6864057949611119, 0.6813551698412214, 0.6768114907400948, 0.6719578674861363, 0.6670879806791034, 0.6629057100840977, 0.6584344591413226, 0.6545376096452985, 0.6509831973484584, 0.6477510418210711, 0.6443658726555961, 0.6407721553530011, 0.6376267330987113, 0.6347389391490391, 0.6315699475152152, 0.6281724146434239, 0.6254396438598633, 0.622977614402771, 0.6190845966339111, 0.6165298053196498, 0.6136738061904907, 0.6113109929221017, 0.6081826857158116, 0.6062068598611015, 0.60396066733769, 0.6009477206638881, 0.5997310195650373, 0.5976535933358329, 0.5955958366394043, 0.5940371922084263, 0.5917620147977557, 0.5900026219231742, 0.5884146009172712, 0.586476308958871, 0.5845121315547398, 0.5825625828334263, 0.5818297522408622, 0.5790562289101737, 0.5775924750736782, 0.5756873914173671, 0.574498074395316, 0.5714795248849052, 0.5704763787133353], "val_accuracy": [0.1106666699051857, 0.19966666400432587, 0.27933332324028015, 0.3413333296775818, 0.3776666522026062, 0.39800000190734863, 0.414000004529953, 0.429666668176651, 0.4429999887943268, 0.45500001311302185, 0.46700000762939453, 0.4830000102519989, 0.4959999918937683, 0.5066666603088379, 0.5163333415985107, 0.5326666831970215, 0.5403333306312561, 0.5450000166893005, 0.5509999990463257, 0.5569999814033508, 0.5643333196640015, 0.5713333487510681, 0.5836666822433472, 0.5913333296775818, 0.5996666550636292, 0.6076666712760925, 0.6163333058357239, 0.6290000081062317, 0.6370000243186951, 0.6466666460037231, 0.6549999713897705, 0.6610000133514404, 0.6676666736602783, 0.6713333129882812, 0.6746666431427002, 0.6786666512489319, 0.6813333630561829, 0.6816666722297668, 0.6859999895095825, 0.6909999847412109, 0.6916666626930237, 0.6949999928474426, 0.6976666450500488, 0.6990000009536743, 0.7016666531562805, 0.7023333311080933, 0.7036666870117188, 0.7059999704360962, 0.7066666483879089, 0.7080000042915344, 0.7106666564941406, 0.7129999995231628, 0.7143333554267883, 0.7170000076293945, 0.7196666598320007, 0.7206666469573975, 0.7223333120346069, 0.7256666421890259, 0.7263333201408386, 0.7279999852180481, 0.7283333539962769, 0.7283333539962769, 0.7303333282470703, 0.7319999933242798, 0.7333333492279053, 0.734333336353302, 0.7360000014305115, 0.7356666922569275, 0.7393333315849304, 0.7379999756813049, 0.7406666874885559, 0.7393333315849304, 0.7396666407585144, 0.7393333315849304, 0.7436666488647461, 0.7429999709129333, 0.7429999709129333, 0.7483333349227905, 0.7443333268165588, 0.7476666569709778, 0.75, 0.7483333349227905, 0.7506666779518127, 0.7509999871253967, 0.75, 0.7516666650772095, 0.753000020980835, 0.7516666650772095, 0.753000020980835, 0.7513333559036255, 0.7540000081062317, 0.7540000081062317, 0.7546666860580444, 0.753333330154419, 0.7563333511352539, 0.7556666731834412, 0.7553333044052124, 0.7553333044052124, 0.7573333382606506, 0.7570000290870667]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 32, 29, 49, 25], [0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1], [4, 7, 6, 8, 4, 7, 3, 9, 0, 4, 0], [3, 3, 0, 3, 1, 2, 2], [75, 35], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 0, 1], [3, 1, 9, 1, 2], [3, 1, 2], [23, 52, 13]], "fitness": -0.7531428337097168, "mapping_values": [1, 1, 1, 0, 1, 0, 18, 18, 11, 7, 2, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(grad, tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.pow(alpha, tf.math.negative(tf.math.add(beta, beta))))))), tf.math.add(beta, beta))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.subtract(alpha, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.298342493310691, 2.2886252016864352, 2.277462023817049, 2.2667410049959966, 2.25803469011828, 2.246755968515096, 2.2344177454501377, 2.2219270362735597, 2.207018217626674, 2.1870154913752513, 2.171019766545173, 2.1482329517228966, 2.1260477810676908, 2.0995937981200554, 2.0683470852481154, 2.0373111401314685, 2.0009497204287934, 1.9610506401967693, 1.9143161462707732, 1.872412699214566, 1.8243138822881286, 1.774243403246311, 1.7298146158933103, 1.6777139223168287, 1.6291768545204417, 1.5850377151002784, 1.5389974602870717, 1.4992924191145267, 1.459528253456668, 1.42039614042759, 1.387743184642391, 1.3525710542834022, 1.3429526373726297, 1.2948426472087342, 1.2703778637776584, 1.2547520562059702, 1.225619395584431, 1.2049946339060176, 1.1836522261952491, 1.1673190113323837, 1.1510204777442359, 1.1391329752408503, 1.117068276098612, 1.092683135951436, 1.085967373681059, 1.073760735423353, 1.068445040628249, 1.0513230653534067, 1.0515050382473057, 1.0320181767025076, 1.0288416772407705, 1.00538399570323, 1.006353913911062, 1.0017410275832521, 0.9906114655211145, 0.978323491502038, 0.9691206538492994, 0.952662636307583, 0.9540017910322351, 0.9489331002783986, 0.9338839345006045, 0.9303287608496595, 0.9169158058600451, 0.9102346671649478, 0.9157837635222805, 0.9121195518613067, 0.9177441622964962, 0.9055574729599737, 0.90177844561417, 0.8856400464582815, 0.8988589951233416, 0.8823642989962786, 0.8759896811429992, 0.8678885337352564, 0.8678430923696333, 0.8565875804734473, 0.8560884815118316, 0.8556579977781734, 0.8501885786441968, 0.8432404965048123, 0.8476264023935128, 0.8446465838208977, 0.8366110195116581, 0.8393154684358254, 0.8358355350246236, 0.8300538234675423, 0.8327837750234971, 0.8100386380424999, 0.8305873128133695, 0.8227755561276134, 0.8225176812021283, 0.8034900925839975, 0.8056086501220528, 0.812724634617264, 0.8010614660705447, 0.7907454829489345, 0.7970066987969038, 0.7914215354178764, 0.7810020757672526, 0.7904159932041432], "accuracy": [0.10117553919553757, 0.12442214041948318, 0.15493330359458923, 0.19059570133686066, 0.21265354752540588, 0.22744683921337128, 0.2645621597766876, 0.2790912687778473, 0.2989037036895752, 0.320169061422348, 0.33007529377937317, 0.3483027219772339, 0.3704926669597626, 0.3761722445487976, 0.3932109475135803, 0.4039096534252167, 0.40509840846061707, 0.4283449947834015, 0.436930388212204, 0.44670453667640686, 0.4551578462123871, 0.46308282017707825, 0.4644036591053009, 0.48170650005340576, 0.49465063214302063, 0.5000660419464111, 0.5023114681243896, 0.5123497843742371, 0.527010977268219, 0.5408796668052673, 0.5431250929832458, 0.5469554662704468, 0.5509179830551147, 0.5665037631988525, 0.5645225048065186, 0.5703341960906982, 0.5769383311271667, 0.5832782983779907, 0.5900145173072815, 0.5952978730201721, 0.5995244979858398, 0.5992603302001953, 0.6050719618797302, 0.6160348653793335, 0.6136573553085327, 0.6205257177352905, 0.6243560910224915, 0.6283186078071594, 0.629507303237915, 0.6366398334503174, 0.637432336807251, 0.6481310129165649, 0.6407343745231628, 0.6445648074150085, 0.6458855867385864, 0.6540747880935669, 0.6553955674171448, 0.6586976647377014, 0.6601505875587463, 0.6621318459510803, 0.6682076454162598, 0.6712455153465271, 0.6704530715942383, 0.672170102596283, 0.6729626059532166, 0.6762647032737732, 0.6682076454162598, 0.6748117804527283, 0.6732267737388611, 0.6798309087753296, 0.6732267737388611, 0.6827367544174194, 0.683000922203064, 0.6837934255599976, 0.6893408894538879, 0.6903975605964661, 0.6897371411323547, 0.6931713223457336, 0.6952846646308899, 0.6964733600616455, 0.691850483417511, 0.6910579800605774, 0.6970016956329346, 0.6948884129524231, 0.7018887996673584, 0.6976621150970459, 0.6996433734893799, 0.7042662501335144, 0.6989829540252686, 0.6972658634185791, 0.698718786239624, 0.7087571024894714, 0.7077004313468933, 0.7071720957756042, 0.7098137736320496, 0.7112666964530945, 0.7077004313468933, 0.7147008180618286, 0.7129837274551392, 0.7140403985977173], "val_loss": [1.9618588175092424, 1.9529270444597517, 1.9438472475324358, 1.9341961996895927, 1.9241345950535365, 1.9132535798209054, 1.9013628278459822, 1.888106141771589, 1.8733495303562708, 1.8565150669642858, 1.837590285709926, 1.816197054726737, 1.7923619406563895, 1.7659127371651786, 1.7362473351614816, 1.7035197189876012, 1.6672701835632324, 1.6275561196463448, 1.5847127096993583, 1.539309331348964, 1.4921871253422327, 1.443296228136335, 1.3937986237662179, 1.3442233971187048, 1.2954109736851283, 1.2482091699327742, 1.2033630439213343, 1.1615656444004603, 1.1225757258278983, 1.0861688341413225, 1.0522262028285436, 1.0210586615971156, 0.9933204991476876, 0.9671075003487724, 0.9425275666373116, 0.9212636266435895, 0.9011020660400391, 0.8823578698294503, 0.8651294708251953, 0.8486308540616717, 0.834061690739223, 0.8204372950962612, 0.8076893942696708, 0.7952467543738229, 0.7837981155940464, 0.7740352324077061, 0.7647760084697178, 0.7554008279527936, 0.7467283351080758, 0.7384624140603202, 0.7311733620507377, 0.7231796639306205, 0.7168876102992466, 0.7103255816868373, 0.7035320145743233, 0.6980673926217216, 0.692499041557312, 0.6863999026162284, 0.6813559361866542, 0.6767978668212891, 0.6719495568956647, 0.6670888832637242, 0.6629015377589634, 0.6584308998925346, 0.6545228276933942, 0.6509771687643868, 0.6477489641734532, 0.6443568297794887, 0.640764662197658, 0.637638773236956, 0.6347429752349854, 0.6315691471099854, 0.6281670161655971, 0.6254359824316842, 0.6229607207434518, 0.6190824508666992, 0.6165296179907662, 0.6136785575321743, 0.6113202742167881, 0.608197842325483, 0.6062226806368146, 0.6039945227759225, 0.6009517226900373, 0.5997393471854073, 0.597658600125994, 0.5956110273088727, 0.594058666910444, 0.5917736973081317, 0.5900010211127145, 0.588406869343349, 0.5864507300513131, 0.5845137153353009, 0.5825610842023577, 0.5818217992782593, 0.5790495531899589, 0.5775888817650932, 0.5756704466683524, 0.5744769743510655, 0.5714588335582188, 0.570462805884225], "val_accuracy": [0.1106666699051857, 0.19966666400432587, 0.27933332324028015, 0.3413333296775818, 0.3776666522026062, 0.39800000190734863, 0.414000004529953, 0.429666668176651, 0.4429999887943268, 0.45500001311302185, 0.4673333466053009, 0.48266667127609253, 0.4959999918937683, 0.5066666603088379, 0.5163333415985107, 0.5326666831970215, 0.5403333306312561, 0.5450000166893005, 0.5516666769981384, 0.5569999814033508, 0.5643333196640015, 0.5716666579246521, 0.5836666822433472, 0.5913333296775818, 0.5996666550636292, 0.6079999804496765, 0.6163333058357239, 0.6293333172798157, 0.637333333492279, 0.6466666460037231, 0.6549999713897705, 0.6610000133514404, 0.6676666736602783, 0.6713333129882812, 0.675000011920929, 0.6786666512489319, 0.6813333630561829, 0.6816666722297668, 0.6859999895095825, 0.6909999847412109, 0.6916666626930237, 0.6949999928474426, 0.6976666450500488, 0.6990000009536743, 0.7016666531562805, 0.7023333311080933, 0.7036666870117188, 0.7059999704360962, 0.7070000171661377, 0.7080000042915344, 0.7106666564941406, 0.7136666774749756, 0.7139999866485596, 0.7170000076293945, 0.7196666598320007, 0.7203333377838135, 0.7223333120346069, 0.7256666421890259, 0.7266666889190674, 0.7279999852180481, 0.7283333539962769, 0.7279999852180481, 0.7300000190734863, 0.7319999933242798, 0.7336666584014893, 0.734333336353302, 0.7360000014305115, 0.7356666922569275, 0.7396666407585144, 0.7379999756813049, 0.7409999966621399, 0.7390000224113464, 0.7396666407585144, 0.7390000224113464, 0.7436666488647461, 0.7426666617393494, 0.7429999709129333, 0.7480000257492065, 0.7443333268165588, 0.7476666569709778, 0.75, 0.7476666569709778, 0.750333309173584, 0.7509999871253967, 0.750333309173584, 0.7516666650772095, 0.753333330154419, 0.7516666650772095, 0.753333330154419, 0.7513333559036255, 0.7540000081062317, 0.7540000081062317, 0.7546666860580444, 0.7536666393280029, 0.7563333511352539, 0.7553333044052124, 0.7556666731834412, 0.7553333044052124, 0.7573333382606506, 0.7570000290870667]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 32, 29, 49, 25], [0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 1, 1], [4, 7, 6, 8, 0, 7, 3, 9], [3, 3, 0, 3, 1], [75], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 0, 1], [3, 1, 9, 1, 2], [3, 1, 2], [23, 52, 13]], "fitness": -0.7528571486473083, "mapping_values": [1, 1, 1, 0, 1, 0, 8, 8, 4, 4, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(grad, tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.subtract(alpha, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.298342493310691, 2.288625215196087, 2.2774620867991064, 2.2667410364870255, 2.2580346586272513, 2.246755937024067, 2.234417597032919, 2.221927319692819, 2.2070185820093684, 2.187015720850378, 2.1710198699617114, 2.1482333070676654, 2.1260481634317623, 2.099594670736464, 2.0683483762858237, 2.0373130699332047, 2.000952363344877, 1.9610556222979638, 1.9143218120894396, 1.8724194695023404, 1.8243208885224362, 1.7742546427408938, 1.7298237995275685, 1.6777232703500027, 1.629182207475737, 1.5850365568759843, 1.5389954918615885, 1.4992900163805196, 1.4595292321978433, 1.420396138191727, 1.3877393074354334, 1.3525740004580933, 1.3429524376722706, 1.2948366469238506, 1.2703700104819124, 1.254744725834503, 1.22561088648801, 1.204983378524211, 1.183646289522244, 1.167309206395873, 1.1510151872513963, 1.1391216292436082, 1.1170588221768536, 1.0926743065125246, 1.0859663929402033, 1.0737578971369266, 1.0684435627385216, 1.0513186202687264, 1.0514959914730588, 1.032015452366369, 1.0288396501632462, 1.0053857275366138, 1.0063470821685447, 1.0017350697797665, 0.9906168108398353, 0.9783163189950983, 0.9691112732229106, 0.9526546133224282, 0.9539967601278186, 0.9489202638658724, 0.933876169285266, 0.9303026491577567, 0.9169071827109905, 0.9102271082945755, 0.9157870835978295, 0.9121095571519834, 0.9177383043274446, 0.9055459359853874, 0.9017616358998114, 0.8856298507495941, 0.8988613961883241, 0.8823500935663842, 0.8759864818512914, 0.8678788604312458, 0.867848202450369, 0.8565739545021012, 0.8560842097065373, 0.855656146412717, 0.8501837333479042, 0.8432657865564097, 0.8476404395353493, 0.8446546421547324, 0.8366020308541049, 0.8392913750590681, 0.8357983965364193, 0.8300485957205775, 0.8327633292840976, 0.8100271756150514, 0.8305584731481142, 0.8227825382949024, 0.8225060225304611, 0.8034825142521695, 0.8055984695762959, 0.8127205328792707, 0.801044249074838, 0.7907557956389212, 0.7969825984999929, 0.7914276965195712, 0.781009530386574, 0.7904245931206914], "accuracy": [0.10117553919553757, 0.12442214041948318, 0.15493330359458923, 0.19059570133686066, 0.21265354752540588, 0.22757892310619354, 0.2645621597766876, 0.2790912687778473, 0.2989037036895752, 0.3203011453151703, 0.33007529377937317, 0.3483027219772339, 0.37022849917411804, 0.3761722445487976, 0.3932109475135803, 0.4037775695323944, 0.40509840846061707, 0.4283449947834015, 0.436930388212204, 0.44670453667640686, 0.4551578462123871, 0.46308282017707825, 0.46427157521247864, 0.48170650005340576, 0.49465063214302063, 0.5001981258392334, 0.5023114681243896, 0.5124818682670593, 0.527010977268219, 0.5408796668052673, 0.5431250929832458, 0.5468233823776245, 0.5507858991622925, 0.5665037631988525, 0.5645225048065186, 0.5703341960906982, 0.5768062472343445, 0.5830141305923462, 0.5898824334144592, 0.5952978730201721, 0.5995244979858398, 0.5993924140930176, 0.6053361296653748, 0.6160348653793335, 0.6136573553085327, 0.6205257177352905, 0.6243560910224915, 0.6283186078071594, 0.6293752193450928, 0.6366398334503174, 0.6373002529144287, 0.6481310129165649, 0.6407343745231628, 0.6444327235221863, 0.6456214785575867, 0.6538106203079224, 0.655527651309967, 0.6592260003089905, 0.6601505875587463, 0.6621318459510803, 0.6680755615234375, 0.6713775992393494, 0.6704530715942383, 0.6724342703819275, 0.6730946898460388, 0.6762647032737732, 0.6680755615234375, 0.6748117804527283, 0.6732267737388611, 0.6802271604537964, 0.6733588576316833, 0.6826046705245972, 0.6827367544174194, 0.6840575933456421, 0.689869225025177, 0.6906617283821106, 0.6900013089179993, 0.6934354901313782, 0.6952846646308899, 0.6964733600616455, 0.6915863156318665, 0.6911900639533997, 0.6972658634185791, 0.6947563290596008, 0.7016246318817139, 0.6975300312042236, 0.6997754573822021, 0.7042662501335144, 0.6985867023468018, 0.6976621150970459, 0.698718786239624, 0.7086250185966492, 0.7077004313468933, 0.707040011882782, 0.7094175219535828, 0.71100252866745, 0.7074362635612488, 0.7145687341690063, 0.7131158113479614, 0.7140403985977173], "val_loss": [1.9618588175092424, 1.9529270444597517, 1.9438472475324358, 1.9341961996895927, 1.9241346631731306, 1.9132535117013114, 1.9013630322047643, 1.8881068229675293, 1.873349939073835, 1.856515339442662, 1.8375904219491142, 1.8161978040422713, 1.7923626218523299, 1.7659141676766532, 1.7362492425101144, 1.7035229546683175, 1.6672749859946114, 1.6275617395128523, 1.5847186020442419, 1.5393154621124268, 1.4921972411019462, 1.4433045727866036, 1.3938094207218714, 1.3442258494240897, 1.2954081467219762, 1.2482005528041296, 1.2033564703805106, 1.1615584918430872, 1.1225732394627161, 1.0861612047467912, 1.052224942616054, 1.0210590703146798, 0.9933192729949951, 0.9671062060764858, 0.942523547581264, 0.9212611402784076, 0.9010986600603376, 0.8823555537632534, 0.865120427949088, 0.8486191374914986, 0.8340548958097186, 0.8204268727983747, 0.8076897689274379, 0.7952416624341693, 0.7837881020137242, 0.7740247249603271, 0.7647672380719867, 0.7553912741797311, 0.7467218467167446, 0.7384578159877232, 0.7311651536396572, 0.7231761728014264, 0.7168854304722377, 0.710323623248509, 0.7035309416907174, 0.6980545180184501, 0.6924887384687152, 0.6863876581192017, 0.6813557999474662, 0.6768002510070801, 0.6719446011951992, 0.6670798914773124, 0.6629031726292202, 0.6584274768829346, 0.6545218058994838, 0.6509748526981899, 0.6477466140474591, 0.644351737839835, 0.6407570157732282, 0.6376148973192487, 0.6347282784325736, 0.6315753289631435, 0.6281744582312447, 0.6254467964172363, 0.6229832683290754, 0.6190910850252423, 0.6165329388209752, 0.6136810949870518, 0.6113143989018032, 0.6081949983324323, 0.6062177249363491, 0.6039617913109916, 0.6009539025170463, 0.5997391939163208, 0.597648058618818, 0.5955980334963117, 0.5940601314817157, 0.5917861121041434, 0.5900177104132516, 0.5884004320417132, 0.5864431176866803, 0.5844780717577253, 0.5825214215687343, 0.5818183251789638, 0.5790304967335292, 0.5775721754346576, 0.5756455148969378, 0.5744549717221942, 0.5714335441589355, 0.5704531839915684], "val_accuracy": [0.1106666699051857, 0.19966666400432587, 0.27933332324028015, 0.3413333296775818, 0.3776666522026062, 0.39800000190734863, 0.414000004529953, 0.429666668176651, 0.4429999887943268, 0.45500001311302185, 0.46700000762939453, 0.4830000102519989, 0.4959999918937683, 0.5066666603088379, 0.5163333415985107, 0.5326666831970215, 0.5403333306312561, 0.5450000166893005, 0.5513333082199097, 0.5569999814033508, 0.5640000104904175, 0.5713333487510681, 0.5833333134651184, 0.5913333296775818, 0.5996666550636292, 0.6076666712760925, 0.6163333058357239, 0.6290000081062317, 0.6370000243186951, 0.6466666460037231, 0.6549999713897705, 0.6610000133514404, 0.6676666736602783, 0.6713333129882812, 0.6746666431427002, 0.6786666512489319, 0.6813333630561829, 0.6816666722297668, 0.6859999895095825, 0.6909999847412109, 0.6916666626930237, 0.6949999928474426, 0.6976666450500488, 0.6990000009536743, 0.7016666531562805, 0.7023333311080933, 0.7036666870117188, 0.7059999704360962, 0.7070000171661377, 0.7080000042915344, 0.7106666564941406, 0.7129999995231628, 0.7143333554267883, 0.7170000076293945, 0.7200000286102295, 0.7206666469573975, 0.7223333120346069, 0.7256666421890259, 0.7266666889190674, 0.7279999852180481, 0.7283333539962769, 0.7279999852180481, 0.7296666502952576, 0.7319999933242798, 0.7333333492279053, 0.734333336353302, 0.7360000014305115, 0.7356666922569275, 0.7396666407585144, 0.7379999756813049, 0.7406666874885559, 0.7393333315849304, 0.7396666407585144, 0.7393333315849304, 0.7436666488647461, 0.7426666617393494, 0.7429999709129333, 0.7483333349227905, 0.7443333268165588, 0.7480000257492065, 0.75, 0.7483333349227905, 0.7509999871253967, 0.7509999871253967, 0.750333309173584, 0.7519999742507935, 0.753000020980835, 0.7516666650772095, 0.753000020980835, 0.7513333559036255, 0.7540000081062317, 0.7540000081062317, 0.7546666860580444, 0.7536666393280029, 0.7563333511352539, 0.7553333044052124, 0.7556666731834412, 0.7553333044052124, 0.7573333382606506, 0.7570000290870667]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [31, 32, 29, 49, 25], [1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1], [3, 2, 6, 6, 3, 7, 4, 9, 2, 3, 0, 2, 1, 6, 4, 3, 3, 8], [1, 3, 3, 1, 1, 5, 3, 2, 1, 4, 4, 0], [98], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [2], [64], [0, 1, 0, 1, 1, 1], [3, 1, 9, 1, 2], [1, 3, 2], [97, 52, 13]], "fitness": -0.24485714733600616, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 2, 3, 0, 1, 1, 0, 1, 0, 5, 2, 3, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.multiply(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(sigma, beta))", "other_info": {"loss": [2.299410627282228, 2.271989835141562, 2.06511120250779, NaN, NaN, NaN, NaN], "accuracy": [0.10077928751707077, 0.16299036145210266, 0.2782987654209137, 0.11728965491056442, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9564953531537737, 1.895150865827288, 29.463875906808035, NaN, NaN, NaN, NaN], "val_accuracy": [0.16200000047683716, 0.28700000047683716, 0.23000000417232513, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 32, 29, 49, 25], [0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [1, 7, 6, 5, 0, 2, 3, 9, 4, 7, 8, 5, 8, 9], [3, 3, 0, 3, 1, 0, 4, 3, 0], [29, 99, 94, 50], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1], [3, 1, 1, 1, 2, 3, 8, 5, 2], [3, 0, 2, 1, 0, 1, 0, 1], [54, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 20, 20, 14, 6, 4, 1, 1, 0, 1, 0, 17, 9, 8, 3], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))), tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha)))))), tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.subtract(tf.math.subtract(tf.math.subtract(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32), beta), tf.math.add(tf.math.multiply(alpha, tf.math.sqrt(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))), alpha)), tf.math.square(tf.math.add(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), alpha))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.15255580842494965, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 32, 29, 49, 25], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 0, 1], [4, 7, 6, 8, 0, 7, 3, 9], [3, 3, 0, 3, 1], [75], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [1, 1, 0, 1, 0, 1], [9, 1, 9, 1, 2], [3, 1, 2], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 5, 4, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(grad, tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07806102186441422, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 2, 4, 0, 5, 5, 8, 4, 4, 6, 3, 6], [1, 0, 1, 0, 2, 1, 2, 2, 0], [31, 32, 29, 49, 25], [1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [3, 4, 6, 2, 3, 7, 3, 9, 5, 3, 1, 0, 2, 8, 9, 2, 0, 3, 3], [2, 3, 3, 3, 1, 5, 1, 0, 4, 5, 1, 2], [98, 85, 73], [0, 1, 1, 0, 1], [0, 0, 1], [3, 2, 8, 4], [6], [64], [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1], [3, 0, 3, 2, 2, 7, 3, 6, 1, 0, 8, 4, 6, 1, 0, 1], [1, 0, 2, 2, 0, 0, 2, 0, 1, 0, 0, 2, 2, 3], [92, 52, 13, 12, 0, 18]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 31, 31, 19, 12, 3, 3, 1, 1, 0, 0, 24, 13, 11, 6], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))), tf.math.square(tf.math.multiply(grad, tf.math.add(beta, grad))))), alpha), tf.math.add(beta, tf.math.subtract(tf.math.negative(tf.math.add(beta, grad)), tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))), alpha))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), grad)))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), alpha)), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), beta)), beta)), tf.math.add(tf.math.multiply(tf.math.divide_no_nan(tf.math.subtract(tf.math.negative(tf.math.sqrt(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), beta), tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)), tf.math.pow(alpha, tf.math.divide_no_nan(tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32), tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 2, 1, 2, 2, 0], [31, 32, 29, 49, 25], [1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 0, 1], [4, 7, 6, 5, 0, 7, 3, 9], [3, 1, 3, 1, 1, 5, 1, 2, 1, 4, 4, 0, 5, 2, 3, 3], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 0, 0, 0, 1, 0, 1, 1, 1], [3, 2, 9, 2, 2, 7], [3, 1, 2, 0], [81, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 5, 4, 0, 1, 0, 0, 0, 0, 9, 5, 4, 2], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.pow(grad, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.add(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, tf.math.add(alpha, beta))), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 2, 4, 0, 5, 5, 8, 4, 4, 6, 3, 6], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [31, 32, 29, 49, 25], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [3, 2, 6, 6, 3, 7, 4, 9, 2, 3, 0, 2, 1, 6, 4, 3, 3, 8], [1, 3, 3, 1, 1, 5, 3, 2, 1, 4, 4, 0], [98], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [3], [64], [0, 1, 0, 0, 1, 1, 1], [3, 9, 9, 2, 2, 7], [1, 3, 2], [97, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 15, 15, 8, 7, 1, 1, 1, 0, 1, 0, 3, 2, 1, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, grad))), grad), tf.math.add(beta, alpha))), tf.math.pow(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), alpha))), grad), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07806102186441422, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 32, 29, 49, 25], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 0, 1], [4, 7, 6, 8, 0, 7, 3, 9], [3, 3, 0, 3, 1], [75], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 0, 1], [2, 1, 9, 1, 2], [3, 1, 2], [97, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 5, 4, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(grad, tf.math.add(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(alpha, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09615638852119446, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 32, 29, 49, 25], [0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1], [3, 2, 6, 6, 3, 7, 3, 9, 2, 3, 0, 2, 1, 6, 4, 3, 3, 8], [3, 3, 0, 3, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [1, 1, 0, 1, 0, 1], [3, 1, 9, 1, 2], [0, 2, 0, 2], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 23, 23, 13, 10, 5, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.square(alpha), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, grad)))))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3026180510759637, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 32, 29, 49, 25], [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 1, 1], [4, 7, 6, 5, 0, 7, 3, 9], [0, 3, 3, 3, 1], [75], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 0, 1], [2, 1, 9, 1, 2], [3, 1, 2], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 8, 8, 4, 4, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.pow(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(alpha, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09602430462837219, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [4, 2, 8, 6, 2, 2, 0, 1, 5, 8, 4, 4, 6, 3, 6], [1, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [31, 95, 29, 49, 25], [0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1], [3, 1, 6, 2, 3, 7, 3, 9, 8, 9], [2, 3, 3, 3, 1, 0], [98, 18, 66], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1], [1, 3, 2, 8, 2, 3], [3, 3, 2, 0, 3, 0, 3], [92, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 16, 16, 10, 6, 3, 1, 1, 0, 1, 0, 12, 6, 6, 2], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(beta, tf.math.subtract(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(grad, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(sigma, sigma), tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32), sigma)))), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [31, 32, 29, 49, 25], [1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1], [3, 0, 6, 2, 3, 7, 3, 9, 6, 2, 3], [2, 3, 3, 3, 1, 0, 4, 0, 0, 5], [98, 80, 68, 86], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0], [3, 0, 1, 2, 2, 7, 7, 8, 2, 6, 2, 5, 3, 3, 1, 1, 0, 0, 2, 0, 5, 9], [3, 2, 2, 0, 2, 0, 2, 1, 1, 2, 1, 3, 3, 0], [23, 52, 13, 63]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 20, 20, 11, 9, 4, 1, 0, 0, 0, 0, 36, 22, 14, 4], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.add(beta, grad), grad), alpha), tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.divide_no_nan(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.subtract(tf.math.add(sigma, tf.math.add(beta, beta)), tf.math.add(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))))), tf.math.sqrt(tf.math.add(tf.math.divide_no_nan(beta, tf.math.add(tf.math.square(alpha), tf.math.multiply(tf.math.multiply(alpha, tf.math.subtract(beta, tf.math.subtract(tf.math.negative(tf.math.negative(alpha)), tf.math.add(sigma, sigma)))), tf.math.negative(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))))), tf.math.square(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [2.3026180510759637, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 8, 6, 2, 4, 0, 5, 5, 8, 4, 4, 6, 3, 6], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [31, 32, 29, 49, 25], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1], [4, 7, 6, 5, 0, 7, 3, 9], [2, 4, 3, 3, 1, 0], [98], [0, 1, 1, 0, 1], [0, 0, 1], [3, 2, 8, 4], [6], [64], [0, 0, 0, 1, 0, 1], [0, 1, 9, 1, 2], [2, 1, 2], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 13, 13, 7, 6, 1, 3, 1, 1, 0, 0, 4, 3, 1, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))))), tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 32, 29, 49, 25], [1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 0, 1], [4, 9, 6, 5, 0, 7, 3, 9], [3, 3, 0, 3, 1], [94], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 0, 1], [3, 1, 9, 1, 2], [0, 0, 2], [23, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 2, 1, 1, 1, 0, 0, 0, 0, 5, 3, 2, 3], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.pow(grad, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3026180510759637, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 9, 3, 6, 2, 2, 6, 1, 5, 9, 4, 2, 6, 3, 6, 5, 9], [3, 0, 1, 0, 2, 1, 2, 2, 0], [31, 32, 29, 49, 25], [1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0], [0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1], [3, 4, 6, 2, 3, 7, 5, 6, 9], [3, 0, 3, 1, 1, 2, 1, 2, 1, 4, 4, 0, 5, 2, 3, 3], [98, 85, 73], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 0, 1], [3, 0, 9, 2, 2, 7], [1, 1, 2], [23, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 3, 3, 1, 2, 1, 14, 14, 7, 7, 1, 1, 0, 0, 0, 0, 4, 2, 2, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), grad), alpha)), tf.math.add(beta, tf.math.add(tf.math.square(alpha), tf.math.add(beta, beta))))), alpha))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.negative(alpha))", "other_info": {"loss": [2.302448888228727, 2.30252665264763, 2.30131827035616, 2.3012334579615907, 2.303084372371935, 2.3030389876271817], "accuracy": [0.09074098616838455, 0.08836349099874496, 0.0940430611371994, 0.09879804402589798, 0.09272222965955734, 0.08651433140039444], "val_loss": [1.9709495135716029, 1.971003464290074, 1.9711369105747767, 1.9713710376194544, 1.9716933114188058, 1.97213533946446], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03733333200216293, 0.03733333200216293, 0.03500000014901161, 0.03133333474397659]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 32, 29, 49, 25], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1], [4, 1, 6, 5, 0, 7, 3, 9], [3, 0, 0, 3, 1], [98, 76, 55], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 1, 0, 1, 0, 1], [3, 1, 9, 1, 2], [3, 1, 2], [23, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 1, 1, 0, 1, 0, 13, 13, 8, 5, 3, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), tf.math.add(beta, alpha)))))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.subtract(alpha, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.30244632907878, 2.302489705262734, 2.3011814901747205, 2.300871166145608, 2.3023566185695903, 2.3019354485123937], "accuracy": [0.09074098616838455, 0.08849557489156723, 0.0944393053650856, 0.1002509593963623, 0.09470347315073013, 0.08849557489156723], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 32, 29, 49, 25], [0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 1, 1, 1], [3, 0, 6, 2, 3, 7, 3, 9], [3, 3, 0, 3, 1], [98], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [1, 1, 0, 1, 0, 1], [3, 1, 9, 1, 2], [3, 3, 2], [23, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 1, 1, 0, 1, 0, 4, 4, 2, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(grad, tf.math.negative(tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.30244632907878, 2.302489705262734, 2.3011814901747205, 2.300871166145608, 2.3023566185695903, 2.3019354485123937], "accuracy": [0.09074098616838455, 0.08849557489156723, 0.0944393053650856, 0.1002509593963623, 0.09470347315073013, 0.08849557489156723], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 9, 3, 6, 2, 2, 6, 1, 5, 9, 4, 2, 6, 3, 6, 5, 9], [1, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0], [31, 32, 29, 49, 25], [1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1], [0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1], [3, 4, 6, 2, 3, 7, 3, 9], [2, 1, 3, 3, 1, 3], [98], [0, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [6], [64], [0, 0, 0, 1, 0, 1], [3, 0, 9, 2, 2, 7], [1, 1, 2], [23, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 1, 1, 0, 1, 0, 11, 11, 5, 6, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, beta), tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(alpha, tf.math.multiply(grad, grad))), tf.math.add(beta, alpha)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [2.30244632907878, 2.302489705262734, 2.3011814901747205, 2.300871166145608, 2.3023566185695903, 2.3019354485123937], "accuracy": [0.09074098616838455, 0.08849557489156723, 0.0944393053650856, 0.1002509593963623, 0.09470347315073013, 0.08849557489156723], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}]