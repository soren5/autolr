[{"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1], [4, 6, 2, 3, 2, 2, 3, 9, 7, 9, 7, 6, 7, 9, 5, 9, 8, 6, 8], [1, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0], [85, 80, 14, 73], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8471428751945496, "mapping_values": [1, 4, 4, 2, 2, 1, 28, 28, 19, 9, 4, 4, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad))), grad), tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(grad, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))), alpha)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, sigma))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.0896143899885358, 1.1620582216419895, 0.8356166540466327, 0.7423492167304929, 0.6724156707804736, 0.6269645554325631, 0.5894234641085463, 0.556226961301885, 0.5301650504961368, 0.497450276825485, 0.484596241521892, 0.46119261601613326, 0.4405953401760922, 0.43058684522591373, 0.42740346562388454, 0.4122932384932408, 0.38807409917909896, 0.3915711605136326, 0.37872049660415635, 0.3655089899068968, 0.34582079029228113, 0.33432998781694856, 0.3303944732432415, 0.31390736702489597, 0.3028162123504773, 0.30558299297165986, 0.29232085217590015, 0.2804978496016544, 0.279076249230067, 0.2687292474332723, 0.26417761009367086, 0.24718182898783303, 0.24830312321506015, 0.2463415326372728, 0.22729262575190284], "accuracy": [0.2965262234210968, 0.5964865684509277, 0.6929071545600891, 0.7124554514884949, 0.7457403540611267, 0.7589486241340637, 0.7770439982414246, 0.7862898111343384, 0.8016114234924316, 0.8136309385299683, 0.8195747137069702, 0.8273676037788391, 0.8342359066009521, 0.8392550349235535, 0.8376700282096863, 0.8450667262077332, 0.854708731174469, 0.8565579056739807, 0.8569541573524475, 0.8615770936012268, 0.870030403137207, 0.8735966086387634, 0.8776912093162537, 0.8837670087814331, 0.8836349248886108, 0.8842953443527222, 0.8881257176399231, 0.8907673954963684, 0.894069492816925, 0.8975036144256592, 0.8973715305328369, 0.9014661312103271, 0.904768168926239, 0.9066173434257507, 0.9133535623550415], "val_loss": [1.0240843296051025, 0.6852763380323138, 0.5704802445002964, 0.5395409209387643, 0.5032419647489276, 0.46707519463130404, 0.45575336047581266, 0.440270049231393, 0.40777914013181416, 0.3980743629591806, 0.38632323912211824, 0.3759736844471523, 0.371818482875824, 0.3638249124799456, 0.35601041998182026, 0.35504445859364103, 0.33628407546452116, 0.33698706115995136, 0.33319030489240375, 0.3274736319269453, 0.3272595490728106, 0.32004914964948383, 0.32460592474256245, 0.3204849532672337, 0.32765449796404156, 0.3153179628508432, 0.32698942933763775, 0.3098995430128915, 0.31837925740650724, 0.30596125977379934, 0.3229997583798, 0.31740983043398174, 0.30658905846732004, 0.3186903510774885, 0.312896055834634], "val_accuracy": [0.5973333120346069, 0.722000002861023, 0.7506666779518127, 0.7490000128746033, 0.7756666541099548, 0.7903333306312561, 0.8046666383743286, 0.8016666769981384, 0.8230000138282776, 0.8326666951179504, 0.8396666646003723, 0.843999981880188, 0.8420000076293945, 0.846666693687439, 0.8529999852180481, 0.856333315372467, 0.859666645526886, 0.8636666536331177, 0.8606666922569275, 0.8656666874885559, 0.8676666617393494, 0.8676666617393494, 0.8683333396911621, 0.8650000095367432, 0.8696666955947876, 0.874666690826416, 0.871999979019165, 0.8759999871253967, 0.871999979019165, 0.8809999823570251, 0.8713333606719971, 0.874666690826416, 0.8769999742507935, 0.8743333220481873, 0.8809999823570251]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1], [4, 1, 5, 3, 2, 2, 3, 9, 3, 8, 5, 4, 1, 1, 9, 1, 4, 5, 2, 0, 3, 5, 0, 5], [0, 0, 3, 3, 1, 5, 3, 2, 1, 2, 4, 0, 5], [24, 80, 3, 57], [0, 0, 1, 0, 0, 0, 1, 1], [1, 0, 1, 1, 0], [8, 7, 8, 4], [4, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8462857007980347, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.089614488933348, 1.162192190493323, 0.8357944262498531, 0.7442111570396444, 0.66907768489001, 0.6283593289116197, 0.588724430809404, 0.5555515279938059, 0.5273927235804875, 0.49515566242023024, 0.4836219976197428, 0.4617152226410522, 0.4392206324263177, 0.4274898871706619, 0.4277516945462421, 0.4117827084062594, 0.3920909009195826, 0.38842606348069336, 0.3744422072401262, 0.3595260922793211, 0.34722598472748134, 0.33738788811600895, 0.32708779887878475, 0.3176748745744695, 0.30678754723335, 0.311518474494178, 0.2937851853185499, 0.28532206264658216, 0.2817222626335853, 0.2726329609489932, 0.26612039675620947, 0.25441415401072537, 0.25041604271544093, 0.249791486081257, 0.23581338333234875, 0.22864335286870782, 0.22529513754660127, 0.21952599423034963, 0.2100590869022666, 0.209881580792335, 0.20075881302262247, 0.20679094301215126], "accuracy": [0.2965262234210968, 0.5963544845581055, 0.6929071545600891, 0.7112666964530945, 0.7471932172775269, 0.7601373791694641, 0.7773081660270691, 0.7886672616004944, 0.8025360107421875, 0.8158763647079468, 0.8215559124946594, 0.8260467648506165, 0.8350284099578857, 0.8383304476737976, 0.8391229510307312, 0.8504821062088013, 0.8521991968154907, 0.8582749962806702, 0.8562937378883362, 0.8651432991027832, 0.8712190985679626, 0.8709549307823181, 0.8812574148178101, 0.8778232932090759, 0.8831065893173218, 0.8811253309249878, 0.8844274282455444, 0.8918240666389465, 0.8922203183174133, 0.8963148593902588, 0.8989565372467041, 0.89988112449646, 0.9063531756401062, 0.9012019634246826, 0.9080702662467957, 0.9097873568534851, 0.9141460657119751, 0.9124290347099304, 0.919561505317688, 0.917580246925354, 0.9207502603530884, 0.920089840888977], "val_loss": [1.0240894726344518, 0.6851727110998971, 0.5703682218279157, 0.5418512140001569, 0.5033883878162929, 0.4668638365609305, 0.45661113943372456, 0.44088918822152273, 0.4080625857625689, 0.3978619320052011, 0.38196559463228497, 0.3742088420050485, 0.3720192313194275, 0.3728327325412205, 0.35971323932920185, 0.352754465171269, 0.33637997933796476, 0.33319538831710815, 0.32776348079953876, 0.3227247084890093, 0.324843236378261, 0.3156534603663853, 0.3282108817781721, 0.31706548588616507, 0.3262594427381243, 0.31760276215417044, 0.3287647196224758, 0.30717389072690693, 0.309995915208544, 0.30384124176842825, 0.3135687623705183, 0.3183903864451817, 0.3050263098308018, 0.31029375961848665, 0.3069862978799002, 0.31032211439950125, 0.3136847870690482, 0.329476603439876, 0.3188248447009495, 0.32673252480370657, 0.33128998960767475, 0.3451939565794809], "val_accuracy": [0.5973333120346069, 0.7223333120346069, 0.7490000128746033, 0.746999979019165, 0.7756666541099548, 0.7919999957084656, 0.8016666769981384, 0.7979999780654907, 0.824999988079071, 0.8356666564941406, 0.8429999947547913, 0.846666693687439, 0.8426666855812073, 0.8353333473205566, 0.8489999771118164, 0.8543333411216736, 0.8586666584014893, 0.8653333187103271, 0.8683333396911621, 0.8656666874885559, 0.8713333606719971, 0.8686666488647461, 0.8706666827201843, 0.8706666827201843, 0.8696666955947876, 0.8733333349227905, 0.8693333268165588, 0.878000020980835, 0.8743333220481873, 0.8786666393280029, 0.8763333559036255, 0.8759999871253967, 0.8793333172798157, 0.8769999742507935, 0.8826666474342346, 0.871666669845581, 0.8840000033378601, 0.8726666569709778, 0.8803333044052124, 0.878333330154419, 0.8786666393280029, 0.871999979019165]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1], [4, 6, 9, 3, 2, 2, 3, 9], [0, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 80, 3], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8391428589820862, "mapping_values": [1, 4, 4, 2, 2, 1, 13, 13, 8, 5, 3, 4, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad))), grad), tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, sigma))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.089617807489455, 1.1626245076268058, 0.8359636125342879, 0.7439980758746475, 0.670855593349105, 0.6289637140263467, 0.5895813635595093, 0.5540164296479981, 0.5280181494143031, 0.49481473892450867, 0.4852236846828221, 0.46340332760975866, 0.4423785812905782, 0.4288300889956402, 0.42620233895205206, 0.4111426923418593, 0.3873290267673702, 0.3863128605197213, 0.3719156331445059, 0.36289075183877856, 0.3502094064012668, 0.33731636277058846, 0.3234104999280672, 0.3133410097010903, 0.3027106731236493, 0.31082298940340636, 0.29168567543236995, 0.2812603784235729, 0.28292442480917257, 0.26736916264113403, 0.26640043347156783, 0.2546699739320482, 0.24570156452583677, 0.24497837706831516, 0.23116916301952392, 0.2224611394700751, 0.219802591645124, 0.21547465505042268, 0.20966033655040536, 0.21887631505322322], "accuracy": [0.2965262234210968, 0.5963544845581055, 0.6919825673103333, 0.7129837274551392, 0.7458723783493042, 0.7582882046699524, 0.7749306559562683, 0.7876105904579163, 0.8035926818847656, 0.8156121969223022, 0.8191784620285034, 0.8236692547798157, 0.8305375576019287, 0.8391229510307312, 0.8417646288871765, 0.8487650156021118, 0.8552370667457581, 0.8561616539955139, 0.856689989566803, 0.869502067565918, 0.8692378997802734, 0.8733324408531189, 0.8795403242111206, 0.8802007436752319, 0.8881257176399231, 0.8803328275680542, 0.8891823887825012, 0.8947299122810364, 0.8926165699958801, 0.8996169567108154, 0.8973715305328369, 0.9037115573883057, 0.9060890078544617, 0.9074098467826843, 0.9100515246391296, 0.9140139818191528, 0.9163914918899536, 0.91559898853302, 0.9170519113540649, 0.9133535623550415], "val_loss": [1.024202721459525, 0.6859491893223354, 0.5689666952405658, 0.5404999596732003, 0.503795862197876, 0.46341563974108013, 0.4565333638872419, 0.44073929105486187, 0.4093361326626369, 0.3987144316945757, 0.3801803077970232, 0.37245207173483713, 0.3732501779283796, 0.3691959466253008, 0.35921073811394827, 0.35408257586615427, 0.3342180677822658, 0.33102783135005404, 0.332690817969186, 0.32630960430417744, 0.3250484211104257, 0.3215575729097639, 0.33182380880628315, 0.3168495808328901, 0.3295784166881016, 0.31698509625026156, 0.32858567578451975, 0.3079903040613447, 0.31460208552224295, 0.3050557885851179, 0.3178774544170925, 0.31248730421066284, 0.30647607360567364, 0.31960850954055786, 0.30232718161174227, 0.3085507495062692, 0.3082930530820574, 0.33344522544315885, 0.31711258207048687, 0.3289664898599897], "val_accuracy": [0.5973333120346069, 0.7203333377838135, 0.7490000128746033, 0.7490000128746033, 0.7730000019073486, 0.7943333387374878, 0.8050000071525574, 0.7996666431427002, 0.8206666707992554, 0.8349999785423279, 0.8453333377838135, 0.8429999947547913, 0.8410000205039978, 0.8396666646003723, 0.8503333330154419, 0.8546666502952576, 0.859666645526886, 0.862666666507721, 0.862333357334137, 0.8653333187103271, 0.8703333139419556, 0.8669999837875366, 0.8686666488647461, 0.8696666955947876, 0.8686666488647461, 0.875, 0.875333309173584, 0.875333309173584, 0.871999979019165, 0.8776666522026062, 0.874666690826416, 0.8790000081062317, 0.8786666393280029, 0.8736666440963745, 0.8843333125114441, 0.8803333044052124, 0.8840000033378601, 0.8813333511352539, 0.8773333430290222, 0.875333309173584]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [1, 6, 9, 3, 2, 2, 3, 9, 0], [3, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 98, 3], [0, 0, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [8, 2, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.7997142672538757, "mapping_values": [1, 4, 4, 2, 2, 1, 14, 14, 9, 5, 2, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), grad), tf.math.negative(tf.math.add(beta, grad)))))))), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, sigma))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2318628807077947, 1.851406034288342, 1.3199886425280567, 1.1404106097214446, 0.9955885845199945, 0.9168951226467974, 0.8462257309439254, 0.8159007572573505, 0.7879363157729966, 0.7822372214102301, 0.729780869823421, 0.7306163048999279, 0.7092267499545057, 0.691085195898805, 0.6970196229087962, 0.6655149378513285, 0.6610837674899864, 0.6469709665909765, 0.6456318405625244, 0.6161743904999172, 0.6307098176091686, 0.6255776786911269, 0.6212421310749414, 0.6193618277564356, 0.5907982005072843, 0.5858358071071125, 0.5888105805256206, 0.5858729717328706, 0.5790605760678765, 0.5795050165152836], "accuracy": [0.24474970996379852, 0.44168537855148315, 0.5462950468063354, 0.5972790718078613, 0.6482630968093872, 0.6680755615234375, 0.6931713223457336, 0.7034738063812256, 0.7104741930961609, 0.7084929347038269, 0.7327961921691895, 0.7275128960609436, 0.7383436560630798, 0.7412495017051697, 0.7395324110984802, 0.7553823590278625, 0.7552502751350403, 0.761590301990509, 0.7552502751350403, 0.7713643908500671, 0.7626469135284424, 0.7655527591705322, 0.7658169269561768, 0.7658169269561768, 0.7814027070999146, 0.7775723338127136, 0.7820631265640259, 0.7777044177055359, 0.7800818681716919, 0.7796856164932251], "val_loss": [1.7689979416983468, 1.1695106029510498, 0.9152289799281529, 0.7411655698503766, 0.715733562197004, 0.6593291078295026, 0.6192412717001778, 0.5879976919719151, 0.5815660612923759, 0.5678166832242694, 0.5412610598972866, 0.5478901522500175, 0.5495107344218663, 0.5133517810276577, 0.5194919109344482, 0.510302220072065, 0.5068223476409912, 0.4874831438064575, 0.4974258967808315, 0.4993841307503836, 0.4951477902276175, 0.48367459433419363, 0.4897026675088065, 0.4892389604023525, 0.46183386870792936, 0.46545677525656565, 0.4768112897872925, 0.4729254075459072, 0.46059771946498324, 0.46352362632751465], "val_accuracy": [0.49533334374427795, 0.6129999756813049, 0.6159999966621399, 0.7053333520889282, 0.6643333435058594, 0.7096666693687439, 0.7329999804496765, 0.7459999918937683, 0.7493333220481873, 0.7570000290870667, 0.7609999775886536, 0.7556666731834412, 0.749666690826416, 0.781000018119812, 0.7766666412353516, 0.7706666588783264, 0.781000018119812, 0.7923333048820496, 0.7873333096504211, 0.7743333578109741, 0.781000018119812, 0.7950000166893005, 0.7860000133514404, 0.7850000262260437, 0.8083333373069763, 0.7946666479110718, 0.7943333387374878, 0.7883333563804626, 0.8013333082199097, 0.7943333387374878]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [17, 32, 5, 49, 25], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1], [6, 6, 9, 3, 2, 2, 3, 9, 1, 3, 8, 4, 6, 8], [5, 0, 3, 3, 1, 5, 3, 2, 1, 2, 4, 0, 5], [24, 80, 3, 57], [0, 0, 1, 0, 0, 0, 1, 1], [1, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.7179999947547913, "mapping_values": [1, 4, 4, 2, 2, 1, 13, 13, 8, 5, 3, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.add(grad, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), grad)), tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))))), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2989673460825735, 2.2760047486209127, 2.234094980858604, 2.164747792842161, 2.046626737467003, 1.8514812686235174, 1.6032931952034997, 1.4244843171241497, 1.3537611573710182, 1.3071224435665951, 1.2029108926998295, 1.0474149616812325, 0.9485026630018807, 0.9062969477389861, 0.9089011005154848, 0.8755488744454062, 0.8375013826891983, 0.8057077008467687, 0.8040996551702618, 0.7747899962847715, 0.7609988026977326, 0.7629209387225245, 0.7374386236085364, 0.7078877762009235, 0.7046167197764085, 0.6885015545913556, 0.6941161517217694, 0.6685228903437523, 0.6715062265823767, 0.6621047726412491, 0.6539039341544651, 0.6518915704433172, 0.6276952097161161, 0.6258815594589264, 0.6208737810227093, 0.6133762155431309, 0.605784840918236, 0.5981972504206904, 0.5898279382678354, 0.590231460768234, 0.583419560071358, 0.5669262032026408, 0.5697202219655721, 0.5568153317483849, 0.5650651704885579, 0.5527420652351989, 0.54585774923281, 0.5347797098082322, 0.5342566853800249, 0.5311197799509543, 0.528988763235343, 0.5235715276057206, 0.5110698010053586, 0.5093208992438719, 0.5110084795287383, 0.49037869967615694, 0.4954028615208665, 0.48788900049276607, 0.4764238400481963, 0.4750977035849527, 0.4704484704967031, 0.46572607631665086, 0.46984877308535145, 0.46174116961125605], "accuracy": [0.09734513610601425, 0.160084530711174, 0.2616563141345978, 0.3397173285484314, 0.3932109475135803, 0.422929584980011, 0.47206446528434753, 0.5037643909454346, 0.5374455451965332, 0.5646545886993408, 0.5978074073791504, 0.6333377361297607, 0.6568484902381897, 0.6571126580238342, 0.669792652130127, 0.6917183995246887, 0.69673752784729, 0.6973979473114014, 0.698718786239624, 0.7083608508110046, 0.7047945857048035, 0.7013604640960693, 0.7082287669181824, 0.7240787148475647, 0.7251353859901428, 0.7255316376686096, 0.7277770638465881, 0.7429665923118591, 0.7423061728477478, 0.7458723783493042, 0.7523444890975952, 0.7560427784919739, 0.7593448758125305, 0.7618544697761536, 0.7621186375617981, 0.7685906887054443, 0.7684586048126221, 0.7732135653495789, 0.7749306559562683, 0.7766477465629578, 0.7778365015983582, 0.7815347909927368, 0.7839123010635376, 0.7853652238845825, 0.7839123010635376, 0.7895918488502502, 0.7927618622779846, 0.7992339134216309, 0.7957997918128967, 0.8013472557067871, 0.7968564033508301, 0.8024039268493652, 0.8125742673873901, 0.8087438941001892, 0.8105930685997009, 0.813498854637146, 0.8109893202781677, 0.8186501264572144, 0.8220842480659485, 0.8212917447090149, 0.8257825970649719, 0.8248580098152161, 0.8219521641731262, 0.824329674243927], "val_loss": [1.9586777687072754, 1.9274304934910365, 1.8781710352216447, 1.7937000819614954, 1.6398376056126185, 1.3933906555175781, 1.1316145828792028, 0.9399501255580357, 0.8071520498820713, 0.7495301791599819, 0.6991847242627826, 0.7018706287656512, 0.664529834474836, 0.6864947591509137, 0.6877581051417759, 0.6567395755222866, 0.6171058416366577, 0.5987847873142788, 0.5868200574602399, 0.5728216852460589, 0.57545724936894, 0.5758947304316929, 0.5620655332292829, 0.5468627555029733, 0.5390936476843697, 0.5357385533196586, 0.5326672622135707, 0.5272869723183768, 0.5225744928632464, 0.5184923921312604, 0.5146386112485614, 0.5108462912695748, 0.5060359920774188, 0.5025886808122907, 0.49680144446236746, 0.49013003281184603, 0.48402449062892366, 0.47847303322383333, 0.4739076410021101, 0.4694915328707014, 0.4632641247340611, 0.456095746585301, 0.45150651250566753, 0.4488043785095215, 0.44524424416678293, 0.44049908433641705, 0.43730815819331575, 0.43649340527398245, 0.43483307531901766, 0.43184685707092285, 0.42792659997940063, 0.42434511865888325, 0.421337400163923, 0.41818893807274954, 0.41509253638131277, 0.41300003017698017, 0.41089848961148945, 0.4073737348828997, 0.4044232794216701, 0.40187721593039377, 0.39950371640069143, 0.39742548976625713, 0.3961004103933062, 0.3933774488312857], "val_accuracy": [0.14633333683013916, 0.35466668009757996, 0.4009999930858612, 0.4359999895095825, 0.4883333444595337, 0.5356666445732117, 0.5910000205039978, 0.6546666622161865, 0.6856666803359985, 0.6930000185966492, 0.7149999737739563, 0.7093333601951599, 0.7226666808128357, 0.7129999995231628, 0.734666645526886, 0.7390000224113464, 0.7323333621025085, 0.734000027179718, 0.7443333268165588, 0.7540000081062317, 0.7456666827201843, 0.7473333477973938, 0.7566666603088379, 0.7586666941642761, 0.7613333463668823, 0.7673333287239075, 0.7673333287239075, 0.7666666507720947, 0.7696666717529297, 0.7739999890327454, 0.7733333110809326, 0.7743333578109741, 0.7786666750907898, 0.781333327293396, 0.7826666831970215, 0.7889999747276306, 0.7900000214576721, 0.7926666736602783, 0.7933333516120911, 0.7950000166893005, 0.7983333468437195, 0.8033333420753479, 0.8029999732971191, 0.8019999861717224, 0.8026666641235352, 0.8083333373069763, 0.812666654586792, 0.8169999718666077, 0.8196666836738586, 0.8213333487510681, 0.824999988079071, 0.82833331823349, 0.8289999961853027, 0.8333333134651184, 0.8323333263397217, 0.8330000042915344, 0.8349999785423279, 0.8389999866485596, 0.8399999737739563, 0.8396666646003723, 0.8376666903495789, 0.8373333215713501, 0.8343333601951599, 0.8373333215713501]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 9, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1], [4, 1, 5, 3, 2, 2, 3, 9, 3, 8, 5, 4, 1, 1, 9, 1, 4, 5, 2, 0, 3, 5, 0, 5], [0, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [24, 80, 3, 57], [0, 0, 1, 1, 0, 0, 1, 1], [0, 1, 1, 1, 0], [8, 1, 8, 4], [0, 1], [64], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.6048571467399597, "mapping_values": [1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.0822455289262773, 1.1641072593329211, 0.868717098878501, 0.8169680412624019, 0.7243615591751192, 0.6836221616470646, 0.6362445443581282, 0.6061260235654428, 0.5815252128404444, 0.5570089724817768, 0.539265486731458, 0.5317343123962756, 0.5075429220162425, 0.5099703007645973, 0.4900561338874878, 0.48843646308906863, 0.48616501482297336, 0.47891919563049967, 0.48400685800899523, 0.47105954155048374, 0.4966379834314174, 0.491219767879706, 0.48051575933150203, 0.5111510047051633, 0.5284616156591794], "accuracy": [0.28199708461761475, 0.5906749367713928, 0.6802271604537964, 0.6845859289169312, 0.7255316376686096, 0.748778223991394, 0.7631752490997314, 0.7761194109916687, 0.776251494884491, 0.7943468689918518, 0.7959318161010742, 0.7977809906005859, 0.8055738806724548, 0.8034605979919434, 0.8150838613510132, 0.8115176558494568, 0.8161405324935913, 0.8193105459213257, 0.8145555257797241, 0.8220842480659485, 0.8285563588142395, 0.8123101592063904, 0.8190463781356812, 0.8119139075279236, 0.7996301651000977], "val_loss": [0.9564887455531529, 0.7215532405035836, 0.6025373935699463, 0.5737392732075283, 0.5467955044337681, 0.4983902999332973, 0.46680329527173725, 0.4419158526829311, 0.4521580083029611, 0.43264347314834595, 0.4496294004576547, 0.4145498786653791, 0.4189097285270691, 0.4086292215756008, 0.4024755784443447, 0.4005550912448338, 0.4134250964437212, 0.4133240836007254, 0.45138380357197355, 0.4517373527799334, 0.428317129611969, 0.44300230911799837, 0.4747837952205113, 0.4297278012548174, 0.46900257042476107], "val_accuracy": [0.6116666793823242, 0.6970000267028809, 0.7336666584014893, 0.7563333511352539, 0.7663333415985107, 0.7856666445732117, 0.8066666722297668, 0.8106666803359985, 0.7990000247955322, 0.8159999847412109, 0.8116666674613953, 0.8309999704360962, 0.82833331823349, 0.8346666693687439, 0.8383333086967468, 0.8396666646003723, 0.8423333168029785, 0.8316666483879089, 0.8429999947547913, 0.8473333120346069, 0.8349999785423279, 0.8356666564941406, 0.8383333086967468, 0.831333339214325, 0.8220000267028809]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [4, 6, 5, 3, 2, 2, 3, 9], [3, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0], [85, 80, 3], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 7, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.5774285793304443, "mapping_values": [1, 4, 4, 2, 2, 1, 14, 14, 8, 6, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(grad), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, grad)), grad)), tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(tf.math.multiply(tf.math.add(beta, grad), grad), tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), grad), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.082987383246154, 1.1704221463568727, 0.8661308065145369, 0.8057814755963769, 0.7108163687263608, 0.6673615021618082, 0.6261232907368034, 0.6082685607976414, 0.5620401360615134, 0.5434440988213268, 0.509518578760754, 0.5085586299592036, 0.486075473593809, 0.4734370999718229, 0.467434576434419, 0.4575811057137366, 0.4766190915044115, 0.46934623594895614, 0.4544886256237355, 0.4610056591118961, 0.4599902493889778, 0.46136769963340546, 0.458254487196279, 0.4847009419182493, 0.4843503909812643, 0.47573459255082845, 0.5173635985778544], "accuracy": [0.2818650007247925, 0.5906749367713928, 0.6777176260948181, 0.6888125538825989, 0.7294940948486328, 0.7534011602401733, 0.7666094303131104, 0.7733456492424011, 0.7821952104568481, 0.798309326171875, 0.8025360107421875, 0.8123101592063904, 0.8131026029586792, 0.8260467648506165, 0.8212917447090149, 0.8267071843147278, 0.8248580098152161, 0.8241975903511047, 0.8298771381378174, 0.8308017253875732, 0.8245938420295715, 0.8284242749214172, 0.8305375576019287, 0.8211596608161926, 0.82683926820755, 0.8273676037788391, 0.8137630224227905], "val_loss": [0.9656015804835728, 0.7244680098124913, 0.6066677740642002, 0.5735062531062535, 0.5407137019293649, 0.49158527169908794, 0.4630687917981829, 0.437956656728472, 0.4307329569544111, 0.4172350934573582, 0.4384570036615644, 0.402543842792511, 0.4106372169085911, 0.3929017867360796, 0.39614048174449373, 0.41789640699114117, 0.4154852032661438, 0.43680882453918457, 0.4018158146313259, 0.43020559208733694, 0.4365007621901376, 0.46168977873665945, 0.4768396956580026, 0.4966974599020822, 0.5322748933519635, 0.5155430350984845, 0.4740544557571411], "val_accuracy": [0.6106666922569275, 0.6993333101272583, 0.737666666507721, 0.7553333044052124, 0.7743333578109741, 0.7883333563804626, 0.8116666674613953, 0.8133333325386047, 0.8159999847412109, 0.824999988079071, 0.8183333277702332, 0.8276666402816772, 0.8293333053588867, 0.8420000076293945, 0.8420000076293945, 0.843999981880188, 0.8343333601951599, 0.8370000123977661, 0.847000002861023, 0.8443333506584167, 0.8396666646003723, 0.8493333458900452, 0.8159999847412109, 0.8270000219345093, 0.8396666646003723, 0.8276666402816772, 0.8263333439826965]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [17, 32, 5, 49, 25], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1], [4, 1, 5, 3, 2, 2, 3, 9, 3, 8, 5, 4, 1, 1, 9, 1, 4, 5, 2, 0, 3, 5, 0, 5], [3, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [24, 80, 3, 57], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 6, 8, 4], [5, 1], [64], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [2, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.24942857027053833, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 4, 3, 2, 1, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.divide_no_nan(sigma, tf.math.add(sigma, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.493102806150764, 13.274534977186216, NaN, NaN, NaN, NaN], "accuracy": [0.19284109771251678, 0.1868973672389984, 0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.7132114001682825, 45.814793178013396, NaN, NaN, NaN, NaN], "val_accuracy": [0.2840000092983246, 0.09266666322946548, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [6, 6, 9, 3, 9, 2, 3, 6, 1, 3, 8, 4, 6, 8], [0, 1, 3, 3, 0, 5, 3, 2, 2, 4, 4, 0], [85, 6, 33], [0, 0, 1, 0, 0, 0, 1, 1], [1, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 23, 23, 13, 10, 5, 5, 5, 3, 2, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)))))), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(beta, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1], [8, 6, 5, 3, 5, 2, 3, 9], [3, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 80, 3], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [1, 6, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 18, 11, 7, 4, 5, 5, 3, 2, 0, 5, 4, 2, 2, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)))))), tf.math.pow(tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(grad), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, tf.math.divide_no_nan(sigma, tf.math.add(sigma, sigma))), tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [2, 0, 3, 2, 2, 6, 0, 1, 2, 9, 5, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 2, 25], [0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1], [4, 6, 4, 5, 0, 2, 6, 9], [0, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 80, 62, 98], [0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 7, 8, 4], [4, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 20, 20, 12, 8, 4, 13, 13, 8, 5, 2, 5, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.negative(grad), tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, grad))))), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.pow(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.square(tf.math.negative(tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, grad), grad), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.add(sigma, sigma)), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.303240208719637, 2.3028264483125724, 2.302762348669836, 2.302764658662763, 2.3027487878770465, 2.302799835118163, 2.3027346028690845], "accuracy": [0.0940430611371994, 0.09338264167308807, 0.09774138033390045, 0.09708096832036972, 0.09998679161071777, 0.09536388516426086, 0.09642054885625839], "val_loss": [1.973649024963379, 1.9737437793186732, 1.9735618318830217, 1.973606995173863, 1.9735728672572546, 1.9736309732709612, 1.973639828818185], "val_accuracy": [0.10066666454076767, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10199999809265137, 0.10199999809265137, 0.09566666930913925]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [5, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [17, 32, 5, 49, 25], [0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 8, 5, 3, 8, 2, 3, 9, 3, 8, 2, 4, 1, 1, 9, 1, 4, 5, 2, 0, 3, 5, 0, 5], [0, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0], [24, 80, 3, 57], [0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 0, 5, 5, 3, 2, 1, 4, 4, 2, 2, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.square(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, sigma), tf.math.add(sigma, alpha))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.304443254320928, 2.329330671260291, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08558975160121918, 0.07449477910995483, 0.09694888442754745, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9774542536054338, 2.0325242451259067, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.03166666626930237, 0.10066666454076767, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 6, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [91, 32, 5, 49, 25], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [6, 6, 3, 3, 2, 2, 3, 9, 1, 3, 8, 4, 6, 8], [0, 1, 3, 3, 1, 5, 3, 2, 2, 4, 4, 0], [85, 80, 72], [0, 0, 1, 0, 0, 0, 1, 1], [1, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 4, 22, 22, 12, 10, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.square(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, grad))), grad), alpha)))), tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), beta)))), beta), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.312181224251121, 2.38416017857462, 2.6789043324419755, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07211729139089584, 0.021001188084483147, 0.008057059720158577, 0.04411570355296135, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.005430221557617, 2.1251618521554128, 2.829277651650565, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.006000000052154064, 0.004999999888241291, 0.007333333138376474, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [67, 32, 5, 49, 25], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1], [8, 6, 5, 3, 5, 2, 3, 9], [3, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [24, 80, 3, 57], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 9, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [0, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 2, 2, 2, 0, 1, 1, 0, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302885598856712, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 8, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [6, 6, 9, 3, 2, 2, 3, 9, 1, 3, 8, 4, 6, 8], [3, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 80, 3], [0, 0, 1, 0, 0, 0, 1, 1], [1, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 18, 11, 7, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))))))), tf.math.pow(tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1], [4, 6, 4, 4, 5, 3, 6, 9], [0, 3, 3, 1, 1, 5, 3, 2, 1, 4, 4, 0], [93, 84, 7], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 7, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.417523418576915, 9.838538161291415e+27, 2.3106039530565523, 2.3118717718621946, 2.3133665678318795, 2.3151259937495476, 2.317215925792835], "accuracy": [0.030246995389461517, 0.08215559273958206, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.6416172981262207, 1.979788371494838, 1.9807859829493932, 1.9819622039794922, 1.9833457129342216, 1.9849916185651506, 1.9869341169084822], "val_accuracy": [0.013333333656191826, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [0, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1], [4, 9, 5, 3, 5, 2, 3, 9], [0, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [51, 80, 3], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0], [8, 6, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 18, 11, 7, 5, 11, 11, 7, 4, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))))), tf.math.pow(tf.math.add(alpha, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad))), grad)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [4, 6, 9, 3, 2, 2, 3, 9], [0, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 80, 3], [0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 18, 11, 7, 4, 13, 13, 8, 5, 3, 4, 4, 2, 2, 0, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))))))), tf.math.pow(tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))), grad), grad)))), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, sigma), tf.math.add(sigma, alpha))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1], [8, 3, 5, 0, 9, 2, 3, 9], [3, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 80, 3], [0, 0, 1, 1, 0, 0, 1, 1], [0, 1, 0, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 4, 2, 2, 1, 1, 0, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.square(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, sigma))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [925.2643995084751, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09126931428909302, 0.1006472036242485, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 2, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [17, 32, 5, 49, 25], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1], [4, 1, 5, 1, 2, 2, 3, 9, 3, 8, 5, 4, 1, 1, 9, 1, 4, 5, 2, 0, 3, 5, 0, 5], [0, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [93, 80, 7], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [3, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.04171428456902504, "mapping_values": [1, 4, 4, 2, 2, 0, 18, 18, 11, 7, 2, 4, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(grad), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.add(beta, tf.math.subtract(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), grad), tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(alpha))))))), grad)), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, sigma))))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.302483414079472, 2.301773400968643, 2.301912874136902, 2.3025550910305776, 2.3029271401528906, 2.303803485823251], "accuracy": [0.0878351628780365, 0.08836349099874496, 0.08558975160121918, 0.09721305221319199, 0.08836349099874496, 0.08902391046285629], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}]