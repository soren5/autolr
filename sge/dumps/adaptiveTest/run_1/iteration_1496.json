[{"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 0, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 3, 6, 4, 6, 2, 2, 5, 5, 4, 6, 5, 9, 2, 8, 6, 3, 3, 4, 1, 2, 9, 6, 1, 6, 4, 5, 2, 6, 5, 4, 0, 0, 2, 3, 7, 9, 6, 2, 4, 1, 6, 0, 2], [3, 4, 1, 0, 0, 3, 3, 3, 0, 2, 2, 3, 3, 0, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [17, 88, 70, 97, 48, 12, 60, 9, 54, 64], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0], [1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1], [2, 6, 0, 9, 6, 8, 4], [3, 4, 2], [68, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.8351428508758545, "mapping_values": [1, 4, 4, 2, 2, 1, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9546303534630567, 1.340503551263725, 0.8554185288079332, 0.7257506230157427, 0.659238846995465, 0.6250745901231989, 0.5783576152863488, 0.5367162634967073, 0.5091949974808789, 0.504250675443771, 0.46766053899294036, 0.4503060360122366, 0.4433827574825274, 0.4296357177149713, 0.41024091767754617, 0.40321510593652754, 0.39778157100307787, 0.38825456966356814, 0.3600143310282413, 0.35585037887434934, 0.3471492526711033, 0.3317704857923036, 0.3229008133715926, 0.3193694790907666, 0.3136830902401923, 0.3011150825111826, 0.308964023610872, 0.3043962385455741, 0.2933360462285713, 0.2701608025127036], "accuracy": [0.36045435070991516, 0.5155197381973267, 0.6736230254173279, 0.7169462442398071, 0.7390040755271912, 0.7588165402412415, 0.7784969210624695, 0.7952714562416077, 0.8067626357078552, 0.8101968169212341, 0.8235371708869934, 0.8329150676727295, 0.8372738361358643, 0.8389908671379089, 0.8470479249954224, 0.8521991968154907, 0.8450667262077332, 0.8545766472816467, 0.8651432991027832, 0.8614450097084045, 0.8696341514587402, 0.8761062026023865, 0.8759741187095642, 0.878879964351654, 0.8808611631393433, 0.8864086866378784, 0.8823140859603882, 0.8821820020675659, 0.8898428082466125, 0.8982961177825928], "val_loss": [1.435647828238351, 0.717491694859096, 0.5925401960100446, 0.5301261969975063, 0.5080996922084263, 0.47546468462262836, 0.44865699325289043, 0.42099148886544363, 0.40103947264807566, 0.38841700553894043, 0.37713935545512606, 0.3622524397713797, 0.3634472829954965, 0.36784725529806955, 0.35118851491383146, 0.3430360640798296, 0.34660628863743376, 0.3324970432690212, 0.3364115527697972, 0.3470011694090707, 0.33547812700271606, 0.32278163943971905, 0.33006670645305086, 0.331471392086574, 0.32122852972575594, 0.3545756425176348, 0.35303363629749845, 0.3227896179471697, 0.32804020813533236, 0.314828097820282], "val_accuracy": [0.4426666796207428, 0.6783333420753479, 0.722000002861023, 0.7559999823570251, 0.7586666941642761, 0.7916666865348816, 0.7953333258628845, 0.8086666464805603, 0.8199999928474426, 0.8336666822433472, 0.8386666774749756, 0.8429999947547913, 0.8423333168029785, 0.8423333168029785, 0.8483333587646484, 0.8496666550636292, 0.8526666760444641, 0.8576666712760925, 0.8539999723434448, 0.8533333539962769, 0.8579999804496765, 0.8613333106040955, 0.859000027179718, 0.8636666536331177, 0.8676666617393494, 0.8546666502952576, 0.8526666760444641, 0.8673333525657654, 0.8636666536331177, 0.8663333058357239]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 0, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [7, 5, 3, 6, 4, 6, 2, 2, 5, 5, 4, 6, 5, 9, 2, 8, 6, 3, 3, 4, 1, 2, 9, 6, 1, 6, 4, 5, 2, 6, 5, 4, 0, 0, 2, 3, 7, 9, 6, 2, 4, 1, 6, 0, 2], [0, 1, 0, 3, 0, 3, 0, 3, 0, 0, 2, 3, 3, 2, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [17, 88, 70, 97, 48, 12, 60, 9, 54, 64], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1], [2, 6, 0, 9, 6, 8, 4], [0, 4, 2], [68, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.8322857022285461, "mapping_values": [1, 4, 4, 2, 2, 1, 4, 4, 2, 2, 1, 5, 4, 2, 2, 1, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.square(tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), tf.math.add(sigma, grad))), sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.95463233122563, 1.340134323973776, 0.8553445006342706, 0.7274274054440871, 0.6605195292959187, 0.6276037857013215, 0.5807572496392392, 0.5362142881051566, 0.5049502121506272, 0.5057078535766838, 0.47145129820343495, 0.4530073837116961, 0.44787378852645465, 0.4309711034870135, 0.40562042267630205, 0.3976291020619414, 0.3913796925864373, 0.39327864139276236, 0.356625504214073, 0.3541437817082791, 0.3436050259119106, 0.3296238737115141, 0.3216265141727776, 0.31977156323448797, 0.31821315887030704, 0.3010204343031489, 0.30345010614555745, 0.29308262526036377, 0.28764711249348607, 0.26705596901957607, 0.26327511883525173, 0.259016032987944, 0.25287567219792767, 0.2600304999009509, 0.2509451771511488], "accuracy": [0.36045435070991516, 0.5157839059829712, 0.6748117804527283, 0.717870831489563, 0.7384757399559021, 0.7594769597053528, 0.7808743715286255, 0.7948752045631409, 0.8105930685997009, 0.8100647330284119, 0.8185180425643921, 0.832650899887085, 0.8325188159942627, 0.8387266993522644, 0.845859169960022, 0.8541803956031799, 0.8514066934585571, 0.8518029451370239, 0.8658037185668945, 0.8634262084960938, 0.8672566413879395, 0.8732003569602966, 0.8745211958885193, 0.8772949576377869, 0.8799365758895874, 0.886672854423523, 0.8836349248886108, 0.8837670087814331, 0.8931449055671692, 0.8986923694610596, 0.89988112449646, 0.9001452922821045, 0.89988112449646, 0.8994848728179932, 0.9064852595329285], "val_loss": [1.4356530393872942, 0.7149088382720947, 0.595356787954058, 0.5295136315482003, 0.5173504522868565, 0.4777728319168091, 0.4524761438369751, 0.41395382370267597, 0.4065604550497873, 0.39597928524017334, 0.37669077941349577, 0.3631752814565386, 0.36568490096500944, 0.3664195367268154, 0.3507551465715681, 0.3420356256621225, 0.3584672893796648, 0.3355927722794669, 0.3401393549782889, 0.3431848883628845, 0.3314750109400068, 0.3262924551963806, 0.3398156762123108, 0.3302593912397112, 0.32254075152533396, 0.3472114290509905, 0.3372914791107178, 0.3259856104850769, 0.32273182698658537, 0.3142791816166469, 0.32762021677834646, 0.3306267431804112, 0.3232164468084063, 0.32742499453680857, 0.33641020740781513], "val_accuracy": [0.4426666796207428, 0.6800000071525574, 0.7213333249092102, 0.7570000290870667, 0.7566666603088379, 0.7886666655540466, 0.7929999828338623, 0.8163333535194397, 0.8173333406448364, 0.8263333439826965, 0.8403333425521851, 0.8410000205039978, 0.843999981880188, 0.8410000205039978, 0.8516666889190674, 0.8486666679382324, 0.8500000238418579, 0.8506666421890259, 0.8543333411216736, 0.8529999852180481, 0.8560000061988831, 0.8616666793823242, 0.8539999723434448, 0.8636666536331177, 0.8613333106040955, 0.8526666760444641, 0.8579999804496765, 0.8669999837875366, 0.8659999966621399, 0.8706666827201843, 0.8669999837875366, 0.8619999885559082, 0.8700000047683716, 0.8706666827201843, 0.8633333444595337]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 0, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [0, 5, 2, 6, 4, 6, 2, 2, 5, 5, 4, 6, 2, 2, 2, 8, 5, 3, 3, 4, 1, 2, 9, 6, 1, 6, 4, 5, 2, 6, 5, 4, 0, 0, 2, 3, 7, 9, 6, 2, 4, 1, 6, 0, 2], [5, 3, 1, 0, 0, 3, 3, 3, 0, 2, 2, 3, 3, 0, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [17, 88, 70, 97, 48, 12, 60, 9, 54, 64], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1], [0, 3, 2, 9, 6, 8, 4], [2, 4, 2], [68, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 3, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.803428590297699, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.984777425384446, 1.4222917794677419, 1.0861162394737887, 0.9186726302802051, 0.8484299554249803, 0.7581825577162512, 0.7468907151082409, 0.7091995672448405, 0.6975073613243143, 0.6906191910404366, 0.6552949156255423, 0.6509319866464092, 0.6292916486654079, 0.6144956107451979, 0.5992145035182166, 0.581210361385484, 0.5829011471264272, 0.5714357983261413, 0.5545719880721415, 0.5758200455036272, 0.5467178255276295, 0.5475182044523393, 0.5396249838760894, 0.5307948095584983, 0.5201899133944445, 0.5098736970148475, 0.4961700943545769, 0.4956843948139097, 0.48817112288061243, 0.4813352807669387, 0.47110374617680517, 0.4657711189704218, 0.46401122412378004, 0.44580257733295525, 0.45859080772311095, 0.44816776540899445, 0.4350494507391691, 0.4350269420578999, 0.4351166136048143, 0.4279395823804001, 0.42168309750447985, 0.40795148157440453, 0.42082072236849377, 0.39846596679179236, 0.3963322940991933, 0.40049724240092677, 0.39245250620751915, 0.4000592323822384, 0.39841555641737, 0.38105279888223115, 0.3764150896013814], "accuracy": [0.33364152908325195, 0.5305771827697754, 0.6089023947715759, 0.656980574131012, 0.6819442510604858, 0.7157574892044067, 0.7180029153823853, 0.7231541275978088, 0.7333245277404785, 0.7368907928466797, 0.7485140562057495, 0.7511557340621948, 0.7626469135284424, 0.767930269241333, 0.7695152759552002, 0.776251494884491, 0.778761088848114, 0.7802139520645142, 0.7887993454933167, 0.7755910754203796, 0.7955356240272522, 0.7877426743507385, 0.7924976944923401, 0.7979130744934082, 0.8024039268493652, 0.8059701323509216, 0.8146876096725464, 0.8076872229576111, 0.8136309385299683, 0.817461371421814, 0.8222163319587708, 0.8216879963874817, 0.8277638554573059, 0.8370096683502197, 0.828292191028595, 0.82683926820755, 0.8354246616363525, 0.8366134166717529, 0.8384625315666199, 0.8411042094230652, 0.8378021121025085, 0.8465195894241333, 0.8428213000297546, 0.8511425256729126, 0.8540483713150024, 0.8487650156021118, 0.8543124794960022, 0.8490291833877563, 0.8496896028518677, 0.8569541573524475, 0.8643507957458496], "val_loss": [1.6164690085819788, 1.1414507797786169, 0.71037643296378, 0.7213145324162075, 0.5922981670924595, 0.6015047345842633, 0.5636280945369175, 0.5538660969052996, 0.5366356713431222, 0.5531742061887469, 0.5284596170697894, 0.5057126794542585, 0.4920471055167062, 0.497023344039917, 0.4991229942866734, 0.4857080153056553, 0.48768932478768484, 0.46262621879577637, 0.4764363595417568, 0.4499672055244446, 0.5022218738283429, 0.477413398878915, 0.420745279107775, 0.45229004110608784, 0.40855755124773296, 0.4294833711215428, 0.4313041227204459, 0.40389043944222586, 0.40499258041381836, 0.3944196786199297, 0.42170478616442, 0.4481363977704729, 0.3917649728911264, 0.39532774686813354, 0.3798160893576486, 0.41825197424207416, 0.39388706002916607, 0.37439973865236553, 0.3793473754610334, 0.3754342198371887, 0.3729615807533264, 0.37567446913037983, 0.3636571339198521, 0.3576820577893938, 0.368338372026171, 0.35511153084891184, 0.35797656433922903, 0.36006865331104826, 0.3572279300008501, 0.36129720721926006, 0.35318635191236225], "val_accuracy": [0.36533331871032715, 0.49900001287460327, 0.6783333420753479, 0.6726666688919067, 0.7386666536331177, 0.7129999995231628, 0.7350000143051147, 0.7396666407585144, 0.7509999871253967, 0.7440000176429749, 0.7546666860580444, 0.7696666717529297, 0.7620000243186951, 0.762666642665863, 0.7549999952316284, 0.7663333415985107, 0.781333327293396, 0.7903333306312561, 0.7773333191871643, 0.8046666383743286, 0.7546666860580444, 0.7756666541099548, 0.8136666417121887, 0.8003333210945129, 0.8180000185966492, 0.8003333210945129, 0.7983333468437195, 0.8173333406448364, 0.8226666450500488, 0.8349999785423279, 0.8040000200271606, 0.7993333339691162, 0.8370000123977661, 0.8233333230018616, 0.8379999995231628, 0.8173333406448364, 0.8216666579246521, 0.8399999737739563, 0.8316666483879089, 0.8363333344459534, 0.8403333425521851, 0.831333339214325, 0.8420000076293945, 0.847000002861023, 0.8349999785423279, 0.8539999723434448, 0.8510000109672546, 0.8486666679382324, 0.846666693687439, 0.843999981880188, 0.8500000238418579]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 0, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [5, 6, 2, 6, 4, 6, 2, 2, 5, 5, 4, 6, 2, 2, 2, 8, 5, 3, 3, 4, 1, 2, 9, 6, 1, 6, 4, 5, 2, 6, 5, 4, 0, 0, 2, 3, 7, 9, 6, 2, 4, 1, 6, 0, 2], [3, 3, 1, 0, 0, 3, 3, 3, 0, 2, 2, 3, 3, 0, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [17, 88, 70, 97, 48, 12, 60, 9, 54, 64], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1], [0, 3, 2, 9, 6, 8, 4], [6, 4, 2], [68, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 3, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.7151428461074829, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.negative(grad)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9549270779654147, 1.4150451544867593, 0.9060838132281864, 0.8931950489134128, 0.9816004168781008, 0.9830620764363412, 1.1082835106518385, 1.2595433797724196], "accuracy": [0.36203935742378235, 0.5153876543045044, 0.6684718132019043, 0.6977941989898682, 0.6441685557365417, 0.6474705934524536, 0.6280544400215149, 0.5988640785217285], "val_loss": [1.5158443110329765, 0.7410597801208496, 0.5880708864756993, 0.7026094368525914, 0.6303655420030866, 0.6212341274533953, 0.7432124955313546, 1.2801869256155831], "val_accuracy": [0.5603333115577698, 0.6690000295639038, 0.7406666874885559, 0.6496666669845581, 0.7066666483879089, 0.7379999756813049, 0.7133333086967468, 0.5636666417121887]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 2, 0, 1, 0, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 3, 6, 4, 6, 2, 2, 5, 5, 4, 6, 5, 9, 2, 8, 6, 3, 3, 4, 1, 2, 9, 6, 1, 6, 4, 5, 2, 6, 5, 4, 0, 0, 2, 3, 7, 9, 6, 2, 4, 1, 6, 0, 2], [3, 3, 0, 3, 0, 3, 0, 3, 0, 0, 2, 3, 3, 2, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [17, 88, 70, 97, 48, 12, 60, 9, 54, 64], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1], [2, 9, 0, 9, 6, 8, 4], [0, 4, 2], [87, 74, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.36171427369117737, "mapping_values": [1, 6, 6, 3, 3, 1, 1, 1, 0, 1, 0, 3, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.060485820193348, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.32941487431526184, 0.12349755316972733, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3314110892159596, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.28299999237060547, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [6, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 0, 2, 2, 2, 0, 2, 3, 3, 0], [43, 11, 89, 50, 85, 46], [0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [4, 2, 3, 2, 6, 8, 9, 6, 5, 5, 4, 2, 0, 2, 2, 6, 2, 3, 2, 3, 2, 2, 9, 6, 1, 6, 4, 5, 2, 2, 5, 4, 0, 0, 2, 9, 7, 2, 6, 0, 4, 1, 6, 0, 2], [3, 2, 1, 0, 2, 3, 3, 3, 0, 2, 2, 3, 3, 0, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [17, 88, 70, 97, 48, 12, 60, 9, 54, 64], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0], [1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1], [2, 6, 0, 9, 6, 8, 4], [3, 4, 2], [68, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 3, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.15457142889499664, "mapping_values": [1, 4, 4, 2, 2, 1, 12, 12, 7, 5, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.divide_no_nan(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), beta))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [3.1799990003073784e+24, 1.3272026043171483e+26, 9.686676525769636e+26, 3.6243560023536755e+27, 1.0617292510658618e+28, 2.387240236965305e+28], "accuracy": [0.09602430462837219, 0.09879804402589798, 0.09694888442754745, 0.10196803510189056, 0.09787346422672272, 0.09681680053472519], "val_loss": [1.984202812532883e+25, 3.174739784497703e+26, 1.6072146781624192e+27, 5.079599846167122e+27, 1.2401377274529404e+28, 2.5715505011472167e+28], "val_accuracy": [0.15466666221618652, 0.15466666221618652, 0.15466666221618652, 0.15466666221618652, 0.15466666221618652, 0.15466666221618652]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 0, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 3, 6, 4, 6, 2, 2, 5, 5, 4, 6, 5, 9, 2, 8, 6, 3, 3, 4, 1, 2, 9, 6, 1, 6, 4, 5, 2, 6, 5, 4, 0, 0, 2, 3, 7, 9, 6, 2, 4, 1, 6, 0, 2], [3, 4, 1, 0, 0, 3, 3, 3, 0, 2, 2, 3, 3, 0, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [17, 88, 70, 97, 48, 12, 60, 9, 54, 64], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0], [1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1], [2, 9, 0, 9, 6, 8, 4], [0, 4, 2], [68, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 4, 4, 2, 2, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [Infinity, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07277770340442657, 0.09694888442754745, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 0, 2, 2, 2, 0, 2, 3, 3, 0], [91, 66, 89, 50, 85, 46], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 3, 6, 4, 6, 2, 2, 5, 5, 4, 6, 5, 9, 2, 8, 6, 3, 3, 4, 1, 2, 9, 6, 1, 6, 4, 5, 2, 6, 5, 4, 0, 0, 2, 3, 7, 9, 6, 2, 4, 1, 6, 0, 2], [3, 4, 1, 0, 0, 3, 3, 3, 0, 2, 2, 3, 3, 0, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [17, 88, 70, 97, 48, 12, 60, 9, 54, 64], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1], [2, 6, 0, 9, 6, 8, 4], [0, 5, 2], [68, 2, 82], [0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 3, 3, 1, 2, 0, 3, 2, 1, 1, 1, 49, 29, 20, 6], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(alpha, tf.math.add(tf.math.add(tf.math.subtract(beta, tf.math.pow(tf.math.subtract(tf.math.pow(beta, tf.math.subtract(sigma, tf.math.sqrt(tf.math.add(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), sigma)))), beta), tf.math.add(tf.math.pow(tf.math.sqrt(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), alpha), sigma))), tf.math.multiply(tf.math.multiply(tf.math.subtract(sigma, tf.math.negative(tf.math.negative(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))), alpha), beta)), tf.math.add(tf.math.negative(beta), tf.math.subtract(tf.math.negative(tf.math.square(tf.math.divide_no_nan(tf.math.multiply(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(alpha, tf.math.negative(beta))))), tf.math.square(tf.math.square(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 0, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 3, 6, 4, 6, 2, 2, 5, 5, 4, 6, 5, 9, 2, 8, 6, 3, 3, 4, 1, 2, 9, 6, 1, 6, 4, 5, 2, 6, 5, 4, 0, 0, 2, 3, 7, 9, 6, 2, 4, 1, 6, 0, 2], [3, 5, 1, 0, 0, 3, 3, 3, 0, 2, 2, 3, 3, 0, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [17, 88, 70, 97, 48, 12, 60, 9, 54, 64], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1], [0, 3, 2, 9, 6, 8, 4], [2, 4, 2], [68, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 4, 2, 1, 23, 23, 14, 9, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, grad), tf.math.square(tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.divide_no_nan(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.pow(grad, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))))))))))))), tf.math.add(beta, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 0, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [5, 6, 2, 3, 4, 6, 2, 2, 5, 5, 4, 6, 2, 2, 2, 8, 5, 3, 3, 4, 1, 2, 9, 6, 1, 6, 4, 5, 2, 6, 5, 4, 0, 0, 2, 3, 7, 9, 6, 2, 4, 1, 6, 0, 2], [1, 3, 1, 0, 0, 3, 3, 3, 0, 2, 2, 3, 3, 0, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [17, 88, 70, 97, 48, 12, 60, 9, 54, 64], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1], [0, 3, 2, 9, 6, 8, 4], [2, 4, 2], [68, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 3, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 9, 5, 3, 6, 6, 3, 3, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(grad, tf.math.pow(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.subtract(tf.math.square(tf.math.add(alpha, alpha)), tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 0, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 3, 6, 4, 6, 2, 2, 5, 5, 4, 6, 5, 9, 2, 8, 6, 3, 3, 4, 1, 2, 9, 6, 1, 6, 4, 5, 2, 6, 5, 4, 0, 0, 2, 3, 7, 9, 6, 2, 4, 1, 6, 0, 2], [3, 4, 1, 0, 0, 3, 3, 3, 0, 2, 2, 3, 3, 0, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [17, 88, 70, 97, 48, 12, 60, 9, 54, 64], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1], [2, 6, 0, 9, 6, 8, 4], [3, 4, 2], [68, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [2, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 3, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(grad)))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [6.507226025145166e+24, 45.793263500991074, 145.4079670944486, 302.51267240516984, 517.4813375033408, 789.7927877002656], "accuracy": [0.09060890227556229, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [16.606891632080078, 81.8136705671038, 196.5333295549665, 360.7802298409598, 574.5104631696429, 837.7933000837054], "val_accuracy": [0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 3, 0, 1, 0, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 3, 6, 4, 6, 2, 2, 5, 5, 4, 6, 5, 9, 2, 8, 6, 3, 3, 4, 1, 2, 9, 6, 1, 6, 4, 5, 2, 6, 5, 4, 0, 0, 2, 3, 7, 9, 6, 2, 4, 1, 6, 0, 2], [3, 3, 0, 3, 0, 3, 0, 3, 0, 0, 2, 3, 3, 2, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [17, 88, 70, 97, 48, 12, 60, 9, 54, 64], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0], [1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1], [2, 1, 0, 9, 6, 8, 4], [0, 4, 2], [87, 74, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [0, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3026118473432886, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 5, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 0, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 3, 6, 4, 6, 2, 2, 5, 5, 4, 6, 5, 9, 2, 8, 6, 3, 3, 4, 1, 2, 9, 6, 1, 6, 4, 5, 2, 6, 5, 4, 0, 0, 2, 3, 7, 9, 6, 2, 4, 1, 6, 0, 2], [0, 3, 0, 3, 0, 3, 0, 3, 0, 0, 2, 3, 3, 2, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [17, 88, 70, 97, 48, 12, 60, 9, 54, 64], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1], [2, 9, 0, 9, 6, 8, 4], [0, 4, 2], [68, 2, 82], [0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 3, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 4, 2, 1, 1, 1, 0, 1, 1, 3, 3, 1, 2, 1, 49, 29, 20, 6], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(alpha, tf.math.add(tf.math.add(tf.math.subtract(beta, tf.math.pow(tf.math.subtract(tf.math.pow(beta, tf.math.subtract(sigma, tf.math.sqrt(tf.math.add(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), sigma)))), beta), tf.math.add(tf.math.pow(tf.math.sqrt(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), alpha), sigma))), tf.math.multiply(tf.math.multiply(tf.math.subtract(sigma, tf.math.negative(tf.math.negative(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))), alpha), beta)), tf.math.add(tf.math.negative(beta), tf.math.subtract(tf.math.negative(tf.math.square(tf.math.divide_no_nan(tf.math.multiply(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(alpha, tf.math.negative(sigma))))), tf.math.square(tf.math.square(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 3, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 0, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 3, 6, 4, 6, 2, 2, 5, 5, 4, 6, 5, 9, 2, 8, 6, 3, 3, 4, 1, 2, 9, 6, 1, 6, 4, 5, 2, 6, 5, 4, 0, 0, 2, 3, 7, 9, 6, 2, 4, 1, 6, 0, 2], [3, 3, 0, 3, 0, 3, 0, 3, 0, 0, 2, 3, 3, 2, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [17, 88, 70, 97, 48, 12, 60, 9, 54, 64], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0], [1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1], [2, 9, 0, 9, 6, 8, 4], [0, 4, 2], [20, 74, 82], [0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 3, 3, 2, 3, 3, 1, 2, 0, 1, 1, 0, 1, 1, 49, 29, 20, 6], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(alpha, tf.math.add(tf.math.add(tf.math.subtract(beta, tf.math.pow(tf.math.subtract(tf.math.pow(beta, tf.math.subtract(sigma, tf.math.sqrt(tf.math.add(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), sigma)))), beta), tf.math.add(tf.math.pow(tf.math.sqrt(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), alpha), sigma))), tf.math.multiply(tf.math.multiply(tf.math.subtract(sigma, tf.math.negative(tf.math.negative(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))), alpha), beta)), tf.math.add(tf.math.negative(beta), tf.math.subtract(tf.math.negative(tf.math.square(tf.math.divide_no_nan(tf.math.multiply(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(alpha, tf.math.negative(beta))))), tf.math.square(tf.math.square(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 3, 0, 1, 0, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 3, 6, 4, 6, 2, 2, 5, 5, 4, 6, 5, 9, 2, 8, 6, 3, 3, 4, 1, 2, 9, 6, 1, 6, 4, 5, 2, 6, 5, 4, 0, 0, 2, 3, 7, 9, 6, 2, 4, 1, 6, 0, 2], [4, 3, 0, 3, 0, 3, 0, 3, 0, 0, 2, 3, 3, 2, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [17, 88, 70, 97, 48, 12, 60, 9, 54, 64], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1], [0, 3, 2, 9, 6, 8, 4], [0, 4, 2], [98, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 3, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 3, 3, 1, 2, 0, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(grad, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [11796115.111994758, 224157248.14370626, 1057741152.4691586, 2982663711.5139346, 6342302893.867653, 11616512437.813763], "accuracy": [0.10011887550354004, 0.10460969805717468, 0.10540219396352768, 0.09589222073554993, 0.1006472036242485, 0.1010434553027153], "val_loss": [44710092.571428575, 357170029.71428573, 1204875227.4285715, 2855329865.142857, 5576036644.571428, 9634507922.285715], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 6, 3, 8, 2, 2, 0, 1, 5, 4, 1, 2, 6, 3, 6, 5, 8], [0, 1, 2, 1, 0, 2, 2, 2, 0, 2, 3, 3, 0], [42, 66, 89, 50, 85, 46], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [4, 2, 9, 2, 6, 1, 9, 4, 0, 5, 4, 2, 0, 2, 2, 6, 2, 3, 2, 3, 2, 2, 9, 6, 1, 6, 4, 5, 2, 2, 5, 4, 0, 0, 2, 9, 7, 2, 6, 0, 4, 1, 6, 0, 2], [3, 3, 0, 3, 0, 3, 0, 3, 0, 0, 2, 3, 3, 2, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [17, 88, 70, 97, 48, 12, 60, 9, 54, 64], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1], [9, 3, 2, 9, 6, 8, 4], [0, 4, 2], [87, 74, 82], [0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [0, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 3, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62, 27]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 3, 3, 1, 2, 0, 1, 1, 1, 0, 1, 49, 29, 20, 7], "tree_depth": 24, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(tf.math.subtract(beta, tf.math.pow(tf.math.subtract(tf.math.pow(beta, tf.math.subtract(sigma, tf.math.sqrt(tf.math.add(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), sigma)))), beta), tf.math.add(tf.math.pow(tf.math.sqrt(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), alpha), sigma))), tf.math.multiply(tf.math.multiply(tf.math.subtract(sigma, tf.math.negative(tf.math.negative(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))), alpha), beta)), tf.math.add(tf.math.negative(beta), tf.math.subtract(tf.math.negative(tf.math.square(tf.math.divide_no_nan(tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(alpha, tf.math.negative(sigma))))), tf.math.square(tf.math.square(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 2, 0, 1, 0, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 3, 6, 4, 6, 2, 2, 5, 5, 4, 6, 5, 9, 2, 8, 6, 3, 3, 4, 1, 2, 9, 6, 1, 6, 4, 5, 2, 6, 5, 4, 0, 0, 2, 3, 7, 9, 6, 2, 4, 1, 6, 0, 2], [0, 3, 0, 3, 0, 3, 0, 3, 0, 0, 2, 3, 3, 2, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [17, 88, 70, 97, 48, 12, 60, 9, 54, 64], [0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0], [1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1], [2, 9, 0, 9, 6, 8, 4], [0, 4, 2], [87, 74, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 2, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 4, 2, 0, 3, 3, 1, 2, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 9, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 0, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [5, 6, 2, 6, 4, 6, 2, 2, 5, 5, 4, 6, 2, 2, 2, 8, 5, 3, 3, 4, 1, 2, 9, 6, 1, 6, 4, 5, 2, 6, 5, 4, 0, 0, 2, 3, 7, 9, 6, 2, 4, 1, 6, 0, 2], [5, 3, 1, 0, 0, 3, 3, 3, 0, 2, 2, 3, 3, 0, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [17, 88, 70, 97, 48, 12, 60, 9, 54, 64], [1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1], [0, 3, 2, 9, 6, 8, 4], [4, 4, 2], [68, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 3, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 3, 1, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3026118473432886, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [1, 1, 0, 1, 0, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 3, 6, 2, 6, 2, 2, 5, 5, 4, 6, 5, 9, 2, 8, 6, 3, 3, 4, 1, 2, 9, 6, 1, 6, 4, 5, 2, 6, 5, 4, 0, 0, 2, 3, 7, 9, 6, 2, 4, 1, 6, 0, 2], [3, 3, 0, 3, 0, 0, 0, 3, 0, 0, 2, 3, 3, 2, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [42, 27, 70, 97, 48, 12, 60, 9, 54, 64], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1], [2, 9, 0, 9, 6, 8, 4], [0, 4, 2], [23, 2, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 3, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.040571428835392, "mapping_values": [1, 4, 4, 2, 2, 0, 10, 10, 5, 5, 2, 3, 2, 1, 1, 1, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.301658218531419, 2.302441693977232, 2.3026910158212015, 2.302107869012087, 2.3015549092197682, 2.3039139780496263], "accuracy": [0.09457138925790787, 0.09126931428909302, 0.0878351628780365, 0.08915598690509796, 0.09457138925790787, 0.09140139818191528], "val_loss": [1.971440383366176, 1.971440383366176, 1.971440383366176, 1.971440383366176, 1.971440383366176, 1.971440383366176], "val_accuracy": [0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 0, 2, 2, 2, 0, 2, 3, 3, 0], [43, 66, 89, 50, 85, 46], [1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 9, 6, 4, 6, 2, 6, 4, 4, 4, 8, 5, 3, 2, 5, 6, 3, 3, 8, 1, 2, 9, 6, 1, 6, 4, 5, 2, 6, 5, 4, 0, 0, 2, 3, 7, 9, 6, 2, 4, 1, 6, 0, 2], [3, 3, 0, 3, 0, 3, 0, 3, 0, 0, 2, 3, 3, 2, 3, 2, 4, 3, 0, 3, 4, 1, 1, 1, 2, 1, 3, 3, 4, 2, 1, 4, 4], [17, 88, 70, 97, 48, 12, 60, 9, 54, 64], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1], [0, 3, 2, 9, 6, 8, 4], [0, 4, 2], [87, 74, 82], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [4, 7, 7, 1, 4, 1, 4, 1, 8, 2, 2, 4, 8, 3, 3, 1, 0, 0, 2, 0, 1, 0, 5, 6, 3, 3, 0, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [2, 2, 2, 3, 0, 3, 2, 0, 1, 3, 3, 0, 1, 2, 2, 0, 0, 1, 3, 0, 1, 0, 3, 1, 1, 3, 0, 3, 1], [30, 23, 13, 96, 41, 62]], "fitness": -0.04028571397066116, "mapping_values": [1, 4, 4, 2, 2, 1, 4, 4, 3, 1, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.negative(grad)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.square(grad), tf.math.add(beta, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(sigma)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.3016598962159787, 2.302454428256479, 2.302725567305644, 2.302185654278051, 2.3016658670410046, 2.304118217084827], "accuracy": [0.09457138925790787, 0.09113723784685135, 0.08770307898521423, 0.08955223858356476, 0.09496764093637466, 0.09113723784685135], "val_loss": [1.9714454923357283, 1.9714595249720983, 1.97148220879691, 1.9715179715837752, 1.9715675626482283, 1.971632412501744], "val_accuracy": [0.03500000014901161, 0.03500000014901161, 0.03433333337306976, 0.03400000184774399, 0.03333333507180214, 0.03200000151991844]}}]