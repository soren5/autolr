[{"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [7, 6, 4, 9, 2, 3, 0, 6, 0, 4, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [1, 3, 3, 3, 3, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [84, 19, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 1, 0, 0], [0, 3, 3, 4], [4, 0], [77, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8437142968177795, "mapping_values": [1, 4, 4, 3, 1, 1, 5, 5, 2, 3, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), grad)), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.066010688951286, 2.1546601381567663, 1.8932077358616437, 1.3442093926555587, 1.0458808960128596, 0.7436243719302621, 0.6726805632612913, 0.6518276655804669, 0.6094591495792675, 0.6049092882785815, 0.566638978409997, 0.5540883834918476, 0.5495365111110799, 0.5280954986515456, 0.5235117051296262, 0.5086971128684434, 0.5079795114549396, 0.5135593301332575, 0.47958679776528035, 0.4730262790987788, 0.45836432794412335, 0.4478498898272375, 0.4753418846365609, 0.4464764339521403, 0.4192342242395023, 0.45325917496011714, 0.42382398332744586, 0.41013821433989, 0.4006539221689166, 0.38801614967524306, 0.4052193629593661, 0.3777622158627201, 0.3689390433273925, 0.37244961586421776, 0.3666972383933533, 0.3537056487486142, 0.37095004603563914, 0.34938547511567464, 0.3503366580665733, 0.34204875600572593, 0.33899485500827836, 0.3263518795943799, 0.3351757686647678, 0.313494407143402, 0.3102836678954258, 0.31103167678654514, 0.3126069567049531, 0.3112058372718626, 0.29501804016238237, 0.2924991058021599, 0.28016730625363956, 0.3007433232992175, 0.27717901592115446, 0.29357081144682057, 0.2844944895494726, 0.28558367122323397, 0.2634324824073138], "accuracy": [0.30299827456474304, 0.22903183102607727, 0.3563597798347473, 0.5672962665557861, 0.6322810649871826, 0.7243428826332092, 0.7473253011703491, 0.755118191242218, 0.7720248103141785, 0.7733456492424011, 0.7898560166358948, 0.7921014428138733, 0.7898560166358948, 0.8010830879211426, 0.8045172095298767, 0.8064984679222107, 0.8020076751708984, 0.807158887386322, 0.8175934553146362, 0.8259146809577942, 0.8323867321014404, 0.8318583965301514, 0.8214238286018372, 0.8314621448516846, 0.8462554216384888, 0.83119797706604, 0.8436138033866882, 0.8441421389579773, 0.8490291833877563, 0.8564258217811584, 0.8466516733169556, 0.8569541573524475, 0.8597279191017151, 0.8599920868873596, 0.8577466607093811, 0.8669924736022949, 0.8593316674232483, 0.8681812286376953, 0.863558292388916, 0.8679170608520508, 0.8746532797813416, 0.8761062026023865, 0.8729361891746521, 0.8815215826034546, 0.8853520154953003, 0.8825782537460327, 0.8816536664962769, 0.8840311765670776, 0.8916919827461243, 0.8869370222091675, 0.8944657444953918, 0.8848236799240112, 0.8936732411384583, 0.8833707571029663, 0.8910315632820129, 0.8882578015327454, 0.8977677822113037], "val_loss": [1.9632863317217146, 1.8035431589399065, 1.3718360151563371, 1.0774157728467668, 0.5872149126870292, 0.5228916576930455, 0.5079993009567261, 0.5191025223050799, 0.5152763298579625, 0.46879020759037565, 0.4246851716722761, 0.41837845529828754, 0.4132922887802124, 0.4217872279030936, 0.419634325163705, 0.41256031819752287, 0.4068335635321481, 0.41829748664583477, 0.3886244807924543, 0.40047669410705566, 0.4130402292524065, 0.4091015117509024, 0.3670638033321926, 0.3756618584905352, 0.37678769656590055, 0.3601016402244568, 0.3536181535039629, 0.35426591975348337, 0.352435759135655, 0.3725390774863107, 0.3467985561915806, 0.3628530332020351, 0.3633073738643101, 0.36510658264160156, 0.3576823558126177, 0.3874223061970302, 0.3389192649296352, 0.36783725023269653, 0.3383820823260716, 0.345836409500667, 0.33326046807425364, 0.3662695118359157, 0.33208208424704416, 0.3318660684994289, 0.32484835386276245, 0.3611901487622942, 0.359745340687888, 0.33801517316273283, 0.3454650214740208, 0.3331823859895979, 0.34656756264822824, 0.32648026943206787, 0.3406481828008379, 0.3360529456819807, 0.3213091322353908, 0.35488791125161306, 0.3509477291788374], "val_accuracy": [0.10366666316986084, 0.4076666533946991, 0.4556666612625122, 0.5046666860580444, 0.7396666407585144, 0.7703333497047424, 0.7763333320617676, 0.7553333044052124, 0.7609999775886536, 0.7946666479110718, 0.8173333406448364, 0.8203333616256714, 0.8203333616256714, 0.8180000185966492, 0.812666654586792, 0.8203333616256714, 0.8270000219345093, 0.8196666836738586, 0.8330000042915344, 0.8276666402816772, 0.8233333230018616, 0.8240000009536743, 0.8476666808128357, 0.8410000205039978, 0.840666651725769, 0.8486666679382324, 0.8479999899864197, 0.8526666760444641, 0.8519999980926514, 0.8426666855812073, 0.8529999852180481, 0.8463333249092102, 0.8483333587646484, 0.846666693687439, 0.8556666374206543, 0.843666672706604, 0.8586666584014893, 0.8489999771118164, 0.8603333234786987, 0.8560000061988831, 0.8646666407585144, 0.8483333587646484, 0.8653333187103271, 0.862666666507721, 0.8653333187103271, 0.8603333234786987, 0.8550000190734863, 0.8683333396911621, 0.8673333525657654, 0.8643333315849304, 0.862666666507721, 0.8740000128746033, 0.8663333058357239, 0.8709999918937683, 0.8703333139419556, 0.8613333106040955, 0.8679999709129333]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [3, 4, 3, 9, 2, 1, 0, 5, 8, 0, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [1, 3, 2, 2, 0, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [84, 19, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 1, 0, 0], [0, 9, 3, 4], [5, 0], [53, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8354285955429077, "mapping_values": [1, 4, 4, 3, 1, 1, 7, 7, 4, 3, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.multiply(alpha, tf.math.add(beta, tf.math.pow(tf.math.multiply(tf.math.add(beta, grad), beta), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.066011997592479, 2.1518993616072635, 1.893789633752301, 1.455864812798425, 1.0646419276839723, 0.785247932855306, 0.693048694697133, 0.6780814875575136, 0.6149387313957149, 0.6142286273387949, 0.581705130543203, 0.5581530900348557, 0.5462283303063418, 0.5331586684060843, 0.5167826586718478, 0.5132126422204583, 0.5049867312181675, 0.491558715407843, 0.4745584914689334, 0.4693609854060551, 0.4625825184589175, 0.4379672228172077, 0.4475695991741274, 0.44033274116722065, 0.4211495698694981, 0.4231045414798091, 0.43026488269907437, 0.4014914820514193, 0.4015950583479487, 0.38507009063493214, 0.3797273137125089, 0.3781257533220929, 0.372382340630709, 0.3481114660476445, 0.35358741229567087, 0.34658001055649446, 0.34794094128426684, 0.3599554714651439, 0.3213703426560863, 0.32321708428861284, 0.32666055181668563, 0.31361989133535295, 0.3086443600983998], "accuracy": [0.3028661906719208, 0.22916391491889954, 0.36824727058410645, 0.5165764093399048, 0.63096022605896, 0.7054550051689148, 0.7378153204917908, 0.7413815855979919, 0.7721568942070007, 0.7709681391716003, 0.7825914621353149, 0.7905164361000061, 0.7981772422790527, 0.7992339134216309, 0.8038568496704102, 0.8105930685997009, 0.8100647330284119, 0.8186501264572144, 0.8204993009567261, 0.8222163319587708, 0.828292191028595, 0.8372738361358643, 0.8323867321014404, 0.8356888294219971, 0.8388587832450867, 0.8432175517082214, 0.8400475382804871, 0.8437458872795105, 0.8471800088882446, 0.8549728989601135, 0.852331280708313, 0.8582749962806702, 0.8589354157447815, 0.8702945709228516, 0.863558292388916, 0.870030403137207, 0.8689737319946289, 0.8585391640663147, 0.8745211958885193, 0.8784837126731873, 0.8755778670310974, 0.8778232932090759, 0.8820499181747437], "val_loss": [1.9632696424211775, 1.8059287071228027, 1.088815552847726, 0.7998141390936715, 0.5949558871132987, 0.526898809841701, 0.5115068129130772, 0.5048483099256244, 0.5005611181259155, 0.46465252126966206, 0.44041078431265696, 0.4154739465032305, 0.41894686222076416, 0.42539407525743755, 0.42841542618615286, 0.4455633674349104, 0.38495602778026033, 0.4042573230607169, 0.3986136998449053, 0.3816452366965158, 0.3993502003805978, 0.373434807573046, 0.3628825971058437, 0.3602836472647531, 0.377657949924469, 0.36082980462483, 0.35712305137089323, 0.3577585986682347, 0.35467460325786043, 0.3675756369318281, 0.34675065108707975, 0.3758542707988194, 0.35133780751909527, 0.3707743287086487, 0.3358753664152963, 0.34943307297570364, 0.369795024394989, 0.33722218445369173, 0.3383174879210336, 0.3539234059197562, 0.34033420256205965, 0.3400759441511972, 0.3311903476715088], "val_accuracy": [0.10366666316986084, 0.4059999883174896, 0.6013333201408386, 0.6890000104904175, 0.7366666793823242, 0.7689999938011169, 0.7746666669845581, 0.7716666460037231, 0.7760000228881836, 0.8036666512489319, 0.8073333501815796, 0.8203333616256714, 0.8203333616256714, 0.809333324432373, 0.8003333210945129, 0.8019999861717224, 0.8379999995231628, 0.8296666741371155, 0.8266666531562805, 0.8323333263397217, 0.8330000042915344, 0.8426666855812073, 0.8510000109672546, 0.8460000157356262, 0.8429999947547913, 0.8506666421890259, 0.8543333411216736, 0.8550000190734863, 0.8516666889190674, 0.8483333587646484, 0.8586666584014893, 0.8309999704360962, 0.859000027179718, 0.8393333554267883, 0.8619999885559082, 0.8543333411216736, 0.8396666646003723, 0.8663333058357239, 0.8619999885559082, 0.8460000157356262, 0.8600000143051147, 0.8616666793823242, 0.8646666407585144]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [7, 3, 3, 2, 2, 1, 0, 2, 8, 0, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [2, 3, 3, 3, 3, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [84, 19, 30, 73, 40, 57, 35, 9, 54, 64], [0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 1, 0, 0], [0, 9, 3, 4], [5, 0], [53, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.833142876625061, "mapping_values": [1, 4, 4, 3, 1, 1, 34, 34, 24, 10, 3, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.negative(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.negative(tf.math.add(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))))))))), grad), tf.math.add(tf.math.square(tf.math.add(beta, alpha)), tf.math.sqrt(tf.math.add(beta, grad))))))), tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, alpha))), tf.math.add(beta, grad)))), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.066089915372692, 2.1461474130245293, 1.8805817768259165, 1.1111517438893588, 0.8310253868926832, 0.7184792690273321, 0.6632477224872979, 0.701187464444865, 0.6134224247072729, 0.6179644352708589, 0.5777752621613789, 0.5524313565274239, 0.5525268161175604, 0.5261467491331795, 0.5270247680557371, 0.5213358808722651, 0.4964463372453171, 0.5033384747335766, 0.4692422794021903, 0.4557107045681658, 0.4518072431341941, 0.44404430446324333, 0.44624870451072013, 0.4270903788986239, 0.40874079122928786, 0.42325013919261467, 0.3992906247368106, 0.3963350496075141, 0.38580151189036455, 0.3703652389801221, 0.3746538685061251, 0.35935294643888827, 0.36088423512599505, 0.33447019922939575, 0.34444835577753036, 0.3456834303767469], "accuracy": [0.3028661906719208, 0.23444722592830658, 0.37683266401290894, 0.6003170013427734, 0.6977941989898682, 0.7238145470619202, 0.7528728246688843, 0.7469290494918823, 0.7676661014556885, 0.7683265209197998, 0.7810064554214478, 0.791441023349762, 0.7878747582435608, 0.8034605979919434, 0.7957997918128967, 0.8004226684570312, 0.8124422430992126, 0.806630551815033, 0.8227446675300598, 0.8309338092803955, 0.8354246616363525, 0.8341038227081299, 0.8352925777435303, 0.8379341959953308, 0.848368763923645, 0.843481719493866, 0.8553691506385803, 0.847840428352356, 0.8594637513160706, 0.8607845902442932, 0.8573504090309143, 0.8698983192443848, 0.8631620407104492, 0.8737286925315857, 0.8692378997802734, 0.8709549307823181], "val_loss": [1.9634231158665247, 1.7794600895472936, 1.1569377013615199, 0.6782997676304409, 0.5743734155382428, 0.5260182278496879, 0.5302307605743408, 0.48773445401872906, 0.516183887209211, 0.46201116698128836, 0.43484552417482647, 0.4176836609840393, 0.42574040378843037, 0.47943542684827534, 0.42572042771748136, 0.40784371750695364, 0.39060477699552265, 0.4013626660619463, 0.3873751333781651, 0.40671710457120624, 0.42024753774915424, 0.4091483013970511, 0.36069110461643766, 0.36654978139059885, 0.3957804782049997, 0.35181874888283865, 0.353404632636479, 0.3556973508426121, 0.35208448341914583, 0.3557755776814052, 0.3380130188805716, 0.39951322759900776, 0.3465416005679539, 0.38081555707114084, 0.37361500944410053, 0.34859361818858553], "val_accuracy": [0.10366666316986084, 0.3930000066757202, 0.5120000243186951, 0.7179999947547913, 0.7336666584014893, 0.7670000195503235, 0.7716666460037231, 0.7799999713897705, 0.7609999775886536, 0.8040000200271606, 0.8090000152587891, 0.8216666579246521, 0.8100000023841858, 0.777999997138977, 0.8009999990463257, 0.82833331823349, 0.8333333134651184, 0.8316666483879089, 0.8336666822433472, 0.8246666789054871, 0.8173333406448364, 0.8296666741371155, 0.8533333539962769, 0.8463333249092102, 0.8393333554267883, 0.8539999723434448, 0.8516666889190674, 0.846666693687439, 0.859333336353302, 0.8486666679382324, 0.8613333106040955, 0.8206666707992554, 0.8610000014305115, 0.8393333554267883, 0.8523333072662354, 0.859333336353302]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [7, 2, 4, 9, 2, 3, 0, 6, 0, 4, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [1, 3, 3, 3, 3, 3, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [85, 19, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 1, 1, 0, 0], [0, 3, 3, 4], [4, 0], [53, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8302857279777527, "mapping_values": [1, 4, 4, 3, 1, 1, 9, 9, 5, 4, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad)))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.066018161740931, 2.1473842849978335, 1.8800521072001741, 1.0785681550938298, 0.8239812059346412, 0.7224448607692534, 0.6692065124687439, 0.669165696639269, 0.6036789345309845, 0.6152376279681665, 0.5700446756729093, 0.5478424126319976, 0.5635515329246082, 0.5147670459013574, 0.5237290655396728, 0.4985156421254513, 0.4934877308289514, 0.49037365546678086, 0.4651552648033212, 0.466348210901018, 0.44404419516969146, 0.4441932603754246, 0.4440632367556074, 0.4427461519083563, 0.41583596797997785, 0.43124227042935703, 0.3965122380182334, 0.39958369871644517], "accuracy": [0.3028661906719208, 0.23339056968688965, 0.39043718576431274, 0.6176198720932007, 0.6984546184539795, 0.7271166443824768, 0.7519482374191284, 0.7475894689559937, 0.7724210619926453, 0.7725531458854675, 0.7890635132789612, 0.7952714562416077, 0.7819310426712036, 0.8112534880638123, 0.7993659973144531, 0.8136309385299683, 0.8109893202781677, 0.8168009519577026, 0.8249900937080383, 0.8284242749214172, 0.8374059200286865, 0.8362171649932861, 0.8297450542449951, 0.8325188159942627, 0.846387505531311, 0.8442742228507996, 0.8560295701026917, 0.8487650156021118], "val_loss": [1.963404314858573, 1.7807228905814034, 1.171175786427089, 0.6525367157799857, 0.5356465918677193, 0.5276522977011544, 0.5205049174172538, 0.48175707885197233, 0.520129884992327, 0.4630293164934431, 0.4249518258231027, 0.45733502932957243, 0.41368818283081055, 0.4771854877471924, 0.4162466270583017, 0.4122392364910671, 0.40112377064568655, 0.3975875122206552, 0.3954504983765738, 0.4029820902006967, 0.39815365416663034, 0.3879584755216326, 0.3587719372340611, 0.3679695129394531, 0.37318222863333567, 0.3484732593808855, 0.359433114528656, 0.37136049781526836], "val_accuracy": [0.10366666316986084, 0.3903333246707916, 0.5789999961853027, 0.7133333086967468, 0.7620000243186951, 0.765666663646698, 0.7696666717529297, 0.7933333516120911, 0.7683333158493042, 0.8053333163261414, 0.8159999847412109, 0.7839999794960022, 0.8159999847412109, 0.7870000004768372, 0.8149999976158142, 0.8169999718666077, 0.82833331823349, 0.8303333520889282, 0.8299999833106995, 0.8323333263397217, 0.8389999866485596, 0.8276666402816772, 0.8556666374206543, 0.8460000157356262, 0.8450000286102295, 0.8553333282470703, 0.8519999980926514, 0.8416666388511658]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [7, 4, 3, 2, 2, 1, 0, 2, 8, 0, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [2, 3, 3, 3, 3, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [84, 19, 30, 73, 40, 57, 35, 9, 54, 64], [0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 1, 0, 0], [0, 9, 3, 4], [4, 0], [53, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.6100000143051147, "mapping_values": [1, 4, 4, 3, 1, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.414537039509759, 2.1370846752823778, 2.303576507808951, 2.137939560131516, 1.6251953140210167, 2.170240818942464, 2.240224686092185, 2.2015294941771284, 1.7551012101221897, 2.3315700958779995], "accuracy": [0.2475234419107437, 0.20274733006954193, 0.1022322028875351, 0.2281072586774826, 0.4159291982650757, 0.2098798006772995, 0.14793290197849274, 0.20604939758777618, 0.40443798899650574, 0.1026284471154213], "val_loss": [1.8172200747898646, 1.9763332094464983, 1.9651449748447962, 1.7163189138684953, 0.958306074142456, 1.976583685193743, 1.3818608692714147, 1.7930284227643694, 2.0686941146850586, 1.9763005801609583], "val_accuracy": [0.2680000066757202, 0.10333333164453506, 0.14000000059604645, 0.20266667008399963, 0.5953333377838135, 0.0949999988079071, 0.4126666784286499, 0.2773333191871643, 0.10366666316986084, 0.0949999988079071]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [7, 4, 3, 2, 2, 1, 6, 2, 3, 3, 3, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [2, 5, 3, 3, 3, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [92, 19, 30, 73, 40, 57, 35, 9, 54, 64], [0, 0, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 1, 1, 0, 0], [0, 9, 3, 4], [4, 0], [5, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.427142858505249, "mapping_values": [1, 4, 4, 3, 1, 1, 37, 37, 24, 13, 3, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.pow(tf.math.multiply(tf.math.add(tf.math.add(beta, beta), grad), tf.math.add(tf.math.subtract(tf.math.add(beta, grad), tf.math.divide_no_nan(grad, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.multiply(tf.math.add(beta, grad), alpha), tf.math.add(beta, tf.math.square(grad))), tf.math.negative(tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)))), grad))), tf.math.add(tf.math.add(beta, alpha), tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.add(beta, grad))), tf.math.sqrt(alpha)))))))))), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.414486129128654, 2.1361886640943477, 2.3030887376898392, 2.2641539183810497, 2.1952982853589798, 2.3063349787742706, 2.303901306752437, 2.303290973108332, 2.3031402777340655], "accuracy": [0.2475234419107437, 0.2028794139623642, 0.09932637959718704, 0.24593845009803772, 0.22176727652549744, 0.10170386731624603, 0.0940430611371994, 0.09325055778026581, 0.09589222073554993], "val_loss": [1.81709657396589, 1.9762392725263322, 1.9610985347202845, 1.71059707232884, 1.9780806813921248, 1.9745197977338518, 1.9737441880362374, 1.9736811092921667, 1.9736463001796178], "val_accuracy": [0.2683333456516266, 0.10599999874830246, 0.1459999978542328, 0.45899999141693115, 0.0949999988079071, 0.0949999988079071, 0.09799999743700027, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [5, 66, 89, 50, 85, 46], [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [2, 9, 4, 0, 3, 2, 0, 2, 8, 9, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [1, 3, 2, 1, 3, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [3, 19, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 1, 1, 0, 0], [0, 9, 3, 4], [4, 0], [53, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.2571428716182709, "mapping_values": [1, 4, 4, 3, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.negative(tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3023323932139315, 2.300759322796641, 2.2994465045389827, 2.3023500520287725, 2.2995638151084425, 2.3002911821694627, 2.3013452195283555, 2.3007420280180932, 2.3005187480897793, 2.299881715154793, 2.3002023067708657, 2.298672801074319, 2.2991517723795445, 2.2995852481860686, 2.2975886626691393, 2.2986610843331947, 2.2977834265891195, 2.2975019323134607, 2.2972724297578546, 2.297485288171059, 2.2976269408019308, 2.2962182939265148, 2.294539536750863, 2.2941222330677102, 2.297800972382658, 2.2945045421561545, 2.294762433086955, 2.296144850643603, 2.2958096721940398, 2.2955406992238006, 2.2932933918032523, 2.292458746805167, 2.2937518213214405, 2.2940884560106483, 2.293599359111511, 2.291532663101722, 2.290883912260443, 2.2915283485158655, 2.2907774940284646, 2.2935559086087296, 2.291900818767706, 2.291844108778299, 2.290859465554343, 2.2911837962892125, 2.2898419662284626, 2.289824917678269, 2.29064389582654, 2.2908822139177687, 2.2900511395614758, 2.2900549607458935, 2.2887973593620026, 2.2892984841336284, 2.2887553320647767, 2.289339003640395, 2.2883268452874734, 2.287187844597511, 2.289444442595851, 2.2879160652543575, 2.2860382901930993, 2.2860941307466924, 2.2864950534579713, 2.2857665701029624, 2.2851234016133777, 2.284198462388393, 2.284892759523403, 2.2848973021043086, 2.2844948081166563, 2.2855348274645126, 2.284026517844109, 2.2850388003346658, 2.2839673143635495, 2.2811010474022497, 2.2844747427573937, 2.282897247787574, 2.282210148462546, 2.2819544234847067, 2.2824716853616795, 2.282853705897827, 2.2819523979187517, 2.2817093883570334, 2.281225520070864, 2.281775488183955, 2.2791511076883224, 2.280412154316729, 2.2806445045430883, 2.280418204908531, 2.279474779284468, 2.279411382615968, 2.2785851051621293, 2.2793015640771714, 2.2783835149318348, 2.277183859749178, 2.277908177124495, 2.2768819535554847, 2.278740476292862, 2.2768798445697946, 2.2775090954732335, 2.277153210003205, 2.277348593792596, 2.2775586623525763], "accuracy": [0.09060890227556229, 0.09351472556591034, 0.0948355570435524, 0.09206181764602661, 0.09602430462837219, 0.09311848133802414, 0.09206181764602661, 0.09509972482919693, 0.09576013684272766, 0.09708096832036972, 0.1018359512090683, 0.09681680053472519, 0.10196803510189056, 0.09998679161071777, 0.1022322028875351, 0.10527011007070541, 0.10619468986988068, 0.10381719470024109, 0.10606260597705841, 0.10447761416435242, 0.10130762308835983, 0.10513802617788315, 0.10949676483869553, 0.11094967275857925, 0.10540219396352768, 0.1014397069811821, 0.10527011007070541, 0.09959053993225098, 0.107647605240345, 0.107647605240345, 0.11332716792821884, 0.11015717685222626, 0.1146479994058609, 0.10949676483869553, 0.11768590658903122, 0.11345925182104111, 0.11781799048185349, 0.11636507511138916, 0.12112006545066833, 0.10910051316022873, 0.1162329912185669, 0.11649715900421143, 0.12112006545066833, 0.11847840249538422, 0.12296922504901886, 0.1212521493434906, 0.11649715900421143, 0.11306300014257431, 0.12151630967855453, 0.1212521493434906, 0.12270505726337433, 0.1212521493434906, 0.12481838464736938, 0.12323339283466339, 0.12191256135702133, 0.12613920867443085, 0.13115836679935455, 0.12296922504901886, 0.12930920720100403, 0.13538502156734467, 0.13630960881710052, 0.13010171055793762, 0.1302337795495987, 0.13300752639770508, 0.13736626505851746, 0.1294412910938263, 0.13855500519275665, 0.13538502156734467, 0.13551710546016693, 0.13472460210323334, 0.13710209727287292, 0.1492537260055542, 0.13776251673698425, 0.1398758441209793, 0.1398758441209793, 0.14000792801380157, 0.14132875204086304, 0.13895125687122345, 0.1422533392906189, 0.14397041499614716, 0.14410249888896942, 0.14397041499614716, 0.14938580989837646, 0.15334829688072205, 0.14449875056743622, 0.151234969496727, 0.14674416184425354, 0.15453705191612244, 0.1550653874874115, 0.1468762308359146, 0.15017831325531006, 0.15281997621059418, 0.15440496802330017, 0.15876370668411255, 0.1488574892282486, 0.15440496802330017, 0.15242372453212738, 0.15902787446975708, 0.1542728841304779, 0.15955619513988495], "val_loss": [1.9706943375723702, 1.970451831817627, 1.970208031790597, 1.969965866633824, 1.9697247232709612, 1.9694834436689104, 1.969242709023612, 1.969001225062779, 1.9687632152012415, 1.9685209819248743, 1.968283244541713, 1.9680444853646415, 1.967804295676095, 1.967564514705113, 1.9673263686043876, 1.967085361480713, 1.9668472153799874, 1.9666077750069755, 1.9663704463413783, 1.966132640838623, 1.9658934048243932, 1.9656553268432617, 1.9654152733939034, 1.965177127293178, 1.9649383681161063, 1.9646997451782227, 1.9644601004464286, 1.9642233848571777, 1.963986601148333, 1.9637514523097448, 1.9635120800563268, 1.9632750919886999, 1.9630381720406669, 1.9628020014081682, 1.962564195905413, 1.9623265266418457, 1.962090083530971, 1.9618534360613142, 1.9616152218409948, 1.961380958557129, 1.961141790662493, 1.960906709943499, 1.9606680188860213, 1.9604309626988001, 1.960196086338588, 1.9599602563040597, 1.959723949432373, 1.9594853946140833, 1.9592490877423967, 1.9590136664254325, 1.9587764739990234, 1.9585390090942383, 1.9582996368408203, 1.9580674171447754, 1.9578325407845634, 1.9575956208365304, 1.9573628561837333, 1.957124846322196, 1.9568873814174108, 1.9566514151436942, 1.956413882119315, 1.956176689692906, 1.955939497266497, 1.9557017598833357, 1.955465248652867, 1.9552266938345773, 1.954991408756801, 1.954751900264195, 1.9545133454459054, 1.9542784009660994, 1.9540395055498396, 1.9538010188511439, 1.9535646438598633, 1.9533274514334542, 1.953090054648263, 1.952852385384696, 1.952615737915039, 1.9523780005318778, 1.952141216823033, 1.951904024396624, 1.951667308807373, 1.951427732195173, 1.9511874062674386, 1.9509496688842773, 1.950712067740304, 1.9504716055733817, 1.9502308709280831, 1.94999361038208, 1.9497528076171875, 1.9495130947657995, 1.9492736543927873, 1.9490325110299247, 1.9487921169825964, 1.948549474988665, 1.948305606842041, 1.9480654852730888, 1.9478285653250558, 1.947589942387172, 1.947347845349993, 1.947106225149972], "val_accuracy": [0.03999999910593033, 0.041999999433755875, 0.04266666620969772, 0.04466666653752327, 0.045666664838790894, 0.04633333161473274, 0.046666666865348816, 0.04899999871850014, 0.05166666582226753, 0.054666668176651, 0.054999999701976776, 0.056333333253860474, 0.057999998331069946, 0.05966666713356972, 0.061666667461395264, 0.06400000303983688, 0.06466666609048843, 0.06700000166893005, 0.06966666877269745, 0.07100000232458115, 0.07133333384990692, 0.07333333045244217, 0.07599999755620956, 0.07733333110809326, 0.07866666465997696, 0.08100000023841858, 0.08266666531562805, 0.0846666693687439, 0.08699999749660492, 0.08833333104848862, 0.09000000357627869, 0.09166666865348816, 0.09466666728258133, 0.09833333641290665, 0.10133333504199982, 0.10466666519641876, 0.10700000077486038, 0.10866666585206985, 0.11033333092927933, 0.11400000005960464, 0.11566666513681412, 0.11666666716337204, 0.11966666579246521, 0.12133333086967468, 0.12466666847467422, 0.12700000405311584, 0.12933333218097687, 0.1313333362340927, 0.13466666638851166, 0.13699999451637268, 0.14000000059604645, 0.14300000667572021, 0.1459999978542328, 0.1496666669845581, 0.15299999713897705, 0.156333327293396, 0.1589999943971634, 0.16099999845027924, 0.164000004529953, 0.1653333306312561, 0.1666666716337204, 0.1679999977350235, 0.1706666648387909, 0.17166666686534882, 0.17299999296665192, 0.17633333802223206, 0.17866666615009308, 0.18033333122730255, 0.18266665935516357, 0.18400000035762787, 0.18733333051204681, 0.1913333386182785, 0.19366666674613953, 0.19433332979679108, 0.19599999487400055, 0.19766665995121002, 0.2006666660308838, 0.20399999618530273, 0.20666666328907013, 0.2096666693687439, 0.2123333364725113, 0.21533332765102386, 0.2163333296775818, 0.21933333575725555, 0.22066666185855865, 0.22200000286102295, 0.2253333330154419, 0.22833333909511566, 0.23000000417232513, 0.23266667127609253, 0.23466666042804718, 0.23766666650772095, 0.23899999260902405, 0.2423333376646042, 0.24433332681655884, 0.24766667187213898, 0.25, 0.2523333430290222, 0.25433334708213806, 0.25699999928474426]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [7, 6, 4, 8, 2, 3, 0, 6, 0, 4, 2, 5, 2, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [2, 3, 3, 3, 3, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [84, 19, 30, 73, 40, 57, 35, 9, 54, 64], [0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0], [9, 9, 3, 4], [4, 0], [53, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.24228571355342865, "mapping_values": [1, 4, 4, 3, 1, 1, 35, 35, 22, 13, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.sqrt(beta), tf.math.add(beta, grad))), tf.math.add(tf.math.multiply(grad, tf.math.negative(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(tf.math.pow(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.square(grad)))), tf.math.add(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), grad)))))), tf.math.add(tf.math.add(beta, alpha), tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.add(beta, grad))), tf.math.sqrt(alpha)))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.473490608366741, 2.929231182490641, 4.897115479213467, 2.3643134994718458, 2.2327133976567644, 2.1778937531122207, 2.1065560070877267, 2.078717046898149, 2.0709981033122142, 2.0992169909237273, 137335807.4776738, NaN, NaN, NaN, NaN], "accuracy": [0.25980716943740845, 0.12719587981700897, 0.11227050423622131, 0.14436666667461395, 0.1666886806488037, 0.1978602558374405, 0.24646678566932678, 0.24303261935710907, 0.25280675292015076, 0.22797517478466034, 0.23418307304382324, 0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.2811977522713796, 2.017864772251674, 2.0904341425214494, 1.6364216804504395, 1.693807533809117, 1.7102225167410714, 1.587914569037301, 1.4835732664380754, 1.7116590227399553, 1.528376885822841, 1.5770541889647049e+34, NaN, NaN, NaN, NaN], "val_accuracy": [0.23199999332427979, 0.09799999743700027, 0.10733333230018616, 0.2809999883174896, 0.2513333261013031, 0.3336666524410248, 0.30300000309944153, 0.34466665983200073, 0.2653333246707916, 0.3766666650772095, 0.10366666316986084, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [7, 5, 4, 9, 2, 3, 0, 6, 0, 4, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [1, 3, 2, 2, 3, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [84, 19, 30, 73, 40, 57, 35, 9, 54, 64], [0, 0, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 1, 1, 0, 0], [0, 9, 3, 4], [4, 0], [53, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.1348571479320526, "mapping_values": [1, 2, 2, 1, 1, 0, 11, 11, 7, 4, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, tf.math.pow(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.multiply(alpha, grad), tf.math.add(beta, tf.math.negative(beta))))))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.9423012464526086, 2.38276707863118, 2.620083475503404, 2.6288413587672723, 2.395977637960202, 2.3917258240212664, 2.389465154894213], "accuracy": [0.18650111556053162, 0.14251750707626343, 0.19284109771251678, 0.11993131786584854, 0.10513802617788315, 0.1026284471154213, 0.09919429570436478], "val_loss": [2.041774000440325, 1.8305003302437919, 2.065502439226423, 2.098266397203718, 2.032754489353725, 2.0159754071916853, 2.0505625179835727], "val_accuracy": [0.09666666388511658, 0.21699999272823334, 0.14433333277702332, 0.10233332961797714, 0.10199999809265137, 0.09799999743700027, 0.09666666388511658]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [7, 4, 3, 2, 2, 1, 9, 2, 5, 0, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [2, 3, 3, 3, 3, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [40, 19, 30, 73, 40, 57, 35, 9, 54, 64], [0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 1, 0, 0], [0, 9, 3, 4], [5, 0], [53, 2], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 3, 1, 1, 17, 17, 10, 7, 1, 2, 1, 1, 0, 0, 7, 3, 4, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.multiply(tf.math.add(beta, tf.math.add(beta, grad)), tf.math.add(tf.math.subtract(grad, grad), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.square(tf.math.negative(tf.math.add(beta, alpha))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.pow(tf.math.multiply(beta, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [2, 9, 4, 0, 3, 2, 0, 2, 8, 9, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [1, 3, 2, 1, 3, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [3, 19, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 1, 1, 0, 0], [0, 9, 3, 4], [4, 0], [53, 2], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 3, 1, 1, 11, 11, 7, 4, 1, 1, 0, 0, 0, 0, 7, 3, 4, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(grad, tf.math.negative(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.negative(alpha), grad), beta))), alpha))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.pow(tf.math.multiply(beta, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 4, 9, 8, 2, 2, 0, 1, 4, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [7, 8, 4, 0, 2, 6, 1, 2, 5, 2, 2, 5, 0, 3, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [0, 3, 1, 3, 3, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [17, 19, 30, 73, 40, 57, 35, 9, 54, 64], [0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 1, 0, 0], [0, 3, 3, 4], [4, 0], [77, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 6, 4, 3, 1, 1, 0, 1, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.add(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(alpha, grad), tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [5, 6, 4, 9, 2, 1, 0, 6, 0, 4, 2, 5, 2, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [2, 5, 3, 3, 3, 3, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [84, 19, 30, 73, 40, 57, 35, 9, 54, 64], [1, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 1, 1, 0, 0], [0, 9, 3, 4], [4, 0], [5, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 24, 24, 16, 8, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.pow(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), beta), tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.negative(grad), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.add(grad, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))))))))), tf.math.add(grad, tf.math.square(tf.math.add(beta, grad))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0684189647436142, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [7, 4, 3, 2, 8, 1, 0, 2, 8, 0, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [2, 3, 3, 3, 3, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [1, 19, 30, 73, 40, 57, 35, 9, 54, 64], [0, 0, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 1, 0, 0], [0, 9, 3, 4], [5, 0], [53, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 2, 2, 0, 1, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07449477910995483, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [83, 66, 89, 50, 85, 46], [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [7, 6, 4, 9, 2, 3, 0, 6, 0, 4, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [2, 5, 3, 3, 3, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [84, 19, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 1, 1, 0, 0], [0, 9, 3, 4], [4, 0], [5, 2], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 3, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 3, 4, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.pow(tf.math.multiply(beta, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), beta))", "other_info": {"loss": [2.303821475829242, 2.3038271731231914, 2.304528820831164, 2.3067229053583977, 2.3064716142229416, 2.307575406840512], "accuracy": [0.09457138925790787, 0.10011887550354004, 0.09589222073554993, 0.09681680053472519, 0.09972262382507324, 0.09998679161071777], "val_loss": [1.9736856051853724, 1.9740888050624303, 1.974546023777553, 1.9754395484924316, 1.9788572447640556, 1.9767915180751257], "val_accuracy": [0.10366666316986084, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10199999809265137, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [4, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [7, 6, 9, 9, 2, 3, 0, 6, 0, 4, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [2, 5, 3, 3, 3, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [58, 19, 30, 73, 40, 57, 35, 9, 54, 64], [0, 0, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 1, 1, 0, 0], [0, 9, 3, 4], [4, 0], [53, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 3, 1, 1, 5, 5, 4, 1, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(beta, tf.math.divide_no_nan(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [7, 6, 4, 9, 2, 3, 0, 6, 0, 4, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [2, 5, 3, 3, 3, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [84, 19, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 1, 1, 0, 0], [0, 9, 3, 4], [4, 0], [5, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 4, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [1, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [6, 6, 4, 9, 2, 3, 0, 6, 0, 4, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [1, 0, 3, 3, 3, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [84, 19, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 1, 0, 0], [0, 3, 3, 4], [4, 0], [77, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 7, 7, 4, 3, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.pow(grad, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09668471664190292, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 1, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [7, 4, 3, 2, 2, 1, 2, 2, 8, 0, 2, 5, 0, 8, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [2, 3, 3, 3, 3, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [84, 19, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 1, 0, 0], [0, 3, 3, 4], [4, 0], [53, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 2, 36, 36, 23, 13, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(beta, grad)), tf.math.add(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(grad, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.negative(tf.math.add(tf.math.add(beta, grad), alpha)))), tf.math.square(grad)))), tf.math.negative(tf.math.sqrt(grad))))), tf.math.add(tf.math.add(beta, alpha), tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.add(beta, grad))), tf.math.sqrt(alpha)))))))))), tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [4.450951234996122, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.23365473747253418, 0.10566636174917221, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.231006554194859, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.1003333330154419, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 4, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [7, 4, 3, 2, 2, 1, 0, 2, 8, 0, 2, 5, 0, 9, 2, 5, 8, 2, 4, 6, 5, 8, 9, 9], [0, 3, 3, 3, 3, 1, 3, 3, 1, 3, 4, 3, 1, 4, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [84, 19, 30, 73, 40, 57, 35, 9, 54, 64], [1, 0, 1, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 1, 0, 0], [0, 9, 3, 4], [4, 0], [77, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [0, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 5, 5, 2, 3, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.pow(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), grad), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3030785443902158, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}]