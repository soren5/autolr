[{"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [5, 8, 2, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 7, 8, 4], [2, 1], [64], [0, 1, 0, 1, 0, 1], [3, 1, 9, 1, 2], [1, 0, 2], [15, 52, 13]], "fitness": -0.8442857265472412, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 4, 3, 2, 1, 0, 5, 3, 2, 2], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, beta))))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.156973705000771, 1.2682544919068646, 0.8673885479075419, 0.7494675278144033, 0.6810299652348011, 0.6485084189856608, 0.6169286322962134, 0.5820550213573694, 0.5634710120487175, 0.5413057716405151, 0.5192719732828585, 0.5008686355367675, 0.4821306142462495, 0.47235810515776977, 0.45476493915672617, 0.4376094493261654, 0.4319931748536568, 0.418477429209636, 0.40497225344283405, 0.400978592337713, 0.380847836781518, 0.36718805441924407, 0.3684022253247111, 0.36179517927722155, 0.3573706889424924, 0.3475943615746426, 0.33350056834964703, 0.3292223743640704, 0.33084375925067866, 0.31394624366437157, 0.3127858195212287, 0.3014472234266435, 0.29711269832809983, 0.28938623997104196, 0.2881478681705726, 0.28844918610003834, 0.27395521666844286, 0.2655400636646143, 0.2661571481232283, 0.2589169777757566, 0.25651507004219637, 0.24775309196048803], "accuracy": [0.27684587240219116, 0.5539559125900269, 0.6765288710594177, 0.7152291536331177, 0.7467969655990601, 0.7582882046699524, 0.7666094303131104, 0.7821952104568481, 0.7890635132789612, 0.8017435073852539, 0.8057059645652771, 0.8100647330284119, 0.8150838613510132, 0.8201030492782593, 0.8321225643157959, 0.8370096683502197, 0.8376700282096863, 0.844010055065155, 0.8498216867446899, 0.8508783578872681, 0.8601241707801819, 0.8642187118530273, 0.8626337051391602, 0.8660678863525391, 0.8627657890319824, 0.8672566413879395, 0.8778232932090759, 0.8766345381736755, 0.8786157965660095, 0.8828424215316772, 0.8824461698532104, 0.8894465565681458, 0.8860124349594116, 0.8887861371040344, 0.8939374089241028, 0.8931449055671692, 0.8927486538887024, 0.9013340473175049, 0.8961827754974365, 0.9009377956390381, 0.9050323367118835, 0.9019944667816162], "val_loss": [1.274186304637364, 0.6727304458618164, 0.5738992691040039, 0.5346254280635289, 0.5213202067783901, 0.4927587168557303, 0.464896559715271, 0.4432559013366699, 0.44515931606292725, 0.42596321446555, 0.4197336179869516, 0.39595932619912283, 0.3957004887717111, 0.38433302300316946, 0.37495775733675274, 0.3646028978484018, 0.36316230467387606, 0.3593986119542803, 0.3480168240410941, 0.3439673440796988, 0.34265993322644916, 0.3395316685949053, 0.33610297100884573, 0.3412818908691406, 0.3395821877888271, 0.33162745407649447, 0.3351582033293588, 0.33718590225492207, 0.3168813501085554, 0.31722815547670635, 0.3122537987572806, 0.31638028791972567, 0.3138969455446516, 0.3167599013873509, 0.3168242403439113, 0.31183476958956036, 0.31129994562694, 0.3175772854260036, 0.30904958077839445, 0.3158588409423828, 0.31115697962897165, 0.3191852399281093], "val_accuracy": [0.5873333215713501, 0.7129999995231628, 0.7473333477973938, 0.7666666507720947, 0.7593333125114441, 0.7820000052452087, 0.7960000038146973, 0.8140000104904175, 0.8083333373069763, 0.8186666369438171, 0.8186666369438171, 0.8339999914169312, 0.8383333086967468, 0.8429999947547913, 0.843999981880188, 0.8483333587646484, 0.8486666679382324, 0.8536666631698608, 0.8573333621025085, 0.862333357334137, 0.859666645526886, 0.8619999885559082, 0.8629999756813049, 0.8646666407585144, 0.859666645526886, 0.8619999885559082, 0.856333315372467, 0.8613333106040955, 0.8703333139419556, 0.8723333477973938, 0.8730000257492065, 0.8713333606719971, 0.8736666440963745, 0.8706666827201843, 0.8733333349227905, 0.8743333220481873, 0.8840000033378601, 0.874666690826416, 0.875, 0.8766666650772095, 0.8809999823570251, 0.8743333220481873]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [5, 8, 2, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 7, 8, 4], [1, 1], [64], [0, 1, 0, 1, 0, 1], [3, 1, 9, 1, 2], [1, 0, 2], [15, 52, 13]], "fitness": -0.8382856845855713, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 4, 3, 2, 1, 0, 5, 3, 2, 2], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.156406182859237, 1.2636802264602036, 0.8631717648094892, 0.7483834498562534, 0.6809224552403446, 0.6431606962397083, 0.6140316346884876, 0.5824622113895832, 0.5644449526214045, 0.5440006413165022, 0.5227375680728595, 0.5049116186155005, 0.4842488957063917, 0.4702036994527974, 0.45484722937181593, 0.43986699044539107, 0.42968794206318967, 0.4215153822526011, 0.40718707994557546, 0.40465524001852743, 0.3852822464478565, 0.3671916604884438, 0.37183004589349117, 0.35893066293370407, 0.35882059696202173, 0.3502313458979358, 0.34076423339792733, 0.3369625099244418, 0.3358486150871761, 0.3205417791425024, 0.31542728821819704, 0.3038807997354317, 0.30300372330000247, 0.2916654877462061, 0.288789914182117, 0.28751665726943715, 0.27624981979006835, 0.270738827081609, 0.2700413668617014, 0.26324698458085083, 0.2608838982200106, 0.25311896105751686], "accuracy": [0.27684587240219116, 0.5540879964828491, 0.6804913282394409, 0.7148329019546509, 0.7448157668113708, 0.7586844563484192, 0.7691190242767334, 0.7825914621353149, 0.7902522683143616, 0.7996301651000977, 0.8038568496704102, 0.8123101592063904, 0.8168009519577026, 0.8240655064582825, 0.8300092220306396, 0.8396512866020203, 0.8418967127799988, 0.8411042094230652, 0.8502179384231567, 0.850350022315979, 0.8590674996376038, 0.8683133125305176, 0.8607845902442932, 0.8640866279602051, 0.8623695969581604, 0.8688416481018066, 0.8747853636741638, 0.8742570281028748, 0.8728041052818298, 0.8802007436752319, 0.8805969953536987, 0.8877294659614563, 0.8842953443527222, 0.8902390599250793, 0.8938053250312805, 0.8936732411384583, 0.8916919827461243, 0.8977677822113037, 0.8972394466400146, 0.901862382888794, 0.9019944667816162, 0.9035794734954834], "val_loss": [1.2670108250209264, 0.673076868057251, 0.5831481218338013, 0.5351785932268415, 0.5081872940063477, 0.486081600189209, 0.46654396397726877, 0.44468603815351215, 0.4453438009534563, 0.4291213665689741, 0.4176332354545593, 0.3977606977735247, 0.3964851754052298, 0.38331944601876394, 0.3739581448691232, 0.36725024666105, 0.36325228214263916, 0.3612752727099827, 0.34634617396763395, 0.3455451216016497, 0.3375984770911081, 0.3379745398248945, 0.33268938745771137, 0.33888659306934904, 0.33882434027535574, 0.33736853088651386, 0.3415240730558123, 0.3485730631010873, 0.31814864703587126, 0.3181053910936628, 0.3114597031048366, 0.31195588622774395, 0.31304275138037546, 0.3181892718587603, 0.32064952169145855, 0.3097273451941354, 0.3096592596599034, 0.3163455809865679, 0.31481449944632395, 0.32261450801576885, 0.30562329292297363, 0.3235551800046648], "val_accuracy": [0.5893333554267883, 0.7149999737739563, 0.7416666746139526, 0.7649999856948853, 0.7753333449363708, 0.7870000004768372, 0.79666668176651, 0.8143333196640015, 0.8069999814033508, 0.8209999799728394, 0.8243333101272583, 0.8316666483879089, 0.8343333601951599, 0.8450000286102295, 0.8423333168029785, 0.8450000286102295, 0.8450000286102295, 0.8526666760444641, 0.8560000061988831, 0.8629999756813049, 0.8616666793823242, 0.859333336353302, 0.8633333444595337, 0.8646666407585144, 0.8586666584014893, 0.8606666922569275, 0.8543333411216736, 0.8553333282470703, 0.8700000047683716, 0.8736666440963745, 0.8743333220481873, 0.875333309173584, 0.8786666393280029, 0.871999979019165, 0.875, 0.8769999742507935, 0.8806666731834412, 0.8763333559036255, 0.8740000128746033, 0.8756666779518127, 0.878333330154419, 0.8769999742507935]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [5, 8, 2, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [6, 7, 8, 4], [1, 1], [64], [0, 1, 0, 1, 0, 1], [3, 1, 9, 1, 2], [1, 3, 2], [15, 52, 13]], "fitness": -0.5485714077949524, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(sigma, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3010374432179463, 2.299087638695006, 2.297263881108701, 2.2955318096842605, 2.294249674742012, 2.29033117822731, 2.290014066716321, 2.286088660062186, 2.2852651793266157, 2.283036178302425, 2.282779641328408, 2.280612384260543, 2.2767795988313906, 2.2749342927528393, 2.2736706037122056, 2.2722180424396625, 2.268999575970274, 2.2682734876024786, 2.2656790638297477, 2.263607578790262, 2.2607516349975882, 2.2603208123102414, 2.2581947534123055, 2.256160258837443, 2.2512892639128412, 2.2504641669317085, 2.2490263246290123, 2.245722510323092, 2.243895820544113, 2.2433147161801448, 2.239270585670668, 2.2348420590992855, 2.2330932042161313, 2.2307667925278776, 2.2279546060865707, 2.2260954406487863, 2.2252971724811372, 2.220990695375194, 2.2182226816834145, 2.2141229387413572, 2.213394550237327, 2.208888816669743, 2.2060256252797714, 2.203227801550302, 2.1988504975620846, 2.1963526879193336, 2.191768575133491, 2.190229849965896, 2.1834061053828666, 2.1813563423197047, 2.1769495807728827, 2.1743283257933497, 2.1694961138972046, 2.16555603135295, 2.160617272300554, 2.1574084356933017, 2.153720410272288, 2.1445511908122437, 2.144284808199561, 2.1386708575563502, 2.1344256993408264, 2.130530126185197, 2.123632636981602, 2.1188037896499563, 2.1140819015346732, 2.1105555975992982, 2.1026237474503753, 2.0948745600063376, 2.0911295813277193, 2.0878826565730524, 2.0833672859318866, 2.0753828209499248, 2.0682143722905018, 2.063409862768979, 2.0538022147193638, 2.049506400475775, 2.0409888130657077, 2.0336616159256944, 2.0277234783671427, 2.0230769664541195, 2.0120968209628054, 2.0052832770168094, 2.0009816157079374, 1.9875461704553694, 1.9828878227021511, 1.972806103351393, 1.9657988323747773, 1.9574264513109465, 1.9496149972697228, 1.9416899050798366, 1.9340411121063323, 1.922911598146741, 1.9125386819611483, 1.9058419802342865, 1.8934564499759938, 1.8887918162040422, 1.8787666249820003, 1.869724655022254, 1.8585746204533424, 1.8483522161437913], "accuracy": [0.09734513610601425, 0.09734513610601425, 0.10460969805717468, 0.10962884873151779, 0.10962884873151779, 0.11662924289703369, 0.11478008329868317, 0.13617752492427826, 0.13749834895133972, 0.13670584559440613, 0.14132875204086304, 0.14449875056743622, 0.1578391194343567, 0.1632545292377472, 0.16695284843444824, 0.17197199165821075, 0.1694624274969101, 0.18214239180088043, 0.18914277851581573, 0.19231277704238892, 0.20816272497177124, 0.20235107839107513, 0.2067098170518875, 0.20855897665023804, 0.22018226981163025, 0.22361643612384796, 0.23220182955265045, 0.23378682136535645, 0.23761722445487976, 0.23735305666923523, 0.24725927412509918, 0.2522784173488617, 0.258090078830719, 0.26443007588386536, 0.2666754722595215, 0.26284506916999817, 0.2646942138671875, 0.27618545293807983, 0.2849029302597046, 0.28939375281333923, 0.2845066785812378, 0.30022454261779785, 0.29480913281440735, 0.3016774654388428, 0.31079116463661194, 0.3061682879924774, 0.3109232485294342, 0.3159424066543579, 0.3280940353870392, 0.3218861520290375, 0.3267732262611389, 0.3265090584754944, 0.33020737767219543, 0.33866068720817566, 0.3416985869407654, 0.3413023352622986, 0.34526482224464417, 0.3541143834590912, 0.3637564480304718, 0.35345396399497986, 0.35543522238731384, 0.35926562547683716, 0.3741909861564636, 0.3645489513874054, 0.3675868511199951, 0.3691718280315399, 0.3737947344779968, 0.3800026476383209, 0.3835688829421997, 0.3819838762283325, 0.3765684962272644, 0.3781534731388092, 0.3883238732814789, 0.3949280083179474, 0.3971734344959259, 0.40047550201416016, 0.40047550201416016, 0.4031171500682831, 0.4089288115501404, 0.4039096534252167, 0.40906089544296265, 0.4131554663181305, 0.40483424067497253, 0.4163254499435425, 0.41408005356788635, 0.4263637661933899, 0.42570334672927856, 0.42345792055130005, 0.4235900044441223, 0.4282129108905792, 0.42345792055130005, 0.43045833706855774, 0.43891164660453796, 0.42768457531929016, 0.4468366205692291, 0.4414212107658386, 0.44327038526535034, 0.43904373049736023, 0.45145952701568604, 0.45344075560569763], "val_loss": [1.9691242490495955, 1.9673220770699638, 1.965524469103132, 1.96371214730399, 1.9619276864188058, 1.9601422718593053, 1.95835542678833, 1.9565608842032296, 1.9547673634120397, 1.9529695510864258, 1.951185635157994, 1.9493682725088937, 1.947561468396868, 1.9457447188241142, 1.9438937732151575, 1.9420360837663924, 1.9401749883379256, 1.938300337110247, 1.9363981655665807, 1.934460026877267, 1.9325119427272253, 1.9305229868207658, 1.928530148097447, 1.9264778409685408, 1.9243650436401367, 1.9222758838108607, 1.9201401301792689, 1.9179568971906389, 1.915731361934117, 1.9135017395019531, 1.9112016814095634, 1.908862727028983, 1.9064299038478307, 1.904000691005162, 1.9015124865940638, 1.8989800725664412, 1.8964035170418876, 1.8937665394374303, 1.891087872641427, 1.888333524976458, 1.8855205263410295, 1.8826395443507604, 1.8796890122549874, 1.876669270651681, 1.8735882895333427, 1.8704125540597099, 1.8671516009739466, 1.8638358116149902, 1.860402992793492, 1.8569227627345495, 1.853332247052874, 1.8496645518711634, 1.8459125246320451, 1.8420344080243791, 1.8380928039550781, 1.8340413229806083, 1.8298841885157995, 1.8255722863333566, 1.82119962147304, 1.8167578833443778, 1.8122188704354423, 1.8076039722987585, 1.8028138705662318, 1.7979662758963448, 1.7929889815194267, 1.7879503795078822, 1.7827459062848772, 1.7773820332118444, 1.7719340324401855, 1.7664087159293038, 1.7607666424342565, 1.754959992000035, 1.7490074293954032, 1.7429673331124442, 1.7367235592433385, 1.7303802626473563, 1.7239189829145158, 1.7173490524291992, 1.7106574262891496, 1.7038512570517403, 1.6968226773398263, 1.6896617412567139, 1.6824500220162528, 1.6749835014343262, 1.6674505983080183, 1.6597555705479212, 1.6519286291939872, 1.6440018585750036, 1.6359377588544572, 1.6277341842651367, 1.6194390569414412, 1.6109705311911446, 1.6023689338139124, 1.593675000326974, 1.5847905022757394, 1.5759915283748083, 1.5670128209250314, 1.5579237256731306, 1.5486899784633092, 1.539454119546073], "val_accuracy": [0.047333333641290665, 0.06066666543483734, 0.07366666942834854, 0.08799999952316284, 0.10833333432674408, 0.12399999797344208, 0.14533333480358124, 0.16466666758060455, 0.17900000512599945, 0.19633333384990692, 0.2160000056028366, 0.23399999737739563, 0.25066667795181274, 0.26733332872390747, 0.28066667914390564, 0.2916666567325592, 0.3033333420753479, 0.3163333237171173, 0.3283333480358124, 0.33766666054725647, 0.3490000069141388, 0.35600000619888306, 0.36533331871032715, 0.37166666984558105, 0.37599998712539673, 0.3803333342075348, 0.3856666684150696, 0.38866665959358215, 0.3916666805744171, 0.3943333327770233, 0.3970000147819519, 0.4020000100135803, 0.40533334016799927, 0.4086666703224182, 0.4116666615009308, 0.4129999876022339, 0.4163333475589752, 0.4206666648387909, 0.42533332109451294, 0.4283333420753479, 0.429666668176651, 0.43166667222976685, 0.4336666762828827, 0.437666654586792, 0.4410000145435333, 0.4429999887943268, 0.445333331823349, 0.44600000977516174, 0.4466666579246521, 0.4503333270549774, 0.4516666531562805, 0.4556666612625122, 0.45766666531562805, 0.46133333444595337, 0.4646666646003723, 0.46799999475479126, 0.4703333377838135, 0.47333332896232605, 0.4753333330154419, 0.47833332419395447, 0.47966668009757996, 0.4830000102519989, 0.48399999737739563, 0.4866666793823242, 0.4893333315849304, 0.4936666786670685, 0.4970000088214874, 0.49799999594688416, 0.49966666102409363, 0.5016666650772095, 0.5053333044052124, 0.5090000033378601, 0.5106666684150696, 0.5133333206176758, 0.5143333077430725, 0.5176666378974915, 0.5213333368301392, 0.5230000019073486, 0.5260000228881836, 0.527999997138977, 0.5289999842643738, 0.531000018119812, 0.5323333144187927, 0.5360000133514404, 0.5379999876022339, 0.5393333435058594, 0.5403333306312561, 0.5419999957084656, 0.5433333516120911, 0.5429999828338623, 0.5443333387374878, 0.5463333129882812, 0.546999990940094, 0.5493333339691162, 0.5513333082199097, 0.5536666512489319, 0.5543333292007446, 0.5553333163261414, 0.5566666722297668, 0.5563333630561829]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [5, 8, 2, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 7, 8, 4], [1, 1], [64], [0, 1, 0, 1, 0, 1], [3, 0, 9, 1, 2], [1, 0, 2], [15, 52, 13]], "fitness": -0.5428571701049805, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.negative(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.301667085334436, 2.300708921090125, 2.299341692916312, 2.297843247136388, 2.2966581930211665, 2.2927663983481197, 2.2924773943438397, 2.2885806930535946, 2.2877368340324087, 2.285542425336524, 2.2852818690365364, 2.283142119350844, 2.2793415064793443, 2.277519567248025, 2.2763051907966765, 2.274896828789107, 2.271714846629036, 2.2710432920001202, 2.268502732341032, 2.266535418144763, 2.2637420853824035, 2.2633522647388578, 2.2613256623511617, 2.259389786782628, 2.254675202948495, 2.2538899876863225, 2.2525570067306315, 2.2493953025572493, 2.2476955948724973, 2.2471596830005516, 2.2433159942750396, 2.239056812348603, 2.2374933855865202, 2.235272282606827, 2.2326062939280704, 2.2308740407374117, 2.230230422524445, 2.226092349772818, 2.223491598665124, 2.2196047398644416, 2.219079626581184, 2.214776575699175, 2.2121386764827675, 2.209511014936843, 2.2053654017528412, 2.2031735443971288, 2.198835087773539, 2.197546072450879, 2.191056740329628, 2.1892386583714454, 2.185148627136708, 2.182795815542783, 2.178292789573856, 2.174711625085704, 2.1701238805654737, 2.1673025036248643, 2.1639175463220335, 2.1552746097850384, 2.1553190101202313, 2.1500565236380953, 2.14614487736689, 2.1425187932879712, 2.1361478606644653, 2.131645759398108, 2.1274252316388376, 2.1241233838217024, 2.1167331762506567, 2.1096006156179206, 2.1061358148899565, 2.10324462476329, 2.099096732951426, 2.091739683512762, 2.085193212053417, 2.0806216768159715, 2.071796454427233, 2.067862470939474, 2.0598922212598443, 2.052992528565981, 2.0475027758636495, 2.0432932207754746, 2.033022427618732, 2.026894027310403, 2.0228328673028044, 2.0102051453835394, 2.006124708331603, 1.9964592794401457, 1.9899666532313174, 1.9820949138667305, 1.9748128585339286, 1.9674569701065145, 1.9601767619744803, 1.94972744746656, 1.9398969452315948, 1.9336755235890166, 1.9218038535152744, 1.9173294193850785, 1.9077753779942004, 1.899209794556035, 1.88860015966133, 1.8788081026190637], "accuracy": [0.09576013684272766, 0.09377889335155487, 0.09813763201236725, 0.10342095047235489, 0.10276053100824356, 0.11094967275857925, 0.10949676483869553, 0.1270637959241867, 0.1294412910938263, 0.12851670384407043, 0.13591335713863373, 0.13789460062980652, 0.15057456493377686, 0.15519747138023376, 0.15955619513988495, 0.16470743715763092, 0.1628582775592804, 0.1740853190422058, 0.1822744756937027, 0.18491612374782562, 0.20076608657836914, 0.19640734791755676, 0.201294407248497, 0.20340773463249207, 0.21238937973976135, 0.21740853786468506, 0.2246730923652649, 0.22784309089183807, 0.2312772423028946, 0.23035265505313873, 0.24025888741016388, 0.24699510633945465, 0.2483159452676773, 0.2546559274196625, 0.2603355050086975, 0.2550521790981293, 0.25637298822402954, 0.2685246467590332, 0.27816668152809143, 0.282129168510437, 0.2785629332065582, 0.2930920720100403, 0.2884691655635834, 0.29626205563545227, 0.3031303584575653, 0.299299955368042, 0.3031303584575653, 0.308149516582489, 0.3210936486721039, 0.3155461549758911, 0.31686699390411377, 0.31924447417259216, 0.32320696115493774, 0.33099988102912903, 0.3361510932445526, 0.33403778076171875, 0.33786818385124207, 0.3451327383518219, 0.3564918637275696, 0.3465856611728668, 0.34803855419158936, 0.352529376745224, 0.36666226387023926, 0.35926562547683716, 0.3590014576911926, 0.36322811245918274, 0.36560559272766113, 0.3739268183708191, 0.3755118250846863, 0.3737947344779968, 0.3700964152812958, 0.3715493381023407, 0.38145554065704346, 0.3875313699245453, 0.39149385690689087, 0.3953242599964142, 0.3943996727466583, 0.3953242599964142, 0.4003434181213379, 0.39730551838874817, 0.4007396697998047, 0.40707963705062866, 0.3953242599964142, 0.4111742079257965, 0.40707963705062866, 0.41870296001434326, 0.41843879222869873, 0.4169858694076538, 0.4163254499435425, 0.4213446080684662, 0.41685378551483154, 0.4251750111579895, 0.43006208539009094, 0.4221371114253998, 0.4403645396232605, 0.4340245723724365, 0.4345529079437256, 0.4345529079437256, 0.4414212107658386, 0.4447232782840729], "val_loss": [1.970344066619873, 1.969108990260533, 1.9675750732421875, 1.9659011023385184, 1.9641557421003069, 1.9623987334115165, 1.9606259890965052, 1.95884827205113, 1.957076140812465, 1.9553006717136927, 1.9535273143223353, 1.951751777103969, 1.9499663625444685, 1.9481801986694336, 1.9463927405221122, 1.9445815086364746, 1.942765712738037, 1.9409362929207938, 1.9391005379813058, 1.9372419629778181, 1.9353632926940918, 1.9334759712219238, 1.9315533638000488, 1.9296082087925501, 1.9276196616036552, 1.9256020273481096, 1.9235663414001465, 1.9214974812098913, 1.9193922451564245, 1.9172594887869698, 1.9150895391191756, 1.9128828729901994, 1.9106266839163644, 1.9083271707807268, 1.9059903281075614, 1.9036192893981934, 1.9012019293648856, 1.898740495954241, 1.8962277684892928, 1.8936669485909599, 1.8910420962742396, 1.888371195111956, 1.885629449571882, 1.8828484671456474, 1.8799897602626257, 1.8770527839660645, 1.8740625381469727, 1.8709821701049805, 1.8678315026419503, 1.8646116937909807, 1.8613205637250627, 1.8579463277544295, 1.8544855117797852, 1.8509424073355538, 1.8472953523908342, 1.8435609681265694, 1.839747088296073, 1.8358227866036552, 1.831796509878976, 1.8276730264936174, 1.8234676633562361, 1.8191883904593331, 1.8148269653320312, 1.8103421075003487, 1.8057310921805245, 1.8010673522949219, 1.796288081577846, 1.791377135685512, 1.7863595826285226, 1.7812283379690987, 1.776020118168422, 1.770683833530971, 1.765206745692662, 1.7596275465829032, 1.7539177622113908, 1.748063428061349, 1.7420592308044434, 1.7359683854239327, 1.7297669819423132, 1.7234510694231306, 1.7170140402657645, 1.7103783403124129, 1.7036458083561488, 1.6967861652374268, 1.6897475378853934, 1.682619231087821, 1.675349201474871, 1.667945384979248, 1.6604089736938477, 1.6527471542358398, 1.6449664660862513, 1.637043101446969, 1.6289847918919154, 1.6207660266331263, 1.6124441964285714, 1.604011399405343, 1.595501491001674, 1.586862019130162, 1.578127350125994, 1.5692287172589983], "val_accuracy": [0.04266666620969772, 0.04766666516661644, 0.05900000035762787, 0.0716666653752327, 0.08533333241939545, 0.10400000214576721, 0.11999999731779099, 0.1393333375453949, 0.16200000047683716, 0.1756666600704193, 0.19200000166893005, 0.21033333241939545, 0.2290000021457672, 0.24766667187213898, 0.2626666724681854, 0.2759999930858612, 0.28866666555404663, 0.2983333468437195, 0.31166666746139526, 0.32466667890548706, 0.33399999141693115, 0.34200000762939453, 0.35233333706855774, 0.36000001430511475, 0.3683333396911621, 0.37299999594688416, 0.37599998712539673, 0.38100001215934753, 0.38499999046325684, 0.38966667652130127, 0.3933333456516266, 0.3956666588783264, 0.3973333239555359, 0.4013333320617676, 0.40533334016799927, 0.40799999237060547, 0.4103333353996277, 0.4129999876022339, 0.4153333306312561, 0.4193333387374878, 0.4230000078678131, 0.4259999990463257, 0.4266666769981384, 0.429666668176651, 0.4320000112056732, 0.43533334136009216, 0.4390000104904175, 0.4403333365917206, 0.44333332777023315, 0.44433334469795227, 0.4466666579246521, 0.4483333230018616, 0.44999998807907104, 0.4519999921321869, 0.45533332228660583, 0.4566666781902313, 0.46033334732055664, 0.4646666646003723, 0.46700000762939453, 0.4703333377838135, 0.4726666808128357, 0.4740000069141388, 0.47833332419395447, 0.47966668009757996, 0.4819999933242798, 0.4846666753292084, 0.4860000014305115, 0.48766666650772095, 0.492333322763443, 0.4959999918937683, 0.49799999594688416, 0.49900001287460327, 0.5016666650772095, 0.5046666860580444, 0.5073333382606506, 0.5093333125114441, 0.5116666555404663, 0.5143333077430725, 0.515999972820282, 0.5189999938011169, 0.5216666460037231, 0.5249999761581421, 0.5266666412353516, 0.5289999842643738, 0.5306666493415833, 0.531333327293396, 0.5346666574478149, 0.5363333225250244, 0.5386666655540466, 0.5396666526794434, 0.5410000085830688, 0.5440000295639038, 0.5423333048820496, 0.5440000295639038, 0.5456666946411133, 0.546999990940094, 0.5483333468437195, 0.5503333210945129, 0.5519999861717224, 0.5536666512489319]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [1, 0, 3, 6, 2, 6, 0, 9, 5, 4, 4, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [4, 2, 6, 0, 0, 9, 3, 9], [1, 3, 1, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [6, 7, 8, 4], [1, 1], [64], [0, 1, 0, 1, 0, 1, 1], [0, 4, 3, 1, 2, 3, 8, 7, 7, 9], [1, 0, 1, 3, 3, 0, 2, 1], [15, 52, 13]], "fitness": -0.2548571527004242, "mapping_values": [1, 1, 1, 0, 1, 0, 11, 11, 7, 4, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.negative(tf.math.negative(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, alpha))))), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.2611920440894515, 2.5714940752697784, 2.3268654916453686, 2.436846067624841, 2.3535286580661285, 2.3755075757088773], "accuracy": [0.22440892457962036, 0.18412363529205322, 0.1442345827817917, 0.13221503794193268, 0.09945846349000931, 0.1006472036242485], "val_loss": [2.402754374912807, 1.9205218723842077, 1.9185105051313127, 2.005303382873535, 2.0077078683035716, 2.022186960492815], "val_accuracy": [0.3499999940395355, 0.1576666682958603, 0.1469999998807907, 0.10199999809265137, 0.10233332961797714, 0.0949999988079071]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 2, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [5, 8, 2, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [6, 7, 8, 4], [2, 1], [64], [0, 0, 0, 1, 0, 1], [9, 1, 9, 1, 2], [2, 0, 2], [15, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 11, 8, 3, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))))))), tf.math.pow(tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3024016762170274, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [2, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [47, 32, 5, 49, 25], [0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1], [5, 8, 2, 0, 0, 9, 3, 9], [3, 1, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0], [3, 7, 8, 4], [2, 1], [64], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [3, 1, 9, 2, 5, 3, 8, 7, 7, 9], [1, 0, 2, 0, 3, 0, 3, 0], [15, 34, 13, 93]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 7, 7, 6, 1, 1, 1, 0, 0, 0, 0, 15, 10, 5, 4], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.sqrt(tf.math.add(grad, tf.math.negative(tf.math.negative(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.add(tf.math.square(tf.math.multiply(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), tf.math.sqrt(beta))), tf.math.add(tf.math.add(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), sigma))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [5, 8, 2, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [5, 7, 8, 4], [1, 1], [64], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1], [3, 1, 9, 1, 2, 4, 5, 4], [1, 0, 2, 0, 3, 2], [15, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 8, 6, 3], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), alpha), tf.math.subtract(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.pow(tf.math.square(beta), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), tf.math.pow(sigma, beta))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 2, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [5, 8, 2, 0, 0, 9, 3, 9], [3, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 1, 0], [8, 7, 0, 4], [6, 1], [64], [1, 1, 0, 1, 0, 1], [3, 1, 0, 1, 2], [1, 0, 2], [15, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 5, 4, 3, 1, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, grad))))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3034439581638124, 2.3188415394325643, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09259014576673508, 0.08109892904758453, 0.09457138925790787, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9749115535191126, 1.9970062119620187, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.02866666577756405, 0.0976666659116745, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 2, 2, 2, 2, 2, 2, 3, 3, 0], [38, 32, 5, 49, 25], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [5, 8, 2, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 7, 8, 4], [5, 1], [64], [0, 1, 0, 0, 1, 1, 1], [4, 1, 2, 1, 2, 7, 4, 3, 4, 7, 6, 2, 9, 7, 1, 5, 2, 9, 1, 0], [1, 0, 2, 3], [15, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 3, 4, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.pow(alpha, tf.math.subtract(tf.math.add(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), beta), sigma))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [5, 8, 2, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [3, 7, 8, 4], [2, 1], [64], [1, 0, 1, 0, 0, 1], [3, 1, 9, 2, 5, 3, 8, 7, 7, 9], [0, 3, 2], [15, 32, 13, 93]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 1, 0, 1, 1], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3024016762170274, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [4, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 2, 2, 2, 2, 0, 2, 3, 3, 0], [38, 32, 90, 49, 25], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [4, 8, 6, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 57], [0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 7, 8, 4], [4, 1], [64], [1, 1, 0, 1, 0, 1], [3, 1, 9, 1, 2], [1, 0, 2], [15, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, grad), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [5, 8, 2, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [1, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 7, 8, 4], [2, 1], [64], [0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [3, 1, 0, 1, 2, 4, 1, 9], [1, 3, 2, 1, 2, 0], [15, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 4, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 14, 8, 6, 2], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.square(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.math.negative(tf.math.subtract(sigma, tf.math.add(tf.math.pow(beta, alpha), tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), beta)))), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [2, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 2, 2, 2, 2, 0, 2, 3, 3, 0], [38, 98, 5, 49, 25], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1], [4, 8, 6, 5, 9, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 55], [0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [0, 7, 8, 4], [2, 1], [64], [0, 1, 1, 1, 0, 1], [4, 1, 9, 1, 2], [1, 0, 0], [74, 83, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 3, 4, 4, 2, 2, 0, 2, 1, 1, 0, 0, 3, 1, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.square(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.pow(alpha, tf.math.add(beta, tf.math.sqrt(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [5, 8, 2, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [3, 7, 8, 4], [2, 1], [64], [1, 0, 1, 0, 0, 1], [3, 1, 9, 2, 5, 3, 8, 7, 7, 9], [0, 3, 2], [15, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 1, 0, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3024016762170274, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 1, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [25, 32, 5, 49, 25], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [5, 8, 2, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 7, 8, 4], [2, 1], [64], [0, 1, 1, 1, 0, 1], [2, 1, 9, 1, 2], [1, 0, 2], [15, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 5, 4, 2, 2, 0, 3, 1, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), alpha), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, beta))), tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3024016762170274, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [4, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 3, 1, 0, 2, 2, 2, 2, 0, 2, 3, 3, 0], [38, 32, 90, 49, 25], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [5, 8, 2, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 7, 8, 4], [2, 1], [64], [0, 1, 0, 1, 0, 1], [3, 1, 9, 1, 2], [3, 0, 2], [18, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 17, 17, 10, 7, 2, 1, 1, 0, 1, 0, 2, 1, 1, 0, 0, 5, 3, 2, 2], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.square(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.subtract(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3018531536681226, 2.3018765077299967, 2.302017055025757, 2.3023155306497536, 2.302945193896724, 2.3009973460373674], "accuracy": [0.09549596905708313, 0.09113723784685135, 0.09219389408826828, 0.09311848133802414, 0.08625016361474991, 0.09140139818191528], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 1, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [5, 8, 2, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 7, 8, 4], [5, 1], [64], [0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1], [4, 1, 2, 1, 0, 7, 4, 3, 4, 7, 6, 2, 9, 7, 1, 5, 2, 9, 1, 0], [1, 0, 2, 3, 1, 2], [15, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 4, 3, 2, 1, 0, 5, 2, 3, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), alpha)), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(alpha, tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [2.3018531536681226, 2.3018765077299967, 2.302017055025757, 2.3023155306497536, 2.302945193896724, 2.3009973460373674], "accuracy": [0.09549596905708313, 0.09113723784685135, 0.09219389408826828, 0.09311848133802414, 0.08625016361474991, 0.09140139818191528], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [2, 2, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [24, 32, 5, 49, 25], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [4, 8, 2, 0, 0, 9, 3, 9], [1, 3, 1, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 0, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 1], [6, 9, 4, 4, 0], [1, 1], [64], [0, 1, 1, 1, 0, 1, 1], [3, 1, 3, 1, 2, 3, 8, 7, 7, 9, 5, 7, 9, 6, 6, 1, 5, 3, 5, 2, 5], [1, 0, 0, 3, 3, 0, 3, 1, 1, 1, 3, 3, 2], [15, 32, 13, 34, 58]], "fitness": -0.011428571306169033, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 7, 6, 4, 2, 1, 3, 1, 2, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, alpha), tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, alpha), sigma)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3042280766249426, 2.3202178939899447, 2.3557610521542003, 2.4209020367356464, 2.5492335239405866, 2.9082853604206997], "accuracy": [0.08994849026203156, 0.05904107913374901, 0.028265750035643578, 0.013076212257146835, 0.007396644912660122, 0.008849557489156723], "val_loss": [1.97918667112078, 2.003070558820452, 2.0461697578430176, 2.1215512411934987, 2.290161677769252, 2.9227542196001326], "val_accuracy": [0.014000000432133675, 0.00566666666418314, 0.004000000189989805, 0.004666666500270367, 0.007000000216066837, 0.008666666224598885]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [2, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [5, 8, 2, 0, 0, 9, 3, 9], [3, 1, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 0, 1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0], [3, 7, 8, 4], [2, 1], [64], [0, 1, 0, 1, 0, 1], [3, 1, 0, 1, 2], [1, 0, 2], [15, 52, 13]], "fitness": -0.011428571306169033, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 5, 3, 2, 1, 0, 6, 3, 3, 1], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.add(sigma, sigma)), tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.negative(beta)))", "other_info": {"loss": [2.3041262218524214, 2.3192623657966727, 2.3505550401085764, 2.3925620999082424, 2.412759380380885, 2.3977354924440415], "accuracy": [0.09060890227556229, 0.0602298229932785, 0.028926165774464607, 0.015189538709819317, 0.01109496783465147, 0.019284110516309738], "val_loss": [1.9788025447300501, 2.0010102816990445, 2.0355310440063477, 2.0656492369515553, 2.057405948638916, 2.0475186620439803], "val_accuracy": [0.014333332888782024, 0.005333333276212215, 0.004000000189989805, 0.004999999888241291, 0.007666666526347399, 0.012000000104308128]}}]