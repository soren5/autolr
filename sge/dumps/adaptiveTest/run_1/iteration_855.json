[{"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [1, 3, 3, 4, 6, 1, 2, 8, 1, 8, 2, 3, 8, 1, 2, 0, 1, 2, 2, 6, 6, 3, 9, 5, 1, 2, 2, 8, 2, 4, 8], [3, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [78, 90, 16, 66, 40, 57, 35, 9, 54, 64], [1, 1, 0, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0], [6, 9, 3, 4], [1, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.824571430683136, "mapping_values": [1, 4, 4, 3, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.080816631902242, 1.655543529503948, 1.344071158155427, 1.0349427481069855, 0.8044176135537426, 0.7316228833417096, 0.7589601657378313, 0.6626960193995928, 0.6575815275502385, 0.6255860365833731, 0.5816546027387343, 0.5925602442820499, 0.5541729840462659, 0.5358445967476617, 0.556788409564001, 0.5161495801873762, 0.5162208743099177, 0.4911554570778124, 0.5071176393566477, 0.47803717207647256, 0.45723217463984606, 0.45908150642917395, 0.46153271054594885, 0.46812032972265777, 0.44242384405483137, 0.4108874004562029, 0.4165163513156386, 0.42664264065950713, 0.4109147114052103, 0.3930692456268033, 0.40088654048234057, 0.3720266876589463, 0.3792115300008098, 0.38814768812770084, 0.3697654998628392, 0.3553197518111125, 0.3564879265971203, 0.33752968134251504, 0.3536477518347764, 0.33335853499223717, 0.3217698916538973, 0.34668344196280027, 0.3040903299995748, 0.31135495516602324, 0.3131169744604504, 0.32275714958978446, 0.30332450800725513, 0.3219330107822489], "accuracy": [0.2833179235458374, 0.4780081808567047, 0.5177651643753052, 0.6193369626998901, 0.6960771083831787, 0.7228899598121643, 0.7149649858474731, 0.748778223991394, 0.7535332441329956, 0.76106196641922, 0.7749306559562683, 0.7757231593132019, 0.7885351777076721, 0.8031964302062988, 0.7901201844215393, 0.8033285140991211, 0.8018755912780762, 0.8216879963874817, 0.805177628993988, 0.8255184292793274, 0.8290846943855286, 0.8310658931732178, 0.8232730031013489, 0.8149517774581909, 0.829216718673706, 0.8446704745292664, 0.8432175517082214, 0.8397833704948425, 0.8498216867446899, 0.8504821062088013, 0.8532558679580688, 0.8617091774940491, 0.8610487580299377, 0.8560295701026917, 0.8599920868873596, 0.8701624870300293, 0.8661999702453613, 0.8732003569602966, 0.8692378997802734, 0.8737286925315857, 0.874389111995697, 0.8648791313171387, 0.8887861371040344, 0.8837670087814331, 0.8796724081039429, 0.8792761564254761, 0.8854840993881226, 0.880729079246521], "val_loss": [1.2372290066310339, 1.3804568903786796, 1.0302658081054688, 0.6170626027243478, 0.596869707107544, 0.6480885062898908, 0.5215513025011335, 0.5113041571208409, 0.49208830084119526, 0.49857481888362337, 0.5116890157972064, 0.46207026072910856, 0.46269711426326204, 0.4286107335771833, 0.4260362386703491, 0.41210025548934937, 0.4102991989680699, 0.3961340699877058, 0.3959448678152902, 0.39431776319231304, 0.4554896524974278, 0.41231375081198557, 0.4054981895855495, 0.3759013073784964, 0.3947662285396031, 0.38999069588524954, 0.3770544188363211, 0.41576299497059416, 0.3686544724873134, 0.43553926263536724, 0.3532097509929112, 0.3442156825746809, 0.37225258350372314, 0.3643178514071873, 0.34433986459459576, 0.3394181302615574, 0.34199745314461844, 0.36594910281045095, 0.39500973905835834, 0.33750866992133005, 0.33575368779046194, 0.3221973351069859, 0.32199800865990774, 0.3518964648246765, 0.4009142007146563, 0.34132507017680574, 0.3712814450263977, 0.32828000613621305], "val_accuracy": [0.5199999809265137, 0.40033334493637085, 0.57833331823349, 0.7363333106040955, 0.7266666889190674, 0.7086666822433472, 0.753000020980835, 0.7753333449363708, 0.7799999713897705, 0.7789999842643738, 0.7670000195503235, 0.7933333516120911, 0.7906666398048401, 0.8083333373069763, 0.8083333373069763, 0.8153333067893982, 0.8220000267028809, 0.8289999961853027, 0.8309999704360962, 0.8366666436195374, 0.7990000247955322, 0.8186666369438171, 0.8173333406448364, 0.840666651725769, 0.8293333053588867, 0.8363333344459534, 0.8356666564941406, 0.828000009059906, 0.8489999771118164, 0.8096666932106018, 0.8500000238418579, 0.8503333330154419, 0.8349999785423279, 0.8396666646003723, 0.8536666631698608, 0.8610000014305115, 0.8523333072662354, 0.8389999866485596, 0.8289999961853027, 0.8536666631698608, 0.8619999885559082, 0.8679999709129333, 0.8690000176429749, 0.8579999804496765, 0.8370000123977661, 0.859333336353302, 0.8443333506584167, 0.862333357334137]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [1, 3, 3, 4, 6, 1, 2, 8, 5, 8, 2, 3, 8, 1, 2, 0, 1, 2, 2, 6, 6, 3, 9, 5, 1, 2, 2, 8, 2, 4, 8], [2, 2, 3, 3, 2, 0, 3, 3, 3, 3, 3, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [78, 90, 16, 66, 40, 57, 35, 9, 54, 64], [1, 1, 0, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0], [6, 9, 3, 4], [1, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8205714225769043, "mapping_values": [1, 4, 4, 2, 2, 1, 25, 25, 14, 11, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(grad), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.multiply(tf.math.multiply(beta, tf.math.add(beta, beta)), tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.subtract(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))), grad))))))), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad))))), tf.math.add(beta, grad))), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.0808114498015233, 1.6461290133517448, 1.5171847016567945, 1.2931793382957926, 0.9407588508560232, 0.834269428793245, 0.8163964251611588, 0.7556893039514927, 0.7056120026853216, 0.6768650375400095, 0.6477315292980661, 0.6183260113351208, 0.5765669252091175, 0.5967806716006839, 0.5831425205874894, 0.5510202518401917, 0.5537133144428544, 0.5486438799732632, 0.5413188464086384, 0.49467417883945414, 0.5007170268951107, 0.4970946916184799, 0.5187569225327276, 0.4924640822498758, 0.48486973515921705, 0.4588187326883926, 0.4670836441017114], "accuracy": [0.28358209133148193, 0.4858010709285736, 0.4780081808567047, 0.5291243195533752, 0.6612072587013245, 0.6820763349533081, 0.6956809163093567, 0.7193237543106079, 0.7318716049194336, 0.7437590956687927, 0.7535332441329956, 0.7685906887054443, 0.7885351777076721, 0.7779685854911804, 0.7771760821342468, 0.7911768555641174, 0.787082314491272, 0.7955356240272522, 0.7956677079200745, 0.8153480291366577, 0.8140271902084351, 0.8138951063156128, 0.8063663840293884, 0.8119139075279236, 0.8171972036361694, 0.8256505131721497, 0.8281601071357727], "val_loss": [1.236694097518921, 1.367119516645159, 1.2108936991010393, 0.7281298807689122, 0.6381258113043649, 0.7543832574571881, 0.6668504476547241, 0.5786301919392177, 0.5039387771061489, 0.505169153213501, 0.5292436906269619, 0.4830361604690552, 0.5099084717886788, 0.45589767183576313, 0.4462547983442034, 0.4370330742427281, 0.45479280608040945, 0.4196158392088754, 0.4169727223260062, 0.43012426580701557, 0.5286163091659546, 0.38853131021772114, 0.4165815455572946, 0.40175834723881315, 0.3985125848225185, 0.40953952074050903, 0.4015092934880938], "val_accuracy": [0.5210000276565552, 0.44966667890548706, 0.48133334517478943, 0.6679999828338623, 0.7146666646003723, 0.6616666913032532, 0.7039999961853027, 0.7393333315849304, 0.7803333401679993, 0.7773333191871643, 0.7676666378974915, 0.7893333435058594, 0.7609999775886536, 0.7986666560173035, 0.8066666722297668, 0.8063333630561829, 0.7996666431427002, 0.8213333487510681, 0.8180000185966492, 0.8159999847412109, 0.7643333077430725, 0.843999981880188, 0.8130000233650208, 0.8240000009536743, 0.8259999752044678, 0.8306666612625122, 0.8186666369438171]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 7, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1], [1, 3, 3, 4, 6, 1, 2, 8, 5, 8, 2, 3, 8, 1, 2, 0, 1, 2, 2, 6, 6, 3, 9, 5, 1, 2, 2, 8, 2, 4, 8, 6, 0, 8, 8, 6, 7], [2, 2, 3, 3, 2, 0, 3, 3, 3, 3, 3, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [78, 90, 16, 66, 40, 57, 35, 9, 54, 64], [1, 1, 0, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0], [6, 9, 3, 4], [1, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8202857375144958, "mapping_values": [1, 4, 4, 2, 2, 1, 62, 62, 37, 25, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 53, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.subtract(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.sqrt(grad), tf.math.square(tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.multiply(tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, grad))), tf.math.add(beta, grad)))), tf.math.add(beta, grad))))))), tf.math.add(beta, grad))), grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.multiply(tf.math.add(beta, beta), tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.subtract(tf.math.add(alpha, tf.math.add(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))), tf.math.add(grad, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.sqrt(grad))), tf.math.add(beta, alpha))))))))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, alpha), alpha), tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.0808056613410453, 1.6496901867994622, 1.2244293335926075, 0.9420245541337144, 0.851336961212317, 0.7448178153815224, 0.7271749428738503, 0.6649741229364161, 0.6557038748395001, 0.6327892761141664, 0.5969498166476164, 0.5954109477392199, 0.5671935865451095, 0.5395033498166842, 0.5599474399443457, 0.5216279972057773, 0.5290467566534387, 0.5081829696897628, 0.4994631643544697, 0.4909193021486527, 0.4691696020480176, 0.4572007299067873, 0.45210554799415087, 0.47155708617002673, 0.44724585930543126, 0.42896356524461926, 0.4355185663443452], "accuracy": [0.28358209133148193, 0.48131024837493896, 0.5531634092330933, 0.6476026773452759, 0.6819442510604858, 0.722229540348053, 0.7277770638465881, 0.7498348951339722, 0.7498348951339722, 0.7553823590278625, 0.7729493975639343, 0.7749306559562683, 0.7812706232070923, 0.8014793395996094, 0.7913089394569397, 0.7996301651000977, 0.7971205711364746, 0.8124422430992126, 0.8104609847068787, 0.8190463781356812, 0.8178576231002808, 0.8261788487434387, 0.8290846943855286, 0.8178576231002808, 0.8276317715644836, 0.8366134166717529, 0.8378021121025085], "val_loss": [1.2376118387494768, 1.2184291907719202, 0.8192931924547467, 0.6358278478894915, 0.5789270401000977, 0.6328410761696952, 0.5179236616407122, 0.5365492105484009, 0.4817531279155186, 0.504539063998631, 0.5216612475258964, 0.4591730833053589, 0.4394324166434152, 0.4204716512135097, 0.43559220858982634, 0.4322674104145595, 0.42059944357190815, 0.40378849846976145, 0.4657331534794399, 0.41480904817581177, 0.4703452246529715, 0.37632375955581665, 0.44818214007786344, 0.37213614157267977, 0.413073650428227, 0.38173145055770874, 0.3733773061207363], "val_accuracy": [0.5206666588783264, 0.46933332085609436, 0.6629999876022339, 0.7123333215713501, 0.7383333444595337, 0.7250000238418579, 0.7733333110809326, 0.7506666779518127, 0.7826666831970215, 0.7743333578109741, 0.7593333125114441, 0.7973333597183228, 0.8086666464805603, 0.8163333535194397, 0.8050000071525574, 0.8043333292007446, 0.8169999718666077, 0.8243333101272583, 0.8069999814033508, 0.8206666707992554, 0.7960000038146973, 0.843999981880188, 0.7826666831970215, 0.8410000205039978, 0.8183333277702332, 0.8413333296775818, 0.8423333168029785]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [1, 2, 2, 0, 8, 1, 8, 9, 8, 5, 2, 3, 4, 1, 2, 0, 1, 2, 2, 6, 6, 3, 9, 5, 1, 2, 2, 8, 2, 4, 8], [3, 2, 3, 3, 2, 0, 3, 2, 3, 3, 3, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [20, 90, 16, 66, 40, 57, 35, 9, 54, 64], [0, 1, 0, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0], [6, 9, 3, 4], [4, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8168571591377258, "mapping_values": [1, 4, 4, 2, 2, 1, 12, 12, 7, 5, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(grad), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.subtract(grad, tf.math.add(tf.math.add(beta, tf.math.negative(grad)), tf.math.add(beta, tf.math.sqrt(tf.math.subtract(tf.math.sqrt(grad), beta))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.0808350808269958, 1.5340779514486576, 1.2153597567232923, 1.0144772982443044, 0.7938679610701946, 0.7950858092657594, 0.7489637569618451, 0.68118425940384, 0.6724316844960969, 0.6265061850309088, 0.6160303779943288, 0.5886154608672337, 0.5702245031696159, 0.5483480655301469, 0.5498947756102435, 0.5350421249527957, 0.5331737665594088, 0.5028623812438916, 0.4964456509652627, 0.49529776795901453, 0.4735556992132272, 0.45677503285280796, 0.45853322417650083, 0.46996284437343316, 0.4395095708898943, 0.4201325327138292, 0.4445747027795832, 0.4397116025456852, 0.42692286797234913, 0.38861459210611465, 0.4039565493653967, 0.38604081322204925, 0.3845761403384352, 0.39186652581595066, 0.38409679066062585, 0.3595435538028666], "accuracy": [0.2837141752243042, 0.4950468838214874, 0.5663716793060303, 0.6312243938446045, 0.7073041796684265, 0.6956809163093567, 0.7218332886695862, 0.7445515990257263, 0.746268630027771, 0.7626469135284424, 0.7601373791694641, 0.7786290049552917, 0.7807422876358032, 0.7980451583862305, 0.7936864495277405, 0.7956677079200745, 0.7926297783851624, 0.8113855719566345, 0.8115176558494568, 0.8140271902084351, 0.8203672170639038, 0.8289526104927063, 0.8281601071357727, 0.8186501264572144, 0.8313300609588623, 0.8429533839225769, 0.8364813327789307, 0.832650899887085, 0.8383304476737976, 0.8539162874221802, 0.8518029451370239, 0.8518029451370239, 0.8569541573524475, 0.8539162874221802, 0.8529917001724243, 0.8663320541381836], "val_loss": [1.2373969214303153, 1.0134400299617223, 0.833987661770412, 0.6224044561386108, 0.6441374676568168, 0.6793607984270368, 0.5294763020106724, 0.5343014342444283, 0.48413218770708355, 0.4921325956072126, 0.4639856815338135, 0.46849671431950163, 0.4524075133459909, 0.4259796568325588, 0.44502387728009907, 0.41294885533196585, 0.42414502586637226, 0.42028110367911203, 0.4562197583062308, 0.40772864648274015, 0.46957458768572125, 0.38971459014075144, 0.4353018317903791, 0.37375112090791973, 0.3970735158239092, 0.38124035937445505, 0.36265261684145245, 0.3795554041862488, 0.3641227568898882, 0.357460047517504, 0.34137641532080515, 0.34712288209370207, 0.36135716097695486, 0.37338743039539884, 0.3526808704648699, 0.36917286259787424], "val_accuracy": [0.5206666588783264, 0.543666660785675, 0.6349999904632568, 0.7266666889190674, 0.6990000009536743, 0.6990000009536743, 0.7446666955947876, 0.7429999709129333, 0.7910000085830688, 0.7770000100135803, 0.7956666946411133, 0.7836666703224182, 0.7956666946411133, 0.8163333535194397, 0.7963333129882812, 0.8176666498184204, 0.8130000233650208, 0.8100000023841858, 0.8100000023841858, 0.8213333487510681, 0.7856666445732117, 0.8383333086967468, 0.7860000133514404, 0.8383333086967468, 0.8270000219345093, 0.8456666469573975, 0.8533333539962769, 0.8363333344459534, 0.8460000157356262, 0.8493333458900452, 0.8556666374206543, 0.8523333072662354, 0.8396666646003723, 0.8386666774749756, 0.8510000109672546, 0.8376666903495789]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [1, 3, 3, 4, 6, 1, 2, 8, 0, 8, 8, 3, 8, 1, 2, 0, 1, 2, 2, 6, 6, 3, 9, 5, 1, 2, 2, 8, 2, 4, 8], [2, 2, 3, 3, 2, 0, 3, 3, 3, 3, 0, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [78, 90, 16, 66, 40, 57, 35, 9, 54, 64], [1, 1, 0, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0], [6, 9, 3, 4], [1, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8125714063644409, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(grad), tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.0720681004189796, 1.9083676872441104, 1.3824629418649348, 1.0049113615896597, 0.8945224599484928, 0.7790034880349664, 0.7411237479578848, 0.7254469053321085, 0.693242443645509, 0.6597356155028574, 0.6272150548520641, 0.6160771802447618, 0.5775706640969588, 0.5546650340717387, 0.5644455189167028, 0.5511895799759656, 0.5324398440424131, 0.5296353838305511, 0.5110050481717663, 0.49498306340576714, 0.4775011849645862, 0.4742667633922518, 0.48440706722803434, 0.4728421734631447, 0.4510722004025761, 0.45827598498796884, 0.44917128041136645, 0.43957206876113225, 0.44679486582685757, 0.40682573390359716, 0.40520792751185664, 0.41287455921238597, 0.38238160903222995, 0.41512693162638953, 0.37561169363535657, 0.39311918882787694], "accuracy": [0.28939375281333923, 0.3839651346206665, 0.5048210024833679, 0.6349227428436279, 0.6680755615234375, 0.7113987803459167, 0.7218332886695862, 0.7256637215614319, 0.7411174178123474, 0.7530049085617065, 0.7604015469551086, 0.7697794437408447, 0.7819310426712036, 0.7924976944923401, 0.7876105904579163, 0.7895918488502502, 0.8005547523498535, 0.8009510040283203, 0.8067626357078552, 0.8146876096725464, 0.8257825970649719, 0.8222163319587708, 0.8197067975997925, 0.8208954930305481, 0.8305375576019287, 0.8314621448516846, 0.8383304476737976, 0.8335754871368408, 0.8319904804229736, 0.8498216867446899, 0.8519350290298462, 0.8444063067436218, 0.8536521196365356, 0.8485008478164673, 0.8598600029945374, 0.8549728989601135], "val_loss": [1.5573127950940813, 1.1854356016431535, 0.725210462297712, 0.732366647039141, 0.6242790222167969, 0.6060913290296283, 0.5655993904386248, 0.511481659752982, 0.5862873792648315, 0.5858781848634992, 0.48349033083234516, 0.47950710569109234, 0.46691596508026123, 0.4303334185055324, 0.4330548218318394, 0.4240896020616804, 0.42431144203458515, 0.4261970264571054, 0.4124304737363543, 0.421883830002376, 0.44342115947178434, 0.38920118127550396, 0.40216647727148874, 0.37799285990851267, 0.39069019896643503, 0.39224640812192646, 0.38326096534729004, 0.38896400587899344, 0.36863439423697336, 0.39074574198041645, 0.34405527796064106, 0.3560434239251273, 0.40686024938310894, 0.3607760582651411, 0.35020198992320467, 0.4003805603299822], "val_accuracy": [0.41066667437553406, 0.5243333578109741, 0.7049999833106995, 0.6866666674613953, 0.731333315372467, 0.7116666436195374, 0.7390000224113464, 0.7633333206176758, 0.7366666793823242, 0.7116666436195374, 0.7823333144187927, 0.7803333401679993, 0.7870000004768372, 0.8100000023841858, 0.8119999766349792, 0.809333324432373, 0.815666675567627, 0.8190000057220459, 0.8193333148956299, 0.815666675567627, 0.8059999942779541, 0.8373333215713501, 0.8209999799728394, 0.840666651725769, 0.8320000171661377, 0.8370000123977661, 0.8339999914169312, 0.8360000252723694, 0.8420000076293945, 0.8343333601951599, 0.8576666712760925, 0.8496666550636292, 0.8196666836738586, 0.8576666712760925, 0.8506666421890259, 0.8263333439826965]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [8, 6, 2, 0, 8, 1, 8, 9, 8, 5, 2, 3, 4, 1, 2, 0, 1, 2, 2, 6, 6, 3, 9, 5, 1, 2, 2, 8, 2, 4, 8], [2, 2, 3, 3, 2, 0, 3, 2, 3, 3, 3, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [30, 90, 16, 66, 40, 57, 35, 9, 54, 64], [1, 1, 0, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0], [6, 9, 3, 4], [1, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8008571267127991, "mapping_values": [1, 4, 4, 2, 2, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(grad), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.sqrt(beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.080798019192647, 1.6662589963306573, 1.2943359559726375, 0.9486809196945793, 0.8307351203422032, 0.7645455461057926, 0.7411241670719872, 0.6820052604255833, 0.6368488527764544, 0.6294517566766942, 0.5861729276635312, 0.6066461025668708, 0.557523192959124, 0.5390909143946568, 0.5519640250937216, 0.5154894378758094, 0.5248514114432662, 0.5040681988429935, 0.509509070808263, 0.47409140685010565, 0.4680325746252836, 0.454986851657969, 0.469535816327503, 0.45260910149562816, 0.44646287089593345, 0.4191109249659848, 0.45921793106115255, 0.4378511216410273, 0.4106558069002202, 0.4045907023670714, 0.4120068907966042, 0.38503485014646155, 0.37823463471149016, 0.39209648968363797, 0.364327726236912, 0.36678916392640004, 0.35724177921547345, 0.33371666095842856, 0.3553736783045473, 0.33270232562281277], "accuracy": [0.28345000743865967, 0.4752344489097595, 0.5359926223754883, 0.6493197679519653, 0.6870955228805542, 0.7165499925613403, 0.7199841737747192, 0.7407211661338806, 0.7647602558135986, 0.759080708026886, 0.7799497842788696, 0.7676661014556885, 0.7869502305984497, 0.802271842956543, 0.7907806038856506, 0.802271842956543, 0.8034605979919434, 0.8125742673873901, 0.8078193068504333, 0.8224804997444153, 0.822348415851593, 0.8269713521003723, 0.8216879963874817, 0.829216718673706, 0.8278959393501282, 0.8446704745292664, 0.8327829837799072, 0.8341038227081299, 0.8455950617790222, 0.8448025584220886, 0.8461233377456665, 0.8558974862098694, 0.858671247959137, 0.8541803956031799, 0.8615770936012268, 0.8651432991027832, 0.8672566413879395, 0.8767666220664978, 0.8687095642089844, 0.873860776424408], "val_loss": [1.2372043132781982, 1.3409298488071986, 0.8583511795316424, 0.6541072470801217, 0.6444341625486102, 0.5895649194717407, 0.5272302627563477, 0.49853410039629253, 0.48854545184544157, 0.48466742038726807, 0.5036578348704747, 0.45299785477774485, 0.45424035617283415, 0.42538024697984966, 0.43387045179094585, 0.4242879237447466, 0.41002334867204937, 0.4533413989203317, 0.40232567276273457, 0.4057632769857134, 0.3969001429421561, 0.3962397405079433, 0.4151086211204529, 0.3777280194418771, 0.40048061098371235, 0.3896234801837376, 0.38448664971760343, 0.41661531584603445, 0.37275478669575285, 0.4309995770454407, 0.3497504336493356, 0.34623487506593975, 0.3658261639731271, 0.3718320386750357, 0.33154095922197613, 0.3442636472838266, 0.3332983340535845, 0.3713784728731428, 0.341745274407523, 0.345805253301348], "val_accuracy": [0.5193333625793457, 0.421999990940094, 0.6510000228881836, 0.7046666741371155, 0.7226666808128357, 0.7263333201408386, 0.762333333492279, 0.7730000019073486, 0.7870000004768372, 0.7853333353996277, 0.7616666555404663, 0.8029999732971191, 0.796999990940094, 0.8080000281333923, 0.8029999732971191, 0.8103333115577698, 0.8220000267028809, 0.7793333530426025, 0.8236666917800903, 0.8203333616256714, 0.8323333263397217, 0.8346666693687439, 0.8140000104904175, 0.8403333425521851, 0.8273333311080933, 0.8493333458900452, 0.8293333053588867, 0.8193333148956299, 0.8423333168029785, 0.8043333292007446, 0.8503333330154419, 0.8489999771118164, 0.8376666903495789, 0.8336666822433472, 0.859666645526886, 0.8510000109672546, 0.8516666889190674, 0.8413333296775818, 0.8556666374206543, 0.8500000238418579]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [90, 66, 89, 50, 85, 46], [1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [1, 3, 3, 4, 6, 1, 2, 8, 5, 8, 2, 3, 8, 1, 2, 0, 1, 2, 2, 6, 6, 3, 9, 5, 1, 2, 2, 8, 2, 4, 8], [2, 2, 3, 3, 2, 0, 3, 3, 3, 3, 3, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [78, 90, 16, 66, 40, 57, 35, 9, 54, 64], [1, 1, 0, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0], [6, 9, 3, 4], [6, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.22285714745521545, "mapping_values": [1, 4, 4, 2, 2, 1, 25, 25, 14, 11, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(grad), tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.subtract(beta, tf.math.multiply(beta, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(grad, tf.math.sqrt(tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta)))))), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad)))))))))), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [3.4503963439534795, 2.3093771789335635, 2.3133779109949293, 2.3042195260863276, 2.3029159359912423, 2.3868928874220754], "accuracy": [0.1935015171766281, 0.1022322028875351, 0.16483952105045319, 0.09708096832036972, 0.10355303436517715, 0.23537181317806244], "val_loss": [1.9909734044756209, 1.9654388427734375, 1.9757779666355677, 1.9741943904331751, 1.9702250616891044, 1.9783618790762765], "val_accuracy": [0.10366666316986084, 0.10233332961797714, 0.10366666316986084, 0.09799999743700027, 0.0963333323597908, 0.0949999988079071]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 5, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [1, 3, 3, 4, 6, 1, 2, 8, 1, 8, 2, 3, 8, 1, 2, 0, 1, 2, 2, 6, 6, 3, 9, 5, 1, 2, 2, 8, 2, 4, 8], [3, 2, 3, 3, 2, 0, 3, 2, 3, 3, 3, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [78, 90, 16, 66, 40, 57, 35, 9, 54, 64], [1, 1, 0, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0], [6, 9, 3, 4], [1, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [0, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.square(grad), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3018313736853235, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 5, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [1, 3, 3, 0, 8, 1, 0, 9, 5, 8, 2, 3, 5, 1, 2, 0, 1, 2, 2, 6, 6, 3, 9, 5, 1, 2, 2, 8, 2, 4, 8], [2, 2, 3, 0, 2, 0, 3, 2, 3, 3, 3, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [92, 90, 16, 66, 40, 57, 35, 9, 54, 64], [0, 1, 0, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0], [6, 9, 3, 4], [1, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 11, 8, 3, 7, 7, 3, 4, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.square(tf.math.add(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, grad), tf.math.negative(tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))), alpha))), tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), tf.math.add(alpha, grad))))))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.multiply(tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, beta)), grad), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [1, 2, 2, 0, 8, 1, 2, 9, 8, 5, 2, 3, 4, 1, 2, 0, 1, 2, 2, 6, 6, 3, 9, 5, 1, 2, 2, 8, 2, 4, 8], [3, 2, 3, 0, 2, 0, 3, 2, 3, 3, 3, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [78, 90, 16, 66, 40, 57, 35, 9, 54, 64], [0, 1, 0, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0], [6, 9, 3, 4], [6, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 4, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [1, 3, 3, 4, 6, 1, 2, 8, 5, 8, 2, 3, 5, 1, 2, 0, 1, 2, 2, 6, 6, 3, 9, 5, 1, 2, 2, 8, 2, 4, 8], [2, 1, 3, 0, 2, 0, 1, 1, 3, 3, 2, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [32, 90, 16, 66, 40, 57, 35, 9, 54, 64], [1, 1, 0, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0], [6, 9, 3, 4], [1, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [2, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 23, 23, 13, 10, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.multiply(tf.math.multiply(tf.math.pow(tf.math.add(beta, beta), tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.subtract(grad, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))))), beta), tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(beta, alpha))), grad)))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [39, 66, 89, 50, 85, 46], [0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [1, 3, 3, 4, 6, 1, 2, 8, 1, 8, 2, 3, 8, 1, 2, 0, 1, 2, 2, 6, 6, 3, 9, 5, 1, 2, 2, 8, 2, 4, 8], [3, 2, 3, 0, 2, 0, 3, 2, 3, 3, 3, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [78, 90, 16, 66, 40, 57, 35, 9, 54, 64], [1, 1, 0, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0], [6, 9, 3, 4], [1, 0], [69, 2], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 3, 4, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.negative(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.pow(tf.math.multiply(beta, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 6, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [1, 2, 2, 0, 8, 1, 2, 9, 8, 5, 2, 3, 4, 1, 2, 0, 1, 2, 2, 6, 6, 3, 9, 5, 1, 2, 2, 8, 2, 4, 8], [3, 2, 3, 0, 2, 0, 3, 2, 3, 3, 3, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [78, 90, 16, 66, 40, 57, 35, 9, 54, 64], [1, 1, 0, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0], [6, 9, 3, 4], [1, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [0, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), grad), tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3018313736853235, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [6, 2, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [1, 3, 3, 4, 5, 1, 2, 8, 5, 8, 4, 3, 5, 1, 2, 0, 1, 2, 2, 6, 6, 3, 9, 5, 1, 2, 2, 8, 2, 4, 8], [2, 2, 3, 3, 2, 0, 0, 2, 0, 3, 3, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [20, 90, 16, 66, 40, 57, 35, 9, 54, 64], [0, 1, 0, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0], [6, 9, 3, 4], [4, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 2, 26, 26, 15, 11, 3, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.subtract(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.add(grad, tf.math.add(beta, tf.math.sqrt(tf.math.square(tf.math.add(beta, beta))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)))))))))), tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, beta))), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2573631220965987e+21, 8.030563014129638e+17, 1.6039708406938488e+18, 2.3670602047866926e+18, 3.18113410942172e+18, 3.9486836103738353e+18], "accuracy": [0.09668471664190292, 0.1006472036242485, 0.09998679161071777, 0.1022322028875351, 0.1010434553027153, 0.09998679161071777], "val_loss": [3.692461430062636e+17, 1.0024710483365631e+18, 1.67458982274404e+18, 2.344779307659222e+18, 3.0307397946804987e+18, 3.83279166716469e+18], "val_accuracy": [0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137, 0.10199999809265137]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [1, 2, 2, 0, 8, 1, 2, 9, 8, 5, 2, 3, 4, 1, 2, 6, 1, 2, 2, 6, 6, 3, 9, 5, 1, 2, 2, 8, 2, 4, 8], [2, 0, 3, 1, 2, 0, 3, 2, 3, 3, 3, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [78, 90, 16, 66, 40, 57, 35, 9, 54, 64], [1, 1, 0, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0], [6, 9, 3, 4], [1, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [2, 2, 0, 2, 0, 2, 2], [73, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 3, 1, 1, 14, 14, 9, 5, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.sqrt(tf.math.add(beta, grad)))), tf.math.subtract(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [7, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [1, 2, 2, 6, 5, 1, 8, 9, 8, 5, 2, 3, 4, 1, 2, 0, 1, 2, 2, 6, 6, 3, 9, 5, 1, 2, 2, 8, 2, 4, 8], [2, 2, 3, 3, 2, 0, 3, 3, 3, 3, 3, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [20, 90, 16, 66, 40, 57, 35, 9, 54, 64], [0, 1, 0, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0], [6, 9, 3, 4], [4, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [0, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 13, 13, 8, 5, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, beta))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))))), tf.math.subtract(beta, tf.math.sqrt(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3018313736853235, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [89, 66, 89, 50, 85, 46], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [1, 3, 3, 4, 6, 1, 2, 8, 1, 8, 2, 3, 8, 1, 2, 0, 1, 2, 2, 6, 6, 3, 9, 5, 1, 2, 2, 8, 2, 4, 8], [2, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [78, 90, 16, 66, 40, 57, 35, 9, 54, 64], [1, 1, 0, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0], [6, 9, 3, 4], [6, 0], [69, 2], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 7, 3, 4, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.pow(tf.math.multiply(beta, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), beta))", "other_info": {"loss": [2.3015181324217755, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [87, 66, 89, 50, 85, 46], [1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [4, 3, 3, 0, 8, 0, 2, 2, 5, 8, 2, 3, 5, 1, 2, 0, 1, 2, 2, 6, 6, 3, 9, 5, 1, 2, 2, 8, 2, 4, 8], [0, 2, 3, 0, 2, 0, 3, 2, 3, 3, 3, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [78, 90, 16, 66, 40, 57, 35, 9, 54, 64], [1, 1, 0, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0], [6, 9, 3, 4], [1, 0], [69, 2], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 2, 7, 7, 3, 4, 2, 1, 0, 0, 0, 0, 7, 3, 4, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.multiply(tf.math.multiply(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, beta)), tf.math.add(beta, grad)), tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.pow(tf.math.multiply(beta, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), beta))", "other_info": {"loss": [2.301954888491315, 2.3070898746628536, 2.3126279452788343, 2.318165342364691, 2.3228576145214945, 2.326881124169961], "accuracy": [0.10091137140989304, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9755490166800362, 1.9798310143607003, 1.9845551082066126, 1.9888335636683874, 1.992476122719901, 1.9955909592764718], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [1, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [1, 3, 3, 4, 6, 1, 2, 8, 5, 8, 2, 3, 8, 1, 2, 0, 1, 2, 2, 6, 6, 3, 9, 5, 1, 2, 2, 8, 2, 4, 8], [2, 2, 3, 3, 2, 0, 3, 3, 3, 3, 3, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [78, 90, 16, 66, 40, 57, 35, 9, 54, 64], [0, 1, 0, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0], [6, 9, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.04171428456902504, "mapping_values": [1, 3, 3, 1, 2, 1, 25, 25, 14, 11, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.subtract(beta, tf.math.multiply(beta, tf.math.add(beta, tf.math.multiply(tf.math.pow(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(grad, tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))))))), tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.sqrt(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad)))))))), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3025209297514735, 2.3005337137603457, 2.3033633548601538, 2.3021744717822306, 2.3029866407827977, 2.3029244036769603], "accuracy": [0.08677849918603897, 0.09774138033390045, 0.08889182657003403, 0.08889182657003403, 0.08942015469074249, 0.09060890227556229], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [6, 0, 9, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 1, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [48, 66, 89, 50, 85, 46], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1], [1, 3, 3, 4, 6, 1, 2, 8, 5, 8, 2, 3, 8, 1, 2, 0, 1, 2, 2, 6, 6, 3, 9, 5, 1, 2, 2, 8, 2, 4, 8], [2, 3, 3, 3, 3, 0, 3, 2, 3, 3, 3, 3, 2, 3, 1, 3, 4, 3, 0, 0, 4, 1, 1, 1, 5], [78, 90, 16, 66, 40, 57, 35, 9, 54, 64], [0, 1, 0, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0], [6, 9, 3, 4], [1, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 4, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.04171428456902504, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(grad), alpha)), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3025209297514735, 2.3005337137603457, 2.3033633548601538, 2.3021744717822306, 2.3029866407827977, 2.3029244036769603], "accuracy": [0.08677849918603897, 0.09774138033390045, 0.08889182657003403, 0.08889182657003403, 0.08942015469074249, 0.09060890227556229], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}]