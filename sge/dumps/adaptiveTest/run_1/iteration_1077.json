[{"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [45, 66, 89, 50, 85, 46], [0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [0, 9, 4, 2, 4, 9, 4, 9, 8, 8, 5, 0, 4, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [2, 0, 3, 3, 3, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [33, 78, 52, 66, 2, 57, 35, 9, 54, 64], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1], [3, 4, 3, 4, 9, 7], [0, 0, 2], [67, 2, 82], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 7, 7, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 2, 0, 2, 2], [30, 23, 13, 96, 41]], "fitness": -0.8317142724990845, "mapping_values": [1, 4, 4, 2, 2, 1, 2, 2, 1, 1, 0, 9, 7, 5, 2, 3, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), tf.math.add(sigma, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))), tf.math.add(sigma, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.0893407088103246, 1.75093160423825, 1.1624441532930598, 0.9272941531616667, 0.7944502498904837, 0.758591780218828, 0.7095930805736608, 0.6802544334403685, 0.6368279113997526, 0.6285000874570742, 0.5940462990900497, 0.5784754266340215, 0.559978057026249, 0.5620099263042585, 0.5398697384580597, 0.5336874639904494, 0.5064983135437402, 0.5111911177965849, 0.48610791850162455, 0.4649176108263991, 0.47624702332609004, 0.4658256466197237, 0.4521070008485104, 0.4436153754416773, 0.42673328023671064, 0.4249479955630831, 0.4418818560872867, 0.41066339079808756, 0.41018575230341986, 0.39583589762287874, 0.41105842654101366, 0.3928513473578574, 0.3919965032108739, 0.3847576133476792, 0.37546363671332017, 0.360251360640408, 0.3628743070739529, 0.34977446018413483, 0.3500291486072062, 0.3660736120395877, 0.34186711998317126, 0.34223429460519844, 0.3294602286278721, 0.32376098430089, 0.3128992522499738, 0.3090104255001102, 0.3123724348178834, 0.30652024858993954, 0.3023296107847173], "accuracy": [0.31937655806541443, 0.40404173731803894, 0.5861841440200806, 0.6543388962745667, 0.6997754573822021, 0.7084929347038269, 0.7318716049194336, 0.7409853339195251, 0.7537974119186401, 0.7552502751350403, 0.7671377658843994, 0.783119797706604, 0.7881389260292053, 0.7803460359573364, 0.7938185334205627, 0.7981772422790527, 0.8099326491355896, 0.8063663840293884, 0.8208954930305481, 0.8255184292793274, 0.8231409192085266, 0.8227446675300598, 0.829216718673706, 0.8308017253875732, 0.8385946154594421, 0.8411042094230652, 0.8335754871368408, 0.8466516733169556, 0.8470479249954224, 0.8487650156021118, 0.8453308939933777, 0.8520671129226685, 0.8502179384231567, 0.8536521196365356, 0.8603883385658264, 0.8626337051391602, 0.8601241707801819, 0.8716153502464294, 0.8688416481018066, 0.86118084192276, 0.8646149635314941, 0.8713511824607849, 0.8742570281028748, 0.8786157965660095, 0.8819178342819214, 0.8803328275680542, 0.8805969953536987, 0.8850878477096558, 0.8856161832809448], "val_loss": [1.639725582940238, 1.1522643566131592, 0.732514568737575, 0.6717411620276315, 0.5989043372017997, 0.6275555406297956, 0.5156483139310565, 0.5881002971104213, 0.5307015521185738, 0.5010591575077602, 0.46993121079036165, 0.4763927459716797, 0.47235918045043945, 0.469731262751988, 0.43208392177309307, 0.4170431068965367, 0.414749230657305, 0.4141095450946263, 0.4025763784136091, 0.391219505241939, 0.3978435056550162, 0.3779088088444301, 0.39034467935562134, 0.37461877720696585, 0.358928952898298, 0.37528366701943533, 0.39138552972248625, 0.3622244766780308, 0.34999024868011475, 0.35810852902276175, 0.3480374217033386, 0.383462701525007, 0.353653473513467, 0.33902972085135324, 0.3420368347849165, 0.348798292023795, 0.33323040178843905, 0.34162873881203787, 0.3738537771361215, 0.33465141909463064, 0.3358562503542219, 0.3392170923096793, 0.34013740505490986, 0.3222355842590332, 0.33090438161577496, 0.3439422420092991, 0.3281332084110805, 0.32780736684799194, 0.33394165549959454], "val_accuracy": [0.4023333191871643, 0.5696666836738586, 0.6679999828338623, 0.6646666526794434, 0.7103333473205566, 0.7073333263397217, 0.7633333206176758, 0.734000027179718, 0.746666669845581, 0.7636666893959045, 0.781000018119812, 0.7696666717529297, 0.7770000100135803, 0.7716666460037231, 0.8119999766349792, 0.8173333406448364, 0.815666675567627, 0.8159999847412109, 0.8180000185966492, 0.8270000219345093, 0.8266666531562805, 0.8399999737739563, 0.8306666612625122, 0.8330000042915344, 0.8450000286102295, 0.8306666612625122, 0.82833331823349, 0.8450000286102295, 0.8529999852180481, 0.8503333330154419, 0.8529999852180481, 0.8240000009536743, 0.8526666760444641, 0.8543333411216736, 0.8619999885559082, 0.8476666808128357, 0.8556666374206543, 0.856333315372467, 0.8373333215713501, 0.862666666507721, 0.8526666760444641, 0.8483333587646484, 0.8546666502952576, 0.8659999966621399, 0.8576666712760925, 0.8576666712760925, 0.8613333106040955, 0.8640000224113464, 0.8586666584014893]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [45, 66, 89, 50, 85, 46], [1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 9, 4, 2, 9, 6, 4, 9, 8, 8, 5, 0, 4, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [3, 0, 3, 3, 3, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [33, 78, 52, 66, 2, 57, 35, 9, 54, 64], [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 1, 1, 1], [3, 4, 3, 4, 9, 7], [4, 0, 2], [67, 2], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 7, 7, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 2, 0, 2, 2], [30, 23, 13, 96, 41]], "fitness": -0.8259999752044678, "mapping_values": [1, 4, 4, 2, 2, 1, 9, 9, 6, 3, 3, 5, 3, 2, 1, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(beta, tf.math.add(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, grad))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.089372736320299, 1.749396445099011, 1.1687762983770198, 0.9438291474686732, 0.788470528546483, 0.7506585239403598, 0.7151913963147064, 0.680513651662924, 0.6375795344020933, 0.6196120975276089, 0.5981866331101093, 0.5790906052201447, 0.5587992914018063, 0.5596159266805164, 0.5344790217111517, 0.5348333953677419, 0.5030551964045358, 0.5115159749276194, 0.49213208022953386, 0.46154681463377617, 0.47827736968613727, 0.47028202742334246, 0.45167450460192865, 0.44239835791253396, 0.4292924495783181, 0.4239605081914328, 0.4429330065376046, 0.4148836402396453, 0.40870695898026177, 0.3988262831204288, 0.4120675568425692, 0.39386393977131084, 0.3939875879851094, 0.38914386458274725, 0.3778155106933535, 0.3632603135437714, 0.35983941096749994, 0.3494469241742618, 0.35240461898045283, 0.3698725340987052, 0.34747665064398797, 0.3418951547652849, 0.33436562846585854, 0.334019637961256, 0.31955892211331854, 0.3154884622931843, 0.31029382026852115, 0.3119441291061233, 0.30343572063027846], "accuracy": [0.31937655806541443, 0.40245673060417175, 0.5840708017349243, 0.6460176706314087, 0.7053229212760925, 0.7131158113479614, 0.7304186820983887, 0.7403249144554138, 0.754589855670929, 0.7614582180976868, 0.7670056819915771, 0.7836481332778931, 0.7876105904579163, 0.7843085527420044, 0.7960638999938965, 0.7913089394569397, 0.8094043135643005, 0.8035926818847656, 0.8127063512802124, 0.8252542614936829, 0.8187822103500366, 0.8222163319587708, 0.8334434032440186, 0.8337075710296631, 0.8358209133148193, 0.8413683772087097, 0.8347642421722412, 0.8455950617790222, 0.845859169960022, 0.848368763923645, 0.8430854678153992, 0.8539162874221802, 0.8490291833877563, 0.8531237840652466, 0.8576145768165588, 0.8631620407104492, 0.8632941246032715, 0.8688416481018066, 0.8687095642089844, 0.8598600029945374, 0.8638224601745605, 0.8702945709228516, 0.8741249442100525, 0.8706908226013184, 0.8794082403182983, 0.8774270415306091, 0.8802007436752319, 0.8820499181747437, 0.8833707571029663], "val_loss": [1.6401257514953613, 1.1689672810690743, 0.7257168974195208, 0.6508148568017142, 0.5841777324676514, 0.6260687453406197, 0.5519049508231026, 0.5834777014596122, 0.5314546653202602, 0.5066510779517037, 0.47147960322243826, 0.4616131101335798, 0.46320552485329763, 0.4511884110314505, 0.4364152806145804, 0.4184309244155884, 0.41663852759769987, 0.41680824756622314, 0.4008259688104902, 0.38886349541800364, 0.3967268296650478, 0.3775246909686497, 0.3856114319392613, 0.36958145243780954, 0.35975125006267, 0.37909082004002165, 0.38995756421770367, 0.36325654813221525, 0.34675064257213045, 0.35436265809195383, 0.34508316005979267, 0.3864132932254246, 0.35758429765701294, 0.3454281432288034, 0.34246095589229036, 0.3387448106493269, 0.33319902420043945, 0.3425789049693516, 0.3805023176329477, 0.33666880641664776, 0.33476245403289795, 0.3513201219694955, 0.3415725997516087, 0.3265447957175119, 0.3347365345273699, 0.34316563606262207, 0.32976365089416504, 0.328208931854793, 0.3335402693067278], "val_accuracy": [0.4023333191871643, 0.5743333101272583, 0.6743333339691162, 0.7123333215713501, 0.7170000076293945, 0.7110000252723694, 0.722000002861023, 0.7360000014305115, 0.7486666440963745, 0.7599999904632568, 0.7786666750907898, 0.7803333401679993, 0.7856666445732117, 0.7876666784286499, 0.7996666431427002, 0.8173333406448364, 0.8100000023841858, 0.812666654586792, 0.8180000185966492, 0.8323333263397217, 0.8236666917800903, 0.8393333554267883, 0.8373333215713501, 0.8339999914169312, 0.8460000157356262, 0.8243333101272583, 0.828000009059906, 0.8456666469573975, 0.8526666760444641, 0.8526666760444641, 0.8533333539962769, 0.8183333277702332, 0.846666693687439, 0.8506666421890259, 0.8573333621025085, 0.8546666502952576, 0.8556666374206543, 0.8533333539962769, 0.831333339214325, 0.859333336353302, 0.8569999933242798, 0.8456666469573975, 0.8506666421890259, 0.862666666507721, 0.8600000143051147, 0.8566666841506958, 0.8616666793823242, 0.862333357334137, 0.8603333234786987]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [45, 66, 89, 50, 85, 46], [1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 9, 4, 2, 9, 6, 4, 9, 8, 8, 5, 0, 4, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [3, 2, 3, 3, 3, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [33, 78, 52, 66, 2, 57, 35, 9, 54, 64], [0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 1, 1, 1, 1], [3, 4, 3, 4, 9, 7], [4, 0, 2], [67, 2], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 7, 7, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 2, 0, 2, 2], [30, 23, 13, 96, 41]], "fitness": -0.8259999752044678, "mapping_values": [1, 4, 4, 2, 2, 1, 9, 9, 6, 3, 2, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.1052882390141314, 1.6166487945431431, 1.3134314873907875, 0.9494895964187795, 0.8498429996368041, 0.7716060510212011, 0.7486293815335168, 0.686898754092098, 0.6510225231337935, 0.6303639884055519, 0.6129713811894544, 0.5884702680857584, 0.5579934752675536, 0.5707523340971683, 0.5408057303177352, 0.5369730685538525, 0.5087133700648288, 0.5134620535422498, 0.4922627770685013, 0.4674286994762771, 0.4780810930119246, 0.4633900068888276, 0.453197516533425, 0.44544825508153324, 0.4355361470141982, 0.4191639002571489, 0.44228619017054327, 0.4124957197228317, 0.4080666511278615, 0.3890867109359169, 0.4115028867214867, 0.4150130484853958, 0.3926454166836349, 0.3833433276335356, 0.3697911231092033, 0.36345872825808484, 0.3610060081986105, 0.3520585650253636, 0.34709743977285823, 0.3595449251741891, 0.33993697544728857, 0.33494745732818093, 0.3391349161179814, 0.3275006541273991, 0.318112870130903], "accuracy": [0.3156782388687134, 0.4341566562652588, 0.5583146214485168, 0.6491876840591431, 0.677189290523529, 0.7077004313468933, 0.7189275026321411, 0.7424382567405701, 0.754589855670929, 0.7625148296356201, 0.7638356685638428, 0.7783648371696472, 0.7909126877784729, 0.7792893648147583, 0.7955356240272522, 0.7964601516723633, 0.8074230551719666, 0.8059701323509216, 0.8190463781356812, 0.8231409192085266, 0.8211596608161926, 0.8256505131721497, 0.8284242749214172, 0.8319904804229736, 0.8347642421722412, 0.8448025584220886, 0.8325188159942627, 0.8502179384231567, 0.8429533839225769, 0.8552370667457581, 0.8461233377456665, 0.8506141901016235, 0.8535200357437134, 0.8569541573524475, 0.8626337051391602, 0.8631620407104492, 0.8631620407104492, 0.8728041052818298, 0.8696341514587402, 0.8632941246032715, 0.870030403137207, 0.8762382864952087, 0.8691058158874512, 0.8762382864952087, 0.8778232932090759], "val_loss": [1.6076939105987549, 0.9853115422385079, 0.8632092135293143, 0.8093925544193813, 0.6008341312408447, 0.6236364330564227, 0.5395702634538923, 0.5855670145579747, 0.5187213931764875, 0.5231422015598842, 0.46098577976226807, 0.4761058603014265, 0.4683882679258074, 0.45138146196092876, 0.4324813655444554, 0.41385395186288015, 0.4182468567575727, 0.4144349694252014, 0.4003722241946629, 0.38530621358326506, 0.38875842094421387, 0.37487076010022846, 0.4052232248442514, 0.3648068053381784, 0.3584270647593907, 0.37486864839281353, 0.3795458333832877, 0.3578270248004368, 0.3486514261790684, 0.3524195977619716, 0.34540258986609323, 0.38534827743257793, 0.35484778881073, 0.3420985085623605, 0.33745437008993967, 0.3558394994054522, 0.3308050547327314, 0.3424163120133536, 0.35980034726006643, 0.33517405816486906, 0.33614362137658255, 0.3455145018441336, 0.3327566981315613, 0.32828040633882793, 0.34300664493015837], "val_accuracy": [0.40566667914390564, 0.57833331823349, 0.6393333077430725, 0.6033333539962769, 0.7126666903495789, 0.6973333358764648, 0.7409999966621399, 0.7266666889190674, 0.7566666603088379, 0.7383333444595337, 0.7879999876022339, 0.777999997138977, 0.781333327293396, 0.7933333516120911, 0.8113333582878113, 0.8169999718666077, 0.809333324432373, 0.8183333277702332, 0.8183333277702332, 0.8323333263397217, 0.8276666402816772, 0.8399999737739563, 0.8209999799728394, 0.8393333554267883, 0.847000002861023, 0.8356666564941406, 0.8393333554267883, 0.8460000157356262, 0.8500000238418579, 0.8496666550636292, 0.8529999852180481, 0.8236666917800903, 0.8510000109672546, 0.8543333411216736, 0.8613333106040955, 0.8463333249092102, 0.859333336353302, 0.8533333539962769, 0.843999981880188, 0.8629999756813049, 0.856333315372467, 0.8486666679382324, 0.8579999804496765, 0.859000027179718, 0.8556666374206543]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [45, 66, 89, 50, 85, 46], [0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [6, 9, 2, 8, 4, 6, 4, 2, 5, 8, 5, 0, 4, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [3, 0, 3, 3, 3, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [98, 78, 80, 66, 2, 57, 35, 9, 54, 64], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1], [3, 4, 3, 4, 9, 7], [4, 0, 2], [67, 2], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 7, 7, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 2, 0, 2, 2], [30, 23, 13, 96, 41]], "fitness": -0.8222857117652893, "mapping_values": [1, 4, 4, 2, 2, 1, 16, 16, 10, 6, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.pow(grad, tf.math.divide_no_nan(tf.math.pow(tf.math.add(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.sqrt(grad))), grad), tf.math.add(beta, grad)))))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.105280826907699, 1.618351411022735, 1.2701190614807387, 0.9314506308923166, 0.8256467152281114, 0.7656630220949815, 0.7234402467246857, 0.6844533761935447, 0.6433519895727672, 0.6245384002484509, 0.6107580349303948, 0.5861775202600632, 0.5524886779545195, 0.5758673328182496, 0.5425256923079222, 0.5356214806829162, 0.5096541733836863, 0.5068432871439769, 0.4945945412436213, 0.4662246850062481, 0.47703480561490325, 0.4582176188617382, 0.449462285509136, 0.4451604276371985, 0.4293358841938759, 0.41817065997051917, 0.44362762268854566, 0.40786932638890994, 0.4132224804122828, 0.3893817767782328, 0.4188263283516233, 0.4125080951185054, 0.3912548690605252, 0.380490561785589, 0.36859265266235053, 0.36331842254181546, 0.359404276311988, 0.3463129743947455, 0.34891039347210895, 0.35790604262020703, 0.3373216320227292, 0.3356648506529028, 0.32737397577989025, 0.32473763750686213, 0.3169226546557415, 0.3127248548182829, 0.3036464894129663, 0.3266580778932716, 0.2977314377426235], "accuracy": [0.3156782388687134, 0.43468499183654785, 0.5667679309844971, 0.652621865272522, 0.6857746839523315, 0.7063795924186707, 0.7257958054542542, 0.7421740889549255, 0.7563069462776184, 0.7594769597053528, 0.7648923397064209, 0.7781006693840027, 0.7931581139564514, 0.7799497842788696, 0.7950072884559631, 0.7980451583862305, 0.8079513907432556, 0.8092722296714783, 0.8141592741012573, 0.8278959393501282, 0.8248580098152161, 0.8301413059234619, 0.8313300609588623, 0.8315942287445068, 0.839519202709198, 0.8438779711723328, 0.8321225643157959, 0.8507462739944458, 0.8437458872795105, 0.8561616539955139, 0.8413683772087097, 0.850350022315979, 0.852859616279602, 0.8581429123878479, 0.86553955078125, 0.8618412613868713, 0.8651432991027832, 0.8758420348167419, 0.8668603897094727, 0.8683133125305176, 0.8684453964233398, 0.8705587387084961, 0.8742570281028748, 0.8791441321372986, 0.8799365758895874, 0.880729079246521, 0.8853520154953003, 0.873860776424408, 0.8887861371040344], "val_loss": [1.6076045717511858, 0.9846738747188023, 0.7873622519629342, 0.761152846472604, 0.5921567508152553, 0.6459580148969378, 0.5446627650942121, 0.5759445599147252, 0.5357847894941058, 0.5114868368421283, 0.46385318892342703, 0.4650008337838309, 0.5029819522585187, 0.4768096889768328, 0.4275789771761213, 0.412330048424857, 0.4172056828226362, 0.41255008322852, 0.40071094036102295, 0.3964639050619943, 0.39364492893218994, 0.3772985679762704, 0.3964084982872009, 0.3643063391957964, 0.3576120563915798, 0.3813058223043169, 0.3857712319919041, 0.3573434523173741, 0.35164283003125874, 0.35293711934770855, 0.3464839117867606, 0.39097235032490324, 0.3535472920962742, 0.3383765390941075, 0.3363011053630284, 0.34446804012571064, 0.33452993631362915, 0.3429392661367144, 0.35874238184520174, 0.3315438372748239, 0.3314865231513977, 0.3329810159546988, 0.3321829778807504, 0.3216817464147295, 0.3345732092857361, 0.3288625308445522, 0.35875318731580463, 0.3236425689288548, 0.33435164179120747], "val_accuracy": [0.40566667914390564, 0.5806666612625122, 0.6503333449363708, 0.621666669845581, 0.7166666388511658, 0.7046666741371155, 0.7366666793823242, 0.722000002861023, 0.7473333477973938, 0.7549999952316284, 0.7863333225250244, 0.7826666831970215, 0.7609999775886536, 0.7699999809265137, 0.8169999718666077, 0.8183333277702332, 0.812333345413208, 0.8163333535194397, 0.8169999718666077, 0.8266666531562805, 0.8243333101272583, 0.8366666436195374, 0.824999988079071, 0.8396666646003723, 0.8473333120346069, 0.8273333311080933, 0.8333333134651184, 0.8476666808128357, 0.8510000109672546, 0.8506666421890259, 0.8529999852180481, 0.8193333148956299, 0.8513333201408386, 0.8576666712760925, 0.8603333234786987, 0.8529999852180481, 0.8539999723434448, 0.8529999852180481, 0.8413333296775818, 0.8610000014305115, 0.8573333621025085, 0.8526666760444641, 0.8643333315849304, 0.8693333268165588, 0.8583333492279053, 0.8640000224113464, 0.8416666388511658, 0.8669999837875366, 0.8659999966621399]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [45, 66, 89, 50, 85, 46], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [0, 9, 1, 2, 9, 1, 4, 2, 8, 8, 5, 0, 4, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [3, 0, 2, 3, 3, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [33, 78, 52, 66, 2, 57, 35, 9, 54, 64], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 1, 1, 1], [2, 6, 4, 4, 9, 8], [4, 3, 2], [67, 2], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 7, 7, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 2, 0, 2, 2], [30, 23, 13, 96, 41]], "fitness": -0.8214285969734192, "mapping_values": [1, 4, 4, 2, 2, 1, 2, 2, 2, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(grad), tf.math.add(alpha, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.0917338541769284, 1.7267194660096326, 1.4726061999065654, 1.1149192083513322, 0.9466638144028421, 0.8425394256809967, 0.7815710691381612, 0.758377238862062, 0.6949594669007606, 0.6669013904715888, 0.6816789973854405, 0.6773237013671974, 0.6295539554729596, 0.6288056719210232, 0.6095246748996055, 0.5931400921146048, 0.5689294370740806, 0.5686218794373756, 0.5565634554072677, 0.524928758094308, 0.5455089060228262, 0.5219774862770801, 0.5298879947117244, 0.4998701881140514, 0.4925712232403295, 0.4734004543536469, 0.4963158358042471, 0.48025178322387707, 0.4463213732481601, 0.450402311468011], "accuracy": [0.31937655806541443, 0.40747588872909546, 0.5238409638404846, 0.5978074073791504, 0.6489235162734985, 0.6839255094528198, 0.6989829540252686, 0.7125874757766724, 0.7316074371337891, 0.7478536367416382, 0.733588695526123, 0.7432307600975037, 0.7605336308479309, 0.7607977986335754, 0.7617223858833313, 0.7766477465629578, 0.7845727205276489, 0.7812706232070923, 0.7902522683143616, 0.8034605979919434, 0.798309326171875, 0.8018755912780762, 0.7959318161010742, 0.8115176558494568, 0.8150838613510132, 0.8239334225654602, 0.8083476424217224, 0.8216879963874817, 0.8333113193511963, 0.8310658931732178], "val_loss": [1.6130842481340681, 1.3144050666264124, 0.9738218103136335, 0.8151089804513114, 0.6296454327447074, 0.6262292010443551, 0.5961683988571167, 0.5812670162745884, 0.5293895857674735, 0.5948365075247628, 0.5369209221431187, 0.5169279064450946, 0.5176712104252407, 0.5055421079908099, 0.4647230250494821, 0.46810148443494526, 0.47551184041159494, 0.44887649161475046, 0.4496096202305385, 0.4955545663833618, 0.4477553197315761, 0.4382590651512146, 0.4268200397491455, 0.4200811045510428, 0.3945647392954145, 0.4003008348601205, 0.41445727007729666, 0.40044162103108, 0.3859168716839382, 0.3930491464478629], "val_accuracy": [0.3946666717529297, 0.5183333158493042, 0.6136666536331177, 0.6019999980926514, 0.718666672706604, 0.7036666870117188, 0.7139999866485596, 0.7226666808128357, 0.7630000114440918, 0.7066666483879089, 0.7646666765213013, 0.7416666746139526, 0.7429999709129333, 0.7586666941642761, 0.7956666946411133, 0.7943333387374878, 0.7839999794960022, 0.7979999780654907, 0.7933333516120911, 0.7749999761581421, 0.7863333225250244, 0.8043333292007446, 0.8090000152587891, 0.8080000281333923, 0.8323333263397217, 0.8243333101272583, 0.8113333582878113, 0.8230000138282776, 0.8289999961853027, 0.8303333520889282]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [41, 66, 89, 50, 85, 46], [1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 9, 4, 0, 3, 6, 4, 9, 8, 8, 5, 0, 4, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [3, 3, 3, 3, 3, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [98, 78, 52, 66, 2, 57, 35, 9, 54, 64], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1], [3, 4, 6, 4, 1, 7], [4, 0, 2, 5], [67, 2], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 7, 7, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 2, 0, 2, 2], [30, 23, 13, 96, 41]], "fitness": -0.8185714483261108, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 11, 9, 5, 4, 1, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, grad), tf.math.add(sigma, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)))), tf.math.add(sigma, beta))), tf.math.add(sigma, grad))))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.045502896196161, 1.3007555858034894, 0.9960376190046483, 0.8701623957139185, 0.7767456757110643, 0.7701869992421934, 0.72482868547626, 0.6932924123503796, 0.6732430885559564, 0.6581068043978995, 0.6378615001850534, 0.6263012824010037, 0.6227296466258034, 0.6168511727655789, 0.5907754998606398, 0.6046729778112941, 0.5789723097293951, 0.5783596883565207, 0.5619157020442002, 0.5378281538906257, 0.546380709757847, 0.5307912583978437, 0.5504359584112272, 0.5199762646469537, 0.5180853707458775, 0.5044843417707608, 0.5180760804790595, 0.4967712209193525, 0.47730510734910303, 0.48345237488539433, 0.49459706377343826, 0.49186949988303325, 0.47355194181388854, 0.4696699155241412, 0.4622845596105762, 0.45467417435544655, 0.4480575643211166, 0.44274625209312807, 0.436055667923741, 0.4451211757781782, 0.4315149644622241, 0.43039279706159117, 0.42755564124183315], "accuracy": [0.33562275767326355, 0.5435213446617126, 0.633469820022583, 0.6806234121322632, 0.7058512568473816, 0.7117950320243835, 0.7310791015625, 0.7421740889549255, 0.7433628439903259, 0.7499669790267944, 0.7523444890975952, 0.7638356685638428, 0.7614582180976868, 0.765949010848999, 0.7765156626701355, 0.76542067527771, 0.7857614755630493, 0.778232753276825, 0.7825914621353149, 0.7960638999938965, 0.7968564033508301, 0.7984414100646973, 0.7898560166358948, 0.7996301651000977, 0.8041210174560547, 0.8103289008140564, 0.8006868362426758, 0.8145555257797241, 0.8207634687423706, 0.8181217908859253, 0.8107251524925232, 0.8182538747787476, 0.8216879963874817, 0.8245938420295715, 0.8224804997444153, 0.8253863453865051, 0.8339717388153076, 0.8325188159942627, 0.8380662798881531, 0.8308017253875732, 0.8385946154594421, 0.8376700282096863, 0.8397833704948425], "val_loss": [1.088914224079677, 0.7572807243892125, 0.7201787233352661, 0.6138373953955514, 0.5906195299965995, 0.5739251545497349, 0.5452414921351841, 0.5563998733248029, 0.527459876877921, 0.5419467857905796, 0.4978515420641218, 0.48606315680912565, 0.49918699264526367, 0.496491585459028, 0.4704478979110718, 0.4652812991823469, 0.4633280038833618, 0.45753410884312223, 0.4458667550768171, 0.45285446303231375, 0.4405081868171692, 0.4506792851856777, 0.4376892021724156, 0.42127883434295654, 0.41813125780650545, 0.424837521144322, 0.4225876671927316, 0.40313464403152466, 0.39893526690346853, 0.4050184062549046, 0.3960343769618443, 0.42424620049340384, 0.3892738308225359, 0.3868735943521772, 0.393135062285832, 0.3842074615614755, 0.38224015065601896, 0.37836043323789326, 0.40044449056897846, 0.3756390299115862, 0.3776536243302481, 0.3937145471572876, 0.3773734824998038], "val_accuracy": [0.6193333268165588, 0.6726666688919067, 0.6653333306312561, 0.7226666808128357, 0.7149999737739563, 0.7226666808128357, 0.7463333606719971, 0.7269999980926514, 0.7596666812896729, 0.7289999723434448, 0.7730000019073486, 0.765333354473114, 0.7763333320617676, 0.7620000243186951, 0.7860000133514404, 0.7956666946411133, 0.7896666526794434, 0.7983333468437195, 0.7960000038146973, 0.7919999957084656, 0.8053333163261414, 0.79666668176651, 0.8073333501815796, 0.812333345413208, 0.8159999847412109, 0.8063333630561829, 0.8149999976158142, 0.8273333311080933, 0.8259999752044678, 0.8240000009536743, 0.8323333263397217, 0.7973333597183228, 0.831333339214325, 0.8286666870117188, 0.8343333601951599, 0.82833331823349, 0.8289999961853027, 0.8383333086967468, 0.8259999752044678, 0.8360000252723694, 0.8346666693687439, 0.8243333101272583, 0.8356666564941406]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [45, 66, 89, 50, 85, 46], [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 4, 4, 2, 9, 6, 0, 9, 8, 8, 5, 0, 4, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [3, 0, 3, 3, 3, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [33, 78, 52, 66, 2, 57, 35, 9, 54, 64], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 1, 1, 1], [3, 4, 3, 4, 9, 7], [4, 0, 2], [67, 2], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 7, 7, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 2, 0, 2, 2], [30, 23, 13, 96, 41]], "fitness": -0.7977142930030823, "mapping_values": [1, 4, 4, 2, 2, 1, 12, 12, 8, 4, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.negative(tf.math.add(alpha, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.pow(tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), grad)), tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), grad)), tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.140832098892982, 1.7138862508619623, 1.3777827547368373, 1.0475740302130216, 0.904699392661033, 0.8659833107390156, 0.7637838265600143, 0.7539532642795299, 0.7204691003641479, 0.683919951034307, 0.647271070938856, 0.6477767149565352, 0.6337111211487519, 0.6058961566350148, 0.6119785487077114, 0.5776791097764814, 0.5703172192849408, 0.5548364426623309, 0.5458888194233813, 0.5280750151701481], "accuracy": [0.31079116463661194, 0.4593845009803772, 0.5251618027687073, 0.6388852000236511, 0.6617355942726135, 0.6740192770957947, 0.7153612375259399, 0.707568347454071, 0.7283053994178772, 0.7357020378112793, 0.7540615797042847, 0.7534011602401733, 0.763967752456665, 0.7707040309906006, 0.7646281719207764, 0.7848368883132935, 0.7800818681716919, 0.7907806038856506, 0.7946110367774963, 0.802800178527832], "val_loss": [1.4901183673313685, 1.2673937933785575, 0.9863803386688232, 0.6815468924386161, 0.7418657711574009, 0.6953872953142438, 0.5718809706824166, 0.5548689365386963, 0.5375713450568063, 0.5348339421408517, 0.49571958609989714, 0.5575035810470581, 0.5033418791634696, 0.537341867174421, 0.46405657700129915, 0.4735030787331717, 0.45403953960963656, 0.4705066510609218, 0.4785683495657785, 0.45574700832366943], "val_accuracy": [0.5646666884422302, 0.47333332896232605, 0.640333354473114, 0.6936666369438171, 0.675000011920929, 0.6726666688919067, 0.7379999756813049, 0.7486666440963745, 0.7630000114440918, 0.7573333382606506, 0.7736666798591614, 0.7490000128746033, 0.7749999761581421, 0.7429999709129333, 0.7916666865348816, 0.7879999876022339, 0.7903333306312561, 0.7873333096504211, 0.781000018119812, 0.7873333096504211]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [45, 66, 89, 50, 85, 46], [1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 9, 4, 2, 9, 6, 4, 9, 8, 8, 5, 0, 4, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [3, 0, 3, 3, 3, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [33, 51, 52, 66, 2, 57, 35, 9, 54, 64], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1], [3, 4, 3, 4, 9, 7], [4, 0, 2], [44, 2], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 7, 7, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 2, 0, 2, 2], [30, 23, 13, 96, 41]], "fitness": -0.36485713720321655, "mapping_values": [1, 4, 4, 2, 2, 1, 3, 3, 2, 1, 1, 9, 6, 5, 1, 1, 3, 1, 2, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(sigma, grad))), sigma)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, alpha)", "other_info": {"loss": [2.7162766073043274, 2.2844568364545577, 2.2909960163866194, 2.2037337232558736, 2.0917225490707874, 2.0908074381171655, 2.3127381755943235, 2.306450727766594, 2.304569662081772, 2.304663259119264], "accuracy": [0.240919291973114, 0.18253862857818604, 0.11530841141939163, 0.26482629776000977, 0.25676923990249634, 0.28463876247406006, 0.10328886657953262, 0.09879804402589798, 0.10236428678035736, 0.10170386731624603], "val_loss": [1.974926267351423, 1.9844345365251814, 1.7903210094996862, 1.6080106326511927, 1.3259263379233224, 1.9872283254350935, 1.9760486739022392, 1.9745888028826033, 1.9739374433244978, 1.9740702084132604], "val_accuracy": [0.10366666316986084, 0.0976666659116745, 0.1679999977350235, 0.39100000262260437, 0.4350000023841858, 0.10000000149011612, 0.09866666793823242, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [45, 66, 89, 50, 85, 46], [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [6, 9, 1, 2, 4, 1, 4, 8, 5, 8, 5, 0, 4, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [3, 0, 1, 3, 3, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [63, 78, 52, 66, 2, 57, 35, 9, 54, 64], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1], [3, 7, 3, 5, 4, 3, 6, 7, 5, 8], [4, 0, 2], [67, 2], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 7, 7, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 2, 0, 2, 2], [30, 23, 13, 96, 41]], "fitness": -0.20485714077949524, "mapping_values": [1, 4, 4, 2, 2, 1, 15, 15, 9, 6, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.pow(grad, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.sqrt(tf.math.square(grad)))), grad)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2802640088340467, 5.90998364716725, 4291.767784946488, NaN, NaN, NaN], "accuracy": [0.3206973969936371, 0.17302866280078888, 0.11927089840173721, 0.09325055778026581, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9541378702436174, 15.141839163643974, 56021193289.14286, NaN, NaN, NaN], "val_accuracy": [0.19166666269302368, 0.06833333522081375, 0.0716666653752327, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 9, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [45, 66, 89, 50, 85, 46], [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 9, 4, 2, 9, 6, 4, 9, 8, 8, 5, 0, 4, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [1, 0, 3, 3, 3, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [33, 78, 52, 66, 2, 57, 35, 9, 54, 64], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 1, 1, 0, 0, 1, 1, 1, 1], [3, 4, 3, 4, 9, 7], [4, 0, 2], [67, 2], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 7, 7, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 2, 0, 2, 2], [30, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 1, 7, 7, 5, 2, 3, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(beta, alpha), tf.math.add(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06313564628362656, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [45, 66, 89, 50, 85, 46], [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 9, 4, 2, 9, 6, 4, 9, 8, 8, 5, 0, 4, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [3, 0, 3, 3, 3, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [33, 78, 52, 66, 2, 57, 35, 9, 54, 64], [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 1, 1, 1], [3, 4, 3, 4, 9, 7], [4, 0, 2], [67, 2], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 7, 7, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 2, 0, 2, 2], [30, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 1, 9, 9, 6, 3, 3, 3, 1, 1, 0, 0, 3, 1, 2, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.divide_no_nan(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07198520749807358, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [45, 66, 89, 50, 85, 46], [1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 9, 4, 0, 3, 6, 4, 9, 8, 8, 5, 0, 4, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [3, 0, 3, 3, 3, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [33, 78, 52, 66, 2, 57, 35, 9, 54, 64], [0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1], [3, 4, 3, 4, 9, 7], [4, 0, 2], [67, 2], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 7, 7, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 2, 0, 2, 2], [30, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 3, 3, 2, 1, 1, 5, 2, 2, 0, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, tf.math.pow(sigma, sigma)))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06366398185491562, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 6, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [45, 66, 89, 50, 85, 46], [1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [1, 9, 1, 0, 2, 6, 4, 9, 8, 8, 5, 0, 4, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [3, 0, 3, 3, 3, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [98, 78, 52, 66, 2, 57, 35, 9, 54, 64], [0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1], [3, 4, 3, 4, 9, 7], [4, 0, 2], [67, 2], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 7, 7, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 2, 0, 2, 2], [30, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 6, 6, 4, 2, 2, 5, 2, 2, 0, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, tf.math.pow(sigma, sigma)))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06366398185491562, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [45, 66, 89, 50, 85, 46], [1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 9, 4, 2, 2, 6, 4, 9, 8, 8, 5, 0, 4, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [3, 0, 3, 3, 3, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [33, 51, 52, 66, 2, 57, 35, 9, 54, 64], [0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0], [0, 1, 0, 0, 0, 1, 1, 1, 1], [3, 4, 3, 4, 9, 7], [3, 0, 2], [67, 2], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 7, 7, 9, 3, 0, 1, 3, 2, 2, 5], [0, 1, 0, 2, 0, 2, 2], [30, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 13, 13, 8, 5, 3, 3, 1, 1, 0, 0, 1, 0, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32), grad)))), grad)), tf.math.pow(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302954375263628, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.0956280529499054, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 2, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [45, 66, 89, 50, 85, 46], [0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [6, 9, 1, 9, 4, 6, 4, 2, 6, 8, 5, 0, 4, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [3, 0, 3, 3, 3, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [33, 78, 52, 66, 2, 57, 35, 9, 54, 64], [0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1], [9, 4, 3, 4, 9, 7], [4, 0, 2], [67, 2], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 7, 7, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 2, 0, 2, 2], [30, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 5, 5, 4, 1, 2, 1, 1, 1, 0, 1, 3, 1, 2, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(beta, grad), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, alpha)", "other_info": {"loss": [2.3043295668573145, 2.3083968992955053, 2.314203435687215, 2.3218862022847833, 2.3352191397511115, 5908.946241710321, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08506141602993011, 0.08387266844511032, 0.07224937528371811, 0.07370228320360184, 0.08228767663240433, 0.08506141602993011, 0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9743314470563615, 1.9780773435320174, 1.982828004019601, 1.989499500819615, 2.008590425763811, 2.9486759068604035e+32, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.02199999988079071, 0.02266666665673256, 0.038333334028720856, 0.07566666603088379, 0.09700000286102295, 0.09733333438634872, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [4, 4, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [45, 66, 89, 50, 85, 46], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [6, 9, 1, 9, 4, 6, 4, 2, 5, 8, 5, 0, 4, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [3, 0, 3, 3, 3, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [33, 78, 48, 66, 2, 57, 35, 9, 54, 64], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1], [3, 4, 3, 4, 9, 7], [4, 0, 2], [67, 2], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 7, 7, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 2, 0, 2, 2], [30, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 1, 5, 5, 4, 1, 2, 9, 7, 5, 2, 2, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.pow(tf.math.add(alpha, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)), tf.math.add(sigma, grad))), tf.math.add(sigma, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0956280529499054, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [47, 66, 89, 50, 85, 46], [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 9, 4, 2, 9, 6, 4, 9, 8, 8, 5, 0, 4, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [1, 3, 2, 3, 3, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [33, 22, 52, 66, 2, 57, 35, 9, 54, 64], [0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 1, 0, 0, 1, 1, 1, 1], [3, 4, 3, 4, 9, 7], [4, 0, 2], [67, 2], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 7, 7, 9, 3, 0, 1, 3, 2, 2, 5], [2, 1, 0, 2, 0, 2, 2], [30, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 3, 3, 2, 1, 1, 5, 2, 2, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, tf.math.pow(sigma, sigma)))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.499493444505983, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0400211326777935, 0.08611807972192764, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [6.623010226658413, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.02666666731238365, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [2, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [4, 66, 89, 50, 85, 46], [0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [4, 9, 4, 2, 9, 6, 4, 9, 8, 8, 5, 0, 4, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [3, 0, 3, 3, 3, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [33, 78, 52, 66, 2, 57, 35, 9, 54, 64], [0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 1, 1, 1], [3, 4, 3, 4, 9, 7], [4, 0, 2], [67, 2], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 7, 7, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 2, 0, 2, 2], [30, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 11, 11, 8, 3, 4, 5, 2, 2, 0, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(grad, tf.math.negative(tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.divide_no_nan(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.pow(grad, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, tf.math.pow(sigma, sigma)))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07568352669477463, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 2, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [34, 66, 89, 50, 85, 46], [1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 9, 4, 2, 3, 6, 4, 9, 8, 8, 5, 0, 4, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [3, 0, 0, 3, 3, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [33, 36, 6, 66, 2, 57, 35, 9, 54, 64], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1], [3, 6, 4, 4, 9, 8], [4, 0, 2, 4, 7], [69, 2], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 7, 7, 9, 3, 0, 1, 3, 2, 2, 5], [1, 1, 0, 2, 0, 2, 2], [30, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 13, 13, 8, 5, 4, 10, 9, 6, 3, 2, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.multiply(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32))))), grad)), tf.math.pow(tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.divide_no_nan(sigma, tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), tf.math.add(sigma, grad))), tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)))))))), tf.math.add(sigma, beta))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.305005151015294, 2.325277373491891, 1.46436748278917e+16, 4.53600581195203, 9.443002713654003, 12.6158982254117, 11.198816126552728, 3.7996153729451, 4.0925724000317345, 4.403007934531516, 3.3623462617043036, 3.2339930165917754, 3.6423091120046633, 3.1647223796134045, 3.4138434241555227], "accuracy": [0.08387266844511032, 0.0796460211277008, 0.08875974267721176, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09377889335155487, 0.09959053993225098, 0.09760929644107819, 0.10421344637870789, 0.10038304328918457, 0.09708096832036972, 0.0948355570435524, 0.09774138033390045], "val_loss": [1.9778073855808802, 2.0102483204432895, 2.5163391658238004, 6.430506297520229, 10.147125516619, 11.037860325404576, 5.836066382271903, 3.1575418199811662, 3.987734385899135, 3.2526257378714427, 2.5175184522356306, 3.461233615875244, 2.5713090896606445, 3.050753116607666, 2.8796311787196567], "val_accuracy": [0.023000000044703484, 0.0949999988079071, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.0989999994635582, 0.09866666793823242, 0.10466666519641876, 0.09866666793823242, 0.10466666519641876, 0.09866666793823242, 0.10133333504199982, 0.09866666793823242]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [45, 66, 89, 50, 85, 46], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 9, 1, 2, 9, 1, 4, 2, 8, 8, 5, 0, 4, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [2, 0, 0, 3, 3, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [93, 78, 52, 66, 2, 57, 35, 9, 54, 64], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0], [0, 1, 0, 0, 0, 1, 1, 1, 1], [2, 9, 2, 4, 9, 8], [4, 0, 2], [67, 2], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 7, 7, 9, 3, 0, 1, 3, 2, 2, 5], [3, 1, 0, 2, 0, 2, 2], [30, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 1, 3, 3, 2, 1, 1, 3, 2, 1, 1, 0, 3, 1, 2, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08453308790922165, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}]