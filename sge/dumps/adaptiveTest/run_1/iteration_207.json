[{"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [4, 8, 2, 0, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 2, 8, 4], [2, 1], [64], [0, 1, 0, 1, 0, 1], [3, 1, 9, 1, 2], [1, 0, 2], [15, 52, 13]], "fitness": -0.8479999899864197, "mapping_values": [1, 3, 3, 1, 2, 1, 8, 8, 5, 3, 0, 5, 4, 2, 2, 0, 5, 3, 2, 2], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.add(tf.math.negative(tf.math.negative(grad)), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, beta))), tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.164176069419492, 1.2887069167887388, 0.8664282776534423, 0.7595933212060592, 0.6975706662673204, 0.6544325537827068, 0.6228679811571882, 0.5875948602497271, 0.5753687880042679, 0.5478031871309684, 0.5231675651126676, 0.5144512455193532, 0.49736117987175504, 0.48126808690624845, 0.4477550830776193, 0.4440711083791322, 0.42957896311852156, 0.4272507836026381, 0.4125674752991638, 0.4043189233454101, 0.3930059354877774, 0.391123186426392, 0.3830704117778616, 0.37320662810345523, 0.3637919306455901, 0.3562551609017452, 0.34845676831187605, 0.3389293062979787, 0.3280808935430245, 0.33504447499994966, 0.3297288368572066, 0.31889740275417133, 0.3066699729737604, 0.2982814067925728, 0.28564463611118956, 0.2880159879499155, 0.2881486546472079, 0.2823345072044909, 0.26981707011955824, 0.2629841642333469, 0.2692880713472025, 0.2636855760184041, 0.2559769620292018, 0.24504191800509115, 0.2410672134325536, 0.2333117238503122, 0.23143493123436176, 0.23952040814326786, 0.23892352492376923, 0.218043178142794, 0.22689041687221637, 0.2200562068126016, 0.2131229011200958, 0.216824847693614, 0.20438149162822664, 0.21132449224530242, 0.1992375177832296, 0.1953257898124863, 0.19986185949311014, 0.19895155755024324], "accuracy": [0.2719587981700897, 0.5468233823776245, 0.684982180595398, 0.7141724824905396, 0.7342491149902344, 0.7556465268135071, 0.7648923397064209, 0.7817989587783813, 0.7878747582435608, 0.7961959838867188, 0.8026680946350098, 0.8129705190658569, 0.8131026029586792, 0.8212917447090149, 0.8343679904937744, 0.8364813327789307, 0.8422929644584656, 0.8372738361358643, 0.8445383906364441, 0.848368763923645, 0.8518029451370239, 0.8555012345314026, 0.8560295701026917, 0.8628978729248047, 0.8613129258155823, 0.8697662353515625, 0.8685774803161621, 0.8733324408531189, 0.8726720213890076, 0.8714832663536072, 0.8751816153526306, 0.8819178342819214, 0.883238673210144, 0.889050304889679, 0.8938053250312805, 0.8932769894599915, 0.8869370222091675, 0.8914278149604797, 0.8990886211395264, 0.9029190540313721, 0.9014661312103271, 0.9005415439605713, 0.9029190540313721, 0.9074098467826843, 0.9068815112113953, 0.9089948534965515, 0.9101836085319519, 0.9119006991386414, 0.9071456789970398, 0.9170519113540649, 0.9120327830314636, 0.9178444147109985, 0.9174481630325317, 0.9169198274612427, 0.9218068718910217, 0.9194294214248657, 0.9223352074623108, 0.9211464524269104, 0.9233918786048889, 0.9231277108192444], "val_loss": [1.3005597250802177, 0.6873014995029995, 0.5819283042635236, 0.5443013565880912, 0.5146889686584473, 0.4868171385356358, 0.4695796625954764, 0.44925548349108013, 0.43677311284201487, 0.42658463546207975, 0.41718575784138273, 0.4015194262777056, 0.3883093850953238, 0.3814982601574489, 0.37272188493183683, 0.3691391008240836, 0.3580222725868225, 0.3505015288080488, 0.34856816700526644, 0.34168401786259245, 0.33965395178113666, 0.33704433270863127, 0.33685808522360666, 0.33301395177841187, 0.33124272312436787, 0.32907791648592266, 0.3271427835736956, 0.32345675570624216, 0.324954765183585, 0.3156816363334656, 0.3212460109165737, 0.3178296259471348, 0.31416140283857075, 0.3160115565572466, 0.31398642914635794, 0.3188580444880894, 0.31827183280672344, 0.3116570200238909, 0.31050499847957064, 0.31378292185919626, 0.31007897002356394, 0.3111450416701181, 0.3143767373902457, 0.3167296988623483, 0.30579337051936556, 0.3055700148854937, 0.3196827173233032, 0.31763199397495817, 0.31854437930243357, 0.31864081961768015, 0.31858045714242117, 0.32157341071537565, 0.3270449553217207, 0.31649070978164673, 0.3229410818644932, 0.31269262518201557, 0.32656694310052053, 0.32157059226717266, 0.31751355954578947, 0.32901172978537424], "val_accuracy": [0.5736666917800903, 0.7226666808128357, 0.7440000176429749, 0.7633333206176758, 0.768666684627533, 0.7956666946411133, 0.7973333597183228, 0.8076666593551636, 0.8133333325386047, 0.812666654586792, 0.8220000267028809, 0.8286666870117188, 0.8360000252723694, 0.8486666679382324, 0.8476666808128357, 0.8479999899864197, 0.8556666374206543, 0.8526666760444641, 0.8576666712760925, 0.8610000014305115, 0.8576666712760925, 0.8583333492279053, 0.8616666793823242, 0.8656666874885559, 0.8673333525657654, 0.8653333187103271, 0.8650000095367432, 0.8679999709129333, 0.8669999837875366, 0.8673333525657654, 0.8673333525657654, 0.8653333187103271, 0.8693333268165588, 0.8713333606719971, 0.8736666440963745, 0.8690000176429749, 0.8706666827201843, 0.8713333606719971, 0.8769999742507935, 0.8726666569709778, 0.8776666522026062, 0.8776666522026062, 0.8759999871253967, 0.8756666779518127, 0.8786666393280029, 0.8786666393280029, 0.8759999871253967, 0.8726666569709778, 0.8756666779518127, 0.8796666860580444, 0.8756666779518127, 0.8773333430290222, 0.874666690826416, 0.8773333430290222, 0.8826666474342346, 0.8826666474342346, 0.871666669845581, 0.878333330154419, 0.8773333430290222, 0.8786666393280029]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [4, 8, 2, 0, 0, 9, 3, 9], [1, 5, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 2, 8, 4], [2], [64], [0, 1, 0, 0, 1, 1], [3, 1, 9, 1, 2], [1, 0, 2], [15, 52, 13]], "fitness": -0.8425714373588562, "mapping_values": [1, 3, 3, 1, 2, 1, 7, 7, 4, 3, 0, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.add(tf.math.negative(grad), grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.164176116561562, 1.2887308829338668, 0.8661275236141476, 0.7604436961541071, 0.6983755695553756, 0.6554918343427868, 0.6233784640784812, 0.5890536337339048, 0.5770647358491263, 0.5474891690388489, 0.5201691170496758, 0.5132829061572924, 0.49388129408679793, 0.48002306286212615, 0.44541213534779284, 0.44156811960369224, 0.42882305669856974, 0.4254497104017978, 0.4118949332021215, 0.40332869596296156, 0.39215650785285816, 0.39124860697103736, 0.3799283249526842, 0.37273434795692156, 0.3609288276824276, 0.3571088431832844, 0.34880542080038024, 0.3403700242472709, 0.32905235238252234, 0.3306629683489277, 0.3211481090486955, 0.31524690223990365, 0.3031923947569213, 0.29867465234923873, 0.2812157109696647, 0.28886229955540704, 0.28726072373832334, 0.2803390103599824, 0.2678036792064781, 0.2634206398083565], "accuracy": [0.2719587981700897, 0.54655921459198, 0.6844538450241089, 0.7123233675956726, 0.7321357727050781, 0.7548540234565735, 0.767401933670044, 0.7808743715286255, 0.7839123010635376, 0.7969884872436523, 0.8050455451011658, 0.8107251524925232, 0.81548011302948, 0.8186501264572144, 0.8318583965301514, 0.8338396549224854, 0.8442742228507996, 0.8403117060661316, 0.8444063067436218, 0.8485008478164673, 0.8527275323867798, 0.8536521196365356, 0.858671247959137, 0.8615770936012268, 0.8643507957458496, 0.8671245574951172, 0.8705587387084961, 0.8735966086387634, 0.8739928603172302, 0.8774270415306091, 0.8802007436752319, 0.8848236799240112, 0.8879936337471008, 0.8894465565681458, 0.8949940800666809, 0.8911636471748352, 0.8885219693183899, 0.894069492816925, 0.9005415439605713, 0.9012019634246826], "val_loss": [1.3005592482430595, 0.6871885742459979, 0.581897394997733, 0.5454540933881488, 0.5138898747307914, 0.48927550656454905, 0.467274580683027, 0.45051869324275423, 0.4399464300700596, 0.4254173721585955, 0.41713795491627287, 0.40173570598874775, 0.38967874220439364, 0.3831529361861093, 0.37235759837286814, 0.37041949374335154, 0.3613824248313904, 0.351520231791905, 0.3504583580153329, 0.3446930817195347, 0.33794876507350374, 0.3342796393803188, 0.33314392396381926, 0.33126107284000944, 0.32824796438217163, 0.3310387304850987, 0.32702083247048513, 0.32386858974184307, 0.3249315449169704, 0.3194108860833304, 0.3188454168183463, 0.31815522057669504, 0.3147197791508266, 0.3139847346714565, 0.3110471027238028, 0.31414410046168734, 0.31609632287706646, 0.3077757017953055, 0.3072957311357771, 0.3119358846119472], "val_accuracy": [0.5736666917800903, 0.7229999899864197, 0.7450000047683716, 0.7596666812896729, 0.7726666927337646, 0.7929999828338623, 0.7976666688919067, 0.809333324432373, 0.8140000104904175, 0.8130000233650208, 0.8240000009536743, 0.8333333134651184, 0.8370000123977661, 0.8473333120346069, 0.847000002861023, 0.8429999947547913, 0.8529999852180481, 0.8533333539962769, 0.8519999980926514, 0.8610000014305115, 0.8600000143051147, 0.8613333106040955, 0.8656666874885559, 0.8676666617393494, 0.8669999837875366, 0.8619999885559082, 0.8633333444595337, 0.8659999966621399, 0.8690000176429749, 0.8653333187103271, 0.8673333525657654, 0.8673333525657654, 0.8700000047683716, 0.871666669845581, 0.8743333220481873, 0.8686666488647461, 0.8686666488647461, 0.871666669845581, 0.8743333220481873, 0.8726666569709778]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 2, 2, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 16, 25], [1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [4, 8, 2, 9, 0, 9, 3, 9], [1, 5, 0, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 2, 8, 4], [2], [64], [0, 0, 0, 0, 1, 1, 0, 1, 1], [3, 1, 9, 1, 2], [2, 0, 2, 3], [15, 52, 13]], "fitness": -0.593999981880188, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 5, 4, 2], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(grad, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.subtract(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, sigma))", "other_info": {"loss": [2.0582279724420385, 2.9950284456863474, NaN, NaN, NaN, NaN], "accuracy": [0.31118741631507874, 0.2751287817955017, 0.09470347315073013, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.7082760674612862, 18.39676066807338, NaN, NaN, NaN, NaN], "val_accuracy": [0.5596666932106018, 0.11566666513681412, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [2, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [49, 32, 5, 49, 25], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [4, 8, 2, 0, 0, 9, 3, 9], [3, 0, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 55], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 7, 8, 4], [2, 4], [64], [0, 1, 1, 0, 1, 1], [3, 1, 4, 1, 2, 1, 4, 7, 6, 4, 4, 2, 6, 5, 4, 9], [0, 0, 2], [38, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 7, 7, 4, 3, 1, 1, 0, 0, 0, 0, 3, 1, 2, 2], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(tf.math.negative(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.302059053823602, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [2, 0, 2, 2, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [6, 2, 2, 0, 3, 9, 3, 9], [0, 5, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 2, 8, 4], [2], [64], [1, 1, 1, 1, 0, 1], [1, 1, 9, 5, 2], [2, 0, 2, 3], [38, 57, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 8, 8, 4, 4, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), grad)), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0952318087220192, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [0, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [4, 8, 2, 8, 0, 9, 3, 9], [5, 5, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 0, 1, 0, 1, 0, 1, 1], [0, 0, 1, 1, 0], [5, 7, 8, 4], [2], [64], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1], [3, 1, 4, 1, 2, 1, 4, 7, 6, 4, 4, 2, 6, 5, 4, 9], [1, 0, 2, 3, 0, 0, 0], [15, 52, 13, 51]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 5, 7, 7, 4, 3, 0, 4, 3, 2, 1, 0, 13, 6, 7, 4], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.square(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(tf.math.sqrt(grad), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, beta))))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.math.pow(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), beta), tf.math.subtract(tf.math.add(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [4, 8, 2, 0, 0, 9, 3, 9], [0, 0, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 55, 93], [0, 0, 1, 0, 1, 0, 1, 1], [0, 0, 1, 1, 0], [7, 7, 8, 4], [4, 0], [64], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1], [3, 1, 4, 2, 2, 2, 4, 7, 6, 4, 4, 2, 6, 5, 4, 9, 8, 5, 9], [1, 0, 2, 1, 0, 0, 0, 0, 0, 2, 2, 3, 1, 0], [38, 24, 13, 35, 3, 8, 95, 17]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 8, 8, 6, 2, 3, 5, 3, 2, 1, 0, 32, 19, 13, 8], "tree_depth": 30, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.negative(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, grad))), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.pow(beta, tf.math.add(tf.math.add(alpha, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.pow(tf.math.add(tf.math.divide_no_nan(tf.math.pow(tf.math.pow(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.square(tf.math.pow(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))))), beta), tf.math.square(beta)), sigma), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), alpha))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [1, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [2, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [4, 8, 2, 9, 0, 9, 3, 9], [3, 5, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 2, 8, 4], [2, 5], [64], [0, 1, 0, 0, 1, 1], [3, 1, 9, 1, 2, 9], [1, 0, 2, 3], [12, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 11, 8, 4, 4, 4, 2, 2, 0, 5, 4, 2, 2, 0, 5, 3, 2, 2], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))))), tf.math.pow(tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(grad, tf.math.sqrt(tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, beta))), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1], [4, 8, 2, 0, 0, 9, 3, 9], [3, 0, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 2, 8, 4], [2, 1], [64], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1], [7, 1, 2, 1, 2, 6], [1, 1, 2, 2, 2, 1, 2], [38, 57, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 8, 8, 5, 3, 1, 1, 0, 0, 0, 0, 13, 6, 7, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(grad, tf.math.sqrt(tf.math.add(tf.math.negative(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.subtract(alpha, tf.math.add(tf.math.subtract(tf.math.add(alpha, beta), tf.math.divide_no_nan(beta, beta)), alpha)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 2, 2, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1], [8, 2, 0, 0, 3, 9, 3, 9], [2, 5, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 2, 8, 4], [2], [64], [0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 1, 8, 5, 2], [2, 0, 2, 3], [38, 21, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 6, 4, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(tf.math.sqrt(tf.math.square(beta)), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302059053823602, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 3, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [90, 32, 5, 49, 25], [0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [4, 8, 2, 0, 0, 9, 3, 9], [1, 0, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 2, 8, 4], [6, 0], [64], [0, 1, 0, 1, 0, 1], [3, 1, 9, 1, 2], [2, 1, 2], [38, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.math.subtract(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3021902167927775, 2.303187860048773, 2.3046293196314753, 2.3062346577408164, 2.3097637024034112, 2.320141249769919, 2.340031127510227, 2.3805128015846453, 12060479888.841345, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08955223858356476, 0.08796724677085876, 0.08796724677085876, 0.08440100401639938, 0.08374059200286865, 0.08519349992275238, 0.08545766770839691, 0.08638224750757217, 0.09602430462837219, 0.10962884873151779, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9712281908307756, 1.9718748501368932, 1.9730918748038155, 1.9750773566109794, 1.9776759147644043, 1.98158632005964, 1.9927377700805664, 2.0437893867492676, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.03733333200216293, 0.03099999949336052, 0.022333333268761635, 0.01966666616499424, 0.025333333760499954, 0.05833333358168602, 0.08799999952316284, 0.10066666454076767, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 16, 25], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [6, 2, 2, 0, 3, 9, 3, 9], [1, 5, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 2, 8, 4], [2], [64], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [3, 1, 9, 1, 4, 2, 1, 9], [2, 3, 2, 3, 3], [15, 1, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 9, 8, 3, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 13, 8, 5, 2], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, alpha), tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)), tf.math.square(tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.subtract(beta, tf.math.pow(tf.math.add(sigma, beta), tf.math.subtract(sigma, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [19, 32, 5, 49, 25], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [4, 8, 2, 0, 0, 9, 3, 9], [1, 5, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 2, 8, 4], [2], [64], [0, 1, 0, 0, 1, 1, 1], [3, 1, 2, 1, 2], [1, 0, 2, 1], [15, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 7, 7, 4, 3, 0, 1, 0, 0, 0, 0, 7, 3, 4, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.negative(grad), grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.math.add(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), beta), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1320829540491104, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 1, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [60, 32, 5, 49, 25], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [4, 8, 2, 0, 0, 9, 3, 9], [1, 4, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0, 0, 0, 1], [7, 2, 8, 4, 8], [2], [64, 10], [1, 1, 0, 0, 1, 1, 1], [4, 7, 8, 1, 2], [1, 1, 2], [98, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07185312360525131, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [2, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [25, 32, 5, 49, 25], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [4, 8, 2, 0, 0, 9, 3, 9], [3, 0, 0, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 55], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 2, 8, 4], [2, 0], [64], [0, 1, 1, 0, 1, 1], [3, 9, 3, 1, 2, 8, 1, 3, 3, 3, 4, 1, 3, 9, 6, 6, 8, 8, 0, 0, 2], [1, 2, 2], [15, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 7, 7, 4, 3, 2, 1, 0, 0, 0, 0, 3, 1, 2, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.negative(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [4, 8, 2, 0, 0, 9, 3, 9], [3, 1, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 55], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 2, 8, 4], [2], [64], [0, 1, 0, 1, 1, 1], [3, 1, 9, 1, 2], [1, 0, 2], [38, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 4, 8, 8, 6, 2, 1, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.square(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.negative(tf.math.negative(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))), grad))), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 2, 1, 0, 2, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [6, 2, 2, 0, 3, 9, 3, 9], [1, 5, 0, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 2, 8, 4], [2], [64], [0, 1, 0, 0, 1, 1], [3, 1, 5, 1, 2], [1, 0, 2], [15, 52, 13]], "fitness": -0.06457142531871796, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 3, 3, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.math.square(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), beta))", "other_info": {"loss": [2.302081509729843, 2.3023610676536315, 2.3021760450425384, 2.300940602100631, 2.299826948539755, 2.301130739264185, 2.3021818780943137, 2.30017781153709, 2.29951333700469, 2.2999002066239265, 2.3003794386433793, 2.2999821332121066, 2.3000208832379645, 2.2993553799566357, 2.3013748974926704, 2.3011188874265476, 2.2996265074800837, 2.2992705407002187, 2.2995742331280478, 2.2996841862280104, 2.2994909341923235, 2.298806329932998, 2.298829529814795, 2.2980946659049843, 2.299393088700135, 2.2993731974862617, 2.298951265535114, 2.2997188895307024, 2.298593133904474, 2.298706504095972], "accuracy": [0.09008057415485382, 0.08625016361474991, 0.09060890227556229, 0.09311848133802414, 0.09232597798109055, 0.09589222073554993, 0.0956280529499054, 0.09774138033390045, 0.09972262382507324, 0.09602430462837219, 0.09259014576673508, 0.09615638852119446, 0.0956280529499054, 0.09985470771789551, 0.09800554811954498, 0.09800554811954498, 0.1026284471154213, 0.10408136248588562, 0.10157178342342377, 0.10447761416435242, 0.09985470771789551, 0.10447761416435242, 0.10896842926740646, 0.10777968913316727, 0.11002509295940399, 0.10606260597705841, 0.11293092370033264, 0.10593052208423615, 0.10857218503952026, 0.10527011007070541], "val_loss": [1.9709270341055733, 1.9708675656999861, 1.9706886155264718, 1.9704209055219377, 1.970127718789237, 1.9698893002101354, 1.9696954318455286, 1.969583443232945, 1.9695772443498885, 1.9696759496416365, 1.9697818074907576, 1.9698756762913294, 1.9698930467878069, 1.9698143686567033, 1.9697249276297433, 1.9696506772722517, 1.969569274357387, 1.969473430088588, 1.969393253326416, 1.969352858407157, 1.9693102836608887, 1.9692628043038505, 1.9692332404000419, 1.96922390801566, 1.9692231587001257, 1.9692462512425013, 1.9693079675946916, 1.9694305147443498, 1.9696001325334822, 1.9698094640459334], "val_accuracy": [0.03766666725277901, 0.038333334028720856, 0.0403333343565464, 0.043666668236255646, 0.04500000178813934, 0.05000000074505806, 0.05400000140070915, 0.05533333495259285, 0.055666666477918625, 0.05833333358168602, 0.06066666543483734, 0.06566666811704636, 0.0689999982714653, 0.07266666740179062, 0.07766667008399963, 0.0793333351612091, 0.0820000022649765, 0.08900000154972076, 0.09133332967758179, 0.09399999678134918, 0.09966666996479034, 0.10266666859388351, 0.10400000214576721, 0.1080000028014183, 0.10866666585206985, 0.10833333432674408, 0.10866666585206985, 0.10533333569765091, 0.10333333164453506, 0.10300000011920929]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [4, 8, 2, 0, 0, 9, 3, 9], [5, 0, 0, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85, 90], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 2, 8, 4], [2], [64], [0, 1, 1, 1, 0, 1], [5, 1, 9, 1, 2], [1, 0, 2], [15, 52, 13]], "fitness": -0.04228571429848671, "mapping_values": [1, 3, 3, 1, 2, 1, 7, 7, 4, 3, 2, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(tf.math.negative(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.square(alpha)", "other_info": {"loss": [2.302081127082352, 2.3023879699671763, 2.30233172834384, 2.3013433361758864, 2.3005286333756505, 2.3021377833165735, 2.303671226682853, 2.301724539173435, 2.300987962057184, 2.30108888860014], "accuracy": [0.09008057415485382, 0.08625016361474991, 0.08968432247638702, 0.09232597798109055, 0.08994849026203156, 0.09206181764602661, 0.08902391046285629, 0.09206181764602661, 0.09298639744520187, 0.08994849026203156], "val_loss": [1.9709339823041643, 1.9709288052150182, 1.9709230150495256, 1.9709185191563197, 1.9709138870239258, 1.9709083012172155, 1.9709015573774065, 1.9708967890058244, 1.9708929743085588, 1.9708892277308874], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03799999877810478, 0.03799999877810478, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856, 0.038333334028720856]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [4, 8, 2, 0, 0, 9, 3, 9], [5, 5, 0, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 2, 8, 4], [2], [64], [0, 1, 1, 1, 0, 1], [3, 1, 1, 1, 2], [1, 1, 2], [38, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 17, 17, 10, 7, 4, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 1, 2, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.square(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, alpha)", "other_info": {"loss": [2.302098252533638, 2.3027555958910737, 2.3035041080757517, 2.3033888108852185, 2.303445238872463, 2.305786440794762], "accuracy": [0.09008057415485382, 0.08558975160121918, 0.0874389111995697, 0.08651433140039444, 0.08228767663240433, 0.08109892904758453], "val_loss": [1.9710756029401506, 1.9717590468270438, 1.9726155144827706, 1.9734768867492676, 1.9742966379438127, 1.9750103269304549], "val_accuracy": [0.03799999877810478, 0.035999998450279236, 0.032999999821186066, 0.032999999821186066, 0.033666666597127914, 0.03200000151991844]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 1, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [56, 32, 5, 49, 25], [1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [4, 8, 2, 0, 0, 9, 3, 9], [5, 5, 0, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 2, 8, 4], [2], [64], [0, 1, 0, 1, 0, 1], [3, 1, 9, 1, 2], [1, 0, 2], [15, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 17, 17, 10, 7, 3, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.square(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302084100370819, 2.302397722108977, 2.3023500411013855, 2.3013676501158096, 2.30055815171194, 2.3021768605657114], "accuracy": [0.09008057415485382, 0.08625016361474991, 0.08968432247638702, 0.09219389408826828, 0.09008057415485382, 0.09232597798109055], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}]