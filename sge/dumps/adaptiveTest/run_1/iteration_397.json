[{"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 6, 1, 0, 2, 2, 2, 9, 2, 4, 7, 8, 7, 4, 5, 9, 8, 2, 8, 8, 5, 7, 6, 1, 6, 1, 6], [1, 3, 3, 3, 3, 3, 3, 2, 1, 4, 4, 3, 1, 4, 1, 3], [85, 77, 30, 73, 40], [0, 0, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [8, 1, 8, 4], [4, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8514285683631897, "mapping_values": [1, 4, 4, 2, 2, 1, 26, 26, 16, 10, 2, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, tf.math.negative(alpha)), tf.math.add(tf.math.add(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad)))), tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(grad, tf.math.pow(grad, tf.math.add(beta, beta)))))), tf.math.square(tf.math.add(beta, alpha))), tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.0827961566032216, 1.1816606212285814, 0.8430009084197556, 0.7346169735383615, 0.6692979934271914, 0.6225310794004375, 0.5722399402083564, 0.5429376708659766, 0.5187736737131364, 0.49252495941169794, 0.4745994147024985, 0.45511124863789587, 0.44231318483940285, 0.4131600560804699, 0.41238778218648625, 0.3940376701009839, 0.38938639676015074, 0.37238443956682477, 0.35575922265532717, 0.34206779194293857, 0.33153915905980796, 0.33211956498424816, 0.3124051189315538, 0.3145179807974473, 0.305362190045008, 0.30313080079630145, 0.29911023397660447, 0.2953948452881755, 0.29148378547439957, 0.277942882796887, 0.27262263195059006, 0.2531289888363567, 0.2476590891886444, 0.24319432120218631, 0.24267329376969812, 0.23520062892759133, 0.2276484447168148, 0.22300037509414733, 0.21953520967841952, 0.2124915173548623, 0.20750909550488192, 0.20427713666286892, 0.1960859970429381, 0.19705732089810918, 0.19975219679947906, 0.19577618478831205, 0.18463077537568806, 0.18179776255504376, 0.17950174842669964], "accuracy": [0.310130774974823, 0.5908070206642151, 0.6864351034164429, 0.7232862114906311, 0.7420420050621033, 0.7670056819915771, 0.7877426743507385, 0.7950072884559631, 0.8017435073852539, 0.8182538747787476, 0.8253863453865051, 0.8264430165290833, 0.8335754871368408, 0.8502179384231567, 0.8492933511734009, 0.8499537706375122, 0.8520671129226685, 0.8651432991027832, 0.8646149635314941, 0.8734645247459412, 0.878351628780365, 0.8745211958885193, 0.8808611631393433, 0.8817857503890991, 0.8873332738876343, 0.8860124349594116, 0.8858803510665894, 0.8907673954963684, 0.8881257176399231, 0.8947299122810364, 0.8965790271759033, 0.901862382888794, 0.9068815112113953, 0.9055606722831726, 0.9054285883903503, 0.9099194407463074, 0.906749427318573, 0.9146744012832642, 0.9163914918899536, 0.9207502603530884, 0.917580246925354, 0.9203540086746216, 0.9231277108192444, 0.9218068718910217, 0.919561505317688, 0.9206181764602661, 0.9256373047828674, 0.9276185631752014, 0.9306564331054688], "val_loss": [1.009554726736886, 0.6690147774560111, 0.5755295072283063, 0.5329546247209821, 0.49845116479056223, 0.4602305718830654, 0.44413559777396067, 0.41988879442214966, 0.4040854573249817, 0.38785266876220703, 0.38134666851588656, 0.37392706530434744, 0.3590578947748457, 0.350298319544111, 0.35375804560525076, 0.3408902372632708, 0.33477709123066496, 0.3306755082947867, 0.3265651890209743, 0.3297040973390852, 0.3266060096876962, 0.3284153001649039, 0.31943877254213604, 0.32459803989955355, 0.3152132289750235, 0.31290881974356516, 0.30844721623829435, 0.314338173185076, 0.31414006437574116, 0.32318295751299175, 0.30801171915871756, 0.30796005044664654, 0.3129127451351711, 0.3256622127124241, 0.32140278816223145, 0.31290353196007864, 0.3140403628349304, 0.3199562685830252, 0.32140577690941946, 0.3304921729224069, 0.32241209915706087, 0.3102114626339504, 0.33087624822344097, 0.3202229653085981, 0.3321490117481777, 0.3320305858339582, 0.35544208117893766, 0.3327435084751674, 0.33312065260750906], "val_accuracy": [0.5996666550636292, 0.7300000190734863, 0.7440000176429749, 0.7639999985694885, 0.7826666831970215, 0.7973333597183228, 0.8103333115577698, 0.8233333230018616, 0.8323333263397217, 0.8330000042915344, 0.840666651725769, 0.8376666903495789, 0.8506666421890259, 0.859000027179718, 0.8543333411216736, 0.8583333492279053, 0.8646666407585144, 0.8663333058357239, 0.8663333058357239, 0.8713333606719971, 0.8663333058357239, 0.8690000176429749, 0.8726666569709778, 0.8656666874885559, 0.871666669845581, 0.8693333268165588, 0.871999979019165, 0.875333309173584, 0.8713333606719971, 0.8700000047683716, 0.874666690826416, 0.8773333430290222, 0.8759999871253967, 0.8650000095367432, 0.8766666650772095, 0.8823333382606506, 0.8786666393280029, 0.8830000162124634, 0.8816666603088379, 0.8816666603088379, 0.8793333172798157, 0.8836666941642761, 0.8830000162124634, 0.8886666893959045, 0.878000020980835, 0.8773333430290222, 0.878000020980835, 0.8796666860580444, 0.8843333125114441]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [4, 6, 3, 3, 0, 2, 3, 9, 8, 5, 7, 6, 7, 9, 2, 9, 8, 2, 8, 6, 5, 8, 9], [1, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0], [85, 80, 63], [0, 1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [0, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8442857265472412, "mapping_values": [1, 4, 4, 2, 2, 1, 28, 28, 19, 9, 3, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.square(alpha)))))), tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(grad))))))), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, grad))))), tf.math.add(beta, grad)), tf.math.add(beta, beta))), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.082796889556917, 1.1816369620816205, 0.8431088675550104, 0.7355314164964074, 0.6693627736146786, 0.6199737478949532, 0.5697419551763205, 0.5409514704605277, 0.516732193999019, 0.4918243820562402, 0.4732931631431131, 0.45691886581229557, 0.4426797593644487, 0.4154562979775208, 0.41357827408202585, 0.3979357673845995, 0.38946062712983653, 0.3733211295589905, 0.3557714524640383, 0.34232429272982706, 0.333876984899763, 0.33466592683783924, 0.31758610398982573, 0.3055525415443773, 0.3010921875688268, 0.2979241929561581, 0.2914034329180578, 0.288952197070135], "accuracy": [0.310130774974823, 0.5909391045570374, 0.6859067678451538, 0.7226257920265198, 0.7470611333847046, 0.7689869403839111, 0.7887993454933167, 0.7975168228149414, 0.8024039268493652, 0.8168009519577026, 0.8240655064582825, 0.829216718673706, 0.834632158279419, 0.847840428352356, 0.8467837572097778, 0.8511425256729126, 0.8499537706375122, 0.86118084192276, 0.8693699836730957, 0.8721436858177185, 0.8754457831382751, 0.8751816153526306, 0.8782195448875427, 0.8816536664962769, 0.8926165699958801, 0.8854840993881226, 0.8898428082466125, 0.8882578015327454], "val_loss": [1.0094941343579973, 0.668602739061628, 0.5772942474910191, 0.5332733392715454, 0.4991156373705183, 0.4617962496621268, 0.44288626738957, 0.42003575393131803, 0.4021654725074768, 0.3861298475946699, 0.38179964678628103, 0.37225583621433805, 0.35774911301476614, 0.35156484161104473, 0.3567931226321629, 0.34816661902836393, 0.33123054674693514, 0.332948522908347, 0.326711254460471, 0.32867538928985596, 0.3295979840414865, 0.32938757964542936, 0.31749993562698364, 0.32489738294056486, 0.3131821240697588, 0.31011771304266794, 0.30925544670649935, 0.3146739346640451], "val_accuracy": [0.5996666550636292, 0.7310000061988831, 0.7436666488647461, 0.7666666507720947, 0.784333348274231, 0.7933333516120911, 0.8130000233650208, 0.8223333358764648, 0.8346666693687439, 0.8353333473205566, 0.8370000123977661, 0.8389999866485596, 0.847000002861023, 0.8569999933242798, 0.8516666889190674, 0.8586666584014893, 0.8666666746139526, 0.8643333315849304, 0.8666666746139526, 0.8676666617393494, 0.8643333315849304, 0.8633333444595337, 0.8730000257492065, 0.8650000095367432, 0.871999979019165, 0.871666669845581, 0.8686666488647461, 0.8726666569709778]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [4, 6, 9, 3, 2, 2, 3, 9, 8, 1, 7, 7, 4, 9, 2, 4, 2], [1, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0], [85, 80, 63], [0, 1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8431428670883179, "mapping_values": [1, 4, 4, 2, 2, 1, 5, 5, 3, 2, 1, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.082795805777415, 1.1817684346154822, 0.8437798998658494, 0.7344526884940322, 0.6693858890532818, 0.620613681319021, 0.5704440691247199, 0.5411422069298514, 0.5163525583060379, 0.49278591683260153, 0.47383943570130976, 0.45508542510071576, 0.4401662834387225, 0.4148820116928996, 0.4110378880093614, 0.39350913662826065, 0.38806187118899477, 0.3713394543513992, 0.35637001042762184, 0.345896708498447, 0.3318939391120613, 0.3327527812459072, 0.3136680225229471, 0.30748181412516334, 0.2990870778102601], "accuracy": [0.310130774974823, 0.5905428528785706, 0.6859067678451538, 0.7238145470619202, 0.7457403540611267, 0.7683265209197998, 0.7877426743507385, 0.7938185334205627, 0.8033285140991211, 0.8169330358505249, 0.8227446675300598, 0.8284242749214172, 0.8341038227081299, 0.8469158411026001, 0.846387505531311, 0.8537842035293579, 0.8565579056739807, 0.8642187118530273, 0.868049144744873, 0.8720116019248962, 0.8782195448875427, 0.8765024542808533, 0.8811253309249878, 0.8870691061019897, 0.8942015767097473], "val_loss": [1.0094973700387138, 0.6692914622170585, 0.5764492409569877, 0.5318875483104161, 0.5000429494040353, 0.4613604886191232, 0.44295448916299, 0.41927075386047363, 0.4027959278651646, 0.38897491352898733, 0.3814579503876822, 0.37225080387932913, 0.35922696760722567, 0.3508718354361398, 0.3539560096604483, 0.3440818616322109, 0.33418428897857666, 0.33154164041791645, 0.32589044741221834, 0.3245653084346226, 0.3331863454410008, 0.32822087832859587, 0.32196580512183054, 0.32543955530439106, 0.31743175642830984], "val_accuracy": [0.5996666550636292, 0.731333315372467, 0.7456666827201843, 0.765999972820282, 0.7863333225250244, 0.7933333516120911, 0.8100000023841858, 0.824999988079071, 0.8356666564941406, 0.8326666951179504, 0.8370000123977661, 0.8383333086967468, 0.8493333458900452, 0.8546666502952576, 0.8573333621025085, 0.8576666712760925, 0.8646666407585144, 0.862666666507721, 0.8693333268165588, 0.8730000257492065, 0.8663333058357239, 0.8659999966621399, 0.8726666569709778, 0.8673333525657654, 0.8703333139419556]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1], [4, 6, 2, 0, 2, 2, 3, 9, 9, 6, 7, 0, 7, 9, 2, 9, 6, 2, 0, 0, 0, 8, 5, 7, 8, 3, 1, 4, 6, 4, 2, 8], [1, 3, 3, 2, 3, 5, 3, 2, 3, 3, 4, 0, 5, 3, 1, 0, 3, 3], [85, 80, 93, 73, 13, 25], [0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8414285778999329, "mapping_values": [1, 4, 4, 2, 2, 1, 14, 14, 9, 5, 2, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(grad, grad)), beta)), tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.0827959339301567, 1.1817120419926632, 0.8434156681001462, 0.7351971658276624, 0.6694606558568977, 0.6217625539820224, 0.5717833852881312, 0.5420208406202734, 0.5182196734336074, 0.4919482004160674, 0.4755635296097049, 0.45802564139001484, 0.44448412953823185, 0.4168598216719332, 0.4132125662215838, 0.3991386562274857, 0.38937976176570893, 0.3724327904988179, 0.36069453303068544, 0.342069719552112, 0.33327864554296505, 0.33282526121824774, 0.3145747009151569, 0.3127833599537875, 0.302804186272977, 0.3047372865213962, 0.2975506615196284, 0.29198000258175044, 0.29213696764271574, 0.2797613521104696, 0.2732861398186241, 0.2606716596092987, 0.25053960584835244, 0.24602996572810804], "accuracy": [0.310130774974823, 0.5905428528785706, 0.6868313550949097, 0.7246070504188538, 0.7465327978134155, 0.7664773464202881, 0.7887993454933167, 0.7961959838867188, 0.8034605979919434, 0.8181217908859253, 0.8241975903511047, 0.8271034359931946, 0.8321225643157959, 0.8457271456718445, 0.8479725122451782, 0.8488970994949341, 0.8531237840652466, 0.8650112152099609, 0.8651432991027832, 0.8714832663536072, 0.8782195448875427, 0.8739928603172302, 0.8803328275680542, 0.8809932470321655, 0.8898428082466125, 0.8819178342819214, 0.8897107243537903, 0.8901069760322571, 0.8878615498542786, 0.8953903317451477, 0.8956544995307922, 0.8996169567108154, 0.9046360850334167, 0.9055606722831726], "val_loss": [1.0095030239650182, 0.6693483761378697, 0.5762208189283099, 0.532680800982884, 0.4995570182800293, 0.46240714618137907, 0.4444136619567871, 0.42100226879119873, 0.4026236704417637, 0.3882653883525303, 0.3843620164053781, 0.3733571342059544, 0.3615113241331918, 0.35640684195927214, 0.3579298768724714, 0.34630777154650005, 0.3346316048077175, 0.3315637537411281, 0.32913180759974886, 0.3313068577221462, 0.32871525628226145, 0.3296665634427752, 0.3157612000192915, 0.3246296899659293, 0.31583323648997713, 0.31383479493004934, 0.3145192861557007, 0.3090369275638035, 0.3095507196017674, 0.3220457775252206, 0.3110165936606271, 0.31186785868235994, 0.31329078333718435, 0.3247163806642805], "val_accuracy": [0.5996666550636292, 0.7296666502952576, 0.7459999918937683, 0.7643333077430725, 0.7836666703224182, 0.7926666736602783, 0.8096666932106018, 0.8246666789054871, 0.8356666564941406, 0.8303333520889282, 0.8373333215713501, 0.8366666436195374, 0.8483333587646484, 0.8533333539962769, 0.8463333249092102, 0.8560000061988831, 0.862666666507721, 0.8640000224113464, 0.8653333187103271, 0.8696666955947876, 0.8663333058357239, 0.8646666407585144, 0.8723333477973938, 0.8656666874885559, 0.8706666827201843, 0.8733333349227905, 0.8669999837875366, 0.875333309173584, 0.8769999742507935, 0.871666669845581, 0.8733333349227905, 0.875, 0.8766666650772095, 0.8679999709129333]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [4, 6, 9, 3, 2, 2, 3, 9, 8, 1, 7, 7, 4, 9, 2, 4, 2], [1, 0, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0], [85, 80, 30, 73, 40], [0, 0, 1, 0, 0, 0, 1, 1], [1, 1, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8391428589820862, "mapping_values": [1, 4, 4, 2, 2, 1, 5, 5, 3, 2, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)))), tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.081897018686687, 1.1921145586510218, 0.8508063717729868, 0.7372559990629056, 0.6770909072432961, 0.6252635479949611, 0.578842964650712, 0.5444295710859801, 0.5204967986661934, 0.49969257938076145, 0.480087912530632, 0.4623075041237477, 0.44472712427948474, 0.4218733021139453, 0.41677622624423605, 0.4051028202277889, 0.39692117941220517, 0.38072457918637714, 0.36127226768924325, 0.34684715328388493, 0.3345003660525691, 0.3409582042399651, 0.3156144854698388, 0.3159191912356747, 0.3127389028442062, 0.30598336705017115, 0.30025641913616175, 0.2959839755147912, 0.29140319112600227, 0.27824268284695514, 0.2710485083748872, 0.2570201634864734, 0.2508756332094517, 0.24365396186927873, 0.24308583660368843, 0.23284552178331228, 0.23482375710379919, 0.22999631435863882, 0.2259940016267322, 0.22089250086596487, 0.21867922413712873, 0.20930271432651992, 0.19881429282815277, 0.1975690412534746, 0.197154894268445, 0.18981456885311376, 0.18930276432813292, 0.18262935463172286, 0.1761994868371276], "accuracy": [0.310130774974823, 0.5894861817359924, 0.6873596906661987, 0.720380425453186, 0.7400607466697693, 0.7607977986335754, 0.7812706232070923, 0.7960638999938965, 0.7996301651000977, 0.8144234418869019, 0.8203672170639038, 0.8228767514228821, 0.8327829837799072, 0.8426892161369324, 0.8471800088882446, 0.8520671129226685, 0.8527275323867798, 0.8588033318519592, 0.8648791313171387, 0.8726720213890076, 0.8757099509239197, 0.8729361891746521, 0.8815215826034546, 0.8820499181747437, 0.8819178342819214, 0.8844274282455444, 0.8853520154953003, 0.8894465565681458, 0.8883898854255676, 0.8969752788543701, 0.8972394466400146, 0.9043719172477722, 0.9055606722831726, 0.9082023501396179, 0.9088627696037292, 0.9062210917472839, 0.9108440279960632, 0.9076740145683289, 0.9093911051750183, 0.9124290347099304, 0.917580246925354, 0.9157310724258423, 0.9224672913551331, 0.9251089692115784, 0.9218068718910217, 0.9240522980690002, 0.923920214176178, 0.9262977242469788, 0.9332981109619141], "val_loss": [1.0009329319000244, 0.6799973930631366, 0.5824739762714931, 0.5373141595295498, 0.502375773021153, 0.46482389313834055, 0.4481003114155361, 0.4215357303619385, 0.40692862442561556, 0.3880402445793152, 0.3853779946054731, 0.38067595447812763, 0.3650569660323007, 0.3547970397131784, 0.36788753952298847, 0.3488877160208566, 0.33564023460660664, 0.32893299204962595, 0.3294426373073033, 0.3264122860772269, 0.3307288203920637, 0.3306355561528887, 0.3215171183858599, 0.32564341170447214, 0.31681132316589355, 0.3206712603569031, 0.31217895235334125, 0.31054053136280607, 0.3144021545137678, 0.320915162563324, 0.3066267286028181, 0.3114861675671169, 0.311139634677342, 0.3200508441243853, 0.30944645404815674, 0.3134602904319763, 0.320255492414747, 0.3179637278829302, 0.32305316414151874, 0.3179440838950021, 0.3190222212246486, 0.32059632880347116, 0.3256611483437674, 0.3157604847635542, 0.3296079550470625, 0.3216999684061323, 0.3253670334815979, 0.3287251165934971, 0.33559266158512663], "val_accuracy": [0.6019999980926514, 0.721666693687439, 0.7413333058357239, 0.762333333492279, 0.7820000052452087, 0.7943333387374878, 0.8076666593551636, 0.8183333277702332, 0.8273333311080933, 0.8326666951179504, 0.8363333344459534, 0.8343333601951599, 0.8463333249092102, 0.8579999804496765, 0.8433333039283752, 0.8536666631698608, 0.862666666507721, 0.8576666712760925, 0.8643333315849304, 0.8676666617393494, 0.8643333315849304, 0.8690000176429749, 0.8709999918937683, 0.8696666955947876, 0.8693333268165588, 0.8696666955947876, 0.8679999709129333, 0.8756666779518127, 0.8743333220481873, 0.8713333606719971, 0.8766666650772095, 0.8763333559036255, 0.8769999742507935, 0.8730000257492065, 0.878000020980835, 0.8786666393280029, 0.8756666779518127, 0.878000020980835, 0.8773333430290222, 0.8793333172798157, 0.8786666393280029, 0.8803333044052124, 0.8820000290870667, 0.8830000162124634, 0.875333309173584, 0.878000020980835, 0.8793333172798157, 0.8806666731834412, 0.8806666731834412]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [30, 32, 5, 49, 25], [0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [4, 9, 3, 3, 2, 2, 3, 9, 8, 1, 7, 7, 4, 9, 2, 4, 2], [1, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0], [85, 80, 63], [0, 1, 1, 0, 0, 0, 1, 1], [1, 1, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.8111428618431091, "mapping_values": [1, 4, 4, 2, 2, 1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.256151418581363, 1.8275567437553482, 1.3260459269924312, 0.9585979469873335, 0.8603153478955989, 0.8023053427272233, 0.7404880878664263, 0.7169532147160516, 0.6719205043634262, 0.6445967043631774, 0.6053042596577811, 0.5817343777810987, 0.572484000562724, 0.5529330073409408, 0.5229364065186475, 0.5159789092387065, 0.5029008384543545, 0.48272901910045096, 0.46954765252197234, 0.45257175384007425, 0.4389698443639831, 0.43290685382359817, 0.4180232143483976, 0.407203969489692, 0.39917336993008995, 0.39533340803006417, 0.38644056842705327, 0.37334203469739097, 0.3635344808253756, 0.3480670444363254, 0.3427183409967537, 0.33614068748676673, 0.3302062636888605, 0.32299338985175946, 0.30689817058443314, 0.30175340773564574, 0.29705842039084723, 0.2898854854289236, 0.29024311893053373, 0.27655242408082437, 0.2761972598891925, 0.26614918470729093, 0.2606054734615303, 0.26079598695862455, 0.25694528097300845], "accuracy": [0.20684190094470978, 0.43508124351501465, 0.5498613119125366, 0.6494518518447876, 0.6888125538825989, 0.6939638257026672, 0.7209087014198303, 0.7256637215614319, 0.7437590956687927, 0.7559106945991516, 0.7688548564910889, 0.7754589915275574, 0.7823272943496704, 0.7942147850990295, 0.7996301651000977, 0.8050455451011658, 0.8074230551719666, 0.8173292875289917, 0.8193105459213257, 0.829216718673706, 0.8364813327789307, 0.8392550349235535, 0.8417646288871765, 0.8470479249954224, 0.8536521196365356, 0.852859616279602, 0.8537842035293579, 0.8627657890319824, 0.8642187118530273, 0.8688416481018066, 0.8705587387084961, 0.8742570281028748, 0.8771628737449646, 0.8750495314598083, 0.8821820020675659, 0.8857482671737671, 0.8869370222091675, 0.8910315632820129, 0.889578640460968, 0.89552241563797, 0.8926165699958801, 0.8989565372467041, 0.897899866104126, 0.901862382888794, 0.9025228023529053], "val_loss": [1.8097467422485352, 1.0050162928445, 0.7328721795763288, 0.6762082917349679, 0.6054770605904716, 0.5597756079265049, 0.5576215130942208, 0.5294063942773002, 0.510303224836077, 0.4815958057131086, 0.4665173121861049, 0.4439303364072527, 0.4317529371806553, 0.42339552300316946, 0.4168974246297564, 0.41337694440569195, 0.3959487336022513, 0.3872478519167219, 0.37558722496032715, 0.37454456090927124, 0.360640355518886, 0.356954676764352, 0.3538657682282584, 0.35150468349456787, 0.35361925193241667, 0.34606558084487915, 0.3465659703527178, 0.3370802743094308, 0.3333719117300851, 0.327888514314379, 0.32596766097205027, 0.32530382701328825, 0.32159246717180523, 0.32377111060278757, 0.3215594802583967, 0.32476855175835745, 0.308062595980508, 0.31402625356401714, 0.3143943292754037, 0.3151178019387381, 0.31789967843464445, 0.31319073268345426, 0.32704479353768484, 0.32072960478918894, 0.3175747053963797], "val_accuracy": [0.460999995470047, 0.5960000157356262, 0.7056666612625122, 0.7263333201408386, 0.7319999933242798, 0.7536666393280029, 0.7590000033378601, 0.765999972820282, 0.7713333368301392, 0.7893333435058594, 0.7926666736602783, 0.8073333501815796, 0.8146666884422302, 0.8186666369438171, 0.8220000267028809, 0.8209999799728394, 0.8289999961853027, 0.8343333601951599, 0.8473333120346069, 0.847000002861023, 0.8510000109672546, 0.8569999933242798, 0.8573333621025085, 0.8569999933242798, 0.8550000190734863, 0.8583333492279053, 0.859666645526886, 0.8633333444595337, 0.8646666407585144, 0.8676666617393494, 0.8666666746139526, 0.8673333525657654, 0.8669999837875366, 0.8676666617393494, 0.871999979019165, 0.8706666827201843, 0.8723333477973938, 0.8723333477973938, 0.878333330154419, 0.8799999952316284, 0.8756666779518127, 0.8769999742507935, 0.874666690826416, 0.8756666779518127, 0.8769999742507935]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [30, 32, 5, 49, 25], [0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [4, 4, 9, 3, 2, 2, 3, 9, 8, 1, 7, 7, 4, 9, 2, 4, 2], [1, 3, 1, 3, 3, 5, 3, 2, 1, 4, 4, 0], [57, 80, 63], [0, 1, 1, 0, 0, 0, 1, 1], [1, 1, 1, 1, 0], [8, 1, 8, 4], [4, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.765999972820282, "mapping_values": [1, 4, 4, 2, 2, 1, 5, 5, 3, 2, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.pow(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), alpha)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.2854123964852597, 2.246316591825121, 2.1894151525506254, 2.0999367643010425, 1.9701135069734117, 1.7962416721577532, 1.6051161560825211, 1.4334745062435181, 1.3147330153430883, 1.2219055685400568, 1.1596374015105226, 1.0986304191975562, 1.0333807600046807, 1.00356572841247, 0.9707509525117306, 0.9417696137233669, 0.919959405645986, 0.9033152238882732, 0.8812373675973801, 0.8628072566863899, 0.8561431976624956, 0.8358133351483192, 0.8235185002968879, 0.8149941068803472, 0.8101020312076231, 0.7970373187444907, 0.7839074318576813, 0.7751078472523532, 0.7693757018424485, 0.7613175599141411, 0.7488151961361114, 0.748281312475367, 0.7314770030480933, 0.7321248268249753, 0.7307422503882144, 0.7256331192566938, 0.724503545225131, 0.7104127523512054], "accuracy": [0.1320829540491104, 0.23061682283878326, 0.3151499032974243, 0.38224804401397705, 0.418570876121521, 0.4617619812488556, 0.5042926669120789, 0.5275393128395081, 0.5546162724494934, 0.5801082849502563, 0.5967507362365723, 0.616299033164978, 0.6386210322380066, 0.6446968913078308, 0.6573768258094788, 0.6642451286315918, 0.6708492636680603, 0.6777176260948181, 0.6837934255599976, 0.6853784322738647, 0.6888125538825989, 0.6923788189888, 0.7018887996673584, 0.7004358768463135, 0.702681303024292, 0.7141724824905396, 0.7107383608818054, 0.7162858247756958, 0.7148329019546509, 0.7255316376686096, 0.7182670831680298, 0.7271166443824768, 0.735569953918457, 0.7300224304199219, 0.7300224304199219, 0.7372870445251465, 0.7347774505615234, 0.7368907928466797], "val_loss": [1.9350617953709193, 1.8915671621050154, 1.8243897983006068, 1.718280621937343, 1.564793382372175, 1.3782143252236503, 1.1944077696119035, 1.0453938756670271, 0.9427304267883301, 0.8660370111465454, 0.8121994733810425, 0.7682500907352993, 0.7332427671977452, 0.7075156824929374, 0.682102884565081, 0.6674456936972482, 0.649959819657462, 0.6372322354997907, 0.6294884852000645, 0.6158570051193237, 0.6074092558452061, 0.5990433352334159, 0.5913301876613072, 0.5820804493767875, 0.5766560350145612, 0.5719673463276455, 0.5638324022293091, 0.5621821369443621, 0.5543996436255318, 0.5516187463487897, 0.5492329938071114, 0.543105057307652, 0.537616389138358, 0.5354313169206891, 0.5338954074042184, 0.5281083413532802, 0.5310842139380318, 0.5256555421011788], "val_accuracy": [0.3336666524410248, 0.4273333251476288, 0.484333336353302, 0.5263333320617676, 0.5673333406448364, 0.5796666741371155, 0.6153333187103271, 0.6506666541099548, 0.6636666655540466, 0.684333324432373, 0.6986666917800903, 0.7046666741371155, 0.7080000042915344, 0.7176666855812073, 0.7253333330154419, 0.7289999723434448, 0.734666645526886, 0.7419999837875366, 0.7480000257492065, 0.7483333349227905, 0.7459999918937683, 0.7506666779518127, 0.7603333592414856, 0.7609999775886536, 0.7573333382606506, 0.7559999823570251, 0.7643333077430725, 0.7673333287239075, 0.765999972820282, 0.7716666460037231, 0.7596666812896729, 0.7663333415985107, 0.7756666541099548, 0.7756666541099548, 0.7699999809265137, 0.7756666541099548, 0.7646666765213013, 0.7680000066757202]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [8, 6, 1, 1, 2, 2, 2, 9, 2, 4, 7, 8, 7, 4, 5, 9, 8, 2, 8, 8, 8, 7, 6, 1, 9, 4, 5, 0, 9, 6, 2, 0], [1, 3, 1, 3, 3, 5, 3, 3, 3, 3, 4, 0, 0, 3, 1, 0, 3, 0], [85, 80, 93, 73, 13, 52], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07674019038677216, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1], [1, 2, 3, 3, 2, 1, 3, 2, 0, 8, 4, 4, 5, 5, 0, 5, 1, 3, 3, 5, 2, 9, 2, 2, 5, 2, 3], [1, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0], [64, 80, 14, 73], [1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [8, 1, 8, 4], [4, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 27, 27, 16, 11, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.multiply(grad, tf.math.add(tf.math.add(beta, grad), grad)), tf.math.negative(tf.math.sqrt(tf.math.pow(tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta)))))), tf.math.add(beta, tf.math.square(tf.math.add(beta, alpha))))))), tf.math.add(beta, grad)))))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07674019038677216, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [4, 6, 4, 0, 2, 2, 3, 9, 3, 0, 7, 0, 7, 9, 2, 9, 6, 2, 8, 6, 5, 8, 5, 7, 8, 3, 2, 4, 4, 4, 2, 8], [1, 3, 1, 3, 3, 5, 3, 2, 3, 3, 4, 1, 5, 3, 3, 2, 3, 0], [85, 80, 93, 73, 13, 52], [0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [1, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 18, 11, 7, 4, 14, 14, 8, 6, 1, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)))))), tf.math.pow(tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, alpha), tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), grad)))))), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [1, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [2, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [4, 6, 2, 3, 2, 2, 5, 9, 0, 4, 7, 6, 7, 9, 8, 9, 8, 6, 8, 8, 5, 7, 4, 1, 9], [1, 0, 3, 3, 3, 2, 3, 1, 1, 4, 4, 0, 1], [81, 80, 82, 73, 38], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, alpha), tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3050364426114163, 2.304599817859467, 2.306490909846987, 2.3074133093204985, 2.30795999581646, 2.3086015262371986, 2.313575676986176, 2.3133701031407377], "accuracy": [0.09113723784685135, 0.10091137140989304, 0.09351472556591034, 0.09800554811954498, 0.10051512718200684, 0.09879804402589798, 0.09893012791872025, 0.09932637959718704], "val_loss": [1.973661014011928, 1.9746417999267578, 1.9757378441946847, 1.9779770714896066, 1.978527205330985, 1.9789552007402693, 1.9781525475638253, 1.9833299773080009], "val_accuracy": [0.09666666388511658, 0.10066666454076767, 0.10233332961797714, 0.10066666454076767, 0.10199999809265137, 0.09666666388511658, 0.10199999809265137, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [9, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [4, 7, 9, 3, 2, 2, 3, 9, 8, 1, 7, 7, 4, 9, 2, 4, 2], [1, 2, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0], [85, 80, 63], [0, 1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [1, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 5, 5, 3, 2, 1, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.subtract(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [19948045.090588015, 3203822623.3448687, 54300942711.46216, 374630011555.7237, 1652372466467.1318, 5501190562232.384], "accuracy": [0.09747721254825592, 0.09536388516426086, 0.09813763201236725, 0.09932637959718704, 0.09391097724437714, 0.10051512718200684], "val_loss": [171100521.14285713, 9212625481.142857, 98859649316.57143, 538915204534.8571, 2018540856466.2856, 5954051206582.857], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 8, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [63, 32, 5, 49, 25], [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [4, 6, 9, 3, 2, 2, 3, 9, 8, 1, 7, 7, 4, 9, 2, 4, 2], [1, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0], [85, 80, 63], [0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [0, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 3, 3, 1, 2, 0, 2, 1, 1, 0, 0, 1, 0, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, alpha), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3029833155191017, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 1, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [30, 32, 5, 49, 25], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1], [2, 1, 3, 3, 2, 2, 3, 9, 8, 1, 7, 7, 4, 9, 2, 4, 2], [1, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0], [57, 80, 63], [1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [0, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 4, 24, 24, 14, 10, 2, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.square(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.subtract(alpha, tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(grad, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad))), grad))))), tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), beta)), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3029833155191017, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 6, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [4, 6, 9, 3, 2, 2, 3, 9, 8, 1, 7, 7, 4, 9, 2, 4, 2], [1, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0], [85, 80, 63], [0, 0, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 28, 28, 17, 11, 3, 2, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.sqrt(grad)))), tf.math.subtract(tf.math.add(beta, grad), grad))), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, beta))), tf.math.add(beta, alpha))))), tf.math.add(beta, grad)))))))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, sigma))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [10.676313021368497, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.038304053246974945, 0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [71674.11160714286, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [1, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [2, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1], [3, 2, 3, 3, 2, 1, 3, 2, 0, 9, 0, 4, 5, 8, 9, 5, 1, 3, 3, 5, 2, 9, 2, 2, 5, 2, 3], [1, 3, 3, 2, 3, 5, 3, 2, 0, 4, 4, 0, 3, 4, 1, 4, 5, 0], [85, 80, 14, 73], [0, 0, 0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [2, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 18, 11, 7, 4, 24, 24, 16, 8, 2, 4, 4, 2, 2, 0, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)))))), tf.math.pow(tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.negative(grad), tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), beta), tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.sqrt(tf.math.add(beta, grad)))), tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))))))), grad), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.square(tf.math.add(beta, beta))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.subtract(tf.math.add(sigma, sigma), tf.math.add(sigma, alpha))))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [2, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [4, 6, 9, 3, 2, 2, 3, 9, 8, 1, 7, 7, 4, 9, 2, 4, 2], [5, 1, 3, 3, 3, 5, 3, 3, 1, 4, 4, 0, 1, 0], [65, 80, 14, 73, 38, 82], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [3, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.04171428456902504, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 3, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32))), alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3012395400129306, 2.3032708835954505, 2.302363378433834, 2.3012798568749266, 2.303344696016202, 2.303125283532627], "accuracy": [0.0886276587843895, 0.08677849918603897, 0.09206181764602661, 0.08994849026203156, 0.0878351628780365, 0.08849557489156723], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [30, 32, 5, 49, 25], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [4, 9, 3, 3, 2, 2, 3, 9, 8, 1, 7, 7, 4, 9, 2, 4, 2], [1, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0], [57, 80, 63], [0, 1, 1, 0, 0, 0, 1, 1], [1, 1, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.04171428456902504, "mapping_values": [1, 4, 4, 2, 2, 1, 28, 28, 17, 11, 3, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.sqrt(grad)))), tf.math.subtract(tf.math.add(beta, grad), grad))), tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, beta))), tf.math.add(beta, alpha))))), tf.math.add(beta, grad)))))), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3012395400129306, 2.3032708835954505, 2.302363378433834, 2.3012798568749266, 2.303344696016202, 2.303125283532627], "accuracy": [0.0886276587843895, 0.08677849918603897, 0.09206181764602661, 0.08994849026203156, 0.0878351628780365, 0.08849557489156723], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1], [1, 2, 3, 3, 2, 1, 3, 2, 2, 5, 0, 4, 5, 2, 9, 5, 1, 3, 3, 5, 2, 9, 2, 2, 5, 2, 3], [3, 3, 3, 3, 3, 5, 3, 2, 1, 4, 4, 0, 2, 0, 4, 0], [49, 80, 14, 73, 72], [1, 1, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.04171428456902504, "mapping_values": [1, 4, 4, 2, 2, 1, 41, 41, 25, 16, 5, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.multiply(grad, grad), tf.math.add(tf.math.add(beta, grad), grad))), tf.math.add(tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(beta)))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha))))), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))))))), tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.square(tf.math.add(beta, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32))), beta), tf.math.add(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), tf.math.square(tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32))))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3012395400129306, 2.3032708835954505, 2.302363378433834, 2.3012798568749266, 2.303344696016202, 2.303125283532627], "accuracy": [0.0886276587843895, 0.08677849918603897, 0.09206181764602661, 0.08994849026203156, 0.0878351628780365, 0.08849557489156723], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 5, 3, 2, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [2, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [37, 32, 5, 49, 25], [1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [4, 4, 9, 3, 2, 2, 3, 9, 8, 1, 7, 7, 4, 9, 2, 2, 2], [1, 3, 3, 3, 3, 5, 2, 2, 1, 4, 0, 0], [38, 80, 14, 73, 38, 82], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [8, 1, 8, 4], [3, 1], [64], [1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 0, 0, 2, 2], [42, 97, 13, 96, 41]], "fitness": -0.04085714370012283, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3013038965279886, 2.303843698890816, 2.303846916077301, 2.3037882797816613, 2.307893413169084, 2.309884157005696], "accuracy": [0.08770307898521423, 0.08466517180204391, 0.08770307898521423, 0.08374059200286865, 0.08374059200286865, 0.08149518072605133], "val_loss": [1.9711098670959473, 1.9716322762625558, 1.9724607467651367, 1.9734598568507604, 1.9746736117771693, 1.9762554849897112], "val_accuracy": [0.03766666725277901, 0.03533333167433739, 0.02866666577756405, 0.02500000037252903, 0.02433333359658718, 0.02566666714847088]}}]