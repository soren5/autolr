[{"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [31, 32, 29, 49, 25], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1], [4, 7, 0, 5, 0, 9, 3, 9], [1, 0, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [98], [0, 1, 1, 0, 1], [0, 0, 1], [7, 2, 8, 4], [2], [64], [0, 1, 0, 1, 0, 1], [3, 1, 9, 1, 2], [1, 0, 2], [15, 52, 13]], "fitness": -0.8240000009536743, "mapping_values": [1, 3, 3, 1, 2, 1, 7, 7, 4, 3, 1, 3, 1, 1, 0, 0, 5, 3, 2, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), tf.math.square(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2670098459873342, 1.9728207327607536, 1.3823871456510781, 1.0259463822033899, 0.8860306798380443, 0.7931120319215927, 0.7616474976266899, 0.7032886338492175, 0.6716429723913581, 0.6573841721941341, 0.6324685712957174, 0.6098850859296383, 0.587160337996316, 0.5756779601072922, 0.550628396742348, 0.5340389774900937, 0.5148394948314162, 0.50590677048237, 0.4998124993362321, 0.4750660416267772, 0.47092644927555527, 0.4622352488595796, 0.4471883913545151, 0.4335268625234018, 0.4272728334359993, 0.4222500906557754, 0.41199409318102537, 0.39802759194559884, 0.3967802552436211, 0.38570411953833506, 0.38182660491711207, 0.36437754750472207, 0.35619197680556214, 0.3558714139093072, 0.35017016081289765, 0.3376235559183168, 0.33101014313271426, 0.3297525190359188, 0.3240523976129296, 0.31431607932556954, 0.318191038473423, 0.30965763339513264, 0.30157543499361744, 0.30108878792332083, 0.28867054533145964, 0.28445206374508625, 0.28361652411836374, 0.27606779329056563, 0.276670972535072, 0.2664672566907218], "accuracy": [0.17712323367595673, 0.40774005651474, 0.5208030939102173, 0.6293752193450928, 0.6765288710594177, 0.7017567157745361, 0.7073041796684265, 0.7312111854553223, 0.7524765729904175, 0.7567031979560852, 0.763967752456665, 0.772288978099823, 0.7778365015983582, 0.7836481332778931, 0.793950617313385, 0.7991018295288086, 0.8090080618858337, 0.8079513907432556, 0.8105930685997009, 0.8234050869941711, 0.8245938420295715, 0.8273676037788391, 0.8313300609588623, 0.8416325449943542, 0.8356888294219971, 0.8438779711723328, 0.8453308939933777, 0.8498216867446899, 0.852331280708313, 0.857218325138092, 0.8599920868873596, 0.8644828796386719, 0.8661999702453613, 0.8656716346740723, 0.8679170608520508, 0.8683133125305176, 0.8717474341392517, 0.8722757697105408, 0.8798044919967651, 0.8820499181747437, 0.8791441321372986, 0.8825782537460327, 0.8831065893173218, 0.887597382068634, 0.8893144726753235, 0.8919561505317688, 0.8936732411384583, 0.8923524022102356, 0.8924844861030579, 0.8985602855682373], "val_loss": [1.8544088091169084, 1.2138632025037492, 0.7385060276303973, 0.6612207548958915, 0.6066373416355678, 0.5745770590645927, 0.5468234675271171, 0.5325928245271955, 0.5090443917683193, 0.49468742098127094, 0.4754227910723005, 0.4619337150028774, 0.4537061793463571, 0.4401323284421648, 0.4295013632093157, 0.42103018930980135, 0.41011918442589895, 0.4056810055460249, 0.3943138463156564, 0.392024176461356, 0.379103992666517, 0.37462309428623747, 0.36328294447490145, 0.36114016601017546, 0.355428193296705, 0.3505305307252066, 0.3524030957903181, 0.3408728156770979, 0.3456884963171823, 0.33791347060884747, 0.33879843779972624, 0.33936232328414917, 0.336045435496739, 0.3338512522833688, 0.33086051259722027, 0.3228678788457598, 0.3240507755960737, 0.3172077110835484, 0.32352763414382935, 0.32259438719068256, 0.3173806837626866, 0.31516069173812866, 0.31516264166150776, 0.32033332756587435, 0.3123375007084438, 0.3206408279282706, 0.30987820455006193, 0.3091658183506557, 0.3106875079018729, 0.3211976374898638], "val_accuracy": [0.4429999887943268, 0.5903333425521851, 0.6949999928474426, 0.7329999804496765, 0.7453333139419556, 0.7429999709129333, 0.7599999904632568, 0.7633333206176758, 0.7839999794960022, 0.7866666913032532, 0.7919999957084656, 0.7960000038146973, 0.8096666932106018, 0.8076666593551636, 0.8163333535194397, 0.8183333277702332, 0.8259999752044678, 0.8276666402816772, 0.8363333344459534, 0.8363333344459534, 0.8460000157356262, 0.847000002861023, 0.8529999852180481, 0.856333315372467, 0.8553333282470703, 0.8600000143051147, 0.8610000014305115, 0.8616666793823242, 0.8576666712760925, 0.8600000143051147, 0.8619999885559082, 0.8606666922569275, 0.8640000224113464, 0.8633333444595337, 0.8653333187103271, 0.8673333525657654, 0.8696666955947876, 0.8690000176429749, 0.8690000176429749, 0.8683333396911621, 0.8683333396911621, 0.871666669845581, 0.8723333477973938, 0.8713333606719971, 0.8759999871253967, 0.8703333139419556, 0.875333309173584, 0.8733333349227905, 0.8726666569709778, 0.8706666827201843]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [31, 32, 29, 49, 25], [1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1], [4, 7, 0, 5, 0, 9, 3, 9], [1, 2, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [98], [0, 1, 0, 0, 1], [0, 0, 1], [7, 2, 8, 4], [2], [64], [0, 1, 0, 1, 0, 1], [3, 1, 9, 1, 2], [1, 0, 2], [15, 52, 13]], "fitness": -0.7565714120864868, "mapping_values": [1, 3, 3, 1, 2, 1, 7, 7, 4, 3, 0, 5, 3, 2, 1, 0, 5, 3, 2, 2], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(tf.math.add(beta, alpha), tf.math.negative(beta)), tf.math.add(beta, tf.math.square(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.add(tf.math.add(sigma, beta), sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2904876893332857, 2.2590645762513955, 2.2239062367271614, 2.17578368986193, 2.1100004659337044, 2.0134478076227653, 1.8838165255742947, 1.7422409969912291, 1.5909892949351325, 1.4604816871501232, 1.3665950733200434, 1.2744242522411373, 1.2084944887152438, 1.155994247687948, 1.1040887931051067, 1.0722823044910816, 1.0346081177823974, 1.000839240420937, 0.9791969230870655, 0.9618137111879217, 0.9313308591021365, 0.9244686757978148, 0.908158800156676, 0.8866262520072861, 0.876255897734978, 0.8679992342432965, 0.8508073124100173, 0.8433387680942388, 0.8474159501232192, 0.8231449431636787, 0.8183065017358329, 0.8024560322362859, 0.8135035930292686, 0.7957346404642713, 0.7784048490803932, 0.7704488189780024, 0.7663123425696079, 0.7652583276638186, 0.7723068558717873, 0.7560958979215132], "accuracy": [0.1228371411561966, 0.20684190094470978, 0.2689208686351776, 0.3271694481372833, 0.36745476722717285, 0.4115704596042633, 0.44208163022994995, 0.4703473746776581, 0.5031039714813232, 0.5291243195533752, 0.5514463186264038, 0.5651829242706299, 0.5822216272354126, 0.6012415885925293, 0.6028265953063965, 0.6231673359870911, 0.6369040012359619, 0.6404702067375183, 0.6514331102371216, 0.6609430909156799, 0.665830135345459, 0.672170102596283, 0.6760005354881287, 0.6807554960250854, 0.6859067678451538, 0.6870955228805542, 0.6903975605964661, 0.6950204968452454, 0.6931713223457336, 0.7005679607391357, 0.698190450668335, 0.707040011882782, 0.7045304179191589, 0.7125874757766724, 0.7131158113479614, 0.7148329019546509, 0.7215691208839417, 0.7232862114906311, 0.7228899598121643, 0.7197200059890747], "val_loss": [1.9437607356480189, 1.9138233321053642, 1.8744711875915527, 1.8186005183628626, 1.7409824643816267, 1.6344197137015206, 1.4974218777247839, 1.3478241988590784, 1.2032397133963448, 1.0829707554408483, 0.990872859954834, 0.9181599276406425, 0.8626832962036133, 0.8190181255340576, 0.7853744200297764, 0.7554769005094256, 0.7303273166928973, 0.7095127786908831, 0.690572704587664, 0.6779844249997821, 0.6647670098713466, 0.6528961147580828, 0.6431041274751935, 0.6320392063685826, 0.624884946005685, 0.616465653691973, 0.609946574483599, 0.6030987671443394, 0.5958392790385655, 0.5897526059831891, 0.5847282920564923, 0.5802205119814191, 0.5746462856020246, 0.5694285801478794, 0.5641870498657227, 0.5608394827161517, 0.5572281735283988, 0.554424354008266, 0.5518276521137783, 0.5494080271039691], "val_accuracy": [0.2770000100135803, 0.39133334159851074, 0.4466666579246521, 0.4819999933242798, 0.5226666927337646, 0.5523333549499512, 0.5653333067893982, 0.5960000157356262, 0.6116666793823242, 0.6453333497047424, 0.6696666479110718, 0.6700000166893005, 0.6890000104904175, 0.6956666707992554, 0.7053333520889282, 0.7056666612625122, 0.7110000252723694, 0.715666651725769, 0.7226666808128357, 0.7250000238418579, 0.7253333330154419, 0.734000027179718, 0.737333357334137, 0.7396666407585144, 0.7406666874885559, 0.7450000047683716, 0.7493333220481873, 0.7526666522026062, 0.753333330154419, 0.7513333559036255, 0.7523333430290222, 0.7509999871253967, 0.7636666893959045, 0.7606666684150696, 0.765333354473114, 0.7593333125114441, 0.7639999985694885, 0.7643333077430725, 0.7636666893959045, 0.7599999904632568]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [31, 32, 29, 49, 25], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1], [4, 7, 0, 5, 0, 9, 3, 9], [4, 5, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [44], [0, 1, 1, 0, 1], [1, 0, 1], [7, 2, 8, 4], [2], [64], [1, 1, 0, 1, 0, 1], [3, 1, 9, 1, 2], [2, 0, 2], [49, 52, 13]], "fitness": -0.14742857217788696, "mapping_values": [1, 17, 17, 10, 7, 4, 7, 7, 4, 3, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha))))), tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)))))), tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))))), grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(grad, tf.math.negative(grad)), tf.math.square(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [4.632475956193901, 12.545178042426794, 20.986048718957445, 29.179829059984264, 37.65821338301369, 46.84359260834188], "accuracy": [0.12970545887947083, 0.12521463632583618, 0.12178047746419907, 0.13380002975463867, 0.13313961029052734, 0.12323339283466339], "val_loss": [5.959977422441755, 11.444018500191826, 17.054648808070592, 22.717105865478516, 28.417459760393417, 34.146898542131694], "val_accuracy": [0.15433333814144135, 0.1536666601896286, 0.1536666601896286, 0.15299999713897705, 0.1523333340883255, 0.15166667103767395]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 1, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [31, 32, 29, 49, 25], [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], [4, 7, 0, 3, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [98], [0, 1, 1, 0, 1], [0, 1, 1], [7, 2, 8, 4], [2], [64], [0, 1, 0, 1, 0, 1], [3, 1, 9, 1, 2], [2, 3, 2], [15, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 3, 3, 3, 1, 2, 0, 3, 1, 1, 0, 0, 5, 3, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.square(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))))), grad))), lambda shape,  alpha, beta, grad: tf.math.pow(alpha, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.math.subtract(sigma, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 6, 6, 2, 2, 0, 1, 5, 2, 4, 2, 6, 3, 6, 5, 8], [0, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [50, 32, 43, 41, 25], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1], [1, 6, 1, 6, 3, 7, 4, 9, 2, 3, 0, 2, 1, 6, 4, 3, 3, 8], [3, 4, 3, 0, 1, 5, 3, 2, 1, 4, 4, 0], [98], [0, 0, 1, 0, 0], [0, 0, 1, 1], [7, 2, 8, 4], [2, 7], [64], [0, 1, 1, 1, 0, 1, 1], [3, 3, 3, 1, 2], [1, 1, 2, 3], [60, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 2, 11, 11, 5, 6, 1, 5, 4, 2, 2, 0, 3, 1, 2, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.math.divide_no_nan(grad, tf.math.multiply(grad, tf.math.add(beta, grad))), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, beta))), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, alpha)", "other_info": {"loss": [2.302027562794794, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.0952318087220192, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 3, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 1, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [31, 32, 29, 92, 25], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [4, 7, 0, 5, 0, 9, 3, 9], [1, 3, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [98], [0, 1, 1, 0, 1], [0, 1, 1], [3, 2, 8, 4], [2], [64], [0, 1, 0, 1, 0, 1], [3, 3, 9, 1, 3, 8, 3, 0], [2, 1, 2], [97, 7, 40]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 18, 10, 8, 3, 7, 7, 4, 3, 0, 3, 1, 1, 0, 0, 5, 3, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))))), alpha), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))))))))), grad)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(alpha, grad), tf.math.negative(tf.math.square(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.math.multiply(alpha, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [4, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [60, 32, 29, 49, 25], [1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1], [4, 7, 0, 5, 0, 9, 3, 9], [0, 0, 3, 1, 1, 2, 3, 2, 1, 4, 4, 0], [67, 45], [1, 1, 1, 0, 1], [1, 0, 1], [3, 2, 8, 4], [2], [64], [0, 1, 0, 0, 0, 1], [2, 0, 9, 1, 2], [1, 0, 2], [15, 54, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 7, 7, 4, 3, 2, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.negative(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08638224750757217, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [4, 2, 3, 6, 4, 2, 4, 1, 5, 0, 4, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [76, 32, 63, 49, 25], [0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1], [4, 7, 6, 2, 0, 9, 3, 9], [3, 4, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [98, 30], [1, 0, 0, 0, 1], [0, 0, 1], [6, 2, 8, 4], [2], [64], [0, 1, 0, 1, 0, 1, 1], [4, 4, 9, 1, 2], [1, 1, 2], [15, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 23, 23, 12, 11, 4, 12, 12, 8, 4, 2, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)), tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))))), grad)), tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(grad, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.negative(grad), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad)))), grad), tf.math.add(beta, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.pow(alpha, tf.math.pow(alpha, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 2, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [31, 32, 29, 49, 25], [0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1], [1, 0, 1, 6, 3, 2, 4, 9, 2, 3, 0, 2, 1, 6, 4, 3, 3, 8], [1, 0, 4, 3, 1, 5, 3, 2, 1, 4, 4, 0], [98, 59], [1, 0, 0, 0, 1], [0, 0, 1], [6, 2, 8, 4], [2], [64], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [3, 1, 3, 1, 2, 8], [0, 0, 0, 1, 3, 0], [15, 52, 13, 60]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 16, 16, 9, 7, 2, 1, 0, 0, 0, 0, 12, 6, 6, 4], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, alpha), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.negative(tf.math.subtract(alpha, tf.math.divide_no_nan(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad))), alpha)))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(grad, grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.subtract(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), alpha), tf.math.add(sigma, tf.math.sqrt(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))))))", "other_info": {"loss": [2.302519169245508, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 2, 1, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [31, 58, 29, 49, 25], [0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1], [1, 0, 1, 6, 3, 7, 4, 9, 2, 3, 0, 2, 1, 6, 4, 3, 3, 8], [1, 2, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [98], [0, 1, 1, 0, 1], [1, 0, 0], [3, 0, 8, 4], [2], [64], [1, 1, 0, 1, 0, 1], [3, 1, 9, 1, 2], [2, 0, 2], [49, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(grad, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))))))), tf.math.add(alpha, tf.math.square(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)))))), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [31788.005347962706, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10130762308835983, 0.09589222073554993, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [628031420291949.8, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.08033332973718643, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [4, 2, 3, 2, 2, 1, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [2, 0, 1, 0, 1, 2, 0, 2, 0, 2, 3, 3, 0], [31, 21, 29, 5, 25], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1], [3, 0, 6, 7, 3, 7, 4, 9, 2, 3, 0, 2, 1, 6, 4, 3, 3, 8], [1, 0, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [98], [0, 0, 1, 1, 1], [0, 0, 1], [7, 2, 8, 4], [2], [64], [0, 1, 0, 1, 0, 1], [3, 1, 9, 1, 2], [1, 0, 2], [15, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 7, 7, 3, 8, 8, 4, 4, 1, 5, 2, 2, 0, 0, 5, 3, 2, 2], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, alpha))), tf.math.subtract(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.negative(alpha), tf.math.divide_no_nan(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.add(sigma, sigma)), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [4, 2, 3, 6, 2, 9, 0, 6, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [21, 32, 29, 49, 25], [1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1], [4, 7, 6, 6, 0, 9, 3, 9], [2, 4, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [98], [0, 1, 0, 0, 1], [0, 0, 1], [7, 2, 8, 4], [2], [64], [0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1], [4, 4, 2, 1, 2, 8, 5, 5], [1, 0, 1, 1, 3, 1], [97, 44, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 8, 6, 4, 9, 9, 4, 5, 0, 5, 3, 2, 1, 0, 14, 8, 6, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.add(grad, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32))))), tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.divide_no_nan(grad, tf.math.add(beta, grad)))), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.add(tf.math.add(sigma, beta), sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(alpha, tf.math.pow(tf.math.add(tf.math.subtract(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), alpha), alpha), tf.math.add(tf.math.sqrt(tf.math.square(sigma)), tf.math.square(alpha))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [31, 32, 29, 49, 25], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1], [1, 0, 1, 6, 3, 7, 4, 5, 2, 3, 0, 2, 1, 6, 4, 3, 3, 8], [1, 0, 4, 3, 3, 5, 3, 2, 1, 4, 4, 0], [98, 30], [0, 1, 1, 0, 1], [1, 0, 1], [6, 2, 8, 4], [2], [64], [1, 1, 0, 1, 0, 1, 1], [3, 1, 9, 1, 2], [2, 1, 0, 1], [49, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 19, 19, 10, 9, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, alpha), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.negative(tf.math.subtract(alpha, tf.math.divide_no_nan(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad))), grad)))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, beta))))))), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [8, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [31, 32, 29, 49, 25], [1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1], [1, 0, 5, 6, 3, 7, 4, 9, 2, 3, 0, 2, 1, 6, 4, 3, 3, 8], [1, 1, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [98], [1, 0, 1, 0, 1], [1, 0, 0], [3, 0, 8, 4], [0], [64], [0, 1, 1, 1, 1, 1], [2, 1, 9, 1, 2], [0, 0, 0], [6, 2, 85]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 11, 11, 6, 5, 0, 1, 0, 0, 0, 0, 3, 1, 2, 2], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(grad), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.negative(tf.math.square(tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))), alpha)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3020352780968523, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09496764093637466, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [86, 32, 29, 49, 25], [0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1], [4, 7, 0, 5, 0, 9, 3, 9], [1, 1, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [98], [0, 1, 1, 0, 1], [0, 0, 1], [7, 2, 8, 4], [2], [64], [1, 1, 0, 1, 0, 1], [3, 1, 9, 1, 2], [1, 0, 2], [15, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 17, 17, 10, 7, 4, 7, 7, 4, 3, 0, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.square(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))))), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(alpha, tf.math.add(beta, tf.math.negative(tf.math.square(alpha)))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08453308790922165, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [1, 2, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [31, 32, 29, 49, 25], [0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1], [1, 0, 1, 6, 3, 7, 4, 9, 2, 3, 0, 2, 1, 6, 4, 3, 3, 8], [1, 0, 0, 3, 1, 5, 3, 2, 1, 4, 4, 0], [98], [1, 0, 0, 0, 1], [0, 0, 1], [7, 2, 8, 4], [2], [64], [1, 1, 0, 1, 0, 1, 1], [6, 8, 3, 1, 2], [2, 0, 2, 2], [15, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 4, 4, 2, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.negative(alpha), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [2.302567130082382, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 2, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [31, 32, 29, 49, 25], [1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], [4, 7, 0, 5, 0, 9, 3, 9], [1, 0, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [98], [0, 1, 1, 0, 1], [0, 0, 1], [9, 2, 8, 4], [2], [64], [0, 1, 1, 1, 0, 1], [3, 1, 9, 1, 2], [1, 0, 2], [15, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 6, 6, 3, 3, 1, 1, 1, 1, 0, 1, 3, 1, 2, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3027081960038958, 2.3010052289346805, 2.301826063762519, 2.302751451010371, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09113723784685135, 0.09496764093637466, 0.09126931428909302, 0.09113723784685135, 0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9709408623831612, 1.9709386144365584, 1.9709162712097168, 1.9707372529166085, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.038333334028720856, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [31, 32, 29, 49, 25], [1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1], [4, 5, 0, 5, 0, 9, 3, 9], [1, 0, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [98], [0, 1, 1, 0, 1], [0, 0, 1], [7, 2, 8, 4], [2], [64], [1, 0, 0, 1, 0, 1], [3, 1, 9, 1, 2], [1, 0, 2], [15, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 5, 5, 3, 2, 1, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.square(alpha), tf.math.add(beta, tf.math.negative(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.374087070918055, 19767.84045306286, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.041209880262613297, 0.05071985349059105, 0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3143721308026994, 3792926483602.2856, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.00566666666418314, 0.10199999809265137, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [94, 32, 29, 49, 25], [1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [8, 7, 0, 3, 0, 9, 3, 9], [1, 3, 1, 3, 1, 5, 3, 2, 1, 4, 4, 0], [98], [0, 0, 0, 0, 1], [0, 1, 1], [7, 2, 8, 4], [2, 7], [64], [0, 1, 0, 1, 1, 1], [3, 1, 9, 1, 2], [3, 3, 2], [15, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 2, 1, 1, 0, 3, 3, 1, 2, 0, 5, 2, 3, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(grad, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.sqrt(alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, beta), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.subtract(sigma, beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 3, 2, 2, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [31, 32, 44, 49, 25], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1], [4, 7, 8, 3, 0, 9, 3, 9], [1, 1, 3, 2, 1, 5, 3, 2, 1, 4, 4, 0], [98], [0, 1, 1, 0, 1], [0, 0, 1], [9, 2, 8, 4], [2], [64], [0, 1, 1, 1, 0, 1], [3, 1, 9, 1, 2], [1, 0, 2], [15, 81, 13]], "fitness": -0.03999999910593033, "mapping_values": [1, 14, 14, 7, 7, 3, 8, 8, 4, 4, 0, 1, 1, 1, 0, 1, 3, 1, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.multiply(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))))))))))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(alpha, alpha), tf.math.sqrt(tf.math.multiply(grad, tf.math.add(beta, beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3027608450676835, 2.3013822336742322, 2.302824071905065, 2.304658084481919, 2.3057680011598616, 2.306213098919513], "accuracy": [0.09100515395402908, 0.0936468094587326, 0.0886276587843895, 0.08598599582910538, 0.08519349992275238, 0.08228767663240433], "val_loss": [1.9711215155465263, 1.9715847969055176, 1.9722790036882674, 1.9731650352478027, 1.9742117609296526, 1.9753883225577218], "val_accuracy": [0.03766666725277901, 0.03566666692495346, 0.033666666597127914, 0.03033333271741867, 0.02566666714847088, 0.02199999988079071]}}]