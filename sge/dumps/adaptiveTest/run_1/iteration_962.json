[{"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 0, 4, 2, 0, 0, 9, 2, 8, 0, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [2, 1, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [90, 95, 52, 66, 2, 57, 35, 9, 54, 64], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8437142968177795, "mapping_values": [1, 4, 4, 2, 2, 1, 13, 13, 9, 4, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.pow(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.negative(alpha))), tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.add(tf.math.sqrt(grad), grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9777228862633716, 1.2584156886130875, 0.9088996268376824, 0.8229475846978352, 0.7578490899223551, 0.7246271454505381, 0.6676320816075183, 0.6659668277771466, 0.6474085307832974, 0.6508164585872711, 0.6060239395854684, 0.5944980019906477, 0.5875080625268652, 0.5640202652682182, 0.5430162595468128, 0.5351295716191611, 0.5198684657065624, 0.5223444429418241, 0.5012816607424643, 0.4824045943058146, 0.4995396725135693, 0.46388243447205396, 0.4701768899866146, 0.45717494300941924, 0.4469905021349358, 0.4409621784896772, 0.441270809289471, 0.4265822423778237, 0.41273570875166715, 0.4044006269456153, 0.4019957041704203, 0.4163274712306539, 0.40093454896514097, 0.3912209784586227, 0.369375534714835, 0.37535292103841333, 0.36062545412881986, 0.3613661222603689, 0.3520390334626577, 0.3550613918450562, 0.35291085952875434, 0.34283821489265837, 0.341063029128232, 0.35367791480029875, 0.33333739853254823, 0.3359457699220572, 0.33265652163012027, 0.31264962275046176, 0.3133186137065313, 0.3272434742364744, 0.31022190232444447, 0.30553675170241407], "accuracy": [0.33601900935173035, 0.5632016658782959, 0.6642451286315918, 0.6959450244903564, 0.713908314704895, 0.722757875919342, 0.7519482374191284, 0.7465327978134155, 0.7511557340621948, 0.7556465268135071, 0.7724210619926453, 0.7771760821342468, 0.7788931727409363, 0.7931581139564514, 0.7940827012062073, 0.7968564033508301, 0.8049134612083435, 0.8031964302062988, 0.8144234418869019, 0.8166688680648804, 0.8178576231002808, 0.8298771381378174, 0.828292191028595, 0.8298771381378174, 0.8327829837799072, 0.839519202709198, 0.8345000743865967, 0.8416325449943542, 0.8495575189590454, 0.8514066934585571, 0.8494254350662231, 0.8486329317092896, 0.8512746095657349, 0.8569541573524475, 0.8636903762817383, 0.8581429123878479, 0.8661999702453613, 0.8622375130653381, 0.8660678863525391, 0.8721436858177185, 0.8671245574951172, 0.8716153502464294, 0.8753136992454529, 0.8687095642089844, 0.8765024542808533, 0.8755778670310974, 0.871879518032074, 0.8838990926742554, 0.8842953443527222, 0.873860776424408, 0.8828424215316772, 0.883238673210144], "val_loss": [1.3434828008924211, 0.7572009222848075, 0.6423404727663312, 0.5951912743704659, 0.5783350127083915, 0.5417709691183907, 0.5032643590654645, 0.5405996356691632, 0.494030271257673, 0.49797071729387554, 0.4770815372467041, 0.4675230639321463, 0.4584130048751831, 0.4485152108328683, 0.4756239482334682, 0.4148685506411961, 0.4101822291101728, 0.4119430695261274, 0.39774474075862337, 0.41659049476896015, 0.39373238597597393, 0.40067076683044434, 0.3703967417989458, 0.38860539879117695, 0.38585767575672697, 0.387577337878091, 0.35863280296325684, 0.3890746235847473, 0.35346451827457975, 0.35749493326459614, 0.35582888977868216, 0.3504652466092791, 0.3466280273028782, 0.34364472116742817, 0.34189319610595703, 0.33795708417892456, 0.3413472516196115, 0.34155540806906565, 0.3471817544528416, 0.33532791478293283, 0.3466067484446934, 0.3274399553026472, 0.3366327030318124, 0.34007430928094046, 0.31945695195879253, 0.3349682773862566, 0.31461416823523386, 0.31930528368268696, 0.34629112482070923, 0.3330609883580889, 0.32992080279759, 0.31761821678706575], "val_accuracy": [0.47833332419395447, 0.6766666769981384, 0.7329999804496765, 0.7226666808128357, 0.7423333525657654, 0.7596666812896729, 0.7756666541099548, 0.7459999918937683, 0.7850000262260437, 0.7766666412353516, 0.7866666913032532, 0.7963333129882812, 0.793666660785675, 0.8063333630561829, 0.7860000133514404, 0.8240000009536743, 0.8266666531562805, 0.8213333487510681, 0.8349999785423279, 0.8196666836738586, 0.8299999833106995, 0.8289999961853027, 0.8489999771118164, 0.8270000219345093, 0.8356666564941406, 0.8346666693687439, 0.8519999980926514, 0.8333333134651184, 0.8506666421890259, 0.8533333539962769, 0.8536666631698608, 0.8550000190734863, 0.8546666502952576, 0.8500000238418579, 0.8573333621025085, 0.8610000014305115, 0.8579999804496765, 0.8560000061988831, 0.856333315372467, 0.8640000224113464, 0.8613333106040955, 0.8646666407585144, 0.8640000224113464, 0.8643333315849304, 0.8676666617393494, 0.8573333621025085, 0.8696666955947876, 0.8673333525657654, 0.8619999885559082, 0.8636666536331177, 0.8659999966621399, 0.8653333187103271]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [6, 8, 4, 2, 0, 2, 9, 8, 6, 1, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [2, 1, 2, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [59, 72, 52, 66, 2, 57, 35, 9, 54, 64], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8208571672439575, "mapping_values": [1, 4, 4, 2, 2, 1, 12, 12, 8, 4, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, tf.math.pow(beta, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, beta)))))), tf.math.sqrt(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.9857964162829058, 1.2510630862272931, 0.9045221873908043, 0.8112368672090262, 0.7764674822699361, 0.730028658794327, 0.6673938051631753, 0.6556959549638464, 0.6552059358184396, 0.6345758966844726, 0.60761446734587, 0.5933926007089803, 0.5861711420041066, 0.5604833065164465, 0.5372771753878751, 0.5377990188473928, 0.5100415006148077, 0.5256115444316494, 0.5013020683344187, 0.4813581256818589, 0.4935606328243782, 0.4665780408216143, 0.47029785535370494, 0.4502111779243687, 0.45169607204390144, 0.4391709231524152, 0.44430929801845437, 0.42169198695741955, 0.4118559838104966, 0.4099555484032382, 0.4004933101870144, 0.4122435636705238, 0.3948918047905157, 0.3958260268543721, 0.37718853975614586, 0.3766305117897779, 0.36364379716098993, 0.36359500649614324, 0.35199458515088256, 0.3613660121204957, 0.35338008813948724, 0.3418123759826287, 0.3321067082757538, 0.350472719536135, 0.33718539320750246, 0.3359167168696543, 0.33919992401709786, 0.3201696478089227, 0.31562568220354076, 0.32858486291502825, 0.313236877426511, 0.30466565458277955, 0.30107365044557405, 0.293013044037225, 0.29447908905188264, 0.29959603759905823, 0.2841840412685695, 0.3056633804594253, 0.27393825720046505, 0.2778204574112281, 0.27137089207849135, 0.26408535967555263, 0.2586285559382531, 0.2556534856026435, 0.27450408534114984, 0.2598753183658931, 0.2515139560838968, 0.24787016502264042, 0.2468800195877216, 0.24217837206943554, 0.25155582904555873, 0.23620077553536709, 0.23517341612037523, 0.23109554716183792, 0.23279017671350286, 0.22216023108340713, 0.2317682264711973, 0.22256530493423057, 0.21649791048171735, 0.2141592139285931, 0.21383973131633596, 0.21244924244958144, 0.22198103422604343, 0.19881597460260986], "accuracy": [0.3354906737804413, 0.5708624720573425, 0.6654338836669922, 0.6922467350959778, 0.7082287669181824, 0.7269845604896545, 0.7543256878852844, 0.7535332441329956, 0.7531369924545288, 0.7623828053474426, 0.7707040309906006, 0.780610203742981, 0.7836481332778931, 0.793950617313385, 0.7940827012062073, 0.7947431206703186, 0.8088759779930115, 0.8029322624206543, 0.8153480291366577, 0.8170651197433472, 0.819442629814148, 0.8286884427070618, 0.8300092220306396, 0.8335754871368408, 0.8325188159942627, 0.8378021121025085, 0.8363492488861084, 0.8469158411026001, 0.8520671129226685, 0.8486329317092896, 0.8537842035293579, 0.848368763923645, 0.8552370667457581, 0.8562937378883362, 0.8610487580299377, 0.8588033318519592, 0.8647470474243164, 0.8636903762817383, 0.868049144744873, 0.8691058158874512, 0.868049144744873, 0.8753136992454529, 0.8778232932090759, 0.8708229064941406, 0.8730682730674744, 0.8770307898521423, 0.8755778670310974, 0.8798044919967651, 0.8844274282455444, 0.8759741187095642, 0.8819178342819214, 0.885219931602478, 0.8865407705307007, 0.8920882344245911, 0.8868049383163452, 0.8862766027450562, 0.8968431949615479, 0.8805969953536987, 0.8967111110687256, 0.8963148593902588, 0.8976356983184814, 0.8968431949615479, 0.9017302989959717, 0.9064852595329285, 0.8976356983184814, 0.9027869701385498, 0.9064852595329285, 0.9058248400688171, 0.9041078090667725, 0.9074098467826843, 0.9038436412811279, 0.9079381823539734, 0.9142781496047974, 0.9115044474601746, 0.9137498140335083, 0.9157310724258423, 0.9144102334976196, 0.9142781496047974, 0.9134856462478638, 0.9206181764602661, 0.9169198274612427, 0.9223352074623108, 0.91559898853302, 0.9241843819618225], "val_loss": [1.3165904794420515, 0.7983179603304181, 0.6296156815120152, 0.6296307018824986, 0.5972191435950143, 0.5315085819789341, 0.501286234174456, 0.5583796671458653, 0.4916448933737619, 0.47496172360011507, 0.4818165472575596, 0.46633209500994, 0.4618470328194754, 0.43868912969316753, 0.47659272806985037, 0.41171943289893015, 0.40924098661967684, 0.41274092878614155, 0.3963413919721331, 0.41281520468848093, 0.40423368556158884, 0.39743379184177946, 0.3767822640282767, 0.3695374131202698, 0.3884193216051374, 0.3956797293254307, 0.36349575008664814, 0.3863689388547625, 0.3534675581114633, 0.35620562519345966, 0.35617863280432566, 0.3553938354764666, 0.347503057547978, 0.35011949709483553, 0.34541222027369906, 0.34594141585486277, 0.353106609412602, 0.3442572184971401, 0.3460532171385629, 0.335939245564597, 0.3458320072719029, 0.3230784705707005, 0.34448063373565674, 0.34093826157706125, 0.32894461495535715, 0.33914572851998465, 0.31576071466718403, 0.32158646413258146, 0.34532407351902555, 0.33842326062066214, 0.32428071328571867, 0.3175831266811916, 0.3374900647572109, 0.3223401733807155, 0.33965355157852173, 0.3217624766486032, 0.36564717973981586, 0.3145454781396048, 0.3240354912621634, 0.3266355054719107, 0.3143328939165388, 0.33062784160886494, 0.32310742139816284, 0.31928421769823345, 0.3320895859173366, 0.31050470045634676, 0.31918640647615704, 0.3202071019581386, 0.3211566465241568, 0.3247763344219753, 0.31560246433530537, 0.32896275179726736, 0.3141935297421047, 0.31333179984773907, 0.3061690075056894, 0.3362707495689392, 0.3305735928671701, 0.31675603560038973, 0.3059241345950535, 0.31824598142078947, 0.34737605707986013, 0.33242415530341013, 0.3260710835456848, 0.32658467973981586], "val_accuracy": [0.4946666657924652, 0.6666666865348816, 0.7093333601951599, 0.7066666483879089, 0.7366666793823242, 0.7723333239555359, 0.7870000004768372, 0.7283333539962769, 0.7833333611488342, 0.7903333306312561, 0.7806666493415833, 0.7996666431427002, 0.7963333129882812, 0.8096666932106018, 0.7853333353996277, 0.8256666660308838, 0.8266666531562805, 0.8216666579246521, 0.8349999785423279, 0.8236666917800903, 0.8246666789054871, 0.8326666951179504, 0.8443333506584167, 0.847000002861023, 0.8306666612625122, 0.8296666741371155, 0.847000002861023, 0.8349999785423279, 0.8486666679382324, 0.8546666502952576, 0.8519999980926514, 0.8479999899864197, 0.8533333539962769, 0.8483333587646484, 0.8576666712760925, 0.8513333201408386, 0.8516666889190674, 0.8550000190734863, 0.8516666889190674, 0.8633333444595337, 0.8603333234786987, 0.8663333058357239, 0.8629999756813049, 0.8576666712760925, 0.8619999885559082, 0.8569999933242798, 0.8669999837875366, 0.8633333444595337, 0.862333357334137, 0.8543333411216736, 0.8679999709129333, 0.8673333525657654, 0.8646666407585144, 0.8696666955947876, 0.856333315372467, 0.8690000176429749, 0.846666693687439, 0.8700000047683716, 0.8706666827201843, 0.8616666793823242, 0.8733333349227905, 0.862666666507721, 0.8713333606719971, 0.8733333349227905, 0.862333357334137, 0.8743333220481873, 0.8703333139419556, 0.8723333477973938, 0.871999979019165, 0.8633333444595337, 0.8776666522026062, 0.8709999918937683, 0.8709999918937683, 0.8723333477973938, 0.8786666393280029, 0.8756666779518127, 0.8656666874885559, 0.875333309173584, 0.8813333511352539, 0.8756666779518127, 0.8730000257492065, 0.8683333396911621, 0.8766666650772095, 0.878000020980835]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [4, 5, 4, 2, 0, 2, 9, 8, 8, 1, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [0, 3, 3, 3, 0, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [59, 95, 52, 66, 2, 57, 35, 9, 54, 64], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.8205714225769043, "mapping_values": [1, 4, 4, 2, 2, 1, 13, 13, 9, 4, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), grad))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.sqrt(grad))))), tf.math.sqrt(grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.986886041810909, 1.2498392621760104, 0.9178162499772181, 0.8154829928447006, 0.7613194623186824, 0.7381249405153361, 0.6730934094444257, 0.6611953335998081, 0.6433206686270062, 0.6356352078065959, 0.6002758466855741, 0.593643811833605, 0.5835734851497937, 0.5646430519530644, 0.5373369500290968, 0.5370653032107108, 0.5117944876995888, 0.5188836941251729, 0.5001159420323299, 0.48020143944904425, 0.492753390099284, 0.4679840342235792, 0.46886033882963785, 0.45098570667048804, 0.44874702180460097, 0.4441644419390591, 0.4393680881216321, 0.42371146712147595, 0.40833584546035134, 0.40671395143859845, 0.4027098136775765, 0.4118603909996601, 0.39053265205810195, 0.4036562637000461, 0.36550001824269], "accuracy": [0.3353586196899414, 0.5739004015922546, 0.6565843224525452, 0.6989829540252686, 0.7140403985977173, 0.7223616242408752, 0.7478536367416382, 0.750759482383728, 0.7552502751350403, 0.7631752490997314, 0.7753269076347351, 0.7803460359573364, 0.7829877138137817, 0.7910447716712952, 0.7956677079200745, 0.7984414100646973, 0.8095363974571228, 0.806630551815033, 0.8164047002792358, 0.8173292875289917, 0.8203672170639038, 0.828292191028595, 0.8298771381378174, 0.8342359066009521, 0.8327829837799072, 0.8376700282096863, 0.8348963260650635, 0.8466516733169556, 0.8516708612442017, 0.8511425256729126, 0.8504821062088013, 0.8485008478164673, 0.8552370667457581, 0.8479725122451782, 0.8673887252807617], "val_loss": [1.3181513718196325, 0.7776131289345878, 0.6043423073632377, 0.6017321348190308, 0.6139161246163505, 0.5343666076660156, 0.5092030082430158, 0.5398600782666888, 0.4911328213555472, 0.48306080273219515, 0.4800821542739868, 0.4691741296223232, 0.4660931144441877, 0.43625705582754953, 0.46552724497658865, 0.41403636762074064, 0.4132860813822065, 0.40637262378420147, 0.3954953210694449, 0.4145727498190744, 0.3958509308951242, 0.3930536764008658, 0.3810733471597944, 0.36704273734773907, 0.39533538477761404, 0.39269531624657766, 0.36013838223048616, 0.3828790613583156, 0.3538809759276254, 0.3530934453010559, 0.3562595248222351, 0.3559417128562927, 0.3504138248307364, 0.34290677309036255, 0.3449717674936567], "val_accuracy": [0.500333309173584, 0.6776666641235352, 0.7293333411216736, 0.718999981880188, 0.721666693687439, 0.7693333625793457, 0.7696666717529297, 0.7490000128746033, 0.781333327293396, 0.7893333435058594, 0.781333327293396, 0.7979999780654907, 0.7910000085830688, 0.8096666932106018, 0.7929999828338623, 0.8276666402816772, 0.8243333101272583, 0.824999988079071, 0.8366666436195374, 0.8186666369438171, 0.8286666870117188, 0.8356666564941406, 0.8356666564941406, 0.847000002861023, 0.8223333358764648, 0.8293333053588867, 0.8519999980926514, 0.8336666822433472, 0.846666693687439, 0.8576666712760925, 0.8553333282470703, 0.8486666679382324, 0.8523333072662354, 0.8479999899864197, 0.8569999933242798]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [2, 2, 4, 2, 0, 0, 5, 2, 8, 0, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [90, 95, 52, 66, 2, 57, 35, 9, 54, 64], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.7877143025398254, "mapping_values": [1, 4, 4, 2, 2, 1, 16, 16, 10, 6, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.negative(tf.math.negative(grad))))), tf.math.square(grad))), tf.math.add(tf.math.sqrt(grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))))), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.940882955496857, 1.3708999537363533, 1.038430489789635, 0.8363456392190586, 0.8679890357319076, 0.7668249708487295, 0.7739360108666526, 0.6991270953764013, 0.691785380950835, 0.6565719449509089, 0.6540719423122756, 0.6096614528451818, 0.6158257964784443, 0.5936333493250489, 0.5817673120673748, 0.558599179132094, 0.5592171376438945], "accuracy": [0.3443402349948883, 0.5017831325531006, 0.6161669492721558, 0.6897371411323547, 0.6775855422019958, 0.7100779414176941, 0.7065116763114929, 0.7285695672035217, 0.7300224304199219, 0.744419515132904, 0.7425703406333923, 0.765949010848999, 0.763967752456665, 0.7714964747428894, 0.7755910754203796, 0.7841764688491821, 0.7885351777076721], "val_loss": [1.2932546138763428, 0.8525226967675346, 0.6853234427315849, 0.6992129257747105, 0.7139825310025897, 0.5829070806503296, 0.5558318410600934, 0.5664840425763812, 0.4999506303242275, 0.6140767165592739, 0.5025766917637416, 0.47528679030282156, 0.4886319637298584, 0.4805470364434378, 0.47630696637289865, 0.489203827721732, 0.4552097831453596], "val_accuracy": [0.445333331823349, 0.6463333368301392, 0.7083333134651184, 0.6626666784286499, 0.6916666626930237, 0.7306666374206543, 0.7336666584014893, 0.7393333315849304, 0.7900000214576721, 0.7323333621025085, 0.7689999938011169, 0.7990000247955322, 0.7760000228881836, 0.7776666879653931, 0.7786666750907898, 0.7746666669845581, 0.79666668176651]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [10, 66, 89, 50, 85, 46], [0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [4, 5, 4, 2, 0, 2, 9, 4, 6, 1, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [0, 3, 3, 3, 0, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [59, 95, 52, 66, 2, 57, 35, 9, 54, 64], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.4051428437232971, "mapping_values": [1, 4, 4, 2, 2, 1, 17, 17, 10, 7, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.square(tf.math.pow(tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(grad, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.pow(grad, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), grad)))))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3021581008245033, 2.301457047635664, 2.3014100599030716, 2.3007868999314423, 2.301646409175179, 2.299265874107642, 2.297551332006932, 2.2971674890849476, 2.294851984503467, 2.2950991619028485, 2.2950245224646983, 2.293827869258836, 2.294387107323095, 2.2937377581207774, 2.292926144181084, 2.2911892034563137, 2.290417703513409, 2.290184483630798, 2.289753144868471, 2.2883109046231644, 2.2869741905949543, 2.285118357128455, 2.285765132348551, 2.284429223797876, 2.285771520555673, 2.2845914641297047, 2.2829182871643576, 2.2825009030846086, 2.28084153206971, 2.281560660069881, 2.279294662597771, 2.2798506323970966, 2.2786899321524223, 2.277969059202854, 2.2772367232353807, 2.27722381865265, 2.277424837005861, 2.2759130576724123, 2.27520284059419, 2.2745182690855343, 2.2738994914999475, 2.2726175538804854, 2.271228411099725, 2.2728259593992344, 2.270519535570821, 2.2691905210046817, 2.2700707316004984, 2.2690780543222906, 2.268330766981178, 2.2655002116023306, 2.2659177932253036, 2.264445838989945, 2.2643219239959596, 2.2645279198211843, 2.2633833550443234, 2.262961959259432, 2.261867328358364, 2.258841562233329, 2.2594748390758546, 2.2599281393667616, 2.2589023002402313, 2.2573595015506043, 2.2562986179475755, 2.2569749981672724, 2.2558720685928377, 2.2541058440139783, 2.25460988875976, 2.252627617269538, 2.2511628449097003, 2.2531006440132555, 2.2496233694998344, 2.248756134971384, 2.2497215752179014, 2.247653307837266, 2.2488451018199282, 2.2454627668695397, 2.2456453802279825, 2.2441348042612175, 2.244719653443858, 2.2424041103488497, 2.2411228746644194, 2.2405875330320235, 2.240638899686645, 2.240062294918328, 2.2380594378685386, 2.239044666321774, 2.236819834205941, 2.236983888169101, 2.2351091759253046, 2.233982927244038, 2.233548719586005, 2.2321024758547146, 2.2298228463571084, 2.228406768323188, 2.2282874057667996, 2.227926403791866, 2.2262795616717246, 2.2269269724437635, 2.225733276843836, 2.2242147449205705], "accuracy": [0.09259014576673508, 0.09140139818191528, 0.09100515395402908, 0.09285431355237961, 0.09496764093637466, 0.09681680053472519, 0.1010434553027153, 0.10394927859306335, 0.10989301651716232, 0.10328886657953262, 0.10566636174917221, 0.10857218503952026, 0.11227050423622131, 0.10962884873151779, 0.11478008329868317, 0.11676132678985596, 0.11491216719150543, 0.11821424216032028, 0.12138422578573227, 0.1274600476026535, 0.1340641975402832, 0.1364416927099228, 0.1306300312280655, 0.13129045069217682, 0.1372341811656952, 0.1418570876121521, 0.14119666814804077, 0.1356491893529892, 0.146479994058609, 0.14515915513038635, 0.15440496802330017, 0.1504424810409546, 0.14951789379119873, 0.15717871487140656, 0.1620657742023468, 0.1620657742023468, 0.1558578759431839, 0.1558578759431839, 0.1644432693719864, 0.15902787446975708, 0.16655659675598145, 0.16655659675598145, 0.1690661758184433, 0.17250032722949982, 0.17355699837207794, 0.17778365314006805, 0.18016114830970764, 0.1850482076406479, 0.18055738508701324, 0.1970677524805069, 0.17712323367595673, 0.18874652683734894, 0.19270901381969452, 0.18874652683734894, 0.1846519559621811, 0.19878484308719635, 0.20063400268554688, 0.2056531459093094, 0.20195482671260834, 0.19944524765014648, 0.20235107839107513, 0.2078985571861267, 0.2118610441684723, 0.21001188457012177, 0.21080438792705536, 0.21463479101657867, 0.20803064107894897, 0.2215031087398529, 0.22335226833820343, 0.21371020376682281, 0.2277110069990158, 0.23259806632995605, 0.22784309089183807, 0.22665433585643768, 0.2281072586774826, 0.22995641827583313, 0.23695680499076843, 0.23405098915100098, 0.23920221626758575, 0.23893804848194122, 0.2436930388212204, 0.25056135654449463, 0.23973055183887482, 0.23735305666923523, 0.2526746690273285, 0.24541011452674866, 0.2550521790981293, 0.24963676929473877, 0.25941091775894165, 0.2583542466163635, 0.2569013237953186, 0.2576938271522522, 0.25941091775894165, 0.2723550498485565, 0.26984545588493347, 0.2681283950805664, 0.2723550498485565, 0.26178839802742004, 0.270109623670578, 0.275260865688324], "val_loss": [1.970277922494071, 1.9696178436279297, 1.968958922794887, 1.9682999338422502, 1.9676426478794642, 1.96698454448155, 1.9663259642464774, 1.965669768197196, 1.9650249481201172, 1.9643750190734863, 1.9637208666120256, 1.9630703926086426, 1.9624149458748954, 1.9617619514465332, 1.9611140659877233, 1.9604558263506209, 1.9598065784999303, 1.9591584205627441, 1.9585113525390625, 1.9578532491411482, 1.9572021620614188, 1.9565435818263464, 1.9558978080749512, 1.9552515574863978, 1.9546019690377372, 1.9539500645228796, 1.95329863684518, 1.9526464598519462, 1.9519947596958704, 1.9513445581708635, 1.9506794384547643, 1.9500222206115723, 1.9493673188345773, 1.9487064225333077, 1.9480462074279785, 1.9473762512207031, 1.946709496634347, 1.9460474422999792, 1.9453819138663155, 1.9447150911603654, 1.9440410477774483, 1.943368911743164, 1.94269745690482, 1.9420256614685059, 1.9413509368896484, 1.9406800270080566, 1.9399993760245187, 1.9393141610281808, 1.9386273111615862, 1.9379230226789201, 1.9372290202549525, 1.9365239824567522, 1.9358192852565221, 1.9351218768528529, 1.9344139780317033, 1.9337043081011092, 1.932990619114467, 1.9322594915117537, 1.9315416472298759, 1.9308174678257533, 1.9300923347473145, 1.9293641362871443, 1.9286249705723353, 1.927894183567592, 1.92715242930821, 1.926398822239467, 1.9256524358476912, 1.9248993056161063, 1.9241277830941337, 1.923368181501116, 1.9225944110325404, 1.9218202318464006, 1.9210540226527624, 1.920273780822754, 1.9194937433515276, 1.918694019317627, 1.9178991998944963, 1.917093072618757, 1.916290623801095, 1.9154840196881975, 1.9146652902875627, 1.9138436317443848, 1.9130189078194755, 1.9121836253574915, 1.9113523619515556, 1.910508632659912, 1.9096554347446986, 1.908797264099121, 1.9079367092677526, 1.9070628029959542, 1.9061908721923828, 1.9053076335362025, 1.9044129507882255, 1.9035077095031738, 1.902609212057931, 1.9016951152256556, 1.900780132838658, 1.899867057800293, 1.8989385196140833, 1.8979990822928292], "val_accuracy": [0.04233333468437195, 0.045666664838790894, 0.049666665494441986, 0.054999999701976776, 0.05900000035762787, 0.06366666406393051, 0.070333331823349, 0.07266666740179062, 0.07833333313465118, 0.08366666734218597, 0.08933333307504654, 0.09433333575725555, 0.10366666316986084, 0.10999999940395355, 0.11533333361148834, 0.12166666984558105, 0.1289999932050705, 0.13466666638851166, 0.14233332872390747, 0.1536666601896286, 0.16033333539962769, 0.16633333265781403, 0.17166666686534882, 0.17533333599567413, 0.1823333352804184, 0.18833333253860474, 0.19499999284744263, 0.20133332908153534, 0.20800000429153442, 0.21533332765102386, 0.22066666185855865, 0.22733333706855774, 0.234333336353302, 0.24166665971279144, 0.24666666984558105, 0.2549999952316284, 0.2593333423137665, 0.265666663646698, 0.2696666717529297, 0.27399998903274536, 0.27900001406669617, 0.28433331847190857, 0.2879999876022339, 0.2919999957084656, 0.29366666078567505, 0.2996666729450226, 0.30399999022483826, 0.3096666634082794, 0.31466665863990784, 0.31833332777023315, 0.3226666748523712, 0.3266666531562805, 0.3319999873638153, 0.3346666693687439, 0.3370000123977661, 0.33933332562446594, 0.34333333373069763, 0.3476666808128357, 0.35233333706855774, 0.35466668009757996, 0.3553333282470703, 0.3580000102519989, 0.3610000014305115, 0.36500000953674316, 0.367000013589859, 0.36933332681655884, 0.3733333349227905, 0.37533333897590637, 0.37533333897590637, 0.3763333261013031, 0.3776666522026062, 0.3790000081062317, 0.3816666603088379, 0.38333332538604736, 0.3840000033378601, 0.3853333294391632, 0.38733333349227905, 0.3889999985694885, 0.3903333246707916, 0.39233332872390747, 0.39366665482521057, 0.39399999380111694, 0.39666667580604553, 0.3973333239555359, 0.39766666293144226, 0.3986666798591614, 0.39899998903274536, 0.40033334493637085, 0.4026666581630707, 0.4036666750907898, 0.40566667914390564, 0.40666666626930237, 0.4076666533946991, 0.4086666703224182, 0.40966665744781494, 0.4103333353996277, 0.4103333353996277, 0.41100001335144043, 0.4126666784286499, 0.41466665267944336]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [10, 66, 89, 50, 85, 46], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [1, 0, 4, 0, 6, 2, 2, 8, 4, 1, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [59, 72, 52, 66, 2, 57, 35, 9, 54, 64], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.4051428437232971, "mapping_values": [1, 4, 4, 2, 2, 1, 22, 22, 13, 9, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.negative(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(alpha)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, grad)), tf.math.pow(tf.math.subtract(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), grad))), tf.math.add(beta, grad)))), tf.math.add(beta, grad)), grad)))))), tf.math.add(beta, tf.math.negative(tf.math.sqrt(tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [2.3021581008245033, 2.301457047635664, 2.3014100599030716, 2.3007868999314423, 2.3016464721572367, 2.299265842616613, 2.297551332006932, 2.297167507066325, 2.294851984503467, 2.2950991619028485, 2.2950245044833206, 2.293827963731922, 2.2943870443410375, 2.2937377896118063, 2.292926112690055, 2.2911892034563137, 2.29041767202238, 2.290184483630798, 2.2897531133774423, 2.2883109046231644, 2.2869741905949543, 2.285118357128455, 2.285765132348551, 2.2844291293247894, 2.2857715520467017, 2.2845914956207336, 2.282918255673329, 2.2825008715935797, 2.2808415005786813, 2.2815606915609097, 2.279294712070177, 2.279850645906748, 2.278689963643451, 2.277969059202854, 2.2772366737629746, 2.2772238546154044, 2.2774248999879187, 2.2759131026730923, 2.27520284059419, 2.274518237594506, 2.2738995859730338, 2.2726175538804854, 2.271228411099725, 2.2728259279082055, 2.270519535570821, 2.26919055249571, 2.2700707316004984, 2.269078099322971, 2.268330766981178, 2.2655002430933595, 2.2659178247163325, 2.264445838989945, 2.2643219239959596, 2.2645279198211843, 2.2633833550443234, 2.262961945749781, 2.261867328358364, 2.258841562233329, 2.2594747446027683, 2.2599281393667616, 2.2589023002402313, 2.2573595015506043, 2.2562985864565466, 2.2569749981672724, 2.2558720371018093, 2.254105781031921, 2.254609857268731, 2.252627617269538, 2.2511629123634838, 2.2531006440132555, 2.2496233244991544, 2.248756130499658, 2.2497216561813365, 2.247653339328295, 2.2488451018199282, 2.2454627668695397, 2.2456453802279825, 2.244134867243275, 2.244719558970772, 2.2424039843847345, 2.2411228746644194, 2.240587515050646, 2.240638881705267, 2.240062308427979, 2.2380594378685386, 2.2390447607948607, 2.236819802714912, 2.236983793696014, 2.2351091129432468, 2.2339828957530092, 2.233548701604627, 2.232102412872657, 2.2298227203929932, 2.228406768323188, 2.2282872933123357, 2.227926372300837, 2.2262795166710445, 2.2269268914803284, 2.225733276843836, 2.224214713429542], "accuracy": [0.09259014576673508, 0.09140139818191528, 0.09100515395402908, 0.09285431355237961, 0.09496764093637466, 0.09681680053472519, 0.1010434553027153, 0.10394927859306335, 0.10989301651716232, 0.10328886657953262, 0.10566636174917221, 0.10857218503952026, 0.11227050423622131, 0.10962884873151779, 0.11478008329868317, 0.11676132678985596, 0.11491216719150543, 0.11821424216032028, 0.12138422578573227, 0.1274600476026535, 0.1340641975402832, 0.1364416927099228, 0.1306300312280655, 0.13129045069217682, 0.1372341811656952, 0.1418570876121521, 0.14119666814804077, 0.1356491893529892, 0.146479994058609, 0.14515915513038635, 0.15440496802330017, 0.1504424810409546, 0.14951789379119873, 0.15717871487140656, 0.1620657742023468, 0.1620657742023468, 0.1558578759431839, 0.1558578759431839, 0.1644432693719864, 0.15902787446975708, 0.16655659675598145, 0.16655659675598145, 0.1690661758184433, 0.17250032722949982, 0.17355699837207794, 0.17778365314006805, 0.18016114830970764, 0.1850482076406479, 0.18055738508701324, 0.1970677524805069, 0.17712323367595673, 0.18874652683734894, 0.19270901381969452, 0.18874652683734894, 0.1846519559621811, 0.19878484308719635, 0.20063400268554688, 0.2056531459093094, 0.20195482671260834, 0.19944524765014648, 0.20235107839107513, 0.2078985571861267, 0.2118610441684723, 0.21001188457012177, 0.21080438792705536, 0.21463479101657867, 0.20803064107894897, 0.2215031087398529, 0.22335226833820343, 0.21371020376682281, 0.2277110069990158, 0.23259806632995605, 0.22784309089183807, 0.22665433585643768, 0.2281072586774826, 0.22995641827583313, 0.23695680499076843, 0.23405098915100098, 0.23920221626758575, 0.23893804848194122, 0.2436930388212204, 0.25056135654449463, 0.23973055183887482, 0.23735305666923523, 0.2526746690273285, 0.24541011452674866, 0.2550521790981293, 0.24963676929473877, 0.25941091775894165, 0.2583542466163635, 0.2569013237953186, 0.2576938271522522, 0.25941091775894165, 0.2723550498485565, 0.26984545588493347, 0.2681283950805664, 0.2723550498485565, 0.26178839802742004, 0.270109623670578, 0.275260865688324], "val_loss": [1.970277922494071, 1.9696178436279297, 1.968958922794887, 1.9682999338422502, 1.9676426478794642, 1.96698454448155, 1.9663259642464774, 1.965669768197196, 1.9650249481201172, 1.9643750190734863, 1.9637208666120256, 1.9630703926086426, 1.9624149458748954, 1.9617619514465332, 1.9611139978681291, 1.9604558263506209, 1.9598065784999303, 1.9591584205627441, 1.9585114206586565, 1.9578532491411482, 1.9572021620614188, 1.9565435818263464, 1.955897671835763, 1.9552515574863978, 1.9546020371573312, 1.9539500645228796, 1.95329863684518, 1.9526465279715401, 1.9519947596958704, 1.9513444900512695, 1.9506793703351701, 1.9500222887311662, 1.9493673188345773, 1.9487064225333077, 1.9480462755475725, 1.947376319340297, 1.946709428514753, 1.946047374180385, 1.9453819138663155, 1.9447151592799596, 1.9440410477774483, 1.943368911743164, 1.942697388785226, 1.9420257295880998, 1.9413509368896484, 1.9406800270080566, 1.9399992397853307, 1.9393141610281808, 1.9386273111615862, 1.9379230226789201, 1.9372290202549525, 1.9365239143371582, 1.9358192852565221, 1.9351218768528529, 1.9344139780317033, 1.933704239981515, 1.932990619114467, 1.9322594915117537, 1.9315417153494698, 1.9308173997061593, 1.9300923347473145, 1.9293641362871443, 1.9286249024527413, 1.927894183567592, 1.92715242930821, 1.9263988903590612, 1.9256524358476912, 1.9248993056161063, 1.9241278512137276, 1.9233681133815221, 1.9225944791521346, 1.9218201637268066, 1.9210540226527624, 1.9202738489423479, 1.9194937433515276, 1.918694019317627, 1.9178991998944963, 1.917093004499163, 1.916290623801095, 1.9154840196881975, 1.9146652902875627, 1.9138436998639787, 1.9130189078194755, 1.9121835572378976, 1.9113523619515556, 1.910508632659912, 1.9096555028642928, 1.908797264099121, 1.9079367092677526, 1.9070627348763602, 1.9061908721923828, 1.9053077016557967, 1.9044128145490373, 1.9035076413835799, 1.902609143938337, 1.9016950471060616, 1.900780132838658, 1.899866989680699, 1.8989385196140833, 1.8979990822928292], "val_accuracy": [0.04233333468437195, 0.045666664838790894, 0.049666665494441986, 0.054999999701976776, 0.05900000035762787, 0.06366666406393051, 0.070333331823349, 0.07266666740179062, 0.07833333313465118, 0.08366666734218597, 0.08933333307504654, 0.09433333575725555, 0.10366666316986084, 0.10999999940395355, 0.11533333361148834, 0.12166666984558105, 0.1289999932050705, 0.13466666638851166, 0.14233332872390747, 0.1536666601896286, 0.16033333539962769, 0.16633333265781403, 0.17166666686534882, 0.17533333599567413, 0.1823333352804184, 0.18833333253860474, 0.19499999284744263, 0.20133332908153534, 0.20800000429153442, 0.21533332765102386, 0.22066666185855865, 0.22733333706855774, 0.234333336353302, 0.24166665971279144, 0.24666666984558105, 0.2549999952316284, 0.2593333423137665, 0.265666663646698, 0.2696666717529297, 0.27399998903274536, 0.27900001406669617, 0.28433331847190857, 0.2879999876022339, 0.2919999957084656, 0.29366666078567505, 0.2996666729450226, 0.30399999022483826, 0.3096666634082794, 0.31466665863990784, 0.31833332777023315, 0.3226666748523712, 0.3266666531562805, 0.3319999873638153, 0.3346666693687439, 0.3370000123977661, 0.33933332562446594, 0.34333333373069763, 0.3476666808128357, 0.35233333706855774, 0.35466668009757996, 0.3553333282470703, 0.3580000102519989, 0.3610000014305115, 0.36500000953674316, 0.367000013589859, 0.36933332681655884, 0.3733333349227905, 0.37533333897590637, 0.37533333897590637, 0.3763333261013031, 0.3776666522026062, 0.3790000081062317, 0.3816666603088379, 0.38333332538604736, 0.3840000033378601, 0.3853333294391632, 0.38733333349227905, 0.3889999985694885, 0.3903333246707916, 0.39233332872390747, 0.39366665482521057, 0.39399999380111694, 0.39666667580604553, 0.3973333239555359, 0.39766666293144226, 0.3986666798591614, 0.39899998903274536, 0.40033334493637085, 0.4026666581630707, 0.4036666750907898, 0.40566667914390564, 0.40666666626930237, 0.4076666533946991, 0.4086666703224182, 0.40966665744781494, 0.4103333353996277, 0.4103333353996277, 0.41100001335144043, 0.4126666784286499, 0.41466665267944336]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 5, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [6, 1, 4, 2, 0, 0, 9, 2, 8, 0, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [2, 1, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [59, 95, 52, 66, 2, 57, 35, 9, 54, 64], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 13, 13, 8, 5, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(grad)), tf.math.negative(tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32))))), tf.math.add(grad, grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [19309691.921434738, 357613611.98256505, 1672130824.926694, 4668238813.307621, 10140997083.684586, 18454758234.585655], "accuracy": [0.09734513610601425, 0.09747721254825592, 0.09787346422672272, 0.09853387624025345, 0.09576013684272766, 0.09589222073554993], "val_loss": [70129684.57142857, 560352274.2857143, 1890422345.142857, 4480106934.857142, 8749114806.857143, 15117228909.714285], "val_accuracy": [0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 9, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [4, 5, 4, 2, 0, 0, 9, 9, 8, 1, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [0, 3, 3, 3, 0, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [59, 95, 52, 66, 2, 57, 35, 9, 54, 64], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 1, 4, 4, 2, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.0897924825579653e+19, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.052569013088941574, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [1, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [96, 66, 89, 50, 85, 46], [0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [6, 8, 4, 3, 0, 2, 9, 8, 8, 1, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [2, 3, 3, 0, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [90, 95, 52, 66, 2, 57, 35, 9, 54, 64], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 17, 17, 11, 6, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.negative(beta), tf.math.add(grad, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.math.sqrt(tf.math.subtract(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), grad)))))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [2, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [6, 8, 4, 2, 0, 2, 9, 8, 8, 1, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [3, 3, 3, 2, 0, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [59, 95, 52, 66, 2, 57, 35, 9, 54, 64], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [0, 0], [69, 2], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 17, 17, 11, 6, 2, 1, 0, 0, 0, 0, 6, 3, 3, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(grad, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.subtract(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))))))))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.square(tf.math.multiply(beta, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [4, 5, 4, 2, 0, 2, 9, 8, 8, 1, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [0, 3, 3, 3, 0, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [59, 95, 52, 66, 2, 57, 35, 9, 54, 64], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [0, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 4, 4, 2, 2, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3023668471391665, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 5, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [6, 8, 4, 2, 0, 8, 9, 8, 6, 1, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [2, 1, 2, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [59, 72, 52, 66, 2, 57, 35, 9, 54, 64], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [0, 0], [69, 2], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 10, 10, 6, 4, 0, 1, 1, 0, 1, 1, 6, 3, 3, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), tf.math.add(tf.math.add(beta, tf.math.negative(alpha)), beta)))), tf.math.sqrt(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.square(tf.math.multiply(beta, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 4, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [4, 0, 4, 4, 0, 2, 9, 8, 8, 1, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [0, 3, 3, 3, 0, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [59, 95, 52, 66, 2, 57, 35, 9, 54, 64], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 1, 12, 12, 8, 4, 2, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(grad, grad))), tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.sqrt(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0746268630027771, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 0, 4, 2, 0, 0, 9, 2, 8, 0, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [2, 1, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [59, 95, 52, 66, 2, 57, 35, 9, 54, 64], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 4, 4, 2, 2, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [1.089195492735326e+19, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.052569013088941574, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 4, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [50, 66, 89, 50, 85, 46], [0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [6, 8, 4, 2, 0, 2, 9, 8, 6, 1, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [2, 1, 2, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [59, 72, 52, 66, 2, 57, 35, 9, 54, 64], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [0, 0], [69, 2], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [2, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 0, 1, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 6, 3, 3, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [2, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [2, 0, 4, 2, 0, 0, 9, 2, 8, 0, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [1, 3, 3, 3, 0, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [59, 95, 52, 66, 2, 57, 35, 9, 54, 64], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [0, 0], [69, 2], [0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 9, 9, 3, 0, 1, 3, 2, 2, 5], [3, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 4, 4, 2, 2, 0, 1, 0, 0, 0, 0, 4, 2, 2, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(beta))", "other_info": {"loss": [2.3021756765030283, 3.11356736753658, 31.00903529161003, 91.57892021750573, 120.02719575526487, 241.28222563137325, 612.5234796224001, 1150.761011416146, 1776.9752813663465, 2534.697962930095], "accuracy": [0.1072513535618782, 0.10077928751707077, 0.09998679161071777, 0.09998679161071777, 0.1014397069811821, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.1002509593963623], "val_loss": [1.9771316392081124, 8.613613673618861, 56.74900817871094, 100.56524222237724, 122.05398995535714, 365.274405343192, 772.0508858816964, 1282.696323939732, 1837.4356863839287, 2685.95068359375], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [4, 5, 6, 2, 0, 2, 9, 8, 0, 1, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [0, 3, 3, 3, 0, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [59, 95, 52, 66, 2, 57, 35, 9, 54, 64], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [4, 5, 4, 2, 0, 2, 9, 8, 8, 1, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [0, 3, 3, 3, 0, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [90, 95, 52, 66, 2, 57, 35, 9, 54, 64], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [0, 0], [69, 2], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 13, 13, 9, 4, 2, 1, 0, 0, 0, 0, 6, 3, 3, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(grad, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(grad)))), grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.square(tf.math.multiply(beta, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 2, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [1, 0, 4, 0, 2, 5, 2, 8, 4, 1, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [0, 3, 0, 3, 0, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [59, 12, 52, 66, 2, 57, 35, 9, 54, 64], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [0, 0], [69, 2], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 11, 8, 1, 10, 10, 6, 4, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(grad, tf.math.pow(tf.math.add(alpha, grad), tf.math.negative(tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), alpha))))))))), tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, grad)), tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [5, 0, 2, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [3, 0, 2, 0, 1, 2, 2, 2, 0, 2, 3, 3, 0], [44, 66, 89, 50, 85, 46], [0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [4, 0, 4, 4, 0, 5, 9, 8, 8, 4, 6, 0, 8, 5, 0, 0, 2, 1, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [59, 95, 52, 66, 2, 57, 35, 9, 54, 64], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 1, 1, 0], [4, 7, 3, 4], [0, 0], [69, 2], [0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [7, 5, 3, 9, 3, 0, 1, 3, 2, 2, 5], [1, 2, 0, 2, 0, 2, 2], [40, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 6, 3, 3, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.square(tf.math.multiply(beta, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07568352669477463, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}]