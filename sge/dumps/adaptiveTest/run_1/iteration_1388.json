[{"genotype": [[0], [1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [40, 66, 89, 50, 85, 46], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 0, 0, 6, 4, 6, 2, 2, 5, 8, 4, 2, 0, 2, 0, 0, 2, 2, 8, 5, 2, 3, 9, 9, 1, 2, 4, 3, 9, 2, 6, 3, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 1, 1, 2, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [73, 37, 21, 97, 70, 57, 60, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1], [0, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 0, 0, 2, 0, 2, 2, 0], [30, 23, 13, 96, 41, 62]], "fitness": -0.8431428670883179, "mapping_values": [1, 3, 3, 1, 2, 1, 3, 3, 1, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [1.9407708709266098, 0.9942673647786333, 0.7523677844601915, 0.6749150806792172, 0.6299246604873079, 0.584583244051648, 0.5463028788771281, 0.5132277465538971, 0.48778016803255486, 0.4721138458312731, 0.4579107023075886, 0.4346025995590337, 0.4243708445671259, 0.40775743196149467, 0.3992506084409388, 0.38188702279015174, 0.37085770297485054, 0.36674354007026505, 0.3487132948308715, 0.3416012290556669, 0.3252507203707936, 0.313677446610892, 0.3064971669530195, 0.3100566006237411, 0.2940670921857315, 0.2888440462647333, 0.27729365682683804, 0.2713120592827684, 0.2687660657836777, 0.25734560050118505, 0.25279466149089297, 0.24220103046692845, 0.24074127868244977, 0.23572460608341597, 0.21655580075685263, 0.2166911773004741, 0.20536539883992108, 0.19958813702819245, 0.19789343584821428], "accuracy": [0.33707568049430847, 0.6370360851287842, 0.7147008180618286, 0.7457403540611267, 0.7582882046699524, 0.778761088848114, 0.7946110367774963, 0.8037247657775879, 0.817461371421814, 0.8212917447090149, 0.824329674243927, 0.834632158279419, 0.8408400416374207, 0.846387505531311, 0.847840428352356, 0.8529917001724243, 0.8601241707801819, 0.8615770936012268, 0.8668603897094727, 0.8676528930664062, 0.8782195448875427, 0.8829745054244995, 0.8848236799240112, 0.8820499181747437, 0.8886540532112122, 0.8887861371040344, 0.8914278149604797, 0.8951261639595032, 0.8963148593902588, 0.901862382888794, 0.9046360850334167, 0.9060890078544617, 0.9046360850334167, 0.9085986018180847, 0.9167877435684204, 0.9149385690689087, 0.9214106202125549, 0.9236560463905334, 0.9190331697463989], "val_loss": [0.7951641934258598, 0.5961762155805316, 0.5487833874566215, 0.5028139863695417, 0.5042431354522705, 0.44461590903145926, 0.4276030404227121, 0.41000535658427645, 0.39259423528398785, 0.38367306334631784, 0.3718841416495187, 0.36388411692210604, 0.3627336195537022, 0.36350308997290476, 0.3504985656057085, 0.34390608753476826, 0.33853135790143696, 0.3359631896018982, 0.3302602767944336, 0.3299592563084194, 0.32152611017227173, 0.32417191777910503, 0.3211374112537929, 0.3272633637700762, 0.335638233593532, 0.3247936112540109, 0.32788693053381784, 0.32321952070508686, 0.3314621022769383, 0.3183623382023403, 0.31812586954661776, 0.32347181013652254, 0.32792281252997263, 0.3209835631506784, 0.3285115786961147, 0.33223786524363924, 0.3435532365526472, 0.33017111676079886, 0.3338433248656137], "val_accuracy": [0.6553333401679993, 0.7243333458900452, 0.7446666955947876, 0.762333333492279, 0.7593333125114441, 0.7976666688919067, 0.8113333582878113, 0.8166666626930237, 0.8256666660308838, 0.8326666951179504, 0.8360000252723694, 0.8399999737739563, 0.8453333377838135, 0.8429999947547913, 0.8476666808128357, 0.8486666679382324, 0.8519999980926514, 0.8610000014305115, 0.8569999933242798, 0.8606666922569275, 0.8606666922569275, 0.8610000014305115, 0.8636666536331177, 0.8653333187103271, 0.862666666507721, 0.8606666922569275, 0.8640000224113464, 0.8629999756813049, 0.8693333268165588, 0.8690000176429749, 0.875, 0.871999979019165, 0.8690000176429749, 0.8766666650772095, 0.874666690826416, 0.874666690826416, 0.8653333187103271, 0.8679999709129333, 0.871999979019165]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [62, 66, 89, 50, 85, 46], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 2, 4, 2, 9, 1, 6, 5, 2, 0, 2, 8, 2, 0, 0, 2, 2, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [0, 5, 1, 0, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [31, 37, 34, 97, 2, 57, 35, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [3, 7, 7, 9, 3, 0, 1, 3, 2, 2, 5], [1, 0, 0, 2, 0, 2, 2], [30, 23, 13, 96, 41]], "fitness": -0.8411428332328796, "mapping_values": [1, 4, 4, 2, 2, 1, 38, 38, 24, 14, 6, 1, 0, 0, 0, 0, 7, 4, 3, 3], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.square(tf.math.add(tf.math.add(beta, tf.math.pow(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))), alpha)), tf.math.subtract(tf.math.divide_no_nan(tf.math.square(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.negative(grad)), grad)))), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, beta)))))))), tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.add(tf.math.add(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.252908188637615, 1.80548561009843, 1.2189931470043136, 0.8983694773072407, 0.8079967092623753, 0.7369572700857092, 0.6928324587766158, 0.6592835563914872, 0.6328350888456195, 0.6149700044829848, 0.6059112274934902, 0.5853885081324202, 0.57690263754971, 0.5659835666571594, 0.5559736568032475, 0.5404429557915172, 0.5252620803642235, 0.522823405216997, 0.505466238717204, 0.5033876584694449, 0.4987306892989948, 0.4852258980691457, 0.4761823982752199, 0.4682011150798903, 0.46465351204547145, 0.46530958821965307, 0.458292317936024, 0.45026838249219264, 0.4363898670141172, 0.42623729267534155, 0.4270081472096111, 0.42676931753874675, 0.4093407495083857, 0.4073313980715984, 0.4008972431099914, 0.4019243157007565, 0.3918227322341555, 0.39502265212117343, 0.3808955726661639, 0.39039906020949244, 0.37665345326800154, 0.371736254906689, 0.36231540623924846, 0.3603468218287142, 0.3597209554354056, 0.3486119210759426, 0.34025828058709245, 0.3421337075867059, 0.3342839558921895, 0.33241900245054695, 0.33281270229285814, 0.32661166253374585, 0.31104613401476955, 0.3175921668552562, 0.3131010191055762, 0.3066317435142906, 0.30271617158717956, 0.29992478948148993, 0.29905143994240163, 0.2996304498419801, 0.2881695933786633], "accuracy": [0.2078985571861267, 0.42570334672927856, 0.5691454410552979, 0.6729626059532166, 0.693831741809845, 0.7211728692054749, 0.7310791015625, 0.7474573850631714, 0.7572315335273743, 0.7703077793121338, 0.7666094303131104, 0.7721568942070007, 0.7810064554214478, 0.7845727205276489, 0.7862898111343384, 0.7976489067077637, 0.7971205711364746, 0.8020076751708984, 0.8058380484580994, 0.806630551815033, 0.8131026029586792, 0.8216879963874817, 0.8206313848495483, 0.8245938420295715, 0.8241975903511047, 0.8234050869941711, 0.8261788487434387, 0.8305375576019287, 0.8374059200286865, 0.8356888294219971, 0.8407079577445984, 0.8385946154594421, 0.8475762605667114, 0.8429533839225769, 0.8471800088882446, 0.8525954484939575, 0.8540483713150024, 0.8527275323867798, 0.8553691506385803, 0.8557654023170471, 0.8607845902442932, 0.8598600029945374, 0.8650112152099609, 0.86553955078125, 0.8661999702453613, 0.8709549307823181, 0.8697662353515625, 0.8721436858177185, 0.8702945709228516, 0.8741249442100525, 0.8729361891746521, 0.8784837126731873, 0.8816536664962769, 0.8804649114608765, 0.8798044919967651, 0.8790120482444763, 0.8848236799240112, 0.8848236799240112, 0.8849557638168335, 0.889050304889679, 0.8868049383163452], "val_loss": [1.7958030700683594, 0.9612386907849994, 0.6946121454238892, 0.6189044713973999, 0.5797364711761475, 0.5465307065418789, 0.51908620766231, 0.5043779270989555, 0.491741486958095, 0.4850924015045166, 0.469343968800136, 0.46186184883117676, 0.4489217485700335, 0.4422330175127302, 0.4423189503805978, 0.43662215982164654, 0.4241830621446882, 0.4152561511312212, 0.40800791127341135, 0.41095335142953054, 0.400672938142504, 0.3965263196400234, 0.3905165621212551, 0.38668155670166016, 0.3818192056247166, 0.37651841981070383, 0.37465051242283415, 0.37343817949295044, 0.36841128553662983, 0.3745741588728769, 0.36439667429242817, 0.3653051427432469, 0.3542500478880746, 0.3517680253301348, 0.3526138407843454, 0.3472731624330793, 0.3466637815747942, 0.3472605177334377, 0.3405425548553467, 0.3407293217522757, 0.3438170722552708, 0.3376647319112505, 0.33584639855793547, 0.33832465750830515, 0.32689952850341797, 0.32594415971211027, 0.33016947337559294, 0.32751651321138653, 0.32221777950014385, 0.3341831735202244, 0.325041583606175, 0.32097249371664865, 0.3190303530011858, 0.3225792135511126, 0.3278665712901524, 0.3172974331038339, 0.32270619698933195, 0.3219295144081116, 0.3194590466363089, 0.3195751394544329, 0.3229684659412929], "val_accuracy": [0.4490000009536743, 0.6386666893959045, 0.6963333487510681, 0.7266666889190674, 0.7329999804496765, 0.7446666955947876, 0.7603333592414856, 0.7736666798591614, 0.7716666460037231, 0.7756666541099548, 0.7836666703224182, 0.7943333387374878, 0.7913333177566528, 0.7996666431427002, 0.8069999814033508, 0.7956666946411133, 0.8166666626930237, 0.812666654586792, 0.8246666789054871, 0.8243333101272583, 0.8253333568572998, 0.8233333230018616, 0.8266666531562805, 0.8336666822433472, 0.8373333215713501, 0.8403333425521851, 0.8416666388511658, 0.8410000205039978, 0.8453333377838135, 0.8383333086967468, 0.8426666855812073, 0.8463333249092102, 0.8500000238418579, 0.8479999899864197, 0.8523333072662354, 0.8523333072662354, 0.8476666808128357, 0.8546666502952576, 0.8546666502952576, 0.8603333234786987, 0.8553333282470703, 0.8556666374206543, 0.859333336353302, 0.859000027179718, 0.8646666407585144, 0.8610000014305115, 0.8616666793823242, 0.8606666922569275, 0.8669999837875366, 0.8603333234786987, 0.8663333058357239, 0.8676666617393494, 0.8666666746139526, 0.8646666407585144, 0.8633333444595337, 0.8686666488647461, 0.8616666793823242, 0.8646666407585144, 0.8643333315849304, 0.8640000224113464, 0.8656666874885559]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [40, 66, 89, 50, 85, 46], [1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [8, 2, 2, 6, 4, 9, 2, 2, 5, 2, 4, 2, 0, 4, 0, 0, 2, 2, 8, 5, 2, 3, 9, 4, 1, 2, 4, 3, 9, 2, 6, 3, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 1, 1, 2, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [85, 37, 21, 97, 70, 57, 60, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 0, 0, 2, 0, 2, 2], [79, 34, 39, 96, 41, 89, 58, 81, 41]], "fitness": -0.8108571171760559, "mapping_values": [1, 3, 3, 1, 2, 1, 10, 10, 6, 4, 2, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))), alpha))), beta))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.1374659131247498, 1.414307564319857, 1.1137559035781384, 0.9563456185741699, 0.882838410259537, 0.8154400439940077, 0.78561938781276, 0.7309644566456467, 0.724867756797212, 0.6880692585174984, 0.6995935404793524, 0.6603101376749663, 0.6652867469757996, 0.6522574858375119, 0.6345158307197434, 0.6278307599052069, 0.6154710032275136, 0.6007114476720498, 0.6098305840124433, 0.5896018187777083, 0.6010615764954118, 0.5910328706777359, 0.5753404636660807, 0.5708579581568916, 0.5518951951756753, 0.5602633685420737, 0.563990262056685, 0.5451188009129445, 0.5310079065989101, 0.5350440798056455, 0.5137086994439194, 0.5307259588603094, 0.5223959779002489, 0.5200342436972674, 0.5060704969506395, 0.5041451225222818, 0.5056324339797862, 0.5048657947322869, 0.5034562280117922, 0.49439783599225207, 0.4861828598088403, 0.47966161476559627, 0.47725744158316913, 0.47421311316567644, 0.47105281490533896, 0.48475230348313314, 0.4729832935964647, 0.47477788606166776, 0.4564365681844884, 0.4527717176099038, 0.44751970078872416, 0.4566619496272461, 0.4424739768948805, 0.45115247984068535, 0.4452142812722017, 0.43795057688375366, 0.4376704393164073, 0.4335337562835637, 0.4285188638310564, 0.423523492096532, 0.4225446495791279, 0.42940297858227894, 0.4164295487431582, 0.4110692398871854, 0.4064590491402686, 0.39813696842514185, 0.40281631862403944, 0.40563419254590427, 0.4013164199700744, 0.40028440226039175, 0.39609095653003124, 0.39411264192694295, 0.38108337657673014], "accuracy": [0.2995641231536865, 0.5175009965896606, 0.605468213558197, 0.6400739550590515, 0.6811517477035522, 0.702681303024292, 0.711530864238739, 0.7240787148475647, 0.722757875919342, 0.7378153204917908, 0.7326641082763672, 0.7461365461349487, 0.7500990629196167, 0.7559106945991516, 0.7602694630622864, 0.7597411274909973, 0.7658169269561768, 0.7709681391716003, 0.7666094303131104, 0.7758552432060242, 0.7718927264213562, 0.7754589915275574, 0.7815347909927368, 0.7865539789199829, 0.791441023349762, 0.7893276810646057, 0.7854973077774048, 0.7928939461708069, 0.7996301651000977, 0.7971205711364746, 0.8084797263145447, 0.7961959838867188, 0.7993659973144531, 0.8031964302062988, 0.8043851256370544, 0.8092722296714783, 0.8109893202781677, 0.8104609847068787, 0.8096684813499451, 0.8181217908859253, 0.8146876096725464, 0.8207634687423706, 0.8214238286018372, 0.8210275769233704, 0.8257825970649719, 0.8146876096725464, 0.8208954930305481, 0.8169330358505249, 0.8245938420295715, 0.8300092220306396, 0.8318583965301514, 0.8248580098152161, 0.835160493850708, 0.8322546482086182, 0.8313300609588623, 0.8330471515655518, 0.8318583965301514, 0.8411042094230652, 0.8379341959953308, 0.8381983637809753, 0.8416325449943542, 0.8364813327789307, 0.8473120927810669, 0.8450667262077332, 0.8445383906364441, 0.8529917001724243, 0.8499537706375122, 0.8445383906364441, 0.8491612672805786, 0.850350022315979, 0.8450667262077332, 0.8552370667457581, 0.8560295701026917], "val_loss": [1.3429995604923792, 0.8570199523653302, 0.7420856952667236, 0.7198302745819092, 0.6658558334623065, 0.626994150025504, 0.5753870861870902, 0.5490302528653827, 0.566754834992545, 0.5305272340774536, 0.5337810346058437, 0.5310208116258893, 0.538691793169294, 0.49317095960889545, 0.4973293883459909, 0.5192274366106305, 0.48169851303100586, 0.49393400124141146, 0.4731102330344064, 0.4681437185832432, 0.4696966920580183, 0.46044150420597624, 0.4726585490362985, 0.4686345372881208, 0.4573057379041399, 0.4383170349257333, 0.4537912607192993, 0.4385969042778015, 0.4480899316923959, 0.43986137424196514, 0.4214090534618923, 0.43367585965565275, 0.4406681571687971, 0.4176804678780692, 0.421937210219247, 0.43701039041791645, 0.421896619456155, 0.4317707674843924, 0.4081266607557024, 0.40675911733082365, 0.4055020213127136, 0.4082937410899571, 0.40875778027943205, 0.4031069278717041, 0.40497166769845144, 0.3988591177122934, 0.39938471146992277, 0.4112891299383981, 0.4034550189971924, 0.3913343208176749, 0.39205399581364225, 0.3866713387625558, 0.37686944007873535, 0.38613899265016827, 0.3751655902181353, 0.3802461709295, 0.37060236079352243, 0.37474866424288067, 0.3719956023352487, 0.3677084616252354, 0.3804740480014256, 0.37505039998463224, 0.36600321531295776, 0.3622801218714033, 0.36283970730645315, 0.3697661927768162, 0.36450607436043875, 0.35552498272487093, 0.3578618424279349, 0.36295770747320993, 0.3600207141467503, 0.35706365959984915, 0.37005684205463957], "val_accuracy": [0.5486666560173035, 0.6043333411216736, 0.6520000100135803, 0.70333331823349, 0.7013333439826965, 0.6963333487510681, 0.7483333349227905, 0.753333330154419, 0.7276666760444641, 0.7586666941642761, 0.7543333172798157, 0.749666690826416, 0.7586666941642761, 0.7766666412353516, 0.7706666588783264, 0.7493333220481873, 0.7776666879653931, 0.7689999938011169, 0.7876666784286499, 0.7916666865348816, 0.7883333563804626, 0.800000011920929, 0.7763333320617676, 0.7863333225250244, 0.800000011920929, 0.8050000071525574, 0.793666660785675, 0.7990000247955322, 0.7950000166893005, 0.79666668176651, 0.812333345413208, 0.7979999780654907, 0.7913333177566528, 0.8130000233650208, 0.812333345413208, 0.8033333420753479, 0.8130000233650208, 0.7993333339691162, 0.824999988079071, 0.8246666789054871, 0.8223333358764648, 0.8199999928474426, 0.824999988079071, 0.8273333311080933, 0.812666654586792, 0.824999988079071, 0.8296666741371155, 0.8186666369438171, 0.8176666498184204, 0.8309999704360962, 0.8353333473205566, 0.8299999833106995, 0.8410000205039978, 0.8353333473205566, 0.8416666388511658, 0.8363333344459534, 0.8403333425521851, 0.8360000252723694, 0.8416666388511658, 0.843666672706604, 0.8303333520889282, 0.8399999737739563, 0.8416666388511658, 0.8473333120346069, 0.8456666469573975, 0.8399999737739563, 0.8413333296775818, 0.8519999980926514, 0.8496666550636292, 0.8450000286102295, 0.8489999771118164, 0.8516666889190674, 0.8386666774749756]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [40, 66, 89, 50, 85, 46], [0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [8, 5, 9, 6, 4, 9, 2, 2, 5, 2, 4, 2, 0, 4, 0, 0, 2, 2, 8, 5, 2, 3, 9, 4, 1, 2, 4, 3, 9, 2, 6, 3, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 1, 1, 2, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [73, 37, 21, 97, 70, 57, 60, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 0, 0, 2, 0, 2, 2], [79, 34, 39, 96, 41, 89, 58, 81, 41]], "fitness": -0.8088571429252625, "mapping_values": [1, 5, 5, 3, 2, 1, 3, 3, 2, 1, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.negative(grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.square(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.114483693020455, 1.347617543589217, 1.0369609081198778, 0.8958049290814121, 0.8479461364616351, 0.7738134903662776, 0.7642770296688707, 0.7038610358405752, 0.7005869194879004, 0.6657979177241438, 0.6689837980641979, 0.6368627889344343, 0.6363022634066988, 0.6348908552089308, 0.6154986919192842, 0.5944490267175174, 0.5923906662570897, 0.5879780103690777, 0.5781044482224338, 0.5689355681569522, 0.57810144250608, 0.5708375441998129, 0.5522758079447436, 0.5438460495178773, 0.5326362562579502, 0.5381262263034896, 0.5468033224584372, 0.5239270441347282, 0.5145666678631075, 0.5082630733331401, 0.4935769954094278, 0.509163077272649, 0.48893537388785074, 0.49458102904542595, 0.4842815318080523, 0.4804947782800403, 0.4889189996865479, 0.47686905474191044, 0.47706743565060444, 0.47245958293937595, 0.4705142655928121, 0.45881546414003965, 0.4556499121526386, 0.454972702325406, 0.44962600348270043, 0.45508555544602036, 0.45123214018485014, 0.4480189779738173, 0.43292093538353077], "accuracy": [0.3077532649040222, 0.535332202911377, 0.6259410977363586, 0.665830135345459, 0.6914542317390442, 0.7170783281326294, 0.7181349992752075, 0.7334566116333008, 0.7339849472045898, 0.7474573850631714, 0.7448157668113708, 0.757099449634552, 0.761590301990509, 0.7609298825263977, 0.7651565074920654, 0.7729493975639343, 0.7738739848136902, 0.7753269076347351, 0.778761088848114, 0.785629391670227, 0.7799497842788696, 0.7872143983840942, 0.7909126877784729, 0.7988376617431641, 0.7980451583862305, 0.7967243194580078, 0.7922335267066956, 0.802800178527832, 0.8031964302062988, 0.8094043135643005, 0.8145555257797241, 0.8030643463134766, 0.8187822103500366, 0.8144234418869019, 0.8158763647079468, 0.8191784620285034, 0.8173292875289917, 0.8235371708869934, 0.8214238286018372, 0.8259146809577942, 0.8227446675300598, 0.8290846943855286, 0.8300092220306396, 0.8313300609588623, 0.8343679904937744, 0.8278959393501282, 0.8280280232429504, 0.8280280232429504, 0.8355567455291748], "val_loss": [1.2464871747153146, 0.8367575236729213, 0.7434165818350655, 0.6911766188485282, 0.6042378289358956, 0.6150593757629395, 0.5586650030953544, 0.5302345412118095, 0.5517408507210868, 0.5241279261452811, 0.5087722029004779, 0.5050474745886666, 0.498767478125436, 0.5003701107842582, 0.48071530887058805, 0.47556606360844206, 0.4776347705296108, 0.4750444378171648, 0.4626523086002895, 0.4495113066264561, 0.45918010813849314, 0.44876073939459665, 0.45110934121268137, 0.45588016510009766, 0.45749058042253765, 0.4265509673527309, 0.4328370860644749, 0.42252359219959806, 0.4243954505239214, 0.4212002158164978, 0.4100839240210397, 0.4157148855073111, 0.4197896889277867, 0.4017630049160549, 0.4050681931631906, 0.43497248206819805, 0.4033069099698748, 0.4078513639313834, 0.39470759459904264, 0.39415526390075684, 0.39235282795769827, 0.4025371585573469, 0.3912861432347979, 0.3861351098333086, 0.3850136995315552, 0.38357373646327425, 0.382194493498121, 0.38982505457741873, 0.38604643515178133], "val_accuracy": [0.5600000023841858, 0.6240000128746033, 0.6526666879653931, 0.7070000171661377, 0.7390000224113464, 0.7026666402816772, 0.7506666779518127, 0.7599999904632568, 0.734000027179718, 0.7553333044052124, 0.7699999809265137, 0.7696666717529297, 0.7770000100135803, 0.7573333382606506, 0.778333306312561, 0.7839999794960022, 0.7773333191871643, 0.7853333353996277, 0.7956666946411133, 0.8033333420753479, 0.7876666784286499, 0.8080000281333923, 0.7896666526794434, 0.7946666479110718, 0.796999990940094, 0.8143333196640015, 0.8066666722297668, 0.8056666851043701, 0.8086666464805603, 0.812333345413208, 0.8209999799728394, 0.8119999766349792, 0.8119999766349792, 0.8206666707992554, 0.8263333439826965, 0.7993333339691162, 0.8266666531562805, 0.8143333196640015, 0.831333339214325, 0.8270000219345093, 0.8263333439826965, 0.8216666579246521, 0.8339999914169312, 0.8356666564941406, 0.8296666741371155, 0.8286666870117188, 0.8336666822433472, 0.8289999961853027, 0.8259999752044678]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [40, 66, 89, 50, 85, 46], [0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [8, 5, 2, 6, 4, 9, 2, 2, 5, 2, 4, 2, 0, 4, 0, 0, 2, 2, 8, 5, 2, 3, 9, 4, 1, 2, 4, 3, 9, 2, 6, 3, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 1, 1, 2, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [73, 37, 21, 97, 70, 57, 60, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 0, 0, 2, 0, 2, 2], [79, 34, 39, 96, 41, 89, 58, 81, 41]], "fitness": -0.7954285740852356, "mapping_values": [1, 3, 3, 1, 2, 1, 9, 9, 5, 4, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, alpha))), beta))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.1362658221849817, 1.4242337488180232, 1.102409241898909, 0.977096924944293, 0.8623134210802198, 0.799828855171967, 0.7752855658814608, 0.7429458037611201, 0.7124642182208953, 0.6843984636254613, 0.6978308749220957, 0.6684299957530216, 0.6616983001714904, 0.6149363782758238, 0.6342326367236777, 0.6032204565953396, 0.6204301860543164, 0.5942915360830905, 0.6037364340713389], "accuracy": [0.2981112003326416, 0.50350022315979, 0.6038832664489746, 0.641791045665741, 0.6757363677024841, 0.7009642124176025, 0.7108704447746277, 0.7201162576675415, 0.7263241410255432, 0.7440232634544373, 0.7327961921691895, 0.7490423917770386, 0.7452120184898376, 0.7732135653495789, 0.7625148296356201, 0.7759873270988464, 0.7635715007781982, 0.7757231593132019, 0.7713643908500671], "val_loss": [1.344895907810756, 0.9913579395839146, 0.7812942777361188, 0.708324807030814, 0.5999770164489746, 0.5720825706209455, 0.5708298172269549, 0.5758077757699149, 0.5372973510197231, 0.53989006791796, 0.5086631264005389, 0.5386482988085065, 0.49976493631090435, 0.4812790666307722, 0.49445743220193045, 0.473226683480399, 0.5082001175199237, 0.5236742326191494, 0.48840294565473286], "val_accuracy": [0.5413333177566528, 0.550000011920929, 0.6539999842643738, 0.656333327293396, 0.7406666874885559, 0.7459999918937683, 0.750333309173584, 0.7233333587646484, 0.7566666603088379, 0.7523333430290222, 0.7703333497047424, 0.7363333106040955, 0.7736666798591614, 0.7953333258628845, 0.7796666622161865, 0.7853333353996277, 0.7603333592414856, 0.762333333492279, 0.7713333368301392]}}, {"genotype": [[0], [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [40, 66, 89, 50, 85, 46], [0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [8, 5, 2, 6, 4, 9, 2, 2, 5, 2, 4, 2, 0, 4, 0, 0, 2, 2, 8, 5, 2, 3, 9, 4, 1, 2, 4, 3, 9, 2, 6, 3, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 1, 1, 2, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [73, 37, 21, 97, 70, 57, 60, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 0, 0, 2, 0, 2, 2], [79, 34, 39, 96, 41, 89, 58, 81, 41]], "fitness": -0.6285714507102966, "mapping_values": [1, 3, 3, 1, 2, 1, 9, 9, 6, 3, 2, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)))), alpha))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [1.930363159893904, 1.0199627068458121, 0.8635858786876065, 0.739280380152157, 0.6707150296307731, 0.6403673264045348, 0.62687940406856, 0.5845073908941385, 0.5751101741732828, 0.5525552605310404, 0.5351552856817159, 0.5515476486166754, 0.5471627419540643, 0.545746964415413, 0.5572090410143865], "accuracy": [0.34301942586898804, 0.6350548267364502, 0.674679696559906, 0.7164179086685181, 0.7474573850631714, 0.7601373791694641, 0.7643640041351318, 0.7751948237419128, 0.774798572063446, 0.7944789528846741, 0.8033285140991211, 0.8004226684570312, 0.7994980812072754, 0.8055738806724548, 0.7928939461708069], "val_loss": [0.8747089590345111, 0.6677036455699376, 0.5733964954103742, 0.5277851479394096, 0.4848389284951346, 0.48867968150547575, 0.45041423184531076, 0.4534933226449149, 0.432000960622515, 0.42581553970064434, 0.4523219551358904, 0.42788303749901907, 0.4326774222510202, 0.45125130244663786, 0.4491938863481794], "val_accuracy": [0.6489999890327454, 0.6869999766349792, 0.7416666746139526, 0.765333354473114, 0.7803333401679993, 0.778333306312561, 0.7976666688919067, 0.8019999861717224, 0.8059999942779541, 0.8196666836738586, 0.8116666674613953, 0.8153333067893982, 0.8190000057220459, 0.8050000071525574, 0.8149999976158142]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [1, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 1, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [40, 66, 89, 50, 85, 46], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 0, 0, 6, 4, 6, 2, 2, 5, 8, 4, 2, 0, 2, 0, 0, 2, 2, 8, 5, 2, 3, 9, 9, 1, 2, 4, 3, 9, 2, 6, 3, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [2, 4, 1, 0, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [50, 37, 21, 97, 70, 57, 60, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 0, 0, 2, 0, 2, 2], [79, 34, 39, 96, 41, 89, 58, 81, 41]], "fitness": -0.26085713505744934, "mapping_values": [1, 1, 1, 0, 1, 0, 36, 36, 24, 12, 5, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta))), tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.negative(grad)), grad)))), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))), tf.math.square(beta)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, beta))), tf.math.add(beta, grad))))))), tf.math.add(beta, tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))))))), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [3.440132134122273, 2.3040993496443005, 2.3031850327842065, 2.3011907362241977, 2.322472513092035, 2.3058230031703393, 2.260718780816617, 2.2311072342935225, 2.30605191111234, 2.3034446827408943, 2.3031983033871652, 2.303121040777807], "accuracy": [0.16523577272891998, 0.09668471664190292, 0.10210011899471283, 0.10976093262434006, 0.15189538896083832, 0.10632677376270294, 0.1764628142118454, 0.1938977688550949, 0.09206181764602661, 0.10355303436517715, 0.1022322028875351, 0.09417514503002167], "val_loss": [1.974691390991211, 1.9735631942749023, 1.9727694647652763, 1.969534192766462, 1.983628749847412, 1.951507636478969, 1.9681769098554338, 1.9786413056509835, 1.9744806970868791, 1.9737961632864816, 1.9736984797886439, 1.9736792700631278], "val_accuracy": [0.10466666519641876, 0.11999999731779099, 0.10466666519641876, 0.10000000149011612, 0.10000000149011612, 0.10199999809265137, 0.18533332645893097, 0.0976666659116745, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.0989999994635582]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [70, 66, 89, 50, 85, 46], [0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [8, 0, 1, 6, 4, 9, 4, 2, 5, 2, 4, 2, 0, 2, 0, 0, 5, 2, 8, 5, 3, 3, 9, 4, 1, 2, 4, 3, 9, 2, 6, 3, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [1, 1, 1, 2, 3, 0, 3, 3, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [31, 37, 21, 97, 70, 57, 60, 9, 54, 64], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 0, 0, 2, 0, 2, 2], [79, 34, 39, 96, 41, 89, 58, 81, 41]], "fitness": -0.16542857885360718, "mapping_values": [1, 3, 3, 1, 2, 1, 29, 29, 19, 10, 2, 1, 1, 1, 0, 1, 2, 1, 1, 0], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.negative(tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.math.pow(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))))), tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, alpha), tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, grad)))), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.negative(tf.math.square(tf.math.add(beta, tf.math.add(grad, tf.math.sqrt(tf.math.add(beta, grad))))))))))), beta), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [3.3696464388173064, 2.303925351097662, 2.3024541196443966, 2.289014901656359, 2.485508002593706, 2.3047538505270024, 2.3033755192462526, 2.303234052223505, 2.3029613212083606], "accuracy": [0.16417910158634186, 0.09972262382507324, 0.10474177449941635, 0.15731078386306763, 0.14753665030002594, 0.09245806187391281, 0.10130762308835983, 0.09549596905708313, 0.09721305221319199], "val_loss": [1.9745194571358817, 1.9733330181666784, 1.9706804411751884, 1.8059535707746233, 1.9748221124921526, 1.9741404397147042, 1.9739789962768555, 1.973651545388358, 1.9734223910740443], "val_accuracy": [0.10466666519641876, 0.09833333641290665, 0.10466666519641876, 0.17900000512599945, 0.10000000149011612, 0.10000000149011612, 0.0976666659116745, 0.10233332961797714, 0.09933333098888397]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [4, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [40, 66, 89, 50, 85, 46], [1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [8, 3, 3, 6, 4, 9, 2, 2, 5, 2, 4, 2, 0, 4, 0, 0, 2, 2, 8, 5, 2, 3, 9, 4, 1, 2, 4, 3, 9, 2, 6, 3, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 1, 1, 2, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [73, 37, 21, 97, 70, 57, 60, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 0, 0, 2, 0, 2, 2, 1, 3, 0, 2], [79, 34, 39, 96, 41, 89, 58, 81, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 44, 44, 27, 17, 5, 1, 0, 0, 0, 0, 23, 12, 11, 4], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(alpha, alpha))), tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, beta)), tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.negative(tf.math.add(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), grad)))), tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.square(grad))), tf.math.add(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), beta))))))))), tf.math.add(beta, grad))), tf.math.add(beta, beta))), tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.add(beta, grad), grad), tf.math.add(beta, tf.math.add(tf.math.pow(grad, grad), tf.math.add(beta, beta))))))))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.math.add(tf.math.subtract(tf.math.pow(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.subtract(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), tf.math.subtract(beta, tf.math.sqrt(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), beta)))), beta)), tf.math.add(tf.math.pow(alpha, sigma), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [5, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [62, 66, 89, 50, 85, 46], [0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [8, 5, 2, 8, 4, 9, 2, 2, 5, 2, 4, 2, 0, 4, 0, 0, 2, 2, 8, 5, 2, 3, 9, 4, 1, 2, 4, 3, 9, 2, 6, 3, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 1, 1, 2, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [73, 37, 21, 97, 70, 57, 60, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 0, 0, 2, 0, 2, 2], [30, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 5, 5, 3, 2, 1, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.3024875522525856, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [62, 66, 89, 50, 85, 46], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [8, 3, 2, 6, 4, 9, 2, 2, 5, 2, 4, 2, 0, 4, 0, 0, 2, 2, 8, 5, 2, 3, 9, 4, 1, 2, 4, 3, 9, 2, 6, 3, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 1, 1, 2, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [31, 37, 21, 97, 7, 57, 60, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 0, 0, 2, 0, 2, 2], [79, 34, 39, 96, 41, 89, 58, 81, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 1, 10, 10, 6, 4, 2, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.negative(tf.math.add(alpha, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)))), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.pow(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07475894689559937, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [40, 66, 89, 50, 85, 46], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [8, 5, 2, 2, 8, 9, 2, 2, 5, 2, 4, 2, 0, 4, 0, 0, 2, 2, 8, 5, 2, 3, 9, 4, 1, 2, 4, 3, 9, 2, 6, 3, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 5, 1, 0, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [56, 18, 81, 35, 64, 57, 88, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 0, 0, 2, 0, 2, 2], [79, 34, 39, 96, 41, 89, 58, 81, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 8, 8, 6, 2, 2, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)))), tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.3024875522525856, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [62, 66, 89, 50, 85, 46], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 3, 2, 4, 2, 9, 1, 6, 5, 2, 0, 2, 8, 2, 0, 0, 2, 2, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [0, 3, 1, 0, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [31, 37, 34, 97, 2, 57, 35, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [3, 7, 7, 2, 3, 0, 1, 3, 2, 2, 5], [1, 2, 3, 2, 0, 2, 2, 2, 1, 1, 2, 1, 3, 3], [79, 34, 39, 96, 41, 89, 58, 81, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 5, 5, 2, 3, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(beta, grad), alpha))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07475894689559937, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 6, 1, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [2, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [62, 66, 89, 50, 85, 46], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 8, 2, 9, 2, 9, 1, 6, 5, 2, 0, 2, 8, 2, 0, 0, 2, 2, 2, 6, 5, 3, 9, 2, 1, 2, 4, 3, 9, 2, 6, 3, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 5, 1, 0, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [31, 37, 34, 97, 2, 57, 35, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 7, 7, 6, 3, 0, 1, 3, 2, 2, 5, 7, 2, 0, 1, 7, 6, 3, 7, 6, 3, 4, 1, 7, 5, 6, 9], [1, 0, 0, 2, 0, 2, 2, 1, 3, 0, 1, 3, 0, 0, 1, 2, 2, 1, 0, 3, 0, 0, 0], [79, 34, 39, 96, 26, 16, 88, 81, 41, 54]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 18, 10, 8, 1, 34, 34, 23, 11, 7, 1, 0, 0, 0, 0, 49, 26, 23, 10], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), grad)), tf.math.add(alpha, tf.math.sqrt(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(alpha, alpha), tf.math.pow(tf.math.negative(tf.math.subtract(tf.math.add(alpha, alpha), grad)), tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)))), tf.math.subtract(grad, tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(beta, tf.math.add(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.add(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), grad))))), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.square(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), beta))), tf.math.add(beta, grad)))))))))))), tf.math.add(beta, beta))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.add(tf.math.add(tf.math.divide_no_nan(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.negative(tf.math.subtract(tf.math.multiply(beta, tf.math.add(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), beta), beta)), tf.math.square(alpha))), tf.math.add(sigma, tf.math.add(tf.math.negative(tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)), alpha)))), tf.math.subtract(sigma, tf.math.add(tf.math.divide_no_nan(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(tf.math.divide_no_nan(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.math.pow(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.square(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)))))), sigma), tf.math.divide_no_nan(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 0, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [40, 66, 89, 50, 85, 46], [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 0, 2, 9, 2, 9, 1, 6, 5, 2, 0, 2, 8, 2, 0, 0, 2, 2, 2, 6, 5, 3, 9, 2, 1, 2, 4, 3, 9, 2, 6, 3, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 4, 1, 0, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [31, 37, 80, 97, 2, 57, 35, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [3, 7, 8, 9, 1, 4, 1, 3, 2, 4, 5, 0, 2, 8, 5], [0, 0, 0, 2, 0, 2, 2, 0, 1, 0], [30, 23, 13, 96, 41, 62]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 2, 4, 4, 2, 2, 1, 1, 0, 0, 0, 0, 6, 4, 2, 3], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.negative(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.add(tf.math.sqrt(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3024875522525856, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [98, 66, 89, 50, 85, 46], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 2, 9, 2, 9, 1, 6, 5, 2, 0, 2, 8, 2, 0, 0, 2, 2, 2, 6, 5, 3, 9, 2, 1, 2, 4, 3, 9, 2, 6, 3, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [1, 3, 1, 3, 0, 3, 3, 2, 2, 0, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [45, 32, 34, 35, 64, 57, 88, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 0, 0, 2, 0, 2, 2], [30, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 6, 6, 3, 3, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.square(tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad))), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.3024875522525856, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [40, 66, 89, 50, 85, 46], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 0, 6, 4, 9, 2, 2, 5, 8, 4, 2, 0, 2, 0, 0, 2, 2, 8, 5, 2, 3, 9, 9, 1, 2, 4, 3, 9, 2, 6, 3, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 2, 1, 0, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [56, 18, 81, 35, 64, 57, 88, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 7, 7, 1, 4, 1, 1, 1, 8, 2, 2, 4, 5, 3, 3, 1, 0, 0, 2, 2, 1, 0, 5, 6, 7, 6, 2, 5, 5, 4, 3, 1, 0, 4, 2, 3, 4, 5, 8, 7, 0, 0, 6, 4, 6, 0, 7, 2, 6, 6, 1, 3, 8], [1, 0, 0, 2, 0, 2, 2], [79, 34, 39, 96, 41, 89, 58, 81, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 1, 34, 34, 23, 11, 6, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.square(tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), alpha)))), tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.negative(tf.math.add(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), grad)))), tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.square(grad))), tf.math.add(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), beta))))))))), tf.math.add(beta, grad))), tf.math.add(beta, beta))))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.3024875522525856, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [40, 66, 89, 50, 85, 46], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 2, 9, 2, 9, 1, 6, 5, 2, 0, 2, 8, 2, 0, 0, 2, 2, 2, 6, 5, 3, 9, 2, 1, 2, 4, 3, 9, 2, 6, 3, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [0, 0, 1, 0, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [31, 37, 34, 97, 2, 57, 35, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1], [3, 7, 7, 9, 3, 0, 4, 3, 2, 1, 8, 4, 8, 2, 8, 1, 9, 2, 3], [1, 0, 0, 2, 0, 2, 2, 2, 2, 1, 2, 1, 3, 3], [73, 34, 39, 96, 41, 89, 58, 81, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 1, 4, 4, 2, 2, 2, 1, 0, 0, 0, 0, 27, 17, 10, 5], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.negative(grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(beta, tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.add(tf.math.add(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.pow(tf.math.multiply(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.sqrt(beta), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))), beta), tf.math.pow(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(beta))))))), tf.math.subtract(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 2, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [40, 66, 89, 50, 85, 46], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 2, 9, 2, 9, 1, 6, 5, 2, 0, 2, 8, 2, 0, 0, 2, 2, 2, 6, 5, 3, 9, 2, 1, 2, 4, 3, 9, 2, 6, 3, 0, 0, 2, 0, 7, 2, 6, 0, 4, 1, 6, 0, 2], [4, 4, 1, 0, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [31, 31, 34, 97, 2, 57, 35, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [3, 7, 1, 9, 3, 0, 1, 3, 2, 2, 5, 5, 7, 9], [1, 1, 0, 2, 0, 2, 2, 0], [30, 23, 13, 96, 41]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 8, 8, 6, 2, 2, 1, 0, 0, 0, 0, 7, 4, 3, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.square(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(grad, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.add(tf.math.subtract(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), alpha), tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [9868.57025441719, 177528.772020704, 827852.0354807819, 2268633.0634658565, 4872590.243560956, 9028632.936468102], "accuracy": [0.09589222073554993, 0.09694888442754745, 0.09681680053472519, 0.09787346422672272, 0.09893012791872025, 0.0944393053650856], "val_loss": [35481.46763392857, 278681.1160714286, 935219.1071428572, 2210706.0, 4310755.428571428, 7440983.714285715], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 0, 8, 2, 4, 0, 1, 5, 3, 1, 2, 6, 3, 6, 5, 8], [0, 3, 0, 1, 1, 2, 2, 2, 0, 2, 3, 3, 0], [62, 66, 89, 50, 85, 46], [1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [3, 5, 2, 4, 2, 9, 1, 6, 5, 2, 0, 2, 8, 2, 0, 0, 2, 2, 2, 6, 5, 3, 9, 2, 1, 2, 2, 3, 9, 0, 6, 3, 0, 0, 8, 0, 7, 2, 6, 0, 2, 1, 6, 0, 2], [0, 2, 1, 0, 0, 3, 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 4, 3, 0, 1, 4, 1, 1, 1, 5, 1, 3, 3, 4, 2, 1, 4, 4], [31, 37, 34, 97, 2, 57, 35, 9, 54, 64], [1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1], [9, 2, 4, 6, 6, 7, 4], [4, 4, 2], [80, 2, 82], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1], [3, 7, 7, 9, 3, 0, 1, 3, 2, 2, 9, 2, 1, 2, 4, 4], [1, 0, 0, 2, 0, 2, 2, 2, 0, 3, 1, 0], [30, 72, 13, 41, 41, 81, 53]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 10, 10, 6, 4, 3, 1, 0, 0, 0, 0, 28, 16, 12, 7], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, beta), alpha), tf.math.add(tf.constant(7.41067363e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.add(tf.math.add(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.negative(tf.math.subtract(tf.math.multiply(tf.math.add(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), beta)), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), beta)), tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.pow(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))), sigma), tf.math.pow(alpha, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582, 0.0989999994635582]}}]