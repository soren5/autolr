[{"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [4, 8, 0, 0, 0, 9, 3, 9], [1, 5, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 2, 8, 4], [2], [64], [0, 1, 0, 0, 1, 1], [3, 1, 9, 1, 2], [1, 0, 2], [15, 52, 13]], "fitness": -0.8437142968177795, "mapping_values": [1, 3, 3, 1, 2, 1, 6, 6, 4, 2, 0, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.negative(tf.math.negative(tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.160954342778364, 1.2928937599249897, 0.8901008109233288, 0.760776385718081, 0.7014983371972817, 0.6551156841910291, 0.6197361516332142, 0.5903393007965451, 0.5605755029274504, 0.54333495114379, 0.5331737604501493, 0.508441775639642, 0.4850356554067083, 0.479239158469137, 0.4678747108497199, 0.45395701981145065, 0.4355078267580357, 0.4311243530159629, 0.411222247631952, 0.405420765160664, 0.3962124138657191, 0.38777977718637446, 0.3815074646753201, 0.37441667829758424, 0.3505302835583073, 0.35045355307254433, 0.3423663644254672, 0.3427003840681521, 0.3351820574429025, 0.32019639099829894], "accuracy": [0.2810725271701813, 0.5546162724494934, 0.6676793098449707, 0.7160216569900513, 0.7368907928466797, 0.7494386434555054, 0.7696473598480225, 0.778761088848114, 0.7915731072425842, 0.7955356240272522, 0.7976489067077637, 0.8124422430992126, 0.8189142942428589, 0.821820080280304, 0.8253863453865051, 0.8319904804229736, 0.8366134166717529, 0.8405758738517761, 0.8500858545303345, 0.8474441766738892, 0.8518029451370239, 0.8558974862098694, 0.8577466607093811, 0.8622375130653381, 0.8697662353515625, 0.8691058158874512, 0.867520809173584, 0.8733324408531189, 0.8771628737449646, 0.8782195448875427], "val_loss": [1.2901665823800224, 0.6961913108825684, 0.5904248952865601, 0.5551027400153024, 0.5132572480610439, 0.4916518586022513, 0.47643605300358366, 0.45513246740613666, 0.4518590824944632, 0.4266737529209682, 0.41313269308635164, 0.401102534362248, 0.39735742126192364, 0.38764253684452604, 0.381170962538038, 0.369223952293396, 0.36917756284986225, 0.3615657687187195, 0.35379635436194284, 0.3483832223074777, 0.34637826681137085, 0.34606904642922537, 0.3382660916873387, 0.3318627561841692, 0.3347064512116568, 0.3329238295555115, 0.3325132557324001, 0.3279132332120623, 0.3223802532468523, 0.31824950660978046], "val_accuracy": [0.5860000252723694, 0.7173333168029785, 0.7400000095367432, 0.7553333044052124, 0.7760000228881836, 0.7846666574478149, 0.7926666736602783, 0.8046666383743286, 0.812666654586792, 0.8193333148956299, 0.8209999799728394, 0.8320000171661377, 0.8376666903495789, 0.8379999995231628, 0.8416666388511658, 0.8503333330154419, 0.8513333201408386, 0.8550000190734863, 0.8579999804496765, 0.8553333282470703, 0.8546666502952576, 0.8613333106040955, 0.8606666922569275, 0.8643333315849304, 0.8690000176429749, 0.8583333492279053, 0.8633333444595337, 0.8666666746139526, 0.8669999837875366, 0.8666666746139526]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1], [4, 8, 0, 0, 0, 9, 3, 9], [4, 2, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 2, 8, 4], [2, 5], [64], [0, 1, 0, 0, 1, 1], [3, 1, 9, 1, 2], [1, 0, 2], [18, 52, 13]], "fitness": -0.668571412563324, "mapping_values": [1, 3, 3, 1, 2, 1, 5, 5, 3, 2, 0, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(grad, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.pow(grad, tf.math.sqrt(tf.math.add(beta, tf.math.negative(beta)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1496638145271687, 1.3338011479128968, 0.9374979425572512, 0.8552462777457202, 0.7917404478929299, 0.7105295820369099, 0.6682529344676492, 0.627900551165635, 0.6002812263767529, 0.5800258881773979, 0.5596978802801265, 0.5184602259865306, 0.5058312719177812, 0.49523855284252, 0.47811647663893025, 0.47753403302842534, 0.45753552369343337, 0.4695401851684662, 0.4604092839214197, 0.4544525913920747, 0.45932191212762064, 0.4917277982363753, 0.49091705113448614, 0.49310444769936784, 0.5227227255637068], "accuracy": [0.2755250334739685, 0.5588429570198059, 0.6536785364151001, 0.6793025732040405, 0.7136441469192505, 0.7215691208839417, 0.7298903465270996, 0.7662131786346436, 0.769911527633667, 0.7823272943496704, 0.7935543656349182, 0.8017435073852539, 0.8047813773155212, 0.811649739742279, 0.8189142942428589, 0.819970965385437, 0.8278959393501282, 0.819442629814148, 0.82683926820755, 0.8297450542449951, 0.8342359066009521, 0.8141592741012573, 0.8145555257797241, 0.8186501264572144, 0.8166688680648804], "val_loss": [1.1946886948176794, 0.7325448308672223, 0.6413661582129342, 0.6442795140402657, 0.5747571672712054, 0.5309033393859863, 0.5020923784800938, 0.49833634921482634, 0.47359655584607807, 0.45292643138340544, 0.4526174749646868, 0.43951196329934256, 0.4259050829069955, 0.4181733472006662, 0.4058980090277536, 0.4119147913796561, 0.39427830491747173, 0.40196618863514494, 0.4112849746431623, 0.4249928763934544, 0.4214657119342259, 0.42749237162726267, 0.4414833698953901, 0.4638210024152483, 0.4781089169638498], "val_accuracy": [0.5716666579246521, 0.7129999995231628, 0.7369999885559082, 0.7353333234786987, 0.7363333106040955, 0.7486666440963745, 0.777999997138977, 0.7833333611488342, 0.8016666769981384, 0.8029999732971191, 0.8016666769981384, 0.8270000219345093, 0.8270000219345093, 0.8370000123977661, 0.831333339214325, 0.8456666469573975, 0.846666693687439, 0.8393333554267883, 0.8413333296775818, 0.8486666679382324, 0.8446666598320007, 0.8343333601951599, 0.8259999752044678, 0.8366666436195374, 0.8403333425521851]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [45, 32, 5, 49, 25], [1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1], [4, 8, 8, 0, 0, 9, 3, 9], [2, 5, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [1, 0, 1, 0, 1], [1, 1, 1, 0, 0], [7, 2, 8, 4], [2], [64], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1], [3, 1, 9, 1, 0, 3, 4, 7, 6, 9, 7, 2], [1, 0, 2, 3, 1, 0, 0, 1, 3, 2, 0], [15, 52, 13, 62]], "fitness": -0.43142858147621155, "mapping_values": [1, 1, 1, 0, 1, 0, 4, 4, 2, 2, 0, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(beta, tf.math.sqrt(grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), alpha), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.188193257915314, 2.1457902949956336, 2.045660536019337, 1.9821503959579427, 1.9592929824688778, 1.955051437801673], "accuracy": [0.22863557934761047, 0.19204860925674438, 0.22572976350784302, 0.24620261788368225, 0.24924051761627197, 0.2308809906244278], "val_loss": [1.370929377419608, 1.6542741571153914, 1.5316663810185023, 1.498929500579834, 1.5786451271602087, 1.630669151033674], "val_accuracy": [0.43700000643730164, 0.20999999344348907, 0.30533334612846375, 0.367333322763443, 0.3243333399295807, 0.34433332085609436]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [2, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [0, 32, 4, 49, 25], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], [4, 8, 0, 0, 0, 9, 3, 9], [3, 5, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [1, 0, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [7, 2, 8, 4], [2], [64], [0, 1, 0, 0, 1, 1, 1], [0, 1, 5, 1, 2], [2, 3, 2, 0, 1], [15, 52, 13]], "fitness": -0.1437142789363861, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.835963679452724, 2.36029258153505, 2.30618369190401, 2.302918585866843, 2.2813049656383395, 2.3133985544979896], "accuracy": [0.20235107839107513, 0.1678774207830429, 0.1022322028875351, 0.09628847241401672, 0.1516312211751938, 0.10460969805717468], "val_loss": [2.334165709359305, 1.9787086078098841, 1.974130358014788, 1.9727812494550432, 2.0227832794189453, 1.9741233416966029], "val_accuracy": [0.15833333134651184, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.09566666930913925, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [4, 8, 0, 0, 0, 9, 3, 9], [1, 5, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 2, 8, 4], [2, 4], [64], [0, 1, 0, 0, 0, 1, 0, 1, 0, 1], [3, 1, 9, 1, 2, 8], [1, 0, 2, 2], [15, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 6, 6, 4, 2, 0, 5, 4, 2, 2, 0, 10, 6, 4, 2], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(alpha, tf.math.sqrt(tf.math.negative(tf.math.negative(grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, beta))), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.sqrt(beta)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09549596905708313, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 9, 6, 8, 3, 0, 1, 8, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [91, 32, 5, 49, 25], [0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [5, 1, 2, 0, 0, 9, 3, 9], [0, 5, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 0, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [7, 2, 8, 4], [2, 2], [64], [0, 1, 1, 0, 1, 1], [2, 1, 9, 1, 2], [1, 0, 2], [15, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 2, 1, 1, 0, 1, 1, 3, 2, 1, 1, 0, 3, 1, 2, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, beta), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.5075361438146627e+26, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08360850811004639, 0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.0180942671639577, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [4, 8, 0, 0, 0, 9, 3, 9], [1, 4, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [1, 0, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [7, 2, 8, 4], [2], [64], [0, 0, 1, 0, 1, 1], [0, 1, 5, 1, 2], [1, 3, 2], [49, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 11, 8, 4, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 3, 2, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))))), tf.math.pow(tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(alpha, tf.math.square(sigma)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09549596905708313, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [2, 2, 1, 2, 1, 0, 2, 2, 0, 2, 3, 3, 0], [91, 32, 5, 49, 25], [0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [4, 8, 8, 0, 0, 9, 3, 9], [3, 5, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1], [7, 4, 8, 4], [2, 4], [64], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [3, 1, 9, 3, 0, 5, 4, 7, 6, 9, 7, 2], [1, 0, 2, 1, 1, 0, 0, 1, 3, 2, 0], [34, 52, 13, 39, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 11, 8, 2, 6, 6, 4, 2, 0, 5, 4, 2, 2, 0, 13, 8, 5, 2], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, grad)), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))))), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(grad, tf.math.sqrt(tf.math.sqrt(tf.math.negative(tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.pow(sigma, tf.math.add(sigma, beta))), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), tf.math.multiply(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.square(tf.math.pow(tf.math.add(beta, alpha), alpha))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09549596905708313, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [4, 8, 4, 0, 0, 9, 3, 9], [1, 3, 2, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 0, 1, 0, 1], [0, 0, 1], [5, 1, 8, 4], [0], [64], [0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1], [3, 4, 1, 1, 2, 8, 4, 9], [1, 0, 2, 3, 0, 0], [15, 52, 13, 96]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 7, 7, 4, 3, 0, 4, 3, 2, 1, 1, 14, 8, 6, 4], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(grad, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(alpha, tf.math.sqrt(tf.math.pow(tf.math.negative(grad), beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.pow(tf.math.subtract(tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, sigma)), tf.math.sqrt(tf.math.pow(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09549596905708313, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 9, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [77, 32, 5, 49, 25], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [4, 4, 0, 0, 0, 9, 3, 9], [3, 5, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [1, 0, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [7, 2, 8, 4], [2], [64], [0, 1, 0, 0, 1, 1, 1], [9, 1, 5, 1, 2], [1, 0, 2], [15, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 8, 8, 5, 3, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.negative(grad))))), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.303320395491457, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597, 2.3025851429508597], "accuracy": [0.0956280529499054, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644392830985], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 3, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [46, 32, 5, 49, 25], [1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], [0, 8, 0, 0, 0, 9, 3, 9], [1, 5, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1], [7, 2, 8, 4, 4, 4, 1], [2, 4], [64], [0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [8, 7, 5, 1, 2, 7, 5], [1, 0, 2, 2, 2], [34, 52, 13, 39, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 14, 9, 7, 2, 0, 12, 7, 5, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, tf.math.add(sigma, tf.math.add(sigma, tf.math.sqrt(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, beta), tf.math.add(sigma, tf.math.pow(sigma, sigma)))), sigma)))))), tf.math.add(sigma, tf.math.subtract(sigma, tf.math.add(sigma, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.add(tf.math.square(tf.math.subtract(alpha, tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.add(tf.math.square(beta), beta))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09549596905708313, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [2, 8, 9, 7, 2, 2, 0, 2, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [50, 32, 4, 49, 25], [1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [5, 1, 2, 0, 0, 9, 3, 9], [2, 5, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 0, 1, 0, 1], [0, 1, 1, 1, 0], [9, 0, 8, 4], [2], [64], [1, 1, 1, 0, 1, 1], [2, 1, 9, 1, 2], [1, 0, 2], [15, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.sqrt(grad), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09549596905708313, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 4, 8, 2, 4, 2, 0, 2, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [50, 32, 4, 49, 25], [1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1], [4, 6, 0, 6, 0, 9, 3, 9], [1, 5, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [1, 0, 1, 0, 0, 0, 1, 1], [0, 1, 1, 1, 0], [9, 0, 8, 4], [2], [64], [0, 1, 1, 0, 1, 1], [3, 1, 9, 1, 2], [1, 0, 2], [21, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 4, 4, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.pow(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha)))))), tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09549596905708313, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 0, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [2, 2, 1, 0, 1, 0, 0, 2, 0, 2, 3, 3, 0], [45, 32, 5, 49, 6], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1], [4, 8, 0, 0, 0, 9, 3, 9], [1, 3, 2, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1], [7, 2, 8, 4], [2], [64], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1], [3, 4, 8, 1, 2, 8, 4, 5, 3, 8, 7, 2, 1, 8, 7, 8, 2, 7, 3, 5, 8, 6], [1, 1, 2, 2, 2, 0, 1, 3, 3, 2, 2, 0, 2, 0, 1], [15, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 5, 5, 1, 4, 4, 2, 2, 0, 1, 0, 0, 0, 0, 37, 22, 15, 3], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.negative(alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.sqrt(grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.pow(tf.math.sqrt(tf.math.subtract(alpha, beta)), tf.math.add(tf.math.sqrt(tf.math.pow(tf.math.square(tf.math.multiply(tf.math.sqrt(tf.math.add(beta, beta)), tf.math.add(tf.math.subtract(tf.math.sqrt(tf.math.add(tf.math.sqrt(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), alpha)), tf.math.add(tf.math.add(tf.math.multiply(sigma, sigma), tf.math.square(tf.math.sqrt(beta))), beta)), tf.math.divide_no_nan(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), beta)))), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32))), alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09549596905708313, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [45, 32, 5, 83, 25], [1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1], [4, 8, 0, 3, 0, 9, 3, 9], [1, 5, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 2, 8, 4], [2], [64], [0, 1, 0, 1, 1, 1], [7, 1, 9, 1, 2], [1, 0, 2], [15, 52, 13, 20, 37]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 4, 4, 2, 2, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.sqrt(grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09549596905708313, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [3, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [0, 32, 4, 49, 25], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], [0, 8, 0, 0, 0, 9, 3, 9], [1, 5, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 2, 8, 4], [2], [64], [0, 0, 1, 1, 1, 1], [0, 1, 5, 1, 2], [1, 0, 2], [15, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(alpha, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.303320395491457, 2.3025851114598312, 2.3025851744418886, 2.3025851744418886, 2.3025851429508597, 2.3025851564605113], "accuracy": [0.08928807079792023, 0.09576013684272766, 0.09311848133802414, 0.09140139818191528, 0.09998679161071777, 0.08875974267721176], "val_loss": [1.973644392830985, 1.973644392830985, 1.973644392830985, 1.973644529070173, 1.9736443247113908, 1.973644460950579], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [2, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [46, 32, 5, 49, 25], [1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], [4, 8, 2, 0, 4, 9, 3, 9], [3, 5, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 2, 8, 4], [2], [64], [1, 1, 0, 0, 1, 1, 1], [3, 1, 2, 1, 2], [1, 0, 2], [15, 52, 13]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [6.097628009403611e+27, 2.4466200195456604, 2.753258710303689, 3.8201246485182985, 5.856551072789914, 8.199613465735029], "accuracy": [0.06207898631691933, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.0516563824244907, 2.1932860783168246, 2.7374986239842007, 4.215961865016392, 6.185076577322824, 8.217006955827985], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [2, 2, 6, 6, 4, 2, 0, 2, 5, 9, 4, 2, 6, 3, 6, 5, 8], [2, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [46, 32, 5, 49, 25], [1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], [5, 8, 0, 6, 0, 9, 3, 9], [2, 5, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [0, 0, 1, 1, 1], [1, 0, 1], [2, 4, 8, 4], [0], [64], [0, 0, 0, 0, 1, 1, 1], [3, 4, 9, 1, 2, 8, 4], [1, 0, 2, 1], [73, 58, 13, 20, 37]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 11, 8, 4, 2, 2, 1, 1, 0, 1, 1, 0, 1, 1, 7, 4, 3, 2], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.add(alpha, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))))), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.pow(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.subtract(alpha, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09549596905708313, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 4, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [2, 0, 1, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [16, 32, 5, 49, 25], [0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [6, 8, 0, 0, 0, 9, 3, 9], [1, 5, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 0], [7, 2, 8, 4], [2], [64], [0, 1, 0, 0, 1, 1], [0, 1, 5, 1, 2], [1, 0, 2], [15, 52, 13]], "fitness": -0.09285714477300644, "mapping_values": [1, 17, 17, 10, 7, 4, 7, 7, 5, 2, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.pow(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, tf.math.square(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.sqrt(tf.math.negative(tf.math.negative(tf.math.add(beta, tf.math.negative(grad))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.3028854817415763, 2.3010895886142193, 2.3001447324156996, 2.298840572584921, 2.2994767537505605, 2.2991546747502145, 2.298022300087623, 2.2981511746037353, 2.2988193795004257, 2.2977150608882013, 2.2977614872617145, 2.298373145449982, 2.2981897443749446, 2.298317019713632], "accuracy": [0.09298639744520187, 0.09021265059709549, 0.09179764986038208, 0.10328886657953262, 0.1014397069811821, 0.09774138033390045, 0.10091137140989304, 0.1014397069811821, 0.09985470771789551, 0.10434553027153015, 0.1006472036242485, 0.10170386731624603, 0.10381719470024109, 0.10447761416435242], "val_loss": [1.9699835777282715, 1.969318185533796, 1.969085761478969, 1.9690001351492745, 1.968961579459054, 1.9688140324183874, 1.96872193472726, 1.9686002731323242, 1.9684008189610072, 1.968459129333496, 1.9686733654567175, 1.968818051474435, 1.96902676991054, 1.96923828125], "val_accuracy": [0.04633333161473274, 0.05366666615009308, 0.061000000685453415, 0.06333333253860474, 0.06800000369548798, 0.0716666653752327, 0.07566666603088379, 0.07733333110809326, 0.08299999684095383, 0.08233333379030228, 0.08166666328907013, 0.0806666687130928, 0.07633333653211594, 0.07266666740179062]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 2, 3, 6, 2, 9, 0, 1, 5, 9, 4, 2, 6, 3, 6, 5, 8], [2, 2, 2, 0, 1, 0, 2, 2, 0, 2, 3, 3, 0], [38, 32, 5, 49, 25], [1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], [5, 8, 0, 0, 0, 9, 3, 9], [1, 5, 3, 3, 1, 5, 3, 2, 1, 4, 4, 0], [85], [1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1], [7, 2, 8, 4], [2], [64], [0, 1, 0, 0, 1, 1, 1], [2, 1, 1, 1, 2], [1, 3, 2, 2], [15, 52, 13]], "fitness": -0.04171428456902504, "mapping_values": [1, 9, 9, 4, 5, 1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 7, 3, 4, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.math.add(alpha, grad), tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), grad)), tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))), alpha), lambda shape,  alpha, beta, grad: tf.math.square(alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(alpha, tf.math.subtract(tf.math.subtract(sigma, beta), beta))", "other_info": {"loss": [2.3034554831560623, 2.302892920457928, 2.3022081225917574, 2.3013161240221094, 2.302431367722485, 2.302398905793768], "accuracy": [0.09153348207473755, 0.08638224750757217, 0.0878351628780365, 0.09377889335155487, 0.08809932321310043, 0.08902391046285629], "val_loss": [1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345, 1.9709388869149345], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}]