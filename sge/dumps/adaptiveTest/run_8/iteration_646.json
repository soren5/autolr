[{"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 6, 1, 8, 4, 1, 2, 8, 0, 4, 9, 2, 9, 3, 9, 6, 9, 5, 0, 8, 8, 2, 0, 2, 8, 8], [1, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 65, 73, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.7822856903076172, "mapping_values": [1, 30, 30, 23, 7, 4, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(alpha, tf.math.sqrt(tf.math.pow(tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.sqrt(grad)), tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, grad))))), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.negative(grad))))))))), tf.math.sqrt(tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.pow(grad, tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2601629294865417, 2.0650839395904743, 1.6289859345371476, 1.2741265069255896, 1.1066796019754044, 1.0019099476267839, 0.9271186411876752, 0.88994816774233, 0.8665126646593215, 0.8319851681855785, 0.8132192886122906, 0.7825249455167539, 0.761315552416164, 0.7457922259499415, 0.7439237559917123, 0.7393843318335589, 0.7105126751727274, 0.7071691938143175, 0.7029864020933958, 0.6778802499165231, 0.6855506503885889, 0.6711566156998381, 0.6749799352642599, 0.6502050041065964, 0.6548688272601026, 0.6545861490555979, 0.636349191038663, 0.63644934113094, 0.6336345852893562, 0.615017658077636, 0.6077251126580093, 0.623118526624446, 0.6061131940651973, 0.600415676332279, 0.5992230481837546], "accuracy": [0.19336943328380585, 0.3821159601211548, 0.49108439683914185, 0.563730001449585, 0.6172236204147339, 0.6411306262016296, 0.6737551093101501, 0.6790384650230408, 0.6906617283821106, 0.7065116763114929, 0.7021529674530029, 0.7157574892044067, 0.7202483415603638, 0.7264562249183655, 0.7248712182044983, 0.7264562249183655, 0.7366266250610352, 0.7415136694908142, 0.7375511527061462, 0.7494386434555054, 0.7494386434555054, 0.7561748623847961, 0.7453441023826599, 0.7589486241340637, 0.7569673657417297, 0.7567031979560852, 0.7652885913848877, 0.7625148296356201, 0.7667415142059326, 0.7703077793121338, 0.7728173136711121, 0.7646281719207764, 0.7770439982414246, 0.7753269076347351, 0.7755910754203796], "val_loss": [1.8542359215872628, 1.5201655115400041, 1.0468377045222692, 0.8354575634002686, 0.7312893186296735, 0.6904403652463641, 0.6607973064695086, 0.6058120216642108, 0.5961829423904419, 0.5810772350856236, 0.5788455520357404, 0.5490387848445347, 0.5418258224214826, 0.552585073879787, 0.5297468219484601, 0.5231789520808628, 0.5104545865740094, 0.5071155684334892, 0.5032549245016915, 0.5043824911117554, 0.4940657785960606, 0.492110082081386, 0.502732413155692, 0.48182482378823416, 0.4901855332510812, 0.4711434670857021, 0.46718852860586985, 0.4726421662739345, 0.4650352512087141, 0.46195164748600553, 0.47427451610565186, 0.46186486312321257, 0.4619345835277012, 0.4508582779339382, 0.44754073449543547], "val_accuracy": [0.46533334255218506, 0.5706666707992554, 0.6050000190734863, 0.6663333177566528, 0.7046666741371155, 0.699999988079071, 0.7210000157356262, 0.7486666440963745, 0.7416666746139526, 0.7513333559036255, 0.7506666779518127, 0.7710000276565552, 0.7596666812896729, 0.7576666474342346, 0.7799999713897705, 0.7753333449363708, 0.7820000052452087, 0.781000018119812, 0.7933333516120911, 0.7726666927337646, 0.7926666736602783, 0.7946666479110718, 0.7839999794960022, 0.7919999957084656, 0.7853333353996277, 0.7923333048820496, 0.7990000247955322, 0.8040000200271606, 0.8090000152587891, 0.8116666674613953, 0.7846666574478149, 0.7983333468437195, 0.7986666560173035, 0.8103333115577698, 0.8096666932106018]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [3, 9, 2, 2, 4, 2, 0, 5, 0, 9, 2, 4, 6, 3, 2, 6, 9, 5, 0, 2, 0, 2, 1, 2, 8, 4, 3, 4, 6, 8, 1, 2, 1, 5, 1, 0, 5, 9, 3, 4, 8, 9, 0, 0, 9, 7, 4, 0, 3, 1, 5, 3, 1, 7], [0, 0, 0, 2, 0, 2, 1, 1, 0, 2, 0, 0, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0, 2, 3], [94, 41, 73, 44, 8, 57, 9, 53, 44, 40, 82, 21, 5, 73, 66], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 4, 9, 8, 4, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 1, 3, 1, 0, 2, 1, 3, 0, 0], [6, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.7822856903076172, "mapping_values": [1, 14, 14, 10, 4, 5, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.pow(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.add(alpha, tf.math.negative(tf.math.square(tf.math.negative(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2601629294865417, 2.0650839395904743, 1.6289859345371476, 1.2741265069255896, 1.1066796019754044, 1.0019099476267839, 0.9271186411876752, 0.88994816774233, 0.8665126646593215, 0.8319851681855785, 0.8132192886122906, 0.7825249455167539, 0.761315552416164, 0.7457922259499415, 0.7439237559917123, 0.7393843318335589, 0.7105126751727274, 0.7071691938143175, 0.7029864020933958, 0.6778802499165231, 0.6855506503885889, 0.6711566156998381, 0.6749799352642599, 0.6502050041065964, 0.6548688272601026, 0.6545861490555979, 0.636349191038663, 0.63644934113094, 0.6336345852893562, 0.615017658077636, 0.6077251126580093, 0.623118526624446, 0.6061131940651973, 0.600415676332279, 0.5992230481837546], "accuracy": [0.19336943328380585, 0.3821159601211548, 0.49108439683914185, 0.563730001449585, 0.6172236204147339, 0.6411306262016296, 0.6737551093101501, 0.6790384650230408, 0.6906617283821106, 0.7065116763114929, 0.7021529674530029, 0.7157574892044067, 0.7202483415603638, 0.7264562249183655, 0.7248712182044983, 0.7264562249183655, 0.7366266250610352, 0.7415136694908142, 0.7375511527061462, 0.7494386434555054, 0.7494386434555054, 0.7561748623847961, 0.7453441023826599, 0.7589486241340637, 0.7569673657417297, 0.7567031979560852, 0.7652885913848877, 0.7625148296356201, 0.7667415142059326, 0.7703077793121338, 0.7728173136711121, 0.7646281719207764, 0.7770439982414246, 0.7753269076347351, 0.7755910754203796], "val_loss": [1.8542359215872628, 1.5201655115400041, 1.0468377045222692, 0.8354575634002686, 0.7312893186296735, 0.6904403652463641, 0.6607973064695086, 0.6058120216642108, 0.5961829423904419, 0.5810772350856236, 0.5788455520357404, 0.5490387848445347, 0.5418258224214826, 0.552585073879787, 0.5297468219484601, 0.5231789520808628, 0.5104545865740094, 0.5071155684334892, 0.5032549245016915, 0.5043824911117554, 0.4940657785960606, 0.492110082081386, 0.502732413155692, 0.48182482378823416, 0.4901855332510812, 0.4711434670857021, 0.46718852860586985, 0.4726421662739345, 0.4650352512087141, 0.46195164748600553, 0.47427451610565186, 0.46186486312321257, 0.4619345835277012, 0.4508582779339382, 0.44754073449543547], "val_accuracy": [0.46533334255218506, 0.5706666707992554, 0.6050000190734863, 0.6663333177566528, 0.7046666741371155, 0.699999988079071, 0.7210000157356262, 0.7486666440963745, 0.7416666746139526, 0.7513333559036255, 0.7506666779518127, 0.7710000276565552, 0.7596666812896729, 0.7576666474342346, 0.7799999713897705, 0.7753333449363708, 0.7820000052452087, 0.781000018119812, 0.7933333516120911, 0.7726666927337646, 0.7926666736602783, 0.7946666479110718, 0.7839999794960022, 0.7919999957084656, 0.7853333353996277, 0.7923333048820496, 0.7990000247955322, 0.8040000200271606, 0.8090000152587891, 0.8116666674613953, 0.7846666574478149, 0.7983333468437195, 0.7986666560173035, 0.8103333115577698, 0.8096666932106018]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 6, 1, 8, 4, 8, 2, 8, 0, 4, 9, 2, 9, 3, 9, 6, 9, 5, 0, 8, 8, 2, 0, 2, 8, 8], [1, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 41, 73, 44, 8, 79, 53, 52, 44, 16, 82, 21, 5, 73], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 4, 9, 8, 4, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [19, 25, 50, 71, 34]], "fitness": -0.6868571639060974, "mapping_values": [1, 24, 24, 19, 5, 4, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(alpha, tf.math.sqrt(tf.math.pow(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(grad)), tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(alpha, grad), grad))))))), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))))), tf.math.multiply(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.negative(grad))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.301973710301341, 2.2967351946643695, 2.2916068109019307, 2.2880167622906957, 2.2827253026134695, 2.2785484501399447, 2.272786315720961, 2.2695559058065315, 2.2673768748413257, 2.26092702881724, 2.258512816897095, 2.2522315789113003, 2.2451820864795207, 2.2409396228253677, 2.2350786091896837, 2.230556133227688, 2.222128165947558, 2.217788336189148, 2.2113923737086703, 2.203452904651729, 2.1967550647288676, 2.1905662274048896, 2.1803952252246037, 2.1715873643753945, 2.1645808623309746, 2.1541209707737536, 2.1459931948748343, 2.132981079286982, 2.1219921057895976, 2.1101856100056953, 2.094979561110529, 2.083490865231505, 2.067357955276848, 2.0558415102275323, 2.0372756271629346, 2.0252712267957675, 2.008467176728607, 1.9888615596721106, 1.9752329594549518, 1.9565657665700866, 1.9360719364332784, 1.9175958684595773, 1.8971975200668443, 1.8739413196195653, 1.8608339865918424, 1.8332107337301182, 1.8145945750648287, 1.7876122796760652, 1.770774339325849, 1.7463968942634907, 1.7269115532394004, 1.694870901932853, 1.6769018504188486, 1.6651180120050442, 1.6286012648811838, 1.6148039846844786, 1.5995443601334933, 1.5711375289132739, 1.557992967411732, 1.5318060779552638, 1.5116272649241005, 1.4971735489886466, 1.4824577216002384, 1.465137686585832, 1.4409028928135963, 1.426493217884951, 1.4200438082950337, 1.3939452787605118, 1.3786232019097435, 1.364164739221299, 1.3506637638617562, 1.348301542968861, 1.3241234587294126, 1.3157473565596536, 1.2991694726050884, 1.3067166499646898, 1.2812316949262659, 1.2672638122699422, 1.2691774217129195, 1.2576456614426177, 1.249246530371603, 1.2361603931366036, 1.2233446176734504, 1.2078999259515666, 1.2002759735582054, 1.199881104477613, 1.1964749274803679, 1.179083121892027, 1.171626728255877, 1.1736452332923535, 1.1562206485031807, 1.1572583404593164, 1.1545661935212983, 1.1403497384602541, 1.13986013277631, 1.1267097789408933, 1.125162396684787, 1.1171424032564508, 1.1133607378284363, 1.0957721371015208], "accuracy": [0.09100515395402908, 0.10645885765552521, 0.11266675591468811, 0.13089419901371002, 0.13617752492427826, 0.15242372453212738, 0.16814158856868744, 0.18055738508701324, 0.18372738361358643, 0.20604939758777618, 0.19719983637332916, 0.2148989588022232, 0.23616431653499603, 0.23920221626758575, 0.254920095205307, 0.2650904655456543, 0.28160083293914795, 0.2797516882419586, 0.2895258367061615, 0.30643242597579956, 0.30484744906425476, 0.31158366799354553, 0.325320303440094, 0.3350944519042969, 0.3365473449230194, 0.3461894094944, 0.35305771231651306, 0.3571522831916809, 0.366530179977417, 0.3757759928703308, 0.3751155734062195, 0.3831726312637329, 0.395720511674881, 0.39968299865722656, 0.4103817343711853, 0.4076079726219177, 0.40826839208602905, 0.41526877880096436, 0.42808082699775696, 0.41949543356895447, 0.43072250485420227, 0.43468499183654785, 0.4395720660686493, 0.4410249590873718, 0.45185577869415283, 0.45647865533828735, 0.4519878625869751, 0.4554220139980316, 0.4694227874279022, 0.4644036591053009, 0.47246071696281433, 0.49293357133865356, 0.4865935742855072, 0.476951539516449, 0.5001981258392334, 0.4935939908027649, 0.5031039714813232, 0.5025756359100342, 0.5066701769828796, 0.5099722743034363, 0.5099722743034363, 0.525029718875885, 0.5182934999465942, 0.5254259705543518, 0.5309734344482422, 0.5340113639831543, 0.538237988948822, 0.5408796668052673, 0.5394267439842224, 0.5478800535202026, 0.5519746541976929, 0.5506538152694702, 0.5592392086982727, 0.559899628162384, 0.5552766919136047, 0.5522388219833374, 0.5659754276275635, 0.5639941692352295, 0.5670320987701416, 0.565711259841919, 0.5705983638763428, 0.5777308344841003, 0.5828820466995239, 0.5823537111282349, 0.5860520601272583, 0.5881653428077698, 0.585919976234436, 0.5885615944862366, 0.5914674401283264, 0.5923920273780823, 0.6017699241638184, 0.5913353562355042, 0.5963544845581055, 0.601109504699707, 0.6057323813438416, 0.6078457236289978, 0.6124686598777771, 0.6061286330223083, 0.6126006841659546, 0.6214502453804016], "val_loss": [1.9664499419076102, 1.9623058182852608, 1.9582257952008928, 1.9541264261518205, 1.9500301224844796, 1.9459222384861536, 1.9417244366237096, 1.9374371937343053, 1.933112621307373, 1.9286479268755232, 1.9240964480808802, 1.9193308694022042, 1.9144062314714705, 1.9092349324907576, 1.9038679940359933, 1.8982947894505091, 1.8924151148114885, 1.8862759045192175, 1.8798455510820662, 1.8730536188398088, 1.865985938480922, 1.8584531375340052, 1.8504469054085868, 1.842001029423305, 1.8331288610185896, 1.8237220900399345, 1.8138720648629325, 1.8034042630876814, 1.7924774033682687, 1.780907426561628, 1.7686729431152344, 1.7557813099452428, 1.742288044520787, 1.728177547454834, 1.7132010800497872, 1.6977903161730086, 1.6816767624446325, 1.664644752229963, 1.6470778669629778, 1.6289168766566686, 1.610083716256278, 1.590641668864659, 1.5705913134983607, 1.5498230116707938, 1.5290234770093645, 1.50766886983599, 1.4860189301627023, 1.463970627103533, 1.4417943613869804, 1.4194482394627161, 1.3971241542271204, 1.3743455069405692, 1.3517513275146484, 1.3296582358224052, 1.3073146002633231, 1.2854286943163191, 1.2639054230281286, 1.2429537091936385, 1.2223764147077287, 1.2019102573394775, 1.1821729796273368, 1.163182020187378, 1.1446631635938371, 1.1269727775028773, 1.1098621572766985, 1.0930811677660262, 1.0771218367985316, 1.0617350510188512, 1.0466811656951904, 1.032116106578282, 1.0184361934661865, 1.0052563122340612, 0.99238463810512, 0.9799984863826207, 0.9682415212903704, 0.9571658202580043, 0.9461877686636788, 0.9355384962899345, 0.9258054665156773, 0.916344233921596, 0.9073944091796875, 0.8983371257781982, 0.8898004804338727, 0.8810086590903146, 0.872729846409389, 0.8648753847394671, 0.8576272044863019, 0.8503283602850777, 0.8432064056396484, 0.8365506444658551, 0.8300612824303764, 0.8238596575600761, 0.817953245980399, 0.8118934120450702, 0.806178365434919, 0.8004869733537946, 0.7950528178896222, 0.790000353540693, 0.7852161782128471, 0.7799748522894723], "val_accuracy": [0.06499999761581421, 0.10266666859388351, 0.13966666162014008, 0.18533332645893097, 0.22300000488758087, 0.2536666691303253, 0.2919999957084656, 0.31566667556762695, 0.3440000116825104, 0.3623333275318146, 0.37299999594688416, 0.38366666436195374, 0.3903333246707916, 0.4020000100135803, 0.4113333225250244, 0.41999998688697815, 0.42899999022483826, 0.437333345413208, 0.44433334469795227, 0.45100000500679016, 0.4573333263397217, 0.46133333444595337, 0.46966665983200073, 0.47566667199134827, 0.4806666672229767, 0.48533332347869873, 0.49300000071525574, 0.4976666569709778, 0.503333330154419, 0.5113333463668823, 0.5176666378974915, 0.5246666669845581, 0.5289999842643738, 0.5320000052452087, 0.5363333225250244, 0.5413333177566528, 0.5433333516120911, 0.5463333129882812, 0.550000011920929, 0.5556666851043701, 0.5576666593551636, 0.5600000023841858, 0.562666654586792, 0.5666666626930237, 0.5706666707992554, 0.5753333568572998, 0.5759999752044678, 0.5763333439826965, 0.5773333311080933, 0.5776666402816772, 0.5823333263397217, 0.5856666564941406, 0.5879999995231628, 0.5910000205039978, 0.593666672706604, 0.5953333377838135, 0.5989999771118164, 0.6026666760444641, 0.6053333282470703, 0.6110000014305115, 0.6153333187103271, 0.6193333268165588, 0.6209999918937683, 0.624666690826416, 0.6316666603088379, 0.6389999985694885, 0.6423333287239075, 0.6473333239555359, 0.6516666412353516, 0.6583333611488342, 0.6613333225250244, 0.6646666526794434, 0.6660000085830688, 0.6679999828338623, 0.6713333129882812, 0.6733333468437195, 0.6763333082199097, 0.6779999732971191, 0.6783333420753479, 0.6819999814033508, 0.684333324432373, 0.6893333196640015, 0.6913333535194397, 0.6903333067893982, 0.6909999847412109, 0.6926666498184204, 0.6916666626930237, 0.6926666498184204, 0.6936666369438171, 0.6953333616256714, 0.6959999799728394, 0.6966666579246521, 0.6966666579246521, 0.6980000138282776, 0.6980000138282776, 0.699999988079071, 0.7009999752044678, 0.7016666531562805, 0.7026666402816772, 0.7039999961853027]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1], [0, 6, 1, 8, 4, 8, 8, 8, 0, 4, 9, 2, 9, 3, 9, 6, 9, 3, 0, 8, 8, 2, 0, 2, 8, 8], [0, 0, 2, 2, 0, 2, 1, 2, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 65, 73, 54, 8, 44, 86, 52, 44], [0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [17, 25, 50, 71, 34]], "fitness": -0.6254285573959351, "mapping_values": [1, 12, 12, 8, 4, 2, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(tf.math.pow(tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)))), grad))))), tf.math.add(alpha, tf.math.sqrt(grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302564908736701, 2.298786603070804, 2.29503517269915, 2.2928836850158887, 2.2890225501659445, 2.286230117322715, 2.282044425443368, 2.280399971382414, 2.279699146755462, 2.275030216567977, 2.2743698205017, 2.2701367112576545, 2.264974677284018, 2.263324224874879, 2.259618665123061, 2.257579299326917, 2.2518936164973358, 2.250509384459099, 2.2473185473681285, 2.2426557506883245, 2.2395263932179845, 2.237398648857204, 2.231690693934517, 2.2277634123045265, 2.2252346276134753, 2.2203837888367723, 2.2174088096795, 2.2115876065615603, 2.206798454836895, 2.2019947211913395, 2.194918811470841, 2.191414307326122, 2.1843155766553757, 2.1806066113062474, 2.173231188741736, 2.1693678849471825, 2.1628206242281824, 2.1551353887654474, 2.151254551112455, 2.144718691122105, 2.1362650875622617, 2.1296022127585057, 2.1218040589060623, 2.112946965895655, 2.108978121807515, 2.0973465852670667, 2.0896371563490845, 2.077683315899362, 2.0714921459404074, 2.060784940753615, 2.0526112732303425, 2.037507613227037, 2.0283756167613727, 2.022425574649201, 2.004370934974878, 1.99560808630006, 1.9890418263190868, 1.9710877671013136, 1.9626777511876823, 1.9489552559019347, 1.935460976495593, 1.9242636779390385, 1.9122069876160306, 1.8981291749426685, 1.8781974720145576, 1.8675210591651161, 1.8591332754926941, 1.8363463633473933, 1.822918496458144, 1.8078578268894352, 1.792972874994118, 1.7862959266763874, 1.7635438042766525, 1.7514708874767577, 1.7318212836095135, 1.72882293700668, 1.7056642132758968, 1.6896504876541503, 1.6811690578182312, 1.6669157952396956, 1.6510777573276267, 1.6369481305121243, 1.6215378301270555, 1.6030416477468146, 1.5886138633352151, 1.580111385415243, 1.567813047863914, 1.5493489001106198, 1.5393629071262487, 1.534672712086214, 1.5112773059712203, 1.505872863426405, 1.4960850559567669, 1.4803294021030537, 1.4710550657777959, 1.4571330233367206, 1.4483148658500764, 1.4365412976054972, 1.4266645117143615, 1.4101560990005169], "accuracy": [0.09021265059709549, 0.10157178342342377, 0.10566636174917221, 0.11887465417385101, 0.11993131786584854, 0.12917712330818176, 0.14278165996074677, 0.14674416184425354, 0.14859332144260406, 0.16682076454162598, 0.15889579057693481, 0.1710474193096161, 0.18795403838157654, 0.19112402200698853, 0.20459648966789246, 0.21172896027565002, 0.22823932766914368, 0.22097477316856384, 0.22837141156196594, 0.2448817789554596, 0.23656055331230164, 0.24976885318756104, 0.2627129852771759, 0.26680755615234375, 0.26865673065185547, 0.2727513015270233, 0.2856954038143158, 0.2895258367061615, 0.29401662945747375, 0.3066965937614441, 0.30682867765426636, 0.31079116463661194, 0.32241448760032654, 0.3323206901550293, 0.3366794288158417, 0.3365473449230194, 0.3427552580833435, 0.3483027219772339, 0.3531897962093353, 0.3521331250667572, 0.352529376745224, 0.35926562547683716, 0.3693039119243622, 0.36983224749565125, 0.3801347315311432, 0.38185179233551025, 0.37670058012008667, 0.38224804401397705, 0.3936071991920471, 0.3895126283168793, 0.3903051018714905, 0.4073438048362732, 0.409721314907074, 0.39928674697875977, 0.41764628887176514, 0.42226919531822205, 0.41751420497894287, 0.4247787594795227, 0.4205521047115326, 0.4224012792110443, 0.4263637661933899, 0.43164706230163574, 0.43349623680114746, 0.43468499183654785, 0.4435345530509949, 0.4449874460697174, 0.44868576526641846, 0.45383700728416443, 0.4543653428554535, 0.4632149040699005, 0.46268656849861145, 0.46044114232063293, 0.4707436263561249, 0.46453574299812317, 0.46664905548095703, 0.4671773910522461, 0.4757627844810486, 0.4846123456954956, 0.48091402649879456, 0.4855369031429291, 0.4905560612678528, 0.4913485646247864, 0.49531105160713196, 0.49927353858947754, 0.4983489513397217, 0.5044247508049011, 0.5082551836967468, 0.509840190410614, 0.5091797709465027, 0.501518964767456, 0.5248976349830627, 0.5152555704116821, 0.5097081065177917, 0.5241051316261292, 0.5246334671974182, 0.5278034806251526, 0.531898021697998, 0.5311055183410645, 0.5317659378051758, 0.5370492935180664], "val_loss": [1.9678173065185547, 1.965031964438302, 1.9622954641069685, 1.9595518112182617, 1.9568181037902832, 1.9541092600141252, 1.9513651302882604, 1.9485969543457031, 1.9458419254847936, 1.9430481365748815, 1.940248898097447, 1.9373640332903181, 1.9344545773097448, 1.931476320539202, 1.928454807826451, 1.9254002571105957, 1.9222605569022042, 1.9190711293901717, 1.9157875605991908, 1.9124243600027901, 1.9090015547616142, 1.9054386275155204, 1.9017603056771415, 1.8979599135262626, 1.8940811838422502, 1.890068735395159, 1.8859913008553642, 1.8816968372889928, 1.8772598675319128, 1.8726654052734375, 1.867891584123884, 1.8629328863961356, 1.85777861731393, 1.8524810246058874, 1.8469081606183733, 1.8412114552089147, 1.8352691105433874, 1.8290602820260184, 1.8226735932486398, 1.8160814557756697, 1.8092289652143205, 1.8021599224635534, 1.7948087283543177, 1.7871763365609306, 1.779393196105957, 1.7712887355259486, 1.7629152706691198, 1.7541632652282715, 1.7452282905578613, 1.7359569413321358, 1.7264014652797155, 1.7163849898747034, 1.706111056464059, 1.6957507814679826, 1.6848364557538713, 1.6737212112971716, 1.6623666967664446, 1.6506146022251673, 1.6386441162654333, 1.6262386526380266, 1.6136035237993513, 1.6007304191589355, 1.5876812253679549, 1.5743566921779089, 1.5606177874973841, 1.546752691268921, 1.532855749130249, 1.5185847963605608, 1.5040528433663505, 1.4893830844334193, 1.474639586039952, 1.460033961704799, 1.4450936317443848, 1.430112702505929, 1.4150628362383162, 1.4002677713121687, 1.3852225371769495, 1.3701221261705672, 1.35530914579119, 1.3405584607805525, 1.32583144732884, 1.3109862804412842, 1.2963097436087472, 1.281571899141584, 1.2670183522360665, 1.2528493744986398, 1.2389742987496513, 1.2250513008662633, 1.2113775866372245, 1.1981936863490514, 1.1851507255009242, 1.1724118164607458, 1.1600254603794642, 1.147726229258946, 1.1358328546796526, 1.1239867210388184, 1.1124780178070068, 1.1012355259486608, 1.0904270921434676, 1.079592296055385], "val_accuracy": [0.05766666680574417, 0.07633333653211594, 0.10133333504199982, 0.1289999932050705, 0.15466666221618652, 0.18566666543483734, 0.21199999749660492, 0.2329999953508377, 0.2553333342075348, 0.281333327293396, 0.30133333802223206, 0.31833332777023315, 0.3346666693687439, 0.35100001096725464, 0.36399999260902405, 0.3700000047683716, 0.3790000081062317, 0.3843333423137665, 0.3880000114440918, 0.39533331990242004, 0.4033333361148834, 0.40799999237060547, 0.4126666784286499, 0.4183333218097687, 0.42399999499320984, 0.43066665530204773, 0.4359999895095825, 0.4403333365917206, 0.44466665387153625, 0.44866666197776794, 0.45266667008399963, 0.4566666781902313, 0.46166667342185974, 0.46533334255218506, 0.46966665983200073, 0.47566667199134827, 0.4779999852180481, 0.4816666543483734, 0.4856666624546051, 0.4886666536331177, 0.49266666173934937, 0.4970000088214874, 0.5, 0.5056666731834412, 0.5096666812896729, 0.512333333492279, 0.5183333158493042, 0.5226666927337646, 0.5249999761581421, 0.5296666622161865, 0.5326666831970215, 0.5366666913032532, 0.5389999747276306, 0.5413333177566528, 0.5429999828338623, 0.543666660785675, 0.5479999780654907, 0.5493333339691162, 0.5533333420753479, 0.5553333163261414, 0.5563333630561829, 0.5569999814033508, 0.5580000281333923, 0.5609999895095825, 0.5636666417121887, 0.5643333196640015, 0.5676666498184204, 0.5706666707992554, 0.5746666789054871, 0.574999988079071, 0.5756666660308838, 0.5759999752044678, 0.5763333439826965, 0.5773333311080933, 0.5786666870117188, 0.581333339214325, 0.5830000042915344, 0.5866666436195374, 0.5873333215713501, 0.5893333554267883, 0.5893333554267883, 0.5916666388511658, 0.5926666855812073, 0.5956666469573975, 0.5960000157356262, 0.5996666550636292, 0.6026666760444641, 0.606333315372467, 0.609333336353302, 0.6116666793823242, 0.6143333315849304, 0.6173333525657654, 0.6206666827201843, 0.621999979019165, 0.6236666440963745, 0.628000020980835, 0.6323333382606506, 0.6359999775886536, 0.6393333077430725, 0.640999972820282]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 8, 0, 0, 5, 1, 1, 8, 0, 8, 8, 2, 6, 3, 3, 0, 0, 5, 0, 2, 2, 2, 0, 2, 8, 4, 1, 2, 5, 1, 6, 0, 1, 0, 3, 0, 4, 6, 3, 1, 6, 0, 8, 9, 3, 6, 6, 0], [2, 2, 1, 2, 2, 2, 2, 0, 2, 2, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [74, 41, 41, 44, 70, 79, 53, 52, 44, 33, 73, 78, 72], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 5, 8, 8, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 1, 0, 2, 1, 3, 0, 0], [77, 33, 93, 84, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [50, 25, 50, 71, 34]], "fitness": -0.1720000058412552, "mapping_values": [1, 7, 7, 5, 2, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.negative(grad)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.490098885320921, 2.361753168233303, 2.305307403452849, 2.2996380496979265, 2.200453433346802, 2.4259174357567796, 2.326188479337741, 2.3062830461313886, 2.3038116170903082], "accuracy": [0.19693566858768463, 0.13498876988887787, 0.10249637067317963, 0.1080438494682312, 0.21965394914150238, 0.10460969805717468, 0.11874257028102875, 0.09311848133802414, 0.09721305221319199], "val_loss": [2.0022270338875905, 1.9779701232910156, 1.973569733755929, 1.950028760092599, 2.6102331706455777, 1.9716610227312361, 1.9796168463570731, 1.9744320596967424, 1.9739200728280204], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09966666996479034, 0.1496666669845581, 0.10599999874830246, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.09733333438634872]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 3, 1, 0, 4, 1, 1, 8, 0, 4, 6, 2, 9, 3, 6, 9, 4, 5, 0, 2, 8, 2, 0, 2, 8, 0], [2, 2, 1, 2, 2, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 41, 73, 22, 38, 45, 53, 52, 44], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 1, 8, 8, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 1, 0, 0, 0, 2, 1, 3, 0, 0], [77, 33, 93, 84, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [50, 25, 50, 71, 34]], "fitness": -0.1720000058412552, "mapping_values": [1, 25, 25, 16, 9, 5, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.math.add(alpha, tf.math.subtract(grad, grad)), tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.sqrt(tf.math.negative(tf.math.pow(tf.math.divide_no_nan(grad, tf.math.add(alpha, grad)), tf.math.add(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))))))), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.490098885320921, 2.361753168233303, 2.305307403452849, 2.2996380496979265, 2.200453433346802, 2.4259174357567796, 2.326188479337741, 2.3062830461313886, 2.3038116170903082], "accuracy": [0.19693566858768463, 0.13498876988887787, 0.10249637067317963, 0.1080438494682312, 0.21965394914150238, 0.10460969805717468, 0.11874257028102875, 0.09311848133802414, 0.09721305221319199], "val_loss": [2.0022270338875905, 1.9779701232910156, 1.973569733755929, 1.950028760092599, 2.6102331706455777, 1.9716610227312361, 1.9796168463570731, 1.9744320596967424, 1.9739200728280204], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09966666996479034, 0.1496666669845581, 0.10599999874830246, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.09733333438634872]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [4, 6, 6, 2, 2, 2, 0, 4, 0, 9, 2, 4, 6, 3, 6, 6, 9, 0, 0, 2, 0, 2, 1, 2, 8, 2, 3, 4, 6, 8, 1, 2, 4, 5, 1, 0, 3, 9, 2, 4, 8, 8, 0, 0, 9, 7, 4, 0, 3, 1, 2, 3, 1, 7], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 1, 0, 2, 2, 1, 2, 0, 1, 0, 0, 1, 2, 0, 0, 1, 2, 0, 0, 2, 3], [90, 65, 48, 52, 8, 79, 86, 52, 44, 8, 11, 62, 10], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 1, 3, 1, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.1720000058412552, "mapping_values": [1, 38, 38, 23, 15, 6, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.add(tf.math.add(grad, grad), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32))))))))))), tf.math.add(tf.math.pow(grad, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), grad)), tf.math.negative(grad))), tf.math.negative(tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, alpha))), tf.math.add(alpha, grad)))), tf.math.add(tf.math.negative(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.490098885320921, 2.361753168233303, 2.305307403452849, 2.2996380496979265, 2.200453433346802, 2.4259174357567796, 2.326188479337741, 2.3062830461313886, 2.3038116170903082], "accuracy": [0.19693566858768463, 0.13498876988887787, 0.10249637067317963, 0.1080438494682312, 0.21965394914150238, 0.10460969805717468, 0.11874257028102875, 0.09311848133802414, 0.09721305221319199], "val_loss": [2.0022270338875905, 1.9779701232910156, 1.973569733755929, 1.950028760092599, 2.6102331706455777, 1.9716610227312361, 1.9796168463570731, 1.9744320596967424, 1.9739200728280204], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09966666996479034, 0.1496666669845581, 0.10599999874830246, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.09733333438634872]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1], [6, 2, 1, 4, 5, 2, 1, 8, 0, 8, 2, 2, 9, 3, 0, 6, 9, 5, 5, 2, 8, 2, 0, 2, 8, 1, 1, 2, 5, 1, 6, 0, 1, 0, 3, 0, 4, 6, 3, 1, 6, 0, 8, 9, 3, 6, 2, 0, 5, 3, 7, 1, 4, 5, 4, 6, 6, 3, 4, 5, 8, 4, 5, 4, 3, 5, 9, 2, 2, 8, 6, 8, 7, 8, 6, 7, 0, 9], [2, 2, 1, 2, 2, 2, 1, 0, 2, 0, 2, 0, 0, 2, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3, 2, 3, 1, 0, 1, 0, 3, 0, 0, 3], [81, 5, 73, 22, 38, 45, 47, 52, 44, 54, 41, 44, 69, 61, 34, 58, 35, 7, 49], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 5, 8, 8, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 1, 0, 0, 0, 2, 1, 3, 0, 0], [77, 33, 93, 84, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [50, 25, 50, 71, 34]], "fitness": -0.1720000058412552, "mapping_values": [1, 120, 120, 78, 42, 19, 6, 6, 4, 2, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 71, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.sqrt(grad), tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.add(tf.math.add(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.negative(tf.math.divide_no_nan(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))))))), grad)), tf.math.add(tf.math.sqrt(tf.math.add(tf.math.negative(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(alpha, tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.square(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), grad), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(grad)), tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), grad))))))))), tf.math.divide_no_nan(tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, alpha))), tf.math.sqrt(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), grad)))))))))), tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.pow(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.pow(grad, tf.math.square(tf.math.pow(tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))))))), tf.math.multiply(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)))))))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), grad), grad)), grad)))), grad))))))))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.sqrt(tf.math.divide_no_nan(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.add(tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))))))))))))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.sqrt(tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.490098885320921, 2.361753168233303, 2.305307403452849, 2.2996380496979265, 2.200453433346802, 2.4259174357567796, 2.326188479337741, 2.3062830461313886, 2.3038116170903082], "accuracy": [0.19693566858768463, 0.13498876988887787, 0.10249637067317963, 0.1080438494682312, 0.21965394914150238, 0.10460969805717468, 0.11874257028102875, 0.09311848133802414, 0.09721305221319199], "val_loss": [2.0022270338875905, 1.9779701232910156, 1.973569733755929, 1.950028760092599, 2.6102331706455777, 1.9716610227312361, 1.9796168463570731, 1.9744320596967424, 1.9739200728280204], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09966666996479034, 0.1496666669845581, 0.10599999874830246, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.09733333438634872]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1], [5, 6, 1, 0, 4, 2, 1, 8, 0, 4, 6, 5, 9, 6, 6, 9, 9, 5, 0, 2, 1, 2, 0, 0, 8, 0, 8, 6, 1, 4, 6, 2, 6, 4, 1, 5, 0, 0, 1, 9, 8, 8, 9, 8], [2, 0, 0, 2, 2, 2, 0, 0, 2, 0, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [74, 41, 84, 44, 70, 79, 53, 52, 44, 83, 73, 39, 72], [1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [9, 4, 8, 8, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 1, 0, 0, 0, 2, 1, 3, 0, 0], [34, 33, 93, 84, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 4, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [50, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 60, 60, 43, 17, 13, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 50, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.divide_no_nan(tf.math.subtract(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.math.negative(tf.math.pow(tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.square(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))))))), tf.math.add(alpha, tf.math.square(tf.math.negative(grad)))))))), tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))), tf.math.negative(tf.math.negative(grad)))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(alpha, tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))))), tf.math.negative(tf.math.subtract(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, alpha))), tf.math.sqrt(tf.math.add(alpha, alpha)))), tf.math.sqrt(tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32))))))))))))), lambda shape,  alpha, beta, grad: tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(sigma, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1], [3, 6, 2, 2, 3, 8, 0, 5, 0, 2, 2, 1, 6, 3, 2, 6, 9, 4, 0, 2, 8, 2, 1, 2, 8, 4, 3, 4, 6, 8, 8, 5, 1, 5, 1, 1, 5, 9, 2, 4, 8, 8, 0, 0, 9, 7, 4, 0, 3, 1, 5, 3, 1, 7], [0, 0, 2, 0, 2, 2, 0, 2, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 0, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 41, 81, 44, 8, 48, 35, 52, 44, 16, 6, 21, 5, 73, 40, 82, 15], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 4, 8, 8, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 1, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [50, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 63, 63, 39, 24, 14, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 56, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.negative(tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), grad)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), grad)))), tf.math.subtract(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))))), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(grad), tf.math.add(alpha, tf.math.sqrt(tf.math.square(alpha))))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), grad))))), tf.math.square(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.subtract(alpha, tf.math.add(alpha, tf.math.subtract(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)))))))))))))))))), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07885351777076721, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [3, 6, 2, 2, 1, 2, 0, 8, 0, 9, 2, 4, 6, 3, 2, 6, 5, 9, 0, 2, 0, 2, 1, 2, 8, 4, 1, 4, 6, 8, 1, 2, 4, 5, 1, 0, 5, 9, 5, 4, 9, 8, 0, 0, 9, 7, 4, 0, 3, 1, 5, 3, 1, 7], [1, 1, 2, 2, 2, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 1, 2, 2, 2, 0, 0, 0, 0, 2, 2, 2, 0, 2, 0, 0, 2, 3, 3, 0, 3], [90, 41, 73, 44, 8, 48, 53, 52, 44, 16, 13, 21, 5, 73, 40, 82, 15], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 1, 3, 1, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [6, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [28, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 33, 33, 21, 12, 7, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)), grad), tf.math.subtract(grad, tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.sqrt(tf.math.negative(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.pow(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))))))), grad)), tf.math.negative(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(sigma, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.3023072617354097, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1], [1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 6, 1, 0, 4, 2, 0, 5, 0, 3, 2, 9, 6, 6, 6, 6, 3, 2, 0, 2, 0, 2, 1, 2, 3, 4, 6, 4, 6, 1, 1, 4, 1, 5, 2, 3, 6, 7, 2, 4, 8, 2, 0], [0, 0, 1, 2, 0, 0, 1, 2, 2, 2, 0, 2, 2, 0, 2, 1, 2, 2, 2, 1, 0, 0, 1, 1, 0, 2, 0, 0, 0, 0, 2, 3], [74, 41, 41, 44, 56, 4, 53, 52, 44, 33, 73, 78, 72], [0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 4, 8, 8, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 1, 0, 2, 1, 3, 0, 0], [6, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [50, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07885351777076721, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1], [6, 8, 1, 0, 5, 1, 1, 6, 0, 8, 2, 2, 9, 3, 1, 6, 9, 5, 0, 2, 8, 5, 0, 2, 8, 4, 1, 2, 5, 1, 6, 0, 1, 0, 3, 0, 4, 6, 3, 1, 6, 0, 8, 9, 3, 6, 6, 0, 1, 9, 8, 0], [2, 0, 0, 2, 2, 2, 1, 0, 2, 0, 1, 0, 0, 0, 2, 0, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [74, 41, 51, 44, 70, 79, 53, 52, 72, 33, 75, 97, 72, 0, 66], [1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 4, 8, 8, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 3, 3, 1, 0, 2, 1, 3, 0, 0], [77, 33, 93, 84, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [1, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [50, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 77, 77, 52, 25, 15, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 101, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.subtract(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.subtract(tf.math.subtract(tf.math.divide_no_nan(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))), tf.math.negative(tf.math.add(tf.math.sqrt(grad), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.sqrt(tf.math.pow(alpha, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.square(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.add(alpha, grad)))), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), alpha))), tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32)))))))))))))), tf.math.add(alpha, tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32))))))))))))))))), tf.math.add(alpha, tf.math.sqrt(tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))))))))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha)))), tf.math.add(alpha, grad))))))))), tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [3, 6, 2, 2, 4, 2, 0, 5, 0, 9, 2, 4, 6, 3, 5, 6, 9, 5, 0, 2, 0, 2, 9, 5, 8, 4, 3, 4, 6, 8, 5, 2, 1, 5, 1, 8, 3, 9, 2, 4, 8, 8, 0, 0, 1, 0, 9, 8, 3, 1, 5, 3, 1, 7], [1, 1, 1, 0, 2, 0, 2, 0, 0, 0, 2, 0, 0, 0, 1, 1, 2, 2, 1, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 2, 3, 3, 0, 3], [90, 81, 73, 22, 38, 45, 53, 52, 44, 74, 12, 6, 48, 19, 72, 11, 32], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 5, 8, 8, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 1, 3, 1, 0, 2, 1, 3, 0, 0], [77, 33, 93, 84, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 2, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 68, 68, 48, 20, 14, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 52, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(tf.math.add(alpha, tf.math.pow(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(alpha)), tf.math.add(alpha, tf.math.square(tf.math.negative(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.multiply(tf.math.square(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(alpha, grad))))))))))), tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(grad)), tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(tf.math.subtract(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32))))))))), tf.math.multiply(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), alpha))))))), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.sqrt(alpha)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.negative(tf.math.negative(tf.math.add(alpha, grad)))))))))), tf.math.add(alpha, tf.math.subtract(tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(alpha, alpha)))))), tf.math.add(alpha, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(alpha, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1], [5, 2, 1, 0, 4, 2, 2, 5, 0, 3, 2, 9, 6, 6, 6, 6, 0, 5, 4, 2, 0, 2, 1, 2, 8, 4, 6, 4, 6, 1, 1, 2, 1, 5, 2, 0, 5, 1, 9, 4, 3, 2, 0, 6, 5, 8, 8, 1, 0, 2, 0], [0, 0, 2, 2, 0, 0, 1, 2, 2, 2, 2, 0, 2, 0, 2, 1, 1, 2, 1, 1, 0, 0, 1, 2, 0, 2, 0, 0, 0, 0, 2, 3], [74, 41, 51, 44, 70, 79, 53, 52, 44, 33, 73, 78, 72, 44, 21], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 4, 9, 8, 4, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 3, 3, 1, 0, 2, 1, 3, 0, 0], [6, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [8, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [50, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 6, 6, 4, 2, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), beta), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.multiply(sigma, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [3, 6, 2, 2, 4, 2, 0, 5, 0, 0, 6, 4, 6, 3, 2, 6, 3, 5, 0, 2, 0, 0, 1, 2, 8, 4, 3, 1, 6, 8, 1, 2, 1, 1, 1, 5, 5, 9, 2, 2, 8, 8, 0, 2, 9, 7, 4, 0, 3, 1, 5, 3, 1, 7], [1, 2, 1, 2, 2, 0, 0, 2, 0, 0, 2, 1, 2, 0, 2, 1, 2, 2, 2, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 2, 3, 3, 0, 3], [90, 41, 18, 56, 8, 48, 53, 55, 44, 16, 13, 21, 5, 73, 40, 82, 94], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 1, 3, 1, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 4, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 79, 79, 49, 30, 15, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 59, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(grad, tf.math.negative(alpha)), tf.math.add(alpha, tf.math.square(tf.math.negative(tf.math.negative(tf.math.divide_no_nan(grad, grad)))))), tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.multiply(tf.math.square(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)))))), tf.math.negative(tf.math.negative(tf.math.add(alpha, grad)))))), tf.math.subtract(tf.math.add(alpha, tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.sqrt(tf.math.pow(grad, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.math.sqrt(tf.math.subtract(grad, tf.math.add(alpha, tf.math.add(grad, tf.math.subtract(tf.math.subtract(grad, tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.math.square(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32))))), tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.math.sqrt(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))))), tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(alpha, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.negative(tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))))))))))), grad)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.pow(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 0, 1, 5, 4, 1, 2, 8, 0, 4, 9, 2, 9, 3, 9, 6, 1, 5, 0, 8, 8, 2, 0, 2, 8, 8], [1, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 65, 73, 52, 8, 79, 86, 52, 44], [0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 5, 8, 8, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [2, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [1, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [50, 25, 50, 71, 34]], "fitness": -0.08457142859697342, "mapping_values": [1, 34, 34, 24, 10, 5, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.subtract(tf.math.add(tf.math.sqrt(grad), tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.add(alpha, grad)))))), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.negative(tf.math.add(alpha, grad)))), tf.math.sqrt(tf.math.sqrt(tf.math.add(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.add(grad, grad))))))), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))))))))))), tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(grad), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(sigma, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [6.6288873851102466, 2.321220440147197, 2.304571167856805, 2.303783894687391, 2.3037237172208016, 2.3032074969096064], "accuracy": [0.15321621298789978, 0.09906221181154251, 0.09747721254825592, 0.10157178342342377, 0.09906221181154251, 0.09311848133802414], "val_loss": [2.006762777056013, 1.9756663867405482, 1.9749054227556502, 1.9750322614397322, 1.973824909755162, 1.973752158028739], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09700000286102295]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 5, 1, 0, 4, 2, 1, 5, 0, 4, 6, 2, 9, 3, 6, 9, 9, 8, 0, 2, 8, 2, 0, 2, 8, 0], [2, 2, 2, 0, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [31, 41, 73, 22, 38, 45, 53, 52, 44], [0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [77, 33, 93, 84, 91, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 24, 24, 16, 8, 3, 4, 4, 2, 2, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.math.add(alpha, tf.math.add(grad, grad)), tf.math.subtract(grad, tf.math.add(alpha, tf.math.square(tf.math.negative(tf.math.pow(tf.math.divide_no_nan(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), tf.math.add(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), grad))))))))))))), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.pow(grad, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.303760444420424, 2.3029586211360598, 2.3020522781823525, 2.3028334578062015, 2.301857763135973, 2.3017723800924714], "accuracy": [0.08691058307886124, 0.09232597798109055, 0.09047681838274002, 0.09787346422672272, 0.08651433140039444, 0.0936468094587326], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [3, 4, 1, 0, 5, 2, 1, 8, 0, 8, 2, 2, 9, 3, 1, 6, 9, 5, 0, 2, 8, 2, 0, 2, 8, 4, 1, 2, 5, 1, 6, 0, 1, 0, 3, 0, 4, 6, 3, 1, 6, 0, 8, 9, 3, 6, 6, 0], [2, 0, 0, 2, 2, 2, 1, 0, 2, 0, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [89, 41, 73, 44, 8, 79, 53, 52, 44, 16, 82, 21, 5, 73], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [4, 4, 8, 8, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 2, 1, 3, 0, 0], [77, 33, 93, 84, 91, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [50, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 33, 33, 22, 11, 6, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.negative(tf.math.sqrt(tf.math.add(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(grad, tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, alpha))))))))))))))))), tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))), grad)))))), tf.math.add(tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.303760444420424, 2.3029586211360598, 2.3020522781823525, 2.3028334578062015, 2.301857763135973, 2.3017723800924714], "accuracy": [0.08691058307886124, 0.09232597798109055, 0.09047681838274002, 0.09787346422672272, 0.08651433140039444, 0.0936468094587326], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [2, 3, 1, 0, 5, 1, 1, 8, 0, 8, 2, 2, 9, 3, 3, 6, 0, 5, 0, 2, 2, 2, 0, 2, 8, 4, 1, 2, 5, 1, 6, 0, 1, 0, 3, 0, 4, 6, 3, 1, 6, 0, 8, 9, 3, 6, 6, 0], [0, 0, 2, 2, 0, 0, 1, 2, 2, 2, 0, 0, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 0, 0, 0, 2, 3], [74, 71, 41, 44, 70, 79, 53, 52, 44, 33, 73, 78, 72], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 4, 8, 8, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 1, 3, 1, 0, 2, 1, 3, 0, 0], [6, 33, 83, 36, 91, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [50, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 22, 22, 14, 8, 5, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.square(tf.math.add(alpha, tf.math.subtract(grad, grad))))), tf.math.subtract(tf.math.sqrt(tf.math.negative(tf.math.sqrt(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, grad)))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.303760444420424, 2.3029586211360598, 2.3020522781823525, 2.3028334578062015, 2.301857763135973, 2.3017723800924714], "accuracy": [0.08691058307886124, 0.09232597798109055, 0.09047681838274002, 0.09787346422672272, 0.08651433140039444, 0.0936468094587326], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}]