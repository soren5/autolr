[{"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [4, 1, 2, 1, 0, 4, 9, 4, 1, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 3, 0, 3, 1, 3, 0, 0], [55, 56, 2, 35, 74, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.8191428780555725, "mapping_values": [1, 1, 1, 0, 1, 0, 20, 20, 11, 9, 4, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.add(beta, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))))), tf.math.pow(grad, grad))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))))), tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, alpha))), tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.math.sqrt(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.567662195648578, 2.3033703164559283, 2.2849179102114525, 2.0291894793809604, 1.8435425717266023, 1.5724404968401036, 1.2540929270395278, 1.0880794882018567, 0.984079216252764, 0.8706974661140835, 0.82225855885401, 0.7851517839580401, 0.7658497838453767, 0.6808583192097245, 0.6790351894994249, 0.6210451318666274, 0.6191176213781674, 0.6240530985063959, 0.577285699171397, 0.5526595882074534, 0.5669941905624658, 0.5294210001493662, 0.557292816181067, 0.5071141109797523, 0.5271552372932938, 0.5134569084749813, 0.47270712637079393, 0.4963481309879662, 0.465543668842618, 0.4484110016155835, 0.4912777058814637], "accuracy": [0.22665433585643768, 0.10777968913316727, 0.19878484308719635, 0.3197728097438812, 0.36745476722717285, 0.46413949131965637, 0.5474838018417358, 0.6053361296653748, 0.6413947939872742, 0.6814159154891968, 0.6917183995246887, 0.7086250185966492, 0.7029454708099365, 0.7511557340621948, 0.7490423917770386, 0.7700436115264893, 0.7684586048126221, 0.7650244235992432, 0.7849689722061157, 0.7954035401344299, 0.7833839654922485, 0.8016114234924316, 0.7893276810646057, 0.81112140417099, 0.8078193068504333, 0.8000264167785645, 0.822348415851593, 0.8137630224227905, 0.8274996876716614, 0.8309338092803955, 0.8166688680648804], "val_loss": [1.9760569163731165, 1.969945022038051, 1.8539378983633858, 1.5868778569357735, 1.1949962888445174, 1.0949669565473283, 0.9279763357979911, 0.8096940006528582, 0.636912294796535, 0.6868258374077933, 0.5900775364467076, 0.691065788269043, 0.5663967302867344, 0.49256183419908794, 0.5132200036730085, 0.4720778635569981, 0.4758942127227783, 0.4706130879265921, 0.413825477872576, 0.5118836164474487, 0.42386224440165926, 0.4404629979814802, 0.40182957478931974, 0.4351443478039333, 0.4265710285731724, 0.38400942938668386, 0.39630413906914846, 0.4269403559820993, 0.3901880213192531, 0.38516829695020405, 0.39734030621392386], "val_accuracy": [0.10999999940395355, 0.1469999998807907, 0.35100001096725464, 0.3713333308696747, 0.4880000054836273, 0.5529999732971191, 0.609000027179718, 0.5913333296775818, 0.7196666598320007, 0.6600000262260437, 0.7089999914169312, 0.6756666898727417, 0.7463333606719971, 0.7703333497047424, 0.737333357334137, 0.784333348274231, 0.7799999713897705, 0.8050000071525574, 0.8146666884422302, 0.7556666731834412, 0.8096666932106018, 0.7979999780654907, 0.8233333230018616, 0.8029999732971191, 0.8033333420753479, 0.8373333215713501, 0.8299999833106995, 0.8059999942779541, 0.8366666436195374, 0.8353333473205566, 0.8346666693687439]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 0, 5, 9, 6, 1, 3, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 0, 0, 3, 1, 3, 0, 0], [55, 33, 2, 9, 74, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.8100000023841858, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 4, 1, 2, 3, 1, 1, 0, 0, 4, 2, 2, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))))), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0285515856544465, 1.3928174971589449, 1.0340181014966403, 0.8773127350557152, 0.7993446830760974, 0.8052396543541479, 0.70558532980754, 0.7127254170717077, 0.6642312144386046, 0.6538966989331415, 0.6650376624009865, 0.6266702176982606, 0.605155210225117, 0.5877772682000617, 0.5849029714279266, 0.5885130025927637, 0.5401044599588883, 0.5783226460773458, 0.5459944474588468, 0.5170895504897942, 0.5210330837816216, 0.5036360867672813, 0.5229634039390356, 0.5020118593272123, 0.49525523970643875, 0.4905149586102147, 0.46549818201969484, 0.4770440307464645, 0.457136593541575, 0.47116349758945675, 0.43925258939638745, 0.43314522630770635, 0.4350638030196036, 0.4385279478248651, 0.4327714946315336, 0.428991738299904, 0.4270223003525886, 0.4136215331232889, 0.4027799510637751, 0.4046918361642971, 0.3990984540636891, 0.40378858896373143, 0.38623553830178153, 0.38115698943095927, 0.37702225868051015, 0.3722155953300722, 0.3739573097562809], "accuracy": [0.31026285886764526, 0.5001981258392334, 0.6213181614875793, 0.6754721999168396, 0.7086250185966492, 0.7000396251678467, 0.7387399077415466, 0.7211728692054749, 0.7478536367416382, 0.7489103078842163, 0.7481178045272827, 0.7573636174201965, 0.7749306559562683, 0.7802139520645142, 0.7774402499198914, 0.7755910754203796, 0.7996301651000977, 0.7790252566337585, 0.7910447716712952, 0.8103289008140564, 0.8084797263145447, 0.8146876096725464, 0.8045172095298767, 0.8108572363853455, 0.8125742673873901, 0.8144234418869019, 0.8285563588142395, 0.8239334225654602, 0.83119797706604, 0.8226125836372375, 0.8323867321014404, 0.8418967127799988, 0.8380662798881531, 0.8335754871368408, 0.8418967127799988, 0.8392550349235535, 0.8451988101005554, 0.8482366800308228, 0.852859616279602, 0.8516708612442017, 0.8474441766738892, 0.8479725122451782, 0.8597279191017151, 0.8613129258155823, 0.8568220734596252, 0.8605204224586487, 0.8588033318519592], "val_loss": [1.4116691861833846, 0.9956113951546806, 0.664825575692313, 0.6802102497645787, 0.7141012975147792, 0.5604360273906163, 0.5341218028749738, 0.5589208602905273, 0.5270946196147374, 0.5471898487636021, 0.4887093646185739, 0.49898537567683626, 0.4736304112843105, 0.4874643768583025, 0.48433116504124235, 0.44713509934289114, 0.48365724086761475, 0.437147319316864, 0.42773181200027466, 0.45922110761914936, 0.422718950680324, 0.4383814420018877, 0.4383887904030936, 0.400687004838671, 0.41162056582314627, 0.4131078805242266, 0.3897667271750314, 0.41435729605810984, 0.41963404417037964, 0.3787677713802883, 0.38341325521469116, 0.4073289121900286, 0.3883752908025469, 0.39381830181394306, 0.3720513071332659, 0.3861227035522461, 0.38062368971960886, 0.3548016037259783, 0.3886188268661499, 0.3750619462558201, 0.38215041160583496, 0.34884339570999146, 0.3594623804092407, 0.3420219506536211, 0.3551181214196341, 0.3512105516024998, 0.35863245385033743], "val_accuracy": [0.48399999737739563, 0.5490000247955322, 0.7179999947547913, 0.6669999957084656, 0.6766666769981384, 0.7559999823570251, 0.7546666860580444, 0.7326666712760925, 0.7429999709129333, 0.7516666650772095, 0.7923333048820496, 0.7883333563804626, 0.7913333177566528, 0.7710000276565552, 0.7839999794960022, 0.8166666626930237, 0.7946666479110718, 0.812666654586792, 0.8193333148956299, 0.7870000004768372, 0.815666675567627, 0.809333324432373, 0.8016666769981384, 0.824999988079071, 0.8299999833106995, 0.8190000057220459, 0.8343333601951599, 0.8246666789054871, 0.8199999928474426, 0.8366666436195374, 0.8386666774749756, 0.8203333616256714, 0.8336666822433472, 0.8353333473205566, 0.8460000157356262, 0.8270000219345093, 0.8360000252723694, 0.8493333458900452, 0.8330000042915344, 0.8379999995231628, 0.8363333344459534, 0.8579999804496765, 0.846666693687439, 0.8569999933242798, 0.8543333411216736, 0.8539999723434448, 0.8489999771118164]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [4, 1, 2, 8, 0, 4, 9, 6, 1, 1, 4, 2, 8, 1, 1, 8, 9, 0], [0, 3, 3, 3, 0, 3, 1, 3, 0, 0], [52, 87, 36, 82, 8, 7], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.8100000023841858, "mapping_values": [1, 1, 1, 0, 1, 0, 22, 22, 13, 9, 4, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.negative(tf.math.pow(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)))))), tf.math.divide_no_nan(grad, tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), grad)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))))), tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha))), grad)), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0285515856544465, 1.3928174971589449, 1.0340181014966403, 0.8773127350557152, 0.7993446830760974, 0.8052396543541479, 0.70558532980754, 0.7127254170717077, 0.6642312144386046, 0.6538966989331415, 0.6650376624009865, 0.6266702176982606, 0.605155210225117, 0.5877772682000617, 0.5849029714279266, 0.5885130025927637, 0.5401044599588883, 0.5783226460773458, 0.5459944474588468, 0.5170895504897942, 0.5210330837816216, 0.5036360867672813, 0.5229634039390356, 0.5020118593272123, 0.49525523970643875, 0.4905149586102147, 0.46549818201969484, 0.4770440307464645, 0.457136593541575, 0.47116349758945675, 0.43925258939638745, 0.43314522630770635, 0.4350638030196036, 0.4385279478248651, 0.4327714946315336, 0.428991738299904, 0.4270223003525886, 0.4136215331232889, 0.4027799510637751, 0.4046918361642971, 0.3990984540636891, 0.40378858896373143, 0.38623553830178153, 0.38115698943095927, 0.37702225868051015, 0.3722155953300722, 0.3739573097562809], "accuracy": [0.31026285886764526, 0.5001981258392334, 0.6213181614875793, 0.6754721999168396, 0.7086250185966492, 0.7000396251678467, 0.7387399077415466, 0.7211728692054749, 0.7478536367416382, 0.7489103078842163, 0.7481178045272827, 0.7573636174201965, 0.7749306559562683, 0.7802139520645142, 0.7774402499198914, 0.7755910754203796, 0.7996301651000977, 0.7790252566337585, 0.7910447716712952, 0.8103289008140564, 0.8084797263145447, 0.8146876096725464, 0.8045172095298767, 0.8108572363853455, 0.8125742673873901, 0.8144234418869019, 0.8285563588142395, 0.8239334225654602, 0.83119797706604, 0.8226125836372375, 0.8323867321014404, 0.8418967127799988, 0.8380662798881531, 0.8335754871368408, 0.8418967127799988, 0.8392550349235535, 0.8451988101005554, 0.8482366800308228, 0.852859616279602, 0.8516708612442017, 0.8474441766738892, 0.8479725122451782, 0.8597279191017151, 0.8613129258155823, 0.8568220734596252, 0.8605204224586487, 0.8588033318519592], "val_loss": [1.4116691861833846, 0.9956113951546806, 0.664825575692313, 0.6802102497645787, 0.7141012975147792, 0.5604360273906163, 0.5341218028749738, 0.5589208602905273, 0.5270946196147374, 0.5471898487636021, 0.4887093646185739, 0.49898537567683626, 0.4736304112843105, 0.4874643768583025, 0.48433116504124235, 0.44713509934289114, 0.48365724086761475, 0.437147319316864, 0.42773181200027466, 0.45922110761914936, 0.422718950680324, 0.4383814420018877, 0.4383887904030936, 0.400687004838671, 0.41162056582314627, 0.4131078805242266, 0.3897667271750314, 0.41435729605810984, 0.41963404417037964, 0.3787677713802883, 0.38341325521469116, 0.4073289121900286, 0.3883752908025469, 0.39381830181394306, 0.3720513071332659, 0.3861227035522461, 0.38062368971960886, 0.3548016037259783, 0.3886188268661499, 0.3750619462558201, 0.38215041160583496, 0.34884339570999146, 0.3594623804092407, 0.3420219506536211, 0.3551181214196341, 0.3512105516024998, 0.35863245385033743], "val_accuracy": [0.48399999737739563, 0.5490000247955322, 0.7179999947547913, 0.6669999957084656, 0.6766666769981384, 0.7559999823570251, 0.7546666860580444, 0.7326666712760925, 0.7429999709129333, 0.7516666650772095, 0.7923333048820496, 0.7883333563804626, 0.7913333177566528, 0.7710000276565552, 0.7839999794960022, 0.8166666626930237, 0.7946666479110718, 0.812666654586792, 0.8193333148956299, 0.7870000004768372, 0.815666675567627, 0.809333324432373, 0.8016666769981384, 0.824999988079071, 0.8299999833106995, 0.8190000057220459, 0.8343333601951599, 0.8246666789054871, 0.8199999928474426, 0.8366666436195374, 0.8386666774749756, 0.8203333616256714, 0.8336666822433472, 0.8353333473205566, 0.8460000157356262, 0.8270000219345093, 0.8360000252723694, 0.8493333458900452, 0.8330000042915344, 0.8379999995231628, 0.8363333344459534, 0.8579999804496765, 0.846666693687439, 0.8569999933242798, 0.8543333411216736, 0.8539999723434448, 0.8489999771118164]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [9, 1, 2, 1, 0, 4, 9, 6, 1, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 0, 3, 3, 1, 3, 0, 0], [52, 87, 36, 82, 8, 7], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.8100000023841858, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0285515856544465, 1.3928174971589449, 1.0340181014966403, 0.8773127350557152, 0.7993446830760974, 0.8052396543541479, 0.70558532980754, 0.7127254170717077, 0.6642312144386046, 0.6538966989331415, 0.6650376624009865, 0.6266702176982606, 0.605155210225117, 0.5877772682000617, 0.5849029714279266, 0.5885130025927637, 0.5401044599588883, 0.5783226460773458, 0.5459944474588468, 0.5170895504897942, 0.5210330837816216, 0.5036360867672813, 0.5229634039390356, 0.5020118593272123, 0.49525523970643875, 0.4905149586102147, 0.46549818201969484, 0.4770440307464645, 0.457136593541575, 0.47116349758945675, 0.43925258939638745, 0.43314522630770635, 0.4350638030196036, 0.4385279478248651, 0.4327714946315336, 0.428991738299904, 0.4270223003525886, 0.4136215331232889, 0.4027799510637751, 0.4046918361642971, 0.3990984540636891, 0.40378858896373143, 0.38623553830178153, 0.38115698943095927, 0.37702225868051015, 0.3722155953300722, 0.3739573097562809], "accuracy": [0.31026285886764526, 0.5001981258392334, 0.6213181614875793, 0.6754721999168396, 0.7086250185966492, 0.7000396251678467, 0.7387399077415466, 0.7211728692054749, 0.7478536367416382, 0.7489103078842163, 0.7481178045272827, 0.7573636174201965, 0.7749306559562683, 0.7802139520645142, 0.7774402499198914, 0.7755910754203796, 0.7996301651000977, 0.7790252566337585, 0.7910447716712952, 0.8103289008140564, 0.8084797263145447, 0.8146876096725464, 0.8045172095298767, 0.8108572363853455, 0.8125742673873901, 0.8144234418869019, 0.8285563588142395, 0.8239334225654602, 0.83119797706604, 0.8226125836372375, 0.8323867321014404, 0.8418967127799988, 0.8380662798881531, 0.8335754871368408, 0.8418967127799988, 0.8392550349235535, 0.8451988101005554, 0.8482366800308228, 0.852859616279602, 0.8516708612442017, 0.8474441766738892, 0.8479725122451782, 0.8597279191017151, 0.8613129258155823, 0.8568220734596252, 0.8605204224586487, 0.8588033318519592], "val_loss": [1.4116691861833846, 0.9956113951546806, 0.664825575692313, 0.6802102497645787, 0.7141012975147792, 0.5604360273906163, 0.5341218028749738, 0.5589208602905273, 0.5270946196147374, 0.5471898487636021, 0.4887093646185739, 0.49898537567683626, 0.4736304112843105, 0.4874643768583025, 0.48433116504124235, 0.44713509934289114, 0.48365724086761475, 0.437147319316864, 0.42773181200027466, 0.45922110761914936, 0.422718950680324, 0.4383814420018877, 0.4383887904030936, 0.400687004838671, 0.41162056582314627, 0.4131078805242266, 0.3897667271750314, 0.41435729605810984, 0.41963404417037964, 0.3787677713802883, 0.38341325521469116, 0.4073289121900286, 0.3883752908025469, 0.39381830181394306, 0.3720513071332659, 0.3861227035522461, 0.38062368971960886, 0.3548016037259783, 0.3886188268661499, 0.3750619462558201, 0.38215041160583496, 0.34884339570999146, 0.3594623804092407, 0.3420219506536211, 0.3551181214196341, 0.3512105516024998, 0.35863245385033743], "val_accuracy": [0.48399999737739563, 0.5490000247955322, 0.7179999947547913, 0.6669999957084656, 0.6766666769981384, 0.7559999823570251, 0.7546666860580444, 0.7326666712760925, 0.7429999709129333, 0.7516666650772095, 0.7923333048820496, 0.7883333563804626, 0.7913333177566528, 0.7710000276565552, 0.7839999794960022, 0.8166666626930237, 0.7946666479110718, 0.812666654586792, 0.8193333148956299, 0.7870000004768372, 0.815666675567627, 0.809333324432373, 0.8016666769981384, 0.824999988079071, 0.8299999833106995, 0.8190000057220459, 0.8343333601951599, 0.8246666789054871, 0.8199999928474426, 0.8366666436195374, 0.8386666774749756, 0.8203333616256714, 0.8336666822433472, 0.8353333473205566, 0.8460000157356262, 0.8270000219345093, 0.8360000252723694, 0.8493333458900452, 0.8330000042915344, 0.8379999995231628, 0.8363333344459534, 0.8579999804496765, 0.846666693687439, 0.8569999933242798, 0.8543333411216736, 0.8539999723434448, 0.8489999771118164]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [4, 8, 3, 1, 8, 4, 9, 6, 1, 4, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 3, 0, 3, 1, 1, 0, 0], [63, 33, 50, 35, 74, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.8100000023841858, "mapping_values": [1, 1, 1, 0, 1, 0, 19, 19, 12, 7, 4, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.sqrt(tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))), tf.math.pow(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), grad))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))))), grad)), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0285515856544465, 1.3928174971589449, 1.0340181014966403, 0.8773127350557152, 0.7993446830760974, 0.8052396543541479, 0.70558532980754, 0.7127254170717077, 0.6642312144386046, 0.6538966989331415, 0.6650376624009865, 0.6266702176982606, 0.605155210225117, 0.5877772682000617, 0.5849029714279266, 0.5885130025927637, 0.5401044599588883, 0.5783226460773458, 0.5459944474588468, 0.5170895504897942, 0.5210330837816216, 0.5036360867672813, 0.5229634039390356, 0.5020118593272123, 0.49525523970643875, 0.4905149586102147, 0.46549818201969484, 0.4770440307464645, 0.457136593541575, 0.47116349758945675, 0.43925258939638745, 0.43314522630770635, 0.4350638030196036, 0.4385279478248651, 0.4327714946315336, 0.428991738299904, 0.4270223003525886, 0.4136215331232889, 0.4027799510637751, 0.4046918361642971, 0.3990984540636891, 0.40378858896373143, 0.38623553830178153, 0.38115698943095927, 0.37702225868051015, 0.3722155953300722, 0.3739573097562809], "accuracy": [0.31026285886764526, 0.5001981258392334, 0.6213181614875793, 0.6754721999168396, 0.7086250185966492, 0.7000396251678467, 0.7387399077415466, 0.7211728692054749, 0.7478536367416382, 0.7489103078842163, 0.7481178045272827, 0.7573636174201965, 0.7749306559562683, 0.7802139520645142, 0.7774402499198914, 0.7755910754203796, 0.7996301651000977, 0.7790252566337585, 0.7910447716712952, 0.8103289008140564, 0.8084797263145447, 0.8146876096725464, 0.8045172095298767, 0.8108572363853455, 0.8125742673873901, 0.8144234418869019, 0.8285563588142395, 0.8239334225654602, 0.83119797706604, 0.8226125836372375, 0.8323867321014404, 0.8418967127799988, 0.8380662798881531, 0.8335754871368408, 0.8418967127799988, 0.8392550349235535, 0.8451988101005554, 0.8482366800308228, 0.852859616279602, 0.8516708612442017, 0.8474441766738892, 0.8479725122451782, 0.8597279191017151, 0.8613129258155823, 0.8568220734596252, 0.8605204224586487, 0.8588033318519592], "val_loss": [1.4116691861833846, 0.9956113951546806, 0.664825575692313, 0.6802102497645787, 0.7141012975147792, 0.5604360273906163, 0.5341218028749738, 0.5589208602905273, 0.5270946196147374, 0.5471898487636021, 0.4887093646185739, 0.49898537567683626, 0.4736304112843105, 0.4874643768583025, 0.48433116504124235, 0.44713509934289114, 0.48365724086761475, 0.437147319316864, 0.42773181200027466, 0.45922110761914936, 0.422718950680324, 0.4383814420018877, 0.4383887904030936, 0.400687004838671, 0.41162056582314627, 0.4131078805242266, 0.3897667271750314, 0.41435729605810984, 0.41963404417037964, 0.3787677713802883, 0.38341325521469116, 0.4073289121900286, 0.3883752908025469, 0.39381830181394306, 0.3720513071332659, 0.3861227035522461, 0.38062368971960886, 0.3548016037259783, 0.3886188268661499, 0.3750619462558201, 0.38215041160583496, 0.34884339570999146, 0.3594623804092407, 0.3420219506536211, 0.3551181214196341, 0.3512105516024998, 0.35863245385033743], "val_accuracy": [0.48399999737739563, 0.5490000247955322, 0.7179999947547913, 0.6669999957084656, 0.6766666769981384, 0.7559999823570251, 0.7546666860580444, 0.7326666712760925, 0.7429999709129333, 0.7516666650772095, 0.7923333048820496, 0.7883333563804626, 0.7913333177566528, 0.7710000276565552, 0.7839999794960022, 0.8166666626930237, 0.7946666479110718, 0.812666654586792, 0.8193333148956299, 0.7870000004768372, 0.815666675567627, 0.809333324432373, 0.8016666769981384, 0.824999988079071, 0.8299999833106995, 0.8190000057220459, 0.8343333601951599, 0.8246666789054871, 0.8199999928474426, 0.8366666436195374, 0.8386666774749756, 0.8203333616256714, 0.8336666822433472, 0.8353333473205566, 0.8460000157356262, 0.8270000219345093, 0.8360000252723694, 0.8493333458900452, 0.8330000042915344, 0.8379999995231628, 0.8363333344459534, 0.8579999804496765, 0.846666693687439, 0.8569999933242798, 0.8543333411216736, 0.8539999723434448, 0.8489999771118164]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1], [4, 1, 3, 1, 2, 4, 9, 6, 1, 2, 6, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 0, 3, 3, 1, 3, 0, 0], [55, 33, 2, 35, 74, 78], [1, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [11, 25, 61, 71, 34]], "fitness": -0.4339999854564667, "mapping_values": [1, 1, 1, 0, 1, 0, 21, 21, 12, 9, 5, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), grad)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, alpha))))), tf.math.divide_no_nan(tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3015034459506705, 2.3022219037902576, 2.299356372805792, 2.298991436719611, 2.299628383652598, 2.297772676307669, 2.2956069289197254, 2.2957901512201926, 2.2948405052047, 2.2947324072727358, 2.2943330745120107, 2.2918210130688252, 2.291088312246292, 2.290578937328975, 2.2896967507970647, 2.2882331387556745, 2.288134865079967, 2.285707994207116, 2.2882379791472394, 2.284641178576009, 2.284558994422704, 2.2839335949665616, 2.2831705121347823, 2.281803506602543, 2.2816293424445844, 2.2813266048562397, 2.2779002454790693, 2.2794753252759254, 2.2775135544454574, 2.277287425334821, 2.2767161601223664, 2.273044713751798, 2.274766074510503, 2.2727144757093076, 2.272722178194517, 2.2719600194669782, 2.2719625077621104, 2.2698677546312593, 2.268516584646275, 2.2683772711060413, 2.2684706664749847, 2.266226174667322, 2.264962562149888, 2.263242711732416, 2.263524966894313, 2.262193410498292, 2.2619796154789085, 2.260076103776028, 2.2607336452750166, 2.2589158370683475, 2.2573380857615533, 2.2569076585385464, 2.2550423736065888, 2.25498385272557, 2.253801782511292, 2.252495957875784, 2.250812169756352, 2.2508163144166176, 2.2495474228060965, 2.247968449930804, 2.2496749969316654, 2.245932085670579, 2.24594094800187, 2.2443873316714824, 2.2444028832956215, 2.242150719706503, 2.240875471442871, 2.239749325012975, 2.237729780898512, 2.2380223063870885, 2.2375766953551586, 2.2364061887726225, 2.233650797189046, 2.2343233085783987, 2.233453174639435, 2.2314722177422106, 2.2290669392600995, 2.230171450314001, 2.228044349661341, 2.2261337903291953, 2.2259236209034494, 2.223752262853376, 2.224081091924256, 2.221378120118286, 2.220601643900027, 2.2206087429541417, 2.218761553617595, 2.2161554806205057, 2.21645202993827, 2.2129680394905904, 2.212396761209359, 2.212894852922546, 2.2082130676877183, 2.2078118968271325, 2.210157101951995, 2.205992525090883, 2.2036278253816546, 2.2018825107829416, 2.2015188272524315, 2.2007715550270124], "accuracy": [0.08955223858356476, 0.08915598690509796, 0.09853387624025345, 0.09932637959718704, 0.09747721254825592, 0.09893012791872025, 0.10698718577623367, 0.10896842926740646, 0.11002509295940399, 0.10619468986988068, 0.11187426000833511, 0.11108175665140152, 0.11834631860256195, 0.11887465417385101, 0.1262712925672531, 0.1258750557899475, 0.12878087162971497, 0.13168670237064362, 0.12679962813854218, 0.13749834895133972, 0.1310262829065323, 0.14000792801380157, 0.13512085378170013, 0.14093250036239624, 0.14159291982650757, 0.14476291835308075, 0.15057456493377686, 0.151234969496727, 0.1526878923177719, 0.15519747138023376, 0.15770703554153442, 0.16589617729187012, 0.16497160494327545, 0.16761326789855957, 0.1740853190422058, 0.1736890822649002, 0.16919825971126556, 0.17236824333667755, 0.17038699984550476, 0.17580240964889526, 0.17910447716712952, 0.18372738361358643, 0.1884823739528656, 0.19099193811416626, 0.19059570133686066, 0.19535067677497864, 0.19799233973026276, 0.201294407248497, 0.19574692845344543, 0.2044644057750702, 0.2102760523557663, 0.2086910605430603, 0.22084268927574158, 0.21199312806129456, 0.216880202293396, 0.2148989588022232, 0.22163519263267517, 0.22718267142772675, 0.22639016807079315, 0.22982433438301086, 0.22335226833820343, 0.23682472109794617, 0.2351076453924179, 0.22784309089183807, 0.24303261935710907, 0.240919291973114, 0.244485542178154, 0.25241050124168396, 0.25676923990249634, 0.25584468245506287, 0.2440892904996872, 0.2506934404373169, 0.25716549158096313, 0.26284506916999817, 0.25518426299095154, 0.2545238435268402, 0.270109623670578, 0.2619204819202423, 0.27077004313468933, 0.2662792205810547, 0.2712983787059784, 0.2719587981700897, 0.2719587981700897, 0.27565711736679077, 0.2785629332065582, 0.2728833854198456, 0.282129168510437, 0.28886541724205017, 0.29203540086746216, 0.2891295850276947, 0.2871483266353607, 0.28239333629608154, 0.29718664288520813, 0.3011491298675537, 0.2887333333492279, 0.29943203926086426, 0.29612997174263, 0.3061682879924774, 0.30365869402885437, 0.3031303584575653], "val_loss": [1.9697584424700056, 1.9689149175371443, 1.9680820873805456, 1.9672572272164481, 1.9664346149989538, 1.9656100273132324, 1.964780330657959, 1.9639650753566198, 1.963141713823591, 1.9623285702296667, 1.9615023476736886, 1.960677146911621, 1.95986236844744, 1.9590447970799036, 1.9582277706691198, 1.9574189186096191, 1.956606047494071, 1.9557790075029646, 1.9549697467258997, 1.9541606903076172, 1.9533423015049525, 1.9525250707353865, 1.951705047062465, 1.9508752141680037, 1.9500502858843123, 1.9492359842572893, 1.948411532810756, 1.9475910323006767, 1.9467526844569616, 1.945920399257115, 1.9450866154261999, 1.9442487444196428, 1.943408761705671, 1.9425616264343262, 1.9417166709899902, 1.9408706256321497, 1.9400199481419154, 1.9391743796212333, 1.938326358795166, 1.937469141823905, 1.9366066115243095, 1.9357358387538366, 1.9348615918840681, 1.9339895248413086, 1.9331056049891882, 1.9322174617222376, 1.931338174002511, 1.9304464885166712, 1.9295511926923479, 1.9286486080714635, 1.9277432986668177, 1.9268240247453963, 1.9259084974016463, 1.924988065447126, 1.92405332837786, 1.9231175695146834, 1.9221701622009277, 1.9212135587419783, 1.9202511651175362, 1.9192773955208915, 1.9183179310389928, 1.9173273359026228, 1.9163452557155065, 1.9153452600751604, 1.9143517357962472, 1.9133445194789342, 1.9123311042785645, 1.9113026346479143, 1.9102631977626257, 1.9092206273760115, 1.9081647055489677, 1.907111440386091, 1.906029156276158, 1.9049574988228934, 1.9038760321480888, 1.9027749470302038, 1.9016544478280204, 1.9005536351885115, 1.8994228499276298, 1.8982734680175781, 1.8971142087663924, 1.8959544045584542, 1.8947913306100028, 1.8936097962515694, 1.892415932246617, 1.891223430633545, 1.8900162151881628, 1.8887928553989954, 1.8875625474112374, 1.8863077844892229, 1.8850462096078056, 1.883786678314209, 1.8824798039027624, 1.881183079310826, 1.879885537283761, 1.8785552297319685, 1.8772058486938477, 1.8758514268057687, 1.8744871275765556, 1.873112337929862], "val_accuracy": [0.044333335012197495, 0.04933333396911621, 0.054999999701976776, 0.061000000685453415, 0.06533333659172058, 0.07199999690055847, 0.07733333110809326, 0.08433333039283752, 0.09133332967758179, 0.10133333504199982, 0.1106666699051857, 0.11733333021402359, 0.12733332812786102, 0.1340000033378601, 0.14100000262260437, 0.14900000393390656, 0.1576666682958603, 0.16699999570846558, 0.17466667294502258, 0.18466666340827942, 0.19200000166893005, 0.20200000703334808, 0.20999999344348907, 0.21833333373069763, 0.22166666388511658, 0.22733333706855774, 0.23366667330265045, 0.24133333563804626, 0.24899999797344208, 0.2553333342075348, 0.26233333349227905, 0.2696666717529297, 0.2773333191871643, 0.28333333134651184, 0.29100000858306885, 0.2956666648387909, 0.30033332109451294, 0.30666667222976685, 0.31166666746139526, 0.3160000145435333, 0.3199999928474426, 0.32600000500679016, 0.33133333921432495, 0.33533334732055664, 0.33899998664855957, 0.3449999988079071, 0.3479999899864197, 0.35100001096725464, 0.3543333411216736, 0.35733333230018616, 0.36000001430511475, 0.3630000054836273, 0.36533331871032715, 0.367000013589859, 0.36766666173934937, 0.36933332681655884, 0.3720000088214874, 0.3763333261013031, 0.3790000081062317, 0.37966665625572205, 0.38199999928474426, 0.38333332538604736, 0.3840000033378601, 0.3856666684150696, 0.3883333206176758, 0.3903333246707916, 0.39133334159851074, 0.39366665482521057, 0.39533331990242004, 0.3973333239555359, 0.39899998903274536, 0.4020000100135803, 0.4033333361148834, 0.4046666622161865, 0.40533334016799927, 0.4076666533946991, 0.4086666703224182, 0.4103333353996277, 0.41200000047683716, 0.4143333435058594, 0.4156666696071625, 0.4183333218097687, 0.4206666648387909, 0.42266666889190674, 0.4246666729450226, 0.4256666600704193, 0.4266666769981384, 0.42933332920074463, 0.42899999022483826, 0.4313333332538605, 0.43299999833106995, 0.4339999854564667, 0.4346666634082794, 0.4363333284854889, 0.43666666746139526, 0.437666654586792, 0.4386666715145111, 0.43933331966400146, 0.4403333365917206, 0.4423333406448364]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1], [4, 1, 6, 1, 0, 4, 9, 6, 1, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 3, 3, 3, 0, 3, 3, 3, 0, 0], [52, 87, 36, 82, 8, 7], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 2, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 26, 26, 16, 10, 5, 3, 1, 1, 0, 0, 4, 2, 2, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.pow(alpha, tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))))), tf.math.divide_no_nan(grad, tf.math.subtract(tf.math.subtract(tf.math.add(beta, grad), grad), tf.math.add(beta, tf.math.pow(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.subtract(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)))))))), grad), grad), tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [9, 2, 3, 1, 0, 3, 4, 4, 1, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 3, 3, 3, 3, 0, 0], [52, 81, 36, 82, 8, 7], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 4, 8, 6, 7, 4], [2, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [77, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 3, 1, 1, 0, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 0, 5, 9, 6, 1, 3, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 0, 0, 3, 1, 3, 0, 0], [55, 33, 2, 9, 74, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [5, 3, 8, 6, 7, 4, 0, 1, 0], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [55, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(grad, tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.multiply(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1], [4, 1, 2, 1, 0, 4, 9, 6, 1, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 3, 0, 3, 1, 3, 0, 0], [52, 87, 78, 82, 8, 7], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1], [2, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 21, 21, 13, 8, 4, 3, 1, 1, 0, 0, 12, 6, 6, 2], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))))), tf.math.divide_no_nan(grad, tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), grad)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))))), tf.math.add(beta, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.sqrt(grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(alpha, tf.math.sqrt(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.add(sigma, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), tf.math.pow(alpha, beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1], [3, 0, 5, 9, 6, 1, 3, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 3, 3, 3, 3, 3, 0, 3, 0, 0], [52, 38, 36, 34, 36, 7], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [0, 3], [], [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 6, 8, 6, 7, 4, 9, 9], [0, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 1, 0, 1, 1], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302569770951549, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1], [4, 3, 5, 1, 0, 4, 9, 6, 1, 1, 4, 6, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 3, 3, 1, 3, 0, 0], [55, 33, 65, 9, 74, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1], [8, 3, 8, 6, 7, 4, 6, 7, 7, 0, 5, 4, 2, 1], [1, 0, 3, 0, 1, 2, 2, 0, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [70, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 24, 24, 14, 10, 3, 3, 1, 1, 0, 0, 25, 14, 11, 4], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))), tf.math.subtract(tf.math.negative(tf.math.pow(tf.math.add(beta, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, grad), grad), tf.math.sqrt(tf.math.add(beta, grad))))), tf.math.add(beta, alpha)), grad))), tf.math.subtract(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.multiply(alpha, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(tf.math.pow(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), sigma), tf.math.divide_no_nan(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.negative(beta), beta)))), tf.math.square(tf.math.pow(tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), sigma)), beta))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [9, 2, 3, 1, 0, 3, 4, 4, 1, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 3, 0, 3, 1, 3, 0, 0], [52, 81, 36, 82, 8, 7], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [0, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 0, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 2, 1, 1, 0, 0, 3, 2, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07555144280195236, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 3, 5, 9, 6, 1, 3, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 3, 3, 3, 3, 0, 0], [52, 81, 36, 82, 8, 7], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [0, 3, 0], [4, 3], [], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 9, 5, 2, 2, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.square(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32))), tf.math.add(grad, grad)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07555144280195236, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [4, 1, 2, 1, 0, 4, 9, 6, 1, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 0, 0, 3, 1, 3, 0, 0], [48, 87, 36, 82, 8, 7], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1], [6, 4, 8, 6, 7, 4, 1, 3, 4, 6], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [27, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 20, 10, 10, 3], "tree_depth": 18, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.pow(tf.math.sqrt(alpha), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(sigma, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), tf.math.pow(alpha, tf.math.subtract(beta, tf.math.multiply(beta, tf.math.pow(sigma, tf.math.divide_no_nan(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), sigma)))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 0, 5, 9, 6, 1, 3, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 0, 3, 3, 1, 3, 0, 0], [49, 33, 2, 35, 74, 78], [1, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [4, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 4, 1, 2, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.multiply(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.multiply(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.302569770951549, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [4, 3, 0, 0, 0, 4, 9, 6, 1, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 3, 1, 0, 3, 0, 0], [55, 33, 2, 9, 74, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1], [8, 3, 8, 6, 7, 4, 6, 7, 7, 7, 5, 4, 5, 1], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 8, 8, 5, 3, 0, 3, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(grad, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.negative(tf.math.negative(tf.math.add(beta, grad))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [4, 2, 6, 1, 3, 2, 6, 2, 1, 6, 9, 5, 8, 1, 1, 8, 9, 0], [0, 3, 3, 0, 2, 3, 1, 3, 3, 0], [52, 87, 36, 82, 8, 7], [1, 1, 1, 1, 0, 1], [0, 1, 1, 0], [0, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [4, 3, 8, 6, 7, 4], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 0, 21, 21, 11, 10, 4, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(grad, grad))), tf.math.add(beta, tf.math.add(tf.math.subtract(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), beta), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, alpha))))))), tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)), tf.math.add(beta, grad)), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.pow(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3018618188340825, 2.303480733418745, 2.3014903267880693, 2.3019907717628563, 2.30349573303664, 2.302554448141225], "accuracy": [0.08875974267721176, 0.08611807972192764, 0.09377889335155487, 0.09206181764602661, 0.08968432247638702, 0.08928807079792023], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [4, 1, 2, 1, 0, 4, 9, 1, 6, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 0, 3, 3, 1, 1, 0, 0], [52, 87, 79, 82, 8, 7], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [3, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 0, 20, 20, 12, 8, 4, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, grad)))), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, alpha))), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3018618188340825, 2.303480733418745, 2.3014903267880693, 2.3019907717628563, 2.30349573303664, 2.302554448141225], "accuracy": [0.08875974267721176, 0.08611807972192764, 0.09377889335155487, 0.09206181764602661, 0.08968432247638702, 0.08928807079792023], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [0, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [9, 2, 3, 1, 0, 3, 4, 4, 1, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 3, 3, 3, 3, 0, 0], [52, 87, 36, 82, 8, 7], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [3, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3018618188340825, 2.303480733418745, 2.3014903267880693, 2.3019907717628563, 2.30349573303664, 2.302554448141225], "accuracy": [0.08875974267721176, 0.08611807972192764, 0.09377889335155487, 0.09206181764602661, 0.08968432247638702, 0.08928807079792023], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}]