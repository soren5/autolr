[{"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 6, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 5, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.8191428780555725, "mapping_values": [1, 14, 14, 7, 7, 1, 8, 8, 5, 3, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)), tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))))), tf.math.add(alpha, grad)), tf.math.add(tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9956104780122068, 1.3022466203744747, 1.0091165067213967, 0.841433905796242, 0.7800376242996758, 0.7677409544659959, 0.7229597064576775, 0.6744569649455129, 0.64891267314075, 0.6388403443203091, 0.6243218654150882, 0.5927053095720951, 0.5918511895140826, 0.556943895936154, 0.5424347104429175, 0.544420542316729, 0.5301410903028131, 0.5086156918687308, 0.5052598146415421, 0.5052779308399583, 0.4955360889395451, 0.47430645413386774, 0.48858056571804503, 0.45809724208559455, 0.4626835563305331, 0.44891507097947647, 0.45407343759449825, 0.4559925938751625, 0.41686001264140465, 0.42102306656093647, 0.42244841377055875, 0.4260962369805393, 0.4047027582489914], "accuracy": [0.3337736129760742, 0.550521731376648, 0.6279223561286926, 0.6852463483810425, 0.705058753490448, 0.7128516435623169, 0.7253995537757874, 0.7424382567405701, 0.7535332441329956, 0.7642319202423096, 0.7640998363494873, 0.7796856164932251, 0.7746664881706238, 0.787082314491272, 0.7956677079200745, 0.7960638999938965, 0.7985734939575195, 0.8124422430992126, 0.8083476424217224, 0.806630551815033, 0.8171972036361694, 0.8207634687423706, 0.817989706993103, 0.8330471515655518, 0.8240655064582825, 0.8319904804229736, 0.8280280232429504, 0.8286884427070618, 0.8467837572097778, 0.8451988101005554, 0.8450667262077332, 0.8376700282096863, 0.8510104417800903], "val_loss": [1.258267845426287, 0.8322139808109829, 0.7874936376299176, 0.6361933776310512, 0.5968016726630074, 0.5775297369275775, 0.5347397157124111, 0.567108154296875, 0.5171367951801845, 0.47866480691092356, 0.4782997710364206, 0.47815801416124615, 0.4775140455790928, 0.45255525623049053, 0.5123639106750488, 0.4430603214672634, 0.47843314920152935, 0.4266706705093384, 0.4221949407032558, 0.4094639505658831, 0.3962718333516802, 0.42092675822121756, 0.3870480741773333, 0.41486282859529766, 0.3978292771748134, 0.36301582200186594, 0.39831571919577463, 0.35723020349230084, 0.3975310070174081, 0.3671954699925014, 0.37491611923490253, 0.3589523604937962, 0.367804799761091], "val_accuracy": [0.5856666564941406, 0.6313333511352539, 0.6303333044052124, 0.6976666450500488, 0.7483333349227905, 0.7553333044052124, 0.7570000290870667, 0.731333315372467, 0.7663333415985107, 0.7983333468437195, 0.7879999876022339, 0.7860000133514404, 0.7910000085830688, 0.8013333082199097, 0.7540000081062317, 0.8053333163261414, 0.7886666655540466, 0.8216666579246521, 0.824999988079071, 0.8289999961853027, 0.8296666741371155, 0.8109999895095825, 0.8356666564941406, 0.8180000185966492, 0.8353333473205566, 0.847000002861023, 0.8346666693687439, 0.8513333201408386, 0.8266666531562805, 0.8453333377838135, 0.8336666822433472, 0.8476666808128357, 0.8489999771118164]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [5, 2, 6, 6, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 1, 0, 0, 1, 2, 0, 1, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 5, 1, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.8191428780555725, "mapping_values": [1, 30, 30, 19, 11, 5, 8, 8, 5, 3, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, alpha), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.square(tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))), tf.math.sqrt(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))))))))))), tf.math.add(alpha, alpha))))), tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9956104780122068, 1.3022466203744747, 1.0091165067213967, 0.841433905796242, 0.7800376242996758, 0.7677409544659959, 0.7229597064576775, 0.6744569649455129, 0.64891267314075, 0.6388403443203091, 0.6243218654150882, 0.5927053095720951, 0.5918511895140826, 0.556943895936154, 0.5424347104429175, 0.544420542316729, 0.5301410903028131, 0.5086156918687308, 0.5052598146415421, 0.5052779308399583, 0.4955360889395451, 0.47430645413386774, 0.48858056571804503, 0.45809724208559455, 0.4626835563305331, 0.44891507097947647, 0.45407343759449825, 0.4559925938751625, 0.41686001264140465, 0.42102306656093647, 0.42244841377055875, 0.4260962369805393, 0.4047027582489914], "accuracy": [0.3337736129760742, 0.550521731376648, 0.6279223561286926, 0.6852463483810425, 0.705058753490448, 0.7128516435623169, 0.7253995537757874, 0.7424382567405701, 0.7535332441329956, 0.7642319202423096, 0.7640998363494873, 0.7796856164932251, 0.7746664881706238, 0.787082314491272, 0.7956677079200745, 0.7960638999938965, 0.7985734939575195, 0.8124422430992126, 0.8083476424217224, 0.806630551815033, 0.8171972036361694, 0.8207634687423706, 0.817989706993103, 0.8330471515655518, 0.8240655064582825, 0.8319904804229736, 0.8280280232429504, 0.8286884427070618, 0.8467837572097778, 0.8451988101005554, 0.8450667262077332, 0.8376700282096863, 0.8510104417800903], "val_loss": [1.258267845426287, 0.8322139808109829, 0.7874936376299176, 0.6361933776310512, 0.5968016726630074, 0.5775297369275775, 0.5347397157124111, 0.567108154296875, 0.5171367951801845, 0.47866480691092356, 0.4782997710364206, 0.47815801416124615, 0.4775140455790928, 0.45255525623049053, 0.5123639106750488, 0.4430603214672634, 0.47843314920152935, 0.4266706705093384, 0.4221949407032558, 0.4094639505658831, 0.3962718333516802, 0.42092675822121756, 0.3870480741773333, 0.41486282859529766, 0.3978292771748134, 0.36301582200186594, 0.39831571919577463, 0.35723020349230084, 0.3975310070174081, 0.3671954699925014, 0.37491611923490253, 0.3589523604937962, 0.367804799761091], "val_accuracy": [0.5856666564941406, 0.6313333511352539, 0.6303333044052124, 0.6976666450500488, 0.7483333349227905, 0.7553333044052124, 0.7570000290870667, 0.731333315372467, 0.7663333415985107, 0.7983333468437195, 0.7879999876022339, 0.7860000133514404, 0.7910000085830688, 0.8013333082199097, 0.7540000081062317, 0.8053333163261414, 0.7886666655540466, 0.8216666579246521, 0.824999988079071, 0.8289999961853027, 0.8296666741371155, 0.8109999895095825, 0.8356666564941406, 0.8180000185966492, 0.8353333473205566, 0.847000002861023, 0.8346666693687439, 0.8513333201408386, 0.8266666531562805, 0.8453333377838135, 0.8336666822433472, 0.8476666808128357, 0.8489999771118164]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [3, 2, 3, 2, 1, 0, 2, 3, 2, 6, 2, 8, 9, 3, 2, 6, 0, 5, 0, 2, 4, 0], [1, 1, 2, 1, 0, 0, 1, 2, 0, 0, 1, 3, 1, 2, 3], [31, 62, 35, 73, 14, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 1, 3, 8, 2, 8, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 23, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [10, 25, 50, 71, 34]], "fitness": -0.40714284777641296, "mapping_values": [1, 37, 37, 22, 15, 5, 14, 14, 8, 6, 2, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32))))))))), tf.math.divide_no_nan(tf.math.add(tf.math.sqrt(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, alpha)))), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))))))), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))))))), tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)))), beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3015022314046716, 2.3017519450915125, 2.300328080081952, 2.3002156768224937, 2.2989717945367936, 2.297532772454194, 2.2981599110024025, 2.297672743999475, 2.29543757233968, 2.2949685389733254, 2.294800425533133, 2.293190869294956, 2.292201808289042, 2.2929757310887213, 2.2905015304592133, 2.2908543326741024, 2.2904675959155165, 2.2910455025859466, 2.2888606157064784, 2.286969734771833, 2.2883434982158724, 2.286010609704742, 2.2868247094202854, 2.2852313315407033, 2.285238179390882, 2.2856576755109512, 2.284417263725572, 2.2829767473306735, 2.282770367440861, 2.2809002066584405, 2.2805514118029313, 2.2803029689680487, 2.2801397519419617, 2.2789778599193022, 2.275877477313077, 2.2778126558906697, 2.276880802999256, 2.2763578613373454, 2.2744043692779137, 2.2738042706905373, 2.274113167703679, 2.271416185333933, 2.273230989107508, 2.2716572368149714, 2.2708147120056936, 2.269432957681604, 2.269770291912526, 2.2683881752841493, 2.2669583576828685, 2.267576348559574, 2.265411258767294, 2.2645813905488956, 2.264277869621209, 2.26465004876998, 2.2628205314745062, 2.263540813746847, 2.262815929060646, 2.259270501536716, 2.259481480061465, 2.259014658467519, 2.258438209422339, 2.257112951043134, 2.257892363484919, 2.255424816909798, 2.2569125192733157, 2.2549302685671733, 2.2545024796940507, 2.2525711621370266, 2.2522524147300733, 2.2532171660158626, 2.250133145455403, 2.2486609810489187, 2.2487016509568387, 2.2486486621993236, 2.246475570253204, 2.24634520164523, 2.2451202004041813, 2.244057825795412, 2.2440314925562483, 2.244420131184028, 2.241986106903546, 2.242012180026811, 2.2405162322412564, 2.240830805512341, 2.2384834948343104, 2.236540859370042, 2.237047241254017, 2.2351758711845995, 2.235766722399876, 2.232407251699899, 2.233534748402128, 2.2312107922583366, 2.2311062763994083, 2.2318783003215414, 2.228933299049143, 2.2279323819228103, 2.2285128947907844, 2.226863904069239, 2.226069993819102, 2.222315665485522], "accuracy": [0.09113723784685135, 0.09311848133802414, 0.0956280529499054, 0.09100515395402908, 0.09338264167308807, 0.09774138033390045, 0.1006472036242485, 0.10210011899471283, 0.09972262382507324, 0.109232597053051, 0.10500594228506088, 0.11068551242351532, 0.11121384054422379, 0.11200633645057678, 0.11755382269620895, 0.11861048638820648, 0.1154404953122139, 0.11755382269620895, 0.12270505726337433, 0.12878087162971497, 0.12957337498664856, 0.13155461847782135, 0.13115836679935455, 0.13168670237064362, 0.13313961029052734, 0.12957337498664856, 0.1422533392906189, 0.13393211364746094, 0.14581957459449768, 0.14238542318344116, 0.1468762308359146, 0.14938580989837646, 0.1476687341928482, 0.15691454708576202, 0.15902787446975708, 0.1534803807735443, 0.16232994198799133, 0.15651829540729523, 0.16417910158634186, 0.16378284990787506, 0.16299036145210266, 0.1728965789079666, 0.16893409192562103, 0.16470743715763092, 0.16563200950622559, 0.17659489810466766, 0.18016114830970764, 0.18055738508701324, 0.18095363676548004, 0.17936864495277405, 0.19231277704238892, 0.18742570281028748, 0.19191652536392212, 0.19178444147109985, 0.19284109771251678, 0.189274862408638, 0.1942940205335617, 0.20604939758777618, 0.2036719024181366, 0.2024831622838974, 0.20882314443588257, 0.2141064554452896, 0.20921939611434937, 0.21291771531105042, 0.20314356684684753, 0.20816272497177124, 0.21133272349834442, 0.2156914472579956, 0.22361643612384796, 0.21423853933811188, 0.21965394914150238, 0.22837141156196594, 0.22982433438301086, 0.22916391491889954, 0.23457930982112885, 0.22916391491889954, 0.23286223411560059, 0.23220182955265045, 0.23801347613334656, 0.23457930982112885, 0.24276845157146454, 0.2448817789554596, 0.2456742823123932, 0.2362964004278183, 0.24474970996379852, 0.2530709207057953, 0.24699510633945465, 0.25082552433013916, 0.24924051761627197, 0.25201427936553955, 0.2619204819202423, 0.2584863305091858, 0.26258090138435364, 0.2587504982948303, 0.25980716943740845, 0.27327960729599, 0.26878878474235535, 0.2677321434020996, 0.26641130447387695, 0.27618545293807983], "val_loss": [1.969907283782959, 1.9692271777561732, 1.968541213444301, 1.9678610392979212, 1.9671778678894043, 1.966499192374093, 1.9658194950648717, 1.9651460647583008, 1.9644692965916224, 1.963792324066162, 1.963123185294015, 1.9624462127685547, 1.9617763246808733, 1.9611022131783622, 1.9604336874825614, 1.9597648893083846, 1.9590943200247628, 1.9584341730390276, 1.957761287689209, 1.957090241568429, 1.9564311163766044, 1.9557619094848633, 1.9551044191632951, 1.954439571925572, 1.9537734985351562, 1.9531131471906389, 1.9524407386779785, 1.95177275793893, 1.9511089324951172, 1.9504376820155553, 1.9497622081211634, 1.9490880284990584, 1.948418072291783, 1.9477460043770927, 1.947059222630092, 1.9463937623160226, 1.9457105227879115, 1.945028373173305, 1.9443443162100655, 1.9436569895063127, 1.9429755210876465, 1.942277090890067, 1.941592080252511, 1.9409067290169852, 1.9402142252240862, 1.9395176342555456, 1.9388156618390764, 1.9381067412240165, 1.9373985018048967, 1.9367011615208216, 1.9359927858625139, 1.935279437473842, 1.9345711980547224, 1.933865683419364, 1.933147975376674, 1.932436738695417, 1.9317128998892648, 1.930976050240653, 1.930243764604841, 1.9295144081115723, 1.928778988974435, 1.9280342374529158, 1.9272913251604353, 1.9265405791146415, 1.925790514264788, 1.9250408581324987, 1.9242754663739885, 1.9235055106026786, 1.9227375302995955, 1.92196866444179, 1.9211885588509696, 1.9204034124101912, 1.9196130888802665, 1.9188269887651717, 1.9180308750697546, 1.917227336338588, 1.9164205278669084, 1.9156082017081124, 1.9147885867527552, 1.9139745576041085, 1.9131460189819336, 1.9123101234436035, 1.9114740235464913, 1.9106309754507882, 1.9097793442862374, 1.9089096614292689, 1.90803895677839, 1.9071666172572546, 1.9062950270516532, 1.9054070200238908, 1.90452207837786, 1.9036292348589217, 1.9027314186096191, 1.901834419795445, 1.9009244101388114, 1.900003092629569, 1.899090085710798, 1.8981554167611259, 1.8972116197858537, 1.8962608064923967], "val_accuracy": [0.041999999433755875, 0.04933333396911621, 0.05166666582226753, 0.056333333253860474, 0.06133333221077919, 0.06499999761581421, 0.07000000029802322, 0.07500000298023224, 0.07966666668653488, 0.08699999749660492, 0.09233333170413971, 0.10100000351667404, 0.10833333432674408, 0.1133333370089531, 0.12099999934434891, 0.1276666671037674, 0.1326666623353958, 0.1393333375453949, 0.1459999978542328, 0.15333333611488342, 0.1599999964237213, 0.16699999570846558, 0.17233332991600037, 0.1809999942779541, 0.1886666715145111, 0.19499999284744263, 0.20133332908153534, 0.20766666531562805, 0.21433334052562714, 0.2199999988079071, 0.22300000488758087, 0.22833333909511566, 0.23533333837985992, 0.23866666853427887, 0.2433333396911621, 0.2486666738986969, 0.25466665625572205, 0.2616666555404663, 0.2669999897480011, 0.27399998903274536, 0.2783333361148834, 0.2863333225250244, 0.2926666736602783, 0.2956666648387909, 0.29899999499320984, 0.3033333420753479, 0.30933332443237305, 0.3140000104904175, 0.3160000145435333, 0.31966665387153625, 0.32233333587646484, 0.328000009059906, 0.3330000042915344, 0.3373333215713501, 0.3423333466053009, 0.34433332085609436, 0.3486666679382324, 0.34933334589004517, 0.3526666760444641, 0.3543333411216736, 0.35733333230018616, 0.359333336353302, 0.3623333275318146, 0.36399999260902405, 0.36533331871032715, 0.36633333563804626, 0.3686666786670685, 0.37066665291786194, 0.3720000088214874, 0.37533333897590637, 0.37700000405311584, 0.3790000081062317, 0.38100001215934753, 0.382999986410141, 0.38366666436195374, 0.3840000033378601, 0.3843333423137665, 0.3856666684150696, 0.38733333349227905, 0.390666663646698, 0.3916666805744171, 0.39366665482521057, 0.3946666717529297, 0.3956666588783264, 0.3973333239555359, 0.3986666798591614, 0.40033334493637085, 0.4013333320617676, 0.4026666581630707, 0.40400001406669617, 0.40566667914390564, 0.406333327293396, 0.4073333442211151, 0.40833333134651184, 0.4099999964237213, 0.41100001335144043, 0.4126666784286499, 0.414000004529953, 0.41499999165534973, 0.4166666567325592]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [4, 2, 3, 2, 1, 2, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [2, 1, 2, 2, 2, 0, 1, 2, 1, 0, 0, 3, 2, 2], [81, 62, 35, 73, 95, 1], [1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [2, 1, 3, 8, 8, 8, 6, 6, 2, 2, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 3, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 0, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [10, 25, 50, 71, 34]], "fitness": -0.35028570890426636, "mapping_values": [1, 23, 23, 12, 11, 3, 20, 20, 12, 8, 3, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))))))), tf.math.add(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(grad, grad)), tf.math.add(tf.math.add(beta, tf.math.pow(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.249873250844913, 2.3009292173064413, 2.0973425626660287, 2.3092229274033778, 2.304824063712107, 2.3035240030685484, 2.3028951880954214], "accuracy": [0.19772817194461823, 0.19257694482803345, 0.27327960729599, 0.09906221181154251, 0.10421344637870789, 0.09747721254825592, 0.10117553919553757], "val_loss": [1.8450202941894531, 1.7066592488970076, 1.9844884191240584, 1.9744648933410645, 1.9739749772208077, 1.973881789616176, 1.9641893250601632], "val_accuracy": [0.3019999861717224, 0.34700000286102295, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.10000000149011612, 0.10866666585206985]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 8, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [0, 1, 2, 0, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [81, 62, 35, 73, 95, 1], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 5, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.35028570890426636, "mapping_values": [1, 8, 8, 4, 4, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), tf.math.pow(grad, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.249873250844913, 2.3009292173064413, 2.0973425626660287, 2.3092229274033778, 2.304824063712107, 2.3035240030685484, 2.3028951880954214], "accuracy": [0.19772817194461823, 0.19257694482803345, 0.27327960729599, 0.09906221181154251, 0.10421344637870789, 0.09747721254825592, 0.10117553919553757], "val_loss": [1.8450202941894531, 1.7066592488970076, 1.9844884191240584, 1.9744648933410645, 1.9739749772208077, 1.973881789616176, 1.9641893250601632], "val_accuracy": [0.3019999861717224, 0.34700000286102295, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.10000000149011612, 0.10866666585206985]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 0, 4, 6, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [2, 3, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [2, 3], [], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 17, 50, 71, 34]], "fitness": -0.35028570890426636, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(grad, tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.249873250844913, 2.3009292173064413, 2.0973425626660287, 2.3092229274033778, 2.304824063712107, 2.3035240030685484, 2.3028951880954214], "accuracy": [0.19772817194461823, 0.19257694482803345, 0.27327960729599, 0.09906221181154251, 0.10421344637870789, 0.09747721254825592, 0.10117553919553757], "val_loss": [1.8450202941894531, 1.7066592488970076, 1.9844884191240584, 1.9744648933410645, 1.9739749772208077, 1.973881789616176, 1.9641893250601632], "val_accuracy": [0.3019999861717224, 0.34700000286102295, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.10000000149011612, 0.10866666585206985]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 6, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [2, 2, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [62, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 0, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 2, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [1, 3], [], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 5, 5, 0, 9, 9, 7, 2, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.math.add(alpha, grad), grad), tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha)))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))))))), tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [2, 0, 4, 6, 0, 1, 2, 1, 2, 1, 2, 8, 9, 3, 2, 6, 0, 5, 0, 2], [0, 3, 2, 1, 2, 1, 1, 0, 0, 0, 0, 3, 2, 2], [22, 55, 35, 46, 95], [1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 5, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [1, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [26, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3322994909612746, 4.157035267159388, 18.669507068618415, 72.39162908213218, 227.60320816372584, 627.328194709549, 1570.6228964758618], "accuracy": [0.09060890227556229, 0.09655263274908066, 0.09879804402589798, 0.09774138033390045, 0.09945846349000931, 0.09747721254825592, 0.09655263274908066], "val_loss": [2.0902370725359236, 5.849916730608259, 25.087599073137557, 86.94418770926339, 254.6283220563616, 660.8428780691964, 1548.2068568638392], "val_accuracy": [0.09933333098888397, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 6, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 1, 0, 0, 1, 2, 2, 0, 0, 3, 2, 2], [22, 55, 35, 53, 95], [0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [83, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [1, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [2, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 30, 30, 18, 12, 5, 10, 10, 7, 3, 2, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, alpha), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha))))))), tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(grad, tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, grad)), tf.math.sqrt(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 8, 9, 6, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 5, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 0, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 0, 8, 8, 5, 3, 1, 1, 1, 0, 1, 0, 5, 3, 2, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, alpha)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.negative(beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09351472556591034, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 6, 4, 5, 0, 2, 2, 2, 2, 1, 5, 8, 2, 3, 2, 6, 2, 5, 0, 2, 3, 2], [2, 1, 2, 2, 2, 0, 1, 2, 1, 0, 0, 3, 2, 2], [31, 9, 35, 25, 95, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [2, 2, 3, 8, 8, 8, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 2, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [2, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 2, 9, 2, 9], [0, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 20, 20, 11, 9, 2, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))))))), tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(grad, grad), beta)), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, alpha)))))))), tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3021002082210003, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 6, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 5, 3, 3, 2, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 1, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 7, 7, 1, 13, 13, 8, 5, 3, 1, 1, 0, 1, 0, 4, 4, 0, 2], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))), tf.math.add(alpha, alpha)), tf.math.add(alpha, grad)))), tf.math.add(tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.sqrt(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))))))), tf.math.divide_no_nan(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [27.49230095235159, 285.0578439229074, 1102.6436206644805, 2844.2987934596754, 5865.593111255118, 10611.643610023031], "accuracy": [0.10117553919553757, 0.09655263274908066, 0.09747721254825592, 0.09760929644107819, 0.09985470771789551, 0.09734513610601425], "val_loss": [72.53887721470424, 400.923331124442, 1215.2040318080358, 2753.096261160714, 5249.9521484375, 8941.07505580357], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 8, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [0, 2, 2, 2, 1, 0, 1, 2, 0, 0, 0, 3, 2, 2], [79, 62, 35, 73, 95, 1], [1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 2, 1, 3, 8, 5, 6, 5, 2, 2, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [1, 3], [], [0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1], [0, 3, 3, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [15, 17, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.add(tf.math.add(beta, grad), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [52680143701.59331, 7685570035746.625, 131090521129046.56, 923656661174466.0, 4040341790324594.0, 1.3342804273325862e+16], "accuracy": [0.09998679161071777, 0.09628847241401672, 0.09708096832036972, 0.09747721254825592, 0.10011887550354004, 0.09721305221319199], "val_loss": [427324426532.5714, 23038220154587.43, 247243866860982.84, 1347632233597220.5, 5047668137600146.0, 1.4889437059837366e+16], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 6, 0, 1, 6, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [2, 2, 2, 1, 0, 0, 1, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 5, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 2, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [0, 3], [93], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [2, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 5, 5, 1, 9, 9, 7, 2, 2, 1, 1, 0, 1, 1, 5, 3, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))))), tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09721305221319199, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 3, 2, 1, 2, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [0, 2, 2, 1, 2, 0, 1, 2, 0, 1, 0, 3, 2, 2], [31, 62, 35, 73, 95, 1], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [5, 1, 3, 8, 8, 8, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [94, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 6, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 17, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 17, 17, 10, 7, 2, 1, 0, 0, 0, 0, 6, 4, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))))))))), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad))), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.subtract(beta, tf.math.add(beta, alpha)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.divide_no_nan(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 6, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 3, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 17, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 4, 3, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)), grad)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.301797987305965, 2.302769723207471, 2.302084139608641, 2.302680333906775, 2.302170732033613, 2.301426184726917], "accuracy": [0.09060890227556229, 0.09060890227556229, 0.09272222965955734, 0.08585391938686371, 0.08611807972192764, 0.08928807079792023], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 6, 4, 6, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 1, 0, 0, 1, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 5, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 3, 1, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 10, 10, 5, 5, 1, 8, 8, 5, 3, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, alpha), grad), tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))))))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.301797987305965, 2.302769723207471, 2.302084139608641, 2.302680333906775, 2.302170732033613, 2.301426184726917], "accuracy": [0.09060890227556229, 0.09060890227556229, 0.09272222965955734, 0.08585391938686371, 0.08611807972192764, 0.08928807079792023], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 6, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 1, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [22, 55, 7, 73, 95], [0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 5, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 0, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 30, 30, 18, 12, 5, 9, 9, 7, 2, 2, 3, 1, 1, 0, 0, 3, 2, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), tf.math.pow(tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(alpha, grad)))))), tf.math.subtract(tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(alpha, grad)), tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, grad))))), tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))))), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(sigma))", "other_info": {"loss": [2.301797987305965, 2.302769723207471, 2.302084139608641, 2.302680333906775, 2.302170732033613, 2.301426184726917], "accuracy": [0.09060890227556229, 0.09060890227556229, 0.09272222965955734, 0.08585391938686371, 0.08611807972192764, 0.08928807079792023], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 0, 4, 6, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 5, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 0, 8, 8, 5, 3, 2, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.301797987305965, 2.302769723207471, 2.302084139608641, 2.302680333906775, 2.302170732033613, 2.301426184726917], "accuracy": [0.09060890227556229, 0.09060890227556229, 0.09272222965955734, 0.08585391938686371, 0.08611807972192764, 0.08928807079792023], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 8, 0, 1, 2, 3, 9, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [0, 0, 2, 2, 2, 1, 0, 2, 2, 0, 0, 3, 2, 2], [22, 78, 35, 73, 95], [0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 6, 3, 8, 4, 2, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 0, 2, 1, 3, 0, 0], [60, 70, 73, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 17, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 9, 9, 5, 4, 2, 8, 8, 4, 4, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), grad)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.301797987305965, 2.302769723207471, 2.302084139608641, 2.302680333906775, 2.302170732033613, 2.301426184726917], "accuracy": [0.09060890227556229, 0.09060890227556229, 0.09272222965955734, 0.08585391938686371, 0.08611807972192764, 0.08928807079792023], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}]