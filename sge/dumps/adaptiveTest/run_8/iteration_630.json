[{"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1], [6, 8, 1, 4, 5, 3, 3, 8, 0, 4, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 8, 4], [0, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [51, 91, 45, 44, 57, 79, 71, 52, 77], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.8197143077850342, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0795281547297733, 1.7105484197420324, 1.231273369892414, 0.9715515101637744, 0.8755475453192988, 0.8322300056047003, 0.7497132886764537, 0.7430366817214753, 0.6682747564358623, 0.6737586736694823, 0.6438269613126423, 0.5949063805021614, 0.6114097702866925, 0.5742021572430844, 0.5654815360145987, 0.5379154203968152, 0.5698739624042332, 0.5172887704218415, 0.507469413357955, 0.49082210038426594, 0.49613762737548645, 0.45928935188391207, 0.46994028173228614, 0.47396415382674845, 0.468281917780807, 0.43560457181984075, 0.4388110104836587, 0.44238239007146685, 0.4289724220216802, 0.41987674526172525, 0.40726923930363146, 0.40046452909900904, 0.4173527380470996, 0.3895465864355475, 0.38927501863996194, 0.3907172123572735, 0.3744982586537118, 0.362500784868231, 0.3710450042413604, 0.3770122203757939, 0.3607382582060933, 0.3781720372183826, 0.3513456101958242], "accuracy": [0.30022454261779785, 0.4788006842136383, 0.5679566860198975, 0.6362435817718506, 0.6807554960250854, 0.6910579800605774, 0.7166820764541626, 0.7230220437049866, 0.7457403540611267, 0.7409853339195251, 0.7493065595626831, 0.7730814814567566, 0.7656848430633545, 0.7858935594558716, 0.7840443849563599, 0.7967243194580078, 0.7844406366348267, 0.805177628993988, 0.8107251524925232, 0.8168009519577026, 0.8149517774581909, 0.8329150676727295, 0.8259146809577942, 0.8208954930305481, 0.828292191028595, 0.8393871188163757, 0.835160493850708, 0.8370096683502197, 0.837537944316864, 0.8425571322441101, 0.8495575189590454, 0.8496896028518677, 0.8441421389579773, 0.8529917001724243, 0.8555012345314026, 0.8514066934585571, 0.856689989566803, 0.8615770936012268, 0.8581429123878479, 0.8589354157447815, 0.8627657890319824, 0.8562937378883362, 0.8673887252807617], "val_loss": [1.3357117516653878, 1.0439458915165492, 0.913846458707537, 0.7243465185165405, 0.5832725422722953, 0.5578919138227191, 0.6010793958391462, 0.5317034380776542, 0.5949858597346714, 0.5106763328824725, 0.5035630294254848, 0.48815155029296875, 0.49481196062905447, 0.4604659932000296, 0.4427379880632673, 0.4945239169257028, 0.4477452039718628, 0.42693387610571726, 0.4243446333067758, 0.4308666672025408, 0.4027893032346453, 0.42943112339292255, 0.418955785887582, 0.4077162912913731, 0.38327646255493164, 0.3895584855760847, 0.37351661920547485, 0.3805099470274789, 0.382377096584865, 0.3769527418272836, 0.3768790704863412, 0.4124684248651777, 0.3405058724539621, 0.36328736373356413, 0.35539411646979197, 0.38683782305036274, 0.36140020404543194, 0.34484641892569406, 0.3979541063308716, 0.3317457011767796, 0.4306828464780535, 0.35038764987673077, 0.3526597278458731], "val_accuracy": [0.5713333487510681, 0.5350000262260437, 0.6003333330154419, 0.6953333616256714, 0.7559999823570251, 0.7580000162124634, 0.6919999718666077, 0.7593333125114441, 0.7229999899864197, 0.7593333125114441, 0.7526666522026062, 0.7806666493415833, 0.7673333287239075, 0.8113333582878113, 0.8006666898727417, 0.7580000162124634, 0.8053333163261414, 0.8116666674613953, 0.824999988079071, 0.8056666851043701, 0.8259999752044678, 0.8043333292007446, 0.8153333067893982, 0.809333324432373, 0.840666651725769, 0.8333333134651184, 0.843666672706604, 0.8393333554267883, 0.847000002861023, 0.8453333377838135, 0.8416666388511658, 0.8273333311080933, 0.8633333444595337, 0.8510000109672546, 0.8539999723434448, 0.8373333215713501, 0.8496666550636292, 0.8696666955947876, 0.8363333344459534, 0.8643333315849304, 0.8023333549499512, 0.8536666631698608, 0.8510000109672546]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0], [3, 6, 2, 4, 1, 1, 2, 4, 2, 6, 4, 2, 9, 3, 8, 6, 5, 4, 0, 2, 2, 2, 0, 0, 2, 4, 8, 3, 3, 0, 0, 2, 8, 1, 9, 9], [1, 0, 2, 1, 2, 0, 2, 2, 0, 2, 1, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 93, 35, 5, 70, 79, 15, 52, 44, 91], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.8197143077850342, "mapping_values": [1, 58, 58, 36, 22, 10, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.pow(tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, alpha), tf.math.pow(tf.math.add(tf.math.add(alpha, grad), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), grad)))), tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, grad), tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)))))), tf.math.multiply(tf.math.sqrt(tf.math.divide_no_nan(tf.math.square(tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))), tf.math.negative(alpha))), tf.math.add(tf.math.add(tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.add(tf.math.pow(grad, tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.negative(alpha)))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), grad)))))), tf.math.sqrt(alpha)))), tf.math.add(alpha, tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))))), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0795281547297733, 1.7105484197420324, 1.231273369892414, 0.9715515101637744, 0.8755475453192988, 0.8322300056047003, 0.7497132886764537, 0.7430366817214753, 0.6682747564358623, 0.6737586736694823, 0.6438269613126423, 0.5949063805021614, 0.6114097702866925, 0.5742021572430844, 0.5654815360145987, 0.5379154203968152, 0.5698739624042332, 0.5172887704218415, 0.507469413357955, 0.49082210038426594, 0.49613762737548645, 0.45928935188391207, 0.46994028173228614, 0.47396415382674845, 0.468281917780807, 0.43560457181984075, 0.4388110104836587, 0.44238239007146685, 0.4289724220216802, 0.41987674526172525, 0.40726923930363146, 0.40046452909900904, 0.4173527380470996, 0.3895465864355475, 0.38927501863996194, 0.3907172123572735, 0.3744982586537118, 0.362500784868231, 0.3710450042413604, 0.3770122203757939, 0.3607382582060933, 0.3781720372183826, 0.3513456101958242], "accuracy": [0.30022454261779785, 0.4788006842136383, 0.5679566860198975, 0.6362435817718506, 0.6807554960250854, 0.6910579800605774, 0.7166820764541626, 0.7230220437049866, 0.7457403540611267, 0.7409853339195251, 0.7493065595626831, 0.7730814814567566, 0.7656848430633545, 0.7858935594558716, 0.7840443849563599, 0.7967243194580078, 0.7844406366348267, 0.805177628993988, 0.8107251524925232, 0.8168009519577026, 0.8149517774581909, 0.8329150676727295, 0.8259146809577942, 0.8208954930305481, 0.828292191028595, 0.8393871188163757, 0.835160493850708, 0.8370096683502197, 0.837537944316864, 0.8425571322441101, 0.8495575189590454, 0.8496896028518677, 0.8441421389579773, 0.8529917001724243, 0.8555012345314026, 0.8514066934585571, 0.856689989566803, 0.8615770936012268, 0.8581429123878479, 0.8589354157447815, 0.8627657890319824, 0.8562937378883362, 0.8673887252807617], "val_loss": [1.3357117516653878, 1.0439458915165492, 0.913846458707537, 0.7243465185165405, 0.5832725422722953, 0.5578919138227191, 0.6010793958391462, 0.5317034380776542, 0.5949858597346714, 0.5106763328824725, 0.5035630294254848, 0.48815155029296875, 0.49481196062905447, 0.4604659932000296, 0.4427379880632673, 0.4945239169257028, 0.4477452039718628, 0.42693387610571726, 0.4243446333067758, 0.4308666672025408, 0.4027893032346453, 0.42943112339292255, 0.418955785887582, 0.4077162912913731, 0.38327646255493164, 0.3895584855760847, 0.37351661920547485, 0.3805099470274789, 0.382377096584865, 0.3769527418272836, 0.3768790704863412, 0.4124684248651777, 0.3405058724539621, 0.36328736373356413, 0.35539411646979197, 0.38683782305036274, 0.36140020404543194, 0.34484641892569406, 0.3979541063308716, 0.3317457011767796, 0.4306828464780535, 0.35038764987673077, 0.3526597278458731], "val_accuracy": [0.5713333487510681, 0.5350000262260437, 0.6003333330154419, 0.6953333616256714, 0.7559999823570251, 0.7580000162124634, 0.6919999718666077, 0.7593333125114441, 0.7229999899864197, 0.7593333125114441, 0.7526666522026062, 0.7806666493415833, 0.7673333287239075, 0.8113333582878113, 0.8006666898727417, 0.7580000162124634, 0.8053333163261414, 0.8116666674613953, 0.824999988079071, 0.8056666851043701, 0.8259999752044678, 0.8043333292007446, 0.8153333067893982, 0.809333324432373, 0.840666651725769, 0.8333333134651184, 0.843666672706604, 0.8393333554267883, 0.847000002861023, 0.8453333377838135, 0.8416666388511658, 0.8273333311080933, 0.8633333444595337, 0.8510000109672546, 0.8539999723434448, 0.8373333215713501, 0.8496666550636292, 0.8696666955947876, 0.8363333344459534, 0.8643333315849304, 0.8023333549499512, 0.8536666631698608, 0.8510000109672546]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1], [9, 4, 8, 4, 4, 1, 2, 4, 0, 6, 0, 5, 9, 3, 1, 6, 2, 5, 0, 1, 8, 2, 0, 9, 2, 2], [0, 0, 2, 2, 2, 2, 1, 2, 1, 2, 1, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [38, 91, 67, 44, 57, 79, 71, 52, 77], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.8197143077850342, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0795281547297733, 1.7105484197420324, 1.231273369892414, 0.9715515101637744, 0.8755475453192988, 0.8322300056047003, 0.7497132886764537, 0.7430366817214753, 0.6682747564358623, 0.6737586736694823, 0.6438269613126423, 0.5949063805021614, 0.6114097702866925, 0.5742021572430844, 0.5654815360145987, 0.5379154203968152, 0.5698739624042332, 0.5172887704218415, 0.507469413357955, 0.49082210038426594, 0.49613762737548645, 0.45928935188391207, 0.46994028173228614, 0.47396415382674845, 0.468281917780807, 0.43560457181984075, 0.4388110104836587, 0.44238239007146685, 0.4289724220216802, 0.41987674526172525, 0.40726923930363146, 0.40046452909900904, 0.4173527380470996, 0.3895465864355475, 0.38927501863996194, 0.3907172123572735, 0.3744982586537118, 0.362500784868231, 0.3710450042413604, 0.3770122203757939, 0.3607382582060933, 0.3781720372183826, 0.3513456101958242], "accuracy": [0.30022454261779785, 0.4788006842136383, 0.5679566860198975, 0.6362435817718506, 0.6807554960250854, 0.6910579800605774, 0.7166820764541626, 0.7230220437049866, 0.7457403540611267, 0.7409853339195251, 0.7493065595626831, 0.7730814814567566, 0.7656848430633545, 0.7858935594558716, 0.7840443849563599, 0.7967243194580078, 0.7844406366348267, 0.805177628993988, 0.8107251524925232, 0.8168009519577026, 0.8149517774581909, 0.8329150676727295, 0.8259146809577942, 0.8208954930305481, 0.828292191028595, 0.8393871188163757, 0.835160493850708, 0.8370096683502197, 0.837537944316864, 0.8425571322441101, 0.8495575189590454, 0.8496896028518677, 0.8441421389579773, 0.8529917001724243, 0.8555012345314026, 0.8514066934585571, 0.856689989566803, 0.8615770936012268, 0.8581429123878479, 0.8589354157447815, 0.8627657890319824, 0.8562937378883362, 0.8673887252807617], "val_loss": [1.3357117516653878, 1.0439458915165492, 0.913846458707537, 0.7243465185165405, 0.5832725422722953, 0.5578919138227191, 0.6010793958391462, 0.5317034380776542, 0.5949858597346714, 0.5106763328824725, 0.5035630294254848, 0.48815155029296875, 0.49481196062905447, 0.4604659932000296, 0.4427379880632673, 0.4945239169257028, 0.4477452039718628, 0.42693387610571726, 0.4243446333067758, 0.4308666672025408, 0.4027893032346453, 0.42943112339292255, 0.418955785887582, 0.4077162912913731, 0.38327646255493164, 0.3895584855760847, 0.37351661920547485, 0.3805099470274789, 0.382377096584865, 0.3769527418272836, 0.3768790704863412, 0.4124684248651777, 0.3405058724539621, 0.36328736373356413, 0.35539411646979197, 0.38683782305036274, 0.36140020404543194, 0.34484641892569406, 0.3979541063308716, 0.3317457011767796, 0.4306828464780535, 0.35038764987673077, 0.3526597278458731], "val_accuracy": [0.5713333487510681, 0.5350000262260437, 0.6003333330154419, 0.6953333616256714, 0.7559999823570251, 0.7580000162124634, 0.6919999718666077, 0.7593333125114441, 0.7229999899864197, 0.7593333125114441, 0.7526666522026062, 0.7806666493415833, 0.7673333287239075, 0.8113333582878113, 0.8006666898727417, 0.7580000162124634, 0.8053333163261414, 0.8116666674613953, 0.824999988079071, 0.8056666851043701, 0.8259999752044678, 0.8043333292007446, 0.8153333067893982, 0.809333324432373, 0.840666651725769, 0.8333333134651184, 0.843666672706604, 0.8393333554267883, 0.847000002861023, 0.8453333377838135, 0.8416666388511658, 0.8273333311080933, 0.8633333444595337, 0.8510000109672546, 0.8539999723434448, 0.8373333215713501, 0.8496666550636292, 0.8696666955947876, 0.8363333344459534, 0.8643333315849304, 0.8023333549499512, 0.8536666631698608, 0.8510000109672546]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 8, 5, 9, 5, 2, 3, 6, 0, 2, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 8, 4], [0, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 71, 35, 44, 70, 79, 53, 52, 44], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.8197143077850342, "mapping_values": [1, 5, 5, 4, 1, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))))), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0795281547297733, 1.7105484197420324, 1.231273369892414, 0.9715515101637744, 0.8755475453192988, 0.8322300056047003, 0.7497132886764537, 0.7430366817214753, 0.6682747564358623, 0.6737586736694823, 0.6438269613126423, 0.5949063805021614, 0.6114097702866925, 0.5742021572430844, 0.5654815360145987, 0.5379154203968152, 0.5698739624042332, 0.5172887704218415, 0.507469413357955, 0.49082210038426594, 0.49613762737548645, 0.45928935188391207, 0.46994028173228614, 0.47396415382674845, 0.468281917780807, 0.43560457181984075, 0.4388110104836587, 0.44238239007146685, 0.4289724220216802, 0.41987674526172525, 0.40726923930363146, 0.40046452909900904, 0.4173527380470996, 0.3895465864355475, 0.38927501863996194, 0.3907172123572735, 0.3744982586537118, 0.362500784868231, 0.3710450042413604, 0.3770122203757939, 0.3607382582060933, 0.3781720372183826, 0.3513456101958242], "accuracy": [0.30022454261779785, 0.4788006842136383, 0.5679566860198975, 0.6362435817718506, 0.6807554960250854, 0.6910579800605774, 0.7166820764541626, 0.7230220437049866, 0.7457403540611267, 0.7409853339195251, 0.7493065595626831, 0.7730814814567566, 0.7656848430633545, 0.7858935594558716, 0.7840443849563599, 0.7967243194580078, 0.7844406366348267, 0.805177628993988, 0.8107251524925232, 0.8168009519577026, 0.8149517774581909, 0.8329150676727295, 0.8259146809577942, 0.8208954930305481, 0.828292191028595, 0.8393871188163757, 0.835160493850708, 0.8370096683502197, 0.837537944316864, 0.8425571322441101, 0.8495575189590454, 0.8496896028518677, 0.8441421389579773, 0.8529917001724243, 0.8555012345314026, 0.8514066934585571, 0.856689989566803, 0.8615770936012268, 0.8581429123878479, 0.8589354157447815, 0.8627657890319824, 0.8562937378883362, 0.8673887252807617], "val_loss": [1.3357117516653878, 1.0439458915165492, 0.913846458707537, 0.7243465185165405, 0.5832725422722953, 0.5578919138227191, 0.6010793958391462, 0.5317034380776542, 0.5949858597346714, 0.5106763328824725, 0.5035630294254848, 0.48815155029296875, 0.49481196062905447, 0.4604659932000296, 0.4427379880632673, 0.4945239169257028, 0.4477452039718628, 0.42693387610571726, 0.4243446333067758, 0.4308666672025408, 0.4027893032346453, 0.42943112339292255, 0.418955785887582, 0.4077162912913731, 0.38327646255493164, 0.3895584855760847, 0.37351661920547485, 0.3805099470274789, 0.382377096584865, 0.3769527418272836, 0.3768790704863412, 0.4124684248651777, 0.3405058724539621, 0.36328736373356413, 0.35539411646979197, 0.38683782305036274, 0.36140020404543194, 0.34484641892569406, 0.3979541063308716, 0.3317457011767796, 0.4306828464780535, 0.35038764987673077, 0.3526597278458731], "val_accuracy": [0.5713333487510681, 0.5350000262260437, 0.6003333330154419, 0.6953333616256714, 0.7559999823570251, 0.7580000162124634, 0.6919999718666077, 0.7593333125114441, 0.7229999899864197, 0.7593333125114441, 0.7526666522026062, 0.7806666493415833, 0.7673333287239075, 0.8113333582878113, 0.8006666898727417, 0.7580000162124634, 0.8053333163261414, 0.8116666674613953, 0.824999988079071, 0.8056666851043701, 0.8259999752044678, 0.8043333292007446, 0.8153333067893982, 0.809333324432373, 0.840666651725769, 0.8333333134651184, 0.843666672706604, 0.8393333554267883, 0.847000002861023, 0.8453333377838135, 0.8416666388511658, 0.8273333311080933, 0.8633333444595337, 0.8510000109672546, 0.8539999723434448, 0.8373333215713501, 0.8496666550636292, 0.8696666955947876, 0.8363333344459534, 0.8643333315849304, 0.8023333549499512, 0.8536666631698608, 0.8510000109672546]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1], [3, 2, 2, 4, 5, 3, 2, 1, 6, 1, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2, 1, 1, 4, 6, 1, 9, 9, 4], [0, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [51, 91, 45, 44, 57, 79, 71, 52, 77], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [36, 25, 50, 71, 34]], "fitness": -0.7925714254379272, "mapping_values": [1, 23, 23, 13, 10, 5, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32), tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, grad), tf.math.subtract(grad, tf.math.divide_no_nan(grad, tf.math.subtract(tf.math.square(alpha), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), grad))))))))))), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2465563863102536, 1.9544711616832535, 1.4244243105593737, 1.140022628909766, 0.994330753944396, 0.9238437310563826, 0.8775831729807417, 0.8335860575651527, 0.7974971780577325, 0.7758924813712073, 0.7389802748123101, 0.7491422893033918, 0.717946640339195, 0.705645709391425, 0.6935490611254216, 0.6729465318456727, 0.6654561053429612, 0.6573427585862048, 0.6579301444971802, 0.6430085236685167, 0.6331838173810218, 0.6255069327171783, 0.6087379471154466, 0.6091570149890152, 0.6236191144346671, 0.6026110953705863, 0.6029934456650418, 0.5864730209423141, 0.586490221011593, 0.5896790549346028, 0.5784666135389539, 0.5665300360460953], "accuracy": [0.21423853933811188, 0.4169858694076538, 0.5271430611610413, 0.5950337052345276, 0.6485272645950317, 0.6619997620582581, 0.6864351034164429, 0.698190450668335, 0.7099458575248718, 0.7161537408828735, 0.7284374833106995, 0.7288337349891663, 0.7367587089538574, 0.7427024245262146, 0.7460044622421265, 0.7481178045272827, 0.7495707273483276, 0.7597411274909973, 0.752212405204773, 0.7555144429206848, 0.7640998363494873, 0.7676661014556885, 0.7734777331352234, 0.770439863204956, 0.7668735980987549, 0.7786290049552917, 0.7783648371696472, 0.7798177003860474, 0.7816668748855591, 0.7773081660270691, 0.7869502305984497, 0.7874785661697388], "val_loss": [1.8110237121582031, 1.3070426327841622, 0.884615421295166, 0.7433726617268154, 0.6770820787974766, 0.6494063990456718, 0.6196457488196236, 0.589775834764753, 0.5616362605776105, 0.5616475003106254, 0.5451349020004272, 0.5449887003217425, 0.5359750815800258, 0.5338844231196812, 0.5085395915167672, 0.5237143210002354, 0.505067127091544, 0.500736917768206, 0.49020557744162424, 0.4895882436207363, 0.4832918643951416, 0.4791621821267264, 0.5029222113745553, 0.4753577198301043, 0.46965156282697407, 0.476345351764134, 0.46820238658360075, 0.46516709668295725, 0.47074053968702045, 0.46777149609157015, 0.4604053156716483, 0.460777793611799], "val_accuracy": [0.46566668152809143, 0.5820000171661377, 0.6819999814033508, 0.6990000009536743, 0.7149999737739563, 0.7153333425521851, 0.7350000143051147, 0.7450000047683716, 0.7603333592414856, 0.7576666474342346, 0.7673333287239075, 0.7599999904632568, 0.7673333287239075, 0.7739999890327454, 0.7863333225250244, 0.7706666588783264, 0.7796666622161865, 0.7863333225250244, 0.7983333468437195, 0.7850000262260437, 0.7926666736602783, 0.8053333163261414, 0.7736666798591614, 0.7950000166893005, 0.8053333163261414, 0.7953333258628845, 0.8076666593551636, 0.7986666560173035, 0.8026666641235352, 0.7866666913032532, 0.8040000200271606, 0.8016666769981384]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1], [9, 4, 8, 4, 4, 1, 2, 4, 0, 6, 0, 5, 9, 3, 1, 6, 2, 5, 0, 1, 8, 2, 0, 9, 2, 2], [1, 0, 2, 2, 2, 2, 1, 2, 1, 2, 1, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [61, 93, 56, 44, 40, 82, 53, 52], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [4, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [23, 25, 50, 71, 34]], "fitness": -0.7480000257492065, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2984411273697316, 2.2872978874469054, 2.278970449418912, 2.26905415458387, 2.2580500562287686, 2.2484553249174217, 2.234096304993383, 2.223249208594924, 2.2089538253325167, 2.191146675054943, 2.172496186964201, 2.1531632037257884, 2.1280835619566068, 2.103076838483396, 2.075763934040586, 2.0400805305165544, 2.002972804024676, 1.962910450854243, 1.9223395704734973, 1.8752680098013776, 1.8290402803911021, 1.7824583011233432, 1.7342839296924408, 1.685526216176554, 1.6469906494050939, 1.5886678875492486, 1.536159672788767, 1.5017894320185032, 1.4635507384028024, 1.4301424113404497, 1.39806278979128, 1.3634313364794792, 1.3340052780363743, 1.2865139630649856, 1.2707011263210855, 1.256199711081752, 1.232266439407131, 1.2201640721970954, 1.1943608458330917, 1.1766722464936206, 1.1609527576459382, 1.154397447882957, 1.1300715578230633, 1.116873164218509, 1.1068573816498715, 1.0942721308623922, 1.0800542804968434, 1.0737606021375736, 1.057659288328778, 1.0507526015876354, 1.0414399227146869, 1.0256461251318936, 1.0220216964891227, 1.007037531871365, 1.003792947403995, 1.0018487517167045, 0.9931392235495174, 0.9887333757070235, 0.9659886421497236, 0.9586704120014353, 0.9562803944025404, 0.9551864175622679, 0.9489513006916985, 0.9393732005012129, 0.9362523171092698, 0.9246644154515768, 0.9291819584226375, 0.9138408514329424, 0.9137156573520943, 0.9105782590254408, 0.9017982277667376, 0.8952573051447598, 0.8954804623840256, 0.8795587546191495, 0.8817852668600973, 0.8784617759201742, 0.8781031515966428, 0.8764265394245455, 0.864354478188667, 0.8579628335612404, 0.8538617779392655, 0.8494458716338604, 0.8660799105405776, 0.8482590798594145, 0.8521762577817582, 0.8364812581058286, 0.8452336419574998, 0.8333503865153326, 0.8369895884184837, 0.8397433035613965, 0.8351291065927132, 0.8361381796986876, 0.8289252804365171, 0.8269897300994564, 0.8232734742071398, 0.8183343703594694, 0.8137061120874578, 0.8148660846689295, 0.8112176426208692, 0.7992299678476495], "accuracy": [0.1010434553027153, 0.1274600476026535, 0.1592920422554016, 0.17342491447925568, 0.21040813624858856, 0.23140932619571686, 0.260071337223053, 0.2715625464916229, 0.2977149784564972, 0.32162198424339294, 0.3361510932445526, 0.33958524465560913, 0.3679831027984619, 0.37643641233444214, 0.37947431206703186, 0.4029850661754608, 0.4189670979976654, 0.4357416331768036, 0.4290054142475128, 0.44644036889076233, 0.45066702365875244, 0.46347907185554504, 0.47047945857048035, 0.4830273389816284, 0.483819842338562, 0.49993395805358887, 0.5189539194107056, 0.520142674446106, 0.525029718875885, 0.525029718875885, 0.5375775694847107, 0.548540472984314, 0.5555408596992493, 0.5729758143424988, 0.5713908076286316, 0.5705983638763428, 0.5783912539482117, 0.5783912539482117, 0.5868445634841919, 0.587769091129303, 0.5941091179847717, 0.5989961624145508, 0.6075815558433533, 0.6140536069869995, 0.6172236204147339, 0.6218464970588684, 0.6203936338424683, 0.6217144131660461, 0.6225069165229797, 0.6339981555938721, 0.6341302394866943, 0.6429798007011414, 0.6400739550590515, 0.6515651941299438, 0.6449610590934753, 0.6464139223098755, 0.6482630968093872, 0.6478668451309204, 0.6552634835243225, 0.6649055480957031, 0.6609430909156799, 0.6635847091674805, 0.6642451286315918, 0.6716417670249939, 0.6705851554870605, 0.6716417670249939, 0.6699247360229492, 0.6767930388450623, 0.6692643165588379, 0.6791704893112183, 0.6794346570968628, 0.6824725866317749, 0.6827367544174194, 0.6857746839523315, 0.6841896772384644, 0.6876237988471985, 0.6857746839523315, 0.6857746839523315, 0.6905296444892883, 0.6950204968452454, 0.6930392384529114, 0.7014925479888916, 0.6921146512031555, 0.696209192276001, 0.695813000202179, 0.7010962963104248, 0.6975300312042236, 0.7051908373832703, 0.6989829540252686, 0.7047945857048035, 0.7062475085258484, 0.6979262828826904, 0.7024171352386475, 0.703209638595581, 0.700171709060669, 0.7071720957756042, 0.7104741930961609, 0.7086250185966492, 0.7062475085258484, 0.7144366502761841], "val_loss": [1.961292130606515, 1.9520905358450753, 1.9427954810006278, 1.9332307406834193, 1.9230986322675432, 1.912111827305385, 1.90005738394601, 1.886838708605085, 1.872206483568464, 1.8556675910949707, 1.8368212154933385, 1.8157622473580497, 1.7918227740696497, 1.765120233808245, 1.7353309903826033, 1.702141387122018, 1.6653126648494176, 1.6252949578421456, 1.5818236214773995, 1.5355800560542516, 1.4874746118273054, 1.4381624971117293, 1.3886169706072127, 1.3390887805393763, 1.290816273008074, 1.242807047707694, 1.1961228847503662, 1.1534059047698975, 1.1143436091286796, 1.077599627631051, 1.044030053274972, 1.0133466720581055, 0.985043832233974, 0.9579812117985317, 0.9332947731018066, 0.9119204793657575, 0.8920111996786935, 0.8740805898393903, 0.8570687941142491, 0.8414649963378906, 0.8273321049554008, 0.8136270897729057, 0.8010187319346836, 0.7895176580974034, 0.7785967588424683, 0.7683649574007306, 0.7581285578863961, 0.7487848826817104, 0.7406493765967233, 0.7328306606837681, 0.7258078541074481, 0.7184392213821411, 0.7116257633481707, 0.705000468662807, 0.6988722426550729, 0.6931063107081822, 0.6880374295370919, 0.6832047530582973, 0.6773335933685303, 0.6722574404307774, 0.6675643239702497, 0.6627121993473598, 0.6591162170682635, 0.6546529872076852, 0.6503080299922398, 0.6467769827161517, 0.6433997665132795, 0.6398640530450004, 0.6365194150379726, 0.6331181526184082, 0.6301334244864327, 0.626835857118879, 0.6240229606628418, 0.6208809614181519, 0.6179643528802055, 0.6152958699635097, 0.61361220904759, 0.6105060577392578, 0.6068800347191947, 0.6046531881604876, 0.6021331718989781, 0.5996606520244053, 0.5980272803987775, 0.5954874753952026, 0.5936768225261143, 0.5912285872868129, 0.5891112259456089, 0.5865907158170428, 0.585050276347569, 0.5836133446012225, 0.582059553691319, 0.5812276431492397, 0.579652122088841, 0.5778112070901054, 0.5752046448843819, 0.5743389640535627, 0.5723451546260289, 0.5710990258625576, 0.5691432952880859, 0.5674423490251813], "val_accuracy": [0.11166666448116302, 0.20766666531562805, 0.28600001335144043, 0.34166666865348816, 0.3700000047683716, 0.39500001072883606, 0.4153333306312561, 0.4333333373069763, 0.44733333587646484, 0.4676666557788849, 0.48233333230018616, 0.492000013589859, 0.5106666684150696, 0.5220000147819519, 0.5346666574478149, 0.5419999957084656, 0.5483333468437195, 0.5563333630561829, 0.5613333582878113, 0.5683333277702332, 0.5759999752044678, 0.5786666870117188, 0.5830000042915344, 0.5920000076293945, 0.5983333587646484, 0.6036666631698608, 0.6116666793823242, 0.621999979019165, 0.6359999775886536, 0.6413333415985107, 0.6496666669845581, 0.6613333225250244, 0.6656666398048401, 0.6756666898727417, 0.6779999732971191, 0.6853333115577698, 0.6863333582878113, 0.690666675567627, 0.6926666498184204, 0.6966666579246521, 0.6953333616256714, 0.6993333101272583, 0.7013333439826965, 0.6983333230018616, 0.7009999752044678, 0.7053333520889282, 0.7049999833106995, 0.7096666693687439, 0.7083333134651184, 0.7123333215713501, 0.7133333086967468, 0.7136666774749756, 0.7166666388511658, 0.7166666388511658, 0.718999981880188, 0.7213333249092102, 0.7226666808128357, 0.7236666679382324, 0.7260000109672546, 0.7256666421890259, 0.7289999723434448, 0.7293333411216736, 0.7300000190734863, 0.7329999804496765, 0.7326666712760925, 0.734666645526886, 0.7356666922569275, 0.7369999885559082, 0.7369999885559082, 0.7360000014305115, 0.7390000224113464, 0.7393333315849304, 0.7433333396911621, 0.746666669845581, 0.746666669845581, 0.746999979019165, 0.7493333220481873, 0.7523333430290222, 0.753000020980835, 0.753000020980835, 0.7523333430290222, 0.7553333044052124, 0.7563333511352539, 0.7556666731834412, 0.7570000290870667, 0.7563333511352539, 0.7583333253860474, 0.7596666812896729, 0.7603333592414856, 0.7603333592414856, 0.7620000243186951, 0.7599999904632568, 0.762666642665863, 0.7630000114440918, 0.7633333206176758, 0.7633333206176758, 0.7643333077430725, 0.765333354473114, 0.7639999985694885, 0.7639999985694885]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [3, 2, 2, 4, 5, 3, 2, 1, 6, 1, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2, 1, 1, 4, 6, 3, 9, 9, 4], [1, 0, 2, 2, 2, 2, 2, 2, 0, 2, 1, 0, 1, 0, 1, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 93, 35, 44, 70, 79, 52, 52, 44], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [51, 25, 50, 71, 34]], "fitness": -0.4934285581111908, "mapping_values": [1, 37, 37, 24, 13, 6, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.pow(tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(alpha, grad), grad))), tf.math.divide_no_nan(grad, grad))), grad))), tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.divide_no_nan(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.square(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))))), tf.math.sqrt(alpha)))))), tf.math.add(tf.math.negative(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [3.043075838644491, 2.230207706092922, 2.211409007049649, 2.108936489754192, 2.476036678798415, 2.1558336637999798, 1.6703345671368943], "accuracy": [0.22942808270454407, 0.1620657742023468, 0.19402985274791718, 0.2425042986869812, 0.14053626358509064, 0.24699510633945465, 0.42808082699775696], "val_loss": [1.9820541654314314, 1.2242699010031564, 1.7604893956865584, 2.692495209830148, 1.910475594656808, 1.3896874019077845, 1.1508257729666573], "val_accuracy": [0.10233332961797714, 0.503333330154419, 0.42500001192092896, 0.3323333263397217, 0.26766666769981384, 0.46000000834465027, 0.4976666569709778]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1], [3, 2, 2, 4, 5, 3, 2, 1, 6, 1, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2, 1, 1, 4, 6, 1, 9, 9, 4], [1, 1, 2, 2, 2, 2, 2, 2, 0, 2, 1, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 93, 56, 44, 40, 82, 53, 52], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [60, 25, 50, 71, 34]], "fitness": -0.13657142221927643, "mapping_values": [1, 20, 20, 10, 10, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.square(alpha), tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, alpha), grad), grad)), tf.math.subtract(grad, grad))), grad))), grad)), tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))), grad)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [3.28173557692641, 2.3099503939130663, 2.180601904562609, 3.4685521387798817, 2.3039332046453365, 2.2636785058140076, 2.4408718587983445, 2.3040748696836735, 2.303215684010258, 2.3030265229741236, 2.302664442714872], "accuracy": [0.19653943181037903, 0.09813763201236725, 0.1764628142118454, 0.11728965491056442, 0.10328886657953262, 0.17183992266654968, 0.15982036292552948, 0.09655263274908066, 0.09708096832036972, 0.09787346422672272, 0.10553427785634995], "val_loss": [1.9857373918805803, 1.9704056467328752, 2.0007453645978654, 1.9743475232805525, 1.9697341918945312, 1.79305328641619, 1.9754808970860072, 1.9742343766348702, 1.9738893508911133, 1.9734350613185339, 1.973163332257952], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.1823333352804184, 0.10400000214576721, 0.10400000214576721, 0.37466666102409363, 0.10000000149011612, 0.09700000286102295, 0.09700000286102295, 0.10400000214576721, 0.10000000149011612]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1], [6, 8, 1, 4, 5, 3, 3, 8, 0, 4, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 8, 4], [1, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [51, 91, 45, 44, 57, 79, 71, 52, 77], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 9, 9, 2, 9], [2, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.12600000202655792, "mapping_values": [1, 15, 15, 9, 6, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.pow(alpha, tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(grad, tf.math.sqrt(grad)))))))), tf.math.negative(grad))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.3003784920545445, 2.2990875873331382, 2.3019415997495236, 2.302714728912295, 2.303938585359974, 2.309075135376003], "accuracy": [0.09589222073554993, 0.10342095047235489, 0.08360850811004639, 0.08440100401639938, 0.09311848133802414, 0.10276053100824356], "val_loss": [1.9672737121582031, 1.9722138132367815, 1.9733295440673828, 1.9740065847124373, 1.9752275603158134, 1.9892463002886092], "val_accuracy": [0.14266666769981384, 0.05000000074505806, 0.08566666394472122, 0.11299999803304672, 0.10199999809265137, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1], [9, 4, 8, 4, 4, 1, 2, 4, 0, 6, 0, 5, 9, 3, 1, 6, 2, 5, 0, 1, 8, 2, 0, 9, 2, 2], [0, 0, 2, 2, 2, 2, 1, 2, 1, 2, 1, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [51, 91, 67, 44, 57, 79, 71, 52, 77], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [0, 3], [24], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 13, 13, 8, 5, 3, 1, 1, 0, 1, 1, 4, 3, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302302664045204, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09906221181154251, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1], [9, 4, 8, 4, 4, 1, 2, 4, 0, 6, 0, 5, 9, 3, 1, 6, 2, 5, 0, 1, 8, 2, 0, 9, 2, 2], [0, 0, 2, 2, 2, 2, 1, 2, 1, 2, 1, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [51, 91, 67, 44, 57, 79, 71, 52, 77], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 13, 13, 8, 5, 3, 1, 0, 0, 0, 0, 3, 1, 2, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0944393053650856, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [6, 8, 5, 4, 5, 9, 3, 8, 0, 2, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 8, 4], [0, 0, 2, 2, 2, 0, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [73, 91, 5, 44, 57, 79, 71, 52, 77], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [4, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 9, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [23, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 24, 24, 18, 6, 6, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 2, 0, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.pow(tf.math.square(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.square(tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))), tf.math.add(grad, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))), tf.math.square(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [185.52751401947347, 2798.0255980365046, 12296.919162913997, 33422.79329792547, 70798.15345046064, 129941.3713842293], "accuracy": [0.09734513610601425, 0.09866596013307571, 0.09879804402589798, 0.09945846349000931, 0.10434553027153015, 0.10117553919553757], "val_loss": [603.7757045200893, 4279.385184151785, 14003.017020089286, 32734.227678571428, 63433.638392857145, 109061.66071428571], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [6, 8, 5, 4, 9, 2, 6, 8, 0, 8, 5, 2, 9, 5, 2, 6, 9, 9, 0, 2, 8, 2, 0, 9, 8, 4], [0, 0, 2, 2, 2, 2, 1, 2, 2, 2, 1, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 93, 56, 50, 40, 82, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [4, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 10, 4, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.sqrt(tf.math.negative(tf.math.sqrt(tf.math.add(alpha, grad)))))))))))), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0750231146812439, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1], [3, 8, 1, 4, 2, 3, 0, 4, 8, 1, 3, 9, 3, 3, 3, 9, 9, 2, 0, 2, 8, 2, 9, 9, 2], [2, 0, 2, 2, 2, 2, 2, 2, 1, 2, 1, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 93, 35, 44, 70, 79, 53, 52], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [2, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [0, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [31, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 26, 26, 16, 10, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 2], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.sqrt(tf.math.subtract(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), tf.math.multiply(grad, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))))), tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), grad)), tf.math.add(alpha, grad))), tf.math.multiply(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))), grad)))))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3741160356420585, 3.183517588694901, 5.385856798910399, 8.96638265195823, 13.954469399130371, 20.518349391436928, 28.80465685796933], "accuracy": [0.09549596905708313, 0.09774138033390045, 0.10038304328918457, 0.09919429570436478, 0.10394927859306335, 0.1018359512090683, 0.1002509593963623], "val_loss": [2.123870985848563, 2.961273193359375, 4.7679837090628485, 7.479703630719866, 11.090573992047991, 15.664376940046038, 21.280193873814174], "val_accuracy": [0.0989999994635582, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0], [9, 4, 8, 4, 4, 1, 2, 4, 0, 6, 0, 5, 9, 3, 1, 6, 2, 5, 0, 1, 8, 2, 0, 9, 2, 2], [2, 1, 2, 2, 2, 2, 2, 2, 0, 2, 1, 1, 1, 0, 1, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [51, 91, 35, 44, 57, 79, 53, 52, 77], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 0, 9, 9, 2, 9], [1, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [10, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 3, 0, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3020390211520274, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.1018359512090683, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1], [9, 4, 8, 4, 4, 1, 2, 4, 0, 6, 0, 5, 9, 3, 1, 6, 2, 5, 0, 1, 8, 2, 0, 9, 2, 2], [0, 0, 2, 2, 2, 2, 1, 2, 1, 2, 1, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [51, 91, 67, 44, 57, 79, 71, 52, 77], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 1, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(sigma, beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0746268630027771, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 8, 5, 4, 5, 2, 3, 8, 0, 2, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 8, 4], [0, 1, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [51, 91, 67, 44, 57, 79, 71, 52, 77], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [2, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 32, 32, 24, 8, 5, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 52, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.sqrt(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(grad, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)))), tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))), tf.math.square(tf.math.negative(tf.math.add(tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, alpha))), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))))))))))), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06855104863643646, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1], [6, 8, 1, 4, 5, 3, 3, 8, 0, 4, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 8, 4], [0, 0, 2, 2, 2, 2, 1, 2, 1, 2, 1, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [51, 91, 45, 44, 57, 79, 71, 52, 77], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.08942857384681702, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.3019982601720517, 2.29880930215077, 2.2990249814673533, 2.2986632637328257, 2.2999164826676926, 2.3012835867668517, 2.3007373361697114, 2.301799961163651], "accuracy": [0.09272222965955734, 0.09945846349000931, 0.11002509295940399, 0.10540219396352768, 0.09840179979801178, 0.08915598690509796, 0.08875974267721176, 0.08440100401639938], "val_loss": [1.9691229547773088, 1.9682029315403529, 1.9682175772530692, 1.969865322113037, 1.9711506707327706, 1.9718814577375139, 1.9721146311078752, 1.9720643588474818], "val_accuracy": [0.050999999046325684, 0.07866666465997696, 0.0976666659116745, 0.09300000220537186, 0.0833333358168602, 0.06199999898672104, 0.0533333346247673, 0.055666666477918625]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1], [9, 4, 8, 4, 4, 1, 2, 4, 0, 6, 0, 5, 9, 3, 1, 6, 2, 5, 0, 1, 8, 2, 0, 9, 2, 2], [0, 0, 2, 2, 2, 2, 1, 2, 1, 2, 1, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [51, 91, 67, 44, 57, 79, 71, 52, 77], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [3, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [23, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 4, 1, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.30251837652184, 2.301266235524889, 2.302695796537267, 2.3026425767300736, 2.30224954463141, 2.304143416489498], "accuracy": [0.09100515395402908, 0.09549596905708313, 0.0952318087220192, 0.08796724677085876, 0.09126931428909302, 0.08638224750757217], "val_loss": [1.970655850001744, 1.9707225390842982, 1.9707888194492884, 1.9708547592163086, 1.9709211077008928, 1.9709876605442591], "val_accuracy": [0.03866666555404663, 0.03799999877810478, 0.03799999877810478, 0.03799999877810478, 0.03799999877810478, 0.03799999877810478]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [5, 4, 8, 4, 4, 1, 2, 4, 0, 6, 0, 5, 9, 3, 1, 6, 2, 5, 0, 1, 8, 2, 0, 9, 2, 2], [0, 0, 2, 2, 2, 2, 2, 2, 0, 2, 1, 2, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 93, 56, 44, 40, 82, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [23, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 40, 40, 26, 14, 6, 13, 13, 8, 5, 3, 3, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.square(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))))), tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, grad), grad), tf.math.add(grad, tf.math.square(grad))), tf.math.negative(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))))), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), tf.math.add(grad, tf.math.negative(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)))))))), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.3024895206308322, 2.3011666773930988, 2.302526350081825, 2.3024042055134792, 2.301938279933776, 2.30376103046847], "accuracy": [0.09087307006120682, 0.09549596905708313, 0.09536388516426086, 0.08875974267721176, 0.09140139818191528, 0.08677849918603897], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}]