[{"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 3, 5, 2, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 0, 2, 1, 3, 0, 0], [42, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [1, 3, 2, 3, 6, 9], [1, 3, 0, 0, 3, 2], [39, 47, 50, 41, 34]], "fitness": -0.8037142753601074, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 7, 2, 2, 1, 1, 0, 1, 0, 11, 6, 5, 3], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, beta)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(sigma, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [1.9692601689636084, 1.4322609644461428, 1.043058420129818, 0.8670069939346047, 0.8036471179463466, 0.7822640595056944, 0.7325842033177634, 0.7085541132308583, 0.6857349225605924, 0.6446919004363847, 0.6525805142293942, 0.6362926606189746, 0.6158507943405309, 0.607154582485531, 0.5911370616279746, 0.5666955637500397, 0.5549152933012902, 0.559201578855546, 0.5676852510574077, 0.5438378753600387, 0.5326628652876709, 0.5254347518119893, 0.5205050294803292, 0.5060665727275757, 0.5185342814944062, 0.4949586954666025, 0.4778241670764653, 0.4858808061859595, 0.4772076873715685, 0.46655990322898044, 0.4586592113431639, 0.4652712134841946, 0.45336356535878686, 0.46182205876685595, 0.43758947628679024, 0.4351289968574997, 0.4356788820901394, 0.43377227338628527, 0.420915413053989, 0.4163071742627473, 0.42193379872636616, 0.4024023965026693, 0.4097656242095752, 0.3990492190368077, 0.4005015637927823, 0.3858656061756896, 0.4008141317387708, 0.3782870083075032, 0.3883836836138453, 0.39203704387961186, 0.37324756257931757, 0.3684439280911396, 0.3774699442154538, 0.36340631666420914, 0.35826140758289304, 0.35807643613684936, 0.3642026712676837, 0.3451623654896163, 0.33794831954461396, 0.3523131363057441, 0.3444913216609335], "accuracy": [0.3471139967441559, 0.5143309831619263, 0.6128648519515991, 0.683000922203064, 0.7013604640960693, 0.7080966830253601, 0.7277770638465881, 0.7390040755271912, 0.7415136694908142, 0.7576277852058411, 0.750231146812439, 0.7576277852058411, 0.765949010848999, 0.7688548564910889, 0.7700436115264893, 0.7895918488502502, 0.7913089394569397, 0.7881389260292053, 0.7828556299209595, 0.789459764957428, 0.7992339134216309, 0.800290584564209, 0.8034605979919434, 0.8113855719566345, 0.8024039268493652, 0.8141592741012573, 0.819442629814148, 0.8189142942428589, 0.8241975903511047, 0.8285563588142395, 0.8257825970649719, 0.8245938420295715, 0.8348963260650635, 0.8251221776008606, 0.8362171649932861, 0.8407079577445984, 0.8352925777435303, 0.841500461101532, 0.8389908671379089, 0.843481719493866, 0.8416325449943542, 0.8540483713150024, 0.8453308939933777, 0.8507462739944458, 0.847840428352356, 0.8541803956031799, 0.8467837572097778, 0.8598600029945374, 0.8581429123878479, 0.8569541573524475, 0.8646149635314941, 0.863029956817627, 0.8597279191017151, 0.8639545440673828, 0.8685774803161621, 0.8668603897094727, 0.8628978729248047, 0.8728041052818298, 0.8701624870300293, 0.8683133125305176, 0.8732003569602966], "val_loss": [1.3380093233925956, 0.9253627572740827, 0.689409681728908, 0.6412713868277413, 0.5751382623400006, 0.6539468424660819, 0.5556519372122628, 0.5636122567313058, 0.516947763306754, 0.5846384082521711, 0.5268250363213676, 0.49610347407204763, 0.5123321499143328, 0.473136373928615, 0.46635186672210693, 0.46193982873644146, 0.4630362476621355, 0.5035176958356585, 0.44880848271506174, 0.43566618646894184, 0.4610557896750314, 0.42084977456501554, 0.43276251213891165, 0.4582204989024571, 0.41974492583956036, 0.41575467586517334, 0.39212702001844135, 0.4108599083764212, 0.3893864665712629, 0.4200484241758074, 0.3844047614506313, 0.3917549507958548, 0.38628275053841726, 0.4064505696296692, 0.37494759048734394, 0.3772096804210118, 0.3747654982975551, 0.37990713119506836, 0.3628824097769601, 0.36973189456122263, 0.3695625492504665, 0.3636154958180019, 0.37620030982153757, 0.3983057737350464, 0.3487208230154855, 0.383067786693573, 0.3543326088360378, 0.34898739201681955, 0.3373250280107771, 0.3430895379611424, 0.34372806549072266, 0.34042177881513325, 0.3341320667948042, 0.3406397955758231, 0.34007418155670166, 0.3281170640672956, 0.33578754322869436, 0.3369009920528957, 0.32645842007228304, 0.34370921339307514, 0.33305993250438143], "val_accuracy": [0.4166666567325592, 0.5743333101272583, 0.6803333163261414, 0.7166666388511658, 0.7353333234786987, 0.6833333373069763, 0.7576666474342346, 0.7583333253860474, 0.7689999938011169, 0.7473333477973938, 0.7663333415985107, 0.7749999761581421, 0.7776666879653931, 0.7916666865348816, 0.7950000166893005, 0.7979999780654907, 0.793666660785675, 0.7683333158493042, 0.8019999861717224, 0.8140000104904175, 0.7793333530426025, 0.8223333358764648, 0.8159999847412109, 0.7943333387374878, 0.8213333487510681, 0.8180000185966492, 0.8346666693687439, 0.8153333067893982, 0.8349999785423279, 0.8146666884422302, 0.8336666822433472, 0.8333333134651184, 0.8356666564941406, 0.8230000138282776, 0.8446666598320007, 0.8403333425521851, 0.8429999947547913, 0.8349999785423279, 0.8460000157356262, 0.8450000286102295, 0.8443333506584167, 0.8476666808128357, 0.8423333168029785, 0.8196666836738586, 0.8566666841506958, 0.8346666693687439, 0.8516666889190674, 0.8533333539962769, 0.8636666536331177, 0.859333336353302, 0.8539999723434448, 0.859000027179718, 0.8646666407585144, 0.859000027179718, 0.859000027179718, 0.8653333187103271, 0.8603333234786987, 0.8579999804496765, 0.8653333187103271, 0.859666645526886, 0.8603333234786987]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 3, 4, 1, 4, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 0, 2, 2, 3, 0, 0], [42, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [1, 3, 2, 3, 6, 9], [1, 3, 0, 0, 3, 2], [44, 47, 50, 41, 34]], "fitness": -0.7905714511871338, "mapping_values": [1, 1, 1, 0, 1, 0, 17, 17, 9, 8, 3, 1, 1, 0, 1, 0, 11, 6, 5, 3], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.pow(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta))))), tf.math.add(tf.math.add(beta, beta), grad)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [2.1800187621937295, 1.50874135445736, 1.159375382184573, 1.0201303510145663, 0.8956154302173932, 0.8602846243504, 0.7906071629349141, 0.8005825625576316, 0.7456863974347138, 0.7297989256062984, 0.7293380760970196, 0.6820793381188887, 0.6769184078507026, 0.6526628749135337, 0.661556109406173, 0.6686501802312952, 0.6285030899770886, 0.6312766674880921, 0.6239906675890216, 0.6302654225639521, 0.6019889307831414, 0.5958751718901278], "accuracy": [0.2782987654209137, 0.49808478355407715, 0.5905428528785706, 0.633469820022583, 0.6696605682373047, 0.6929071545600891, 0.7132478952407837, 0.7033417224884033, 0.7243428826332092, 0.7280412316322327, 0.7235503792762756, 0.7495707273483276, 0.750231146812439, 0.757099449634552, 0.7565711140632629, 0.7457403540611267, 0.7660810947418213, 0.759080708026886, 0.7630431652069092, 0.7683265209197998, 0.7759873270988464, 0.7773081660270691], "val_loss": [1.5207757268633162, 1.0269652094159807, 0.7748994316373553, 0.6942235571997506, 0.6078684159687587, 0.6016243355614799, 0.5920432976314, 0.5503404140472412, 0.5337563412530082, 0.5330890587397984, 0.5224594899586269, 0.5202603510447911, 0.4905109064919608, 0.4955249173300607, 0.5490325689315796, 0.4922998292105539, 0.4756214788981846, 0.49920826298849924, 0.5097543512071881, 0.47181689739227295, 0.47548035212925505, 0.4886490447180612], "val_accuracy": [0.5479999780654907, 0.5193333625793457, 0.6713333129882812, 0.6766666769981384, 0.7283333539962769, 0.7406666874885559, 0.7396666407585144, 0.7620000243186951, 0.7706666588783264, 0.7736666798591614, 0.7739999890327454, 0.7743333578109741, 0.7863333225250244, 0.7863333225250244, 0.7509999871253967, 0.7766666412353516, 0.8073333501815796, 0.778333306312561, 0.7883333563804626, 0.7933333516120911, 0.7903333306312561, 0.7746666669845581]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0], [1, 2, 3, 1, 3, 4, 6, 4, 5, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 2, 3, 0, 2, 1, 3, 0, 1], [42, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [1, 3, 2, 3, 6, 9], [1, 3, 3, 0, 3, 2], [44, 47, 50, 41, 34]], "fitness": -0.7862856984138489, "mapping_values": [1, 1, 1, 0, 1, 0, 22, 22, 12, 10, 4, 1, 1, 0, 1, 0, 11, 6, 5, 2], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), tf.math.pow(tf.math.add(beta, beta), tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), beta)))), tf.math.square(tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)))))))))), alpha), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(sigma, sigma)), tf.math.divide_no_nan(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [2.1058265384414083, 1.8069023910278594, 1.357038442862741, 1.0913765231899504, 0.9368207797067607, 0.8875352347988289, 0.8092770301088004, 0.7752059214717566, 0.7126113787665422, 0.6859319120381786, 0.6735934086400819, 0.6196215377822607, 0.6136284272164685, 0.6346009841542817, 0.5789718157611172, 0.5590246193334333, 0.550121479770684, 0.5698630386387054, 0.5311090107433958, 0.5486047195012087, 0.5176105804966741], "accuracy": [0.29124289751052856, 0.38449347019195557, 0.5155197381973267, 0.5869766473770142, 0.6330735683441162, 0.6753401160240173, 0.6952846646308899, 0.7063795924186707, 0.7302865982055664, 0.744419515132904, 0.7452120184898376, 0.7681944370269775, 0.7672698497772217, 0.7613261342048645, 0.7848368883132935, 0.7884030938148499, 0.7942147850990295, 0.7884030938148499, 0.8021397590637207, 0.7977809906005859, 0.8035926818847656], "val_loss": [1.4827935355050224, 1.1347755023411341, 0.7982164451054165, 0.7821212666375297, 0.6305332183837891, 0.6629315444401332, 0.6622460910252163, 0.5877580302102225, 0.5788781132016864, 0.49054094723292757, 0.4888351133891514, 0.5235464232308524, 0.45140198298863005, 0.449156607900347, 0.4680470568793161, 0.4324661152703421, 0.4392615727015904, 0.46718330894197735, 0.4609239952904837, 0.4710073641368321, 0.4403162258011954], "val_accuracy": [0.34599998593330383, 0.5046666860580444, 0.6299999952316284, 0.6079999804496765, 0.7053333520889282, 0.6990000009536743, 0.7003333568572998, 0.7429999709129333, 0.7369999885559082, 0.784333348274231, 0.7886666655540466, 0.7676666378974915, 0.8059999942779541, 0.8026666641235352, 0.7770000100135803, 0.8209999799728394, 0.8096666932106018, 0.7946666479110718, 0.800000011920929, 0.7736666798591614, 0.7946666479110718]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1], [1, 2, 2, 8, 3, 4, 6, 4, 5, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 0, 2, 1, 3, 0, 0], [42, 98, 99, 81, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 3, 2, 3, 6, 9], [1, 3, 1, 0, 3, 2], [44, 47, 50, 41, 34]], "fitness": -0.7634285688400269, "mapping_values": [1, 1, 1, 0, 1, 0, 21, 21, 11, 10, 5, 1, 1, 0, 1, 0, 9, 4, 5, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, beta), tf.math.pow(tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(grad, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32))), beta))))))), tf.math.square(tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.constant(9.98279874e-01, shape=shape, dtype=tf.float32)))))))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(alpha, sigma), alpha), tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), sigma))", "other_info": {"loss": [1.9463983623343153, 1.3574605656022865, 1.025993415771175, 0.909297631975997, 0.8704389270428008, 0.8487301526399037, 0.8515038642239624, 0.7954640320783057, 0.767152741600604, 0.77478477559967, 0.7941589670300311, 0.7326836130874441, 0.7082730746461321, 0.7811251186486863], "accuracy": [0.3533218801021576, 0.5424646735191345, 0.6255448460578918, 0.6796988248825073, 0.6789063811302185, 0.6930392384529114, 0.7037379741668701, 0.7173424959182739, 0.718399167060852, 0.7276449799537659, 0.7185312509536743, 0.7412495017051697, 0.7469290494918823, 0.7201162576675415], "val_loss": [1.37629611151559, 0.86825088092259, 0.6832411289215088, 0.6525379249027797, 0.6056395258222308, 0.7195242983954293, 0.6549998351505825, 0.5590977668762207, 0.5391419444765363, 0.7086752993719918, 0.5507885387965611, 0.5275001525878906, 0.5262066296168736, 0.5955849545342582], "val_accuracy": [0.45899999141693115, 0.6613333225250244, 0.7110000252723694, 0.7086666822433472, 0.7193333506584167, 0.6993333101272583, 0.7336666584014893, 0.7580000162124634, 0.7773333191871643, 0.7170000076293945, 0.7713333368301392, 0.7630000114440918, 0.7706666588783264, 0.7493333220481873]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 3, 3, 1, 4, 6, 6, 9, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 0, 3, 0, 2, 2, 3, 0, 0], [42, 14, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [1, 3, 2, 3, 6, 9], [1, 0, 0, 0, 3, 2], [76, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 15, 15, 9, 6, 3, 1, 1, 0, 1, 0, 7, 3, 4, 3], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.pow(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32))), tf.math.add(beta, beta))))), tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(alpha, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1026284471154213, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [2, 8, 3, 5, 8, 4, 0, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 3, 0, 2, 1, 3, 0, 0], [0, 47, 33, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 3, 2, 3, 6, 6], [1, 3, 2, 0, 3, 2], [44, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 13, 13, 8, 5, 3, 1, 1, 0, 1, 0, 11, 5, 6, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.sqrt(grad))))))), tf.math.pow(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.divide_no_nan(grad, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(sigma, tf.math.divide_no_nan(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), sigma), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [0, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [8, 8, 3, 4, 1, 4, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 0, 2, 2, 3, 0, 0], [42, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0], [1, 3, 2, 4, 6, 9], [1, 3, 2, 0, 3, 2], [44, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 9, 4, 5, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(alpha, sigma), tf.math.add(beta, tf.math.pow(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), sigma)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10355303436517715, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 8, 3, 5, 2, 4, 0, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 0, 2, 1, 3, 0, 0], [0, 47, 33, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [1, 1, 2, 2, 6, 9], [3, 1, 3, 0, 3, 2], [40, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 1, 14, 14, 8, 6, 3, 1, 1, 0, 1, 0, 9, 4, 5, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.pow(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.divide_no_nan(grad, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))))))))))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.subtract(tf.math.add(sigma, tf.math.add(alpha, sigma)), tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [4, 8, 4, 5, 1, 4, 0, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 2, 2, 2, 3, 0, 0], [23, 30, 33, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1], [1, 0, 2, 3, 6, 3, 9], [3, 3, 3, 0, 0, 2, 2], [44, 42, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 8, 6, 2, 1, 1, 0, 1, 0, 12, 7, 5, 3], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(beta, tf.math.pow(tf.math.negative(tf.math.add(beta, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(grad, beta))))))))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.negative(tf.math.add(sigma, tf.math.multiply(sigma, tf.math.divide_no_nan(sigma, tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))))), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10355303436517715, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1], [2, 8, 3, 5, 3, 2, 5, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 2, 3, 0, 2, 1, 3, 0, 0], [42, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [1, 3, 2, 4, 6, 9], [1, 3, 3, 0, 0, 2], [44, 84, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 11, 6, 5, 3], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(alpha, tf.math.pow(sigma, sigma)), tf.math.divide_no_nan(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [1, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [2, 8, 3, 5, 1, 4, 0, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 0, 2, 1, 3, 0, 0, 4, 2], [0, 47, 33, 84, 1, 78], [1, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [5, 3], [], [0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1], [1, 1, 2, 3, 6, 9], [1, 3, 3, 0, 3, 2], [44, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 7, 7, 4, 3, 2, 1, 0, 0, 0, 0, 9, 4, 5, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.square(beta))))), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.subtract(tf.math.add(alpha, tf.math.multiply(sigma, sigma)), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [19115407.498413596, 359916841.2183331, 1663327824.5769384, 4627827740.403117, 9966008895.77176, 18517108428.16431], "accuracy": [0.10196803510189056, 0.1026284471154213, 0.09311848133802414, 0.10593052208423615, 0.09747721254825592, 0.09311848133802414], "val_loss": [71955584.0, 574942701.7142857, 1939650560.0, 4596765696.0, 8976953051.428572, 15510942866.285715], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 3, 8, 2, 5, 6, 6, 9, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 0, 3, 1, 3, 0, 0, 4, 2], [0, 47, 33, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1], [1, 3, 0, 3, 6, 3, 3, 5], [1, 3, 3, 0, 3, 2, 0], [44, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 8, 6, 3, 1, 1, 0, 1, 0, 15, 8, 7, 2], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.negative(alpha), tf.math.multiply(sigma, tf.math.divide_no_nan(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), tf.math.multiply(sigma, tf.math.multiply(tf.math.square(beta), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10474177449941635, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [1, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1], [5, 6, 3, 4, 6, 2, 2, 2, 2, 9, 2, 9, 8, 1, 1, 8, 9, 0], [0, 2, 3, 3, 0, 2, 1, 3, 0, 3], [42, 47, 1, 84, 1, 78], [0, 0, 0, 1, 0, 1], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [1, 4, 2, 3, 6, 9], [1, 3, 3, 3, 3, 2], [37, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 20, 20, 11, 9, 4, 1, 1, 0, 1, 0, 11, 5, 6, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.math.add(grad, tf.math.add(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), tf.math.add(beta, beta)))))), tf.math.add(beta, alpha)))), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.pow(tf.math.add(alpha, tf.math.multiply(sigma, sigma)), tf.math.divide_no_nan(sigma, sigma)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 3, 4, 8, 4, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 0, 2, 2, 3, 0, 0], [42, 13, 99, 84, 1, 78], [0, 0, 0, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1], [1, 0, 2, 3, 6, 9, 7], [2, 3, 0, 3, 3, 2], [44, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 20, 20, 11, 9, 4, 6, 4, 3, 1, 0, 12, 7, 5, 2], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))), tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32)), grad), tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32))), tf.math.subtract(tf.math.add(beta, beta), beta))), tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), tf.math.add(sigma, tf.math.negative(sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.negative(tf.math.add(beta, tf.math.multiply(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, sigma)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1], [8, 8, 3, 4, 1, 4, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 0, 2, 2, 3, 0, 0], [42, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1], [2, 1, 2, 3, 6, 9], [1, 3, 0, 0, 2, 2], [44, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 2, 3, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.subtract(alpha, sigma), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3027850751155055, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 3, 2, 1, 4, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 0, 3, 2, 3, 0, 0], [42, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1], [1, 3, 2, 3, 6, 9], [1, 3, 0, 0, 3, 2], [44, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 17, 17, 9, 8, 3, 1, 1, 0, 1, 0, 11, 6, 5, 3], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, tf.math.pow(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), grad)))))), tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, grad)))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.divide_no_nan(alpha, sigma), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.303168277667419, 2.3029707800427195, 2.302922370112284, 2.3031109893452677, 2.3029963030492024, 2.3031288729430726, 2.302902318294164, 2.302956281730512, 2.3030450014689534], "accuracy": [0.08928807079792023, 0.09589222073554993, 0.09655263274908066, 0.09536388516426086, 0.09417514503002167, 0.09034473448991776, 0.09192973375320435, 0.09576013684272766, 0.08889182657003403], "val_loss": [1.973660945892334, 1.9736786569867815, 1.97368437903268, 1.9737067903791154, 1.9737972531999861, 1.9737591062273299, 1.9737558364868164, 1.9736374446323939, 1.9736978667122977], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09733333438634872, 0.10233332961797714, 0.09833333641290665, 0.09966666996479034, 0.09833333641290665, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [1, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 1, 4, 1, 4, 0, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 1, 0, 2, 2, 3, 0, 0], [33, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0], [1, 6, 2, 3, 6, 9], [1, 3, 0, 0, 3, 2], [44, 69, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 20, 20, 11, 9, 4, 1, 1, 0, 1, 0, 7, 3, 4, 2], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta))))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), alpha)), tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.add(beta, beta), beta))), tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.divide_no_nan(alpha, sigma), tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.constant(9.80911458e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2326641741.7429814, 43879424017.31238, 202885444141.7831, 564613726768.4882, 1216070070816.7988, 2259651491979.3105], "accuracy": [0.10196803510189056, 0.1026284471154213, 0.09298639744520187, 0.10593052208423615, 0.09734513610601425, 0.09311848133802414], "val_loss": [8766758912.0, 70116341467.42857, 236622895981.7143, 560877198189.7142, 1095417350436.5714, 1892894038893.7144], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 3, 9, 1, 4, 6, 8, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 0, 2, 2, 3, 0, 0], [77, 44, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [1, 3], [], [1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1], [2, 3, 2, 3, 6, 9], [1, 3, 0, 0, 3, 2], [44, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 4, 1, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.multiply(tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0730418711900711, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [8, 5, 3, 4, 1, 4, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 0, 2, 2, 3, 0, 0], [42, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [1, 3, 2, 3, 6, 9], [1, 3, 0, 0, 3, 2], [44, 88, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 7, 7, 4, 3, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0730418711900711, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [5, 8, 4, 4, 1, 4, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 0, 1, 2, 2, 3, 0, 0], [42, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [1, 1, 2, 3, 6, 9], [1, 3, 0, 0, 3, 2], [7, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 1, 1, 1, 0, 1, 0, 9, 4, 5, 2], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.subtract(tf.math.add(alpha, tf.math.multiply(sigma, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32))), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1006472036242485, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}]