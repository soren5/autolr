[{"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 8, 2, 5, 6, 1, 8], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [26, 98, 68, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.8151428699493408, "mapping_values": [1, 16, 16, 10, 6, 4, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), grad))))), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.089842423975759, 2.1024545130870127, 2.098945963069385, 1.5381115442883653, 1.1088050031438401, 0.9462440577338731, 0.8695491851596406, 0.7563087655694619, 0.7100508632661172, 0.6617055056889012, 0.6538733885257062, 0.6067157716106162, 0.6049595443469626, 0.5921665348900843, 0.5940231864698937, 0.5525729063400865, 0.5454308301104122, 0.5308113298742385, 0.5133706120656797, 0.5080493133632719, 0.5082196460195646, 0.49625139716058564, 0.48632711022521496, 0.46290909507885236, 0.487149396053379, 0.4815021799524242, 0.44855812560014596, 0.4515879827995247, 0.44090973994735366, 0.429032371898668, 0.4331225184889801, 0.4257863344076744, 0.4399553255996432, 0.4056569506794218, 0.4054422618186768, 0.4131923425884106], "accuracy": [0.30365869402885437, 0.3019416332244873, 0.33218860626220703, 0.4667811393737793, 0.5797120332717896, 0.6395456194877625, 0.6816800832748413, 0.7156254053115845, 0.7317395210266113, 0.7452120184898376, 0.7457403540611267, 0.7730814814567566, 0.770439863204956, 0.7755910754203796, 0.7705719470977783, 0.7936864495277405, 0.7907806038856506, 0.7987055778503418, 0.8039889335632324, 0.8124422430992126, 0.8087438941001892, 0.8101968169212341, 0.8149517774581909, 0.824329674243927, 0.8202351331710815, 0.822348415851593, 0.8329150676727295, 0.8325188159942627, 0.8342359066009521, 0.8397833704948425, 0.8322546482086182, 0.8453308939933777, 0.83119797706604, 0.8471800088882446, 0.8500858545303345, 0.8462554216384888], "val_loss": [1.4348583221435547, 1.9506000791277205, 1.5190931388310023, 1.0251012189047677, 0.6485865116119385, 0.6750870091574532, 0.59746139390128, 0.5937282017299107, 0.5535413026809692, 0.537882787840707, 0.4932678427015032, 0.5507598774773734, 0.46150563444410053, 0.4818024124417986, 0.47714524609701975, 0.4578179802213396, 0.4434757743562971, 0.4315724117415292, 0.42252897364752634, 0.4491797004427229, 0.4018383537020002, 0.4296684094837734, 0.38713994196483065, 0.4257316674504961, 0.4065094930785043, 0.37254721777779715, 0.4083920887538365, 0.37398360456739155, 0.3839239307812282, 0.4059733492987497, 0.36823166268212454, 0.41579859597342356, 0.36994798694338116, 0.37660545110702515, 0.3737683040755136, 0.3648371696472168], "val_accuracy": [0.35366666316986084, 0.11533333361148834, 0.46700000762939453, 0.5226666927337646, 0.7076666951179504, 0.7076666951179504, 0.734666645526886, 0.731333315372467, 0.7319999933242798, 0.7566666603088379, 0.7806666493415833, 0.7483333349227905, 0.8019999861717224, 0.7716666460037231, 0.781333327293396, 0.7823333144187927, 0.8029999732971191, 0.8026666641235352, 0.8203333616256714, 0.7923333048820496, 0.8190000057220459, 0.8073333501815796, 0.8389999866485596, 0.8136666417121887, 0.8209999799728394, 0.8393333554267883, 0.8220000267028809, 0.8356666564941406, 0.8270000219345093, 0.8220000267028809, 0.8420000076293945, 0.8243333101272583, 0.831333339214325, 0.8353333473205566, 0.8389999866485596, 0.8393333554267883]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1], [2, 9, 1, 2, 8, 1, 8, 2, 5, 2, 1, 8, 2, 8, 2], [2, 3, 2, 0, 0, 0, 2, 2, 0, 0, 0, 3, 2, 2], [26, 98, 68, 44, 46, 56, 71], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.8151428699493408, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.089842423975759, 2.1024545130870127, 2.098945963069385, 1.5381115442883653, 1.1088050031438401, 0.9462440577338731, 0.8695491851596406, 0.7563087655694619, 0.7100508632661172, 0.6617055056889012, 0.6538733885257062, 0.6067157716106162, 0.6049595443469626, 0.5921665348900843, 0.5940231864698937, 0.5525729063400865, 0.5454308301104122, 0.5308113298742385, 0.5133706120656797, 0.5080493133632719, 0.5082196460195646, 0.49625139716058564, 0.48632711022521496, 0.46290909507885236, 0.487149396053379, 0.4815021799524242, 0.44855812560014596, 0.4515879827995247, 0.44090973994735366, 0.429032371898668, 0.4331225184889801, 0.4257863344076744, 0.4399553255996432, 0.4056569506794218, 0.4054422618186768, 0.4131923425884106], "accuracy": [0.30365869402885437, 0.3019416332244873, 0.33218860626220703, 0.4667811393737793, 0.5797120332717896, 0.6395456194877625, 0.6816800832748413, 0.7156254053115845, 0.7317395210266113, 0.7452120184898376, 0.7457403540611267, 0.7730814814567566, 0.770439863204956, 0.7755910754203796, 0.7705719470977783, 0.7936864495277405, 0.7907806038856506, 0.7987055778503418, 0.8039889335632324, 0.8124422430992126, 0.8087438941001892, 0.8101968169212341, 0.8149517774581909, 0.824329674243927, 0.8202351331710815, 0.822348415851593, 0.8329150676727295, 0.8325188159942627, 0.8342359066009521, 0.8397833704948425, 0.8322546482086182, 0.8453308939933777, 0.83119797706604, 0.8471800088882446, 0.8500858545303345, 0.8462554216384888], "val_loss": [1.4348583221435547, 1.9506000791277205, 1.5190931388310023, 1.0251012189047677, 0.6485865116119385, 0.6750870091574532, 0.59746139390128, 0.5937282017299107, 0.5535413026809692, 0.537882787840707, 0.4932678427015032, 0.5507598774773734, 0.46150563444410053, 0.4818024124417986, 0.47714524609701975, 0.4578179802213396, 0.4434757743562971, 0.4315724117415292, 0.42252897364752634, 0.4491797004427229, 0.4018383537020002, 0.4296684094837734, 0.38713994196483065, 0.4257316674504961, 0.4065094930785043, 0.37254721777779715, 0.4083920887538365, 0.37398360456739155, 0.3839239307812282, 0.4059733492987497, 0.36823166268212454, 0.41579859597342356, 0.36994798694338116, 0.37660545110702515, 0.3737683040755136, 0.3648371696472168], "val_accuracy": [0.35366666316986084, 0.11533333361148834, 0.46700000762939453, 0.5226666927337646, 0.7076666951179504, 0.7076666951179504, 0.734666645526886, 0.731333315372467, 0.7319999933242798, 0.7566666603088379, 0.7806666493415833, 0.7483333349227905, 0.8019999861717224, 0.7716666460037231, 0.781333327293396, 0.7823333144187927, 0.8029999732971191, 0.8026666641235352, 0.8203333616256714, 0.7923333048820496, 0.8190000057220459, 0.8073333501815796, 0.8389999866485596, 0.8136666417121887, 0.8209999799728394, 0.8393333554267883, 0.8220000267028809, 0.8356666564941406, 0.8270000219345093, 0.8220000267028809, 0.8420000076293945, 0.8243333101272583, 0.831333339214325, 0.8353333473205566, 0.8389999866485596, 0.8393333554267883]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [2, 0, 6, 6, 0, 3, 8, 2, 8, 6, 1, 8], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [26, 98, 68, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [57, 25, 50, 71, 34]], "fitness": -0.734000027179718, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.0229793907928113, 1.4799039328433676, 1.0902417295518536, 0.8825420081859503, 0.80046425101433, 0.7776462279605576, 0.724231746564877, 0.6965639114993958, 0.7138948565334959], "accuracy": [0.3377360999584198, 0.5119535326957703, 0.5931845307350159, 0.6729626059532166, 0.7024171352386475, 0.7054550051689148, 0.7265883088111877, 0.7425703406333923, 0.7236824631690979], "val_loss": [1.125450951712472, 1.0216961928776331, 0.6425788913454328, 0.6031240054539272, 0.6712261608668736, 0.5657428843634469, 0.5489242417471749, 0.5643899100167411, 0.6194708177021572], "val_accuracy": [0.5776666402816772, 0.5220000147819519, 0.721666693687439, 0.7513333559036255, 0.6916666626930237, 0.7333333492279053, 0.746666669845581, 0.7379999756813049, 0.7006666660308838]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1], [2, 8, 1, 2, 8, 1, 8, 9, 5, 8, 1, 8, 8, 0, 2], [2, 2, 2, 0, 1, 0, 2, 2, 0, 0, 0, 3, 2, 2], [26, 94, 68, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [0, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [87, 25, 50, 71, 34]], "fitness": -0.4657142758369446, "mapping_values": [1, 14, 14, 10, 4, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.sqrt(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(grad)))))), tf.math.add(alpha, tf.math.sqrt(grad))), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.3018532939606557, 2.3023602440687547, 2.2993119597797143, 2.298238513681001, 2.296790852381049, 2.296192988869442, 2.2954699362053326, 2.2943535194956253, 2.292671379301731, 2.2921569261725994, 2.291195626649969, 2.29089197739634, 2.289590428549742, 2.2868299775859855, 2.2871662217234543, 2.2860332767268403, 2.2850842364412873, 2.2851602908973256, 2.28298746016929, 2.2815311354983674, 2.282021897863545, 2.278421836900138, 2.2800544399737115, 2.277228849627921, 2.2761476249616726, 2.2767868039787817, 2.2758463787569614, 2.270985583902555, 2.2728688875288303, 2.2710122019780736, 2.2706342583334975, 2.2678119280649733, 2.265688625986172, 2.266686993598812, 2.265214316140486, 2.2636553097426253, 2.2632494769186438, 2.2624973487450917, 2.2608999747169363, 2.2601162204180634, 2.257885634513374, 2.258418000023111, 2.2552186755015473, 2.255047542166165, 2.2537774323251947, 2.252988967755688, 2.2519969884131514, 2.249867871232462, 2.250088785964075, 2.2488276365804416, 2.2464347698149694, 2.2459525948014196, 2.2436162560072086, 2.243413603269602, 2.241644105418735, 2.240918110831224, 2.239509514058035, 2.237409918803612, 2.235417430710405, 2.2346144016660388, 2.2350693057320608, 2.231507456171955, 2.230364406271035, 2.231392259563768, 2.227265237045641, 2.2255515520677527, 2.2228768564974235, 2.222663560988739, 2.219760796334435, 2.220269382149552, 2.2194928218187546, 2.2164738084095, 2.215732706221355, 2.213454479050753, 2.212789113763112, 2.2102040982501476, 2.2090216807842946, 2.2070112209184027, 2.2056506621036167, 2.20386568606569, 2.2013204426829054, 2.2003851347217753, 2.1981337798852585, 2.196332399131222, 2.1962954569108546, 2.1929950863063894, 2.1927403016191795, 2.187115465849933, 2.1903039559460176, 2.185141143041784, 2.18223380661439, 2.179988065683579, 2.1779679505737812, 2.1755008412201047, 2.174599826107597, 2.170364939006029, 2.1666623251139923, 2.166651975870794, 2.165631745390967, 2.1642802710136984], "accuracy": [0.08796724677085876, 0.09021265059709549, 0.09893012791872025, 0.10170386731624603, 0.10170386731624603, 0.10566636174917221, 0.109232597053051, 0.11094967275857925, 0.11649715900421143, 0.11332716792821884, 0.11808215826749802, 0.11979923397302628, 0.1258750557899475, 0.12600713968276978, 0.12970545887947083, 0.1344604343175888, 0.13697001338005066, 0.1348566859960556, 0.14093250036239624, 0.14053626358509064, 0.14410249888896942, 0.14449875056743622, 0.15070664882659912, 0.15678246319293976, 0.16351869702339172, 0.15651829540729523, 0.15717871487140656, 0.17699114978313446, 0.16814158856868744, 0.1744815707206726, 0.17672698199748993, 0.18161405622959137, 0.18663319945335388, 0.18042530119419098, 0.19284109771251678, 0.1912561058998108, 0.18399155139923096, 0.19204860925674438, 0.2020869106054306, 0.19535067677497864, 0.201294407248497, 0.20182274281978607, 0.2141064554452896, 0.20935148000717163, 0.21555937826633453, 0.21318188309669495, 0.21423853933811188, 0.22652225196361542, 0.22018226981163025, 0.22837141156196594, 0.2316734939813614, 0.23273015022277832, 0.2343151569366455, 0.23774930834770203, 0.24422137439250946, 0.2421080470085144, 0.2495046854019165, 0.24263638257980347, 0.26059964299201965, 0.24818386137485504, 0.2541275918483734, 0.2674679756164551, 0.2662792205810547, 0.26244881749153137, 0.2712983787059784, 0.27222296595573425, 0.27816668152809143, 0.2755250334739685, 0.2822612524032593, 0.2847708463668823, 0.2847708463668823, 0.2786950170993805, 0.2797516882419586, 0.29163914918899536, 0.28701624274253845, 0.2896578907966614, 0.29903578758239746, 0.29797911643981934, 0.3023378551006317, 0.30022454261779785, 0.2977149784564972, 0.3035266101360321, 0.31197991967201233, 0.30801743268966675, 0.3106590807437897, 0.31197991967201233, 0.3163386583328247, 0.3187161684036255, 0.31739532947540283, 0.322150319814682, 0.3237352967262268, 0.3283582031726837, 0.328490287065506, 0.3354906737804413, 0.32479196786880493, 0.3339056968688965, 0.3358869254589081, 0.3435477614402771, 0.34222692251205444, 0.3407739996910095], "val_loss": [1.969564437866211, 1.968545368739537, 1.9675331115722656, 1.9665178571428572, 1.9655036926269531, 1.9644992692129952, 1.9634925978524345, 1.9624854496547155, 1.9614853177751814, 1.960477352142334, 1.9594907079424178, 1.958488873073033, 1.9574989591326033, 1.956501075199672, 1.955508095877511, 1.9545067378452845, 1.9535001346043177, 1.9525146484375, 1.9514999389648438, 1.950491155896868, 1.9494853700910295, 1.9484729766845703, 1.9474599702017648, 1.9464438983372279, 1.9454150199890137, 1.9443988118852888, 1.9433812413896834, 1.942347799028669, 1.9413137435913086, 1.9402800287519182, 1.939230169568743, 1.9381756782531738, 1.9371305874415807, 1.936063630240304, 1.9349989209856306, 1.9339147976466589, 1.9328444344656808, 1.9317656244550432, 1.9306627001081194, 1.929563386099679, 1.9284481321062361, 1.9273490905761719, 1.9262118339538574, 1.925083909715925, 1.9239514214651925, 1.9228036063058036, 1.921642439705985, 1.9204679897853307, 1.919288090297154, 1.9181004932948522, 1.916907582964216, 1.9156975064958846, 1.9144577980041504, 1.9132166590009416, 1.9119726589747839, 1.910719530923026, 1.9094620432172502, 1.9081734248570033, 1.9068793569292342, 1.9055721419198173, 1.9042701039995467, 1.9029222215924944, 1.9015562874930245, 1.900196143559047, 1.8987956047058105, 1.897386074066162, 1.8959552901131767, 1.8945269584655762, 1.8930653844560896, 1.891601494380406, 1.8901081766401018, 1.888601439339774, 1.8870874813624792, 1.8855556079319544, 1.8840019362313407, 1.8824304853166853, 1.8808482033865792, 1.879232610974993, 1.877603599003383, 1.8759557860238212, 1.8742666244506836, 1.8725639070783342, 1.8708365985325404, 1.8691015924726213, 1.8673513276236398, 1.8655481338500977, 1.8637374469212122, 1.8618738310677665, 1.8600359644208635, 1.8581643785749162, 1.8562586648123605, 1.854311738695417, 1.8523221015930176, 1.850313663482666, 1.848292350769043, 1.8462224687848772, 1.8441151891435896, 1.8419934000287737, 1.8398438862391882, 1.8376780237470354], "val_accuracy": [0.045666664838790894, 0.05166666582226753, 0.05999999865889549, 0.06433333456516266, 0.07233333587646484, 0.07866666465997696, 0.08833333104848862, 0.0989999994635582, 0.1106666699051857, 0.12033333629369736, 0.12866666913032532, 0.1379999965429306, 0.1469999998807907, 0.15933333337306976, 0.16866666078567505, 0.1783333271741867, 0.1889999955892563, 0.2006666660308838, 0.21066667139530182, 0.21933333575725555, 0.22466666996479034, 0.23333333432674408, 0.24066667258739471, 0.2486666738986969, 0.25866666436195374, 0.26733332872390747, 0.27566665410995483, 0.2849999964237213, 0.2933333218097687, 0.30033332109451294, 0.3063333332538605, 0.312666654586792, 0.3176666796207428, 0.3233333230018616, 0.3296666741371155, 0.3370000123977661, 0.34333333373069763, 0.34933334589004517, 0.35199999809265137, 0.35600000619888306, 0.359333336353302, 0.3619999885559082, 0.36533331871032715, 0.36800000071525574, 0.3700000047683716, 0.37566667795181274, 0.37700000405311584, 0.37966665625572205, 0.38199999928474426, 0.38466668128967285, 0.38499999046325684, 0.3866666555404663, 0.3903333246707916, 0.3933333456516266, 0.39533331990242004, 0.39766666293144226, 0.4000000059604645, 0.40299999713897705, 0.4046666622161865, 0.4059999883174896, 0.4090000092983246, 0.4099999964237213, 0.41200000047683716, 0.4143333435058594, 0.41600000858306885, 0.4183333218097687, 0.4216666519641876, 0.4246666729450226, 0.4259999990463257, 0.42766666412353516, 0.4286666810512543, 0.4309999942779541, 0.4326666593551636, 0.43433332443237305, 0.4363333284854889, 0.437666654586792, 0.43799999356269836, 0.4386666715145111, 0.4410000145435333, 0.4436666667461395, 0.44600000977516174, 0.4483333230018616, 0.4503333270549774, 0.4516666531562805, 0.4519999921321869, 0.45399999618530273, 0.45500001311302185, 0.4569999873638153, 0.4596666693687439, 0.46166667342185974, 0.46399998664855957, 0.46533334255218506, 0.4663333296775818, 0.4676666557788849, 0.4690000116825104, 0.4703333377838135, 0.47200000286102295, 0.4726666808128357, 0.47466665506362915, 0.4753333330154419]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1], [2, 9, 6, 6, 0, 3, 8, 2, 5, 6, 1, 8, 0, 0, 9, 6], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [26, 98, 68, 73, 46, 56, 71], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [0, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.29028570652008057, "mapping_values": [1, 23, 23, 16, 7, 5, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.sqrt(grad)))), tf.math.negative(tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.negative(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))))), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.292297753675534, 2.4076214276284684, 2.2377830196003226, 2.465440546186168, 2.2278857164379158, 2.284887488114127, 2.123024481760906, 2.160911430126609, 2.353456696215685, 2.3050532669139936], "accuracy": [0.1978602558374405, 0.14793290197849274, 0.1678774207830429, 0.14621582627296448, 0.20182274281978607, 0.13419628143310547, 0.33099988102912903, 0.1806894689798355, 0.12640337646007538, 0.09721305221319199], "val_loss": [2.2855891500200545, 1.9730797495160783, 1.941624437059675, 1.972721712929862, 1.6962419237409319, 1.945431913648333, 1.9812396594456263, 2.1067517144339427, 1.9751749719892229, 1.9738336971827917], "val_accuracy": [0.17299999296665192, 0.10000000149011612, 0.15199999511241913, 0.15933333337306976, 0.31966665387153625, 0.21299999952316284, 0.1693333387374878, 0.25466665625572205, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1], [5, 9, 6, 6, 0, 3, 6, 2, 5, 6, 1, 8], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [26, 22, 68, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.29028570652008057, "mapping_values": [1, 2, 2, 2, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.292297753675534, 2.4076214276284684, 2.2377830196003226, 2.465440546186168, 2.2278857164379158, 2.284887488114127, 2.123024481760906, 2.160911430126609, 2.353456696215685, 2.3050532669139936], "accuracy": [0.1978602558374405, 0.14793290197849274, 0.1678774207830429, 0.14621582627296448, 0.20182274281978607, 0.13419628143310547, 0.33099988102912903, 0.1806894689798355, 0.12640337646007538, 0.09721305221319199], "val_loss": [2.2855891500200545, 1.9730797495160783, 1.941624437059675, 1.972721712929862, 1.6962419237409319, 1.945431913648333, 1.9812396594456263, 2.1067517144339427, 1.9751749719892229, 1.9738336971827917], "val_accuracy": [0.17299999296665192, 0.10000000149011612, 0.15199999511241913, 0.15933333337306976, 0.31966665387153625, 0.21299999952316284, 0.1693333387374878, 0.25466665625572205, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1], [2, 6, 3, 6, 4, 3, 8, 2, 5, 6, 1, 8, 9, 4, 9], [2, 3, 2, 0, 0, 0, 0, 2, 0, 0, 0, 3, 2, 2], [27, 21, 68, 73, 46, 56, 71], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [0, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 9, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 24, 24, 15, 9, 7, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 2, 1, 1], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, grad))), tf.math.add(alpha, grad)))), tf.math.sqrt(tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))))), tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))), grad)), tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), beta)", "other_info": {"loss": [2.303344473280155, 2.3030122584828043, 2.302961771467091, 2.3029939528422316, 2.3030530069293507, 2.302985257224447, 2.302957876593666, 2.302997242647029, 2.3029899657315833, 2.302906914094908, 2.3029596090411246, 2.302945408287648, 2.3029673363412644], "accuracy": [0.09285431355237961, 0.0940430611371994, 0.09179764986038208, 0.09760929644107819, 0.09813763201236725, 0.09708096832036972, 0.09813763201236725, 0.09391097724437714, 0.09642054885625839, 0.08955223858356476, 0.09708096832036972, 0.0936468094587326, 0.09140139818191528], "val_loss": [1.9736693246023995, 1.9736239569527763, 1.9737702097211565, 1.9737098557608468, 1.973639828818185, 1.973702839442662, 1.973639965057373, 1.9736218452453613, 1.9736525671822684, 1.9736572674342565, 1.9736297471182687, 1.9737111500331335, 1.9736359460013253], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09733333438634872, 0.09733333438634872, 0.10000000149011612, 0.09966666996479034, 0.10233332961797714, 0.10400000214576721, 0.10000000149011612, 0.09733333438634872, 0.10233332961797714, 0.09966666996479034, 0.10400000214576721]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1], [8, 6, 3, 6, 1, 3, 8, 2, 5, 6, 1, 8, 9, 4, 9], [2, 3, 2, 2, 2, 0, 2, 0, 0, 0, 0, 3, 2, 2], [26, 98, 68, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [0, 3], [], [0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [8, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 23, 23, 14, 9, 4, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 5, 4, 3], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, grad))))), tf.math.add(alpha, grad)))), tf.math.subtract(grad, tf.math.add(alpha, tf.math.sqrt(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [1813533.6041991923, 2.3088987975182897, 2.3042011147303714, 2.303284814376337, 2.303125019889734, 2.303009108624139, 2.302960943064087, 2.3029951373142983, 2.3029895931612216, 2.3029070581348736, 2.302958925276416, 2.302945367853167, 2.302966292665588], "accuracy": [0.09457138925790787, 0.09985470771789551, 0.09549596905708313, 0.0948355570435524, 0.09774138033390045, 0.09708096832036972, 0.09893012791872025, 0.09298639744520187, 0.09642054885625839, 0.08955223858356476, 0.09708096832036972, 0.0936468094587326, 0.09140139818191528], "val_loss": [1.983358655657087, 1.9759747641427177, 1.974393708365304, 1.973896094730922, 1.9737114906311035, 1.9737242289951868, 1.9736425536019462, 1.9736270904541016, 1.9736545426504952, 1.9736570630754744, 1.9736298833574568, 1.97371244430542, 1.9736373765128], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.10000000149011612, 0.09833333641290665, 0.10233332961797714, 0.10400000214576721, 0.10000000149011612, 0.09733333438634872, 0.10233332961797714, 0.09966666996479034, 0.10400000214576721]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 8, 2, 5, 6, 1, 8], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [26, 98, 68, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 5, 4, 3], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(beta, tf.math.multiply(tf.math.add(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09589222073554993, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [2, 9, 1, 2, 8, 1, 8, 2, 5, 2, 1, 8], [3, 2, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [26, 98, 68, 73, 46], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 6, 3, 3], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), beta)", "other_info": {"loss": [2.30341243208549, 2.303332357421732, 2.3035231415999644, 2.303397782994236, 2.3035547620569004, 2.3031561495589856, 2.3039303580137873, 2.304136664403538, 2.30569924446633, 2.304401420378619], "accuracy": [0.09153348207473755, 0.09602430462837219, 0.0956280529499054, 0.09840179979801178, 0.09998679161071777, 0.09893012791872025, 0.09879804402589798, 0.09985470771789551, 0.09668471664190292, 0.10196803510189056], "val_loss": [1.9736915997096471, 1.9742378507341658, 1.973703180040632, 1.9741078104291643, 1.9742921420506068, 1.9739857401166643, 1.9746056284223283, 1.97526216506958, 1.9755378450666154, 1.9748889378138952], "val_accuracy": [0.09700000286102295, 0.09966666996479034, 0.10233332961797714, 0.09700000286102295, 0.10400000214576721, 0.10400000214576721, 0.09966666996479034, 0.09733333438634872, 0.09966666996479034, 0.10400000214576721]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [2, 9, 1, 2, 8, 1, 8, 2, 5, 2, 1, 8], [1, 2, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [26, 22, 68, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 6, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09576013684272766, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 8, 2, 5, 6, 1, 8], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [30, 2, 68, 73, 17], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 5, 2, 9, 2, 9], [2, 0, 0, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 9, 5, 3, 1, 1, 0, 1, 0, 5, 3, 2, 1, 0, 4, 2, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(grad), tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32)), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.square(grad)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(sigma, sigma)), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.square(beta), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [615536895214.8921, 2.3280694334183574, 2.3293421401985097, 2.3306482425534005, 2.3320754389044254, 2.333589044875], "accuracy": [0.09615638852119446, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9948591504778181, 1.9959293093000139, 1.9970178604125977, 1.998213768005371, 1.9995229584830148, 2.0007947513035367], "val_accuracy": [0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 8, 2, 5, 6, 1, 8], [1, 3, 2, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [26, 22, 68, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 1, 0, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [83, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 6, 4, 3, 1, 0, 3, 1, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, grad))), tf.math.add(sigma, tf.math.negative(sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(beta, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09576013684272766, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1], [9, 9, 2, 6, 2, 3, 8, 2, 5, 6, 1, 8], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [89, 98, 68, 73, 46], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 6, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09576013684272766, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1], [8, 2, 6, 6, 6, 3, 8, 2, 5, 6, 9, 8], [1, 3, 0, 0, 0, 0, 2, 0, 0, 0, 0, 3, 2, 2], [35, 98, 68, 73, 46], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 18, 10, 8, 5, 8, 8, 4, 4, 0, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.multiply(tf.math.sqrt(tf.math.add(tf.math.square(grad), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), grad)), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [299992767.8133956, 5839789396.025888, 26797525244.381985, 74567633193.82697, 157390977624.25253, 294016377912.94147], "accuracy": [0.09602430462837219, 0.09826971590518951, 0.09668471664190292, 0.09959053993225098, 0.1014397069811821, 0.1006472036242485], "val_loss": [1147233645.7142856, 9173492882.285715, 30955681499.42857, 73370650916.57143, 143294744868.57144, 247603948982.85715], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 8, 2, 5, 6, 1, 8], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [26, 22, 68, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [4, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [22, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 9, 5, 3, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.sqrt(tf.math.add(grad, tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.square(grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07991018146276474, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1], [2, 8, 2, 6, 2, 3, 8, 2, 5, 6, 1, 8], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [26, 98, 23, 51, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 0, 8, 8, 4, 4, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(grad)), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), grad)), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1], [2, 6, 3, 6, 1, 3, 8, 2, 5, 6, 1, 8, 9, 4, 9, 0], [2, 3, 2, 0, 0, 0, 2, 2, 0, 0, 0, 3, 2, 2], [26, 98, 68, 73, 46, 56, 71], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [0, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 1, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 25, 25, 16, 9, 6, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 0], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.multiply(tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.subtract(grad, tf.math.sqrt(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))))))))), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))), grad)), tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, alpha), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1], [1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [2, 9, 2, 6, 2, 3, 8, 2, 5, 6, 1, 8], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [26, 98, 68, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 5, 4, 3], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.math.add(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [834528.4438090402, 2.3049044678665, 2.303958823290074, 2.3034275881823074, 2.3031556296421, 2.3029438041661314, 2.3028297805672766, 2.302802120894489, 2.3027613896735355, 2.3027167793246717], "accuracy": [0.0940430611371994, 0.09998679161071777, 0.09430722147226334, 0.09774138033390045, 0.09813763201236725, 0.09655263274908066, 0.09457138925790787, 0.09681680053472519, 0.09694888442754745, 0.09179764986038208], "val_loss": [1.9766236713954382, 1.9754695211138045, 1.974794524056571, 1.9743777002607072, 1.9740896906171526, 1.9739411217825753, 1.9738243647984095, 1.9737506593976701, 1.973724637712751, 1.9737037931169783], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.10000000149011612, 0.09833333641290665, 0.10000000149011612, 0.09700000286102295, 0.10000000149011612, 0.09733333438634872]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1], [3, 1, 0, 6, 2, 0, 6, 5, 9, 6, 1, 8], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [26, 98, 68, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 16, 16, 10, 6, 4, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 1, 2, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.subtract(tf.math.negative(grad), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(beta, beta)", "other_info": {"loss": [2.3023008261657805, 2.303892275503267, 2.3019021268785904, 2.301926810712138, 2.301559673812427, 2.3020078950727525], "accuracy": [0.0870426595211029, 0.08691058307886124, 0.09192973375320435, 0.09298639744520187, 0.09140139818191528, 0.09153348207473755], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}]