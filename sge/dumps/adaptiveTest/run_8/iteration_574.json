[{"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 6, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 5, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.800000011920929, "mapping_values": [1, 14, 14, 7, 7, 1, 8, 8, 5, 3, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)), tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))))), tf.math.add(alpha, grad)), tf.math.add(tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1117359497260266, 1.6814307384896572, 1.4132787024954354, 0.9661721230309007, 0.8818067897343916, 0.7915921733836299, 0.7347695139247696, 0.7232121495743312, 0.7073354585500456, 0.6654411289496995, 0.6551704625758387, 0.6291211317511692, 0.6003640471684415, 0.5923460430992499, 0.5868304624234397, 0.5692553936514038, 0.5452566083396163, 0.5466376138070413, 0.5284180589922667, 0.515794706146211, 0.5186742026343589, 0.49474623354906894, 0.49282357252159015], "accuracy": [0.30801743268966675, 0.48289525508880615, 0.5309734344482422, 0.6494518518447876, 0.6625280380249023, 0.7009642124176025, 0.7252674698829651, 0.7211728692054749, 0.7325320243835449, 0.7503632307052612, 0.7464007139205933, 0.7549861073493958, 0.7689869403839111, 0.7781006693840027, 0.7766477465629578, 0.7852331399917603, 0.7975168228149414, 0.7924976944923401, 0.8014793395996094, 0.8054417967796326, 0.8017435073852539, 0.8141592741012573, 0.8067626357078552], "val_loss": [1.5357562133244105, 1.6037563937050956, 0.7211574486323765, 0.6619813101632255, 0.6735709394727435, 0.595152565411159, 0.5740790367126465, 0.6165282726287842, 0.5489106689180646, 0.50096252986363, 0.5143611601420811, 0.48111420018332346, 0.5196070330483573, 0.48418968064444406, 0.46505690472466604, 0.456230240208762, 0.4404878871781485, 0.4513170633997236, 0.43027658121926443, 0.41743719577789307, 0.42240181991032194, 0.42417989458356586, 0.43103032452719553], "val_accuracy": [0.5260000228881836, 0.47333332896232605, 0.7116666436195374, 0.7089999914169312, 0.703000009059906, 0.7283333539962769, 0.7296666502952576, 0.7149999737739563, 0.7523333430290222, 0.7749999761581421, 0.781000018119812, 0.7929999828338623, 0.7760000228881836, 0.7743333578109741, 0.8090000152587891, 0.8006666898727417, 0.8119999766349792, 0.8163333535194397, 0.8053333163261414, 0.8090000152587891, 0.8149999976158142, 0.8043333292007446, 0.8100000023841858]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 0, 2, 6, 0, 2, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 0, 2, 1, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 2, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.7960000038146973, "mapping_values": [1, 4, 4, 2, 2, 1, 9, 9, 5, 4, 1, 1, 1, 0, 1, 0, 6, 4, 2, 2], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(tf.math.add(alpha, alpha)), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, alpha)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.add(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.0612797743734697, 1.5411465119188172, 1.2477762308166074, 0.9447575577844356, 0.8236516635683407, 0.7982680763251683, 0.7255566589285307, 0.7156285760960386, 0.663904788518988, 0.6452347353275946, 0.666861534260362, 0.6119801724717571, 0.5842194510347036, 0.5727946135850079, 0.5757531509848476, 0.5548208416602584, 0.5295099378765818, 0.541766308538351, 0.5222981465239142, 0.5038298600306679, 0.5076969234997869, 0.49783125171382997, 0.485281427770857, 0.4827907745667484], "accuracy": [0.310130774974823, 0.502971887588501, 0.5646545886993408, 0.658961832523346, 0.6816800832748413, 0.7040021419525146, 0.7293620109558105, 0.7238145470619202, 0.7445515990257263, 0.7576277852058411, 0.7400607466697693, 0.7638356685638428, 0.7758552432060242, 0.7841764688491821, 0.7791573405265808, 0.7827235460281372, 0.8018755912780762, 0.7989697456359863, 0.8025360107421875, 0.8145555257797241, 0.8101968169212341, 0.8146876096725464, 0.8144234418869019, 0.8195747137069702], "val_loss": [1.6081897871834892, 1.1987316949026925, 0.7851900202887399, 0.7403657266071865, 0.590969613620213, 0.5708028418677193, 0.5982879911150251, 0.5279591253825596, 0.5199269226619175, 0.5230730772018433, 0.5158445324216571, 0.4848771095275879, 0.4874368395124163, 0.5053327253886631, 0.4559222715241568, 0.44504605872290476, 0.45461023705346243, 0.43496343919209074, 0.4152604937553406, 0.4181925228663853, 0.44116138560431345, 0.46587624720164705, 0.4278836761202131, 0.4333904896463667], "val_accuracy": [0.46000000834465027, 0.476666659116745, 0.6923333406448364, 0.6836666464805603, 0.7336666584014893, 0.762333333492279, 0.722000002861023, 0.7419999837875366, 0.7509999871253967, 0.7693333625793457, 0.7543333172798157, 0.7710000276565552, 0.7683333158493042, 0.7663333415985107, 0.8033333420753479, 0.8043333292007446, 0.7860000133514404, 0.8180000185966492, 0.8220000267028809, 0.8130000233650208, 0.8076666593551636, 0.7926666736602783, 0.8209999799728394, 0.8059999942779541]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [0, 0, 2, 6, 0, 2, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 0, 2, 1, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 5, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 0, 0, 2, 1, 3, 0, 0], [78, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 2, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [20, 25, 50, 71, 34]], "fitness": -0.7739999890327454, "mapping_values": [1, 3, 3, 2, 1, 0, 9, 9, 5, 4, 2, 1, 1, 0, 1, 0, 6, 4, 2, 2], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.negative(tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.square(tf.math.sqrt(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))))), alpha)), tf.math.add(beta, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.add(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.293026455546792, 2.275606058277175, 2.252939725863762, 2.2275138627489275, 2.20031473510978, 2.1613453650093506, 2.113572375428927, 2.055314802081121, 1.9810705205563148, 1.892174754065923, 1.7969733425623327, 1.6927812034112901, 1.6027647439184254, 1.5061751470400784, 1.4362454143702283, 1.371829775566627, 1.3179136651334762, 1.2553939617163532, 1.2109960352409281, 1.1830724295119976, 1.1583948520983625, 1.1144715283351914, 1.0949335825237, 1.0695981154934984, 1.0391917901032195, 1.0430917086114406, 1.0109653752383272, 0.9915401938017947, 0.983482918089344, 0.950200134760605, 0.9526581193525022, 0.938803794558463, 0.9243853247129465, 0.916112467211629, 0.9029654369079017, 0.8970925768982733, 0.8904635046593123, 0.8819968935174556, 0.8660479929815305, 0.8590882456990722, 0.8625773517226719, 0.8525842118414402, 0.8358576318307906, 0.8366129129806199, 0.8409585630133198, 0.8292713820217875, 0.8207809715112911, 0.8210646840386371, 0.8060539155084506, 0.8076017689726939, 0.7936008466611119, 0.8008524031372055, 0.7916180636148726, 0.7901849569567064, 0.7829690225576885, 0.7787684307531705, 0.7731535304743679, 0.7667445039090983, 0.7653289270312826, 0.7629762608944197, 0.7517227050713607, 0.7614531234160642, 0.7541608855850613, 0.7516601905295595, 0.7410628739097382, 0.7543322718012775, 0.743598883524547, 0.7409733338457419, 0.7349678131614804, 0.7326114665657348, 0.7257718766496135, 0.7314801999307374, 0.730800603382686, 0.7216809419372597, 0.7266303880528656, 0.717337852865241, 0.7124172145144783, 0.7069772547026038, 0.7114384564993136, 0.7146990679479026, 0.707968486770899, 0.6942504044253639, 0.7005711859794513, 0.7008225540632365, 0.6960686507982081, 0.6953783949541614, 0.6848471006618404, 0.6905303646812444, 0.6936696138616252, 0.6945505839974385, 0.6885470077582417, 0.6827553487677442, 0.6862984183064195, 0.680325320856273, 0.6849961279248202, 0.6692821862690989, 0.6720358554980915, 0.6699126819892881, 0.6759541175699568, 0.665278485532702], "accuracy": [0.11768590658903122, 0.1674811840057373, 0.22322018444538116, 0.2709021270275116, 0.30445119738578796, 0.34724608063697815, 0.37207767367362976, 0.395720511674881, 0.41962751746177673, 0.44406285881996155, 0.46189406514167786, 0.4854048490524292, 0.5008585453033447, 0.5189539194107056, 0.5256901383399963, 0.54655921459198, 0.5506538152694702, 0.570730447769165, 0.5778629183769226, 0.5823537111282349, 0.5908070206642151, 0.6174877882003784, 0.618280291557312, 0.6264694333076477, 0.6380926966667175, 0.6341302394866943, 0.6439043879508972, 0.6532822847366333, 0.6538106203079224, 0.6610751748085022, 0.6672830581665039, 0.665830135345459, 0.6773213744163513, 0.6733588576316833, 0.6799629926681519, 0.6782459616661072, 0.6847180128097534, 0.6820763349533081, 0.6853784322738647, 0.6955488324165344, 0.6936996579170227, 0.698718786239624, 0.6991150379180908, 0.7024171352386475, 0.7067758440971375, 0.6996433734893799, 0.7025492191314697, 0.7016246318817139, 0.7082287669181824, 0.7107383608818054, 0.7119271159172058, 0.7125874757766724, 0.7173424959182739, 0.7132478952407837, 0.713908314704895, 0.713908314704895, 0.7220974564552307, 0.7250033020973206, 0.7264562249183655, 0.7186633348464966, 0.724739134311676, 0.7250033020973206, 0.7238145470619202, 0.7292299270629883, 0.7296261787414551, 0.7272487282752991, 0.7271166443824768, 0.7323999404907227, 0.7342491149902344, 0.7297582626342773, 0.7360982894897461, 0.7386078238487244, 0.7371549606323242, 0.7378153204917908, 0.7345132827758789, 0.7430986762046814, 0.7412495017051697, 0.7416457533836365, 0.7415136694908142, 0.7326641082763672, 0.7481178045272827, 0.7452120184898376, 0.7461365461349487, 0.7404569983482361, 0.7448157668113708, 0.7428345084190369, 0.7512878179550171, 0.7390040755271912, 0.7413815855979919, 0.7491744756698608, 0.7433628439903259, 0.7534011602401733, 0.7466648817062378, 0.7475894689559937, 0.7508915662765503, 0.7500990629196167, 0.7515519857406616, 0.7578919529914856, 0.7534011602401733, 0.757099449634552], "val_loss": [1.951908997126988, 1.9327965463910783, 1.9111884662083216, 1.8851618085588728, 1.8533221653529577, 1.811913217817034, 1.7595838138035365, 1.6944874354771204, 1.6157025269099645, 1.5237386907849992, 1.4238653182983398, 1.3212222371782576, 1.2249532767704554, 1.1366259029933385, 1.062544277736119, 0.9999002388545445, 0.9472685200827462, 0.901942423411778, 0.8630870240075248, 0.832044107573373, 0.8056454317910331, 0.7815211159842355, 0.7641619954790387, 0.7430536065782819, 0.7272576604570661, 0.7137127774102348, 0.7011338302067348, 0.687862617628915, 0.6776744297572544, 0.6662581818444389, 0.6584475210734776, 0.649779098374503, 0.6422409840992519, 0.6358697925295148, 0.6287322214671544, 0.6220738547188895, 0.6186273779187884, 0.6111988851002285, 0.6067780426570347, 0.6023336819240025, 0.5985276869365147, 0.5928603751318795, 0.5918733051845005, 0.5856238603591919, 0.5825970343181065, 0.5792414971760341, 0.5756124768938337, 0.5720102446419852, 0.5688633918762207, 0.5649898733411517, 0.5631134850638253, 0.5588736363819667, 0.557841283934457, 0.5542711189814976, 0.550898620060512, 0.548996993473598, 0.5461305379867554, 0.5440858602523804, 0.5431252207074847, 0.5393506629126412, 0.5370459045682635, 0.5359163284301758, 0.5336650609970093, 0.5319573538643974, 0.5296892438616071, 0.5277496406010219, 0.5259325844900948, 0.524401204926627, 0.5218551499502999, 0.520436338015965, 0.5194095884050641, 0.5177854469844273, 0.5167090041296822, 0.5147079740251813, 0.5133473362241473, 0.5113306556429181, 0.5094715356826782, 0.5079805850982666, 0.5070043461663383, 0.5050234454018729, 0.5053285530635289, 0.5034998825618199, 0.5024279696600777, 0.5015373740877423, 0.5009462833404541, 0.4990581955228533, 0.49803480080195833, 0.49668664591653006, 0.4947628804615566, 0.49425874437604633, 0.49405528817858013, 0.4918296848024641, 0.4906735931124006, 0.4885650021689279, 0.48806772913251606, 0.4879601172038487, 0.48865612915584017, 0.48533683163779123, 0.4848311798913138, 0.48359618868146625], "val_accuracy": [0.20533333718776703, 0.3453333377838135, 0.3996666669845581, 0.4323333203792572, 0.4646666646003723, 0.4869999885559082, 0.5286666750907898, 0.5486666560173035, 0.562666654586792, 0.5723333358764648, 0.5826666951179504, 0.5886666774749756, 0.6036666631698608, 0.6193333268165588, 0.6473333239555359, 0.6576666831970215, 0.6766666769981384, 0.6833333373069763, 0.6890000104904175, 0.6930000185966492, 0.7003333568572998, 0.7076666951179504, 0.7013333439826965, 0.7103333473205566, 0.7120000123977661, 0.7206666469573975, 0.7226666808128357, 0.7243333458900452, 0.7206666469573975, 0.7286666631698608, 0.7276666760444641, 0.7333333492279053, 0.7333333492279053, 0.7409999966621399, 0.7423333525657654, 0.7416666746139526, 0.7463333606719971, 0.749666690826416, 0.7506666779518127, 0.7519999742507935, 0.7480000257492065, 0.7549999952316284, 0.750333309173584, 0.7576666474342346, 0.7609999775886536, 0.7620000243186951, 0.765666663646698, 0.762666642665863, 0.762333333492279, 0.765666663646698, 0.7666666507720947, 0.7670000195503235, 0.768666684627533, 0.7676666378974915, 0.7689999938011169, 0.7703333497047424, 0.7716666460037231, 0.7739999890327454, 0.7739999890327454, 0.7766666412353516, 0.7736666798591614, 0.7743333578109741, 0.777999997138977, 0.7786666750907898, 0.7789999842643738, 0.777999997138977, 0.781333327293396, 0.7786666750907898, 0.7789999842643738, 0.7789999842643738, 0.781333327293396, 0.7816666960716248, 0.7816666960716248, 0.7823333144187927, 0.7856666445732117, 0.7833333611488342, 0.7876666784286499, 0.7823333144187927, 0.7839999794960022, 0.7850000262260437, 0.7863333225250244, 0.7879999876022339, 0.7896666526794434, 0.7900000214576721, 0.7893333435058594, 0.7876666784286499, 0.7923333048820496, 0.7896666526794434, 0.7883333563804626, 0.7923333048820496, 0.7919999957084656, 0.7926666736602783, 0.7940000295639038, 0.793666660785675, 0.7979999780654907, 0.79666668176651, 0.7933333516120911, 0.7940000295639038, 0.7983333468437195, 0.7956666946411133]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 0, 2, 6, 0, 2, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 1, 2, 1, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [98, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 5, 2, 3, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.1908571422100067, "mapping_values": [1, 21, 21, 13, 8, 2, 9, 9, 5, 4, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(alpha, grad)), tf.math.add(alpha, alpha)))), tf.math.multiply(grad, tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.sqrt(tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))))), tf.math.add(beta, grad)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [3.0017106783719125, 2.4416107720765674, 2.3042195672765935, 2.302832170358471, 2.2998703896582104, 2.3019589051090574, 2.3053689834353883, 2.303331618579214], "accuracy": [0.18861444294452667, 0.09800554811954498, 0.09774138033390045, 0.09734513610601425, 0.12349755316972733, 0.1504424810409546, 0.09655263274908066, 0.09959053993225098], "val_loss": [2.64733954838344, 1.97487245287214, 1.9736897604806083, 1.9729339054652624, 1.9592738832746233, 1.97787686756679, 1.9742561067853654, 1.9737592424665178], "val_accuracy": [0.0976666659116745, 0.10400000214576721, 0.10566666722297668, 0.09700000286102295, 0.09966666996479034, 0.09733333438634872, 0.0976666659116745, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 6, 2, 6, 0, 2, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [2, 2, 2, 0, 1, 0, 2, 1, 0, 0, 0, 3, 2, 2, 2, 1, 2, 2, 0, 2], [31, 55, 35, 73, 95, 1], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 3, 2, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 2, 9, 2, 9], [3, 1, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 17, 50, 71, 34]], "fitness": -0.1908571422100067, "mapping_values": [1, 30, 30, 18, 12, 6, 9, 9, 5, 4, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.divide_no_nan(tf.math.add(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, alpha)), tf.math.sqrt(tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, alpha))), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.negative(tf.math.multiply(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [3.0017106783719125, 2.4416107720765674, 2.3042195672765935, 2.302832170358471, 2.2998703896582104, 2.3019589051090574, 2.3053689834353883, 2.303331618579214], "accuracy": [0.18861444294452667, 0.09800554811954498, 0.09774138033390045, 0.09734513610601425, 0.12349755316972733, 0.1504424810409546, 0.09655263274908066, 0.09959053993225098], "val_loss": [2.64733954838344, 1.97487245287214, 1.9736897604806083, 1.9729339054652624, 1.9592738832746233, 1.97787686756679, 1.9742561067853654, 1.9737592424665178], "val_accuracy": [0.0976666659116745, 0.10400000214576721, 0.10566666722297668, 0.09700000286102295, 0.09966666996479034, 0.09733333438634872, 0.0976666659116745, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [4, 0, 2, 6, 0, 2, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 0, 2, 1, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 2, 3, 4, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 2, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [96, 25, 50, 71, 34]], "fitness": -0.1908571422100067, "mapping_values": [1, 4, 4, 2, 2, 1, 9, 9, 4, 5, 2, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.negative(tf.math.add(alpha, alpha)), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha))))), tf.math.add(beta, grad)), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [3.0017106783719125, 2.4416107720765674, 2.3042195672765935, 2.302832170358471, 2.2998703896582104, 2.3019589051090574, 2.3053689834353883, 2.303331618579214], "accuracy": [0.18861444294452667, 0.09800554811954498, 0.09774138033390045, 0.09734513610601425, 0.12349755316972733, 0.1504424810409546, 0.09655263274908066, 0.09959053993225098], "val_loss": [2.64733954838344, 1.97487245287214, 1.9736897604806083, 1.9729339054652624, 1.9592738832746233, 1.97787686756679, 1.9742561067853654, 1.9737592424665178], "val_accuracy": [0.0976666659116745, 0.10400000214576721, 0.10566666722297668, 0.09700000286102295, 0.09966666996479034, 0.09733333438634872, 0.0976666659116745, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 0, 2, 6, 0, 2, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [0, 0, 2, 1, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [98, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 2, 3, 8, 5, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [5, 3, 0, 1, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [0, 3], [45], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 5, 2, 3, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [38, 66, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 21, 21, 13, 8, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 2, 1, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(alpha, alpha)))), tf.math.multiply(grad, tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.sqrt(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.302793829621514, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 0, 2, 6, 0, 2, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 0, 2, 1, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 2, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 10, 10, 7, 3, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(tf.math.add(alpha, alpha)), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, grad))))), tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))), alpha), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07555144280195236, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [9, 0, 2, 6, 0, 2, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 0, 2, 1, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 1, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [2, 7, 2, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 7, 7, 3, 4, 0, 1, 1, 0, 1, 0, 9, 5, 4, 3], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.add(sigma, tf.math.add(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 6, 2, 6, 0, 2, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [2, 2, 2, 2, 1, 0, 2, 1, 0, 0, 0, 3, 2, 2, 2, 1, 2, 2, 0, 2], [98, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 3, 0, 1, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [3, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [6, 5, 2, 3, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [38, 66, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 5, 5, 0, 5, 5, 2, 3, 1, 1, 1, 0, 1, 0, 10, 6, 4, 3], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(grad))), alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.square(sigma), tf.math.add(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(beta, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.3011070856911364, 2.303491073498054, 2.302345580428646, 2.3019123861519195, 2.3035839086101038, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09219389408826828, 0.09192973375320435, 0.0878351628780365, 0.08915598690509796, 0.09549596905708313, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [9, 0, 2, 6, 0, 2, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 0, 2, 1, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 1, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1], [0, 3, 2, 9, 2, 9], [1, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 9, 9, 5, 4, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, grad), grad), tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha))), tf.math.sqrt(tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [3299.4756881755184, 448062.98516956146, 7465413.079646017, 53408130.26654339, 235560699.3633602, 778756598.4308546], "accuracy": [0.10368511080741882, 0.09787346422672272, 0.1022322028875351, 0.09615638852119446, 0.09787346422672272, 0.1010434553027153], "val_loss": [25580.338727678572, 1338460.9642857143, 14291223.42857143, 77770242.28571428, 291061878.85714287, 858153069.7142857], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 7, 0, 4, 0, 2, 3, 2, 1, 6, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 1, 2, 1, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [98, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [5, 3, 3, 1, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [8, 5, 2, 3, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [38, 66, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 22, 22, 13, 9, 3, 8, 8, 4, 4, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(alpha, grad)))), tf.math.add(alpha, alpha)))))), tf.math.multiply(grad, tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))))), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, alpha))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 2, 6, 9, 6, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 0, 2, 1, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 2, 3, 8, 4, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [6, 3, 9, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 11, 6, 5, 2, 8, 8, 4, 4, 1, 1, 1, 0, 1, 0, 5, 2, 3, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)))), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(tf.math.add(beta, grad), tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [2, 8, 5, 0, 2, 2, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [0, 2, 2, 1, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 2, 2, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 1, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1], [7, 3, 2, 9, 2, 9], [1, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [38, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 8, 8, 4, 4, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, grad), grad), tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, alpha)), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 7, 0, 4, 0, 2, 3, 2, 1, 6, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 0, 2, 1, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 9, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 1, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 2, 9, 2, 9], [0, 3, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [38, 66, 50, 71, 34]], "fitness": -0.0974285677075386, "mapping_values": [1, 11, 11, 6, 5, 1, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 6, 4, 2, 2], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.negative(grad), alpha))), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.add(sigma, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [1465.0983856299677, 522561068.9461819, 35540712.60579273, 20236075.437370457, 2.3035412771889816, 2.3034294801003363], "accuracy": [0.0936468094587326, 0.09906221181154251, 0.09998679161071777, 0.09893012791872025, 0.09998679161071777, 0.09813763201236725], "val_loss": [1173.5613839285713, 1.9750020163399833, 132338706.28571428, 1.974719728742327, 1.974606990814209, 1.9744980675833566], "val_accuracy": [0.10533333569765091, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 2, 6, 0, 2, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 2, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [0, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 2, 9, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 2, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [38, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 14, 14, 7, 7, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), grad)), tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3011070856911364, 2.303491073498054, 2.302345580428646, 2.3019123861519195, 2.3035839086101038, 2.3022146073818646], "accuracy": [0.09681680053472519, 0.09219389408826828, 0.09192973375320435, 0.0878351628780365, 0.08915598690509796, 0.09166556596755981], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [2, 0, 2, 6, 0, 2, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 0, 2, 1, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 6, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 1, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1], [0, 3, 6, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [17, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 3, 3, 1, 2, 1, 5, 5, 2, 3, 0, 3, 1, 1, 0, 0, 4, 2, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), grad), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3011070856911364, 2.303491073498054, 2.302345580428646, 2.3019123861519195, 2.3035839086101038, 2.3022146073818646], "accuracy": [0.09681680053472519, 0.09219389408826828, 0.09192973375320435, 0.0878351628780365, 0.08915598690509796, 0.09166556596755981], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 2, 6, 0, 2, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 0, 2, 1, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 2, 9, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [30, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [1, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 5, 1, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 92, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 3, 3, 1, 2, 1, 7, 7, 5, 2, 2, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(alpha, tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), grad), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.square(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.3011070856911364, 2.303491073498054, 2.302345580428646, 2.3019123861519195, 2.3035839086101038, 2.3022146073818646], "accuracy": [0.09681680053472519, 0.09219389408826828, 0.09192973375320435, 0.0878351628780365, 0.08915598690509796, 0.09166556596755981], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 2, 6, 0, 2, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 0, 2, 1, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 2, 9, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 2, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 22, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 6, 4, 2, 2], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.add(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.3011070856911364, 2.303491073498054, 2.302345580428646, 2.3019123861519195, 2.3035839086101038, 2.3022146073818646], "accuracy": [0.09681680053472519, 0.09219389408826828, 0.09192973375320435, 0.0878351628780365, 0.08915598690509796, 0.09166556596755981], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 9, 2, 6, 0, 2, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 0, 2, 1, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [17, 55, 35, 73, 95], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 7, 2, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 4, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.037142857909202576, "mapping_values": [1, 20, 20, 13, 7, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad))), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))), tf.math.subtract(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))))), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, beta))", "other_info": {"loss": [2.3015225388039813, 2.30563378444264, 2.3065331347504188, 2.3081985592857848, 2.3132114759635902, 2.3153423974857574], "accuracy": [0.09628847241401672, 0.0866464152932167, 0.08558975160121918, 0.08175934851169586, 0.07634394615888596, 0.07687227427959442], "val_loss": [1.9716151782444544, 1.9732772963387626, 1.9748828751700265, 1.9769770077296667, 1.979513508932931, 1.9823112487792969], "val_accuracy": [0.03433333337306976, 0.028333334252238274, 0.026000000536441803, 0.026000000536441803, 0.025333333760499954, 0.03166666626930237]}}]