[{"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 3, 4, 1, 4, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 0, 2, 2, 3, 0, 0], [42, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [1, 3, 2, 3, 6, 9], [1, 3, 0, 0, 3, 2], [44, 47, 50, 41, 34]], "fitness": -0.7808571457862854, "mapping_values": [1, 1, 1, 0, 1, 0, 17, 17, 9, 8, 3, 1, 1, 0, 1, 0, 11, 6, 5, 3], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.pow(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta))))), tf.math.add(tf.math.add(beta, beta), grad)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [2.184384029334515, 1.4985620496830747, 1.180070762983198, 0.9846210611368829, 0.8860371428678505, 0.8372979726789492, 0.7878019455685009, 0.7440555393105375, 0.7142100387623502, 0.6913764764367943, 0.6910890297426161, 0.6664777779387068, 0.6590055989834925, 0.6574000989551542, 0.6301368175953008, 0.6358517063937844, 0.6208309368324506, 0.6089931249602785, 0.6205664504363222, 0.6036779408158249, 0.6048573491957839, 0.5802934274791868, 0.5648664960362388], "accuracy": [0.2829216718673706, 0.5057455897331238, 0.5871087312698364, 0.6431118845939636, 0.6741513609886169, 0.6852463483810425, 0.7030775547027588, 0.7250033020973206, 0.7320036888122559, 0.7430986762046814, 0.7401928305625916, 0.7499669790267944, 0.7508915662765503, 0.7503632307052612, 0.7619865536689758, 0.7536653280258179, 0.7643640041351318, 0.7737419009208679, 0.7683265209197998, 0.7703077793121338, 0.7666094303131104, 0.7841764688491821, 0.7881389260292053], "val_loss": [1.5370300837925501, 1.032139607838222, 0.8139223371233258, 0.6711270809173584, 0.6418191875730243, 0.5825917720794678, 0.5500032731464931, 0.5781100477491107, 0.5439126150948661, 0.5163434743881226, 0.5329925332750592, 0.5530537366867065, 0.48823441777910503, 0.5025911331176758, 0.5294120141438076, 0.5135840688432965, 0.4827412026269095, 0.47274623598371235, 0.4817749432155064, 0.4715421370097569, 0.48062976769038607, 0.46887356894356863, 0.47244330814906527], "val_accuracy": [0.5933333039283752, 0.581333339214325, 0.6710000038146973, 0.6953333616256714, 0.7163333296775818, 0.7563333511352539, 0.7713333368301392, 0.734000027179718, 0.7766666412353516, 0.7680000066757202, 0.7590000033378601, 0.7649999856948853, 0.7896666526794434, 0.7799999713897705, 0.7486666440963745, 0.7666666507720947, 0.7883333563804626, 0.8059999942779541, 0.7910000085830688, 0.7950000166893005, 0.784333348274231, 0.7973333597183228, 0.7913333177566528]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0], [4, 3, 3, 6, 1, 4, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 0, 1, 3, 0, 2, 3, 3, 1, 0, 0, 1], [23, 47, 99, 84, 1, 78, 85], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [1, 3, 2, 3, 6, 9], [3, 3, 0, 0, 3, 2, 1], [3, 47, 50, 41, 34]], "fitness": -0.7757142782211304, "mapping_values": [1, 1, 1, 0, 1, 0, 26, 26, 14, 12, 6, 1, 1, 0, 1, 0, 11, 6, 5, 3], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))))), tf.math.add(beta, grad)))))), alpha)))), tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(sigma, tf.math.multiply(sigma, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [2.09206561137814, 1.8396199750642042, 1.2817731737507931, 1.0432832803488123, 0.8976119001779921, 0.8334941748835234, 0.8939023981036417, 0.7408408655576765, 0.7254794717952954, 0.708390426846732, 0.6686776705138389, 0.6378393862162757, 0.6299574251392844, 0.6300326272433917, 0.6149352993459403], "accuracy": [0.30365869402885437, 0.44789329171180725, 0.5641262531280518, 0.6239598393440247, 0.6601505875587463, 0.6885483860969543, 0.6667547225952148, 0.7187954187393188, 0.7253995537757874, 0.724210798740387, 0.7446836829185486, 0.7593448758125305, 0.7574957013130188, 0.7584202885627747, 0.7721568942070007], "val_loss": [1.431837524686541, 0.9382361343928746, 1.0971142564501082, 0.7351143189838955, 0.6330605404717582, 0.8210537433624268, 0.5923353603907994, 0.5527088982718331, 0.5592691898345947, 0.512587172644479, 0.5635046277727399, 0.5114285605294364, 0.5342632021222796, 0.539785487311227, 0.4760103566305978], "val_accuracy": [0.5103333592414856, 0.6143333315849304, 0.5019999742507935, 0.6846666932106018, 0.7099999785423279, 0.6740000247955322, 0.762666642665863, 0.7523333430290222, 0.7310000061988831, 0.7786666750907898, 0.746666669845581, 0.7630000114440918, 0.7443333268165588, 0.7366666793823242, 0.7723333239555359]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [4, 6, 3, 6, 1, 3, 6, 6, 6, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 0, 2, 3, 0, 2, 3, 3, 1, 0, 0, 1], [23, 47, 99, 84, 1, 78, 85], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [1, 9, 2, 3, 6, 9], [3, 3, 0, 0, 0, 2, 1], [3, 47, 41, 41, 34]], "fitness": -0.18771427869796753, "mapping_values": [1, 1, 1, 0, 1, 0, 30, 30, 18, 12, 7, 1, 1, 0, 1, 0, 7, 4, 3, 2], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.subtract(tf.math.add(beta, grad), tf.math.pow(tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta)))))), tf.math.add(beta, grad))), tf.math.add(beta, grad))), tf.math.subtract(tf.math.subtract(tf.math.add(beta, tf.math.sqrt(alpha)), tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))))), tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), tf.math.add(sigma, tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [8.060701680866766, 2.3102554251190033, 2.3043371449529597, 2.3030900069042644, 2.3018931182399798, 2.2798312348051, 2.2911079554053315, 2.3032082632437927, 2.302855824529849, 2.3011130949037266, 2.2923699000319155, 2.3050614408199044, 2.3035053439096864, 2.3029422925652576, 2.303002269528467], "accuracy": [0.1488574892282486, 0.10315678268671036, 0.09774138033390045, 0.10038304328918457, 0.10566636174917221, 0.10593052208423615, 0.1224408894777298, 0.10447761416435242, 0.09906221181154251, 0.11742173880338669, 0.11768590658903122, 0.09509972482919693, 0.0948355570435524, 0.09972262382507324, 0.09549596905708313], "val_loss": [1.9846718651907784, 1.9749084200177873, 1.973917075565883, 1.9732683045523507, 1.9706015586853027, 1.9647694315229143, 1.9743215015956335, 1.9734834943498885, 1.9731507301330566, 1.9676042284284319, 1.9765804835728236, 1.9737543378557478, 1.9737326758248466, 1.9737075396946497, 1.9736769539969308], "val_accuracy": [0.09833333641290665, 0.10400000214576721, 0.10000000149011612, 0.10000000149011612, 0.16500000655651093, 0.11233333498239517, 0.0976666659116745, 0.09966666996479034, 0.09700000286102295, 0.179666668176651, 0.10233332961797714, 0.09966666996479034, 0.10000000149011612, 0.09833333641290665, 0.0976666659116745]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [0, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1], [4, 6, 3, 6, 1, 3, 6, 9, 6, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 2, 3, 0, 2, 3, 3, 1, 0, 0, 1], [23, 47, 99, 84, 1, 78, 85], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [1, 3, 2, 3, 6, 9], [1, 3, 0, 0, 3, 2], [1, 47, 74, 41, 34]], "fitness": -0.15942856669425964, "mapping_values": [1, 1, 1, 0, 1, 1, 21, 21, 11, 10, 4, 1, 1, 0, 1, 0, 11, 6, 5, 3], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))))), tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, beta)), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, alpha)), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(sigma, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [4.575354491777865, 2.2882206189618244, 2.300104590927243, 2.3108905294804036, 2.3035652763130896, 2.3030305906388233, 2.29815506579271, 2.3984361437128805], "accuracy": [0.1574428677558899, 0.1320829540491104, 0.11253467202186584, 0.10328886657953262, 0.0940430611371994, 0.09826971590518951, 0.12138422578573227, 0.17210407555103302], "val_loss": [1.9772184235709054, 1.9739757946559362, 2.0072168622698103, 1.9739049502781458, 1.9735719135829382, 1.9730142865862166, 1.9152132443019323, 1.9768425396510534], "val_accuracy": [0.09799999743700027, 0.10233332961797714, 0.13600000739097595, 0.09966666996479034, 0.10400000214576721, 0.0976666659116745, 0.09733333438634872, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0], [8, 8, 6, 4, 1, 4, 6, 6, 9, 0, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 0, 3, 0, 2, 2, 3, 0, 0], [23, 47, 99, 84, 1, 78, 85], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1], [1, 3, 2, 3, 6, 9], [3, 3, 3, 0, 3, 2, 1], [3, 47, 50, 41, 34]], "fitness": -0.15714286267757416, "mapping_values": [1, 3, 3, 2, 1, 1, 18, 18, 12, 6, 4, 1, 1, 0, 1, 0, 7, 3, 4, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.pow(tf.math.subtract(tf.math.add(beta, beta), tf.math.pow(tf.math.add(beta, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.pow(beta, tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(sigma, sigma), tf.math.add(sigma, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [4.23759315889651, 2.307048485090452, 2.304229826801851, 2.3033070965465727, 2.303411941392279, 2.3032024553533494, 2.3030432177540994, 2.3337246058182775, 2.303368497250685, 2.303089320620274], "accuracy": [0.15453705191612244, 0.11702549457550049, 0.1026284471154213, 0.09959053993225098, 0.09945846349000931, 0.09668471664190292, 0.09589222073554993, 0.09800554811954498, 0.10051512718200684, 0.09536388516426086], "val_loss": [1.9818885666983468, 1.9752002443586076, 1.9739140101841517, 1.9737952096121651, 1.9736706188746862, 1.9736007281712122, 1.973750455038888, 1.9741472516741072, 1.973677090236119, 1.973698684147426], "val_accuracy": [0.09833333641290665, 0.09966666996479034, 0.10000000149011612, 0.10000000149011612, 0.10400000214576721, 0.0976666659116745, 0.0976666659116745, 0.09966666996479034, 0.09966666996479034, 0.09700000286102295]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0], [1, 6, 3, 4, 1, 3, 6, 6, 6, 1, 4, 9, 8, 1, 1, 8, 9, 0, 4, 7, 8, 5, 1, 9, 2, 1, 9], [0, 3, 2, 3, 0, 2, 3, 3, 1, 0, 0, 1, 1, 4, 4], [23, 47, 99, 84, 1, 78, 20, 17], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [9, 3, 2, 3, 5, 9], [1, 3, 0, 2, 3, 2], [3, 47, 50, 41, 34]], "fitness": -0.11800000071525574, "mapping_values": [1, 1, 1, 0, 1, 0, 42, 42, 27, 15, 8, 1, 1, 0, 1, 0, 1, 1, 0, 1], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))), tf.math.add(beta, grad))), tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32))))), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.add(beta, beta)))), grad))), tf.math.add(beta, grad))), tf.math.pow(alpha, tf.math.add(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))))))), alpha)))), alpha), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.subtract(grad, grad), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3008917575625065, 2.302559711898181, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.10170386731624603, 0.09972262382507324, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9735828127179826, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.1120000034570694, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], [8, 8, 3, 4, 1, 4, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 3, 2, 2, 2, 3, 0, 0], [42, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [1, 3, 2, 3, 6, 2, 0], [1, 0, 0, 0, 3, 2, 3], [27, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 15, 15, 8, 7, 1, 1, 1, 0, 1, 0, 14, 7, 7, 3], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.add(beta, grad), tf.math.pow(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.divide_no_nan(grad, beta), tf.math.add(beta, beta)))), beta))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.negative(sigma), beta))), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10276053100824356, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], [4, 6, 3, 6, 1, 3, 2, 6, 6, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 0, 2, 2, 3, 0, 0, 5, 1], [23, 47, 24, 84, 1, 78, 85], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [1, 3], [], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [1, 1, 2, 3, 6, 9], [1, 3, 0, 0, 3, 2], [44, 98, 55, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 29, 29, 17, 12, 7, 1, 1, 0, 1, 0, 11, 6, 5, 3], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.multiply(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), grad))), tf.math.add(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(beta, tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))))))), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.add(beta, grad), tf.math.sqrt(alpha)), tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.subtract(tf.math.add(alpha, tf.math.multiply(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1], [4, 6, 3, 6, 1, 3, 6, 6, 6, 5, 4, 9, 8, 1, 1, 8, 9, 0, 1, 1], [0, 2, 0, 3, 0, 2, 2, 1, 0, 0, 3, 4, 2], [42, 6, 4, 84, 1, 78, 45], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [1, 3, 2, 3, 2, 9], [3, 3, 0, 0, 0, 2, 1], [44, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 33, 33, 20, 13, 7, 1, 1, 0, 1, 0, 11, 6, 5, 4], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))))), tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta))))))))), beta))), tf.math.subtract(tf.math.sqrt(tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), alpha))), tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))), tf.math.negative(tf.math.subtract(tf.math.subtract(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), tf.math.add(beta, grad)))), tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(sigma, tf.math.multiply(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0], [4, 6, 3, 6, 1, 3, 6, 5, 6, 1, 4, 9, 9, 1, 1, 8, 9, 0], [0, 0, 2, 3, 3, 2, 3, 3, 1, 0, 0, 1], [1, 47, 99, 84, 1, 78, 37], [0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [1, 3, 2, 3, 8, 9], [3, 3, 0, 0, 3, 2, 1], [3, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 22, 22, 13, 9, 4, 6, 5, 3, 2, 0, 10, 6, 4, 3], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(beta, beta), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))))))))), tf.math.add(beta, grad))))), alpha), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, sigma))))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(sigma, tf.math.multiply(sigma, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [177448947.52474916, 3415549063.99683, 15754313983.087042, 44186161913.20354, 95596060880.83054, 176060656992.6044], "accuracy": [0.10011887550354004, 0.09774138033390045, 0.10540219396352768, 0.10421344637870789, 0.09826971590518951, 0.09774138033390045], "val_loss": [685437184.0, 5480401773.714286, 18492873581.714287, 43830874697.14286, 85602397622.85715, 147914789449.14285], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1], [4, 6, 3, 6, 1, 4, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 3, 2, 0, 2, 2, 3, 3, 0, 1], [72, 47, 99, 36, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [2, 3], [], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [9, 3, 2, 3, 5, 9], [3, 1, 1, 0, 3, 2, 1, 2, 1], [5, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 24, 24, 13, 11, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(beta, beta), tf.math.pow(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta)))))))), tf.math.sqrt(grad)))), grad)))), tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.301183201901082, 2.30258400489657, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.1006472036242485, 0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1], [8, 8, 3, 4, 6, 4, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 3, 3, 0, 2, 1, 3, 0, 0], [72, 73, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1, 1], [3, 3, 0], [5, 3], [], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [9, 3, 2, 3, 5, 9], [1, 3, 0, 0, 3, 2], [40, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 17, 17, 9, 8, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.multiply(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), grad), tf.math.add(beta, tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32))), beta)), tf.math.add(beta, alpha)))), grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302489405846032, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1], [4, 6, 2, 6, 1, 4, 1, 6, 6, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 2, 0, 3, 0, 2, 2, 3, 0, 0], [42, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [2, 3], [], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [2, 3, 2, 3, 5, 9], [1, 3, 0, 0, 3, 2], [3, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 10, 6, 4, 3], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(sigma, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))), tf.math.square(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.3024330697811006, 2.3025388005954115, 2.302526246035466, 2.3025288448011274, 2.3025288868101597, 2.3025422955327706], "accuracy": [0.10698718577623367, 0.10342095047235489, 0.10289261490106583, 0.10381719470024109, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9736439159938268, 1.9736484118870325, 1.9736534527369909, 1.9736533164978027, 1.9736595153808594, 1.9736631938389368], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [0, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0], [4, 8, 3, 4, 1, 4, 6, 2, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 3, 3, 0, 2, 1, 3, 0, 0, 0, 4], [23, 47, 99, 84, 1, 78, 85], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [1, 3], [], [1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [2, 3, 2, 3, 5, 9], [3, 3, 0, 0, 3, 2, 1], [3, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 2, 28, 28, 16, 12, 5, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, alpha))))), tf.math.add(beta, grad)))))), tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)))))), tf.math.sqrt(tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), tf.math.sqrt(grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.302489405846032, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [8, 8, 3, 4, 1, 4, 2, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 0, 2, 2, 2, 3, 0, 0, 5, 3], [23, 47, 99, 84, 1, 78], [1, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [2, 3], [], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0], [1, 3, 2, 4, 3, 9, 2, 9, 9], [1, 3, 0, 0, 3, 2], [44, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 27, 27, 16, 11, 5, 1, 0, 0, 0, 0, 13, 9, 4, 5], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.subtract(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), beta))), tf.math.add(beta, beta))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))))), grad)), tf.math.subtract(tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.multiply(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))), tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09681680053472519, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [0, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 8, 3, 4, 1, 4, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 2, 3, 0, 3, 2, 2, 3, 0, 0], [42, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [2, 3], [], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [8, 3, 2, 3, 5, 9], [1, 3, 0, 0, 3, 2], [40, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 9, 5, 4, 2], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(sigma, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), tf.math.square(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09959053993225098, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [0, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0], [8, 8, 2, 4, 8, 4, 2, 6, 0, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 1, 0, 0, 2, 2, 3, 0, 0], [72, 47, 99, 84, 1, 78], [0, 0, 1, 0, 0], [1, 0, 1, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [1, 3, 0, 3, 6, 9, 5], [3, 1, 1, 0, 3, 2, 1, 2, 1], [3, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 20, 20, 13, 7, 3, 1, 1, 0, 1, 0, 6, 3, 3, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha))), tf.math.subtract(tf.math.add(beta, tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)))))))), tf.math.sqrt(tf.math.add(beta, beta)))))), tf.math.add(beta, beta))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.negative(sigma), alpha), alpha)", "other_info": {"loss": [2.3018044578936183, 2.302584085765532, 2.302584081577225, 2.3025834920021837, 2.3025832806973803, 2.302582466685777], "accuracy": [0.10381719470024109, 0.10659094154834747, 0.10527011007070541, 0.10579843819141388, 0.09998679161071777, 0.10210011899471283], "val_loss": [1.9736432347978865, 1.9736456189836775, 1.9736439159938268, 1.9736450740269251, 1.9736449377877372, 1.973644801548549], "val_accuracy": [0.10400000214576721, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1], [3, 6, 2, 4, 6, 9, 0, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 3, 2, 0, 2, 2, 3, 0, 0], [72, 47, 99, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1], [1, 3, 2, 9, 2, 9, 5], [3, 3, 1, 0, 3, 2, 1, 2, 1], [44, 47, 50, 41, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 20, 20, 11, 9, 3, 1, 1, 0, 1, 0, 9, 6, 3, 2], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(grad, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(beta, tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)))), tf.math.negative(tf.math.divide_no_nan(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.subtract(beta, tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, sigma)), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [2.3025922459098624, 2.3026686704169803, 2.302689420013317, 2.3026868511956238, 2.3026945289603753, 2.30267474541433], "accuracy": [0.09245806187391281, 0.09338264167308807, 0.09576013684272766, 0.09391097724437714, 0.09615638852119446, 0.09430722147226334], "val_loss": [1.973653929574149, 1.973644801548549, 1.9736368315560477, 1.9736458233424596, 1.9736334936959403, 1.9736265454973494], "val_accuracy": [0.10400000214576721, 0.09733333438634872, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0], [8, 8, 2, 4, 6, 4, 0, 6, 2, 5, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 0, 0, 2, 2, 3, 0, 0], [23, 47, 99, 84, 1, 78, 85], [1, 0, 1, 0, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [1, 3, 2, 3, 6, 9], [3, 3, 0, 2, 3, 2, 1], [3, 47, 50, 41, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 11, 6, 5, 2], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(sigma, tf.math.multiply(sigma, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))), sigma)", "other_info": {"loss": [2.3010323494495637, 2.3021458292744335, 2.3012374215484406, 2.301583477534701, 2.3024706335084124, 2.3012224527287715], "accuracy": [0.0956280529499054, 0.09417514503002167, 0.09008057415485382, 0.0874389111995697, 0.09351472556591034, 0.09747721254825592], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [2, 9, 6, 6, 0, 3, 4, 1, 5], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [6, 86, 50], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1], [4, 4, 2, 6, 1, 4, 6, 6, 2, 1, 4, 9, 4, 1, 1, 8, 9, 0], [3, 2, 3, 3, 0, 3, 1, 3, 0, 0, 3], [48, 47, 99, 60, 1, 78], [1, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [2, 3], [], [1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [9, 3, 2, 3, 5, 9], [3, 3, 0, 0, 3, 2, 1], [3, 47, 50, 41, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, beta))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3010323494495637, 2.3021458292744335, 2.3012374215484406, 2.301583477534701, 2.3024706335084124, 2.3012224527287715], "accuracy": [0.0956280529499054, 0.09417514503002167, 0.09008057415485382, 0.0874389111995697, 0.09351472556591034, 0.09747721254825592], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}]