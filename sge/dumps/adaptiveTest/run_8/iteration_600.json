[{"genotype": [[0], [1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 8, 3, 4, 5, 1, 0, 5, 2, 1, 5, 2, 9, 3, 2, 1, 0, 5, 0, 2, 3, 2, 0, 8, 2, 9, 2, 1, 0, 4, 6, 9], [2, 1, 2, 1, 2, 2, 2, 2, 2, 0, 0, 2, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [47, 55, 35, 17, 95, 52, 54], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [7, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.8134285807609558, "mapping_values": [1, 8, 8, 4, 4, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.multiply(tf.math.add(alpha, grad), tf.math.pow(tf.math.add(alpha, alpha), grad)))), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9797810970469394, 1.5086001309547379, 1.0148165404694254, 0.8590963240218373, 0.8428877651762292, 0.7332961091575149, 0.7157352897847223, 0.6896224531121556, 0.6965346349669705, 0.6536335301925131, 0.6155934057703675, 0.6356590651423467, 0.5988451555703909, 0.5834024270228612, 0.5917568107629733, 0.5754832668453082, 0.5344857823154348, 0.5616170142887605, 0.5279194997868848, 0.5147731695602189, 0.5027218197220589, 0.5054677739245402, 0.47795975207888836, 0.4852723331853556, 0.4743142432902609, 0.4612512785280543, 0.4571663496548143, 0.44614311874015156, 0.43813967624470823, 0.44515896620546996, 0.43805055699532985, 0.4303387285987258, 0.41607735920198025, 0.42944876774269686, 0.4014076950480484, 0.4070516015442213, 0.4089875475227589, 0.38588797686720694, 0.3999758064313855, 0.3781895949155301, 0.3882334892697196, 0.36565723069324124, 0.37243102613126505, 0.35664223799962474, 0.3631706673707535, 0.353554046621664], "accuracy": [0.3299432098865509, 0.4897635579109192, 0.6268656849861145, 0.68101966381073, 0.6913221478462219, 0.7251353859901428, 0.7263241410255432, 0.7440232634544373, 0.7288337349891663, 0.750231146812439, 0.7676661014556885, 0.7617223858833313, 0.7725531458854675, 0.7770439982414246, 0.7750627398490906, 0.7857614755630493, 0.7987055778503418, 0.7877426743507385, 0.7989697456359863, 0.8074230551719666, 0.8119139075279236, 0.8121780753135681, 0.8228767514228821, 0.8170651197433472, 0.8215559124946594, 0.8310658931732178, 0.8321225643157959, 0.8359529972076416, 0.8385946154594421, 0.8337075710296631, 0.8354246616363525, 0.8412362933158875, 0.8454629778862, 0.8409721255302429, 0.8520671129226685, 0.8482366800308228, 0.8479725122451782, 0.8564258217811584, 0.8564258217811584, 0.8577466607093811, 0.8585391640663147, 0.863029956817627, 0.8574824929237366, 0.8671245574951172, 0.8631620407104492, 0.8688416481018066], "val_loss": [1.0813543796539307, 0.8623222964150565, 0.6689724581582206, 0.6363546507699149, 0.615423457963126, 0.5553768873214722, 0.5375636305127826, 0.5143966504505703, 0.5444043874740601, 0.5696437869753156, 0.5345981121063232, 0.4930464540209089, 0.4803946018218994, 0.4686595712389265, 0.44163993426731657, 0.4722961698259626, 0.4373197044645037, 0.43529042175837923, 0.41967294045857023, 0.44179968323026386, 0.44943952560424805, 0.44983226912362234, 0.41217210463115145, 0.3863164186477661, 0.3915307692119053, 0.39283944027764456, 0.40201644386563984, 0.39909734044756207, 0.3956380656787327, 0.3846061314855303, 0.37779626676014494, 0.37278098719460623, 0.41346119131360737, 0.373619590486799, 0.3662365334374564, 0.37351170607975553, 0.34832790919712614, 0.357680082321167, 0.3650518144880022, 0.3731339829308646, 0.33338246175221037, 0.37868296248572214, 0.34203345435006277, 0.34211699451719013, 0.34278494119644165, 0.3493264743259975], "val_accuracy": [0.5450000166893005, 0.5933333039283752, 0.6956666707992554, 0.7059999704360962, 0.706333339214325, 0.7326666712760925, 0.7480000257492065, 0.765999972820282, 0.7596666812896729, 0.722000002861023, 0.7573333382606506, 0.7770000100135803, 0.7833333611488342, 0.7893333435058594, 0.8073333501815796, 0.7943333387374878, 0.8050000071525574, 0.8159999847412109, 0.8146666884422302, 0.7923333048820496, 0.8040000200271606, 0.8019999861717224, 0.8203333616256714, 0.8349999785423279, 0.8376666903495789, 0.8336666822433472, 0.8236666917800903, 0.8230000138282776, 0.8316666483879089, 0.840666651725769, 0.8453333377838135, 0.8450000286102295, 0.8206666707992554, 0.8420000076293945, 0.8476666808128357, 0.8423333168029785, 0.8513333201408386, 0.8493333458900452, 0.8416666388511658, 0.8343333601951599, 0.8646666407585144, 0.8376666903495789, 0.8606666922569275, 0.859333336353302, 0.8533333539962769, 0.8513333201408386]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 1, 4, 5, 1, 2, 1, 2, 1, 5, 2, 9, 3, 2, 6, 0, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 0, 2, 2, 0, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.8057143092155457, "mapping_values": [1, 30, 30, 18, 12, 8, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.add(tf.math.subtract(tf.math.add(alpha, grad), grad), tf.math.square(tf.math.add(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))))))), tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), grad), grad))), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.240152009962226, 2.039859684498366, 1.8322468700032304, 1.5089532584404635, 1.0659943722211107, 0.8149983213326053, 0.7291347396025772, 0.6994152808028787, 0.7201347891696456, 0.6403390416741891, 0.5953226882106735, 0.5885079734360994, 0.5972168476369639, 0.5703012392804638, 0.5263890339406789, 0.558348500630985, 0.5211253767756108, 0.536877631243619, 0.49613624176628257, 0.5018334863853807, 0.4907048251241221, 0.48579349630875057, 0.4703185228765475], "accuracy": [0.2619204819202423, 0.29058247804641724, 0.402588814496994, 0.4803856909275055, 0.6189407110214233, 0.6942279934883118, 0.7236824631690979, 0.7387399077415466, 0.7275128960609436, 0.7535332441329956, 0.7783648371696472, 0.7815347909927368, 0.7746664881706238, 0.7893276810646057, 0.7998943328857422, 0.7886672616004944, 0.8042530417442322, 0.8009510040283203, 0.8124422430992126, 0.8098005652427673, 0.8149517774581909, 0.8177255392074585, 0.8252542614936829], "val_loss": [1.7909846305847168, 1.8296093940734863, 1.212069000516619, 1.0420316287449427, 0.6975186041423252, 0.5763034820556641, 0.5229250192642212, 0.5866238219397408, 0.5192654303142002, 0.5482254198619297, 0.5000709295272827, 0.4457729288509914, 0.4382040500640869, 0.43483790329524447, 0.429394577230726, 0.4560316375323704, 0.44976439646312166, 0.40605461597442627, 0.39947264535086496, 0.43087983982903616, 0.4429340107100351, 0.44857111147471834, 0.4133753946849278], "val_accuracy": [0.25699999928474426, 0.39933332800865173, 0.5223333239555359, 0.6203333139419556, 0.6949999928474426, 0.7386666536331177, 0.7583333253860474, 0.7303333282470703, 0.7680000066757202, 0.731333315372467, 0.7683333158493042, 0.8040000200271606, 0.8080000281333923, 0.7983333468437195, 0.8256666660308838, 0.8056666851043701, 0.8009999990463257, 0.8323333263397217, 0.8226666450500488, 0.7910000085830688, 0.8013333082199097, 0.8040000200271606, 0.824999988079071]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 0, 4, 5, 1, 0, 5, 2, 1, 8, 2, 9, 3, 2, 1, 0, 5, 0, 2, 3, 2, 0, 8, 2, 9, 2, 1, 0, 4, 6, 9], [0, 2, 0, 2, 2, 0, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [47, 55, 35, 17, 95, 52, 54], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [7, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.8057143092155457, "mapping_values": [1, 19, 19, 13, 6, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.negative(tf.math.add(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.subtract(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.square(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))))), tf.math.add(tf.math.subtract(tf.math.add(alpha, grad), grad), tf.math.sqrt(tf.math.add(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.240152009962226, 2.039859684498366, 1.8322468700032304, 1.5089532584404635, 1.0659943722211107, 0.8149983213326053, 0.7291347396025772, 0.6994152808028787, 0.7201347891696456, 0.6403390416741891, 0.5953226882106735, 0.5885079734360994, 0.5972168476369639, 0.5703012392804638, 0.5263890339406789, 0.558348500630985, 0.5211253767756108, 0.536877631243619, 0.49613624176628257, 0.5018334863853807, 0.4907048251241221, 0.48579349630875057, 0.4703185228765475], "accuracy": [0.2619204819202423, 0.29058247804641724, 0.402588814496994, 0.4803856909275055, 0.6189407110214233, 0.6942279934883118, 0.7236824631690979, 0.7387399077415466, 0.7275128960609436, 0.7535332441329956, 0.7783648371696472, 0.7815347909927368, 0.7746664881706238, 0.7893276810646057, 0.7998943328857422, 0.7886672616004944, 0.8042530417442322, 0.8009510040283203, 0.8124422430992126, 0.8098005652427673, 0.8149517774581909, 0.8177255392074585, 0.8252542614936829], "val_loss": [1.7909846305847168, 1.8296093940734863, 1.212069000516619, 1.0420316287449427, 0.6975186041423252, 0.5763034820556641, 0.5229250192642212, 0.5866238219397408, 0.5192654303142002, 0.5482254198619297, 0.5000709295272827, 0.4457729288509914, 0.4382040500640869, 0.43483790329524447, 0.429394577230726, 0.4560316375323704, 0.44976439646312166, 0.40605461597442627, 0.39947264535086496, 0.43087983982903616, 0.4429340107100351, 0.44857111147471834, 0.4133753946849278], "val_accuracy": [0.25699999928474426, 0.39933332800865173, 0.5223333239555359, 0.6203333139419556, 0.6949999928474426, 0.7386666536331177, 0.7583333253860474, 0.7303333282470703, 0.7680000066757202, 0.731333315372467, 0.7683333158493042, 0.8040000200271606, 0.8080000281333923, 0.7983333468437195, 0.8256666660308838, 0.8056666851043701, 0.8009999990463257, 0.8323333263397217, 0.8226666450500488, 0.7910000085830688, 0.8013333082199097, 0.8040000200271606, 0.824999988079071]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [1, 8, 1, 4, 5, 1, 6, 3, 2, 1, 5, 2, 9, 3, 2, 6, 0, 5, 0, 2, 8, 2, 0, 8, 2], [0, 1, 1, 2, 2, 0, 1, 2, 2, 0, 0, 0, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [40, 62, 35, 17, 62, 88, 6], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [2, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 50, 71, 34]], "fitness": -0.8031428456306458, "mapping_values": [1, 9, 9, 5, 4, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), alpha))), tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9689115043549947, 1.3197368884351133, 1.051625138103151, 0.8526083185625208, 0.7862298685986966, 0.7246145303490895, 0.728581120978572, 0.6859614167624712, 0.6845582556793829, 0.6519671342612541, 0.6192841556849749, 0.6079060082438127, 0.6151021272593549, 0.6111231098526488, 0.5751579656041671, 0.5663281748118796, 0.5526734839781888, 0.548092685804202, 0.5231422591502278, 0.5153419072948285, 0.5095471463592659, 0.4965286563731078, 0.49130883108686224, 0.4862070964697786, 0.4858411804811908, 0.45832779245794786, 0.4514189368154961, 0.46411451602876463, 0.4399770954069035, 0.44734139735940237], "accuracy": [0.33324527740478516, 0.5367851257324219, 0.6242240071296692, 0.6823405027389526, 0.7058512568473816, 0.7277770638465881, 0.7240787148475647, 0.7430986762046814, 0.7380794882774353, 0.7520803213119507, 0.7656848430633545, 0.7651565074920654, 0.7703077793121338, 0.7623828053474426, 0.7803460359573364, 0.7873464822769165, 0.7936864495277405, 0.7932901978492737, 0.8041210174560547, 0.805177628993988, 0.8076872229576111, 0.8153480291366577, 0.8166688680648804, 0.8138951063156128, 0.819442629814148, 0.832650899887085, 0.8329150676727295, 0.8265751004219055, 0.8364813327789307, 0.8333113193511963], "val_loss": [1.415360995701381, 0.7853349958147321, 0.7253681421279907, 0.581209693636213, 0.5890181575502668, 0.5537419489451817, 0.5637655258178711, 0.5063424280711583, 0.543697714805603, 0.5742430005754743, 0.4897822822843279, 0.4778279576982771, 0.4773618493761335, 0.46549992901938303, 0.45416122674942017, 0.472191401890346, 0.4495211924825396, 0.43337084565843853, 0.4245180828230722, 0.4552128655569894, 0.4247205512864249, 0.4704798800604684, 0.4066244193485805, 0.3940686157771519, 0.3981281518936157, 0.4022532956940787, 0.3792070916720799, 0.3870786258152553, 0.3975245015961783, 0.3869289330073765], "val_accuracy": [0.4866666793823242, 0.6880000233650208, 0.659333348274231, 0.7383333444595337, 0.7300000190734863, 0.7429999709129333, 0.7260000109672546, 0.781333327293396, 0.7433333396911621, 0.7196666598320007, 0.7856666445732117, 0.7903333306312561, 0.7870000004768372, 0.7903333306312561, 0.8019999861717224, 0.8113333582878113, 0.8043333292007446, 0.8183333277702332, 0.8116666674613953, 0.7866666913032532, 0.8203333616256714, 0.7886666655540466, 0.8323333263397217, 0.8333333134651184, 0.8370000123977661, 0.8246666789054871, 0.8360000252723694, 0.8326666951179504, 0.8303333520889282, 0.8343333601951599]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [1, 8, 1, 4, 5, 1, 6, 3, 2, 1, 5, 2, 9, 3, 2, 6, 0, 5, 0, 2, 8, 2, 0, 8, 2], [0, 1, 1, 2, 2, 0, 1, 2, 2, 0, 0, 0, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 18, 35, 17, 57, 79, 53], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [34, 25, 50, 71, 34]], "fitness": -0.7731428742408752, "mapping_values": [1, 9, 9, 5, 4, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), alpha))), tf.math.pow(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.265624944197897, 2.1281351858299518, 1.8188576033527604, 1.4343050177921441, 1.206562657019938, 1.0863729841941225, 1.002623499179828, 0.9441767440432995, 0.8927733672135982, 0.8685862053308221, 0.8484625874918529, 0.8185706987057884, 0.7972216635741703, 0.7845597696609784, 0.7584164187562086, 0.7576225679060251, 0.7439877446206994, 0.7292877637384244, 0.7174933139973344, 0.7159667787944258, 0.7047183415389348, 0.6961325464499326, 0.6816623849859957, 0.6803515274070273, 0.6763403502831354, 0.6770068250075937, 0.6622100754924785, 0.6564112965220773, 0.6509019737120207, 0.6446717415330212], "accuracy": [0.18095363676548004, 0.35820895433425903, 0.4472328722476959, 0.5311055183410645, 0.5798441171646118, 0.6190727949142456, 0.6431118845939636, 0.6647734642028809, 0.6844538450241089, 0.6884163022041321, 0.695813000202179, 0.707040011882782, 0.7144366502761841, 0.7165499925613403, 0.7260599732398987, 0.724210798740387, 0.7313432693481445, 0.7338528633117676, 0.7423061728477478, 0.7404569983482361, 0.7392682433128357, 0.7440232634544373, 0.7531369924545288, 0.7499669790267944, 0.7544577717781067, 0.7493065595626831, 0.7593448758125305, 0.7537974119186401, 0.7642319202423096, 0.7646281719207764], "val_loss": [1.8784406525748116, 1.6615074702671595, 1.249715839113508, 0.9445076329367501, 0.8041328021458217, 0.737600496837071, 0.680144088608878, 0.6441845212663923, 0.6181954996926444, 0.6028812783105033, 0.586203898702349, 0.5726800305502755, 0.5688200678144183, 0.5470115968159267, 0.538036414555141, 0.5390616995947701, 0.5278079850333077, 0.5352604900087629, 0.5109852041516986, 0.5210612160818917, 0.5141575166157314, 0.4997328519821167, 0.4946411507470267, 0.49313739367893766, 0.4881786789212908, 0.4850597211292812, 0.48299280234745573, 0.48375133105686735, 0.47384914330073763, 0.4794732502528599], "val_accuracy": [0.4596666693687439, 0.5413333177566528, 0.5913333296775818, 0.6600000262260437, 0.6943333148956299, 0.6916666626930237, 0.7213333249092102, 0.7300000190734863, 0.7443333268165588, 0.7456666827201843, 0.7526666522026062, 0.7536666393280029, 0.7556666731834412, 0.765666663646698, 0.7716666460037231, 0.7733333110809326, 0.7663333415985107, 0.7720000147819519, 0.7889999747276306, 0.7720000147819519, 0.7789999842643738, 0.7879999876022339, 0.7910000085830688, 0.7793333530426025, 0.8013333082199097, 0.7996666431427002, 0.7960000038146973, 0.793666660785675, 0.800000011920929, 0.7956666946411133]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 8, 1, 4, 5, 1, 2, 1, 2, 1, 5, 2, 9, 3, 2, 6, 0, 5, 0, 2, 8, 2, 0, 8, 2], [0, 1, 2, 2, 2, 0, 1, 2, 2, 0, 0, 0, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [40, 62, 35, 17, 62, 88, 6], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [7, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07489103078842163, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 1, 4, 3, 1, 2, 2, 2, 9, 8, 0, 9, 3, 2, 6, 0, 0, 2, 2, 8, 2, 0, 4, 2], [0, 1, 0, 2, 2, 0, 1, 2, 2, 0, 0, 1, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [40, 62, 10, 17, 62, 88, 6, 14], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [8, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 7, 7, 3, 4, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.subtract(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.multiply(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 3, 4, 5, 1, 0, 5, 2, 1, 5, 2, 9, 3, 2, 1, 0, 5, 0, 2, 3, 2, 0, 8, 2, 9, 2, 1, 0, 4, 6, 9], [3, 1, 2, 1, 2, 2, 2, 2, 2, 0, 0, 2, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 18, 35, 17, 57, 79, 53], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [7, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07489103078842163, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 1, 4, 5, 1, 2, 1, 2, 1, 5, 2, 9, 3, 2, 6, 0, 5, 0, 2, 8, 2, 0, 8, 2], [0, 1, 1, 2, 2, 0, 1, 2, 2, 0, 0, 0, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 18, 35, 17, 95, 79, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07489103078842163, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 8, 0, 4, 5, 1, 2, 3, 9, 1, 5, 2, 9, 3, 2, 4, 0, 5, 0, 2, 2, 8, 0, 8, 2], [2, 1, 2, 1, 2, 0, 1, 2, 2, 0, 0, 2, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [40, 62, 35, 17, 62, 88, 6], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [7, 3], [], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 2, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 8, 6, 2, 2], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.sqrt(tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.add(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), sigma), tf.math.add(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1], [3, 8, 1, 4, 5, 1, 2, 1, 2, 1, 5, 2, 9, 3, 2, 6, 0, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 0, 2, 2, 0, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 35, 27, 57, 79, 53, 52], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [28, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07489103078842163, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 1, 4, 5, 1, 2, 1, 2, 1, 5, 2, 9, 3, 2, 6, 0, 5, 0, 2, 8, 2, 0, 9, 2], [2, 1, 2, 1, 2, 0, 1, 2, 2, 0, 0, 2, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [47, 34, 84, 17, 95, 52, 54], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 4, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 24, 24, 14, 10, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.add(alpha, grad)))))), tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.square(tf.math.add(tf.math.add(alpha, alpha), tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.add(alpha, grad), grad)))))))), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.pow(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [7, 8, 3, 4, 5, 1, 0, 5, 2, 1, 5, 2, 9, 3, 2, 1, 0, 5, 0, 2, 3, 2, 0, 8, 2, 9, 2, 1, 0, 4, 6, 9], [1, 1, 2, 1, 2, 2, 2, 2, 2, 0, 0, 2, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [47, 55, 35, 17, 95, 52, 54], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [7, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 3, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 28, 28, 18, 10, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.multiply(tf.math.add(alpha, alpha), tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.square(grad)), tf.math.add(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.negative(grad))), tf.math.add(alpha, grad)))))))))))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07489103078842163, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1], [3, 8, 1, 4, 5, 1, 2, 3, 2, 4, 5, 2, 9, 3, 2, 6, 0, 5, 2, 2, 8, 2, 0, 4, 2], [0, 1, 2, 2, 2, 0, 1, 2, 2, 2, 0, 0, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [40, 62, 10, 17, 62, 88, 6], [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [0, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [19, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 22, 22, 13, 9, 3, 7, 7, 3, 4, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.add(grad, tf.math.multiply(tf.math.add(tf.math.add(alpha, grad), tf.math.pow(tf.math.square(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), tf.math.add(alpha, grad)))))))))), tf.math.add(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.subtract(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 1, 4, 5, 1, 2, 3, 2, 4, 5, 2, 9, 3, 2, 6, 0, 5, 2, 2, 8, 2, 0, 4, 2], [0, 1, 2, 2, 2, 0, 1, 2, 2, 2, 0, 0, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [40, 62, 10, 17, 62, 88, 6], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 1, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [1, 3], [], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [0, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 7, 7, 3, 4, 0, 1, 1, 0, 1, 0, 4, 4, 0, 2], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [20.198811349048746, 196.89464973688536, 741.4491959837496, 1886.7151788911326, 3893.3195665022167, 6943.553948403034], "accuracy": [0.09496764093637466, 0.10368511080741882, 0.10315678268671036, 0.09589222073554993, 0.09866596013307571, 0.09774138033390045], "val_loss": [51.92130824497768, 272.5474155970982, 804.256574358259, 1803.3247767857142, 3417.774344308036, 5800.806222098215], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1], [3, 8, 1, 4, 5, 1, 2, 3, 2, 4, 5, 2, 9, 3, 2, 6, 0, 5, 2, 2, 8, 2, 0, 4, 2], [0, 1, 2, 2, 2, 0, 1, 2, 2, 2, 0, 0, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [40, 62, 10, 17, 62, 88, 6], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 22, 22, 13, 9, 3, 7, 7, 3, 4, 1, 3, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.add(grad, tf.math.multiply(tf.math.add(tf.math.add(alpha, grad), tf.math.pow(tf.math.square(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), tf.math.add(alpha, grad)))))))))), tf.math.add(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.subtract(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.302633363021883, 2.30216921095394, 2.3034302738946995, 2.3033106776118957, 2.3024495064606048, 2.302363939005638], "accuracy": [0.08558975160121918, 0.0948355570435524, 0.09470347315073013, 0.09034473448991776, 0.09113723784685135, 0.0866464152932167], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 8, 1, 4, 5, 1, 2, 3, 2, 4, 5, 2, 9, 3, 2, 6, 0, 5, 2, 2, 8, 2, 0, 4, 2], [2, 0, 2, 1, 2, 0, 1, 2, 2, 0, 0, 2, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [40, 62, 10, 17, 62, 88, 6], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [5, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.sqrt(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, beta))", "other_info": {"loss": [2.302633363021883, 2.30216921095394, 2.3034302738946995, 2.3033106776118957, 2.3024495064606048, 2.302363939005638], "accuracy": [0.08558975160121918, 0.0948355570435524, 0.09470347315073013, 0.09034473448991776, 0.09113723784685135, 0.0866464152932167], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 8, 3, 4, 5, 1, 0, 5, 2, 1, 5, 2, 9, 3, 2, 1, 0, 5, 0, 2, 3, 2, 0, 8, 2, 9, 2, 1, 0, 4, 6, 9], [0, 1, 0, 2, 2, 0, 1, 2, 2, 0, 0, 0, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 18, 35, 17, 57, 79, 53], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 8, 8, 4, 4, 2, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 4, 2, 2, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(alpha, tf.math.add(alpha, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, beta))", "other_info": {"loss": [2.302633363021883, 2.30216921095394, 2.3034302738946995, 2.3033106776118957, 2.3024495064606048, 2.302363939005638], "accuracy": [0.08558975160121918, 0.0948355570435524, 0.09470347315073013, 0.09034473448991776, 0.09113723784685135, 0.0866464152932167], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1], [3, 8, 1, 4, 5, 1, 2, 3, 2, 4, 5, 2, 9, 3, 2, 6, 0, 5, 2, 2, 8, 2, 0, 4, 2], [2, 1, 2, 1, 2, 2, 2, 2, 2, 0, 0, 2, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [40, 62, 10, 17, 62, 88, 6], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302633363021883, 2.30216921095394, 2.3034302738946995, 2.3033106776118957, 2.3024495064606048, 2.302363939005638], "accuracy": [0.08558975160121918, 0.0948355570435524, 0.09470347315073013, 0.09034473448991776, 0.09113723784685135, 0.0866464152932167], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1], [3, 8, 1, 3, 5, 1, 2, 3, 2, 4, 5, 2, 9, 3, 2, 6, 0, 5, 2, 2, 8, 2, 0, 4, 2], [0, 1, 2, 2, 2, 0, 1, 2, 2, 2, 0, 0, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 35, 17, 57, 79, 53], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 4, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [36, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(sigma, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302633363021883, 2.30216921095394, 2.3034302738946995, 2.3033106776118957, 2.3024495064606048, 2.302363939005638], "accuracy": [0.08558975160121918, 0.0948355570435524, 0.09470347315073013, 0.09034473448991776, 0.09113723784685135, 0.0866464152932167], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}]