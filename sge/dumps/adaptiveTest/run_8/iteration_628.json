[{"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [3, 2, 2, 4, 5, 3, 2, 1, 6, 1, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2, 1, 1, 4, 6, 1, 9, 9, 4], [1, 0, 2, 2, 2, 2, 2, 2, 0, 2, 1, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 93, 35, 44, 70, 79, 53, 52, 44], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [51, 25, 50, 71, 34]], "fitness": -0.8071428537368774, "mapping_values": [1, 51, 51, 33, 18, 9, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.pow(tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.subtract(grad, grad), grad)))), tf.math.square(tf.math.add(tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.divide_no_nan(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.square(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))))), tf.math.sqrt(alpha)))))), tf.math.add(tf.math.negative(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.subtract(tf.math.subtract(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), alpha)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), grad)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2426944314024277, 1.8877949483831404, 1.8275245776848472, 1.99955023804109, 1.4026786544933578, 0.9701575034597782, 0.8389859335328987, 0.769071640560199, 0.6905731368515202, 0.6483850029040448, 0.6283843767735874, 0.602244325498816, 0.5836749481109345, 0.5712689011403362, 0.5747339380825075, 0.5392016657134718, 0.5740001871365094, 0.5168245385438224, 0.5292428569818264, 0.49704880328887585, 0.5115836871818167, 0.48396443190938054, 0.47293377235943157, 0.4817861851849466, 0.4462191847337157, 0.47130639114400036], "accuracy": [0.2603355050086975, 0.34684982895851135, 0.3789459764957428, 0.28556331992149353, 0.5285959839820862, 0.6363756656646729, 0.6882842183113098, 0.7186633348464966, 0.7420420050621033, 0.7568352818489075, 0.7647602558135986, 0.7683265209197998, 0.7792893648147583, 0.785629391670227, 0.7857614755630493, 0.7997622489929199, 0.7860256433486938, 0.8050455451011658, 0.798309326171875, 0.8075551390647888, 0.8088759779930115, 0.8183859586715698, 0.8234050869941711, 0.8164047002792358, 0.8281601071357727, 0.8202351331710815], "val_loss": [1.7711003848484583, 1.7200311933244978, 1.7504128047398158, 1.2030813353402274, 0.8961867945534843, 0.7635331153869629, 0.6768544571740287, 0.530658517565046, 0.505692550114223, 0.5602025304521833, 0.5491069725581578, 0.5524840354919434, 0.48960583550589426, 0.4727031673703875, 0.45581563881465365, 0.4834717001233782, 0.4153458390917097, 0.43108850717544556, 0.4163037879126413, 0.4701972688947405, 0.4246236341340201, 0.42661586829594206, 0.4441926564489092, 0.4092174938746861, 0.4084796394620623, 0.4000337890216282], "val_accuracy": [0.3466666638851166, 0.35866665840148926, 0.22233332693576813, 0.5460000038146973, 0.6039999723434448, 0.6700000166893005, 0.7039999961853027, 0.7680000066757202, 0.7730000019073486, 0.7516666650772095, 0.746999979019165, 0.7436666488647461, 0.7770000100135803, 0.7863333225250244, 0.8016666769981384, 0.7733333110809326, 0.8216666579246521, 0.8116666674613953, 0.8169999718666077, 0.8063333630561829, 0.8270000219345093, 0.8153333067893982, 0.7963333129882812, 0.8166666626930237, 0.8240000009536743, 0.8253333568572998]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 2, 4, 5, 3, 2, 1, 2, 1, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.7940000295639038, "mapping_values": [1, 24, 24, 14, 10, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.subtract(tf.math.add(alpha, grad), grad), grad))))), tf.math.square(tf.math.add(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), alpha)))), tf.math.multiply(tf.math.add(alpha, grad), grad)))))), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3257190945629964, 2.301762422377234, 2.2577122278091317, 2.0412768024447856, 1.5262475972949647, 1.1376755562881673, 0.9603619241380673, 0.867358067520322, 0.851168613415888, 0.8195390512662682, 0.7553720133982598, 0.7140727772090445, 0.6880660357728469, 0.7053513721531062, 0.6874616611682507, 0.69447303588254, 0.6392442718661929, 0.6266455495157546, 0.639738196576229, 0.610772979793264, 0.6037945192267378, 0.5854100428709595, 0.5993119204726123, 0.5767081081670399, 0.5506619426237672, 0.5668664321750146, 0.5434861397384227, 0.5593800402792957, 0.5405657295033822, 0.5275170552873845, 0.5103686726198787, 0.5079665159890995, 0.5036925310629423, 0.49178749157563334, 0.5028390239345053, 0.4906756787913555], "accuracy": [0.2735437750816345, 0.10989301651716232, 0.22401267290115356, 0.29784706234931946, 0.47430986166000366, 0.5909391045570374, 0.6457535624504089, 0.6931713223457336, 0.6819442510604858, 0.695813000202179, 0.7150970697402954, 0.7337207794189453, 0.7442874312400818, 0.7337207794189453, 0.7341170310974121, 0.7376832365989685, 0.754589855670929, 0.7629110813140869, 0.7586844563484192, 0.7656848430633545, 0.7708360552787781, 0.7866860628128052, 0.7724210619926453, 0.780610203742981, 0.7906485199928284, 0.7913089394569397, 0.7928939461708069, 0.7905164361000061, 0.7955356240272522, 0.7971205711364746, 0.8117818236351013, 0.8119139075279236, 0.8109893202781677, 0.8148196935653687, 0.8146876096725464, 0.8104609847068787], "val_loss": [1.9754022189549036, 1.9672438757760184, 1.591130222593035, 1.2751619134630476, 1.1286074774605888, 0.857937148639134, 0.6633568831852504, 0.6674143586839948, 0.6643897465297154, 0.6219149487359183, 0.5571125234876361, 0.5518028736114502, 0.6016102348055158, 0.5638245855058942, 0.537867614201137, 0.5147225175585065, 0.4884399345942906, 0.5298233713422503, 0.48132703985486713, 0.4994691950934274, 0.46680520262037006, 0.4650048017501831, 0.4887692758015224, 0.45164497409548077, 0.45476371901375906, 0.441571797643389, 0.4667126451219831, 0.45431716101510183, 0.47022063391549246, 0.41103274481637136, 0.40195952142987934, 0.3996451922825405, 0.44115530593054636, 0.39185820307050434, 0.40338683128356934, 0.41665578739983694], "val_accuracy": [0.09966666996479034, 0.1393333375453949, 0.47699999809265137, 0.48100000619888306, 0.5396666526794434, 0.6133333444595337, 0.7016666531562805, 0.6853333115577698, 0.7020000219345093, 0.7196666598320007, 0.7416666746139526, 0.7523333430290222, 0.7093333601951599, 0.7256666421890259, 0.7606666684150696, 0.7553333044052124, 0.7793333530426025, 0.746999979019165, 0.7846666574478149, 0.7776666879653931, 0.7976666688919067, 0.7833333611488342, 0.7839999794960022, 0.7990000247955322, 0.8043333292007446, 0.8050000071525574, 0.793666660785675, 0.7900000214576721, 0.7820000052452087, 0.8196666836738586, 0.8326666951179504, 0.8253333568572998, 0.8066666722297668, 0.8270000219345093, 0.8273333311080933, 0.8230000138282776]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [3, 6, 8, 4, 1, 1, 2, 4, 0, 6, 4, 5, 9, 3, 9, 6, 9, 5, 0, 2, 8, 2, 0, 0, 2, 4], [0, 0, 2, 2, 2, 2, 2, 2, 0, 2, 1, 2, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [51, 91, 35, 44, 57, 79, 53, 52, 77], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.7940000295639038, "mapping_values": [1, 30, 30, 20, 10, 6, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.pow(tf.math.add(alpha, tf.math.subtract(tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.square(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32))), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))), tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), grad))), tf.math.divide_no_nan(tf.math.add(alpha, grad), grad)), tf.math.add(alpha, grad)), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), grad))), tf.math.square(grad)), tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3257190945629964, 2.301762422377234, 2.2577122278091317, 2.0412768024447856, 1.5262475972949647, 1.1376755562881673, 0.9603619241380673, 0.867358067520322, 0.851168613415888, 0.8195390512662682, 0.7553720133982598, 0.7140727772090445, 0.6880660357728469, 0.7053513721531062, 0.6874616611682507, 0.69447303588254, 0.6392442718661929, 0.6266455495157546, 0.639738196576229, 0.610772979793264, 0.6037945192267378, 0.5854100428709595, 0.5993119204726123, 0.5767081081670399, 0.5506619426237672, 0.5668664321750146, 0.5434861397384227, 0.5593800402792957, 0.5405657295033822, 0.5275170552873845, 0.5103686726198787, 0.5079665159890995, 0.5036925310629423, 0.49178749157563334, 0.5028390239345053, 0.4906756787913555], "accuracy": [0.2735437750816345, 0.10989301651716232, 0.22401267290115356, 0.29784706234931946, 0.47430986166000366, 0.5909391045570374, 0.6457535624504089, 0.6931713223457336, 0.6819442510604858, 0.695813000202179, 0.7150970697402954, 0.7337207794189453, 0.7442874312400818, 0.7337207794189453, 0.7341170310974121, 0.7376832365989685, 0.754589855670929, 0.7629110813140869, 0.7586844563484192, 0.7656848430633545, 0.7708360552787781, 0.7866860628128052, 0.7724210619926453, 0.780610203742981, 0.7906485199928284, 0.7913089394569397, 0.7928939461708069, 0.7905164361000061, 0.7955356240272522, 0.7971205711364746, 0.8117818236351013, 0.8119139075279236, 0.8109893202781677, 0.8148196935653687, 0.8146876096725464, 0.8104609847068787], "val_loss": [1.9754022189549036, 1.9672438757760184, 1.591130222593035, 1.2751619134630476, 1.1286074774605888, 0.857937148639134, 0.6633568831852504, 0.6674143586839948, 0.6643897465297154, 0.6219149487359183, 0.5571125234876361, 0.5518028736114502, 0.6016102348055158, 0.5638245855058942, 0.537867614201137, 0.5147225175585065, 0.4884399345942906, 0.5298233713422503, 0.48132703985486713, 0.4994691950934274, 0.46680520262037006, 0.4650048017501831, 0.4887692758015224, 0.45164497409548077, 0.45476371901375906, 0.441571797643389, 0.4667126451219831, 0.45431716101510183, 0.47022063391549246, 0.41103274481637136, 0.40195952142987934, 0.3996451922825405, 0.44115530593054636, 0.39185820307050434, 0.40338683128356934, 0.41665578739983694], "val_accuracy": [0.09966666996479034, 0.1393333375453949, 0.47699999809265137, 0.48100000619888306, 0.5396666526794434, 0.6133333444595337, 0.7016666531562805, 0.6853333115577698, 0.7020000219345093, 0.7196666598320007, 0.7416666746139526, 0.7523333430290222, 0.7093333601951599, 0.7256666421890259, 0.7606666684150696, 0.7553333044052124, 0.7793333530426025, 0.746999979019165, 0.7846666574478149, 0.7776666879653931, 0.7976666688919067, 0.7833333611488342, 0.7839999794960022, 0.7990000247955322, 0.8043333292007446, 0.8050000071525574, 0.793666660785675, 0.7900000214576721, 0.7820000052452087, 0.8196666836738586, 0.8326666951179504, 0.8253333568572998, 0.8066666722297668, 0.8270000219345093, 0.8273333311080933, 0.8230000138282776]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1], [3, 9, 8, 9, 5, 2, 2, 1, 0, 1, 4, 8, 4, 3, 4, 2, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 2, 2, 0, 2, 1, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [74, 38, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [2, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [2, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.7940000295639038, "mapping_values": [1, 3, 3, 2, 1, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3257190945629964, 2.301762422377234, 2.2577122278091317, 2.0412768024447856, 1.5262475972949647, 1.1376755562881673, 0.9603619241380673, 0.867358067520322, 0.851168613415888, 0.8195390512662682, 0.7553720133982598, 0.7140727772090445, 0.6880660357728469, 0.7053513721531062, 0.6874616611682507, 0.69447303588254, 0.6392442718661929, 0.6266455495157546, 0.639738196576229, 0.610772979793264, 0.6037945192267378, 0.5854100428709595, 0.5993119204726123, 0.5767081081670399, 0.5506619426237672, 0.5668664321750146, 0.5434861397384227, 0.5593800402792957, 0.5405657295033822, 0.5275170552873845, 0.5103686726198787, 0.5079665159890995, 0.5036925310629423, 0.49178749157563334, 0.5028390239345053, 0.4906756787913555], "accuracy": [0.2735437750816345, 0.10989301651716232, 0.22401267290115356, 0.29784706234931946, 0.47430986166000366, 0.5909391045570374, 0.6457535624504089, 0.6931713223457336, 0.6819442510604858, 0.695813000202179, 0.7150970697402954, 0.7337207794189453, 0.7442874312400818, 0.7337207794189453, 0.7341170310974121, 0.7376832365989685, 0.754589855670929, 0.7629110813140869, 0.7586844563484192, 0.7656848430633545, 0.7708360552787781, 0.7866860628128052, 0.7724210619926453, 0.780610203742981, 0.7906485199928284, 0.7913089394569397, 0.7928939461708069, 0.7905164361000061, 0.7955356240272522, 0.7971205711364746, 0.8117818236351013, 0.8119139075279236, 0.8109893202781677, 0.8148196935653687, 0.8146876096725464, 0.8104609847068787], "val_loss": [1.9754022189549036, 1.9672438757760184, 1.591130222593035, 1.2751619134630476, 1.1286074774605888, 0.857937148639134, 0.6633568831852504, 0.6674143586839948, 0.6643897465297154, 0.6219149487359183, 0.5571125234876361, 0.5518028736114502, 0.6016102348055158, 0.5638245855058942, 0.537867614201137, 0.5147225175585065, 0.4884399345942906, 0.5298233713422503, 0.48132703985486713, 0.4994691950934274, 0.46680520262037006, 0.4650048017501831, 0.4887692758015224, 0.45164497409548077, 0.45476371901375906, 0.441571797643389, 0.4667126451219831, 0.45431716101510183, 0.47022063391549246, 0.41103274481637136, 0.40195952142987934, 0.3996451922825405, 0.44115530593054636, 0.39185820307050434, 0.40338683128356934, 0.41665578739983694], "val_accuracy": [0.09966666996479034, 0.1393333375453949, 0.47699999809265137, 0.48100000619888306, 0.5396666526794434, 0.6133333444595337, 0.7016666531562805, 0.6853333115577698, 0.7020000219345093, 0.7196666598320007, 0.7416666746139526, 0.7523333430290222, 0.7093333601951599, 0.7256666421890259, 0.7606666684150696, 0.7553333044052124, 0.7793333530426025, 0.746999979019165, 0.7846666574478149, 0.7776666879653931, 0.7976666688919067, 0.7833333611488342, 0.7839999794960022, 0.7990000247955322, 0.8043333292007446, 0.8050000071525574, 0.793666660785675, 0.7900000214576721, 0.7820000052452087, 0.8196666836738586, 0.8326666951179504, 0.8253333568572998, 0.8066666722297668, 0.8270000219345093, 0.8273333311080933, 0.8230000138282776]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [9, 4, 8, 4, 4, 1, 2, 4, 0, 6, 0, 5, 9, 3, 1, 6, 2, 5, 0, 1, 8, 2, 0, 9, 2, 2], [0, 0, 2, 2, 2, 2, 1, 2, 1, 2, 1, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 93, 56, 44, 40, 82, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [4, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.7940000295639038, "mapping_values": [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3257190945629964, 2.301762422377234, 2.2577122278091317, 2.0412768024447856, 1.5262475972949647, 1.1376755562881673, 0.9603619241380673, 0.867358067520322, 0.851168613415888, 0.8195390512662682, 0.7553720133982598, 0.7140727772090445, 0.6880660357728469, 0.7053513721531062, 0.6874616611682507, 0.69447303588254, 0.6392442718661929, 0.6266455495157546, 0.639738196576229, 0.610772979793264, 0.6037945192267378, 0.5854100428709595, 0.5993119204726123, 0.5767081081670399, 0.5506619426237672, 0.5668664321750146, 0.5434861397384227, 0.5593800402792957, 0.5405657295033822, 0.5275170552873845, 0.5103686726198787, 0.5079665159890995, 0.5036925310629423, 0.49178749157563334, 0.5028390239345053, 0.4906756787913555], "accuracy": [0.2735437750816345, 0.10989301651716232, 0.22401267290115356, 0.29784706234931946, 0.47430986166000366, 0.5909391045570374, 0.6457535624504089, 0.6931713223457336, 0.6819442510604858, 0.695813000202179, 0.7150970697402954, 0.7337207794189453, 0.7442874312400818, 0.7337207794189453, 0.7341170310974121, 0.7376832365989685, 0.754589855670929, 0.7629110813140869, 0.7586844563484192, 0.7656848430633545, 0.7708360552787781, 0.7866860628128052, 0.7724210619926453, 0.780610203742981, 0.7906485199928284, 0.7913089394569397, 0.7928939461708069, 0.7905164361000061, 0.7955356240272522, 0.7971205711364746, 0.8117818236351013, 0.8119139075279236, 0.8109893202781677, 0.8148196935653687, 0.8146876096725464, 0.8104609847068787], "val_loss": [1.9754022189549036, 1.9672438757760184, 1.591130222593035, 1.2751619134630476, 1.1286074774605888, 0.857937148639134, 0.6633568831852504, 0.6674143586839948, 0.6643897465297154, 0.6219149487359183, 0.5571125234876361, 0.5518028736114502, 0.6016102348055158, 0.5638245855058942, 0.537867614201137, 0.5147225175585065, 0.4884399345942906, 0.5298233713422503, 0.48132703985486713, 0.4994691950934274, 0.46680520262037006, 0.4650048017501831, 0.4887692758015224, 0.45164497409548077, 0.45476371901375906, 0.441571797643389, 0.4667126451219831, 0.45431716101510183, 0.47022063391549246, 0.41103274481637136, 0.40195952142987934, 0.3996451922825405, 0.44115530593054636, 0.39185820307050434, 0.40338683128356934, 0.41665578739983694], "val_accuracy": [0.09966666996479034, 0.1393333375453949, 0.47699999809265137, 0.48100000619888306, 0.5396666526794434, 0.6133333444595337, 0.7016666531562805, 0.6853333115577698, 0.7020000219345093, 0.7196666598320007, 0.7416666746139526, 0.7523333430290222, 0.7093333601951599, 0.7256666421890259, 0.7606666684150696, 0.7553333044052124, 0.7793333530426025, 0.746999979019165, 0.7846666574478149, 0.7776666879653931, 0.7976666688919067, 0.7833333611488342, 0.7839999794960022, 0.7990000247955322, 0.8043333292007446, 0.8050000071525574, 0.793666660785675, 0.7900000214576721, 0.7820000052452087, 0.8196666836738586, 0.8326666951179504, 0.8253333568572998, 0.8066666722297668, 0.8270000219345093, 0.8273333311080933, 0.8230000138282776]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1], [6, 8, 1, 4, 5, 3, 3, 8, 0, 4, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 8, 4], [0, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [51, 91, 67, 44, 57, 79, 71, 52, 77], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.7940000295639038, "mapping_values": [1, 20, 20, 12, 8, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(grad)), tf.math.negative(grad))), tf.math.pow(grad, tf.math.square(tf.math.add(grad, tf.math.add(alpha, alpha)))))))))), tf.math.add(alpha, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3257190945629964, 2.301762422377234, 2.2577122278091317, 2.0412768024447856, 1.5262475972949647, 1.1376755562881673, 0.9603619241380673, 0.867358067520322, 0.851168613415888, 0.8195390512662682, 0.7553720133982598, 0.7140727772090445, 0.6880660357728469, 0.7053513721531062, 0.6874616611682507, 0.69447303588254, 0.6392442718661929, 0.6266455495157546, 0.639738196576229, 0.610772979793264, 0.6037945192267378, 0.5854100428709595, 0.5993119204726123, 0.5767081081670399, 0.5506619426237672, 0.5668664321750146, 0.5434861397384227, 0.5593800402792957, 0.5405657295033822, 0.5275170552873845, 0.5103686726198787, 0.5079665159890995, 0.5036925310629423, 0.49178749157563334, 0.5028390239345053, 0.4906756787913555], "accuracy": [0.2735437750816345, 0.10989301651716232, 0.22401267290115356, 0.29784706234931946, 0.47430986166000366, 0.5909391045570374, 0.6457535624504089, 0.6931713223457336, 0.6819442510604858, 0.695813000202179, 0.7150970697402954, 0.7337207794189453, 0.7442874312400818, 0.7337207794189453, 0.7341170310974121, 0.7376832365989685, 0.754589855670929, 0.7629110813140869, 0.7586844563484192, 0.7656848430633545, 0.7708360552787781, 0.7866860628128052, 0.7724210619926453, 0.780610203742981, 0.7906485199928284, 0.7913089394569397, 0.7928939461708069, 0.7905164361000061, 0.7955356240272522, 0.7971205711364746, 0.8117818236351013, 0.8119139075279236, 0.8109893202781677, 0.8148196935653687, 0.8146876096725464, 0.8104609847068787], "val_loss": [1.9754022189549036, 1.9672438757760184, 1.591130222593035, 1.2751619134630476, 1.1286074774605888, 0.857937148639134, 0.6633568831852504, 0.6674143586839948, 0.6643897465297154, 0.6219149487359183, 0.5571125234876361, 0.5518028736114502, 0.6016102348055158, 0.5638245855058942, 0.537867614201137, 0.5147225175585065, 0.4884399345942906, 0.5298233713422503, 0.48132703985486713, 0.4994691950934274, 0.46680520262037006, 0.4650048017501831, 0.4887692758015224, 0.45164497409548077, 0.45476371901375906, 0.441571797643389, 0.4667126451219831, 0.45431716101510183, 0.47022063391549246, 0.41103274481637136, 0.40195952142987934, 0.3996451922825405, 0.44115530593054636, 0.39185820307050434, 0.40338683128356934, 0.41665578739983694], "val_accuracy": [0.09966666996479034, 0.1393333375453949, 0.47699999809265137, 0.48100000619888306, 0.5396666526794434, 0.6133333444595337, 0.7016666531562805, 0.6853333115577698, 0.7020000219345093, 0.7196666598320007, 0.7416666746139526, 0.7523333430290222, 0.7093333601951599, 0.7256666421890259, 0.7606666684150696, 0.7553333044052124, 0.7793333530426025, 0.746999979019165, 0.7846666574478149, 0.7776666879653931, 0.7976666688919067, 0.7833333611488342, 0.7839999794960022, 0.7990000247955322, 0.8043333292007446, 0.8050000071525574, 0.793666660785675, 0.7900000214576721, 0.7820000052452087, 0.8196666836738586, 0.8326666951179504, 0.8253333568572998, 0.8066666722297668, 0.8270000219345093, 0.8273333311080933, 0.8230000138282776]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1], [3, 8, 1, 4, 5, 3, 0, 1, 8, 1, 5, 2, 3, 3, 3, 9, 9, 2, 0, 2, 8, 2, 9, 9, 2], [2, 0, 2, 2, 2, 2, 2, 2, 1, 2, 1, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 93, 35, 44, 70, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [4, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.7940000295639038, "mapping_values": [1, 29, 29, 19, 10, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.square(tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, grad)), tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))))), tf.math.add(grad, tf.math.multiply(tf.math.multiply(tf.math.multiply(grad, grad), grad), tf.math.add(alpha, grad)))))), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), grad), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.negative(tf.math.add(alpha, alpha)), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3257190945629964, 2.301762422377234, 2.2577122278091317, 2.0412768024447856, 1.5262475972949647, 1.1376755562881673, 0.9603619241380673, 0.867358067520322, 0.851168613415888, 0.8195390512662682, 0.7553720133982598, 0.7140727772090445, 0.6880660357728469, 0.7053513721531062, 0.6874616611682507, 0.69447303588254, 0.6392442718661929, 0.6266455495157546, 0.639738196576229, 0.610772979793264, 0.6037945192267378, 0.5854100428709595, 0.5993119204726123, 0.5767081081670399, 0.5506619426237672, 0.5668664321750146, 0.5434861397384227, 0.5593800402792957, 0.5405657295033822, 0.5275170552873845, 0.5103686726198787, 0.5079665159890995, 0.5036925310629423, 0.49178749157563334, 0.5028390239345053, 0.4906756787913555], "accuracy": [0.2735437750816345, 0.10989301651716232, 0.22401267290115356, 0.29784706234931946, 0.47430986166000366, 0.5909391045570374, 0.6457535624504089, 0.6931713223457336, 0.6819442510604858, 0.695813000202179, 0.7150970697402954, 0.7337207794189453, 0.7442874312400818, 0.7337207794189453, 0.7341170310974121, 0.7376832365989685, 0.754589855670929, 0.7629110813140869, 0.7586844563484192, 0.7656848430633545, 0.7708360552787781, 0.7866860628128052, 0.7724210619926453, 0.780610203742981, 0.7906485199928284, 0.7913089394569397, 0.7928939461708069, 0.7905164361000061, 0.7955356240272522, 0.7971205711364746, 0.8117818236351013, 0.8119139075279236, 0.8109893202781677, 0.8148196935653687, 0.8146876096725464, 0.8104609847068787], "val_loss": [1.9754022189549036, 1.9672438757760184, 1.591130222593035, 1.2751619134630476, 1.1286074774605888, 0.857937148639134, 0.6633568831852504, 0.6674143586839948, 0.6643897465297154, 0.6219149487359183, 0.5571125234876361, 0.5518028736114502, 0.6016102348055158, 0.5638245855058942, 0.537867614201137, 0.5147225175585065, 0.4884399345942906, 0.5298233713422503, 0.48132703985486713, 0.4994691950934274, 0.46680520262037006, 0.4650048017501831, 0.4887692758015224, 0.45164497409548077, 0.45476371901375906, 0.441571797643389, 0.4667126451219831, 0.45431716101510183, 0.47022063391549246, 0.41103274481637136, 0.40195952142987934, 0.3996451922825405, 0.44115530593054636, 0.39185820307050434, 0.40338683128356934, 0.41665578739983694], "val_accuracy": [0.09966666996479034, 0.1393333375453949, 0.47699999809265137, 0.48100000619888306, 0.5396666526794434, 0.6133333444595337, 0.7016666531562805, 0.6853333115577698, 0.7020000219345093, 0.7196666598320007, 0.7416666746139526, 0.7523333430290222, 0.7093333601951599, 0.7256666421890259, 0.7606666684150696, 0.7553333044052124, 0.7793333530426025, 0.746999979019165, 0.7846666574478149, 0.7776666879653931, 0.7976666688919067, 0.7833333611488342, 0.7839999794960022, 0.7990000247955322, 0.8043333292007446, 0.8050000071525574, 0.793666660785675, 0.7900000214576721, 0.7820000052452087, 0.8196666836738586, 0.8326666951179504, 0.8253333568572998, 0.8066666722297668, 0.8270000219345093, 0.8273333311080933, 0.8230000138282776]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1], [3, 2, 2, 4, 5, 3, 3, 1, 2, 1, 5, 2, 2, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 3, 2, 5, 6, 5, 7, 8, 8, 6, 9, 7, 9, 0], [0, 0, 2, 2, 2, 1, 1, 2, 2, 0, 2, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [51, 1, 35, 44, 57, 79, 53, 16, 77], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [76, 25, 50, 71, 34]], "fitness": -0.2737142741680145, "mapping_values": [1, 56, 56, 36, 20, 8, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 59, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.pow(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.subtract(tf.math.square(grad), tf.math.add(tf.math.add(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)), alpha), tf.math.add(alpha, grad))), tf.math.add(tf.math.divide_no_nan(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.square(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))))), tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.multiply(tf.math.add(grad, tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, alpha))), tf.math.divide_no_nan(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, alpha)))))))))))), tf.math.add(alpha, alpha))), grad))))), grad)), tf.math.add(tf.math.add(alpha, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.855992207957328, 2.235500004785629, 2.3050244728398757, 2.304310720578759, 2.303402554294484, 2.3032717296649214], "accuracy": [0.18319904804229736, 0.23457930982112885, 0.09945846349000931, 0.10051512718200684, 0.10500594228506088, 0.09602430462837219], "val_loss": [1.8716000829424178, 1.9786686897277832, 1.9743247713361467, 1.973658629826137, 1.973675114767892, 1.9737110819135393], "val_accuracy": [0.2523333430290222, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09733333438634872, 0.09700000286102295]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [6, 8, 1, 4, 5, 3, 2, 8, 0, 4, 4, 2, 9, 3, 2, 6, 9, 0, 0, 2, 8, 2, 0, 9, 2, 4], [0, 0, 2, 2, 2, 2, 2, 2, 0, 2, 1, 0, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [45, 42, 35, 44, 57, 57, 53, 52], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [4, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 9, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 32, 32, 21, 11, 5, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 2, 0, 1], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), grad), tf.math.add(alpha, grad))))))))), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), grad))), tf.math.negative(tf.math.negative(grad))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))))), tf.math.sqrt(alpha))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [67437230.84955841, 1278789477.541144, 5892895815.548804, 16284970512.974243, 34676562356.86699, 64115643294.753136], "accuracy": [0.09840179979801178, 0.1006472036242485, 0.10196803510189056, 0.09906221181154251, 0.09972262382507324, 0.09959053993225098], "val_loss": [252293065.14285713, 2016736256.0, 6804672073.142858, 16127298998.857143, 31496456484.57143, 54422684818.28571], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [3, 6, 8, 4, 5, 1, 2, 4, 0, 6, 4, 5, 3, 3, 1, 6, 9, 5, 0, 2, 8, 2, 8, 9, 0, 2], [0, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 93, 35, 44, 70, 79, 53, 52, 80, 51], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [1, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 34, 34, 21, 13, 7, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.square(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), grad)))), tf.math.multiply(tf.math.add(alpha, tf.math.multiply(grad, grad)), tf.math.add(alpha, grad)))), alpha)), tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))), tf.math.subtract(grad, tf.math.divide_no_nan(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))))))))))), tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 8, 0, 4, 3, 2, 1, 0, 1, 4, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [1, 0, 2, 2, 2, 2, 2, 2, 0, 2, 1, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [4, 3, 9, 9, 2, 9], [1, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [67, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 1, 2, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(alpha, beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 8, 0, 4, 3, 2, 1, 0, 1, 4, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [51, 91, 35, 44, 57, 79, 53, 52, 77], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [5, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [1, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.sqrt(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))), tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [142572467.02476645, 2239185904.175406, 9835618968.903448, 26577446583.335358, 55913300846.60309, 102570540421.93422], "accuracy": [0.09840179979801178, 0.10051512718200684, 0.10196803510189056, 0.09906221181154251, 0.09972262382507324, 0.09959053993225098], "val_loss": [390647195.4285714, 3123023433.142857, 10537732388.571428, 24975415003.42857, 48777425481.14286, 84282937929.14285], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1], [6, 0, 1, 4, 5, 5, 2, 4, 0, 4, 4, 2, 9, 3, 2, 6, 9, 5, 6, 2, 8, 2, 0, 9, 2, 4], [0, 0, 2, 2, 2, 1, 2, 2, 2, 2, 1, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [86, 91, 74, 44, 27, 79, 53, 52, 77], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [4, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 1, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 21, 21, 13, 8, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.pow(grad, grad)), tf.math.negative(tf.math.add(alpha, tf.math.pow(grad, tf.math.pow(tf.math.add(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha)), tf.math.add(alpha, grad)))))))))))))), grad), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.subtract(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0746268630027771, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1], [3, 8, 8, 0, 4, 3, 2, 3, 0, 1, 4, 2, 9, 4, 2, 8, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 2, 1, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 77, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 21, 21, 13, 8, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 4, 0, 2], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.sqrt(tf.math.sqrt(tf.math.negative(tf.math.pow(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.negative(tf.math.subtract(tf.math.add(alpha, tf.math.pow(grad, tf.math.add(grad, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)))))))), tf.math.add(alpha, grad)))))), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [48.979615222445695, 575.6842021183835, 2334.929040532181, 6169.58624423169, 12850.555564097378, 23451.791386592344], "accuracy": [0.09906221181154251, 0.1018359512090683, 0.10210011899471283, 0.09906221181154251, 0.09972262382507324, 0.09972262382507324], "val_loss": [137.32084001813615, 833.6907610212054, 2619.855538504464, 6024.727818080357, 11577.424386160714, 19803.276227678572], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 8, 0, 4, 3, 2, 1, 0, 1, 4, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [51, 91, 35, 44, 57, 79, 53, 52, 77], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [9, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 4, 2, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))), tf.math.negative(tf.math.add(alpha, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.303365234339226, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1], [6, 8, 1, 4, 0, 3, 2, 8, 0, 4, 4, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 4, 0, 5, 2, 4, 5], [0, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [51, 91, 35, 44, 57, 79, 43, 52, 77], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [1, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [43, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 41, 41, 27, 14, 9, 13, 13, 8, 5, 3, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.negative(tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32))))), tf.math.pow(tf.math.pow(tf.math.add(grad, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), tf.math.add(alpha, grad))), tf.math.add(alpha, alpha)))), tf.math.divide_no_nan(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad))))))), tf.math.pow(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.square(tf.math.add(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)))))))))), tf.math.square(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 6, 5, 6, 5, 3, 2, 9, 3, 6, 4, 5, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [1, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 93, 35, 44, 70, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [4, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 6, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 22, 22, 14, 8, 3, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.square(alpha), tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))))), tf.math.multiply(tf.math.divide_no_nan(tf.math.pow(grad, tf.math.square(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))), tf.math.multiply(grad, tf.math.add(alpha, grad))), grad))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3041166261580517, 2.301991235972112, 2.301300320154829, 2.302852870734329, 2.3016376470798328, 2.3024882430712843], "accuracy": [0.08651433140039444, 0.09166556596755981, 0.09311848133802414, 0.09153348207473755, 0.08717474341392517, 0.09166556596755981], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 2, 4, 5, 3, 2, 1, 2, 1, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [13, 91, 35, 44, 57, 79, 53, 52], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [4, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 0, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [5, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 1, 13, 13, 8, 5, 3, 3, 2, 1, 1, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3041166261580517, 2.301991235972112, 2.301300320154829, 2.302852870734329, 2.3016376470798328, 2.3024882430712843], "accuracy": [0.08651433140039444, 0.09166556596755981, 0.09311848133802414, 0.09153348207473755, 0.08717474341392517, 0.09166556596755981], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 8, 4, 5, 2, 2, 1, 0, 1, 4, 8, 4, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 1, 2, 2, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [48, 38, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 6, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 5, 5, 3, 2, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 8, 6, 2, 2], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, alpha), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.divide_no_nan(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), sigma), tf.math.add(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), beta)))", "other_info": {"loss": [2.3041166261580517, 2.301991235972112, 2.301300320154829, 2.302852870734329, 2.3016376470798328, 2.3024882430712843], "accuracy": [0.08651433140039444, 0.09166556596755981, 0.09311848133802414, 0.09153348207473755, 0.08717474341392517, 0.09166556596755981], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1], [3, 6, 1, 4, 3, 2, 2, 1, 0, 5, 1, 1, 9, 1, 2, 6, 9, 2, 0, 3, 8, 2, 0, 9, 2], [0, 2, 1, 2, 0, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 84, 35, 44, 57, 57, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 3, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.03857142850756645, "mapping_values": [1, 23, 23, 13, 10, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(grad, tf.math.add(alpha, alpha)))), tf.math.pow(tf.math.multiply(grad, tf.math.add(alpha, tf.math.add(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.negative(grad)), tf.math.square(alpha)), tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))))))), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.multiply(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.304310445158221, 2.302730091873681, 2.3025020954710005, 2.3047233658570025, 2.304147913691831, 2.3058595234739028], "accuracy": [0.08651433140039444, 0.08902391046285629, 0.08915598690509796, 0.0878351628780365, 0.08294808864593506, 0.08466517180204391], "val_loss": [1.9709953580583846, 1.9714375223432268, 1.9718641553606306, 1.97244017464774, 1.9729950087411063, 1.9736003875732422], "val_accuracy": [0.03799999877810478, 0.035999998450279236, 0.03233333304524422, 0.029999999329447746, 0.029999999329447746, 0.028999999165534973]}}]