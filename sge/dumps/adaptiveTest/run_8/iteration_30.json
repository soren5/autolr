[{"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 6, 6, 1, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 3, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 3, 6, 9], [3, 3, 3, 1], [45, 38]], "fitness": -0.8339999914169312, "mapping_values": [1, 3, 3, 1, 2, 1, 17, 17, 9, 8, 2, 1, 1, 0, 1, 0, 8, 5, 3, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, alpha)), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(sigma, sigma), sigma), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.218236012969586, 1.777987879973676, 1.2957354249136717, 1.1243705285648864, 0.9857830190309019, 0.8905568115148468, 0.8446202645480058, 0.7458109930206867, 0.7266170275823834, 0.690756153901334, 0.7159829222452151, 0.6797786045304347, 0.643631049489553, 0.6406786553438676, 0.6243147449943101, 0.612417522588064, 0.6025367460041754, 0.5880877708384169, 0.5717264086878011, 0.5424259462849087, 0.5653957552787666, 0.5321618184405956, 0.5204863969313864, 0.5202650848380989, 0.4976871532337966, 0.5021863779521275, 0.4793247496998305, 0.5002727350814231, 0.4827330367770791, 0.47456433869560777, 0.44746344469919686, 0.4706913748626397, 0.44883582778122477, 0.43293987534789674, 0.4722800441366759, 0.44157720821770724, 0.42466419515608483, 0.4428145292137183, 0.41326385457376213, 0.41719934014029525, 0.41593901619950874, 0.42125974939389393, 0.41354358373395583, 0.38855397326520186], "accuracy": [0.3047153651714325, 0.45872408151626587, 0.5526350736618042, 0.6052040457725525, 0.6540747880935669, 0.6774534583091736, 0.6814159154891968, 0.7170783281326294, 0.7244749665260315, 0.7360982894897461, 0.7302865982055664, 0.7448157668113708, 0.759080708026886, 0.7549861073493958, 0.7640998363494873, 0.7766477465629578, 0.7696473598480225, 0.776251494884491, 0.7812706232070923, 0.7950072884559631, 0.7893276810646057, 0.8024039268493652, 0.8054417967796326, 0.8086118102073669, 0.8142913579940796, 0.8100647330284119, 0.8208954930305481, 0.8088759779930115, 0.8198388814926147, 0.8216879963874817, 0.8359529972076416, 0.8251221776008606, 0.8372738361358643, 0.8407079577445984, 0.8278959393501282, 0.83119797706604, 0.841500461101532, 0.8367455005645752, 0.8453308939933777, 0.8499537706375122, 0.8426892161369324, 0.8413683772087097, 0.8442742228507996, 0.8544445633888245], "val_loss": [1.7213611602783203, 1.1903694357190813, 0.9678070885794503, 0.9170699289866856, 0.728651796068464, 0.6324798890522548, 0.5798172099249703, 0.5560502495084491, 0.5746366126196725, 0.6267942701067243, 0.5417554719107491, 0.5058508770806449, 0.48080519267490934, 0.4758201837539673, 0.5653418302536011, 0.4925844499043056, 0.5158205713544574, 0.4479812724249704, 0.4383868660245623, 0.4670006717954363, 0.4396016427448818, 0.4383158343178885, 0.4172380907194955, 0.42913080964769634, 0.4103851744106838, 0.4005975382668631, 0.4163802606718881, 0.3784208127430507, 0.4120404379708426, 0.3868658457483564, 0.3908673184258597, 0.392941951751709, 0.3696885960442679, 0.4573253222874233, 0.4077279141971043, 0.37426040853772846, 0.3763137034007481, 0.3531815069062369, 0.3521889192717416, 0.3735973409243992, 0.3873848574502127, 0.38636209283556255, 0.3536942090306963, 0.380316538470132], "val_accuracy": [0.5540000200271606, 0.5553333163261414, 0.6420000195503235, 0.6696666479110718, 0.659333348274231, 0.7003333568572998, 0.7409999966621399, 0.7513333559036255, 0.7303333282470703, 0.7226666808128357, 0.7526666522026062, 0.7746666669845581, 0.784333348274231, 0.7860000133514404, 0.7300000190734863, 0.7983333468437195, 0.7636666893959045, 0.8063333630561829, 0.8069999814033508, 0.7850000262260437, 0.8043333292007446, 0.8033333420753479, 0.8233333230018616, 0.8023333549499512, 0.8299999833106995, 0.8396666646003723, 0.8180000185966492, 0.8423333168029785, 0.8186666369438171, 0.8399999737739563, 0.8379999995231628, 0.8323333263397217, 0.8486666679382324, 0.8009999990463257, 0.8146666884422302, 0.8370000123977661, 0.8373333215713501, 0.8513333201408386, 0.8543333411216736, 0.8523333072662354, 0.8236666917800903, 0.8323333263397217, 0.8519999980926514, 0.8336666822433472]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [2, 6, 4, 9], [0, 3, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 3, 6, 6, 8, 2, 4, 4, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 2, 0, 3, 3, 2, 3, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0], [0, 3, 3, 6, 9], [3, 3, 3, 1], [12, 38]], "fitness": -0.46399998664855957, "mapping_values": [1, 3, 3, 1, 2, 1, 18, 18, 9, 9, 1, 1, 1, 0, 1, 0, 8, 5, 3, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.divide_no_nan(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, grad)), tf.math.add(beta, beta)))), tf.math.add(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), beta))))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(sigma, tf.math.divide_no_nan(sigma, sigma)), tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302400696310684, 2.300513663548268, 2.2991705173199692, 2.2984973548535956, 2.297668824311119, 2.2968241108753396, 2.295295350980828, 2.2947287241134977, 2.292470371277577, 2.29356772930174, 2.2906412465177777, 2.2888227433670845, 2.2904999052387076, 2.2887151451977474, 2.2885663747755984, 2.285533836189908, 2.28443023954101, 2.2845969669035697, 2.2828080060223486, 2.281739330625553, 2.2799812662225154, 2.2793163739931095, 2.2793152065261983, 2.2766382499944737, 2.276781870058861, 2.2739999019994146, 2.274184708802487, 2.273264933381933, 2.2712255058003894, 2.2719755316328585, 2.2693100692006842, 2.267502388099496, 2.2671010250806525, 2.2658177758283493, 2.266026888446659, 2.2647905406100386, 2.263566727053141, 2.2623553123960343, 2.2613980072269886, 2.2593011246412784, 2.2576493736995666, 2.2560995875600307, 2.2547538438257115, 2.256089826758197, 2.254342320887735, 2.2519835536789508, 2.251736892921388, 2.2487691124243554, 2.249476925792349, 2.247275397100815, 2.2457023600640156, 2.2453039018406513, 2.2439261544350666, 2.2425088026205215, 2.2421919613025603, 2.240894712304017, 2.239350457595182, 2.236995339314888, 2.2354526899557197, 2.2348376741939613, 2.2339864893832524, 2.231367158600053, 2.2286794380567896, 2.2303956511974525, 2.2268184452575857, 2.225885316129248, 2.2259132792180982, 2.2224780984794648, 2.2219273639692054, 2.219783510215184, 2.21601572044301, 2.2158550764229226, 2.214561181817277, 2.21326513961794, 2.213720794556053, 2.2126781058711398, 2.2065512794529396, 2.206712240241286, 2.2050098119520825, 2.204043688822605, 2.2013438724492125, 2.2010431916344326, 2.199355335126007, 2.1977295743916816, 2.1959106656365375, 2.1934445536037432, 2.1886904618806526, 2.1871105144839826, 2.1882619989105674, 2.185214503849691, 2.1825872839654457, 2.181055041981915, 2.178412220843669, 2.1768292779888476, 2.172743508498021, 2.17303529882853, 2.1703421112852106, 2.166555098790723, 2.166809218513369, 2.1634644679798978], "accuracy": [0.08889182657003403, 0.09549596905708313, 0.09760929644107819, 0.1006472036242485, 0.10011887550354004, 0.09694888442754745, 0.11094967275857925, 0.10540219396352768, 0.11821424216032028, 0.11345925182104111, 0.11993131786584854, 0.11953506618738174, 0.11821424216032028, 0.12996962666511536, 0.12191256135702133, 0.12838461995124817, 0.13551710546016693, 0.13234710693359375, 0.14317791163921356, 0.14317791163921356, 0.1504424810409546, 0.14740456640720367, 0.14793290197849274, 0.16312244534492493, 0.15202747285366058, 0.1608770340681076, 0.16682076454162598, 0.16378284990787506, 0.18016114830970764, 0.1694624274969101, 0.175670325756073, 0.17580240964889526, 0.18597279489040375, 0.18584071099758148, 0.19376568496227264, 0.18782195448875427, 0.18544445931911469, 0.1974640041589737, 0.1896711140871048, 0.19561484456062317, 0.21304979920387268, 0.20737022161483765, 0.21529521048069, 0.20921939611434937, 0.2118610441684723, 0.21793685853481293, 0.21661603450775146, 0.22876766324043274, 0.22493726015090942, 0.2277110069990158, 0.2386738806962967, 0.2355038970708847, 0.23959846794605255, 0.24474970996379852, 0.24514594674110413, 0.2405230551958084, 0.24435345828533173, 0.2502971887588501, 0.25637298822402954, 0.2537313401699066, 0.2565050721168518, 0.2596750855445862, 0.27037379145622253, 0.2591467499732971, 0.27063795924186707, 0.27539294958114624, 0.27261921763420105, 0.2790912687778473, 0.27077004313468933, 0.28278958797454834, 0.28543123602867126, 0.29718664288520813, 0.29441288113594055, 0.29599788784980774, 0.2954695522785187, 0.2863558232784271, 0.30101704597473145, 0.29665830731391907, 0.30180954933166504, 0.30418702960014343, 0.30722492933273315, 0.3015453815460205, 0.304979532957077, 0.30365869402885437, 0.3082816004753113, 0.30960243940353394, 0.32426363229751587, 0.3199048936367035, 0.3179236650466919, 0.32162198424339294, 0.33139610290527344, 0.33099988102912903, 0.3255844712257385, 0.32545238733291626, 0.3346982002258301, 0.33364152908325195, 0.3377360999584198, 0.33218860626220703, 0.33958524465560913, 0.3377360999584198], "val_loss": [1.9695665495736259, 1.9685523850577218, 1.9675411496843611, 1.9665209906441825, 1.9655180658612932, 1.9645026070731026, 1.9635007722037179, 1.9624975068228585, 1.96148681640625, 1.9604857989719935, 1.9594794000898088, 1.9584712982177734, 1.9574684415544783, 1.956462791987828, 1.9554690633501326, 1.9544695445469447, 1.953463077545166, 1.9524774551391602, 1.951479094369071, 1.950488499232701, 1.949474539075579, 1.9484684807913644, 1.9474547931126185, 1.9464363370622908, 1.9454248973301478, 1.9444028990609306, 1.943366391318185, 1.942347185952323, 1.9413164683750697, 1.940286636352539, 1.9392457008361816, 1.9381794929504395, 1.9371291569301061, 1.9360682623726981, 1.9350082533700126, 1.9339431353977747, 1.9328607150486536, 1.931786060333252, 1.9306879724775041, 1.9295814377920968, 1.9284753118242537, 1.9273732049124581, 1.9262465749468123, 1.9251174245561873, 1.9239859580993652, 1.9228388241359167, 1.9216735022408622, 1.920503888811384, 1.919323240007673, 1.9181387083871024, 1.916928700038365, 1.9157030241830009, 1.9144817761012487, 1.9132461547851562, 1.9120043345860072, 1.9107475961957658, 1.9094769614083427, 1.9081953593662806, 1.9068754741123743, 1.9055566787719727, 1.9042342049734933, 1.9028688839503698, 1.9015050615583147, 1.9001545906066895, 1.8987556866237096, 1.8973426818847656, 1.8959315844944544, 1.8944949422563826, 1.8930408614022392, 1.891561848776681, 1.8900793620518275, 1.888568605695452, 1.887049947466169, 1.8855243410382951, 1.883979184286935, 1.8824091638837541, 1.8807997703552246, 1.8792023658752441, 1.8775629997253418, 1.8759183883666992, 1.874232224055699, 1.8725406101771764, 1.8708186149597168, 1.8690783636910575, 1.8673160416739327, 1.8655432292393275, 1.8637043407985143, 1.8618542126246862, 1.8599968637738908, 1.8581181253705705, 1.856217316218785, 1.8542791094098772, 1.8522930826459612, 1.8503105299813407, 1.8482722554888045, 1.8462319374084473, 1.8441499301365443, 1.8420280729021346, 1.839916161128453, 1.8377551351274763], "val_accuracy": [0.045666664838790894, 0.050999999046325684, 0.05966666713356972, 0.06466666609048843, 0.07266666740179062, 0.07966666668653488, 0.08900000154972076, 0.10000000149011612, 0.11100000143051147, 0.12066666781902313, 0.12866666913032532, 0.13866665959358215, 0.14800000190734863, 0.1599999964237213, 0.1706666648387909, 0.179666668176651, 0.18933333456516266, 0.2016666680574417, 0.21166667342185974, 0.22033333778381348, 0.2253333330154419, 0.2329999953508377, 0.24266666173934937, 0.2513333261013031, 0.25866666436195374, 0.2693333327770233, 0.2770000100135803, 0.28566667437553406, 0.29233333468437195, 0.2993333339691162, 0.30666667222976685, 0.31333333253860474, 0.31833332777023315, 0.3243333399295807, 0.3323333263397217, 0.33666667342185974, 0.34299999475479126, 0.34933334589004517, 0.35333332419395447, 0.35733333230018616, 0.36000001430511475, 0.3633333444595337, 0.36533331871032715, 0.3683333396911621, 0.37166666984558105, 0.37400001287460327, 0.3773333430290222, 0.3790000081062317, 0.38066667318344116, 0.382999986410141, 0.38499999046325684, 0.38733333349227905, 0.3903333246707916, 0.3930000066757202, 0.39500001072883606, 0.39800000190734863, 0.40066665410995483, 0.4026666581630707, 0.40533334016799927, 0.40666666626930237, 0.40833333134651184, 0.40966665744781494, 0.4113333225250244, 0.41466665267944336, 0.41733333468437195, 0.4193333387374878, 0.421999990940094, 0.4246666729450226, 0.42633333802223206, 0.429666668176651, 0.42933332920074463, 0.43066665530204773, 0.4336666762828827, 0.4359999895095825, 0.437333345413208, 0.43933331966400146, 0.4399999976158142, 0.44066667556762695, 0.4416666626930237, 0.44433334469795227, 0.44433334469795227, 0.44699999690055847, 0.4490000009536743, 0.45266667008399963, 0.45399999618530273, 0.45500001311302185, 0.4560000002384186, 0.45766666531562805, 0.4586666524410248, 0.45899999141693115, 0.46033334732055664, 0.4646666646003723, 0.46799999475479126, 0.46833333373069763, 0.4699999988079071, 0.47099998593330383, 0.47200000286102295, 0.4729999899864197, 0.47433334589004517, 0.4763333201408386]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [5, 2, 6, 6, 1, 2, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 0, 1, 1, 3, 3, 0], [94, 82, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4, 0], [], [0, 1, 0, 0, 1, 0, 1, 1, 1, 0], [0, 3, 3, 6, 9], [3, 3, 3, 1, 0], [45, 38]], "fitness": -0.1851428598165512, "mapping_values": [1, 7, 7, 4, 3, 2, 12, 12, 7, 5, 2, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(tf.math.add(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.7784483786414027, 2.1972331192357712, 3.6284150410920337, 2.261707853222284, 2.324349482549794, 2.327141666613896, 2.2927696120391006], "accuracy": [0.17170783877372742, 0.17580240964889526, 0.15017831325531006, 0.15321621298789978, 0.13670584559440613, 0.13697001338005066, 0.11411966383457184], "val_loss": [1.970540932246617, 1.7697548185076033, 1.977377005985805, 1.9740358761378698, 1.9720333644321986, 1.9713536671229772, 1.9749621663774763], "val_accuracy": [0.17900000512599945, 0.2736666798591614, 0.09833333641290665, 0.09833333641290665, 0.12566666305065155, 0.09733333438634872, 0.10533333569765091]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [44, 57], [1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 2, 6, 6, 1, 9, 0, 2, 4, 6, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 3, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1], [0, 3, 3, 6, 9, 1, 1, 6, 9, 8], [3, 0, 3, 1, 2], [3, 38, 50]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 12, 12, 7, 5, 2, 1, 1, 0, 1, 0, 15, 10, 5, 3], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(beta, grad))))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(sigma, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.math.subtract(sigma, tf.math.subtract(tf.math.divide_no_nan(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha)), beta))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10249637067317963, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 0, 1, 1, 0, 1, 0], [6, 6, 4, 9], [0, 3, 2, 3], [44, 57, 63, 98, 28], [1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1], [2, 1, 6, 6, 3, 2, 2, 4, 2, 1, 0, 3, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 0, 3, 1, 2, 3, 0, 3, 1, 1], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [2], [], [1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 3, 6, 9], [3, 3, 3, 1], [10, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 2, 19, 19, 9, 10, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, grad))), tf.math.add(beta, grad)), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), beta))))))), tf.math.add(beta, grad)))), tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10249637067317963, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [9, 6, 4, 9], [0, 3, 2, 3], [44, 57], [0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [5, 2, 0, 6, 1, 0, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 0, 1, 1, 3, 3, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 3, 4, 9], [0, 2, 1, 1], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 10, 10, 6, 4, 0, 1, 1, 0, 1, 0, 8, 5, 3, 2], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(tf.math.negative(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.negative(grad)), tf.math.add(beta, grad))))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.pow(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), beta), alpha), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10342095047235489, 0.09826971590518951, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09700000286102295, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0, 0, 1], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 2, 2, 3], [74, 57], [1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 1, 1, 1, 5, 1, 1, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 1, 1, 1, 3, 3, 0], [85, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [2], [85], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [3, 3, 4, 8, 5, 5, 5, 2, 1, 8, 1, 2, 7, 4, 3, 9, 1, 5], [3, 2, 1, 1], [29, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 12, 12, 6, 6, 0, 1, 1, 0, 1, 0, 7, 3, 4, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, grad))), tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, alpha)))), alpha)), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.multiply(tf.math.pow(beta, alpha), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09879804402589798, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 1, 0, 6, 1, 1, 9, 5, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 2, 3, 3, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 3, 1, 9], [3, 0, 3, 1], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 2, 17, 17, 10, 7, 2, 1, 1, 0, 1, 0, 8, 5, 3, 2], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.negative(tf.math.divide_no_nan(grad, tf.math.add(beta, grad))), tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.add(beta, alpha)))))), tf.math.add(beta, tf.math.add(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), beta))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.subtract(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), sigma), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.327590499209564, 2.4246248348655794, 99.40723277857715, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.05309734493494034, 0.015982037410140038, 0.03949280083179474, 0.10157178342342377, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.0330005373273576, 2.191702025277274, 651665954233197.8, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.00566666666418314, 0.0063333334401249886, 0.10000000149011612, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 0, 1, 1, 0, 1, 0], [7, 6, 4, 9], [2, 3, 2, 3], [44, 57], [1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [6, 2, 6, 6, 1, 1, 1, 2, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 4, 3, 0, 1, 1, 3, 3, 0], [42, 65, 43, 84, 1, 78], [1, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0], [4, 2, 3, 8, 9, 8], [3, 2, 0, 1, 3], [8, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 5, 5, 2, 3, 0, 1, 0, 0, 0, 0, 9, 6, 3, 2], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad)), grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.add(tf.math.multiply(tf.math.sqrt(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), sigma), beta), tf.math.sqrt(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10249637067317963, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [0, 6, 4, 9], [0, 3, 2, 3], [44, 57], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1], [1, 2, 6, 6, 8, 5, 8, 2, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 5, 1, 0, 1, 1, 3, 3, 0], [52, 65, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0], [4, 2, 3, 6, 9, 8], [3, 0, 0, 1, 3], [8, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 1, 21, 21, 13, 8, 2, 1, 1, 0, 1, 0, 7, 3, 4, 2], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.sqrt(grad))))))), tf.math.add(tf.math.add(tf.math.subtract(tf.math.pow(grad, tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha)), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.sqrt(grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.add(sigma, tf.math.multiply(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10249637067317963, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1], [7, 6, 4, 9], [0, 2, 2, 3, 1, 1, 2], [33, 57], [1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 2, 6, 1, 2, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 3, 1, 3, 3, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [0], [14], [1, 1, 1, 0, 1, 0, 1, 1, 1, 0], [0, 3, 3, 6, 9], [0, 3, 3, 1], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 19, 19, 10, 9, 2, 1, 1, 0, 1, 1, 1, 0, 1, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), tf.math.add(beta, grad)))), tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), alpha)))))), tf.math.add(beta, grad))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.301839966358935, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.10249637067317963, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1], [7, 6, 4, 0, 5, 6, 2, 7], [0, 2, 2, 3, 1, 1, 2], [44, 57], [1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [2, 2, 3, 6, 1, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 3, 1, 3, 0, 1, 3, 0, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [0], [14], [1, 1, 1, 0, 1, 0, 1, 1, 1, 0], [2, 3, 4, 1, 9], [2, 3, 1, 1, 0], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 15, 8, 7, 1, 21, 21, 11, 10, 4, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(grad, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha))), tf.math.add(alpha, grad))))))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(tf.math.add(beta, grad), tf.math.multiply(beta, tf.math.add(beta, grad))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(alpha, tf.math.subtract(grad, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, grad)))), tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10249637067317963, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [2, 6, 4, 9, 4], [0, 3, 2, 3], [30, 57], [1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0], [1, 2, 6, 6, 1, 1, 1, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 3, 0, 5], [15, 85, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [85], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1], [0, 9, 4, 6, 9], [3, 3, 3, 1, 2, 3], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 23, 23, 12, 11, 3, 1, 1, 0, 1, 0, 2, 2, 0, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, alpha))), tf.math.subtract(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), alpha)), tf.math.add(beta, grad)), tf.math.add(beta, grad))))))), tf.math.add(beta, tf.math.pow(tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32), grad)))), tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [29914595.848429393, 563411614.1275921, 2626593910.6168275, 7279997143.322679, 15567187607.68617, 28589232420.146347], "accuracy": [0.09853387624025345, 0.10157178342342377, 0.10077928751707077, 0.09840179979801178, 0.1026284471154213, 0.09879804402589798], "val_loss": [112155428.57142857, 896301147.4285715, 3023962989.714286, 7166656512.0, 13995870208.0, 24183408932.57143], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 0, 1, 0], [3, 6, 4, 6, 4, 4, 4, 7, 0, 8, 3, 2, 5, 2, 9, 0, 2, 3, 3, 0], [0, 1, 2, 3, 3, 2, 1, 2, 2, 3, 1, 2, 0, 2, 0], [19, 57], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 3, 6, 1, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 3, 3, 3, 0, 1, 1, 3, 0, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [1], [47], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1], [3, 3, 4, 6, 4, 5, 5, 7, 4, 9, 8, 3], [3, 3, 0, 1, 1, 1], [21, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 19, 19, 10, 9, 3, 1, 1, 0, 1, 0, 13, 7, 6, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))), grad), tf.math.pow(grad, tf.math.add(beta, tf.math.add(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(alpha, alpha))))))), tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(sigma, tf.math.pow(sigma, tf.math.divide_no_nan(tf.math.pow(tf.math.square(tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.square(alpha)), alpha))), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10249637067317963, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [6, 6, 4, 9], [0, 3, 2, 3], [44, 57, 63, 98, 28], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1], [1, 1, 6, 6, 3, 9, 2, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 0, 1, 1, 3, 3, 0], [56, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [2], [85], [0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [0, 3, 3, 6, 9, 8], [1, 3, 1, 1], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, sigma))", "other_info": {"loss": [34.03453437876723, 49.42800938892579, 50.70185911405073, 71.43032142952559, 76.68945385760729, 74.70582968334338, 73.56881848497633, 79.82318208649363, 81.82015094144894], "accuracy": [0.10091137140989304, 0.09959053993225098, 0.09351472556591034, 0.09906221181154251, 0.1006472036242485, 0.09787346422672272, 0.09298639744520187, 0.10157178342342377, 0.10368511080741882], "val_loss": [52.000493730817524, 46.793168204171316, 65.7482670375279, 46.70774950299944, 51.972855704171316, 65.1945059640067, 88.50510951450893, 76.97693961007255, 85.76417759486607], "val_accuracy": [0.09966666996479034, 0.10233332961797714, 0.09966666996479034, 0.10400000214576721, 0.10000000149011612, 0.09833333641290665, 0.09733333438634872, 0.09733333438634872, 0.10400000214576721]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [6, 2, 6, 0, 1, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 3, 3, 3, 0], [42, 71, 43, 84, 1, 78], [1, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 3, 6, 5], [3, 3, 3, 1], [88, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 2, 12, 12, 7, 5, 2, 1, 0, 0, 0, 0, 9, 5, 4, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.negative(grad), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, alpha)), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(sigma, sigma), sigma), tf.math.square(alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10249637067317963, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0, 0, 1], [0, 1, 1, 1, 0, 1, 0], [6, 6, 4, 9], [2, 2, 2, 3], [44, 57, 63, 98, 28], [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 6, 6, 3, 2, 3, 2, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 3, 0], [15, 71, 49, 84, 1, 78], [1, 0, 0, 1, 0], [1, 0, 1], [3, 3], [2], [85], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1], [3, 9, 4, 8, 5, 5, 5, 2, 1, 8, 1, 2, 7, 4, 3, 9, 1, 5], [3, 1, 2, 1, 1, 1, 2, 1, 3, 1, 3], [10, 38]], "fitness": -0.03999999910593033, "mapping_values": [1, 3, 3, 1, 2, 0, 19, 19, 9, 10, 2, 1, 0, 0, 0, 0, 3, 2, 1, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, alpha))))), tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))), alpha)))), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), grad))), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.302845599172358, 2.3020300479093327, 2.3017665890812196, 2.302193960131372, 2.302411738576953, 2.302660056990781], "accuracy": [0.0874389111995697, 0.09219389408826828, 0.09259014576673508, 0.09232597798109055, 0.08981640636920929, 0.08479725569486618], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 0, 5, 3, 1, 7], [0, 3, 2, 3], [48, 70, 57], [1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1], [6, 2, 6, 6, 1, 5, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 1, 0, 1, 3, 3, 3, 0], [17, 71, 43, 84, 1, 78], [1, 0, 0, 1, 0], [1, 0, 1], [3, 3], [0], [14], [1, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 9, 3, 6, 9], [3, 3, 3, 1], [61, 38]], "fitness": -0.03999999910593033, "mapping_values": [1, 3, 3, 1, 2, 1, 21, 21, 13, 8, 4, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, alpha)), tf.math.subtract(tf.math.square(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha)), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.sqrt(grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.302845599172358, 2.3020300479093327, 2.3017665890812196, 2.302193960131372, 2.302411738576953, 2.302660056990781], "accuracy": [0.0874389111995697, 0.09219389408826828, 0.09259014576673508, 0.09232597798109055, 0.08981640636920929, 0.08479725569486618], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [1, 6, 4, 6, 4, 4, 4, 7, 0, 8, 3, 2, 5, 2, 9, 0, 2, 3, 3, 0], [2, 3, 2, 3], [44, 57], [1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [1, 2, 6, 6, 1, 1, 9, 2, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 0, 1, 1, 3, 2, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1], [3, 3, 6, 5], [0, 0], [73, 32], [0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [3, 3, 4, 6, 5, 5, 0, 7, 4, 0, 8, 5, 7], [2, 3, 0, 2, 2, 2, 1, 0, 1], [33, 38]], "fitness": -0.03999999910593033, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 8, 6, 4, 2, 2, 3, 1, 2, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), sigma)), tf.math.add(sigma, tf.math.divide_no_nan(tf.math.add(sigma, tf.math.square(sigma)), tf.math.add(sigma, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, sigma)", "other_info": {"loss": [2.302845599172358, 2.3020300479093327, 2.3017665890812196, 2.302193960131372, 2.302411738576953, 2.302660056990781], "accuracy": [0.0874389111995697, 0.09219389408826828, 0.09259014576673508, 0.09232597798109055, 0.08981640636920929, 0.08479725569486618], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [5, 6, 4, 9], [0, 2, 2, 3], [44, 57], [1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 8, 6, 1, 3, 9, 4, 5, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 1, 1, 1, 3, 3, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 3, 3, 6, 9, 5], [3, 3, 3, 1], [45, 38]], "fitness": -0.03971428424119949, "mapping_values": [1, 2, 2, 1, 1, 1, 19, 19, 11, 8, 1, 1, 1, 0, 1, 0, 9, 6, 3, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))))))), tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), alpha))))))))), tf.math.add(beta, alpha))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(sigma, sigma), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), tf.math.square(sigma)))", "other_info": {"loss": [2.3029974124466563, 2.3025559070890984, 2.3026401402376835, 2.3035586832253343, 2.3042460442408124, 2.305109102145603], "accuracy": [0.08691058307886124, 0.09126931428909302, 0.08915598690509796, 0.09021265059709549, 0.08889182657003403, 0.07951393723487854], "val_loss": [1.970919132232666, 1.9712237630571638, 1.9715219225202287, 1.971896035330636, 1.9723004613603865, 1.9727760723658971], "val_accuracy": [0.03866666555404663, 0.03700000047683716, 0.03400000184774399, 0.03166666626930237, 0.03133333474397659, 0.03133333474397659]}}]