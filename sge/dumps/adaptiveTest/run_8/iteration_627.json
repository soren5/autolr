[{"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 2, 4, 5, 3, 2, 1, 2, 1, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.7788571715354919, "mapping_values": [1, 24, 24, 14, 10, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.subtract(tf.math.add(alpha, grad), grad), grad))))), tf.math.square(tf.math.add(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), alpha)))), tf.math.multiply(tf.math.add(alpha, grad), grad)))))), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1558223267934262, 1.8343792175966374, 1.2804454141651336, 0.9457407121834045, 0.8312872195004504, 0.7607676902341333, 0.7104483458265543, 0.6497219590589024, 0.6373177923940161, 0.6320017087713067, 0.5910562158433942, 0.5827232311430419, 0.5740977536339282, 0.5480591997163737, 0.5274851276630171], "accuracy": [0.2922995686531067, 0.3932109475135803, 0.5484083890914917, 0.6502443552017212, 0.6900013089179993, 0.7112666964530945, 0.724210798740387, 0.754589855670929, 0.7567031979560852, 0.7600052952766418, 0.7773081660270691, 0.7792893648147583, 0.7825914621353149, 0.7950072884559631, 0.8030643463134766], "val_loss": [1.9176918438502721, 1.1582461765834264, 0.7882048402513776, 0.6762406996318272, 0.6711160966328212, 0.5505128758294242, 0.5246307849884033, 0.5969074283327375, 0.47414078031267437, 0.4663721833910261, 0.5100481680461338, 0.4630830543381827, 0.49988915239061626, 0.45971464259283884, 0.4712054133415222], "val_accuracy": [0.32499998807907104, 0.46933332085609436, 0.6523333191871643, 0.6903333067893982, 0.6993333101272583, 0.7630000114440918, 0.7733333110809326, 0.7316666841506958, 0.793666660785675, 0.7960000038146973, 0.7616666555404663, 0.7929999828338623, 0.7803333401679993, 0.7886666655540466, 0.7889999747276306]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 8, 4, 5, 2, 2, 1, 0, 1, 4, 8, 4, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 1, 2, 2, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [74, 38, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.7788571715354919, "mapping_values": [1, 5, 5, 3, 2, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1558223267934262, 1.8343792175966374, 1.2804454141651336, 0.9457407121834045, 0.8312872195004504, 0.7607676902341333, 0.7104483458265543, 0.6497219590589024, 0.6373177923940161, 0.6320017087713067, 0.5910562158433942, 0.5827232311430419, 0.5740977536339282, 0.5480591997163737, 0.5274851276630171], "accuracy": [0.2922995686531067, 0.3932109475135803, 0.5484083890914917, 0.6502443552017212, 0.6900013089179993, 0.7112666964530945, 0.724210798740387, 0.754589855670929, 0.7567031979560852, 0.7600052952766418, 0.7773081660270691, 0.7792893648147583, 0.7825914621353149, 0.7950072884559631, 0.8030643463134766], "val_loss": [1.9176918438502721, 1.1582461765834264, 0.7882048402513776, 0.6762406996318272, 0.6711160966328212, 0.5505128758294242, 0.5246307849884033, 0.5969074283327375, 0.47414078031267437, 0.4663721833910261, 0.5100481680461338, 0.4630830543381827, 0.49988915239061626, 0.45971464259283884, 0.4712054133415222], "val_accuracy": [0.32499998807907104, 0.46933332085609436, 0.6523333191871643, 0.6903333067893982, 0.6993333101272583, 0.7630000114440918, 0.7733333110809326, 0.7316666841506958, 0.793666660785675, 0.7960000038146973, 0.7616666555404663, 0.7929999828338623, 0.7803333401679993, 0.7886666655540466, 0.7889999747276306]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1], [6, 8, 1, 4, 5, 3, 2, 8, 0, 4, 4, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2, 4], [0, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [51, 91, 35, 44, 57, 79, 53, 52, 77], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.7788571715354919, "mapping_values": [1, 39, 39, 26, 13, 9, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.square(tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32))))), tf.math.pow(tf.math.pow(tf.math.add(grad, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), grad)), tf.math.add(alpha, alpha)))), tf.math.divide_no_nan(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad))))))), tf.math.add(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1558223267934262, 1.8343792175966374, 1.2804454141651336, 0.9457407121834045, 0.8312872195004504, 0.7607676902341333, 0.7104483458265543, 0.6497219590589024, 0.6373177923940161, 0.6320017087713067, 0.5910562158433942, 0.5827232311430419, 0.5740977536339282, 0.5480591997163737, 0.5274851276630171], "accuracy": [0.2922995686531067, 0.3932109475135803, 0.5484083890914917, 0.6502443552017212, 0.6900013089179993, 0.7112666964530945, 0.724210798740387, 0.754589855670929, 0.7567031979560852, 0.7600052952766418, 0.7773081660270691, 0.7792893648147583, 0.7825914621353149, 0.7950072884559631, 0.8030643463134766], "val_loss": [1.9176918438502721, 1.1582461765834264, 0.7882048402513776, 0.6762406996318272, 0.6711160966328212, 0.5505128758294242, 0.5246307849884033, 0.5969074283327375, 0.47414078031267437, 0.4663721833910261, 0.5100481680461338, 0.4630830543381827, 0.49988915239061626, 0.45971464259283884, 0.4712054133415222], "val_accuracy": [0.32499998807907104, 0.46933332085609436, 0.6523333191871643, 0.6903333067893982, 0.6993333101272583, 0.7630000114440918, 0.7733333110809326, 0.7316666841506958, 0.793666660785675, 0.7960000038146973, 0.7616666555404663, 0.7929999828338623, 0.7803333401679993, 0.7886666655540466, 0.7889999747276306]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 8, 0, 4, 3, 2, 1, 0, 1, 4, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 11, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.7788571715354919, "mapping_values": [1, 6, 6, 4, 2, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.negative(tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1558223267934262, 1.8343792175966374, 1.2804454141651336, 0.9457407121834045, 0.8312872195004504, 0.7607676902341333, 0.7104483458265543, 0.6497219590589024, 0.6373177923940161, 0.6320017087713067, 0.5910562158433942, 0.5827232311430419, 0.5740977536339282, 0.5480591997163737, 0.5274851276630171], "accuracy": [0.2922995686531067, 0.3932109475135803, 0.5484083890914917, 0.6502443552017212, 0.6900013089179993, 0.7112666964530945, 0.724210798740387, 0.754589855670929, 0.7567031979560852, 0.7600052952766418, 0.7773081660270691, 0.7792893648147583, 0.7825914621353149, 0.7950072884559631, 0.8030643463134766], "val_loss": [1.9176918438502721, 1.1582461765834264, 0.7882048402513776, 0.6762406996318272, 0.6711160966328212, 0.5505128758294242, 0.5246307849884033, 0.5969074283327375, 0.47414078031267437, 0.4663721833910261, 0.5100481680461338, 0.4630830543381827, 0.49988915239061626, 0.45971464259283884, 0.4712054133415222], "val_accuracy": [0.32499998807907104, 0.46933332085609436, 0.6523333191871643, 0.6903333067893982, 0.6993333101272583, 0.7630000114440918, 0.7733333110809326, 0.7316666841506958, 0.793666660785675, 0.7960000038146973, 0.7616666555404663, 0.7929999828338623, 0.7803333401679993, 0.7886666655540466, 0.7889999747276306]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1], [3, 6, 1, 4, 3, 2, 2, 1, 0, 5, 1, 1, 9, 1, 2, 6, 9, 2, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 2, 2, 0, 2, 1, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 42, 35, 44, 57, 57, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [4, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.7788571715354919, "mapping_values": [1, 38, 38, 23, 15, 7, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.multiply(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(alpha, tf.math.add(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(grad, tf.math.negative(tf.math.square(tf.math.add(alpha, tf.math.subtract(grad, tf.math.subtract(grad, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))))))))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, grad)))), tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, alpha)))))), tf.math.add(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(alpha)))), tf.math.add(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1558223267934262, 1.8343792175966374, 1.2804454141651336, 0.9457407121834045, 0.8312872195004504, 0.7607676902341333, 0.7104483458265543, 0.6497219590589024, 0.6373177923940161, 0.6320017087713067, 0.5910562158433942, 0.5827232311430419, 0.5740977536339282, 0.5480591997163737, 0.5274851276630171], "accuracy": [0.2922995686531067, 0.3932109475135803, 0.5484083890914917, 0.6502443552017212, 0.6900013089179993, 0.7112666964530945, 0.724210798740387, 0.754589855670929, 0.7567031979560852, 0.7600052952766418, 0.7773081660270691, 0.7792893648147583, 0.7825914621353149, 0.7950072884559631, 0.8030643463134766], "val_loss": [1.9176918438502721, 1.1582461765834264, 0.7882048402513776, 0.6762406996318272, 0.6711160966328212, 0.5505128758294242, 0.5246307849884033, 0.5969074283327375, 0.47414078031267437, 0.4663721833910261, 0.5100481680461338, 0.4630830543381827, 0.49988915239061626, 0.45971464259283884, 0.4712054133415222], "val_accuracy": [0.32499998807907104, 0.46933332085609436, 0.6523333191871643, 0.6903333067893982, 0.6993333101272583, 0.7630000114440918, 0.7733333110809326, 0.7316666841506958, 0.793666660785675, 0.7960000038146973, 0.7616666555404663, 0.7929999828338623, 0.7803333401679993, 0.7886666655540466, 0.7889999747276306]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1], [3, 6, 8, 4, 4, 1, 2, 4, 0, 6, 4, 5, 9, 3, 1, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2, 4], [0, 0, 2, 2, 2, 2, 2, 2, 0, 2, 1, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 93, 35, 44, 70, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [4, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.7788571715354919, "mapping_values": [1, 40, 40, 26, 14, 8, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.pow(tf.math.pow(tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.square(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))), tf.math.multiply(tf.math.subtract(tf.math.divide_no_nan(grad, tf.math.add(alpha, grad)), grad), tf.math.add(alpha, grad)))), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), grad), tf.math.square(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(grad, tf.math.negative(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))))), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1558223267934262, 1.8343792175966374, 1.2804454141651336, 0.9457407121834045, 0.8312872195004504, 0.7607676902341333, 0.7104483458265543, 0.6497219590589024, 0.6373177923940161, 0.6320017087713067, 0.5910562158433942, 0.5827232311430419, 0.5740977536339282, 0.5480591997163737, 0.5274851276630171], "accuracy": [0.2922995686531067, 0.3932109475135803, 0.5484083890914917, 0.6502443552017212, 0.6900013089179993, 0.7112666964530945, 0.724210798740387, 0.754589855670929, 0.7567031979560852, 0.7600052952766418, 0.7773081660270691, 0.7792893648147583, 0.7825914621353149, 0.7950072884559631, 0.8030643463134766], "val_loss": [1.9176918438502721, 1.1582461765834264, 0.7882048402513776, 0.6762406996318272, 0.6711160966328212, 0.5505128758294242, 0.5246307849884033, 0.5969074283327375, 0.47414078031267437, 0.4663721833910261, 0.5100481680461338, 0.4630830543381827, 0.49988915239061626, 0.45971464259283884, 0.4712054133415222], "val_accuracy": [0.32499998807907104, 0.46933332085609436, 0.6523333191871643, 0.6903333067893982, 0.6993333101272583, 0.7630000114440918, 0.7733333110809326, 0.7316666841506958, 0.793666660785675, 0.7960000038146973, 0.7616666555404663, 0.7929999828338623, 0.7803333401679993, 0.7886666655540466, 0.7889999747276306]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [8, 8, 1, 2, 2, 2, 2, 4, 0, 1, 4, 8, 6, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 1, 0, 1, 1, 2, 2, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [36, 89, 35, 27, 57, 79, 53, 52], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [19, 25, 50, 71, 34]], "fitness": -0.6882857084274292, "mapping_values": [1, 15, 15, 8, 7, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)), alpha), tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(alpha, alpha)))), tf.math.pow(tf.math.add(alpha, grad), grad))))))), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2989252893727263, 2.2955169198440917, 2.291287916526346, 2.2871603713201227, 2.283332130266864, 2.2772210082357836, 2.2754624576112614, 2.2702072085863123, 2.2657605865769743, 2.261620481173911, 2.2551065858612445, 2.2507567351851026, 2.245803032159459, 2.239678655995228, 2.2344362744250867, 2.2299592984020276, 2.2240228199168377, 2.2164187251206764, 2.20855446835519, 2.2030912689198403, 2.1963666059463534, 2.187033334759012, 2.178287160017109, 2.172061553988333, 2.162108531229374, 2.1536966965828652, 2.14265074454058, 2.130815004927686, 2.120025475956367, 2.1077229675284905, 2.0951359056604537, 2.082522027921746, 2.066847309035207, 2.0540762753802175, 2.0389829789485283, 2.023932745554003, 2.007240088907735, 1.989945791054553, 1.9693914782401043, 1.9516169803489893, 1.9369315225466164, 1.916901807223864, 1.8960028661319277, 1.8736497533949628, 1.854818496249371, 1.831561289096883, 1.811967558628375, 1.7887998923429047, 1.765096188520538, 1.748436666939473, 1.7284756667735854, 1.7021378033574641, 1.6810494717542663, 1.6552749706722285, 1.6345524828683715, 1.622438086620679, 1.5883480850196297, 1.5716697870386023, 1.5526724411370243, 1.5315494327465808, 1.505853270101919, 1.493302149496153, 1.4814927923586454, 1.470156240866342, 1.4474007220804226, 1.431730840940202, 1.412782505377015, 1.4034866617340311, 1.394355933270387, 1.3740015680511881, 1.3528914810439394, 1.345796047373691, 1.327915612937374, 1.306085699175516, 1.315557902468005, 1.2953213285445664, 1.2843039502494167, 1.278068457486182, 1.2542112947155881, 1.2623926243840617, 1.2403509139605264, 1.2372782548121677, 1.2208357166541708, 1.2142222803723244, 1.2162589159907446, 1.1847525535242638, 1.1983956959836157, 1.1856789235756335, 1.1803720702017775, 1.1704674811174904, 1.15838795438214, 1.1568016826264091, 1.1471654697888563, 1.1398199357376784, 1.1411670568738521, 1.1233871054293505, 1.1209699015150674, 1.1179014961433889, 1.110148875799319, 1.0989019456965938], "accuracy": [0.09800554811954498, 0.10170386731624603, 0.11676132678985596, 0.13168670237064362, 0.1414608359336853, 0.15651829540729523, 0.15876370668411255, 0.16880200803279877, 0.18531237542629242, 0.20155857503414154, 0.2106723040342331, 0.22414475679397583, 0.22876766324043274, 0.25056135654449463, 0.25544843077659607, 0.2603355050086975, 0.2724871337413788, 0.28278958797454834, 0.30180954933166504, 0.29877161979675293, 0.31343284249305725, 0.31739532947540283, 0.3222824037075043, 0.33060362935066223, 0.34301942586898804, 0.34605732560157776, 0.35279354453086853, 0.36626601219177246, 0.36203935742378235, 0.3813234567642212, 0.3831726312637329, 0.3827763795852661, 0.3975696861743927, 0.3980979919433594, 0.4072117209434509, 0.4053625762462616, 0.41526877880096436, 0.41368380188941956, 0.42491084337234497, 0.42306166887283325, 0.42425042390823364, 0.43283581733703613, 0.4387795627117157, 0.4451195299625397, 0.44247788190841675, 0.45145952701568604, 0.45344075560569763, 0.46546030044555664, 0.46083739399909973, 0.4605732262134552, 0.46546030044555664, 0.4785365164279938, 0.4807819426059723, 0.49148064851760864, 0.486989825963974, 0.49332982301712036, 0.5031039714813232, 0.5105006098747253, 0.5040285587310791, 0.5106326937675476, 0.5223880410194397, 0.5237088799476624, 0.5214634537696838, 0.5218597054481506, 0.5280676484107971, 0.5305771827697754, 0.5361247062683105, 0.5235767960548401, 0.5357284545898438, 0.5444459319114685, 0.5469554662704468, 0.5489367246627808, 0.5548804402351379, 0.5587108731269836, 0.5550125241279602, 0.5616167187690735, 0.5608242154121399, 0.5628054141998291, 0.5787875056266785, 0.5723153948783875, 0.5783912539482117, 0.5712587237358093, 0.5789195895195007, 0.5868445634841919, 0.5815612077713013, 0.5898824334144592, 0.5805045366287231, 0.585919976234436, 0.5923920273780823, 0.5896182656288147, 0.5951657891273499, 0.5983357429504395, 0.6034870147705078, 0.6075815558433533, 0.5978074073791504, 0.6108836531639099, 0.602562427520752, 0.6073173880577087, 0.6078457236289978, 0.6141856908798218], "val_loss": [1.966463225228446, 1.962334292275565, 1.9582413945879256, 1.9541333062308175, 1.9499585287911552, 1.94585234778268, 1.9416649682181222, 1.9373627390180315, 1.9329615320478166, 1.928466864994594, 1.9238414083208357, 1.9190643855503626, 1.9141033717564173, 1.9089734894888741, 1.9035601615905762, 1.8979850496564592, 1.8921098709106445, 1.885960510798863, 1.879438877105713, 1.8726538249424525, 1.8654704775129045, 1.8578145163399833, 1.849719524383545, 1.841177122933524, 1.8321636744907923, 1.8227758407592773, 1.8128203664507185, 1.802290371486119, 1.791222095489502, 1.779520102909633, 1.7671205656869071, 1.7541710308619909, 1.7404964310782296, 1.7263044629778181, 1.71134580884661, 1.6958027907780238, 1.6795387949262346, 1.6624783788408553, 1.6447385719844274, 1.626429728099278, 1.607569864818028, 1.5880932807922363, 1.5680319581712996, 1.547431537083217, 1.5265065942491804, 1.5050605705806188, 1.4833173411233085, 1.4614014625549316, 1.4390954971313477, 1.4168522017342704, 1.3947704178946358, 1.372429302760533, 1.3500476905277796, 1.327622583934239, 1.3056648458753313, 1.2841976710728236, 1.2625892162322998, 1.2414519446236747, 1.220749991280692, 1.2006940160478865, 1.1808034692491804, 1.1617651666913713, 1.1435749871390206, 1.1260298320225306, 1.1091123989650182, 1.0926800114767892, 1.0765989848545618, 1.0613987786429269, 1.0467823914119176, 1.0327229840414864, 1.0188450132097517, 1.0057579449244909, 0.9927097388676235, 0.9801196030208043, 0.9686793259211949, 0.9575944287436349, 0.9465910026005336, 0.9361880847385952, 0.9260781833103725, 0.9163448469979423, 0.9071197509765625, 0.8983501706804548, 0.8895190783909389, 0.8811313084193638, 0.8733945574079242, 0.8653838123594012, 0.8580698796680996, 0.8508919477462769, 0.844169054712568, 0.8374078103474208, 0.8307875394821167, 0.8243707588740757, 0.8181594610214233, 0.8123230934143066, 0.8065123217446464, 0.8009100982121059, 0.7953631367002215, 0.7903175183704921, 0.7854828153337751, 0.7804128612790789], "val_accuracy": [0.06466666609048843, 0.10233332961797714, 0.14166666567325592, 0.18566666543483734, 0.22366666793823242, 0.25699999928474426, 0.2913333475589752, 0.31833332777023315, 0.34299999475479126, 0.3583333194255829, 0.367333322763443, 0.38100001215934753, 0.3869999945163727, 0.3996666669845581, 0.4103333353996277, 0.4193333387374878, 0.42766666412353516, 0.4339999854564667, 0.44066667556762695, 0.4466666579246521, 0.45500001311302185, 0.4593333303928375, 0.46799999475479126, 0.47200000286102295, 0.4790000021457672, 0.4846666753292084, 0.4896666705608368, 0.4959999918937683, 0.4986666738986969, 0.5066666603088379, 0.5109999775886536, 0.5183333158493042, 0.5236666798591614, 0.5306666493415833, 0.5353333353996277, 0.5410000085830688, 0.543666660785675, 0.5476666688919067, 0.5486666560173035, 0.5536666512489319, 0.5569999814033508, 0.5583333373069763, 0.562666654586792, 0.5653333067893982, 0.5690000057220459, 0.574999988079071, 0.5776666402816772, 0.5786666870117188, 0.5776666402816772, 0.5796666741371155, 0.5823333263397217, 0.5849999785423279, 0.5883333086967468, 0.5920000076293945, 0.5929999947547913, 0.5960000157356262, 0.5989999771118164, 0.6036666631698608, 0.6076666712760925, 0.6113333106040955, 0.6156666874885559, 0.6206666827201843, 0.6213333606719971, 0.6266666650772095, 0.6346666812896729, 0.6393333077430725, 0.6426666378974915, 0.6476666927337646, 0.6503333449363708, 0.6546666622161865, 0.6603333353996277, 0.6626666784286499, 0.6646666526794434, 0.6673333048820496, 0.67166668176651, 0.6736666560173035, 0.6766666769981384, 0.6783333420753479, 0.6809999942779541, 0.6846666932106018, 0.6866666674613953, 0.687333345413208, 0.690666675567627, 0.6899999976158142, 0.6916666626930237, 0.6926666498184204, 0.6949999928474426, 0.6949999928474426, 0.6949999928474426, 0.6953333616256714, 0.6953333616256714, 0.6963333487510681, 0.6973333358764648, 0.6986666917800903, 0.6996666789054871, 0.7009999752044678, 0.7026666402816772, 0.7036666870117188, 0.7043333053588867, 0.7049999833106995]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [8, 8, 1, 2, 2, 2, 2, 4, 0, 1, 4, 8, 6, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 1, 1, 0, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 91, 35, 44, 57, 79, 53, 52], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [4, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [2, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [42, 25, 50, 71, 34]], "fitness": -0.5040000081062317, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9696305989274385, 1.3572193385587628, 0.9674100322950754, 0.7969970978514047, 0.7291526804431996, 0.6979245788716306, 0.6675702438787808, 0.6576170479427822, 0.6981772821041823, 0.7575900079457357, 0.7578834245595729, 0.8091439623653833, 0.7778910689145472, 0.8656651911765766, 1.1146849838655386], "accuracy": [0.3505481481552124, 0.5391625761985779, 0.6337339878082275, 0.7041342258453369, 0.7265883088111877, 0.7313432693481445, 0.7456082701683044, 0.750231146812439, 0.7380794882774353, 0.7300224304199219, 0.7228899598121643, 0.7092854380607605, 0.7264562249183655, 0.7143045663833618, 0.6413947939872742], "val_loss": [1.1125704560961043, 0.8696453401020595, 0.6021771260670253, 0.5145161322184971, 0.5277766329901559, 0.48507329395839144, 0.4829027312142508, 0.4917780842099871, 0.5365616934640067, 0.5466532707214355, 0.5689959355763027, 0.5522414786475045, 0.6008881330490112, 0.630887474332537, 0.7672632932662964], "val_accuracy": [0.5400000214576721, 0.5916666388511658, 0.7379999756813049, 0.7670000195503235, 0.7643333077430725, 0.7796666622161865, 0.7733333110809326, 0.7739999890327454, 0.7706666588783264, 0.7806666493415833, 0.7630000114440918, 0.7733333110809326, 0.7519999742507935, 0.7776666879653931, 0.6543333530426025]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [5, 8, 8, 4, 5, 3, 2, 1, 3, 1, 4, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [2, 0, 2, 2, 1, 2, 2, 2, 1, 0, 1, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 96, 35, 27, 57, 79, 53, 52], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [51, 25, 50, 71, 34]], "fitness": -0.40457141399383545, "mapping_values": [1, 4, 4, 3, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(grad))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.356558360034417, 2.0832882382063236, 2.315873428531657, 2.2831880811687, 2.305623231043102, 2.3024414638722845, 2.290437790192098], "accuracy": [0.2238806039094925, 0.28622373938560486, 0.20274733006954193, 0.18663319945335388, 0.0952318087220192, 0.09985470771789551, 0.13921542465686798], "val_loss": [1.9072182519095284, 1.5189808436802454, 1.8970043318612235, 1.976553167615618, 1.9740587643214635, 1.9714416095188685, 1.8793669428144182], "val_accuracy": [0.4266666769981384, 0.45500001311302185, 0.14666666090488434, 0.09833333641290665, 0.09833333641290665, 0.0989999994635582, 0.20366667211055756]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 6, 8, 4, 5, 3, 2, 9, 0, 6, 4, 5, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [1, 0, 1, 2, 2, 2, 2, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [63, 9, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 2, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.1062857136130333, "mapping_values": [1, 14, 14, 9, 5, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.sqrt(alpha), tf.math.pow(tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)))), tf.math.add(grad, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))), tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.9766149390501164, 2.3061161339164897, 2.3036455402694216, 2.3030392952945333, 2.303041736101194, 2.303029499222747, 2.3030523136228602, 2.3028879712963493, 2.3031621890344547, 2.3030756166062853, 2.3028982250902397, 2.3031847578990163, 2.3029298916815324, 2.303045937917677], "accuracy": [0.21265354752540588, 0.09998679161071777, 0.09549596905708313, 0.09959053993225098, 0.09893012791872025, 0.09166556596755981, 0.09893012791872025, 0.09589222073554993, 0.09285431355237961, 0.09377889335155487, 0.09457138925790787, 0.0944393053650856, 0.10421344637870789, 0.09589222073554993], "val_loss": [1.9810378210885184, 1.974602426801409, 1.9740495000566756, 1.9738317217145647, 1.9738270895821708, 1.9738057681492396, 1.9737858772277832, 1.9738084929330009, 1.9736236844744002, 1.9736955506461007, 1.9736132621765137, 1.97365631375994, 1.97376925604684, 1.9737187113080705], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.0976666659116745, 0.09966666996479034, 0.0976666659116745, 0.10000000149011612, 0.0976666659116745, 0.10400000214576721, 0.09966666996479034, 0.10400000214576721, 0.09833333641290665, 0.09733333438634872, 0.09733333438634872]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1], [3, 8, 1, 4, 5, 3, 0, 1, 8, 1, 5, 2, 3, 3, 8, 9, 9, 4, 0, 2, 8, 2, 9, 9, 2], [1, 0, 2, 2, 2, 2, 2, 2, 0, 2, 1, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.1062857136130333, "mapping_values": [1, 25, 25, 17, 8, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(alpha)), tf.math.multiply(tf.math.add(alpha, tf.math.negative(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.sqrt(tf.math.subtract(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.math.add(alpha, grad), grad), tf.math.add(alpha, grad))), tf.math.add(alpha, grad))))))))), tf.math.sqrt(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))))), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.9766149390501164, 2.3061161339164897, 2.3036455402694216, 2.3030392952945333, 2.303041736101194, 2.303029499222747, 2.3030523136228602, 2.3028879712963493, 2.3031621890344547, 2.3030756166062853, 2.3028982250902397, 2.3031847578990163, 2.3029298916815324, 2.303045937917677], "accuracy": [0.21265354752540588, 0.09998679161071777, 0.09549596905708313, 0.09959053993225098, 0.09893012791872025, 0.09166556596755981, 0.09893012791872025, 0.09589222073554993, 0.09285431355237961, 0.09377889335155487, 0.09457138925790787, 0.0944393053650856, 0.10421344637870789, 0.09589222073554993], "val_loss": [1.9810378210885184, 1.974602426801409, 1.9740495000566756, 1.9738317217145647, 1.9738270895821708, 1.9738057681492396, 1.9737858772277832, 1.9738084929330009, 1.9736236844744002, 1.9736955506461007, 1.9736132621765137, 1.97365631375994, 1.97376925604684, 1.9737187113080705], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.09833333641290665, 0.0976666659116745, 0.09966666996479034, 0.0976666659116745, 0.10000000149011612, 0.0976666659116745, 0.10400000214576721, 0.09966666996479034, 0.10400000214576721, 0.09833333641290665, 0.09733333438634872, 0.09733333438634872]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 6, 8, 4, 5, 3, 2, 4, 0, 6, 4, 5, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [1, 0, 2, 0, 2, 2, 0, 2, 0, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [63, 9, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [2, 6, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 5, 4, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(alpha)), tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.square(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.divide_no_nan(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08413683623075485, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 8, 4, 5, 3, 2, 1, 0, 1, 8, 8, 4, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [2, 0, 2, 2, 2, 1, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 89, 35, 27, 57, 79, 53, 52], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [0, 3], [58], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 6, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 21, 21, 13, 8, 1, 13, 13, 8, 5, 3, 1, 1, 0, 1, 1, 6, 4, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(grad)))), tf.math.pow(tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(grad, tf.math.negative(tf.math.subtract(tf.math.add(alpha, grad), grad)))))), alpha)), tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, tf.math.pow(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.divide_no_nan(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 6, 8, 4, 1, 4, 2, 1, 0, 1, 1, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 1, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [63, 9, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 2, 9, 9, 2, 9], [0, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 21, 21, 11, 10, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 2], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), grad)), tf.math.sqrt(tf.math.pow(tf.math.subtract(tf.math.add(alpha, grad), tf.math.pow(tf.math.add(alpha, tf.math.add(grad, grad)), tf.math.subtract(tf.math.add(alpha, grad), grad))), tf.math.negative(tf.math.subtract(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))), grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [70281370.68509927, 1338080580.2351077, 6295043123.937128, 17253310683.38027, 37069231156.613396, 67734742312.06868], "accuracy": [0.10130762308835983, 0.10038304328918457, 0.0940430611371994, 0.09813763201236725, 0.09879804402589798, 0.10791176557540894], "val_loss": [266704566.85714287, 2131960466.2857144, 7193502720.0, 17048977993.142857, 33296178029.714287, 57533039762.28571], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [8, 8, 1, 2, 2, 2, 2, 4, 0, 1, 4, 8, 6, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 1, 0, 1, 1, 2, 2, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 42, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [5, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [9, 3, 6, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3023587495675097, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 1, 4, 5, 3, 6, 1, 0, 1, 2, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 1, 0, 0, 2, 1, 0, 1, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [43, 91, 35, 44, 57, 79, 53, 52], [1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 36, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [9, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 5, 4, 2, 13, 13, 8, 5, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32))), grad))), tf.math.add(alpha, tf.math.square(grad)))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3023587495675097, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 6, 9, 4, 5, 3, 2, 4, 4, 6, 4, 5, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 1, 0, 1, 1, 2, 2, 2, 1, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [71, 42, 35, 27, 57, 79, 53, 52], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [4, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [4, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 21, 21, 13, 8, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.multiply(alpha, tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(alpha, tf.math.pow(tf.math.pow(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, tf.math.square(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)), tf.math.add(alpha, grad))), tf.math.add(alpha, grad)))))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 6, 8, 4, 5, 3, 2, 4, 0, 2, 4, 0, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 2, 1, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [63, 9, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.09771428257226944, "mapping_values": [1, 16, 16, 9, 7, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), grad)), tf.math.pow(tf.math.negative(grad), grad))), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, beta))", "other_info": {"loss": [2.3010898675302616, 2.3035197255161415, 2.3054293114920776, 2.3077266540950583, 2.312063798644933, 2.3128817595070097, 2.3207325666430383, 2.3254774692524314, 2.332320663419146, 2.3454397845466644, 2.380934511807459, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09311848133802414, 0.08281600475311279, 0.08717474341392517, 0.08400475233793259, 0.07872143387794495, 0.0742306187748909, 0.07766477018594742, 0.07726852595806122, 0.07872143387794495, 0.07819310575723648, 0.07753269374370575, 0.09945846349000931, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9714854785374232, 1.9729457582746233, 1.9745691844395228, 1.976545946938651, 1.979163306100028, 1.9817742620195662, 1.9850945472717285, 1.9890612193516322, 1.9952032906668526, 2.0091001646859303, 2.0851119586399625, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.032999999821186066, 0.03166666626930237, 0.03033333271741867, 0.02800000086426735, 0.03500000014901161, 0.03700000047683716, 0.05000000074505806, 0.06599999964237213, 0.08500000089406967, 0.09799999743700027, 0.10000000149011612, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [5, 6, 8, 4, 3, 2, 2, 1, 0, 1, 3, 1, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 1, 2, 2, 0, 2, 1, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [63, 9, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [51, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 22, 22, 13, 9, 4, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), grad), tf.math.add(alpha, tf.math.add(grad, tf.math.subtract(tf.math.negative(grad), alpha)))), tf.math.subtract(tf.math.multiply(tf.math.subtract(grad, grad), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3007050059364773, 2.3016740126679713, 2.3017316857790036, 2.3020211414906013, 2.302744456411998, 2.300645365265965], "accuracy": [0.09391097724437714, 0.0874389111995697, 0.09351472556591034, 0.09100515395402908, 0.09060890227556229, 0.09179764986038208], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 8, 4, 5, 5, 2, 1, 4, 1, 4, 6, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 1, 1, 0, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 91, 35, 44, 57, 79, 53, 52], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 8, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 9, 9, 6, 3, 2, 13, 13, 8, 5, 3, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.math.pow(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32))))), tf.math.square(tf.math.add(alpha, tf.math.square(grad))))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.multiply(alpha, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3007050059364773, 2.3016740126679713, 2.3017316857790036, 2.3020211414906013, 2.302744456411998, 2.300645365265965], "accuracy": [0.09391097724437714, 0.0874389111995697, 0.09351472556591034, 0.09100515395402908, 0.09060890227556229, 0.09179764986038208], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}]