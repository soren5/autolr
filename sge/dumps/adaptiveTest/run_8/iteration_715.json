[{"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [6, 0, 2, 1, 2, 4, 9, 4, 1, 3, 4, 8, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 0, 3, 1, 0, 0, 0], [55, 56, 4, 35, 74, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.8119999766349792, "mapping_values": [1, 1, 1, 0, 1, 0, 16, 16, 9, 7, 2, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(grad), tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(tf.math.add(beta, grad), tf.math.pow(tf.math.add(beta, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, alpha))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.math.sqrt(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.2305817759945534, 2.1434041719080166, 2.076154620073349, 1.8633714489035555, 1.33652724740748, 0.9218161905509386, 0.796406548493385, 0.7266672610244604, 0.6872913985834335, 0.636164278583189, 0.6379369274106528, 0.5978431452881029, 0.6012524090202461, 0.5580858295903214, 0.5670706910731818, 0.5610740345781821, 0.55826874768745, 0.523276861144441, 0.5197204334577471, 0.48719542423070555, 0.501061577960532, 0.5108078169336157, 0.5025848239687818, 0.4621823512528472, 0.4729872511960827, 0.4524676806229831, 0.46914094746341134, 0.4428801749518141, 0.44177805035499423], "accuracy": [0.2296922504901886, 0.2782987654209137, 0.26059964299201965, 0.3743230700492859, 0.5386342406272888, 0.6590939164161682, 0.7004358768463135, 0.718399167060852, 0.7409853339195251, 0.7584202885627747, 0.7559106945991516, 0.7757231593132019, 0.7736098170280457, 0.7909126877784729, 0.7869502305984497, 0.791441023349762, 0.7893276810646057, 0.8053097128868103, 0.8123101592063904, 0.8201030492782593, 0.8108572363853455, 0.8107251524925232, 0.8125742673873901, 0.8256505131721497, 0.8261788487434387, 0.8335754871368408, 0.8222163319587708, 0.8362171649932861, 0.8343679904937744], "val_loss": [1.9369446209498815, 1.8908689362662179, 1.307302474975586, 1.1158897536141532, 0.6906008209500994, 0.6055912290300641, 0.5686541966029576, 0.5608540262494769, 0.5520930971418109, 0.5200957230159214, 0.47980155263628277, 0.5054289783750262, 0.44514036178588867, 0.4303584950310843, 0.46678670815059115, 0.45046688829149517, 0.4538530281611851, 0.46561780997685026, 0.414344779082707, 0.40162192072187153, 0.4297895686967032, 0.4218066760471889, 0.4037003687449864, 0.38861255986349924, 0.40007610831941876, 0.4099568894931248, 0.41608454499925884, 0.3943234256335667, 0.39241897208350046], "val_accuracy": [0.41333332657814026, 0.2876666784286499, 0.5353333353996277, 0.5546666383743286, 0.6753333210945129, 0.7293333411216736, 0.746666669845581, 0.7443333268165588, 0.7450000047683716, 0.7419999837875366, 0.781333327293396, 0.7803333401679993, 0.8046666383743286, 0.8146666884422302, 0.793666660785675, 0.796999990940094, 0.7906666398048401, 0.7946666479110718, 0.8193333148956299, 0.824999988079071, 0.8140000104904175, 0.8113333582878113, 0.8330000042915344, 0.8396666646003723, 0.8146666884422302, 0.8180000185966492, 0.8226666450500488, 0.8376666903495789, 0.8286666870117188]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1], [6, 6, 2, 6, 2, 4, 9, 4, 3, 3, 4, 8, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 0, 3, 1, 0, 0, 0], [88, 32, 50, 35, 74, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.8119999766349792, "mapping_values": [1, 1, 1, 0, 1, 0, 21, 21, 11, 10, 5, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.pow(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), grad))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.math.sqrt(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.2305817759945534, 2.1434041719080166, 2.076154620073349, 1.8633714489035555, 1.33652724740748, 0.9218161905509386, 0.796406548493385, 0.7266672610244604, 0.6872913985834335, 0.636164278583189, 0.6379369274106528, 0.5978431452881029, 0.6012524090202461, 0.5580858295903214, 0.5670706910731818, 0.5610740345781821, 0.55826874768745, 0.523276861144441, 0.5197204334577471, 0.48719542423070555, 0.501061577960532, 0.5108078169336157, 0.5025848239687818, 0.4621823512528472, 0.4729872511960827, 0.4524676806229831, 0.46914094746341134, 0.4428801749518141, 0.44177805035499423], "accuracy": [0.2296922504901886, 0.2782987654209137, 0.26059964299201965, 0.3743230700492859, 0.5386342406272888, 0.6590939164161682, 0.7004358768463135, 0.718399167060852, 0.7409853339195251, 0.7584202885627747, 0.7559106945991516, 0.7757231593132019, 0.7736098170280457, 0.7909126877784729, 0.7869502305984497, 0.791441023349762, 0.7893276810646057, 0.8053097128868103, 0.8123101592063904, 0.8201030492782593, 0.8108572363853455, 0.8107251524925232, 0.8125742673873901, 0.8256505131721497, 0.8261788487434387, 0.8335754871368408, 0.8222163319587708, 0.8362171649932861, 0.8343679904937744], "val_loss": [1.9369446209498815, 1.8908689362662179, 1.307302474975586, 1.1158897536141532, 0.6906008209500994, 0.6055912290300641, 0.5686541966029576, 0.5608540262494769, 0.5520930971418109, 0.5200957230159214, 0.47980155263628277, 0.5054289783750262, 0.44514036178588867, 0.4303584950310843, 0.46678670815059115, 0.45046688829149517, 0.4538530281611851, 0.46561780997685026, 0.414344779082707, 0.40162192072187153, 0.4297895686967032, 0.4218066760471889, 0.4037003687449864, 0.38861255986349924, 0.40007610831941876, 0.4099568894931248, 0.41608454499925884, 0.3943234256335667, 0.39241897208350046], "val_accuracy": [0.41333332657814026, 0.2876666784286499, 0.5353333353996277, 0.5546666383743286, 0.6753333210945129, 0.7293333411216736, 0.746666669845581, 0.7443333268165588, 0.7450000047683716, 0.7419999837875366, 0.781333327293396, 0.7803333401679993, 0.8046666383743286, 0.8146666884422302, 0.793666660785675, 0.796999990940094, 0.7906666398048401, 0.7946666479110718, 0.8193333148956299, 0.824999988079071, 0.8140000104904175, 0.8113333582878113, 0.8330000042915344, 0.8396666646003723, 0.8146666884422302, 0.8180000185966492, 0.8226666450500488, 0.8376666903495789, 0.8286666870117188]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], [6, 0, 2, 6, 2, 4, 9, 4, 3, 3, 4, 8, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 0, 3, 1, 0, 0, 0], [62, 32, 50, 35, 74, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.8119999766349792, "mapping_values": [1, 1, 1, 0, 1, 0, 18, 18, 10, 8, 3, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, grad)), tf.math.add(beta, alpha))), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.math.sqrt(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.2305817759945534, 2.1434041719080166, 2.076154620073349, 1.8633714489035555, 1.33652724740748, 0.9218161905509386, 0.796406548493385, 0.7266672610244604, 0.6872913985834335, 0.636164278583189, 0.6379369274106528, 0.5978431452881029, 0.6012524090202461, 0.5580858295903214, 0.5670706910731818, 0.5610740345781821, 0.55826874768745, 0.523276861144441, 0.5197204334577471, 0.48719542423070555, 0.501061577960532, 0.5108078169336157, 0.5025848239687818, 0.4621823512528472, 0.4729872511960827, 0.4524676806229831, 0.46914094746341134, 0.4428801749518141, 0.44177805035499423], "accuracy": [0.2296922504901886, 0.2782987654209137, 0.26059964299201965, 0.3743230700492859, 0.5386342406272888, 0.6590939164161682, 0.7004358768463135, 0.718399167060852, 0.7409853339195251, 0.7584202885627747, 0.7559106945991516, 0.7757231593132019, 0.7736098170280457, 0.7909126877784729, 0.7869502305984497, 0.791441023349762, 0.7893276810646057, 0.8053097128868103, 0.8123101592063904, 0.8201030492782593, 0.8108572363853455, 0.8107251524925232, 0.8125742673873901, 0.8256505131721497, 0.8261788487434387, 0.8335754871368408, 0.8222163319587708, 0.8362171649932861, 0.8343679904937744], "val_loss": [1.9369446209498815, 1.8908689362662179, 1.307302474975586, 1.1158897536141532, 0.6906008209500994, 0.6055912290300641, 0.5686541966029576, 0.5608540262494769, 0.5520930971418109, 0.5200957230159214, 0.47980155263628277, 0.5054289783750262, 0.44514036178588867, 0.4303584950310843, 0.46678670815059115, 0.45046688829149517, 0.4538530281611851, 0.46561780997685026, 0.414344779082707, 0.40162192072187153, 0.4297895686967032, 0.4218066760471889, 0.4037003687449864, 0.38861255986349924, 0.40007610831941876, 0.4099568894931248, 0.41608454499925884, 0.3943234256335667, 0.39241897208350046], "val_accuracy": [0.41333332657814026, 0.2876666784286499, 0.5353333353996277, 0.5546666383743286, 0.6753333210945129, 0.7293333411216736, 0.746666669845581, 0.7443333268165588, 0.7450000047683716, 0.7419999837875366, 0.781333327293396, 0.7803333401679993, 0.8046666383743286, 0.8146666884422302, 0.793666660785675, 0.796999990940094, 0.7906666398048401, 0.7946666479110718, 0.8193333148956299, 0.824999988079071, 0.8140000104904175, 0.8113333582878113, 0.8330000042915344, 0.8396666646003723, 0.8146666884422302, 0.8180000185966492, 0.8226666450500488, 0.8376666903495789, 0.8286666870117188]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [2, 5, 2, 1, 2, 4, 4, 4, 1, 3, 4, 8, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 0, 3, 2, 0, 0, 0], [55, 56, 4, 35, 74, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.8119999766349792, "mapping_values": [1, 1, 1, 0, 1, 0, 4, 4, 2, 2, 0, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.square(grad), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.math.sqrt(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.2305817759945534, 2.1434041719080166, 2.076154620073349, 1.8633714489035555, 1.33652724740748, 0.9218161905509386, 0.796406548493385, 0.7266672610244604, 0.6872913985834335, 0.636164278583189, 0.6379369274106528, 0.5978431452881029, 0.6012524090202461, 0.5580858295903214, 0.5670706910731818, 0.5610740345781821, 0.55826874768745, 0.523276861144441, 0.5197204334577471, 0.48719542423070555, 0.501061577960532, 0.5108078169336157, 0.5025848239687818, 0.4621823512528472, 0.4729872511960827, 0.4524676806229831, 0.46914094746341134, 0.4428801749518141, 0.44177805035499423], "accuracy": [0.2296922504901886, 0.2782987654209137, 0.26059964299201965, 0.3743230700492859, 0.5386342406272888, 0.6590939164161682, 0.7004358768463135, 0.718399167060852, 0.7409853339195251, 0.7584202885627747, 0.7559106945991516, 0.7757231593132019, 0.7736098170280457, 0.7909126877784729, 0.7869502305984497, 0.791441023349762, 0.7893276810646057, 0.8053097128868103, 0.8123101592063904, 0.8201030492782593, 0.8108572363853455, 0.8107251524925232, 0.8125742673873901, 0.8256505131721497, 0.8261788487434387, 0.8335754871368408, 0.8222163319587708, 0.8362171649932861, 0.8343679904937744], "val_loss": [1.9369446209498815, 1.8908689362662179, 1.307302474975586, 1.1158897536141532, 0.6906008209500994, 0.6055912290300641, 0.5686541966029576, 0.5608540262494769, 0.5520930971418109, 0.5200957230159214, 0.47980155263628277, 0.5054289783750262, 0.44514036178588867, 0.4303584950310843, 0.46678670815059115, 0.45046688829149517, 0.4538530281611851, 0.46561780997685026, 0.414344779082707, 0.40162192072187153, 0.4297895686967032, 0.4218066760471889, 0.4037003687449864, 0.38861255986349924, 0.40007610831941876, 0.4099568894931248, 0.41608454499925884, 0.3943234256335667, 0.39241897208350046], "val_accuracy": [0.41333332657814026, 0.2876666784286499, 0.5353333353996277, 0.5546666383743286, 0.6753333210945129, 0.7293333411216736, 0.746666669845581, 0.7443333268165588, 0.7450000047683716, 0.7419999837875366, 0.781333327293396, 0.7803333401679993, 0.8046666383743286, 0.8146666884422302, 0.793666660785675, 0.796999990940094, 0.7906666398048401, 0.7946666479110718, 0.8193333148956299, 0.824999988079071, 0.8140000104904175, 0.8113333582878113, 0.8330000042915344, 0.8396666646003723, 0.8146666884422302, 0.8180000185966492, 0.8226666450500488, 0.8376666903495789, 0.8286666870117188]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0], [6, 0, 2, 6, 2, 4, 9, 4, 3, 3, 4, 8, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 0, 3, 1, 3, 0, 0], [62, 32, 50, 35, 74, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.8119999766349792, "mapping_values": [1, 1, 1, 0, 1, 0, 16, 16, 9, 7, 2, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.negative(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, grad), grad), tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))))))), grad)), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.math.sqrt(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.2305817759945534, 2.1434041719080166, 2.076154620073349, 1.8633714489035555, 1.33652724740748, 0.9218161905509386, 0.796406548493385, 0.7266672610244604, 0.6872913985834335, 0.636164278583189, 0.6379369274106528, 0.5978431452881029, 0.6012524090202461, 0.5580858295903214, 0.5670706910731818, 0.5610740345781821, 0.55826874768745, 0.523276861144441, 0.5197204334577471, 0.48719542423070555, 0.501061577960532, 0.5108078169336157, 0.5025848239687818, 0.4621823512528472, 0.4729872511960827, 0.4524676806229831, 0.46914094746341134, 0.4428801749518141, 0.44177805035499423], "accuracy": [0.2296922504901886, 0.2782987654209137, 0.26059964299201965, 0.3743230700492859, 0.5386342406272888, 0.6590939164161682, 0.7004358768463135, 0.718399167060852, 0.7409853339195251, 0.7584202885627747, 0.7559106945991516, 0.7757231593132019, 0.7736098170280457, 0.7909126877784729, 0.7869502305984497, 0.791441023349762, 0.7893276810646057, 0.8053097128868103, 0.8123101592063904, 0.8201030492782593, 0.8108572363853455, 0.8107251524925232, 0.8125742673873901, 0.8256505131721497, 0.8261788487434387, 0.8335754871368408, 0.8222163319587708, 0.8362171649932861, 0.8343679904937744], "val_loss": [1.9369446209498815, 1.8908689362662179, 1.307302474975586, 1.1158897536141532, 0.6906008209500994, 0.6055912290300641, 0.5686541966029576, 0.5608540262494769, 0.5520930971418109, 0.5200957230159214, 0.47980155263628277, 0.5054289783750262, 0.44514036178588867, 0.4303584950310843, 0.46678670815059115, 0.45046688829149517, 0.4538530281611851, 0.46561780997685026, 0.414344779082707, 0.40162192072187153, 0.4297895686967032, 0.4218066760471889, 0.4037003687449864, 0.38861255986349924, 0.40007610831941876, 0.4099568894931248, 0.41608454499925884, 0.3943234256335667, 0.39241897208350046], "val_accuracy": [0.41333332657814026, 0.2876666784286499, 0.5353333353996277, 0.5546666383743286, 0.6753333210945129, 0.7293333411216736, 0.746666669845581, 0.7443333268165588, 0.7450000047683716, 0.7419999837875366, 0.781333327293396, 0.7803333401679993, 0.8046666383743286, 0.8146666884422302, 0.793666660785675, 0.796999990940094, 0.7906666398048401, 0.7946666479110718, 0.8193333148956299, 0.824999988079071, 0.8140000104904175, 0.8113333582878113, 0.8330000042915344, 0.8396666646003723, 0.8146666884422302, 0.8180000185966492, 0.8226666450500488, 0.8376666903495789, 0.8286666870117188]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1], [6, 0, 2, 6, 2, 4, 9, 4, 3, 3, 4, 8, 8, 1, 1, 8, 9, 0], [0, 3, 3, 3, 0, 3, 1, 0, 0, 0], [53, 32, 50, 35, 74, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.8119999766349792, "mapping_values": [1, 1, 1, 0, 1, 0, 21, 21, 12, 9, 5, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))), tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, alpha))))))), tf.math.pow(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.math.sqrt(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.2305817759945534, 2.1434041719080166, 2.076154620073349, 1.8633714489035555, 1.33652724740748, 0.9218161905509386, 0.796406548493385, 0.7266672610244604, 0.6872913985834335, 0.636164278583189, 0.6379369274106528, 0.5978431452881029, 0.6012524090202461, 0.5580858295903214, 0.5670706910731818, 0.5610740345781821, 0.55826874768745, 0.523276861144441, 0.5197204334577471, 0.48719542423070555, 0.501061577960532, 0.5108078169336157, 0.5025848239687818, 0.4621823512528472, 0.4729872511960827, 0.4524676806229831, 0.46914094746341134, 0.4428801749518141, 0.44177805035499423], "accuracy": [0.2296922504901886, 0.2782987654209137, 0.26059964299201965, 0.3743230700492859, 0.5386342406272888, 0.6590939164161682, 0.7004358768463135, 0.718399167060852, 0.7409853339195251, 0.7584202885627747, 0.7559106945991516, 0.7757231593132019, 0.7736098170280457, 0.7909126877784729, 0.7869502305984497, 0.791441023349762, 0.7893276810646057, 0.8053097128868103, 0.8123101592063904, 0.8201030492782593, 0.8108572363853455, 0.8107251524925232, 0.8125742673873901, 0.8256505131721497, 0.8261788487434387, 0.8335754871368408, 0.8222163319587708, 0.8362171649932861, 0.8343679904937744], "val_loss": [1.9369446209498815, 1.8908689362662179, 1.307302474975586, 1.1158897536141532, 0.6906008209500994, 0.6055912290300641, 0.5686541966029576, 0.5608540262494769, 0.5520930971418109, 0.5200957230159214, 0.47980155263628277, 0.5054289783750262, 0.44514036178588867, 0.4303584950310843, 0.46678670815059115, 0.45046688829149517, 0.4538530281611851, 0.46561780997685026, 0.414344779082707, 0.40162192072187153, 0.4297895686967032, 0.4218066760471889, 0.4037003687449864, 0.38861255986349924, 0.40007610831941876, 0.4099568894931248, 0.41608454499925884, 0.3943234256335667, 0.39241897208350046], "val_accuracy": [0.41333332657814026, 0.2876666784286499, 0.5353333353996277, 0.5546666383743286, 0.6753333210945129, 0.7293333411216736, 0.746666669845581, 0.7443333268165588, 0.7450000047683716, 0.7419999837875366, 0.781333327293396, 0.7803333401679993, 0.8046666383743286, 0.8146666884422302, 0.793666660785675, 0.796999990940094, 0.7906666398048401, 0.7946666479110718, 0.8193333148956299, 0.824999988079071, 0.8140000104904175, 0.8113333582878113, 0.8330000042915344, 0.8396666646003723, 0.8146666884422302, 0.8180000185966492, 0.8226666450500488, 0.8376666903495789, 0.8286666870117188]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], [6, 0, 2, 2, 0, 0, 9, 9, 6, 3, 4, 8, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 0, 3, 1, 0, 0, 0], [95, 32, 50, 35, 74, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.7948571443557739, "mapping_values": [1, 1, 1, 0, 1, 0, 10, 10, 7, 3, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.negative(tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.negative(tf.math.add(beta, grad)), tf.math.negative(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.970843431263426, 1.321795056162572, 1.0459799983120077, 0.8523121762663035, 0.826462353611068, 0.7628435667054592, 0.7069783216973873, 0.693464456366951, 0.7224679686893735, 0.6498203627059583, 0.6235036389576745, 0.6213928203242031, 0.5886690472300027, 0.5733747544022221, 0.5586108620203623, 0.5590886198660292, 0.5568992632522779, 0.5480650954431688], "accuracy": [0.33839651942253113, 0.5357284545898438, 0.6203936338424683, 0.6793025732040405, 0.6970016956329346, 0.709549605846405, 0.7275128960609436, 0.7310791015625, 0.7219653725624084, 0.743891179561615, 0.7600052952766418, 0.7647602558135986, 0.7808743715286255, 0.7884030938148499, 0.7869502305984497, 0.7864218950271606, 0.7909126877784729, 0.7907806038856506], "val_loss": [1.4912396499088831, 0.8909995896475655, 0.7372230291366577, 0.6364895105361938, 0.573955740247454, 0.5901703153337751, 0.5702282190322876, 0.5646999733788627, 0.5258640221187046, 0.4976195437567575, 0.5403117111751011, 0.48964105333600727, 0.4562241520200457, 0.4721344028200422, 0.47536259038107737, 0.4545488442693438, 0.45444731201444355, 0.4515594414302281], "val_accuracy": [0.4259999990463257, 0.6356666684150696, 0.6483333110809326, 0.7179999947547913, 0.7426666617393494, 0.7116666436195374, 0.737666666507721, 0.7483333349227905, 0.7563333511352539, 0.7776666879653931, 0.750333309173584, 0.7950000166893005, 0.8050000071525574, 0.7940000295639038, 0.7776666879653931, 0.8050000071525574, 0.79666668176651, 0.8043333292007446]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], [6, 6, 2, 1, 6, 4, 2, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 3, 0, 3, 0, 1, 0, 0, 1], [55, 56, 7, 92, 74, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.7948571443557739, "mapping_values": [1, 1, 1, 0, 1, 0, 21, 21, 10, 11, 5, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.divide_no_nan(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.divide_no_nan(grad, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.pow(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))), grad))), tf.math.add(beta, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)))), tf.math.add(beta, alpha))), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), alpha))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.970843431263426, 1.321795056162572, 1.0459799983120077, 0.8523121762663035, 0.826462353611068, 0.7628435667054592, 0.7069783216973873, 0.693464456366951, 0.7224679686893735, 0.6498203627059583, 0.6235036389576745, 0.6213928203242031, 0.5886690472300027, 0.5733747544022221, 0.5586108620203623, 0.5590886198660292, 0.5568992632522779, 0.5480650954431688], "accuracy": [0.33839651942253113, 0.5357284545898438, 0.6203936338424683, 0.6793025732040405, 0.6970016956329346, 0.709549605846405, 0.7275128960609436, 0.7310791015625, 0.7219653725624084, 0.743891179561615, 0.7600052952766418, 0.7647602558135986, 0.7808743715286255, 0.7884030938148499, 0.7869502305984497, 0.7864218950271606, 0.7909126877784729, 0.7907806038856506], "val_loss": [1.4912396499088831, 0.8909995896475655, 0.7372230291366577, 0.6364895105361938, 0.573955740247454, 0.5901703153337751, 0.5702282190322876, 0.5646999733788627, 0.5258640221187046, 0.4976195437567575, 0.5403117111751011, 0.48964105333600727, 0.4562241520200457, 0.4721344028200422, 0.47536259038107737, 0.4545488442693438, 0.45444731201444355, 0.4515594414302281], "val_accuracy": [0.4259999990463257, 0.6356666684150696, 0.6483333110809326, 0.7179999947547913, 0.7426666617393494, 0.7116666436195374, 0.737666666507721, 0.7483333349227905, 0.7563333511352539, 0.7776666879653931, 0.750333309173584, 0.7950000166893005, 0.8050000071525574, 0.7940000295639038, 0.7776666879653931, 0.8050000071525574, 0.79666668176651, 0.8043333292007446]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [0, 9, 2, 1, 8, 4, 9, 6, 1, 4, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 1, 3, 0, 3, 2, 3, 0, 0], [76, 56, 2, 35, 74, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [82, 25, 61, 71, 34]], "fitness": -0.20085714757442474, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 2, 0, 1, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.math.sqrt(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.376210907037468, 2.2376335447868416, 2.5157930382081246, 2.3048006191765076, 2.2903333104533794, 2.5459404889193538, 2.3092527759231047, 2.304012933537598, 2.3032864226231786, 2.3034751993113063], "accuracy": [0.20538897812366486, 0.18082155287265778, 0.14912164211273193, 0.09747721254825592, 0.12759213149547577, 0.21833311021327972, 0.0956280529499054, 0.10130762308835983, 0.1022322028875351, 0.09800554811954498], "val_loss": [2.03714759009225, 1.9678778648376465, 1.975965976715088, 1.9725558417184013, 1.83110134942191, 1.9845903941563197, 1.975574152810233, 1.9741796084812708, 1.9738212312970842, 1.9737067222595215], "val_accuracy": [0.10233332961797714, 0.09966666996479034, 0.09833333641290665, 0.09833333641290665, 0.19699999690055847, 0.0976666659116745, 0.09733333438634872, 0.09733333438634872, 0.0976666659116745, 0.10400000214576721]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], [8, 6, 2, 1, 6, 4, 9, 4, 1, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 0, 3, 1, 2, 0, 0], [62, 32, 50, 35, 74, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 3, 4, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 8, 6, 2, 1, 1, 0, 1, 0, 12, 6, 6, 2], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.sqrt(tf.math.divide_no_nan(grad, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.pow(tf.math.add(beta, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), grad)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.math.pow(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(sigma, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), tf.math.pow(alpha, beta)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [6, 0, 2, 5, 2, 4, 9, 4, 3, 3, 4, 8, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 3, 3, 1, 0, 0, 0], [55, 72, 4, 35, 74, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 0, 8, 6, 7, 4, 7], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 17, 17, 10, 7, 1, 1, 0, 0, 0, 0, 12, 7, 5, 2], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(grad), tf.math.add(tf.math.square(tf.math.add(tf.math.add(beta, grad), tf.math.pow(tf.math.add(beta, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, grad)))))))))), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.negative(tf.math.sqrt(tf.math.divide_no_nan(alpha, tf.math.add(tf.math.pow(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), sigma), tf.math.add(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), alpha))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], [5, 1, 2, 1, 0, 5, 9, 9, 1, 1, 1, 2, 8, 1, 1, 8, 9, 0], [3, 3, 3, 2, 0, 3, 2, 3, 0, 0], [55, 61, 4, 35, 74, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [9, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 10, 10, 8, 2, 2, 1, 0, 0, 0, 0, 1, 1, 0, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))), grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3028079690934486, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1], [6, 6, 2, 1, 6, 4, 9, 0, 1, 1, 4, 6, 8, 1, 1, 8, 9, 0], [0, 3, 3, 0, 0, 3, 0, 1, 0, 0], [55, 56, 4, 92, 74, 78, 59], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 8, 6, 4, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.divide_no_nan(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.sqrt(alpha), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [6, 0, 2, 1, 8, 6, 9, 4, 1, 3, 4, 8, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 0, 3, 1, 0, 0, 0], [55, 56, 4, 35, 74, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1], [0, 3, 8, 6, 7, 4, 7, 7, 4, 5, 0, 5, 1, 1, 2], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 26, 15, 11, 3], "tree_depth": 27, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.sqrt(tf.math.divide_no_nan(alpha, tf.math.add(tf.math.pow(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), sigma), tf.math.add(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.pow(alpha, beta), tf.math.square(tf.math.negative(tf.math.square(tf.math.subtract(tf.math.subtract(beta, sigma), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.add(sigma, beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1], [6, 0, 2, 1, 2, 4, 9, 4, 1, 3, 4, 8, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 0, 3, 1, 0, 0, 0], [55, 56, 4, 92, 74, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [66, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.sqrt(alpha), tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], [6, 6, 2, 1, 3, 4, 6, 4, 1, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 0, 3, 1, 1, 0, 0], [62, 44, 50, 35, 74, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [8, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 2, 3, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, grad)), grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07740060985088348, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], [6, 6, 2, 1, 6, 4, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 2, 0, 3, 1, 0, 0, 0], [62, 32, 50, 35, 74, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 21, 21, 11, 10, 5, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, grad), tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, beta))), tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, grad))), alpha), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09787346422672272, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [1, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1], [6, 0, 2, 1, 6, 4, 9, 4, 1, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 0, 0, 3, 0, 1, 0, 0], [55, 56, 4, 92, 74, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [0, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [23, 25, 61, 71, 34]], "fitness": -0.09942857176065445, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 2, 2, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(4.70911357e-03, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.305640522798511, 2.3252613819695704, 2.372027005029471, 2.4400733011336673, 2.5633998855607953, 2.737738541734217, 2.9482833299308076, 3.2664013030490917, 3.612149058583705, 4.000502711699041, 4.4934625833451145], "accuracy": [0.09311848133802414, 0.08479725569486618, 0.09192973375320435, 0.10130762308835983, 0.09840179979801178, 0.09945846349000931, 0.10302469879388809, 0.0948355570435524, 0.10579843819141388, 0.09840179979801178, 0.09866596013307571], "val_loss": [1.9757695198059082, 1.985865252358573, 2.0126459257943288, 2.058727060045515, 2.128861631665911, 2.228179999760219, 2.361226899283273, 2.5317066056387767, 2.7421278953552246, 2.9937077249799455, 3.2865139416285922], "val_accuracy": [0.046666666865348816, 0.09399999678134918, 0.0963333323597908, 0.0989999994635582, 0.0989999994635582, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [4, 8, 4, 1, 8, 4, 3, 6, 1, 4, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 2, 0, 3, 2, 3, 0, 0], [55, 56, 4, 92, 74, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], [0, 3, 8, 6, 7, 4, 3, 3, 3], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 17, 9, 8, 2], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(tf.math.pow(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), sigma), tf.math.multiply(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32), alpha)), tf.math.multiply(tf.math.multiply(beta, beta), sigma)))))", "other_info": {"loss": [2.302795580806135, 2.302348853511707, 2.303368303517876, 2.3017178682713477, 2.301709572558138, 2.3026736051556678], "accuracy": [0.09417514503002167, 0.08585391938686371, 0.09206181764602661, 0.09074098616838455, 0.0948355570435524, 0.08889182657003403], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1], [4, 8, 3, 1, 8, 4, 3, 6, 1, 4, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 0, 3, 1, 0, 0, 0], [62, 32, 50, 35, 74, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [3, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 3, 3, 1, 2, 0, 9, 9, 5, 4, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(grad, tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(grad, tf.math.sqrt(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.sqrt(tf.math.add(beta, grad)), grad)), tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.302795580806135, 2.302348853511707, 2.303368303517876, 2.3017178682713477, 2.301709572558138, 2.3026736051556678], "accuracy": [0.09417514503002167, 0.08585391938686371, 0.09206181764602661, 0.09074098616838455, 0.0948355570435524, 0.08889182657003403], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}]