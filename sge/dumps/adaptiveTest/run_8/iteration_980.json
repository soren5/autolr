[{"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 1, 4, 4, 3, 2, 1, 8, 3, 2, 0, 5, 3, 2, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 0, 2, 1, 2, 1, 0, 2, 0, 1, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [68, 50, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 5, 9, 6, 2, 4, 9, 4, 3, 3, 4, 8, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 3, 1, 0, 0, 0], [53, 32, 50, 35, 74, 78], [1, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 3, 6, 7, 4], [2, 0, 3, 2, 1, 1, 3, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [47, 9, 61, 71, 34]], "fitness": -0.8360000252723694, "mapping_values": [1, 6, 6, 3, 3, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2678020000457764, 2.079974412918091, 2.0241663455963135, 1.6302334070205688, 1.008152961730957, 0.8031867146492004, 0.7198636531829834, 0.6711629629135132, 0.6379609107971191, 0.6283681392669678, 0.6018128991127014, 0.5851598381996155, 0.5456218123435974, 0.5549502968788147, 0.5227957963943481, 0.5344482064247131, 0.5047735571861267, 0.4940209984779358, 0.5069642066955566, 0.48458269238471985, 0.47784900665283203, 0.46900674700737, 0.4757557511329651, 0.4598658084869385, 0.432032972574234, 0.44428572058677673, 0.4391552209854126, 0.4271296262741089, 0.44289061427116394, 0.41847318410873413, 0.42123809456825256, 0.40391382575035095, 0.3841678202152252, 0.42050570249557495], "accuracy": [0.2608638107776642, 0.26284506916999817, 0.36903974413871765, 0.45344075560569763, 0.6312243938446045, 0.6959450244903564, 0.7342491149902344, 0.7524765729904175, 0.7540615797042847, 0.7671377658843994, 0.7757231593132019, 0.7724210619926453, 0.7952714562416077, 0.7994980812072754, 0.8120459914207458, 0.8012151718139648, 0.8103289008140564, 0.8138951063156128, 0.805177628993988, 0.81548011302948, 0.8241975903511047, 0.832650899887085, 0.8261788487434387, 0.8301413059234619, 0.8449346423149109, 0.8363492488861084, 0.835160493850708, 0.841500461101532, 0.8383304476737976, 0.842028796672821, 0.8485008478164673, 0.8504821062088013, 0.8576145768165588, 0.8426892161369324], "val_loss": [2.145878553390503, 2.260852098464966, 2.072144031524658, 0.8996918201446533, 0.8277946710586548, 0.6456276178359985, 0.6964676380157471, 0.5906504392623901, 0.5593903064727783, 0.538194477558136, 0.5469589233398438, 0.5002888441085815, 0.5418487191200256, 0.5048218965530396, 0.5073664784431458, 0.45081275701522827, 0.45789143443107605, 0.5208860635757446, 0.46443334221839905, 0.43807077407836914, 0.4357127249240875, 0.42793163657188416, 0.4534853994846344, 0.4529637098312378, 0.43218740820884705, 0.5033679008483887, 0.44476228952407837, 0.43249964714050293, 0.42299628257751465, 0.5007543563842773, 0.4437255859375, 0.43131908774375916, 0.43405795097351074, 0.4254204034805298], "val_accuracy": [0.2593333423137665, 0.36533331871032715, 0.4726666808128357, 0.6549999713897705, 0.6923333406448364, 0.7536666393280029, 0.7096666693687439, 0.7649999856948853, 0.7856666445732117, 0.7950000166893005, 0.7879999876022339, 0.8073333501815796, 0.7933333516120911, 0.8050000071525574, 0.8050000071525574, 0.8346666693687439, 0.8316666483879089, 0.7710000276565552, 0.8209999799728394, 0.8403333425521851, 0.8376666903495789, 0.8429999947547913, 0.8320000171661377, 0.8199999928474426, 0.843666672706604, 0.8140000104904175, 0.82833331823349, 0.8453333377838135, 0.847000002861023, 0.8009999990463257, 0.8276666402816772, 0.843999981880188, 0.8306666612625122, 0.8353333473205566]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 1, 4, 7, 4, 2, 1, 2, 3, 2, 0, 5, 3, 2, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 1, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [68, 50, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 5, 9, 6, 2, 4, 9, 4, 3, 3, 4, 8, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 3, 1, 0, 0, 0], [53, 32, 50, 35, 74, 78], [1, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 3, 6, 7, 4], [2, 0, 3, 2, 1, 1, 3, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [47, 9, 61, 71, 34]], "fitness": -0.8254285454750061, "mapping_values": [1, 36, 36, 22, 14, 7, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 44, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.add(tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)), grad)))))), tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))))), tf.math.square(tf.math.add(alpha, tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))))), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2678072452545166, 2.079263925552368, 2.0207436084747314, 1.7154403924942017, 1.066287636756897, 0.8267835974693298, 0.7012966275215149, 0.6723191738128662, 0.6689602732658386, 0.5926554203033447, 0.6124753355979919, 0.5990418195724487, 0.5554362535476685, 0.5527403354644775, 0.5188572406768799, 0.5424907207489014, 0.5144832730293274, 0.49393430352211, 0.5034299492835999, 0.49017032980918884, 0.4913471043109894, 0.4730738401412964, 0.4889651834964752, 0.4446476399898529, 0.4601566791534424, 0.44264206290245056, 0.45052602887153625, 0.42636018991470337, 0.4315342605113983, 0.43161147832870483], "accuracy": [0.2608638107776642, 0.2627129852771759, 0.37207767367362976, 0.421740859746933, 0.6262052655220032, 0.6910579800605774, 0.7408532500267029, 0.7506273984909058, 0.7450799345970154, 0.7778365015983582, 0.7693831920623779, 0.7693831920623779, 0.7906485199928284, 0.7960638999938965, 0.8100647330284119, 0.8013472557067871, 0.8064984679222107, 0.817461371421814, 0.809140145778656, 0.8150838613510132, 0.8197067975997925, 0.8286884427070618, 0.8161405324935913, 0.8359529972076416, 0.8315942287445068, 0.8360850811004639, 0.8273676037788391, 0.8391229510307312, 0.8442742228507996, 0.8360850811004639], "val_loss": [2.145789861679077, 2.260929822921753, 2.0644643306732178, 1.306005835533142, 0.7509500980377197, 0.6617872714996338, 0.715833306312561, 0.5908644199371338, 0.5570784211158752, 0.53741055727005, 0.5151336193084717, 0.5083176493644714, 0.5182961225509644, 0.4934057891368866, 0.4967830777168274, 0.45669519901275635, 0.46235913038253784, 0.5201389789581299, 0.48309001326560974, 0.42637142539024353, 0.43074893951416016, 0.4721902310848236, 0.4548279643058777, 0.4367269277572632, 0.42810767889022827, 0.5278869867324829, 0.47306397557258606, 0.4221917390823364, 0.45873507857322693, 0.5300078988075256], "val_accuracy": [0.2593333423137665, 0.367000013589859, 0.37299999594688416, 0.6323333382606506, 0.7023333311080933, 0.7553333044052124, 0.721666693687439, 0.7720000147819519, 0.7876666784286499, 0.7983333468437195, 0.8043333292007446, 0.8080000281333923, 0.8076666593551636, 0.8116666674613953, 0.8183333277702332, 0.8333333134651184, 0.8259999752044678, 0.8069999814033508, 0.8140000104904175, 0.843666672706604, 0.8416666388511658, 0.8206666707992554, 0.8216666579246521, 0.8423333168029785, 0.8476666808128357, 0.8056666851043701, 0.8169999718666077, 0.8446666598320007, 0.828000009059906, 0.7886666655540466]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 8, 4, 7, 4, 2, 1, 2, 3, 2, 1, 5, 3, 9, 1, 9, 3, 2, 0, 9, 5, 2, 5, 2, 1, 8], [0, 0, 2, 2, 0, 2, 0, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [19, 85, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 5, 9, 6, 2, 4, 9, 4, 3, 3, 4, 8, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 3, 1, 0, 0, 0], [53, 32, 50, 35, 74, 78], [1, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 3, 6, 7, 4], [2, 0, 3, 2, 1, 1, 3, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [47, 9, 61, 71, 34]], "fitness": -0.8180000185966492, "mapping_values": [1, 26, 26, 16, 10, 7, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))))))), grad)))), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)))))), alpha))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.267813205718994, 2.0775272846221924, 2.019097328186035, 1.4560197591781616, 0.9632565975189209, 0.8129560351371765, 0.7083602547645569, 0.6714105606079102, 0.6448841094970703, 0.6369802355766296, 0.5993171334266663, 0.565459132194519, 0.5574494004249573, 0.5654491782188416, 0.5326173305511475, 0.5234184861183167, 0.5045692324638367, 0.49945130944252014, 0.5009632706642151, 0.4945421516895294, 0.47700566053390503, 0.46633997559547424, 0.48357513546943665, 0.45041218400001526, 0.4328356385231018, 0.4639711081981659, 0.44326695799827576, 0.4175969362258911, 0.4214595556259155, 0.42511722445487976, 0.4227192997932434, 0.40525564551353455, 0.38268232345581055, 0.4012100100517273, 0.40877002477645874, 0.38412541151046753, 0.39992764592170715, 0.39867639541625977, 0.37383198738098145, 0.36029210686683655, 0.37290462851524353, 0.36932408809661865, 0.36041948199272156, 0.3430294096469879, 0.34199288487434387, 0.3612493872642517], "accuracy": [0.2608638107776642, 0.2616563141345978, 0.3704926669597626, 0.50785893201828, 0.641791045665741, 0.6907938122749329, 0.7322678565979004, 0.7464007139205933, 0.7568352818489075, 0.76106196641922, 0.7736098170280457, 0.7882710099220276, 0.7918372750282288, 0.7955356240272522, 0.7989697456359863, 0.8055738806724548, 0.8094043135643005, 0.8124422430992126, 0.8136309385299683, 0.8123101592063904, 0.8277638554573059, 0.8319904804229736, 0.8247259259223938, 0.8321225643157959, 0.8446704745292664, 0.8309338092803955, 0.8330471515655518, 0.8457271456718445, 0.8499537706375122, 0.8396512866020203, 0.8437458872795105, 0.8539162874221802, 0.8623695969581604, 0.8555012345314026, 0.8465195894241333, 0.86118084192276, 0.8576145768165588, 0.8481045961380005, 0.8636903762817383, 0.8668603897094727, 0.8565579056739807, 0.8677849769592285, 0.8697662353515625, 0.8730682730674744, 0.8749174475669861, 0.8677849769592285], "val_loss": [2.146152973175049, 2.260331153869629, 1.9937516450881958, 1.0281630754470825, 0.719159722328186, 0.6856441497802734, 0.701874852180481, 0.6142874360084534, 0.5532932281494141, 0.5399044752120972, 0.534779965877533, 0.527863085269928, 0.5477421283721924, 0.4991293251514435, 0.5228978395462036, 0.45783454179763794, 0.48855486512184143, 0.4755866825580597, 0.46443140506744385, 0.4771578013896942, 0.43092113733291626, 0.4355364441871643, 0.4429311156272888, 0.438835084438324, 0.43757739663124084, 0.4910828471183777, 0.4270651936531067, 0.4131960868835449, 0.44349902868270874, 0.49682703614234924, 0.4278319776058197, 0.41307246685028076, 0.45503219962120056, 0.43567031621932983, 0.42314982414245605, 0.4188045263290405, 0.38835564255714417, 0.40309473872184753, 0.42050424218177795, 0.42431640625, 0.40190428495407104, 0.4507502317428589, 0.4141307771205902, 0.40808558464050293, 0.4110642075538635, 0.41450566053390503], "val_accuracy": [0.2593333423137665, 0.36399999260902405, 0.5173333287239075, 0.6290000081062317, 0.7106666564941406, 0.7456666827201843, 0.7226666808128357, 0.7440000176429749, 0.7933333516120911, 0.7956666946411133, 0.7943333387374878, 0.7923333048820496, 0.7979999780654907, 0.8140000104904175, 0.8059999942779541, 0.8240000009536743, 0.8163333535194397, 0.8286666870117188, 0.8273333311080933, 0.8100000023841858, 0.8386666774749756, 0.8343333601951599, 0.8366666436195374, 0.8343333601951599, 0.8423333168029785, 0.8176666498184204, 0.8399999737739563, 0.846666693687439, 0.8410000205039978, 0.8013333082199097, 0.8346666693687439, 0.8489999771118164, 0.8336666822433472, 0.8299999833106995, 0.8443333506584167, 0.8456666469573975, 0.8553333282470703, 0.8533333539962769, 0.8460000157356262, 0.8460000157356262, 0.8556666374206543, 0.8293333053588867, 0.8479999899864197, 0.847000002861023, 0.8529999852180481, 0.8379999995231628]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 1, 8, 1, 4, 2, 1, 2, 8, 2, 0, 5, 8, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [0, 1, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [68, 50, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 5, 9, 6, 2, 4, 9, 4, 3, 3, 4, 8, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 3, 1, 0, 0, 0], [53, 32, 50, 35, 74, 78], [1, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 3, 6, 7, 4], [2, 0, 3, 2, 1, 1, 3, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [47, 9, 61, 71, 34]], "fitness": -0.8094285726547241, "mapping_values": [1, 17, 17, 9, 8, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.sqrt(tf.math.subtract(tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(alpha, grad)))), tf.math.add(alpha, tf.math.add(grad, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.sqrt(tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.267889976501465, 2.083362579345703, 2.0436933040618896, 1.7993261814117432, 1.4236599206924438, 1.2178715467453003, 0.8583365082740784, 0.7990625500679016, 0.7154856324195862, 0.7347655892372131, 0.6606453657150269, 0.6469601392745972, 0.5883325338363647, 0.6101951599121094, 0.572137176990509, 0.5950473546981812, 0.544370174407959, 0.5217931866645813, 0.546928346157074, 0.518423855304718, 0.5012542009353638, 0.4997226595878601, 0.5078631043434143, 0.45376065373420715, 0.49062126874923706, 0.4661862850189209, 0.46652498841285706, 0.42926695942878723, 0.4444577097892761, 0.4348777234554291, 0.444324254989624, 0.4275912344455719, 0.4164249300956726, 0.4077897071838379, 0.38918396830558777, 0.40167927742004395, 0.4080564081668854], "accuracy": [0.2607317268848419, 0.2623167335987091, 0.3723418414592743, 0.37207767367362976, 0.4831594228744507, 0.5752212405204773, 0.6818121671676636, 0.7000396251678467, 0.7298903465270996, 0.7230220437049866, 0.750759482383728, 0.7553823590278625, 0.7803460359573364, 0.7671377658843994, 0.7907806038856506, 0.7714964747428894, 0.7907806038856506, 0.8062343001365662, 0.7950072884559631, 0.8072909712791443, 0.8181217908859253, 0.8178576231002808, 0.811649739742279, 0.8388587832450867, 0.8228767514228821, 0.8300092220306396, 0.828292191028595, 0.8422929644584656, 0.845859169960022, 0.8424250483512878, 0.8367455005645752, 0.8449346423149109, 0.8469158411026001, 0.844010055065155, 0.8582749962806702, 0.8506141901016235, 0.8518029451370239], "val_loss": [2.1457645893096924, 2.263375997543335, 2.139601469039917, 1.6633758544921875, 1.3649373054504395, 0.7702556848526001, 0.7711216807365417, 0.7147339582443237, 0.6729640364646912, 0.5910205245018005, 0.5566776394844055, 0.5669019222259521, 0.528029203414917, 0.5472604036331177, 0.5484907031059265, 0.48870858550071716, 0.4731523096561432, 0.5593072772026062, 0.47491776943206787, 0.4453977048397064, 0.44190284609794617, 0.5046728849411011, 0.43765392899513245, 0.42370328307151794, 0.437796413898468, 0.489460289478302, 0.4259897470474243, 0.4151003360748291, 0.42500171065330505, 0.5214325785636902, 0.4382205307483673, 0.40042033791542053, 0.41859346628189087, 0.43559974431991577, 0.4106766879558563, 0.44350147247314453, 0.3923764228820801], "val_accuracy": [0.25999999046325684, 0.36133334040641785, 0.312333345413208, 0.37400001287460327, 0.5299999713897705, 0.7070000171661377, 0.6956666707992554, 0.7123333215713501, 0.7386666536331177, 0.7770000100135803, 0.7929999828338623, 0.7833333611488342, 0.7996666431427002, 0.7983333468437195, 0.7879999876022339, 0.8116666674613953, 0.8216666579246521, 0.753333330154419, 0.8216666579246521, 0.8356666564941406, 0.8379999995231628, 0.8016666769981384, 0.8386666774749756, 0.8450000286102295, 0.8410000205039978, 0.8096666932106018, 0.843999981880188, 0.8523333072662354, 0.8433333039283752, 0.7873333096504211, 0.8293333053588867, 0.8586666584014893, 0.8446666598320007, 0.8343333601951599, 0.8566666841506958, 0.8343333601951599, 0.8566666841506958]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 1, 4, 5, 4, 2, 1, 2, 2, 2, 0, 5, 3, 2, 5, 3, 2, 2, 0, 5, 5, 3, 5, 2, 1, 8], [0, 1, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [68, 89, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 5, 9, 6, 2, 4, 9, 4, 3, 3, 4, 8, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 3, 1, 0, 0, 0], [53, 32, 50, 35, 74, 78], [1, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 1, 3, 6, 7, 4], [2, 3, 3, 2, 1, 1, 3, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [47, 9, 61, 71, 34]], "fitness": -0.3677142858505249, "mapping_values": [1, 34, 34, 20, 14, 6, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 0], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.square(tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)), tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, grad), tf.math.negative(tf.math.square(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)))), tf.math.square(tf.math.add(alpha, alpha))))))))), tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.negative(tf.math.add(alpha, tf.math.square(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)))))), tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(beta, sigma))", "other_info": {"loss": [2.6663172245025635, 2.3516335487365723, 2.314457416534424, 2.3035929203033447, 2.303180694580078, 2.302964925765991], "accuracy": [0.19957733154296875, 0.23761722445487976, 0.1002509593963623, 0.09536388516426086, 0.0948355570435524, 0.09549596905708313], "val_loss": [1.972766637802124, 2.3559820652008057, 2.3032171726226807, 2.3026058673858643, 2.30259108543396, 2.3026039600372314], "val_accuracy": [0.3186666667461395, 0.09933333098888397, 0.10000000149011612, 0.10466666519641876, 0.10100000351667404, 0.10166666656732559]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [3, 1, 2, 7, 6, 2, 6, 2, 8, 2, 0, 6, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [0, 0, 0, 1, 1, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [71, 65, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 5, 9, 6, 2, 4, 9, 4, 3, 3, 4, 8, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 3, 1, 0, 0, 0], [53, 32, 50, 35, 74, 78], [1, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 2, 3, 6, 7, 4], [2, 3, 3, 2, 1, 1, 3, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [47, 9, 61, 71, 34]], "fitness": -0.34628570079803467, "mapping_values": [1, 26, 26, 16, 10, 6, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(tf.math.add(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), alpha)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.negative(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))))))), tf.math.square(tf.math.add(alpha, alpha)))), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(beta, sigma))", "other_info": {"loss": [2.232727527618408, 2.2741806507110596, 2.305410861968994, 2.3028409481048584, 2.2721774578094482, 2.3413796424865723, 2.3042328357696533, 2.302920341491699, 2.3027195930480957, 2.3014278411865234], "accuracy": [0.19733192026615143, 0.20023775100708008, 0.1002509593963623, 0.10130762308835983, 0.14700831472873688, 0.12323339283466339, 0.09602430462837219, 0.09787346422672272, 0.10249637067317963, 0.11438383162021637], "val_loss": [2.254239320755005, 2.3081934452056885, 2.3034517765045166, 2.3013153076171875, 2.2449769973754883, 2.303912401199341, 2.3026034832000732, 2.3024237155914307, 2.3020644187927246, 2.295077323913574], "val_accuracy": [0.11533333361148834, 0.09799999743700027, 0.11233333498239517, 0.10166666656732559, 0.28466665744781494, 0.10466666519641876, 0.10466666519641876, 0.10166666656732559, 0.09799999743700027, 0.2096666693687439]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 1, 4, 7, 4, 2, 1, 2, 3, 2, 0, 5, 3, 2, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 1, 2, 0, 0, 2, 2, 2, 0, 1, 2, 0, 0, 2, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [68, 50, 35, 28, 8, 74, 86, 52, 44], [0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 5, 9, 6, 2, 4, 9, 4, 3, 3, 4, 8, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 3, 1, 0, 0, 0], [53, 32, 50, 35, 74, 78], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 3, 6, 7, 4], [2, 0, 3, 2, 1, 1, 3, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [4, 9, 61, 71, 34]], "fitness": -0.20028571784496307, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.30355167388916, 2.301210403442383, 2.3009471893310547, 2.302757740020752, 2.301936626434326, 2.3008248805999756, 2.3033628463745117, 2.2998855113983154, 2.300189971923828, 2.2999794483184814, 2.30033278465271, 2.3001832962036133, 2.301166296005249, 2.2997450828552246, 2.298623561859131, 2.2993733882904053, 2.298123598098755, 2.2985785007476807, 2.2986576557159424, 2.29776930809021, 2.297849416732788, 2.297457218170166, 2.2984726428985596, 2.2976856231689453, 2.298032522201538, 2.296797037124634, 2.2966222763061523, 2.2959213256835938, 2.295839548110962, 2.2970943450927734, 2.2954304218292236, 2.2966365814208984, 2.296517848968506, 2.295865774154663, 2.2960007190704346, 2.293928384780884, 2.2947142124176025, 2.2942278385162354, 2.294064998626709, 2.2938358783721924, 2.2931458950042725, 2.2930028438568115, 2.2941102981567383, 2.295470952987671, 2.2924723625183105, 2.2928149700164795, 2.2922542095184326, 2.292616367340088, 2.291889190673828, 2.292551279067993, 2.29353928565979, 2.2923357486724854, 2.2908506393432617, 2.291646718978882, 2.2900846004486084, 2.2923808097839355, 2.290741205215454, 2.2879276275634766, 2.2892210483551025, 2.289412260055542, 2.289584159851074, 2.2889435291290283, 2.287938356399536, 2.2887189388275146, 2.287476062774658, 2.287435531616211, 2.287971258163452, 2.2885665893554688, 2.287580966949463, 2.2873542308807373, 2.2861711978912354, 2.286999225616455, 2.2882742881774902, 2.2865729331970215, 2.286282777786255, 2.287442684173584, 2.2869200706481934, 2.2870688438415527, 2.285663366317749, 2.28428316116333, 2.2849371433258057, 2.2844016551971436, 2.2849888801574707, 2.285025119781494, 2.283602714538574, 2.2834227085113525, 2.2853922843933105, 2.283470869064331, 2.282343864440918, 2.284402370452881, 2.2835707664489746, 2.282780647277832, 2.2822823524475098, 2.2830893993377686, 2.281208038330078, 2.2826902866363525, 2.2800443172454834, 2.282536745071411, 2.28161883354187, 2.281435251235962], "accuracy": [0.08070268481969833, 0.09166556596755981, 0.09219389408826828, 0.09219389408826828, 0.09074098616838455, 0.0944393053650856, 0.09153348207473755, 0.09734513610601425, 0.08981640636920929, 0.09668471664190292, 0.09034473448991776, 0.09826971590518951, 0.0882314071059227, 0.09615638852119446, 0.09417514503002167, 0.10051512718200684, 0.09615638852119446, 0.09760929644107819, 0.1006472036242485, 0.10236428678035736, 0.10342095047235489, 0.09694888442754745, 0.1018359512090683, 0.10698718577623367, 0.1018359512090683, 0.10355303436517715, 0.10777968913316727, 0.10751552134752274, 0.10421344637870789, 0.1018359512090683, 0.107647605240345, 0.10606260597705841, 0.10685510188341141, 0.11213842034339905, 0.10421344637870789, 0.10593052208423615, 0.10910051316022873, 0.11174217611551285, 0.10619468986988068, 0.11121384054422379, 0.11081759631633759, 0.11438383162021637, 0.11200633645057678, 0.10751552134752274, 0.11174217611551285, 0.11332716792821884, 0.11306300014257431, 0.11319508403539658, 0.1154404953122139, 0.11306300014257431, 0.10527011007070541, 0.10936468094587326, 0.11940298229455948, 0.11610091477632523, 0.11755382269620895, 0.11728965491056442, 0.12032756209373474, 0.1220446452498436, 0.11689341068267822, 0.1208558976650238, 0.1212521493434906, 0.12719587981700897, 0.12336547672748566, 0.1270637959241867, 0.12772421538829803, 0.1290450394153595, 0.1270637959241867, 0.12574297189712524, 0.12389380484819412, 0.13168670237064362, 0.13776251673698425, 0.13036586344242096, 0.12495046854019165, 0.1286487877368927, 0.13155461847782135, 0.1320829540491104, 0.12996962666511536, 0.13247919082641602, 0.13089419901371002, 0.13340377807617188, 0.13512085378170013, 0.13261127471923828, 0.1372341811656952, 0.1356491893529892, 0.13472460210323334, 0.1426495909690857, 0.13419628143310547, 0.13393211364746094, 0.14014001190662384, 0.1394795924425125, 0.14317791163921356, 0.14330999553203583, 0.1398758441209793, 0.137630432844162, 0.14080041646957397, 0.14251750707626343, 0.1426495909690857, 0.1422533392906189, 0.14198917150497437, 0.14159291982650757], "val_loss": [2.2985384464263916, 2.298305034637451, 2.2980709075927734, 2.2978382110595703, 2.2976019382476807, 2.2973670959472656, 2.297132730484009, 2.2968990802764893, 2.2966654300689697, 2.2964296340942383, 2.2961957454681396, 2.295962333679199, 2.295729160308838, 2.2954983711242676, 2.295264482498169, 2.2950313091278076, 2.2947998046875, 2.294567108154297, 2.29433536529541, 2.2941031455993652, 2.293870687484741, 2.2936394214630127, 2.293409585952759, 2.293179750442505, 2.2929458618164062, 2.2927145957946777, 2.2924811840057373, 2.292249917984009, 2.2920188903808594, 2.2917869091033936, 2.291555881500244, 2.291323184967041, 2.291095018386841, 2.290863275527954, 2.2906336784362793, 2.290402889251709, 2.2901742458343506, 2.2899434566497803, 2.289712905883789, 2.289482355117798, 2.2892515659332275, 2.289022207260132, 2.2887935638427734, 2.2885632514953613, 2.288334608078003, 2.288106918334961, 2.287879467010498, 2.287649631500244, 2.2874200344085693, 2.2871909141540527, 2.286963939666748, 2.2867348194122314, 2.2865071296691895, 2.2862794399261475, 2.286051034927368, 2.2858238220214844, 2.2855982780456543, 2.2853691577911377, 2.2851402759552, 2.2849130630493164, 2.2846834659576416, 2.284452438354492, 2.2842235565185547, 2.2839953899383545, 2.2837679386138916, 2.283540725708008, 2.2833125591278076, 2.283082962036133, 2.282855272293091, 2.282625913619995, 2.282397508621216, 2.2821688652038574, 2.2819411754608154, 2.2817115783691406, 2.2814829349517822, 2.281254291534424, 2.2810251712799072, 2.2807984352111816, 2.280571222305298, 2.2803409099578857, 2.2801096439361572, 2.2798802852630615, 2.279651403427124, 2.2794201374053955, 2.279191732406616, 2.2789642810821533, 2.2787365913391113, 2.278507709503174, 2.2782795429229736, 2.278048515319824, 2.277818441390991, 2.277590274810791, 2.2773635387420654, 2.2771382331848145, 2.2769100666046143, 2.2766809463500977, 2.27644944190979, 2.2762184143066406, 2.275988817214966, 2.2757606506347656], "val_accuracy": [0.039000000804662704, 0.0403333343565464, 0.04066666588187218, 0.041333332657814026, 0.04266666620969772, 0.04333333298563957, 0.04333333298563957, 0.04466666653752327, 0.04633333161473274, 0.046666666865348816, 0.04800000041723251, 0.049666665494441986, 0.050999999046325684, 0.0533333346247673, 0.054666668176651, 0.055666666477918625, 0.05700000002980232, 0.05833333358168602, 0.060333333909511566, 0.061666667461395264, 0.06466666609048843, 0.06733333319425583, 0.0689999982714653, 0.07000000029802322, 0.07133333384990692, 0.07233333587646484, 0.07333333045244217, 0.07633333653211594, 0.07800000160932541, 0.07966666668653488, 0.08100000023841858, 0.08299999684095383, 0.08500000089406967, 0.08733333647251129, 0.08866667002439499, 0.09000000357627869, 0.09033333510160446, 0.09200000017881393, 0.09399999678134918, 0.0949999988079071, 0.09666666388511658, 0.09799999743700027, 0.10066666454076767, 0.10199999809265137, 0.10300000011920929, 0.10466666519641876, 0.10700000077486038, 0.1080000028014183, 0.1106666699051857, 0.1120000034570694, 0.1146666631102562, 0.11633333563804626, 0.11699999868869781, 0.11866666376590729, 0.12033333629369736, 0.12266666442155838, 0.12333333492279053, 0.12600000202655792, 0.12833333015441895, 0.12999999523162842, 0.13233333826065063, 0.13466666638851166, 0.13633333146572113, 0.13733333349227905, 0.13866665959358215, 0.13966666162014008, 0.14266666769981384, 0.1446666717529297, 0.1456666737794876, 0.14766666293144226, 0.1496666669845581, 0.15266667306423187, 0.15433333814144135, 0.15833333134651184, 0.16033333539962769, 0.1626666635274887, 0.16500000655651093, 0.16866666078567505, 0.17133332788944244, 0.17299999296665192, 0.17533333599567413, 0.1770000010728836, 0.179666668176651, 0.1809999942779541, 0.18333333730697632, 0.18333333730697632, 0.18433333933353424, 0.1860000044107437, 0.18966667354106903, 0.19233334064483643, 0.19433332979679108, 0.19599999487400055, 0.19866666197776794, 0.20033332705497742, 0.2029999941587448, 0.2056666612625122, 0.2070000022649765, 0.20866666734218597, 0.2096666693687439, 0.210999995470047]}}, {"genotype": [[0], [1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 2, 2, 0, 4, 2, 1, 1, 1, 2, 0, 5, 8, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [0, 0, 2, 2, 0, 2, 2, 2, 1, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [64, 39, 59, 39, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 5, 9, 6, 2, 4, 9, 4, 3, 3, 4, 8, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 3, 1, 0, 0, 0], [53, 32, 50, 35, 74, 78], [1, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 2, 3, 6, 7, 4], [2, 0, 3, 2, 1, 1, 3, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [47, 9, 61, 71, 34]], "fitness": -0.15771429240703583, "mapping_values": [1, 22, 22, 12, 10, 3, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.negative(tf.math.pow(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(tf.math.negative(tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, alpha))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.2327356338500977, 2.3224353790283203, 2.307466506958008, 2.3036508560180664, 2.3030669689178467, 2.302957057952881], "accuracy": [0.1970677524805069, 0.2016906589269638, 0.09694888442754745, 0.09694888442754745, 0.09602430462837219, 0.0944393053650856], "val_loss": [2.25449800491333, 2.314413070678711, 2.3044495582580566, 2.3029837608337402, 2.30302095413208, 2.3027405738830566], "val_accuracy": [0.12066666781902313, 0.09799999743700027, 0.10000000149011612, 0.10166666656732559, 0.09566666930913925, 0.09799999743700027]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 1, 5, 7, 4, 2, 1, 2, 8, 5, 0, 5, 8, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [0, 2, 2, 2, 0, 2, 1, 1, 2, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [24, 74, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 5, 9, 6, 2, 4, 9, 4, 3, 3, 4, 8, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 3, 1, 0, 0, 0], [53, 32, 50, 35, 74, 78], [1, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [0, 4, 3, 6, 7, 4, 0, 1, 3, 7], [2, 0, 3, 2, 1, 2, 3, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [47, 9, 61, 71, 34]], "fitness": -0.12942856550216675, "mapping_values": [1, 10, 10, 5, 5, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.math.add(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.pow(grad, grad))))), grad)), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [2.2328402996063232, 2.240384340286255, 2.3065731525421143, 2.261775016784668, 2.2110531330108643, 2.3017337322235107, 2.2045516967773438, 2.3069021701812744], "accuracy": [0.1990489959716797, 0.2090873122215271, 0.10196803510189056, 0.1706511676311493, 0.1516312211751938, 0.1138555034995079, 0.24686303734779358, 0.09576013684272766], "val_loss": [2.2539918422698975, 2.3128886222839355, 2.2959725856781006, 1.9924997091293335, 2.305447578430176, 2.2881886959075928, 2.310063600540161, 2.3033998012542725], "val_accuracy": [0.1066666692495346, 0.09799999743700027, 0.1993333399295807, 0.19366666674613953, 0.10400000214576721, 0.16033333539962769, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [3, 1, 2, 9, 4, 2, 6, 2, 8, 2, 0, 6, 5, 9, 5, 9, 6, 8, 2, 5, 5, 2, 0, 2, 1, 8], [0, 0, 2, 1, 2, 2, 2, 1, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [19, 85, 84, 56, 69, 79, 86, 52, 44], [0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 5, 9, 6, 2, 4, 9, 4, 3, 3, 4, 8, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 3, 1, 0, 0, 0], [53, 32, 50, 35, 74, 78], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [8, 3, 3, 6, 7, 4], [2, 3, 3, 2, 1, 1, 3, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [47, 9, 61, 71, 34]], "fitness": -0.11028571426868439, "mapping_values": [1, 11, 11, 6, 5, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.multiply(beta, sigma))", "other_info": {"loss": [2.3026838302612305, 2.3028671741485596, 2.3029234409332275, 2.302777051925659, 2.303086280822754, 2.3039236068725586], "accuracy": [0.09642054885625839, 0.09470347315073013, 0.09906221181154251, 0.09800554811954498, 0.09774138033390045, 0.09853387624025345], "val_loss": [2.3026039600372314, 2.302671432495117, 2.302665948867798, 2.302835702896118, 2.3030781745910645, 2.3036346435546875], "val_accuracy": [0.10199999809265137, 0.0989999994635582, 0.10166666656732559, 0.09799999743700027, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [3, 1, 2, 7, 4, 2, 6, 2, 8, 2, 0, 6, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [0, 1, 2, 1, 1, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [71, 65, 59, 56, 8, 79, 86, 52, 44], [1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 5, 9, 6, 2, 4, 9, 4, 3, 3, 4, 8, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 3, 1, 0, 0, 0], [53, 32, 50, 35, 74, 78], [1, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 2, 3, 6, 7, 4], [0, 3, 3, 2, 1, 1, 3, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [47, 9, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 4, 5, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(grad, alpha))))), alpha), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), sigma))", "other_info": {"loss": [67934368.0, 1282029184.0, 5937092096.0, 16384665600.0, 35832840192.0, 64373977088.0], "accuracy": [0.09060890227556229, 0.09932637959718704, 0.09893012791872025, 0.09496764093637466, 0.09470347315073013, 0.10342095047235489], "val_loss": [289399808.0, 2313349376.0, 7805441024.0, 18499340288.0, 36128571392.0, 62427009024.0], "val_accuracy": [0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027, 0.09799999743700027]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 1, 5, 7, 4, 2, 1, 2, 8, 2, 0, 5, 8, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [0, 0, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [19, 85, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 5, 9, 6, 2, 4, 9, 4, 3, 3, 4, 8, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 3, 1, 0, 0, 0], [53, 32, 50, 35, 74, 78], [1, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1], [0, 3, 3, 6, 7, 4], [2, 0, 3, 2, 1, 1, 3, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [55, 9, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 3, 3, 3, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 6, 6, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(beta, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(sigma, beta), tf.math.pow(alpha, alpha))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09694888442754745, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [3, 1, 6, 7, 4, 2, 6, 2, 8, 2, 0, 6, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [0, 0, 2, 1, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [19, 85, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 5, 9, 6, 2, 4, 9, 4, 3, 3, 4, 8, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 3, 1, 0, 0, 0], [53, 32, 50, 35, 74, 78], [1, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 3, 3, 6, 7, 4], [2, 0, 3, 2, 1, 1, 3, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [55, 9, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 6, 6, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.math.multiply(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(sigma, beta), tf.math.pow(alpha, alpha)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09694888442754745, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 1, 5, 7, 4, 2, 5, 2, 8, 2, 0, 5, 8, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [0, 0, 0, 2, 0, 2, 2, 1, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [19, 9, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 5, 9, 6, 2, 4, 9, 4, 3, 3, 4, 8, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 3, 1, 0, 0, 0], [53, 32, 50, 35, 74, 78], [1, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 1, 3, 6, 7, 4, 4, 7], [3, 1, 3, 2, 1, 1, 3, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [47, 9, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 13, 13, 7, 6, 4, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 16, 8, 8, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(tf.math.add(alpha, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.add(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32))), grad)))), tf.math.add(alpha, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(sigma, tf.math.multiply(alpha, tf.math.divide_no_nan(tf.math.add(sigma, beta), tf.math.pow(alpha, tf.math.pow(tf.math.add(alpha, sigma), alpha))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09694888442754745, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [3, 1, 6, 7, 4, 2, 6, 2, 6, 2, 0, 6, 3, 9, 5, 8, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 1, 2, 0, 0, 2, 2, 2, 0, 1, 2, 2, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [68, 50, 59, 56, 8, 87, 86, 52, 44], [0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 5, 9, 6, 2, 4, 9, 4, 3, 3, 4, 8, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 3, 1, 0, 0, 0], [53, 32, 50, 35, 74, 78], [1, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 3, 6, 7, 4], [2, 1, 3, 2, 1, 1, 3, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [47, 9, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 36, 36, 22, 14, 6, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 0], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), alpha)), tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))))), grad)))))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.sqrt(tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))))))))), tf.math.square(tf.math.add(alpha, tf.math.add(alpha, grad)))))), tf.math.add(alpha, grad))), tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))), tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09694888442754745, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [3, 1, 6, 7, 4, 2, 6, 2, 8, 2, 0, 6, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [0, 0, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [19, 85, 84, 56, 8, 79, 86, 52, 44], [1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 5, 9, 6, 2, 4, 9, 4, 3, 3, 4, 8, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 3, 1, 0, 0, 0], [53, 32, 50, 35, 74, 78], [1, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1], [0, 3, 3, 6, 7, 4], [2, 0, 3, 2, 1, 1, 3, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [47, 9, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 12, 6, 6, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(sigma, beta), tf.math.pow(alpha, alpha))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09694888442754745, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 1, 2, 7, 3, 2, 1, 2, 8, 2, 0, 5, 8, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [0, 0, 2, 1, 1, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [71, 10, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 5, 9, 6, 2, 4, 9, 4, 3, 3, 4, 8, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 3, 1, 0, 0, 0], [53, 32, 50, 35, 74, 78], [1, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 2, 3, 6, 7, 4], [2, 0, 3, 2, 1, 1, 3, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [47, 9, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 23, 23, 14, 9, 4, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))))), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)))), tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [447481.90625, 2.3144400119781494, 2.305722951889038, 2.303386688232422, 2.3030872344970703, 2.3029699325561523, 2.302980422973633, 2.302870750427246, 2.3029422760009766, 2.3029544353485107, 2.3030362129211426, 2.302978277206421, 2.3029732704162598, 2.3029654026031494, 2.3031768798828125], "accuracy": [0.0944393053650856, 0.09747721254825592, 0.09694888442754745, 0.09628847241401672, 0.09589222073554993, 0.09998679161071777, 0.09602430462837219, 0.0940430611371994, 0.09800554811954498, 0.09998679161071777, 0.0940430611371994, 0.09311848133802414, 0.09272222965955734, 0.09615638852119446, 0.0948355570435524], "val_loss": [2.321444272994995, 2.3072900772094727, 2.3036389350891113, 2.302640914916992, 2.3028321266174316, 2.3026881217956543, 2.302672863006592, 2.302610158920288, 2.3026599884033203, 2.302635669708252, 2.3026063442230225, 2.3025617599487305, 2.3026018142700195, 2.3026373386383057, 2.3026058673858643], "val_accuracy": [0.1003333330154419, 0.09933333098888397, 0.09566666930913925, 0.10000000149011612, 0.09566666930913925, 0.10100000351667404, 0.09799999743700027, 0.0976666659116745, 0.09799999743700027, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.10166666656732559, 0.0976666659116745]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [3, 8, 2, 7, 4, 2, 6, 2, 8, 2, 0, 6, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 0, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [71, 65, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 5, 9, 6, 2, 4, 9, 4, 3, 3, 4, 8, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 3, 1, 0, 0, 0], [53, 32, 50, 35, 74, 78], [1, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 3, 6, 7, 4, 1], [2, 2, 3, 2, 1, 1, 3, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [47, 9, 61, 71, 34]], "fitness": -0.09485714137554169, "mapping_values": [1, 10, 10, 5, 5, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.pow(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))), grad)), tf.math.add(alpha, tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, beta))", "other_info": {"loss": [2.304232358932495, 2.3035361766815186, 2.305840492248535, 2.3104896545410156, 2.3127329349517822, 2.3148393630981445, 2.324084758758545, 2.324049234390259, 2.3332467079162598, 2.3480801582336426, 2.3871164321899414, 512397483704320.0, 3.372319459915161, 7.597538471221924, 13.322053909301758, 19.09023666381836], "accuracy": [0.080042265355587, 0.0886276587843895, 0.08387266844511032, 0.07792893797159195, 0.08334434032440186, 0.07779685407876968, 0.07119271159172058, 0.07489103078842163, 0.07000396400690079, 0.07766477018594742, 0.07977809756994247, 0.09642054885625839, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3000738620758057, 2.30173659324646, 2.3037302494049072, 2.306222677230835, 2.3092079162597656, 2.312047243118286, 2.3165674209594727, 2.321038007736206, 2.3291878700256348, 2.3466527462005615, 2.4341750144958496, 2.7461469173431396, 5.290092468261719, 10.95063304901123, 16.7125186920166, 22.475114822387695], "val_accuracy": [0.03166666626930237, 0.027666667476296425, 0.02433333359658718, 0.02433333359658718, 0.02866666577756405, 0.033666666597127914, 0.04266666620969772, 0.0533333346247673, 0.07500000298023224, 0.09733333438634872, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 1, 8, 7, 4, 2, 1, 6, 8, 2, 0, 5, 8, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [0, 0, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [19, 35, 95, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 5, 9, 6, 2, 4, 9, 4, 3, 3, 4, 8, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 3, 1, 0, 0, 0], [53, 32, 50, 35, 74, 78], [1, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 9, 3, 6, 7, 4], [3, 0, 3, 2, 1, 1, 3, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [47, 9, 61, 71, 34]], "fitness": -0.03857142850756645, "mapping_values": [1, 22, 22, 13, 9, 4, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.subtract(tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))))))), tf.math.add(tf.math.add(alpha, grad), tf.math.negative(tf.math.square(tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.3036420345306396, 2.3015167713165283, 2.3014724254608154, 2.3034915924072266, 2.3029017448425293, 2.301999807357788], "accuracy": [0.08057060092687607, 0.09087307006120682, 0.09153348207473755, 0.09021265059709549, 0.08915598690509796, 0.09060890227556229], "val_loss": [2.298774480819702, 2.298774480819702, 2.298774480819702, 2.298774480819702, 2.298774480819702, 2.298774480819702], "val_accuracy": [0.039000000804662704, 0.039000000804662704, 0.039000000804662704, 0.039000000804662704, 0.039000000804662704, 0.039000000804662704]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 1, 2, 7, 4, 2, 6, 2, 8, 2, 0, 6, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [0, 0, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [19, 85, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 5, 9, 6, 2, 4, 9, 4, 3, 3, 4, 8, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 3, 1, 0, 0, 0], [53, 32, 50, 35, 74, 78], [1, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 3, 6, 7, 4], [3, 3, 3, 2, 1, 1, 3, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [47, 9, 61, 71, 34]], "fitness": -0.03857142850756645, "mapping_values": [1, 9, 9, 4, 5, 3, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 0], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32))), tf.math.add(grad, tf.math.add(alpha, grad)))), tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, sigma))", "other_info": {"loss": [2.3036420345306396, 2.3015167713165283, 2.3014724254608154, 2.3034915924072266, 2.3029017448425293, 2.301999807357788], "accuracy": [0.08057060092687607, 0.09087307006120682, 0.09153348207473755, 0.09021265059709549, 0.08915598690509796, 0.09060890227556229], "val_loss": [2.298774480819702, 2.298774480819702, 2.298774480819702, 2.298774480819702, 2.298774480819702, 2.298774480819702], "val_accuracy": [0.039000000804662704, 0.039000000804662704, 0.039000000804662704, 0.039000000804662704, 0.039000000804662704, 0.039000000804662704]}}]