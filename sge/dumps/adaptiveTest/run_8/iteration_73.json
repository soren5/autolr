[{"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [2, 6, 9, 9, 0], [2, 0, 0, 3, 1, 0], [5, 57], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], [7, 4, 2, 4, 0, 2, 3, 5, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 0, 3, 0, 1, 2, 3, 3, 0], [15, 16, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 9, 3, 9], [0, 3, 3, 1], [41, 38]], "fitness": -0.769428551197052, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 7, 7, 3, 1, 1, 0, 1, 0, 6, 4, 2, 2], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.add(tf.math.multiply(tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))), alpha)), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), sigma)))", "other_info": {"loss": [2.2890553051186844, 2.26271385130015, 2.2286752412788715, 2.186415700675663, 2.120066108767855, 2.0373271978636773, 1.9258235623855098, 1.7939796725032415, 1.6504418125021585, 1.5276143902785049, 1.4199960277128088, 1.328559663112783, 1.2632830385770686, 1.200223462330651, 1.1472361054890947, 1.1155252364396324, 1.0741805598531433, 1.0356990978104044, 1.0242522481315723, 1.0019827769605978, 0.9748515489945054, 0.9530529494157101, 0.9321389942987326, 0.9170945459164176, 0.9085517962374755, 0.8938513491383916, 0.8709490367245476, 0.8691209689532572, 0.8657274042075226, 0.8485809922800907, 0.839454035489094, 0.8286678750343988, 0.8302731642539176, 0.8144630500905313, 0.8150582522795484, 0.7989986021253238, 0.796971815979602, 0.787320485228104, 0.7803364860745406, 0.7833449553819837, 0.7773355296999315, 0.7684085069472968, 0.7630299729378845, 0.7599463904491269, 0.7526212947763204, 0.7550718594126461, 0.7511024901879824, 0.74000223503924, 0.7325483959396014, 0.7276587882345504, 0.7300484960325768, 0.7297599677002866, 0.7189611404280007, 0.7191254216146791, 0.7154800151443406, 0.7226058672825737, 0.7098806030746181, 0.6993019105169074, 0.7077729824653407, 0.6938060250390616, 0.6907273384054433, 0.6939046585155185, 0.697490750530912, 0.68010610334153, 0.6809105724391527, 0.6841454388931238, 0.6737854612848274, 0.6778388580374037, 0.6781770412192258], "accuracy": [0.12178047746419907, 0.20063400268554688, 0.2641659080982208, 0.3195086419582367, 0.3687755763530731, 0.4021925628185272, 0.428609162569046, 0.4550257623195648, 0.48949941992759705, 0.5081230998039246, 0.5299167633056641, 0.5513142347335815, 0.5680887699127197, 0.5807687044143677, 0.6050719618797302, 0.6070532202720642, 0.6235635876655579, 0.6380926966667175, 0.6448289752006531, 0.6420552134513855, 0.6623960137367249, 0.6601505875587463, 0.6717738509178162, 0.6696605682373047, 0.6773213744163513, 0.6840575933456421, 0.6940959095954895, 0.6901333928108215, 0.6840575933456421, 0.689869225025177, 0.7012283802032471, 0.7033417224884033, 0.6964733600616455, 0.707568347454071, 0.7104741930961609, 0.7123233675956726, 0.7152291536331177, 0.713908314704895, 0.7173424959182739, 0.7160216569900513, 0.7129837274551392, 0.7166820764541626, 0.7238145470619202, 0.7238145470619202, 0.7231541275978088, 0.7213049530982971, 0.7277770638465881, 0.7309470176696777, 0.7305507659912109, 0.7357020378112793, 0.7353057861328125, 0.7297582626342773, 0.7364945411682129, 0.7390040755271912, 0.7390040755271912, 0.7367587089538574, 0.743891179561615, 0.7433628439903259, 0.7424382567405701, 0.7512878179550171, 0.7470611333847046, 0.7469290494918823, 0.7415136694908142, 0.7506273984909058, 0.7479857206344604, 0.7508915662765503, 0.7540615797042847, 0.7491744756698608, 0.7543256878852844], "val_loss": [1.9438587597438268, 1.9149316379002161, 1.8776941299438477, 1.826561110360282, 1.7543048858642578, 1.6569204671042306, 1.532276255743844, 1.39340683392116, 1.2517995493752616, 1.1282161644526891, 1.0277581896100725, 0.9506712300436837, 0.8895613125392369, 0.839981028011867, 0.7998156036649432, 0.7686508553368705, 0.7427714381899152, 0.7197682006018502, 0.7022539717810494, 0.6860390220369611, 0.6707531894956317, 0.6593062707356044, 0.6463767460414341, 0.6366250174386161, 0.6277210712432861, 0.6198878288269043, 0.611838732446943, 0.6053887775966099, 0.5998751946857998, 0.5922947440828595, 0.5878346136638096, 0.5822989429746356, 0.5763772215162005, 0.5702321188790458, 0.5670749459947858, 0.5630528926849365, 0.5586279971258981, 0.5531742743083409, 0.5506516354424613, 0.5482447147369385, 0.5446414777210781, 0.5420534610748291, 0.5398471696036202, 0.5353755099432809, 0.534929667200361, 0.5322225945336478, 0.5280949217932565, 0.5264542613710675, 0.5223702532904488, 0.5206860474177769, 0.5192311831883022, 0.5199237721306937, 0.5142180408750262, 0.5165967089789254, 0.5116647141320365, 0.5098807300840106, 0.5059163400105068, 0.5049599579402378, 0.5024865525109428, 0.5000206913266864, 0.5016218934740339, 0.4979247195380075, 0.49630486965179443, 0.49365270137786865, 0.49206951686314176, 0.4917501551764352, 0.4888384682791574, 0.48768610613686697, 0.48868019240243094], "val_accuracy": [0.27533334493637085, 0.3876666724681854, 0.4490000009536743, 0.4906666576862335, 0.5233333110809326, 0.5386666655540466, 0.5630000233650208, 0.5736666917800903, 0.6029999852180481, 0.6349999904632568, 0.6480000019073486, 0.6690000295639038, 0.6863333582878113, 0.6926666498184204, 0.7003333568572998, 0.7046666741371155, 0.7083333134651184, 0.7136666774749756, 0.7236666679382324, 0.7196666598320007, 0.7289999723434448, 0.7250000238418579, 0.7369999885559082, 0.7363333106040955, 0.7443333268165588, 0.7456666827201843, 0.7493333220481873, 0.7506666779518127, 0.753000020980835, 0.7573333382606506, 0.7596666812896729, 0.7546666860580444, 0.7563333511352539, 0.762333333492279, 0.765333354473114, 0.7670000195503235, 0.7683333158493042, 0.7696666717529297, 0.7693333625793457, 0.7743333578109741, 0.7736666798591614, 0.7739999890327454, 0.7736666798591614, 0.7766666412353516, 0.7730000019073486, 0.7763333320617676, 0.7793333530426025, 0.781333327293396, 0.781000018119812, 0.7826666831970215, 0.777999997138977, 0.7833333611488342, 0.784333348274231, 0.7766666412353516, 0.7826666831970215, 0.784333348274231, 0.7853333353996277, 0.7850000262260437, 0.7913333177566528, 0.7833333611488342, 0.7860000133514404, 0.7929999828338623, 0.7926666736602783, 0.79666668176651, 0.7943333387374878, 0.7893333435058594, 0.7963333129882812, 0.7906666398048401, 0.7946666479110718]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [2, 6, 9, 9, 0], [2, 0, 0, 3, 1, 0], [50, 57], [1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0], [0, 5, 4, 2, 2, 5, 3, 5, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 0, 1, 0, 0, 1, 2, 3, 3, 0], [15, 16, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [0, 3], [30], [0, 0, 0, 1, 1, 1, 1, 0, 0, 0], [2, 2, 4, 3, 9, 6, 0, 9], [2, 3, 3, 1], [41, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 4, 1, 2, 19, 19, 12, 7, 4, 1, 1, 0, 1, 1, 7, 3, 4, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.square(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))))), tf.math.add(beta, alpha))))), tf.math.subtract(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, alpha))), tf.math.add(beta, beta))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.add(tf.math.pow(beta, sigma), sigma), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10236428678035736, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [2, 6, 9, 9, 0], [2, 0, 0, 3, 1, 0], [50, 57], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1], [2, 5, 2, 2, 2, 2, 8, 1, 2, 1, 6, 8, 8, 1, 1, 8, 9, 0], [3, 0, 0, 1, 0, 1, 2, 3, 3, 0], [6, 16, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [1, 0, 0, 0, 0, 0, 1, 0, 1, 0], [2, 2, 4, 3, 9, 6, 0, 9], [2, 3, 3, 1], [41, 38, 15]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 4, 1, 2, 23, 23, 13, 10, 4, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)))), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha))), tf.math.add(tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(beta, alpha), beta)))), tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, grad)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad)))))))), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [2, 6, 9, 9, 0], [1, 0, 0, 3, 1, 0], [50, 57], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [3, 4, 2, 9, 0, 2, 3, 5, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 0, 3, 0, 1, 2, 3, 3, 0], [15, 16, 72, 84, 1, 78], [0, 0, 0, 0, 0], [0, 0, 1, 1, 1], [3, 3, 0], [4, 3, 4], [], [1, 0, 0, 0, 0, 0, 1, 0, 1, 0], [0, 3, 9, 3, 9], [2, 3, 3, 1], [41, 38, 15]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 12, 12, 7, 5, 4, 5, 5, 2, 3, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))), tf.math.add(tf.math.multiply(tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))), tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), tf.math.add(sigma, sigma))), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [2, 6, 9, 9, 0], [2, 0, 0, 3, 1, 0], [5, 57], [0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1], [4, 4, 2, 9, 0, 2, 3, 5, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 0, 2, 0, 0, 2, 3, 3, 0], [15, 16, 30, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 9, 3, 9], [0, 3, 3, 1], [56, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 13, 13, 8, 5, 4, 1, 1, 0, 1, 0, 2, 1, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.pow(tf.math.add(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.add(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta))))), tf.math.add(beta, tf.math.square(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [609981695.7615708, 11521140926.165632, 53615482722.83608, 148884235500.5574, 319948187131.0633, 593323757826.0626], "accuracy": [0.10210011899471283, 0.10170386731624603, 0.10249637067317963, 0.10368511080741882, 0.09694888442754745, 0.10394927859306335], "val_loss": [2314153472.0, 18506183241.142857, 62450293613.71429, 148022624256.0, 289093170907.4286, 499543591204.5714], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [2, 6, 9, 9, 0], [2, 0, 0, 3, 1, 0], [5, 57], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1], [7, 4, 6, 4, 0, 2, 4, 5, 2, 2, 4, 9, 8, 1, 1, 8, 9, 0], [1, 0, 0, 3, 1, 1, 2, 3, 3, 0], [15, 16, 61, 39, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 1, 1, 0, 0, 0], [2, 2, 5, 3, 9, 6, 0, 9], [0, 3, 3, 3], [41, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 21, 21, 12, 9, 3, 1, 1, 0, 1, 0, 6, 3, 3, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.add(beta, alpha))), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, grad))), tf.math.add(tf.math.add(beta, alpha), tf.math.add(tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))), beta)))), tf.math.add(beta, grad))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.add(tf.math.square(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), sigma), sigma)", "other_info": {"loss": [2.3015023769562064, 2.3084427539493904, 2.4323631011893356, 7.6138907662944515, 21.670918955542803, 36.05100140907289], "accuracy": [0.10645885765552521, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.975301946912493, 1.9987778663635254, 2.6349193709237233, 13.521535328456334, 25.8772097996303, 38.26128387451172], "val_accuracy": [0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [2, 6, 9, 9, 0], [1, 0, 0, 3, 1, 0], [5, 57], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [7, 2, 2, 5, 0, 2, 3, 5, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 0, 3, 3, 1, 2, 3, 3, 0], [15, 16, 43, 84, 1, 78], [1, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 9, 3, 9], [0, 0, 3, 1], [41, 38, 56]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 5, 4, 2, 1, 0, 0, 0, 0, 6, 4, 2, 3], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.square(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [1720.7280327841402, 30124.787304661702, 137655.72281361444, 379483.6313977678, 812180.3147701757, 1502408.8611147802], "accuracy": [0.10210011899471283, 0.10196803510189056, 0.10276053100824356, 0.10355303436517715, 0.09694888442754745, 0.10421344637870789], "val_loss": [6207.867606026785, 47814.66517857143, 159593.22767857142, 376303.54464285716, 732707.375, 1263567.357142857], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [2, 6, 9, 9, 0], [1, 0, 0, 3, 1, 0], [50, 57], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1], [2, 5, 2, 4, 2, 2, 8, 5, 2, 1, 4, 8, 8, 1, 1, 8, 9, 0], [3, 0, 0, 1, 0, 3, 2, 3, 3, 0], [15, 16, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 9, 0, 9], [2, 3, 3, 1], [41, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 13, 13, 7, 6, 3, 1, 1, 0, 1, 0, 5, 4, 1, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), alpha)), tf.math.sqrt(tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))))))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.negative(beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [2, 6, 9, 9, 0], [2, 0, 0, 3, 1, 0], [50, 57], [0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [9, 5, 2, 2, 1, 2, 3, 5, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 0, 3, 3, 3, 2, 3, 3, 0], [47, 62, 43, 84, 1, 78], [1, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1], [0, 9, 9, 9, 5], [2, 3, 3, 1], [41, 38, 15]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 2, 2, 0, 1], "tree_depth": 6, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [4419285.448414533, 83240851.73002246, 387045333.6404702, 1074397306.8603883, 2308361326.5354643, 4280133858.142914], "accuracy": [0.10210011899471283, 0.10170386731624603, 0.10249637067317963, 0.10368511080741882, 0.09694888442754745, 0.10394927859306335], "val_loss": [16737837.142857144, 133634724.57142857, 450719030.85714287, 1068019126.8571428, 2085576118.857143, 3603403190.857143], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [2, 6, 9, 9, 0], [2, 0, 0, 3, 1, 0], [5, 57], [0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [7, 4, 4, 9, 2, 2, 3, 5, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 3, 0, 3, 2, 3, 3, 0], [76, 20, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 0, 1, 1, 0, 1, 0], [1, 3, 9, 3, 9], [0, 3, 3, 1], [56, 59]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 18, 18, 10, 8, 3, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.pow(tf.math.add(beta, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad))))), tf.math.add(beta, tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))), grad), tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))))), tf.math.subtract(tf.math.add(beta, grad), beta))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), sigma)", "other_info": {"loss": [2.302505273860538, 2.3028579402231286, 2.3030334621797763, 2.302929903112776, 2.3028766835260197, 2.3030263316976143, 2.302924703282608], "accuracy": [0.09576013684272766, 0.09509972482919693, 0.09259014576673508, 0.09708096832036972, 0.09800554811954498, 0.09377889335155487, 0.09774138033390045], "val_loss": [1.9736661229814803, 1.9737673486982072, 1.9737048830304826, 1.9736499105181013, 1.9737110819135393, 1.9737251145499093, 1.973646572657994], "val_accuracy": [0.09966666996479034, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.0976666659116745, 0.09833333641290665, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [2, 6, 9, 9, 0], [2, 0, 0, 3, 1, 0], [5, 57], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0], [7, 4, 5, 4, 0, 2, 3, 5, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 0, 3, 0, 1, 2, 3, 3, 0], [15, 0, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0], [0, 3, 9, 3, 9], [0, 3, 3, 1], [41, 38, 93]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 20, 20, 12, 8, 3, 1, 1, 0, 1, 0, 6, 5, 1, 3], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.square(tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.square(beta)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), grad))), tf.math.add(beta, tf.constant(4.53978687e-05, shape=shape, dtype=tf.float32))))), tf.math.subtract(tf.math.add(beta, alpha), beta))), tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [3404.126553259222, 60908.182541729955, 279593.06877394003, 772106.9820862502, 1654047.853982301, 3061466.356392815], "accuracy": [0.1022322028875351, 0.10196803510189056, 0.1026284471154213, 0.10368511080741882, 0.09694888442754745, 0.10421344637870789], "val_loss": [12466.642578125, 96966.89508928571, 324510.41964285716, 766097.0535714285, 1492728.4285714286, 2575405.1428571427], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [2, 6, 9, 9, 0], [2, 0, 0, 3, 1, 0], [5, 57], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1], [7, 4, 2, 4, 1, 2, 3, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 0, 0, 3, 0, 1, 2, 3, 3, 0], [15, 16, 43, 39, 1, 78], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0, 1], [3, 3, 0, 7, 3], [4, 3, 5], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 4, 4, 3, 9, 6, 0, 9], [0, 3, 3, 3], [41, 44]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 15, 15, 8, 7, 4, 10, 8, 5, 3, 0, 8, 5, 3, 2], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), grad)), tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, alpha))))), tf.math.multiply(tf.math.add(beta, beta), tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.math.add(tf.math.add(sigma, sigma), tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, grad))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(tf.math.pow(tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), sigma), sigma), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1246155667.9427884, 23540160207.139877, 109552617873.70123, 304223464424.06024, 653772508660.8417, 1212372207877.038], "accuracy": [0.10210011899471283, 0.10170386731624603, 0.10249637067317963, 0.10368511080741882, 0.09694888442754745, 0.10394927859306335], "val_loss": [4728052150.857142, 37813087670.85714, 127606540580.57143, 302466241097.1429, 590720120539.4286, 1020743310189.7142], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [2, 6, 9, 9, 0], [2, 0, 0, 3, 1, 0], [5, 57], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1], [4, 4, 2, 4, 0, 5, 3, 5, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 0, 3, 0, 1, 2, 3, 3, 0], [60, 16, 50, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 4, 9, 5], [0, 3, 3, 1], [41, 5]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 1, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, grad), tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [4419285.448414533, 83240851.73002246, 387045333.6404702, 1074397306.8603883, 2308361326.5354643, 4280133858.142914], "accuracy": [0.10210011899471283, 0.10170386731624603, 0.10249637067317963, 0.10368511080741882, 0.09694888442754745, 0.10394927859306335], "val_loss": [16737837.142857144, 133634724.57142857, 450719030.85714287, 1068019126.8571428, 2085576118.857143, 3603403190.857143], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [2, 6, 9, 9, 0], [2, 0, 0, 3, 1, 0], [5, 57], [1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1], [2, 5, 2, 2, 5, 4, 3, 5, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 0, 2, 0, 0, 2, 3, 3, 0], [15, 61, 33, 18, 1, 78], [0, 0, 0, 1, 0], [0, 0, 1, 1], [0, 3, 0], [4, 4], [], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 4, 9, 5], [2, 3, 3, 1], [41, 38, 15]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 8, 6, 4, 4, 3, 2, 1, 0, 2, 1, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(tf.math.square(tf.math.add(tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.pow(tf.math.multiply(tf.math.add(beta, tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)), beta)), tf.math.square(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [2, 6, 9, 9, 0], [2, 0, 0, 3, 1, 0], [5, 57], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1], [7, 4, 2, 8, 0, 2, 4, 1, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 3, 0, 3, 0, 0, 2, 3, 3, 0], [15, 25, 43, 39, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0], [2, 2, 4, 3, 9, 6, 0, 9], [0, 3, 3, 1], [41, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 4, 1, 2, 17, 17, 9, 8, 3, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(alpha, tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, beta), grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.302090099600753, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [2, 6, 9, 9, 0], [0, 0, 0, 3, 1, 0], [50, 57, 26], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [2, 5, 1, 2, 2, 2, 3, 5, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 0, 3, 0, 0, 2, 3, 3, 0], [71, 16, 43, 84, 1, 78], [0, 0, 1, 1, 0], [1, 0, 1, 1], [9, 3, 0], [4, 4], [], [1, 0, 0, 0, 0, 0, 1, 0, 1, 0], [0, 3, 4, 9, 5], [2, 3, 3, 1], [41, 38, 15]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 4, 1, 3, 14, 14, 7, 7, 4, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.add(tf.math.multiply(grad, tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32))), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10051512718200684, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [2, 6, 9, 9, 0], [1, 0, 0, 3, 1, 0], [5, 57], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1], [4, 4, 2, 4, 0, 2, 3, 5, 2, 1, 1, 9, 8, 1, 1, 8, 9, 0], [3, 0, 0, 2, 0, 1, 3, 3, 2, 0], [15, 16, 43, 42, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [2, 2, 4, 3, 9, 6, 0, 9], [0, 3, 3, 3], [20, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 21, 21, 12, 9, 4, 1, 1, 0, 1, 0, 9, 5, 4, 2], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.multiply(tf.math.square(tf.math.add(beta, grad)), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, beta)), tf.math.add(tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), grad))), tf.math.add(beta, grad))), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.add(tf.math.pow(tf.math.multiply(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32), sigma), sigma), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1], [2, 6, 9, 9, 0], [2, 0, 0, 3, 1, 0], [5, 57], [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0], [7, 0, 2, 9, 0, 2, 3, 5, 2, 4, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 0, 3, 0, 1, 2, 3, 3, 0], [15, 16, 74, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [2, 3, 9, 3, 9, 6, 0, 9], [0, 3, 3, 1], [14, 33]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 3, 2, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), sigma))", "other_info": {"loss": [2.302060251994266, 2.302574572325729, 2.3025690656784676, 2.3025738130140425, 2.3025756114352065, 2.30256989556155, 2.302574126129342, 2.3025730691014688], "accuracy": [0.1010434553027153, 0.10328886657953262, 0.10791176557540894, 0.10289261490106583, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9736448696681432, 1.9736436435154505, 1.9736413274492537, 1.9736433029174805, 1.97364228112357, 1.9736425536019462, 1.9736436435154505, 1.97364228112357], "val_accuracy": [0.0976666659116745, 0.09966666996479034, 0.10400000214576721, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.10400000214576721]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [2, 6, 9, 9, 0], [1, 0, 0, 3, 1, 0], [5, 57], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [7, 4, 2, 4, 0, 2, 3, 5, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 1, 2, 3, 3, 0], [15, 16, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0], [0, 3, 9, 3, 9], [0, 3, 3, 1], [16, 38, 96]], "fitness": -0.09942857176065445, "mapping_values": [1, 1, 1, 0, 1, 0, 12, 12, 6, 6, 2, 1, 1, 0, 1, 0, 6, 5, 1, 3], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.add(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha))), grad), tf.math.add(beta, tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.constant(9.99916780e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.324451642753804, 2.5758879453341375, 3.2813418654088, 4.587581325594492, 6.416336327810896, 8.872686608057169, 11.87658095230689], "accuracy": [0.08796724677085876, 0.1006472036242485, 0.10130762308835983, 0.10421344637870789, 0.09800554811954498, 0.10487385839223862, 0.09945846349000931], "val_loss": [2.0160604204450334, 2.25030061176845, 2.808325631277902, 3.7543528420584544, 5.072835513523647, 6.7398432322910855, 8.754327501569476], "val_accuracy": [0.09666666388511658, 0.10000000149011612, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1], [2, 6, 9, 9, 0], [1, 0, 0, 3, 1, 0], [5, 57], [1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [7, 4, 2, 3, 0, 2, 3, 5, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 1, 2, 3, 3, 0], [15, 16, 43, 84, 1, 78], [0, 0, 0, 1, 0], [0, 0, 1, 1], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0], [0, 3, 9, 3, 9], [0, 3, 3, 1], [41, 38, 5]], "fitness": -0.03885714337229729, "mapping_values": [1, 1, 1, 0, 1, 0, 12, 12, 6, 6, 2, 5, 4, 2, 2, 0, 6, 5, 1, 3], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), tf.math.add(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, grad))), grad), tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), tf.math.add(sigma, sigma))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.3008038183292143, 2.303119272147156, 2.3031396621159432, 2.3054944841286384, 2.3032330428100676, 2.3058528081379737], "accuracy": [0.0940430611371994, 0.0936468094587326, 0.09272222965955734, 0.08730682730674744, 0.08875974267721176, 0.08902391046285629], "val_loss": [1.9707726751055037, 1.9709740366254533, 1.9711886133466447, 1.9714247158595495, 1.9716794831412179, 1.9719343866620744], "val_accuracy": [0.03533333167433739, 0.03233333304524422, 0.029999999329447746, 0.026333333924412727, 0.024666666984558105, 0.023666666820645332]}}]