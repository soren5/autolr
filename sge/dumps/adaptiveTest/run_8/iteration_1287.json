[{"genotype": [[0], [1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 6, 8, 3, 4, 5, 9, 8, 3, 0, 8, 8, 1, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 1, 0, 0, 1, 1, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [34, 48, 93, 41, 8, 79, 86, 52, 44], [0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 5, 6, 3, 0, 2, 4, 9, 9, 0, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [5, 1, 3, 1, 1, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [44, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 0, 1, 0, 1], [1, 1, 1, 0], [2, 3, 0], [4, 0], [38], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [0, 3, 3, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [48, 9, 45, 71, 34, 14, 2]], "fitness": -0.8408571481704712, "mapping_values": [1, 16, 16, 12, 4, 4, 12, 12, 9, 3, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))), alpha)), tf.math.sqrt(tf.math.add(alpha, tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.sqrt(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.square(tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(grad, tf.math.add(beta, tf.math.pow(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha)))))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.09006929397583, 1.7706609964370728, 1.3076846599578857, 1.1246860027313232, 0.9357933402061462, 0.8659659624099731, 0.7775645852088928, 0.7539160251617432, 0.7041490077972412, 0.6855567693710327, 0.6475170850753784, 0.6104748845100403, 0.6225665211677551, 0.6042163968086243, 0.5658344626426697, 0.572543740272522, 0.5258740782737732, 0.509384036064148, 0.5246317982673645, 0.5323473215103149, 0.5195108652114868, 0.49240875244140625, 0.485889732837677, 0.4715128540992737, 0.47339126467704773, 0.4864490330219269, 0.4559273421764374, 0.45390862226486206, 0.4357740879058838, 0.44043174386024475, 0.43948620557785034, 0.4171450734138489, 0.42596226930618286, 0.4012351632118225, 0.4089309573173523, 0.4049232006072998, 0.3828180134296417, 0.39239752292633057, 0.3688090741634369, 0.37725263833999634, 0.38845473527908325], "accuracy": [0.3057720363140106, 0.421740859746933, 0.5325584411621094, 0.5894861817359924, 0.6631884574890137, 0.6787742972373962, 0.7029454708099365, 0.7176066637039185, 0.7306828498840332, 0.7372870445251465, 0.7532690763473511, 0.763439416885376, 0.7666094303131104, 0.7688548564910889, 0.7828556299209595, 0.7810064554214478, 0.7996301651000977, 0.8068947196006775, 0.7994980812072754, 0.7971205711364746, 0.8063663840293884, 0.8140271902084351, 0.8156121969223022, 0.8235371708869934, 0.8253863453865051, 0.8168009519577026, 0.8345000743865967, 0.8305375576019287, 0.8388587832450867, 0.8358209133148193, 0.8327829837799072, 0.8421608805656433, 0.8301413059234619, 0.8502179384231567, 0.850350022315979, 0.8506141901016235, 0.8570862412452698, 0.8496896028518677, 0.8667283058166504, 0.859199583530426, 0.8590674996376038], "val_loss": [1.9418606758117676, 1.6750710010528564, 0.9712913632392883, 0.83831787109375, 0.8631676435470581, 0.7845442891120911, 0.6598373055458069, 0.6156541705131531, 0.6011720895767212, 0.6034512519836426, 0.6228906512260437, 0.5790322422981262, 0.5670907497406006, 0.5165508389472961, 0.5147167444229126, 0.49474844336509705, 0.4904610216617584, 0.5551862120628357, 0.5002984404563904, 0.4964471161365509, 0.47202643752098083, 0.4843614399433136, 0.4931347966194153, 0.46542438864707947, 0.4570378363132477, 0.4800240993499756, 0.4556054174900055, 0.43240034580230713, 0.4519272744655609, 0.48006945848464966, 0.4195323884487152, 0.45184001326560974, 0.41776344180107117, 0.42644938826560974, 0.4452136158943176, 0.41185757517814636, 0.4244036078453064, 0.42007389664649963, 0.43246564269065857, 0.4748050272464752, 0.40097811818122864], "val_accuracy": [0.35100001096725464, 0.4300000071525574, 0.6629999876022339, 0.6846666932106018, 0.6836666464805603, 0.6893333196640015, 0.7246666550636292, 0.7726666927337646, 0.7663333415985107, 0.7563333511352539, 0.7356666922569275, 0.7806666493415833, 0.7893333435058594, 0.7983333468437195, 0.800000011920929, 0.8149999976158142, 0.8193333148956299, 0.7716666460037231, 0.8040000200271606, 0.8140000104904175, 0.8220000267028809, 0.8199999928474426, 0.8096666932106018, 0.8246666789054871, 0.8286666870117188, 0.8196666836738586, 0.8353333473205566, 0.8410000205039978, 0.8256666660308838, 0.8320000171661377, 0.8486666679382324, 0.8299999833106995, 0.846666693687439, 0.840666651725769, 0.8349999785423279, 0.8550000190734863, 0.8483333587646484, 0.8460000157356262, 0.8476666808128357, 0.8186666369438171, 0.8550000190734863]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 6, 8, 2, 4, 5, 9, 8, 3, 0, 8, 8, 1, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 1, 0, 3, 1, 1, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [14, 55, 93, 41, 8, 79, 86, 52, 44], [0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 2, 6, 0, 0, 2, 5, 0, 5, 0, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [5, 3, 1, 3, 1, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [36, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 0, 1, 0, 1], [1, 1, 1, 0], [2, 3, 0], [4, 0], [38], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [0, 3, 3, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [48, 9, 45, 71, 34, 14, 2]], "fitness": -0.824571430683136, "mapping_values": [1, 1, 1, 0, 1, 1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.090045213699341, 1.7627127170562744, 1.3494600057601929, 1.0534615516662598, 0.9076318144798279, 0.8935261964797974, 0.7939761877059937, 0.7300176620483398, 0.6682091951370239, 0.6641002297401428, 0.6481286883354187, 0.6063365340232849, 0.6104998588562012, 0.5987334251403809, 0.563494086265564, 0.5567799806594849, 0.5304529070854187, 0.536864697933197, 0.5205702185630798, 0.5208269357681274, 0.5138888955116272, 0.4959261417388916, 0.4987505078315735, 0.4726477563381195, 0.46916523575782776, 0.4709136188030243, 0.4623548686504364, 0.44899100065231323, 0.4330287277698517, 0.42763498425483704, 0.4336646795272827, 0.40570327639579773, 0.4156976342201233, 0.4036237299442291, 0.4094574749469757, 0.4015776216983795], "accuracy": [0.3057720363140106, 0.4224012792110443, 0.5346717834472656, 0.6276581883430481, 0.6573768258094788, 0.6754721999168396, 0.6934354901313782, 0.719852089881897, 0.7437590956687927, 0.7495707273483276, 0.7475894689559937, 0.7697794437408447, 0.7688548564910889, 0.7691190242767334, 0.7807422876358032, 0.7886672616004944, 0.8013472557067871, 0.7931581139564514, 0.8072909712791443, 0.8042530417442322, 0.8059701323509216, 0.8138951063156128, 0.8080834746360779, 0.8168009519577026, 0.8256505131721497, 0.8256505131721497, 0.8277638554573059, 0.8293488025665283, 0.8389908671379089, 0.8400475382804871, 0.8404437899589539, 0.8531237840652466, 0.8418967127799988, 0.8471800088882446, 0.8506141901016235, 0.8494254350662231], "val_loss": [1.9424508810043335, 1.613613247871399, 1.115188479423523, 0.8600056767463684, 0.9641868472099304, 0.7803051471710205, 0.6803746223449707, 0.5985956192016602, 0.5992396473884583, 0.5903959274291992, 0.6095175743103027, 0.5705305337905884, 0.5549108982086182, 0.5264971256256104, 0.5342961549758911, 0.4981553256511688, 0.5726270079612732, 0.482785165309906, 0.5051713585853577, 0.5067365169525146, 0.46449971199035645, 0.4962725341320038, 0.4907192289829254, 0.48270106315612793, 0.44747209548950195, 0.4898153841495514, 0.4803759455680847, 0.43494662642478943, 0.43446770310401917, 0.45999443531036377, 0.4168129861354828, 0.43445995450019836, 0.4311603903770447, 0.42783212661743164, 0.4441690146923065, 0.4070509374141693], "val_accuracy": [0.35066667199134827, 0.42366665601730347, 0.6353333592414856, 0.6753333210945129, 0.6830000281333923, 0.687333345413208, 0.7229999899864197, 0.7680000066757202, 0.7693333625793457, 0.7680000066757202, 0.749666690826416, 0.7903333306312561, 0.7906666398048401, 0.7973333597183228, 0.7996666431427002, 0.8169999718666077, 0.7796666622161865, 0.8216666579246521, 0.8073333501815796, 0.8096666932106018, 0.8253333568572998, 0.8116666674613953, 0.8206666707992554, 0.8149999976158142, 0.8373333215713501, 0.812666654586792, 0.8216666579246521, 0.8379999995231628, 0.8366666436195374, 0.8379999995231628, 0.8506666421890259, 0.8423333168029785, 0.8460000157356262, 0.8420000076293945, 0.8339999914169312, 0.8503333330154419]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [3, 2, 3, 4, 6, 1, 9, 8, 3, 8, 8, 8, 1, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 1, 2, 3, 2, 1, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [14, 55, 93, 41, 8, 79, 86, 52, 44], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 7, 5, 3, 0, 2, 4, 9, 9, 0, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [5, 1, 3, 3, 1, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [4, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 0, 1, 0, 1], [1, 1, 1, 0], [2, 3, 0], [4, 0], [38], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [0, 3, 3, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [48, 9, 45, 71, 34, 14, 2]], "fitness": -0.817714273929596, "mapping_values": [1, 18, 18, 11, 7, 2, 12, 12, 8, 4, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.multiply(grad, tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), alpha)), tf.math.sqrt(tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, grad)), tf.math.add(alpha, grad)))), grad))), tf.math.add(alpha, alpha))), tf.math.sqrt(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, grad)), tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.add(tf.math.pow(grad, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.090797185897827, 1.781242847442627, 1.479570746421814, 1.113223671913147, 0.930029034614563, 0.8258991241455078, 0.7753164172172546, 0.7405498027801514, 0.7009482979774475, 0.6648145318031311, 0.6210465431213379, 0.6450672149658203, 0.5948829054832458, 0.593356192111969, 0.5614875555038452, 0.5609492659568787, 0.5398121476173401, 0.5225530862808228, 0.5165480971336365, 0.5263497233390808, 0.5075197815895081, 0.4988214075565338, 0.4967767894268036, 0.4725906252861023], "accuracy": [0.3053757846355438, 0.4150046110153198, 0.5037643909454346, 0.5857878923416138, 0.6556597352027893, 0.6952846646308899, 0.7071720957756042, 0.7176066637039185, 0.7302865982055664, 0.7420420050621033, 0.7655527591705322, 0.7516840696334839, 0.7765156626701355, 0.7728173136711121, 0.7872143983840942, 0.787082314491272, 0.7930260300636292, 0.8039889335632324, 0.8039889335632324, 0.8018755912780762, 0.8109893202781677, 0.805177628993988, 0.8113855719566345, 0.8234050869941711], "val_loss": [1.9537709951400757, 1.0303715467453003, 0.8692214488983154, 0.9881407618522644, 0.7737925052642822, 0.765862226486206, 0.624811589717865, 0.6137222647666931, 0.6015817523002625, 0.57368403673172, 0.698128342628479, 0.544352114200592, 0.5530318021774292, 0.5112189054489136, 0.5607947111129761, 0.4952678084373474, 0.5559870004653931, 0.49185773730278015, 0.4782319664955139, 0.4954095184803009, 0.49991947412490845, 0.48745986819267273, 0.4936331808567047, 0.4975520968437195], "val_accuracy": [0.34299999475479126, 0.6286666393280029, 0.7006666660308838, 0.640999972820282, 0.7070000171661377, 0.7106666564941406, 0.7546666860580444, 0.7670000195503235, 0.7536666393280029, 0.781333327293396, 0.7193333506584167, 0.7906666398048401, 0.7736666798591614, 0.8069999814033508, 0.7770000100135803, 0.8059999942779541, 0.778333306312561, 0.8069999814033508, 0.8216666579246521, 0.8163333535194397, 0.8009999990463257, 0.8116666674613953, 0.8090000152587891, 0.8076666593551636]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [3, 2, 6, 4, 6, 1, 9, 8, 4, 8, 8, 8, 4, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 1, 0, 3, 2, 0, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [64, 55, 93, 41, 8, 79, 86, 52, 44], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 8, 6, 3, 0, 2, 4, 9, 9, 0, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [5, 1, 3, 3, 1, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [4, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 0, 1, 0, 1], [1, 1, 1, 0], [2, 3, 0], [4, 0], [38], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [0, 3, 3, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [9, 9, 45, 71, 34, 14, 2]], "fitness": -0.38428571820259094, "mapping_values": [1, 18, 18, 11, 7, 4, 13, 13, 7, 6, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.pow(tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))))), grad), tf.math.add(alpha, grad)))), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, grad))))))), tf.math.pow(tf.math.add(beta, alpha), tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.3017313480377197, 2.301712989807129, 2.302276611328125, 2.3010456562042236, 2.3014886379241943, 2.299992322921753, 2.299154758453369, 2.299701690673828, 2.2991995811462402, 2.299372911453247, 2.297498941421509, 2.296776533126831, 2.2971081733703613, 2.293652057647705, 2.2950613498687744, 2.293351411819458, 2.2929487228393555, 2.292170524597168, 2.2924816608428955, 2.2920947074890137, 2.290980577468872, 2.2921535968780518, 2.2917206287384033, 2.290571451187134, 2.288595676422119, 2.2888948917388916, 2.2879109382629395, 2.2872207164764404, 2.289233684539795, 2.2869012355804443, 2.285600423812866, 2.285283327102661, 2.2831051349639893, 2.2846896648406982, 2.284487009048462, 2.2841837406158447, 2.2820193767547607, 2.2815611362457275, 2.281869649887085, 2.281064748764038, 2.2807252407073975, 2.279078483581543, 2.280036687850952, 2.278455972671509, 2.277888536453247, 2.2768993377685547, 2.277069091796875, 2.276315212249756, 2.277402639389038, 2.275904417037964, 2.2755255699157715, 2.272475004196167, 2.27229642868042, 2.2727713584899902, 2.2722625732421875, 2.270852565765381, 2.2713937759399414, 2.2688992023468018, 2.269296169281006, 2.267765522003174, 2.269299030303955, 2.2684125900268555, 2.2674784660339355, 2.2662863731384277, 2.2675156593322754, 2.265174388885498, 2.2644801139831543, 2.2653067111968994, 2.264599323272705, 2.2631428241729736, 2.2613277435302734, 2.2618582248687744, 2.2612974643707275, 2.2619080543518066, 2.2603158950805664, 2.258831262588501, 2.2576370239257812, 2.2570953369140625, 2.256929874420166, 2.2580037117004395, 2.2557532787323, 2.254531145095825, 2.2557690143585205, 2.2545344829559326, 2.253678560256958, 2.253696918487549, 2.251648426055908, 2.252318859100342, 2.250753402709961, 2.2512619495391846, 2.248666524887085, 2.248643636703491, 2.2500557899475098, 2.247708559036255, 2.2481062412261963, 2.245205879211426, 2.2452118396759033, 2.245342254638672, 2.2428040504455566, 2.2427611351013184], "accuracy": [0.09219389408826828, 0.09259014576673508, 0.09047681838274002, 0.0936468094587326, 0.09391097724437714, 0.10038304328918457, 0.09351472556591034, 0.09893012791872025, 0.09694888442754745, 0.09866596013307571, 0.10593052208423615, 0.10910051316022873, 0.10276053100824356, 0.11227050423622131, 0.11121384054422379, 0.10659094154834747, 0.11530841141939163, 0.12415797263383865, 0.12389380484819412, 0.12019548565149307, 0.11662924289703369, 0.11742173880338669, 0.11372341960668564, 0.12178047746419907, 0.12812046706676483, 0.12296922504901886, 0.1258750557899475, 0.13129045069217682, 0.12600713968276978, 0.13657376170158386, 0.1270637959241867, 0.13736626505851746, 0.14793290197849274, 0.13551710546016693, 0.14212125539779663, 0.136045441031456, 0.14397041499614716, 0.1438383311033249, 0.14410249888896942, 0.14515915513038635, 0.15281997621059418, 0.1530841439962387, 0.15480121970176697, 0.148064985871315, 0.15678246319293976, 0.1582353711128235, 0.15334829688072205, 0.16523577272891998, 0.15942411124706268, 0.1558578759431839, 0.1624620258808136, 0.17395325005054474, 0.1632545292377472, 0.1702549159526825, 0.1666886806488037, 0.17342491447925568, 0.16602826118469238, 0.1810857206583023, 0.1784440577030182, 0.18372738361358643, 0.175670325756073, 0.1784440577030182, 0.1830669641494751, 0.18716153502464294, 0.1814819723367691, 0.18782195448875427, 0.18861444294452667, 0.19191652536392212, 0.1942940205335617, 0.18940694630146027, 0.19865275919437408, 0.19614318013191223, 0.1958790123462677, 0.20195482671260834, 0.2024831622838974, 0.20340773463249207, 0.2102760523557663, 0.21344605088233948, 0.21014396846294403, 0.20697398483753204, 0.21304979920387268, 0.20803064107894897, 0.2052568942308426, 0.21635186672210693, 0.22018226981163025, 0.21199312806129456, 0.21938978135585785, 0.2207106053829193, 0.2277110069990158, 0.21820102632045746, 0.22942808270454407, 0.22705058753490448, 0.22282393276691437, 0.22982433438301086, 0.23365473747253418, 0.23959846794605255, 0.23484347760677338, 0.2308809906244278, 0.2405230551958084, 0.2374851405620575], "val_loss": [2.2997796535491943, 2.2991509437561035, 2.298513650894165, 2.297882080078125, 2.297254800796509, 2.2966299057006836, 2.296010971069336, 2.2953836917877197, 2.2947704792022705, 2.2941410541534424, 2.29351544380188, 2.2928967475891113, 2.29227614402771, 2.2916457653045654, 2.291025161743164, 2.2904014587402344, 2.289778470993042, 2.2891576290130615, 2.2885396480560303, 2.287930727005005, 2.2873079776763916, 2.2866904735565186, 2.2860732078552246, 2.2854607105255127, 2.284843921661377, 2.284217357635498, 2.2835934162139893, 2.2829806804656982, 2.282371997833252, 2.2817587852478027, 2.2811405658721924, 2.280524969100952, 2.2799031734466553, 2.2792763710021973, 2.2786498069763184, 2.278031349182129, 2.2774078845977783, 2.2767884731292725, 2.2761664390563965, 2.275545835494995, 2.274921178817749, 2.274294376373291, 2.2736713886260986, 2.2730345726013184, 2.272409200668335, 2.2717764377593994, 2.271146774291992, 2.270521402359009, 2.269890308380127, 2.2692642211914062, 2.2686283588409424, 2.2679879665374756, 2.2673439979553223, 2.266710042953491, 2.2660768032073975, 2.2654378414154053, 2.2647974491119385, 2.2641470432281494, 2.2634952068328857, 2.262838840484619, 2.262190103530884, 2.2615394592285156, 2.2608847618103027, 2.2602286338806152, 2.2595741748809814, 2.258915901184082, 2.2582504749298096, 2.2575809955596924, 2.256922483444214, 2.2562575340270996, 2.2555787563323975, 2.254901647567749, 2.254223585128784, 2.253544807434082, 2.252861976623535, 2.2521698474884033, 2.251476526260376, 2.2507715225219727, 2.2500712871551514, 2.249380111694336, 2.2486774921417236, 2.2479660511016846, 2.247265577316284, 2.2465546131134033, 2.2458460330963135, 2.245124578475952, 2.244399309158325, 2.243682861328125, 2.2429544925689697, 2.2422313690185547, 2.241492509841919, 2.240753650665283, 2.2400059700012207, 2.2392678260803223, 2.2385196685791016, 2.237764358520508, 2.2370123863220215, 2.2362539768218994, 2.235488176345825, 2.234718084335327], "val_accuracy": [0.03933333232998848, 0.04233333468437195, 0.04800000041723251, 0.05066666752099991, 0.05299999937415123, 0.054999999701976776, 0.057999998331069946, 0.06133333221077919, 0.06599999964237213, 0.06966666877269745, 0.07466666400432587, 0.07800000160932541, 0.08366666734218597, 0.08866667002439499, 0.09433333575725555, 0.0963333323597908, 0.09966666996479034, 0.10266666859388351, 0.10700000077486038, 0.11266666650772095, 0.11866666376590729, 0.12333333492279053, 0.12933333218097687, 0.1340000033378601, 0.140666663646698, 0.1459999978542328, 0.15299999713897705, 0.15800000727176666, 0.16300000250339508, 0.16833333671092987, 0.17266666889190674, 0.17766666412353516, 0.18400000035762787, 0.1899999976158142, 0.19466666877269745, 0.2006666660308838, 0.20600000023841858, 0.2096666693687439, 0.21266666054725647, 0.21666666865348816, 0.22033333778381348, 0.22566667199134827, 0.2293333262205124, 0.23333333432674408, 0.23999999463558197, 0.2436666637659073, 0.24666666984558105, 0.2513333261013031, 0.25566667318344116, 0.26100000739097595, 0.26499998569488525, 0.27000001072883606, 0.27266666293144226, 0.2773333191871643, 0.2809999883174896, 0.2840000092983246, 0.28733333945274353, 0.2903333306312561, 0.2953333258628845, 0.30133333802223206, 0.3063333332538605, 0.3113333284854889, 0.31700000166893005, 0.32066667079925537, 0.32366666197776794, 0.3253333270549774, 0.3283333480358124, 0.33033332228660583, 0.3319999873638153, 0.3343333303928375, 0.3383333384990692, 0.3423333466053009, 0.3449999988079071, 0.3476666808128357, 0.35066667199134827, 0.35233333706855774, 0.35333332419395447, 0.35499998927116394, 0.3569999933242798, 0.359333336353302, 0.3623333275318146, 0.3633333444595337, 0.3659999966621399, 0.36766666173934937, 0.3696666657924652, 0.3713333308696747, 0.3733333349227905, 0.37466666102409363, 0.3773333430290222, 0.37933334708213806, 0.37966665625572205, 0.38066667318344116, 0.38100001215934753, 0.38199999928474426, 0.38366666436195374, 0.3840000033378601, 0.38466668128967285, 0.38499999046325684, 0.38499999046325684, 0.38600000739097595]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 2, 2, 4, 6, 1, 9, 8, 3, 0, 8, 8, 1, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 2, 2, 3, 0, 1, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [74, 55, 93, 41, 8, 79, 86, 52, 44], [1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 7, 5, 3, 0, 2, 4, 9, 9, 0, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [3, 1, 0, 3, 1, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [46, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 0, 1, 0, 1], [1, 1, 1, 0], [2, 3, 0], [4, 0], [38], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [2, 0, 3, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [48, 9, 45, 71, 34, 14, 2]], "fitness": -0.2937142848968506, "mapping_values": [1, 16, 16, 9, 7, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(grad, tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), grad)), tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.multiply(grad, tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))))), alpha)), tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(beta), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.466315269470215, 2.355973720550537, 2.1449623107910156, 3.113307476043701, 4.174169063568115, 2.466370105743408, 2.4251325130462646, 2.4374189376831055, 2.4430429935455322], "accuracy": [0.2576938271522522, 0.1850482076406479, 0.2510896921157837, 0.28741249442100525, 0.17884030938148499, 0.10249637067317963, 0.10170386731624603, 0.09972262382507324, 0.10249637067317963], "val_loss": [2.1998047828674316, 2.1219844818115234, 1.9438480138778687, 5.11359167098999, 2.5115182399749756, 2.404313564300537, 2.511831521987915, 2.3725595474243164, 2.497206449508667], "val_accuracy": [0.2866666615009308, 0.2696666717529297, 0.3009999990463257, 0.42633333802223206, 0.10066666454076767, 0.09933333098888397, 0.10066666454076767, 0.0989999994635582, 0.09700000286102295]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [3, 2, 3, 4, 6, 1, 9, 8, 4, 8, 5, 8, 1, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 1, 2, 0, 2, 1, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [64, 55, 22, 41, 8, 79, 86, 52, 44], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 7, 5, 3, 0, 2, 3, 5, 9, 0, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [5, 1, 3, 3, 1, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [4, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 0, 1, 0, 1], [1, 1, 1, 0], [2, 3, 0], [4, 0], [38], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [0, 1, 3, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [47, 9, 45, 71, 34, 14, 2]], "fitness": -0.10000000149011612, "mapping_values": [1, 18, 18, 11, 7, 4, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.pow(tf.math.sqrt(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))), grad))), tf.math.add(alpha, alpha)), tf.math.square(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(grad, tf.math.add(beta, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [3, 0, 3, 3, 6, 1, 9, 8, 3, 0, 8, 8, 1, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 0, 1, 3, 1, 1, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [16, 65, 93, 41, 8, 79, 86, 52, 44], [1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 7, 5, 3, 0, 2, 4, 9, 9, 0, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [3, 1, 0, 3, 1, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [4, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 0, 1, 0, 1], [1, 0, 1, 0], [2, 3, 0], [4, 0], [38], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1], [3, 0, 1, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6, 5, 9, 7, 8, 5, 4, 9, 1, 5, 7, 9, 8], [3, 3, 3, 3, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [48, 9, 45, 71, 34, 14, 2]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 4, 4, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 40, 28, 12, 7], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.negative(tf.math.multiply(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)))), tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.math.subtract(tf.math.multiply(tf.math.add(tf.math.square(sigma), tf.math.multiply(sigma, tf.math.subtract(tf.math.pow(tf.math.multiply(sigma, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.negative(tf.math.add(beta, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.divide_no_nan(alpha, tf.math.square(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32))))), tf.math.sqrt(sigma)), tf.math.square(tf.math.pow(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.square(tf.math.add(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.sqrt(beta))), beta)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [3, 2, 3, 4, 6, 1, 9, 8, 3, 8, 8, 8, 1, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 1, 2, 0, 2, 1, 0, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [14, 55, 93, 41, 8, 79, 86, 52, 44], [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 7, 5, 3, 0, 2, 3, 9, 9, 0, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [0, 3, 3, 3, 1, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [4, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 0, 1, 0, 1], [1, 1, 1, 0], [2, 3, 0], [4, 0], [38], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [0, 0, 3, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [48, 9, 45, 71, 34, 14, 2]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 12, 12, 9, 3, 3, 1, 1, 0, 1, 0, 4, 2, 2, 2], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32))))), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.336596965789795, 2.6980020999908447, 3.7267932891845703, 5.531222343444824, 8.096209526062012, 11.410115242004395, 15.320826530456543], "accuracy": [0.09179764986038208, 0.09589222073554993, 0.09985470771789551, 0.0956280529499054, 0.10051512718200684, 0.10130762308835983, 0.09932637959718704], "val_loss": [2.374138355255127, 2.7775235176086426, 3.730409860610962, 5.283857822418213, 7.3913960456848145, 10.038742065429688, 13.24582576751709], "val_accuracy": [0.09799999743700027, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 2, 3, 4, 6, 1, 9, 8, 3, 0, 8, 8, 1, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 0, 0, 3, 1, 0, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [74, 55, 93, 41, 8, 79, 86, 52, 44], [1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 7, 5, 3, 0, 2, 4, 9, 9, 0, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [3, 1, 0, 3, 1, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [4, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 0, 1, 0, 1], [1, 1, 1, 0], [2, 3, 0], [3, 0], [38], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [2, 8, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [0, 3, 3, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [48, 9, 45, 71, 34, 14, 2]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 8, 6, 5, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.subtract(tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(alpha, alpha))))), tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.sqrt(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.30210018157959, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [3, 3, 3, 4, 6, 2, 4, 2, 3, 8, 8, 8, 1, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 0, 0, 3, 1, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [74, 35, 93, 41, 8, 79, 86, 52, 44], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 7, 6, 3, 0, 2, 4, 9, 9, 0, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [3, 1, 0, 3, 1, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [4, 5, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 0, 1, 0, 1], [1, 1, 1, 0], [2, 3, 0], [4, 0], [38], [1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 3, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [0, 3, 3, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [48, 9, 45, 71, 34, 14, 2]], "fitness": -0.10000000149011612, "mapping_values": [1, 25, 25, 15, 10, 5, 13, 13, 7, 6, 2, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.add(tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)), tf.math.sqrt(alpha)))), tf.math.sqrt(grad))), tf.math.subtract(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), grad)), tf.math.add(alpha, grad)))), tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))), tf.math.square(tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.multiply(tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, alpha)))), tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), grad), tf.math.pow(tf.math.add(beta, alpha), tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.30210018157959, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [3, 2, 3, 4, 6, 1, 9, 8, 4, 8, 8, 8, 1, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 1, 2, 3, 2, 1, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [34, 55, 93, 41, 8, 79, 86, 52, 44], [1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 7, 5, 3, 0, 2, 3, 9, 9, 0, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [5, 1, 3, 0, 1, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [46, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [1, 0, 0, 1, 0, 1], [1, 1, 1, 0], [2, 3, 0], [4, 0], [38], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [1, 3, 3, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [48, 9, 45, 71, 34, 14, 2]], "fitness": -0.10000000149011612, "mapping_values": [1, 21, 21, 13, 8, 2, 12, 12, 8, 4, 2, 1, 0, 0, 0, 0, 11, 6, 5, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.multiply(tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(grad))), tf.math.pow(tf.math.sqrt(tf.math.sqrt(tf.math.add(alpha, alpha))), grad))), grad), tf.math.add(alpha, grad)), tf.math.sqrt(alpha)), tf.math.subtract(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), grad))), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(alpha, grad)), tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)))))))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.subtract(alpha, sigma)), tf.math.add(tf.math.add(sigma, beta), tf.math.square(beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 4, 2, 2, 4, 5, 5, 8, 3, 0, 8, 8, 1, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 2, 2, 3, 2, 1, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [55, 55, 93, 41, 8, 79, 86, 52, 44], [1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 7, 5, 3, 0, 2, 4, 2, 9, 0, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [5, 1, 3, 3, 1, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [4, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 0, 1, 0, 1], [1, 1, 1, 0], [2, 3, 0], [4, 0], [38], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 6, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [0, 3, 3, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [48, 9, 45, 71, 34, 14, 2]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 0, 5, 5, 3, 2, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(grad, grad)))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, tf.math.add(tf.math.square(grad), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.30210018157959, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [3, 2, 3, 4, 6, 1, 9, 8, 3, 8, 8, 8, 1, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 1, 0, 3, 1, 1, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [55, 55, 93, 41, 8, 79, 86, 52, 44], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 5, 6, 0, 0, 2, 4, 3, 5, 0, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [5, 1, 3, 3, 1, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [4, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 0, 1, 0, 1], [1, 1, 1, 0], [2, 3, 0], [4, 0], [38], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [2, 0, 3, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [48, 9, 45, 71, 34, 14, 2]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 11, 5, 6, 2, 14, 14, 8, 6, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), alpha)), tf.math.add(alpha, tf.math.multiply(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(grad, alpha), alpha)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.negative(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(alpha, grad)), tf.math.multiply(tf.math.add(beta, grad), alpha))))))))), tf.math.add(beta, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(beta), tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [3, 2, 3, 4, 6, 1, 9, 8, 4, 8, 8, 8, 1, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 0, 0, 2, 1, 1, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [97, 55, 33, 41, 8, 79, 86, 52, 44], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 8, 5, 3, 0, 2, 4, 5, 9, 0, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [3, 0, 0, 3, 1, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [84, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 0, 1, 0, 1], [1, 1, 1, 0], [2, 3, 0], [4, 0], [38], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [2, 2, 3, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [79, 9, 45, 71, 34, 14, 2]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 8, 6, 4, 13, 13, 8, 5, 2, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.constant(9.99932002e-01, shape=shape, dtype=tf.float32), tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.subtract(tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(alpha, alpha))))), tf.math.add(alpha, alpha)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.square(tf.math.add(beta, grad)))), tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.add(tf.math.pow(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.square(grad))), alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(beta), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10038304328918457, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [3, 2, 3, 4, 6, 8, 9, 8, 3, 8, 8, 8, 1, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 1, 2, 3, 2, 1, 1, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [14, 55, 93, 41, 8, 79, 86, 52, 44], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [9, 2, 5, 3, 0, 2, 4, 9, 9, 0, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [2, 1, 3, 3, 1, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [4, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 0, 1, 0, 1], [1, 1, 1, 0], [2, 3, 0], [4, 0], [38], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [0, 3, 3, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [48, 9, 45, 71, 34, 14, 2]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 15, 9, 6, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.multiply(grad, tf.math.add(alpha, tf.math.pow(alpha, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(grad), tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)))))), tf.math.sqrt(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad))))), alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [1044624.1875, 2.314220666885376, 2.3059065341949463, 2.303530693054199, 2.3030285835266113, 2.3029842376708984], "accuracy": [0.09536388516426086, 0.09153348207473755, 0.09708096832036972, 0.09945846349000931, 0.09457138925790787, 0.09298639744520187], "val_loss": [2.320286512374878, 2.307360887527466, 2.3035476207733154, 2.302722454071045, 2.3026316165924072, 2.302659511566162], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.0989999994635582, 0.09700000286102295, 0.09966666996479034, 0.09700000286102295]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 8, 3, 4, 6, 1, 9, 8, 3, 0, 8, 8, 1, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 0, 0, 3, 1, 1, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [74, 48, 93, 41, 8, 79, 86, 52, 44], [1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 7, 5, 3, 0, 2, 4, 9, 9, 0, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [3, 1, 0, 3, 1, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [4, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 0, 1, 0, 1], [1, 1, 1, 0], [2, 3, 0], [7, 0], [38], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [9, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [0, 3, 3, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [48, 9, 45, 71, 34, 14, 2]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 3, 3, 3, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.sqrt(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(alpha, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.30210018157959, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 3, 3, 4, 6, 1, 9, 8, 3, 0, 8, 8, 1, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 1, 0, 3, 1, 1, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [55, 55, 93, 41, 8, 79, 86, 52, 44], [1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 7, 5, 3, 2, 9, 4, 9, 9, 0, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [3, 1, 0, 3, 3, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [36, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 0, 1, 0, 1], [1, 1, 1, 0], [2, 3, 0], [7, 0], [38], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [2, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [0, 3, 3, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [48, 9, 45, 71, 34, 14, 2]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 8, 6, 3, 12, 12, 7, 5, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))))), tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.subtract(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(alpha, alpha))))), tf.math.add(alpha, alpha))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(tf.math.add(alpha, tf.math.add(beta, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32))), tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.pow(grad, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10315678268671036, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 4, 8, 2, 4, 5, 5, 8, 3, 0, 8, 8, 1, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 2, 0, 1, 2, 1, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [14, 55, 93, 41, 8, 79, 86, 52, 44], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 7, 5, 3, 0, 2, 4, 9, 9, 0, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [3, 1, 0, 3, 1, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [4, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 0, 1, 0, 1], [1, 1, 1, 0], [2, 3, 0], [4, 0], [38], [1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [1, 3, 3, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [48, 9, 45, 71, 34, 14, 2]], "fitness": -0.10000000149011612, "mapping_values": [1, 11, 11, 7, 4, 1, 12, 12, 7, 5, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.sqrt(grad), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(grad)))), tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.square(tf.math.add(beta, grad)), tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.pow(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, alpha)))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982, 0.10133333504199982]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 2, 3, 4, 6, 1, 9, 8, 3, 0, 8, 8, 1, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 0, 0, 3, 1, 1, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [74, 55, 93, 41, 8, 79, 86, 52, 44], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 7, 5, 3, 0, 2, 4, 9, 9, 0, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [2, 1, 0, 3, 1, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [4, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 0, 1, 0, 1], [0, 1, 1, 0], [2, 3, 0], [4, 0], [38], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [6, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [2, 3, 3, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [48, 9, 45, 71, 34, 14, 2]], "fitness": -0.03857142850756645, "mapping_values": [1, 16, 16, 9, 7, 5, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 3, 1, 2, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.add(tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.subtract(tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(alpha, alpha))))), tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.add(tf.math.add(sigma, grad), tf.math.add(sigma, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(beta, sigma)", "other_info": {"loss": [2.3019652366638184, 2.3025240898132324, 2.303683042526245, 2.303025484085083, 2.3040454387664795, 2.3030941486358643], "accuracy": [0.09140139818191528, 0.09113723784685135, 0.08730682730674744, 0.08836349099874496, 0.08770307898521423, 0.09245806187391281], "val_loss": [2.3004064559936523, 2.3004064559936523, 2.3004064559936523, 2.3004064559936523, 2.3004064559936523, 2.3004064559936523], "val_accuracy": [0.03733333200216293, 0.03733333200216293, 0.03733333200216293, 0.03733333200216293, 0.03733333200216293, 0.03733333200216293]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 4, 8, 2, 4, 5, 5, 8, 3, 0, 8, 8, 1, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 1, 2, 3, 2, 1, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [55, 55, 93, 41, 8, 79, 86, 52, 44], [0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 7, 2, 3, 0, 2, 4, 9, 9, 0, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [5, 2, 3, 1, 1, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [54, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 0, 1, 0, 1], [1, 1, 1, 0], [2, 3, 0], [3, 0], [38], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 7, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [0, 3, 3, 2, 2, 0, 1, 0, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 3, 0], [48, 9, 45, 71, 34, 14, 2]], "fitness": -0.03857142850756645, "mapping_values": [1, 10, 10, 6, 4, 0, 13, 13, 8, 5, 1, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.sqrt(grad), tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.square(alpha)), grad), grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(beta, grad))))), tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, alpha)), alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [2.3019652366638184, 2.3025240898132324, 2.303683042526245, 2.303025484085083, 2.3040454387664795, 2.3030941486358643], "accuracy": [0.09140139818191528, 0.09113723784685135, 0.08730682730674744, 0.08836349099874496, 0.08770307898521423, 0.09245806187391281], "val_loss": [2.3004064559936523, 2.3004064559936523, 2.3004064559936523, 2.3004064559936523, 2.3004064559936523, 2.3004064559936523], "val_accuracy": [0.03733333200216293, 0.03733333200216293, 0.03733333200216293, 0.03733333200216293, 0.03733333200216293, 0.03733333200216293]}}]