[{"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 4, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 2, 0, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [43, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 2, 8, 3, 0, 2, 4, 9, 9, 0, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [3, 1, 3, 3, 1, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [77, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [38], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [46, 9, 43, 71, 34]], "fitness": -0.8105714321136475, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.0434556007385254, 1.472321629524231, 1.0373961925506592, 0.8985455632209778, 0.7972912788391113, 0.7566148638725281, 0.7064077258110046, 0.6996456384658813, 0.6580126881599426, 0.6499407291412354, 0.6494079232215881, 0.596522867679596, 0.5747687220573425, 0.5778528451919556, 0.5854611396789551, 0.5413413643836975, 0.5659269690513611, 0.5383479595184326, 0.5051667094230652, 0.5053527355194092, 0.48849788308143616, 0.5014424920082092, 0.4758186936378479, 0.4701785743236542, 0.47837933897972107, 0.45068472623825073, 0.43561896681785583, 0.4415954053401947, 0.44819483160972595, 0.4123339056968689, 0.430951327085495, 0.4150499403476715, 0.4134753942489624, 0.39668750762939453, 0.3950212597846985, 0.38271215558052063, 0.37499749660491943, 0.38030576705932617, 0.37206947803497314, 0.37140271067619324, 0.3452339768409729, 0.3632575273513794, 0.33632561564445496, 0.36014604568481445, 0.34836697578430176, 0.3373304307460785], "accuracy": [0.3066965937614441, 0.4905560612678528, 0.6185444593429565, 0.661471426486969, 0.6976621150970459, 0.7164179086685181, 0.7250033020973206, 0.7312111854553223, 0.7486461400985718, 0.7467969655990601, 0.7481178045272827, 0.7732135653495789, 0.7819310426712036, 0.78113853931427, 0.77677983045578, 0.7968564033508301, 0.7827235460281372, 0.8017435073852539, 0.8105930685997009, 0.81112140417099, 0.8202351331710815, 0.8131026029586792, 0.8220842480659485, 0.8277638554573059, 0.8259146809577942, 0.8325188159942627, 0.8418967127799988, 0.8374059200286865, 0.83119797706604, 0.8511425256729126, 0.8413683772087097, 0.846387505531311, 0.8494254350662231, 0.8545766472816467, 0.8574824929237366, 0.858671247959137, 0.8640866279602051, 0.86118084192276, 0.8601241707801819, 0.8614450097084045, 0.8771628737449646, 0.8659358024597168, 0.8762382864952087, 0.8594637513160706, 0.8701624870300293, 0.8741249442100525], "val_loss": [1.556148648262024, 1.16045343875885, 0.8022585511207581, 0.8241933584213257, 0.7292032837867737, 0.6979326009750366, 0.650884211063385, 0.6173313856124878, 0.6194401979446411, 0.6236681938171387, 0.5670098662376404, 0.5493305921554565, 0.5449413657188416, 0.5718854069709778, 0.5547837615013123, 0.5441634058952332, 0.5175141096115112, 0.47947803139686584, 0.5090174674987793, 0.4988836348056793, 0.5556377172470093, 0.48110947012901306, 0.461242139339447, 0.45542749762535095, 0.44622305035591125, 0.43026453256607056, 0.4505223035812378, 0.45414498448371887, 0.4165783226490021, 0.45336705446243286, 0.4491874575614929, 0.4485446512699127, 0.42843207716941833, 0.40479376912117004, 0.42055681347846985, 0.43209758400917053, 0.40596139430999756, 0.4050542116165161, 0.38769352436065674, 0.39923974871635437, 0.38932856917381287, 0.4032779037952423, 0.4540429413318634, 0.40444299578666687, 0.38999268412590027, 0.41157087683677673], "val_accuracy": [0.4950000047683716, 0.5733333230018616, 0.6903333067893982, 0.6863333582878113, 0.7286666631698608, 0.7073333263397217, 0.722000002861023, 0.7566666603088379, 0.7666666507720947, 0.7523333430290222, 0.7743333578109741, 0.7950000166893005, 0.7903333306312561, 0.7710000276565552, 0.7673333287239075, 0.7870000004768372, 0.8033333420753479, 0.8213333487510681, 0.8036666512489319, 0.812666654586792, 0.7900000214576721, 0.8116666674613953, 0.8303333520889282, 0.8273333311080933, 0.8343333601951599, 0.8383333086967468, 0.831333339214325, 0.8273333311080933, 0.8410000205039978, 0.8259999752044678, 0.8253333568572998, 0.8339999914169312, 0.8360000252723694, 0.8426666855812073, 0.8429999947547913, 0.8416666388511658, 0.8513333201408386, 0.8556666374206543, 0.8550000190734863, 0.8479999899864197, 0.8586666584014893, 0.8543333411216736, 0.8193333148956299, 0.8443333506584167, 0.8586666584014893, 0.8453333377838135]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 5, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 2, 0, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [43, 74, 59, 56, 8, 79, 86, 52, 44], [1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [1, 2, 8, 3, 1, 2, 6, 9, 9, 0, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [3, 1, 3, 3, 1, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [77, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [6, 3], [38], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [46, 9, 43, 71, 34]], "fitness": -0.797428548336029, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.subtract(grad, alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.0781850814819336, 1.6561424732208252, 1.318796992301941, 0.9466941356658936, 0.8744295835494995, 0.7728911638259888, 0.7242743968963623, 0.6953501105308533, 0.6846449971199036, 0.6400477886199951, 0.6233064532279968, 0.6007546782493591, 0.5973291993141174, 0.5679247379302979, 0.5381220579147339, 0.5472313761711121, 0.5333383083343506, 0.5229243636131287, 0.5197201371192932, 0.49637138843536377], "accuracy": [0.29903578758239746, 0.4674415588378906, 0.5424646735191345, 0.6618676781654358, 0.6659622192382812, 0.7080966830253601, 0.7234182953834534, 0.7375511527061462, 0.7349095344543457, 0.7539294958114624, 0.7642319202423096, 0.7680623531341553, 0.7765156626701355, 0.7858935594558716, 0.798309326171875, 0.7954035401344299, 0.7980451583862305, 0.8053097128868103, 0.807158887386322, 0.8186501264572144], "val_loss": [1.846534013748169, 1.525286078453064, 1.071126937866211, 0.8273740410804749, 0.7601348757743835, 0.6554142236709595, 0.6445693969726562, 0.652600884437561, 0.6446622014045715, 0.5936219692230225, 0.5947240591049194, 0.5533326268196106, 0.5558547973632812, 0.5135708451271057, 0.5101054906845093, 0.533477246761322, 0.5423218011856079, 0.5571356415748596, 0.5137131214141846, 0.4991890788078308], "val_accuracy": [0.43566668033599854, 0.47999998927116394, 0.6016666889190674, 0.6986666917800903, 0.7126666903495789, 0.753000020980835, 0.7586666941642761, 0.7390000224113464, 0.7289999723434448, 0.7693333625793457, 0.7526666522026062, 0.7886666655540466, 0.7756666541099548, 0.7973333597183228, 0.8190000057220459, 0.8050000071525574, 0.7900000214576721, 0.7850000262260437, 0.7993333339691162, 0.8149999976158142]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 4, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 2, 0, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [43, 74, 59, 56, 8, 79, 86, 52, 44], [1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 2, 8, 3, 0, 2, 4, 9, 9, 0, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [3, 1, 3, 3, 1, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [77, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [38], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [73, 9, 43, 71, 34]], "fitness": -0.31685712933540344, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.sqrt(grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [3.3290514945983887, 2.261561632156372, 2.3282814025878906, 2.303086757659912, 2.303196668624878, 2.302856683731079], "accuracy": [0.1472724825143814, 0.18359529972076416, 0.0952318087220192, 0.0936468094587326, 0.09206181764602661, 0.0956280529499054], "val_loss": [2.280974864959717, 2.4701714515686035, 2.3026645183563232, 2.302607774734497, 2.302680253982544, 2.302619218826294], "val_accuracy": [0.39133334159851074, 0.09600000083446503, 0.10199999809265137, 0.09733333438634872, 0.10199999809265137, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 5, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [3, 2, 0, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [43, 74, 59, 56, 8, 79, 86, 52, 44], [0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 2, 8, 3, 1, 2, 6, 9, 9, 0, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [0, 1, 1, 1, 0, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [79, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [38], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [6, 7, 1, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [1, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [49, 9, 43, 71, 34]], "fitness": -0.1508571356534958, "mapping_values": [1, 1, 1, 0, 1, 0, 13, 13, 9, 4, 3, 1, 1, 0, 1, 0, 5, 2, 3, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.sqrt(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(alpha, tf.math.add(tf.math.divide_no_nan(tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32), alpha), alpha))), tf.math.add(beta, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [1.7684902766837384e+25, 2.0412793445399497e+25, 2.0035209346797746e+25, 1.9558305672260133e+25, 1.8975072659038648e+25, 1.8476480225156371e+25, 1.8494024231691974e+25, 1.792042157179847e+25, 1.7332135303622295e+25, 1.663056527424646e+25, 1.731091924209452e+25, 1.6084302994913203e+25, 1.5948839329807917e+25, 1.5826478617602488e+25, 1.5241298319959722e+25, 1.5036827691117698e+25, 1.4280621864560049e+25, 1.3984473223514697e+25, 1.330433024030198e+25, 1.3138732665830785e+25, 1.3134841555752737e+25, 1.2779905447187482e+25, 1.206558295304919e+25, 1.1772059514269828e+25, 1.1734799397083944e+25, 1.1248536305771933e+25, 1.0956546252593698e+25, 1.051609219142423e+25, 1.0175671364601976e+25, 1.0239019789594104e+25, 9.50809926101474e+24, 9.368142660806001e+24, 9.248848143342073e+24, 8.915052579946042e+24, 8.403922124701166e+24, 8.457356001214427e+24, 8.181732245254839e+24, 8.117444765697209e+24, 7.612653649345413e+24, 7.4658463895563e+24, 7.347900790252763e+24, 6.904333841020856e+24, 6.804442992479462e+24, 6.762343487277991e+24, 6.574755088027925e+24, 6.573629836639429e+24, 6.463450316590923e+24, 6.240783704102441e+24, 5.943306897483782e+24, 6.090017311866508e+24, 5.847596542318093e+24, 5.85807948109873e+24, 5.743235817103338e+24, 5.626290377205047e+24, 5.440138518149721e+24, 5.492334156967034e+24], "accuracy": [0.09708096832036972, 0.10117553919553757, 0.10566636174917221, 0.10381719470024109, 0.10381719470024109, 0.10540219396352768, 0.10579843819141388, 0.10038304328918457, 0.10091137140989304, 0.10566636174917221, 0.09826971590518951, 0.10579843819141388, 0.10130762308835983, 0.10632677376270294, 0.10051512718200684, 0.10355303436517715, 0.10170386731624603, 0.10817593336105347, 0.10619468986988068, 0.10976093262434006, 0.10249637067317963, 0.10870426893234253, 0.10685510188341141, 0.11042134463787079, 0.10791176557540894, 0.1072513535618782, 0.10632677376270294, 0.11213842034339905, 0.10777968913316727, 0.11398758739233017, 0.11200633645057678, 0.11517632752656937, 0.11306300014257431, 0.11055342853069305, 0.1158367469906807, 0.1138555034995079, 0.11279883980751038, 0.12072381377220154, 0.11187426000833511, 0.1158367469906807, 0.120459645986557, 0.11913882195949554, 0.11808215826749802, 0.11530841141939163, 0.11913882195949554, 0.11966715008020401, 0.12151630967855453, 0.11795007437467575, 0.11491216719150543, 0.12415797263383865, 0.1142517477273941, 0.12191256135702133, 0.11847840249538422, 0.11808215826749802, 0.1142517477273941, 0.11411966383457184], "val_loss": [1.729600850827544e+25, 1.695425259835085e+25, 1.6614171883372455e+25, 1.6275545002411368e+25, 1.593795113911841e+25, 1.5601673912183712e+25, 1.526687703646093e+25, 1.4933061296938568e+25, 1.4600634827829258e+25, 1.4270409285872241e+25, 1.3942173686432177e+25, 1.361495381083767e+25, 1.3289117441048693e+25, 1.2965651477873186e+25, 1.2644763447181981e+25, 1.2326947952300553e+25, 1.2011618156183057e+25, 1.169856538003716e+25, 1.1388649703305298e+25, 1.1082106321974411e+25, 1.0780654242007868e+25, 1.0484717738519364e+25, 1.0194342928369084e+25, 9.908180893396637e+24, 9.626891104702658e+24, 9.350485667962947e+24, 9.078775504050747e+24, 8.812504823797281e+24, 8.550964004016466e+24, 8.293578313338253e+24, 8.041245877614733e+24, 7.79433102004136e+24, 7.55380622990727e+24, 7.3200433243977e+24, 7.093553047739189e+24, 6.875739081863597e+24, 6.669805972092979e+24, 6.472700782283136e+24, 6.288063862084863e+24, 6.115654250903698e+24, 5.953251421921769e+24, 5.802273468589741e+24, 5.662314562537992e+24, 5.530348284816931e+24, 5.405948630930605e+24, 5.28993071638277e+24, 5.182619088576974e+24, 5.083923243175105e+24, 4.992510979378589e+24, 4.90729163344407e+24, 4.829058127136339e+24, 4.756806265824885e+24, 4.690520485069395e+24, 4.629506726124096e+24, 4.573001178492186e+24, 4.520639518978209e+24], "val_accuracy": [0.09866666793823242, 0.09866666793823242, 0.09866666793823242, 0.0989999994635582, 0.09966666996479034, 0.09966666996479034, 0.10000000149011612, 0.1003333330154419, 0.1003333330154419, 0.10066666454076767, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10100000351667404, 0.10133333504199982, 0.10166666656732559, 0.10166666656732559, 0.10266666859388351, 0.10266666859388351, 0.10233332961797714, 0.10333333164453506, 0.10366666316986084, 0.10366666316986084, 0.10366666316986084, 0.10466666519641876, 0.10633333027362823, 0.10766666382551193, 0.109333336353302, 0.11033333092927933, 0.11299999803304672, 0.11533333361148834, 0.11733333021402359, 0.11833333224058151, 0.12266666442155838, 0.12333333492279053, 0.12300000339746475, 0.12266666442155838, 0.12433333694934845, 0.12733332812786102, 0.12833333015441895, 0.12999999523162842, 0.12933333218097687, 0.12999999523162842, 0.13066667318344116, 0.13300000131130219, 0.13366666436195374, 0.13633333146572113, 0.1353333294391632, 0.13433332741260529, 0.13600000739097595, 0.13766667246818542, 0.13733333349227905, 0.13766667246818542, 0.13766667246818542, 0.13733333349227905, 0.13733333349227905]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 5, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 2, 0, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [43, 74, 59, 56, 8, 79, 86, 52, 44], [1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 2, 4, 5, 1, 2, 4, 9, 2, 0, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [3, 1, 3, 3, 3, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [77, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [38], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [6, 0, 1, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [0, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [53, 9, 43, 71, 34]], "fitness": -0.10371428728103638, "mapping_values": [1, 5, 5, 3, 2, 0, 27, 27, 17, 10, 4, 1, 1, 0, 1, 0, 4, 2, 2, 2], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(grad, alpha), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.square(grad)), tf.math.subtract(tf.math.add(tf.math.pow(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.math.negative(grad)), grad)), tf.math.pow(tf.math.subtract(tf.math.add(beta, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad)))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(alpha, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.negative(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1.6766886019537568e+19, 3.2556810218112444e+20, 1.5197847302524476e+21, 4.2404607750677023e+21, 9.223654637731393e+21, 1.7000067402108116e+22, 2.8935566807260467e+22, 4.491752908550698e+22, 6.507116443958771e+22, 9.290325251075042e+22, 1.261859256137297e+23], "accuracy": [0.1010434553027153, 0.10249637067317963, 0.09377889335155487, 0.1010434553027153, 0.09721305221319199, 0.09906221181154251, 0.09549596905708313, 0.09919429570436478, 0.10091137140989304, 0.09760929644107819, 0.10091137140989304], "val_loss": [7.454943923018924e+19, 6.034898091545293e+20, 2.1188791669081516e+21, 5.057531685487952e+21, 1.0407800724454707e+22, 1.8419590745656228e+22, 2.8736386106540752e+22, 4.42682496308286e+22, 6.3827504409688605e+22, 9.135103285598165e+22, 1.2713555463115704e+23], "val_accuracy": [0.0963333323597908, 0.0963333323597908, 0.09966666996479034, 0.10000000149011612, 0.09200000017881393, 0.10199999809265137, 0.09200000017881393, 0.09833333641290665, 0.09733333438634872, 0.10066666454076767, 0.09933333098888397]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 5, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 2, 0, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [43, 74, 59, 56, 8, 79, 86, 52, 44], [1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 2, 8, 3, 1, 2, 6, 9, 9, 0, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [1, 1, 1, 1, 0, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [77, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [6, 3], [38], [1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [46, 9, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.square(alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08360850811004639, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 4, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 2, 0, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [43, 74, 59, 56, 8, 79, 86, 52, 44], [0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 2, 8, 3, 0, 2, 4, 9, 9, 0, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [3, 1, 3, 3, 1, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [77, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [38], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6, 8, 9], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [46, 9, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 29, 18, 11, 5], "tree_depth": 21, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.subtract(tf.math.subtract(sigma, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(sigma, beta), tf.math.square(beta))), tf.math.multiply(tf.math.subtract(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.multiply(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha)), tf.math.negative(tf.math.add(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.divide_no_nan(tf.math.sqrt(sigma), beta)))))), tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 5, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 2, 0, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [43, 74, 59, 56, 8, 79, 86, 52, 44], [1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 2, 8, 3, 1, 2, 6, 9, 9, 0, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [1, 1, 1, 1, 0, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [77, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [6, 3], [38], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6, 1, 1, 8, 8, 9, 0, 0, 9, 9, 7, 0, 4, 8, 3, 9], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [50, 9, 43, 71, 34, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 35, 24, 11, 6], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: alpha, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.subtract(tf.math.multiply(sigma, tf.math.add(tf.math.square(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), sigma)), tf.math.multiply(beta, tf.math.subtract(tf.math.pow(beta, tf.math.multiply(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32), tf.math.add(tf.math.negative(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), alpha))), tf.math.add(tf.math.sqrt(alpha), tf.math.divide_no_nan(tf.math.subtract(tf.math.subtract(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32), sigma), tf.math.sqrt(beta)), tf.math.sqrt(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)))))))), tf.math.negative(tf.math.negative(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [1, 5, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 2, 0, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [43, 74, 59, 56, 8, 79, 86, 52, 44], [1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 2, 8, 3, 1, 2, 4, 9, 9, 0, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [0, 1, 4, 3, 1, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [77, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [38], [0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1], [3, 0, 1, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6, 5, 4, 0, 7, 6, 7, 0, 8, 9, 6, 2, 7, 4, 1], [3, 1, 1, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [46, 9, 43, 71, 34, 98]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 3, 2, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 49, 30, 19, 6], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.math.subtract(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.square(tf.math.multiply(beta, tf.math.subtract(tf.math.pow(beta, tf.math.multiply(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.negative(tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), alpha))), tf.math.add(tf.math.sqrt(alpha), tf.math.divide_no_nan(tf.math.square(tf.math.pow(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), sigma)), tf.math.negative(beta))))))), tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.negative(tf.math.sqrt(tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(tf.math.add(beta, sigma), sigma)), beta), tf.math.add(tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.subtract(sigma, beta), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 5, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 2, 0, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [43, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 2, 8, 3, 0, 2, 4, 9, 9, 0, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [3, 1, 3, 3, 1, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [77, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [38], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [46, 9, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 11, 6, 5, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(tf.math.subtract(sigma, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))), tf.math.multiply(tf.math.add(sigma, beta), tf.math.square(beta)))", "other_info": {"loss": [2.302204132080078, 2.3189356327056885, 2.5080456733703613, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09391097724437714, 0.06472064554691315, 0.06630563735961914, 0.09615638852119446, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3043713569641113, 2.3419196605682373, 8423.3701171875, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.021666666492819786, 0.04233333468437195, 0.09933333098888397, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 5, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [3, 2, 0, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [43, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 0, 8, 3, 1, 2, 6, 9, 9, 0, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [3, 1, 3, 3, 1, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [77, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [38], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [1, 1, 1, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [8, 9, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(alpha, tf.math.negative(alpha))", "other_info": {"loss": [2.3100481033325195, NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08585391938686371, 0.09866596013307571, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3655245304107666, NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09933333098888397, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 5, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 2, 0, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [43, 74, 59, 56, 8, 79, 86, 52, 44], [1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 2, 1, 3, 1, 2, 4, 9, 9, 0, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [2, 1, 3, 3, 1, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [44, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [38], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 3, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [11, 9, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08360850811004639, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 1, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 2, 3, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [43, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 2, 8, 3, 0, 2, 4, 9, 9, 0, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [3, 1, 3, 3, 1, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [77, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [38], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 8, 1, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [1, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [46, 9, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 4, 2, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.sqrt(alpha), tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 8, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [3, 2, 0, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [43, 74, 59, 56, 8, 79, 86, 52, 44], [1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 2, 8, 3, 0, 2, 4, 9, 9, 0, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [3, 1, 3, 3, 1, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [77, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [38], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [2, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [58, 9, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(grad, tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(beta, tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08030643314123154, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 4, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [3, 2, 0, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [43, 74, 59, 56, 8, 79, 86, 52, 44], [0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 0, 8, 3, 1, 2, 6, 9, 9, 0, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [0, 1, 1, 1, 0, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [77, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [38], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [8, 0, 1, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [1, 0, 1, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [3, 9, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 3, 2, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.negative(alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1002509593963623, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767, 0.10066666454076767]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 5, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 2, 0, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [43, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 2, 8, 3, 2, 2, 4, 9, 2, 0, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [3, 1, 3, 3, 1, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [65, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [0, 3], [38], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [1, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [46, 9, 43, 71, 34]], "fitness": -0.03685714304447174, "mapping_values": [1, 5, 5, 3, 2, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 4, 2, 2, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(alpha), tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.301572561264038, 2.302088975906372, 2.302719831466675, 2.301788330078125, 2.3025784492492676, 2.303060293197632, 2.3030292987823486, 2.3026034832000732, 2.3023757934570312, 2.302678108215332, 2.301990270614624, 2.302293300628662, 2.3028087615966797, 2.300173282623291, 2.302398204803467, 2.3021602630615234, 2.3025429248809814, 2.3002195358276367, 2.301975965499878, 2.3022499084472656, 2.3019981384277344, 2.301562547683716, 2.3006200790405273], "accuracy": [0.0940430611371994, 0.08770307898521423, 0.09245806187391281, 0.0940430611371994, 0.09047681838274002, 0.09179764986038208, 0.0874389111995697, 0.08968432247638702, 0.09100515395402908, 0.08255184441804886, 0.09219389408826828, 0.08981640636920929, 0.09153348207473755, 0.09536388516426086, 0.09034473448991776, 0.08796724677085876, 0.09272222965955734, 0.09008057415485382, 0.08730682730674744, 0.08955223858356476, 0.08902391046285629, 0.09179764986038208, 0.09509972482919693], "val_loss": [2.2994813919067383, 2.2994484901428223, 2.2994155883789062, 2.299386739730835, 2.2993581295013428, 2.299325466156006, 2.2992959022521973, 2.299268960952759, 2.2992379665374756, 2.2992074489593506, 2.2991786003112793, 2.2991507053375244, 2.2991223335266113, 2.2990927696228027, 2.299067735671997, 2.2990386486053467, 2.299008369445801, 2.2989840507507324, 2.2989578247070312, 2.2989296913146973, 2.2989017963409424, 2.298875570297241, 2.2988479137420654], "val_accuracy": [0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03533333167433739, 0.03533333167433739, 0.03533333167433739, 0.03566666692495346, 0.035999998450279236, 0.035999998450279236, 0.035999998450279236, 0.035999998450279236, 0.035999998450279236, 0.03633333370089531, 0.036666665226221085, 0.03700000047683716, 0.03700000047683716, 0.03700000047683716, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 5, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 2, 0, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [43, 74, 59, 56, 8, 79, 86, 52, 44], [1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 2, 8, 3, 1, 2, 6, 9, 9, 0, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [1, 1, 1, 1, 0, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [77, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [6, 3], [38], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [11, 9, 43, 71, 34]], "fitness": -0.035999998450279236, "mapping_values": [1, 3, 3, 1, 2, 0, 2, 2, 1, 1, 0, 3, 2, 1, 1, 0, 4, 2, 2, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.square(alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.301584243774414, 2.3021302223205566, 2.302791118621826, 2.3018877506256104, 2.302704095840454, 2.3032243251800537], "accuracy": [0.0940430611371994, 0.08770307898521423, 0.09245806187391281, 0.09391097724437714, 0.08994849026203156, 0.09192973375320435], "val_loss": [2.299511671066284, 2.299511671066284, 2.299511671066284, 2.299511671066284, 2.299511671066284, 2.299511671066284], "val_accuracy": [0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 4, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [2, 2, 0, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [43, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 2, 6, 6, 8, 2, 4, 9, 9, 0, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [3, 1, 3, 3, 1, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [77, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [38], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [46, 9, 43, 71, 34]], "fitness": -0.035999998450279236, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 7, 7, 1, 3, 2, 1, 1, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(grad, alpha)), tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(grad, tf.math.add(beta, alpha))))), tf.math.pow(tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.301584243774414, 2.3021302223205566, 2.302791118621826, 2.3018877506256104, 2.302704095840454, 2.3032243251800537], "accuracy": [0.0940430611371994, 0.08770307898521423, 0.09245806187391281, 0.09391097724437714, 0.08994849026203156, 0.09192973375320435], "val_loss": [2.299511671066284, 2.299511671066284, 2.299511671066284, 2.299511671066284, 2.299511671066284, 2.299511671066284], "val_accuracy": [0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 5, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [3, 2, 0, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [43, 74, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 2, 8, 3, 1, 2, 6, 9, 9, 0, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [3, 0, 3, 3, 1, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [77, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [1, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [38], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 8, 1, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [46, 9, 43, 71, 34]], "fitness": -0.035999998450279236, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.sqrt(sigma), tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [2.301584243774414, 2.3021302223205566, 2.302791118621826, 2.3018877506256104, 2.302704095840454, 2.3032243251800537], "accuracy": [0.0940430611371994, 0.08770307898521423, 0.09245806187391281, 0.09391097724437714, 0.08994849026203156, 0.09192973375320435], "val_loss": [2.299511671066284, 2.299511671066284, 2.299511671066284, 2.299511671066284, 2.299511671066284, 2.299511671066284], "val_accuracy": [0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 5, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [3, 2, 0, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [43, 74, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 2, 8, 3, 1, 2, 6, 9, 9, 0, 4, 1, 9, 6, 0, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [1, 1, 1, 1, 0, 0, 3, 3, 1, 0, 3, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [77, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [1, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [6, 3], [38], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [3, 0, 1, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 2, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [46, 9, 43, 71, 34]], "fitness": -0.035999998450279236, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(alpha)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), beta)", "other_info": {"loss": [2.301584243774414, 2.3021302223205566, 2.302791118621826, 2.3018877506256104, 2.302704095840454, 2.3032243251800537], "accuracy": [0.0940430611371994, 0.08770307898521423, 0.09245806187391281, 0.09391097724437714, 0.08994849026203156, 0.09192973375320435], "val_loss": [2.299511671066284, 2.299511671066284, 2.299511671066284, 2.299511671066284, 2.299511671066284, 2.299511671066284], "val_accuracy": [0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161, 0.03500000014901161]}}]