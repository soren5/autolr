[{"genotype": [[0], [0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [1, 4, 6, 6, 0, 2, 8, 0, 3, 6, 3, 8, 9, 3, 2, 6, 0, 5, 0, 2], [0, 0, 2, 2, 2, 1, 1, 2, 0, 0, 0, 3, 2, 2], [56, 42, 74, 73, 95], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 2, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [49, 25, 50, 71, 34]], "fitness": -0.7894285917282104, "mapping_values": [1, 21, 21, 13, 8, 3, 1, 1, 0, 1, 0, 5, 3, 2, 1, 0, 5, 2, 3, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.divide_no_nan(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))), grad))), tf.math.multiply(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.add(sigma, sigma)), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.553684958471929, 1.9419936122139763, 1.8393933941832685, 1.549867361354916, 1.075166670779479, 1.0450055761627628, 0.8772915125349808, 0.7663393862385083, 0.7020721232587195, 0.6729060530646791, 0.6536810516508075, 0.6404308526271275, 0.6042404715741835, 0.5942549432399423, 0.5807096201903343, 0.532009512993008, 0.5507517432130449], "accuracy": [0.2222955971956253, 0.33205652236938477, 0.3910976052284241, 0.42728832364082336, 0.5848633050918579, 0.603090763092041, 0.6701889038085938, 0.7104741930961609, 0.7310791015625, 0.7465327978134155, 0.7508915662765503, 0.7500990629196167, 0.7721568942070007, 0.7741381525993347, 0.7792893648147583, 0.8070268034934998, 0.7890635132789612], "val_loss": [1.8446884836469377, 1.2873948642185755, 1.1595190933772497, 0.9047926834651402, 0.9240819726671491, 0.6640643732888358, 0.6619618109294346, 0.5679739032472882, 0.5711296626499721, 0.5049789803368705, 0.49797589438302176, 0.45084640809467863, 0.5050285884312221, 0.4765653269631522, 0.45727260623659405, 0.44350749254226685, 0.45371356180735994], "val_accuracy": [0.17466667294502258, 0.42133334279060364, 0.5189999938011169, 0.5986666679382324, 0.5910000205039978, 0.7260000109672546, 0.6853333115577698, 0.7229999899864197, 0.7233333587646484, 0.7713333368301392, 0.7793333530426025, 0.8053333163261414, 0.778333306312561, 0.7883333563804626, 0.8043333292007446, 0.8036666512489319, 0.8046666383743286]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [4, 2, 6, 6, 9, 4, 2, 0, 8, 6, 8, 8, 4, 3, 2, 6, 8, 5, 0, 2], [1, 2, 2, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [26, 98, 45, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 1, 1, 0, 1], [1, 0, 1, 0], [2, 2, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [49, 25, 50, 71, 34]], "fitness": -0.7894285917282104, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 2, 3, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.553684958471929, 1.9419936122139763, 1.8393933941832685, 1.549867361354916, 1.075166670779479, 1.0450055761627628, 0.8772915125349808, 0.7663393862385083, 0.7020721232587195, 0.6729060530646791, 0.6536810516508075, 0.6404308526271275, 0.6042404715741835, 0.5942549432399423, 0.5807096201903343, 0.532009512993008, 0.5507517432130449], "accuracy": [0.2222955971956253, 0.33205652236938477, 0.3910976052284241, 0.42728832364082336, 0.5848633050918579, 0.603090763092041, 0.6701889038085938, 0.7104741930961609, 0.7310791015625, 0.7465327978134155, 0.7508915662765503, 0.7500990629196167, 0.7721568942070007, 0.7741381525993347, 0.7792893648147583, 0.8070268034934998, 0.7890635132789612], "val_loss": [1.8446884836469377, 1.2873948642185755, 1.1595190933772497, 0.9047926834651402, 0.9240819726671491, 0.6640643732888358, 0.6619618109294346, 0.5679739032472882, 0.5711296626499721, 0.5049789803368705, 0.49797589438302176, 0.45084640809467863, 0.5050285884312221, 0.4765653269631522, 0.45727260623659405, 0.44350749254226685, 0.45371356180735994], "val_accuracy": [0.17466667294502258, 0.42133334279060364, 0.5189999938011169, 0.5986666679382324, 0.5910000205039978, 0.7260000109672546, 0.6853333115577698, 0.7229999899864197, 0.7233333587646484, 0.7713333368301392, 0.7793333530426025, 0.8053333163261414, 0.778333306312561, 0.7883333563804626, 0.8043333292007446, 0.8036666512489319, 0.8046666383743286]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [1, 4, 6, 6, 0, 2, 8, 0, 3, 6, 3, 8, 9, 3, 2, 6, 0, 5, 0, 2], [0, 0, 2, 2, 2, 1, 1, 2, 0, 0, 0, 3, 2, 2], [6, 42, 35, 73, 95], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 1, 1, 0, 1], [1, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [49, 25, 50, 71, 34]], "fitness": -0.7894285917282104, "mapping_values": [1, 14, 14, 8, 6, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 2, 3, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.divide_no_nan(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))))), grad)), tf.math.negative(tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.553684958471929, 1.9419936122139763, 1.8393933941832685, 1.549867361354916, 1.075166670779479, 1.0450055761627628, 0.8772915125349808, 0.7663393862385083, 0.7020721232587195, 0.6729060530646791, 0.6536810516508075, 0.6404308526271275, 0.6042404715741835, 0.5942549432399423, 0.5807096201903343, 0.532009512993008, 0.5507517432130449], "accuracy": [0.2222955971956253, 0.33205652236938477, 0.3910976052284241, 0.42728832364082336, 0.5848633050918579, 0.603090763092041, 0.6701889038085938, 0.7104741930961609, 0.7310791015625, 0.7465327978134155, 0.7508915662765503, 0.7500990629196167, 0.7721568942070007, 0.7741381525993347, 0.7792893648147583, 0.8070268034934998, 0.7890635132789612], "val_loss": [1.8446884836469377, 1.2873948642185755, 1.1595190933772497, 0.9047926834651402, 0.9240819726671491, 0.6640643732888358, 0.6619618109294346, 0.5679739032472882, 0.5711296626499721, 0.5049789803368705, 0.49797589438302176, 0.45084640809467863, 0.5050285884312221, 0.4765653269631522, 0.45727260623659405, 0.44350749254226685, 0.45371356180735994], "val_accuracy": [0.17466667294502258, 0.42133334279060364, 0.5189999938011169, 0.5986666679382324, 0.5910000205039978, 0.7260000109672546, 0.6853333115577698, 0.7229999899864197, 0.7233333587646484, 0.7713333368301392, 0.7793333530426025, 0.8053333163261414, 0.778333306312561, 0.7883333563804626, 0.8043333292007446, 0.8036666512489319, 0.8046666383743286]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [1, 4, 6, 6, 0, 2, 8, 0, 8, 6, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [0, 0, 2, 2, 2, 1, 1, 2, 0, 0, 0, 3, 2, 2], [56, 42, 74, 73, 95], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 1, 1, 1, 1], [0, 0, 1, 0], [3, 0, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [49, 25, 50, 71, 34]], "fitness": -0.7894285917282104, "mapping_values": [1, 14, 14, 8, 6, 2, 1, 1, 0, 1, 0, 4, 2, 2, 0, 0, 5, 2, 3, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))))), grad)), tf.math.negative(tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.negative(sigma)), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.553684958471929, 1.9419936122139763, 1.8393933941832685, 1.549867361354916, 1.075166670779479, 1.0450055761627628, 0.8772915125349808, 0.7663393862385083, 0.7020721232587195, 0.6729060530646791, 0.6536810516508075, 0.6404308526271275, 0.6042404715741835, 0.5942549432399423, 0.5807096201903343, 0.532009512993008, 0.5507517432130449], "accuracy": [0.2222955971956253, 0.33205652236938477, 0.3910976052284241, 0.42728832364082336, 0.5848633050918579, 0.603090763092041, 0.6701889038085938, 0.7104741930961609, 0.7310791015625, 0.7465327978134155, 0.7508915662765503, 0.7500990629196167, 0.7721568942070007, 0.7741381525993347, 0.7792893648147583, 0.8070268034934998, 0.7890635132789612], "val_loss": [1.8446884836469377, 1.2873948642185755, 1.1595190933772497, 0.9047926834651402, 0.9240819726671491, 0.6640643732888358, 0.6619618109294346, 0.5679739032472882, 0.5711296626499721, 0.5049789803368705, 0.49797589438302176, 0.45084640809467863, 0.5050285884312221, 0.4765653269631522, 0.45727260623659405, 0.44350749254226685, 0.45371356180735994], "val_accuracy": [0.17466667294502258, 0.42133334279060364, 0.5189999938011169, 0.5986666679382324, 0.5910000205039978, 0.7260000109672546, 0.6853333115577698, 0.7229999899864197, 0.7233333587646484, 0.7713333368301392, 0.7793333530426025, 0.8053333163261414, 0.778333306312561, 0.7883333563804626, 0.8043333292007446, 0.8036666512489319, 0.8046666383743286]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1], [4, 4, 6, 6, 0, 4, 5, 0, 3, 6, 3, 8, 4, 3, 2, 6, 8, 5, 0, 2, 4, 4, 6, 5, 2], [1, 3, 2, 2, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2, 3, 3, 0, 1], [26, 98, 83, 73, 7, 42], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.7808571457862854, "mapping_values": [1, 43, 43, 25, 18, 5, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), grad))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.multiply(grad, tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.sqrt(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)))))))), tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, grad), grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.square(tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.square(tf.math.add(alpha, grad)))), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))), grad), tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)))), alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.18548566629669, 1.873398098853034, 1.383984042212255, 1.1861755297152814, 0.9796765607818243, 0.8263676256913677, 0.8031795409062378, 0.8271099784906121, 0.7395082080227241, 0.6862109267732108, 0.6648635394018024, 0.6522609572038359, 0.6431016085831528, 0.6246859585021732, 0.6117951461447229, 0.59078350295921, 0.5847425336189683], "accuracy": [0.2608638107776642, 0.4019284248352051, 0.516708493232727, 0.5910711884498596, 0.6407343745231628, 0.6877558827400208, 0.6946242451667786, 0.6934354901313782, 0.7153612375259399, 0.7388719916343689, 0.7493065595626831, 0.7530049085617065, 0.7601373791694641, 0.7582882046699524, 0.7697794437408447, 0.7777044177055359, 0.7775723338127136], "val_loss": [1.6358183111463274, 1.3510778290884835, 0.9425281115940639, 0.7501352173941476, 0.6505194050925118, 0.6668450662067958, 0.7012213127953666, 0.548295293535505, 0.547343407358442, 0.49548319407871794, 0.5745401041848319, 0.4685466800417219, 0.6057837860924857, 0.4785457934652056, 0.47651340280260357, 0.4650179999215262, 0.4651807631765093], "val_accuracy": [0.5323333144187927, 0.49666666984558105, 0.6263333559036255, 0.6570000052452087, 0.7163333296775818, 0.6940000057220459, 0.6966666579246521, 0.7386666536331177, 0.7599999904632568, 0.7910000085830688, 0.7303333282470703, 0.7916666865348816, 0.6783333420753479, 0.7910000085830688, 0.7879999876022339, 0.7866666913032532, 0.7770000100135803]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [4, 4, 6, 6, 0, 2, 8, 0, 2, 6, 3, 8, 4, 3, 2, 6, 8, 5, 4, 2, 2, 4, 6, 5, 2, 1, 4, 7, 8, 8, 7, 4, 7, 8, 5, 1], [0, 0, 2, 2, 2, 0, 1, 2, 1, 2, 2, 3, 2, 2, 3, 1, 2, 3, 2, 3, 0, 2, 2, 1, 3, 1], [26, 98, 22, 73, 76, 42], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 1, 0, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.7808571457862854, "mapping_values": [1, 62, 62, 36, 26, 4, 1, 1, 0, 1, 0, 6, 4, 3, 1, 0, 5, 2, 3, 1], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.pow(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))), tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.multiply(tf.math.add(alpha, grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))))))), tf.math.add(alpha, grad))), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.subtract(grad, tf.math.add(alpha, grad)), tf.math.add(alpha, grad))))), alpha), tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.sqrt(grad), grad), tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))))))), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))))))))), tf.math.add(alpha, alpha))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, grad))), tf.math.add(sigma, tf.math.negative(sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.18548566629669, 1.873398098853034, 1.383984042212255, 1.1861755297152814, 0.9796765607818243, 0.8263676256913677, 0.8031795409062378, 0.8271099784906121, 0.7395082080227241, 0.6862109267732108, 0.6648635394018024, 0.6522609572038359, 0.6431016085831528, 0.6246859585021732, 0.6117951461447229, 0.59078350295921, 0.5847425336189683], "accuracy": [0.2608638107776642, 0.4019284248352051, 0.516708493232727, 0.5910711884498596, 0.6407343745231628, 0.6877558827400208, 0.6946242451667786, 0.6934354901313782, 0.7153612375259399, 0.7388719916343689, 0.7493065595626831, 0.7530049085617065, 0.7601373791694641, 0.7582882046699524, 0.7697794437408447, 0.7777044177055359, 0.7775723338127136], "val_loss": [1.6358183111463274, 1.3510778290884835, 0.9425281115940639, 0.7501352173941476, 0.6505194050925118, 0.6668450662067958, 0.7012213127953666, 0.548295293535505, 0.547343407358442, 0.49548319407871794, 0.5745401041848319, 0.4685466800417219, 0.6057837860924857, 0.4785457934652056, 0.47651340280260357, 0.4650179999215262, 0.4651807631765093], "val_accuracy": [0.5323333144187927, 0.49666666984558105, 0.6263333559036255, 0.6570000052452087, 0.7163333296775818, 0.6940000057220459, 0.6966666579246521, 0.7386666536331177, 0.7599999904632568, 0.7910000085830688, 0.7303333282470703, 0.7916666865348816, 0.6783333420753479, 0.7910000085830688, 0.7879999876022339, 0.7866666913032532, 0.7770000100135803]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1], [4, 5, 6, 9, 0, 2, 8, 0, 3, 4, 3, 8, 4, 3, 2, 6, 6, 5, 0, 2, 4, 4, 6, 4, 1], [2, 0, 1, 0, 2, 0, 2, 2, 0, 1, 0, 3, 2, 2, 3, 3, 0, 2], [26, 98, 83, 73, 46, 42], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.7808571457862854, "mapping_values": [1, 15, 15, 10, 5, 3, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), alpha))))), tf.math.add(alpha, tf.math.pow(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), grad)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.18548566629669, 1.873398098853034, 1.383984042212255, 1.1861755297152814, 0.9796765607818243, 0.8263676256913677, 0.8031795409062378, 0.8271099784906121, 0.7395082080227241, 0.6862109267732108, 0.6648635394018024, 0.6522609572038359, 0.6431016085831528, 0.6246859585021732, 0.6117951461447229, 0.59078350295921, 0.5847425336189683], "accuracy": [0.2608638107776642, 0.4019284248352051, 0.516708493232727, 0.5910711884498596, 0.6407343745231628, 0.6877558827400208, 0.6946242451667786, 0.6934354901313782, 0.7153612375259399, 0.7388719916343689, 0.7493065595626831, 0.7530049085617065, 0.7601373791694641, 0.7582882046699524, 0.7697794437408447, 0.7777044177055359, 0.7775723338127136], "val_loss": [1.6358183111463274, 1.3510778290884835, 0.9425281115940639, 0.7501352173941476, 0.6505194050925118, 0.6668450662067958, 0.7012213127953666, 0.548295293535505, 0.547343407358442, 0.49548319407871794, 0.5745401041848319, 0.4685466800417219, 0.6057837860924857, 0.4785457934652056, 0.47651340280260357, 0.4650179999215262, 0.4651807631765093], "val_accuracy": [0.5323333144187927, 0.49666666984558105, 0.6263333559036255, 0.6570000052452087, 0.7163333296775818, 0.6940000057220459, 0.6966666579246521, 0.7386666536331177, 0.7599999904632568, 0.7910000085830688, 0.7303333282470703, 0.7916666865348816, 0.6783333420753479, 0.7910000085830688, 0.7879999876022339, 0.7866666913032532, 0.7770000100135803]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [2, 2, 6, 0, 9, 4, 2, 0, 8, 9, 8, 8, 4, 3, 2, 6, 8, 5, 0, 2], [1, 2, 2, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [26, 98, 45, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.7808571457862854, "mapping_values": [1, 14, 14, 10, 4, 3, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.divide_no_nan(alpha, tf.math.negative(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.add(alpha, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.18548566629669, 1.873398098853034, 1.383984042212255, 1.1861755297152814, 0.9796765607818243, 0.8263676256913677, 0.8031795409062378, 0.8271099784906121, 0.7395082080227241, 0.6862109267732108, 0.6648635394018024, 0.6522609572038359, 0.6431016085831528, 0.6246859585021732, 0.6117951461447229, 0.59078350295921, 0.5847425336189683], "accuracy": [0.2608638107776642, 0.4019284248352051, 0.516708493232727, 0.5910711884498596, 0.6407343745231628, 0.6877558827400208, 0.6946242451667786, 0.6934354901313782, 0.7153612375259399, 0.7388719916343689, 0.7493065595626831, 0.7530049085617065, 0.7601373791694641, 0.7582882046699524, 0.7697794437408447, 0.7777044177055359, 0.7775723338127136], "val_loss": [1.6358183111463274, 1.3510778290884835, 0.9425281115940639, 0.7501352173941476, 0.6505194050925118, 0.6668450662067958, 0.7012213127953666, 0.548295293535505, 0.547343407358442, 0.49548319407871794, 0.5745401041848319, 0.4685466800417219, 0.6057837860924857, 0.4785457934652056, 0.47651340280260357, 0.4650179999215262, 0.4651807631765093], "val_accuracy": [0.5323333144187927, 0.49666666984558105, 0.6263333559036255, 0.6570000052452087, 0.7163333296775818, 0.6940000057220459, 0.6966666579246521, 0.7386666536331177, 0.7599999904632568, 0.7910000085830688, 0.7303333282470703, 0.7916666865348816, 0.6783333420753479, 0.7910000085830688, 0.7879999876022339, 0.7866666913032532, 0.7770000100135803]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [4, 2, 6, 6, 6, 8, 1, 0, 8, 9, 8, 8, 4, 3, 2, 6, 8, 5, 0, 2], [1, 2, 2, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [26, 98, 18, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.7808571457862854, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.18548566629669, 1.873398098853034, 1.383984042212255, 1.1861755297152814, 0.9796765607818243, 0.8263676256913677, 0.8031795409062378, 0.8271099784906121, 0.7395082080227241, 0.6862109267732108, 0.6648635394018024, 0.6522609572038359, 0.6431016085831528, 0.6246859585021732, 0.6117951461447229, 0.59078350295921, 0.5847425336189683], "accuracy": [0.2608638107776642, 0.4019284248352051, 0.516708493232727, 0.5910711884498596, 0.6407343745231628, 0.6877558827400208, 0.6946242451667786, 0.6934354901313782, 0.7153612375259399, 0.7388719916343689, 0.7493065595626831, 0.7530049085617065, 0.7601373791694641, 0.7582882046699524, 0.7697794437408447, 0.7777044177055359, 0.7775723338127136], "val_loss": [1.6358183111463274, 1.3510778290884835, 0.9425281115940639, 0.7501352173941476, 0.6505194050925118, 0.6668450662067958, 0.7012213127953666, 0.548295293535505, 0.547343407358442, 0.49548319407871794, 0.5745401041848319, 0.4685466800417219, 0.6057837860924857, 0.4785457934652056, 0.47651340280260357, 0.4650179999215262, 0.4651807631765093], "val_accuracy": [0.5323333144187927, 0.49666666984558105, 0.6263333559036255, 0.6570000052452087, 0.7163333296775818, 0.6940000057220459, 0.6966666579246521, 0.7386666536331177, 0.7599999904632568, 0.7910000085830688, 0.7303333282470703, 0.7916666865348816, 0.6783333420753479, 0.7910000085830688, 0.7879999876022339, 0.7866666913032532, 0.7770000100135803]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1], [1, 4, 6, 6, 0, 2, 9, 0, 3, 6, 3, 8, 9, 3, 2, 6, 0, 5, 0, 2], [2, 3, 0, 0, 2, 0, 1, 2, 0, 1, 0, 3, 2, 2, 3, 3, 0, 1], [56, 42, 74, 73, 95], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.7808571457862854, "mapping_values": [1, 15, 15, 9, 6, 4, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))))))))), grad)), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.18548566629669, 1.873398098853034, 1.383984042212255, 1.1861755297152814, 0.9796765607818243, 0.8263676256913677, 0.8031795409062378, 0.8271099784906121, 0.7395082080227241, 0.6862109267732108, 0.6648635394018024, 0.6522609572038359, 0.6431016085831528, 0.6246859585021732, 0.6117951461447229, 0.59078350295921, 0.5847425336189683], "accuracy": [0.2608638107776642, 0.4019284248352051, 0.516708493232727, 0.5910711884498596, 0.6407343745231628, 0.6877558827400208, 0.6946242451667786, 0.6934354901313782, 0.7153612375259399, 0.7388719916343689, 0.7493065595626831, 0.7530049085617065, 0.7601373791694641, 0.7582882046699524, 0.7697794437408447, 0.7777044177055359, 0.7775723338127136], "val_loss": [1.6358183111463274, 1.3510778290884835, 0.9425281115940639, 0.7501352173941476, 0.6505194050925118, 0.6668450662067958, 0.7012213127953666, 0.548295293535505, 0.547343407358442, 0.49548319407871794, 0.5745401041848319, 0.4685466800417219, 0.6057837860924857, 0.4785457934652056, 0.47651340280260357, 0.4650179999215262, 0.4651807631765093], "val_accuracy": [0.5323333144187927, 0.49666666984558105, 0.6263333559036255, 0.6570000052452087, 0.7163333296775818, 0.6940000057220459, 0.6966666579246521, 0.7386666536331177, 0.7599999904632568, 0.7910000085830688, 0.7303333282470703, 0.7916666865348816, 0.6783333420753479, 0.7910000085830688, 0.7879999876022339, 0.7866666913032532, 0.7770000100135803]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1], [4, 4, 6, 5, 0, 2, 8, 3, 3, 4, 3, 8, 4, 3, 2, 6, 8, 5, 0, 2, 4, 4, 6, 5, 2], [2, 0, 2, 0, 2, 0, 2, 2, 0, 1, 2, 3, 2, 2, 3, 3, 0, 1], [1, 98, 68, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 2, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [92, 25, 50, 71, 34]], "fitness": -0.3354285657405853, "mapping_values": [1, 25, 25, 14, 11, 4, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.pow(tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))), tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.pow(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), grad)))), tf.math.add(alpha, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(grad), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))))))), tf.math.multiply(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.302091777537241, 2.3026355295731737, 2.3015018630226165, 2.3010077259528274, 2.3010016783526734, 2.2998009498297907, 2.30092414838448, 2.2976935599474086, 2.2976808389573757, 2.297375396415621, 2.298596373323625, 2.2987025987360346, 2.298433401077305, 2.296840054751734, 2.2976771062942403, 2.295480255658018, 2.2956352130911055, 2.294911274867775, 2.2952895305254644, 2.2940310174133076, 2.2947631997360514, 2.2944749045633386, 2.2927164691015083, 2.2928486818556206, 2.2924456708797485, 2.292378558049412, 2.2912393211137507, 2.2917872117321805, 2.2918827216607265, 2.2922966783198824, 2.29175208912644, 2.2905226699144863, 2.2887466403518797, 2.2894859448431535, 2.2889974217420526, 2.286880505414073, 2.2875396540262254, 2.287315701040153, 2.2872511958559474, 2.2873986246972873, 2.2857914134385706, 2.2864703319296624, 2.2857772700932393, 2.2849783968254718, 2.286781351438146, 2.2828333771790903, 2.2850550200409816, 2.2837528092529573, 2.283961897276774, 2.2827890416839263, 2.282301316848914, 2.283021306317669, 2.2809941913819882, 2.282558052499832, 2.2815490517523687, 2.282793881823563, 2.2806695466815614, 2.279637526779316, 2.2789999561035215, 2.2808035412925567, 2.28016800178812, 2.2790249444553172, 2.278149949844566, 2.276593435363306, 2.2761724283666562, 2.277615830504962, 2.2766643566241935, 2.2756107849231437, 2.2762399955810477, 2.2744659211389644, 2.2753306749301294, 2.275376566113608, 2.274999146794662, 2.274054226008042, 2.272006167081904, 2.2732008087038285, 2.273290169001287, 2.271567480927209, 2.2724096175780653, 2.2711863600267725, 2.2718999632093584, 2.2703751906144416, 2.269104640938272, 2.268621655471604, 2.26868113279815, 2.270350016654522, 2.268240089130565, 2.268169903059236, 2.268435639822409, 2.2674574851989746, 2.265272167427759, 2.2659277952484183, 2.266557247316549, 2.265260249270015, 2.264099043783274, 2.2651963231743384, 2.2647711375386033, 2.2644642230431797, 2.265419227698098, 2.2650610483900397], "accuracy": [0.08955223858356476, 0.08942015469074249, 0.09206181764602661, 0.09708096832036972, 0.0944393053650856, 0.09628847241401672, 0.09351472556591034, 0.10368511080741882, 0.10170386731624603, 0.10619468986988068, 0.09747721254825592, 0.10196803510189056, 0.10117553919553757, 0.10527011007070541, 0.10447761416435242, 0.108440101146698, 0.1088363528251648, 0.10738343745470047, 0.10474177449941635, 0.1080438494682312, 0.10817593336105347, 0.10976093262434006, 0.11174217611551285, 0.11174217611551285, 0.11319508403539658, 0.11610091477632523, 0.12217672914266586, 0.11398758739233017, 0.11689341068267822, 0.1158367469906807, 0.11781799048185349, 0.11979923397302628, 0.12521463632583618, 0.12191256135702133, 0.12323339283466339, 0.13036586344242096, 0.12719587981700897, 0.13670584559440613, 0.13129045069217682, 0.1254788041114807, 0.13432836532592773, 0.13142253458499908, 0.1348566859960556, 0.13181878626346588, 0.13472460210323334, 0.13895125687122345, 0.14093250036239624, 0.13710209727287292, 0.137630432844162, 0.13961167633533478, 0.14080041646957397, 0.14080041646957397, 0.13961167633533478, 0.14463083446025848, 0.14251750707626343, 0.13670584559440613, 0.15017831325531006, 0.14740456640720367, 0.15242372453212738, 0.14357416331768036, 0.1526878923177719, 0.146479994058609, 0.1530841439962387, 0.1608770340681076, 0.16312244534492493, 0.15797120332717896, 0.16536785662174225, 0.1566503793001175, 0.1570466309785843, 0.16299036145210266, 0.1574428677558899, 0.15942411124706268, 0.1620657742023468, 0.1632545292377472, 0.16312244534492493, 0.1710474193096161, 0.16655659675598145, 0.17316074669361115, 0.17131158709526062, 0.17276449501514435, 0.17514199018478394, 0.17461365461349487, 0.18082155287265778, 0.18333113193511963, 0.17276449501514435, 0.1748778223991394, 0.1868973672389984, 0.17500990629196167, 0.1710474193096161, 0.18253862857818604, 0.18253862857818604, 0.18702945113182068, 0.17897239327430725, 0.18755778670310974, 0.19442610442638397, 0.18597279489040375, 0.19535067677497864, 0.18702945113182068, 0.189274862408638, 0.19244486093521118], "val_loss": [1.970217500414167, 1.9698479516165597, 1.9694805145263672, 1.9691100120544434, 1.9687393733433314, 1.968367644718715, 1.9680003438677107, 1.9676295689174108, 1.9672633579799108, 1.966898032597133, 1.9665289606366838, 1.9661582538059779, 1.9657889774867467, 1.9654248101370675, 1.9650556019374303, 1.9646893228803362, 1.9643240656171526, 1.963960920061384, 1.9635966164725167, 1.9632316316877092, 1.9628644670758928, 1.96250091280256, 1.9621319770812988, 1.9617610658918108, 1.9613966941833496, 1.96103116444179, 1.96066495350429, 1.9603001049586706, 1.959934847695487, 1.959573405129569, 1.9592116219656808, 1.9588465009416853, 1.9584811755589075, 1.95811585017613, 1.9577554975237166, 1.9573900359017509, 1.9570281846182687, 1.956664766584124, 1.956296716417585, 1.9559328215462821, 1.9555672918047224, 1.9552010127476283, 1.954833984375, 1.9544668878827776, 1.9541006088256836, 1.9537328311375208, 1.953366688319615, 1.953003202165876, 1.9526430538722448, 1.9522788865225655, 1.9519079753330775, 1.9515433992658342, 1.951176575251988, 1.950810364314488, 1.9504428591047014, 1.9500791004725866, 1.9497100285121374, 1.9493403434753418, 1.9489729063851493, 1.948606082371303, 1.9482415063040597, 1.9478714125497, 1.9475031580243791, 1.9471325193132674, 1.9467595645359583, 1.946385111127581, 1.9460155623299735, 1.945641108921596, 1.9452719688415527, 1.9449007170540946, 1.944526536124093, 1.9441516739981515, 1.9437776974269323, 1.943411418369838, 1.9430392129080636, 1.9426609448024206, 1.9422821998596191, 1.941908632005964, 1.9415381295340401, 1.9411608151027135, 1.9407813208443778, 1.9404028483799525, 1.9400255339486259, 1.9396442685808455, 1.9392602784293038, 1.9388815334865026, 1.9384989057268416, 1.938114779336112, 1.937732424054827, 1.9373472758701868, 1.9369633538382394, 1.9365779331752233, 1.9361956460135323, 1.93580538885934, 1.9354195594787598, 1.9350346156529017, 1.9346468108040946, 1.9342564174107142, 1.9338701111929757, 1.9334807395935059], "val_accuracy": [0.0403333343565464, 0.04233333468437195, 0.046666666865348816, 0.04933333396911621, 0.050333332270383835, 0.0533333346247673, 0.05533333495259285, 0.058666665107011795, 0.06133333221077919, 0.06233333423733711, 0.06466666609048843, 0.06566666811704636, 0.06966666877269745, 0.07266666740179062, 0.07599999755620956, 0.07800000160932541, 0.08100000023841858, 0.08533333241939545, 0.08833333104848862, 0.09133332967758179, 0.09399999678134918, 0.09933333098888397, 0.10433333367109299, 0.10866666585206985, 0.11100000143051147, 0.11366666853427887, 0.11699999868869781, 0.12266666442155838, 0.12700000405311584, 0.12933333218097687, 0.13199999928474426, 0.1353333294391632, 0.13833333551883698, 0.14266666769981384, 0.14633333683013916, 0.14866666495800018, 0.15333333611488342, 0.15666666626930237, 0.1613333374261856, 0.16433332860469818, 0.16899999976158142, 0.17166666686534882, 0.17533333599567413, 0.1809999942779541, 0.18733333051204681, 0.18799999356269836, 0.1913333386182785, 0.1966666728258133, 0.20033332705497742, 0.2029999941587448, 0.2070000022649765, 0.210999995470047, 0.21433334052562714, 0.21799999475479126, 0.2213333398103714, 0.2226666659116745, 0.22366666793823242, 0.22633333504199982, 0.22966666519641876, 0.23233333230018616, 0.23499999940395355, 0.23866666853427887, 0.24199999868869781, 0.2460000067949295, 0.24899999797344208, 0.25099998712539673, 0.25333333015441895, 0.25699999928474426, 0.26100000739097595, 0.26366665959358215, 0.26733332872390747, 0.27133333683013916, 0.27399998903274536, 0.2770000100135803, 0.27933332324028015, 0.28299999237060547, 0.2866666615009308, 0.28966665267944336, 0.29233333468437195, 0.2943333387374878, 0.296999990940094, 0.29866665601730347, 0.3006666600704193, 0.3036666810512543, 0.3073333203792572, 0.3096666634082794, 0.3113333284854889, 0.3136666715145111, 0.3160000145435333, 0.31700000166893005, 0.31966665387153625, 0.320333331823349, 0.32199999690055847, 0.32499998807907104, 0.3283333480358124, 0.33033332228660583, 0.33266666531562805, 0.33500000834465027, 0.3370000123977661, 0.3400000035762787]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1], [1, 4, 6, 8, 4, 2, 8, 0, 3, 6, 3, 8, 9, 3, 2, 6, 0, 5, 0, 2], [0, 0, 2, 2, 2, 1, 2, 2, 0, 0, 0, 3, 2, 2], [29, 86, 74, 73, 95], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 0, 1, 0, 1], [0, 0, 1, 0], [2, 2, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 3, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [49, 25, 50, 71, 34]], "fitness": -0.24714285135269165, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, sigma), beta)", "other_info": {"loss": [3.273545347515303, 2.308075934258812, 2.333649950792068, 2.3069430443400076, 2.3027646253767458, 2.410503488285446], "accuracy": [0.2078985571861267, 0.10421344637870789, 0.14714039862155914, 0.0952318087220192, 0.09787346422672272, 0.18002906441688538], "val_loss": [1.9829511642456055, 1.9732632637023926, 1.9792560168675013, 1.9744653701782227, 1.9704337120056152, 1.9798974309648787], "val_accuracy": [0.11299999803304672, 0.09700000286102295, 0.09966666996479034, 0.09833333641290665, 0.09966666996479034, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [4, 2, 6, 6, 9, 0, 2, 0, 8, 9, 8, 8, 4, 3, 2, 6, 8, 5, 0, 2], [0, 0, 2, 2, 2, 1, 1, 2, 0, 0, 0, 3, 2, 2], [39, 42, 74, 73, 95], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 2, 0], [5, 3], [], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [49, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 1, 2, 1], "tree_depth": 6, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.07052146e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [134548252.42644548, 2547013085.848633, 11758229057.394796, 32762531097.731873, 70091627602.63954, 131214844218.86884], "accuracy": [0.09536388516426086, 0.09906221181154251, 0.10447761416435242, 0.09959053993225098, 0.10342095047235489, 0.10315678268671036], "val_loss": [506310692.5714286, 4047932562.285714, 13658874733.714285, 32373108150.857143, 63224643584.0, 109248359862.85715], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1], [4, 4, 6, 6, 0, 9, 8, 0, 3, 4, 3, 8, 4, 3, 2, 6, 8, 5, 0, 2, 4, 4, 6, 5, 2], [0, 2, 2, 2, 2, 1, 1, 2, 0, 0, 0, 3, 2, 2], [56, 42, 74, 73, 95], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 2, 0], [5, 3], [], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [5, 3, 2, 9, 2, 9], [0, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [49, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 12, 8, 4, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.pow(tf.math.pow(tf.math.divide_no_nan(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), grad), tf.math.divide_no_nan(tf.math.negative(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))))), grad), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3025875318917963, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [4, 6, 6, 6, 4, 4, 8, 0, 3, 6, 3, 8, 9, 3, 2, 6, 0, 5, 0, 2], [0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 3, 2, 2], [56, 15, 74, 73, 95], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 2, 0], [5, 3], [], [0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 3, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [49, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 24, 24, 14, 10, 5, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 5, 4, 2], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.pow(tf.math.pow(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.multiply(grad, tf.math.sqrt(grad))))))))), grad), tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))), tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, sigma), tf.math.add(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [1261070.1654298087, 2.313828839759439, 2.3057725959843838, 2.3036966490440083, 2.3030657185665477, 2.3029757470912022, 2.303025209640767, 2.3030364433724912, 2.302996008387646, 2.3029280234762486], "accuracy": [0.09642054885625839, 0.09813763201236725, 0.09694888442754745, 0.09708096832036972, 0.09338264167308807, 0.0948355570435524, 0.09338264167308807, 0.0944393053650856, 0.09245806187391281, 0.09470347315073013], "val_loss": [1.9903595788138253, 1.9786725725446428, 1.9751813752310616, 1.9742317199707031, 1.973787716456822, 1.9736808368137904, 1.9736486162458147, 1.973682471684047, 1.9736426898411341, 1.9736735480172294], "val_accuracy": [0.09833333641290665, 0.09966666996479034, 0.09700000286102295, 0.09700000286102295, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.09833333641290665, 0.10400000214576721, 0.09700000286102295]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1], [9, 4, 6, 6, 0, 2, 3, 0, 3, 4, 3, 8, 4, 3, 9, 6, 8, 5, 9, 2, 4, 4, 6, 5, 0], [2, 3, 2, 0, 2, 2, 2, 2, 0, 1, 0, 3, 2, 2, 3, 3, 0, 1], [26, 98, 83, 73, 46, 42], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [5, 8, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 3, 2, 1, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.square(tf.math.sqrt(beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1], [1, 4, 6, 4, 4, 2, 8, 0, 0, 6, 3, 8, 9, 3, 2, 6, 0, 5, 0, 2], [0, 1, 2, 2, 2, 1, 1, 2, 0, 0, 0, 3, 2, 2], [29, 86, 74, 73, 95], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 2, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [1, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [49, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 30, 30, 19, 11, 5, 1, 1, 0, 1, 0, 5, 3, 2, 1, 0, 5, 2, 3, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.divide_no_nan(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha))))))), grad)), tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.multiply(grad, tf.math.sqrt(tf.math.add(alpha, alpha))))), alpha)), tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.add(sigma, sigma)), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [Infinity, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09668471664190292, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [4, 2, 6, 6, 9, 5, 2, 0, 8, 9, 8, 8, 4, 3, 2, 6, 8, 5, 0, 2], [1, 2, 2, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [26, 98, 45, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 10, 4, 3, 1, 1, 0, 1, 0, 5, 3, 2, 1, 0, 5, 2, 3, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))), grad)))), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(sigma, sigma)), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07489103078842163, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [1, 4, 0, 9, 2, 2, 8, 0, 3, 9, 3, 8, 9, 3, 2, 6, 0, 5, 0, 2], [0, 0, 2, 2, 2, 1, 2, 2, 0, 0, 0, 3, 2, 2], [56, 42, 50, 73, 95], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [0, 0, 0, 0], [3, 2, 0], [5, 3], [], [0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [3, 1, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [49, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 4, 2, 3, 8, 8, 4, 4, 0, 3, 1, 1, 0, 0, 9, 5, 4, 2], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.pow(tf.math.negative(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), grad)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(sigma, alpha), tf.math.add(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09708096832036972, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 1, 6, 4, 9, 8, 2, 9, 8, 9, 8, 8, 4, 3, 2, 6, 8, 5, 0, 2], [0, 3, 2, 1, 2, 1, 1, 2, 0, 0, 0, 3, 2, 2], [29, 86, 74, 73, 95], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [1, 2, 0], [5, 3], [], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [5, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.06914285570383072, "mapping_values": [1, 12, 12, 8, 4, 3, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(grad)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), grad)))), alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.square(beta)", "other_info": {"loss": [2.301909686268565, 2.3020297363370936, 2.300767060803731, 2.3002230532810812, 2.300390692403398, 2.299603338365022, 2.3010117093790257, 2.2988060522451064, 2.298901152821769, 2.2990586136341915, 2.2997593693272815, 2.3003615296008233, 2.300323214214145], "accuracy": [0.08928807079792023, 0.09113723784685135, 0.09285431355237961, 0.09972262382507324, 0.09219389408826828, 0.09826971590518951, 0.09259014576673508, 0.1006472036242485, 0.10328886657953262, 0.10130762308835983, 0.09866596013307571, 0.09787346422672272, 0.09655263274908066], "val_loss": [1.9698912756783622, 1.969372068132673, 1.9690744536263602, 1.968930993761335, 1.9689343997410365, 1.9690092631748743, 1.96902254649571, 1.969017165047782, 1.9690613065447127, 1.9692093985421317, 1.9693117822919572, 1.9694677080426897, 1.9696103504725866], "val_accuracy": [0.04833333194255829, 0.05533333495259285, 0.057999998331069946, 0.061666667461395264, 0.06233333423733711, 0.06733333319425583, 0.070333331823349, 0.07566666603088379, 0.07566666603088379, 0.07433333247900009, 0.07500000298023224, 0.07233333587646484, 0.07366666942834854]}}]