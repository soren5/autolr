[{"genotype": [[0], [0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 2, 4, 6, 8, 1, 9, 3, 2, 1, 5, 0, 2, 3, 2, 4, 0, 5, 6, 2, 4, 5, 6, 2, 0, 5, 2, 4, 6, 9, 6, 6, 5, 6, 0, 3, 6, 7, 1, 1, 2, 2], [0, 1, 2, 2, 2, 0, 1, 2, 2, 0, 0, 3, 2, 2, 3, 1, 2, 2, 2, 1, 0, 0, 1, 3, 3, 2, 0, 2, 0, 0], [31, 62, 7, 77, 7, 1, 49, 51, 8, 77, 64, 19, 79, 59], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 0, 1, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [6, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 50, 71, 34]], "fitness": -0.8108571171760559, "mapping_values": [1, 67, 67, 40, 27, 9, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.subtract(grad, tf.math.add(alpha, grad)), tf.math.square(tf.math.add(alpha, grad)))), tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(alpha, grad)), grad)))), tf.math.add(alpha, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.pow(tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(tf.math.negative(grad), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(grad, grad))))), tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(grad, alpha)), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.square(grad)))))), tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, grad)), tf.math.multiply(tf.math.add(alpha, alpha), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32))), alpha)))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), grad)), grad))), tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(tf.math.multiply(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.0590318299838817, 1.6254234006297492, 1.1272198125088235, 0.8877617191125248, 0.8060254615453162, 0.7852389688631012, 0.726942547741284, 0.7019663398543904, 0.6767188184973963, 0.6901649718334363, 0.666065340579981, 0.6244592152771113, 0.6051243723123743, 0.611184475349791, 0.5892845040551109, 0.5697093972078389, 0.5498150942930534, 0.5429782557441826, 0.5244533501643199, 0.5202389077314564, 0.5240452940737047, 0.4955192289379499, 0.5020321697024244, 0.49533428027566556, 0.4654793934838773, 0.47451778921579024, 0.472532683316475, 0.4562001048321926, 0.4629161592330348, 0.45770225471288867, 0.4475890808511073, 0.4336086571838531, 0.42621219313659564, 0.4173858721203351, 0.4347204443659245], "accuracy": [0.3245278000831604, 0.4741777777671814, 0.5929203629493713, 0.6709813475608826, 0.6968696117401123, 0.7040021419525146, 0.7213049530982971, 0.7363624572753906, 0.7415136694908142, 0.7423061728477478, 0.748778223991394, 0.7695152759552002, 0.7718927264213562, 0.7655527591705322, 0.7754589915275574, 0.7816668748855591, 0.7907806038856506, 0.7936864495277405, 0.8050455451011658, 0.8087438941001892, 0.804649293422699, 0.8148196935653687, 0.8112534880638123, 0.8119139075279236, 0.8249900937080383, 0.8277638554573059, 0.8195747137069702, 0.8257825970649719, 0.8273676037788391, 0.8304054737091064, 0.8343679904937744, 0.8457271456718445, 0.8421608805656433, 0.8512746095657349, 0.8374059200286865], "val_loss": [1.5455562387193953, 0.969088111604963, 0.6916979381016323, 0.7039131096431187, 0.5770115682056972, 0.5403499262673515, 0.5583865301949638, 0.5580133029392788, 0.5021526983806065, 0.6208663327353341, 0.5072773184095111, 0.49824494974953787, 0.46257693426949636, 0.49351790973118376, 0.48181091036115375, 0.4477828400475638, 0.4559915746961321, 0.44335352522986277, 0.4260295714650835, 0.45982602664402555, 0.4447065166064671, 0.4533093401363918, 0.42962620088032316, 0.4313758781978062, 0.40406488520758493, 0.4249102217810495, 0.395527788570949, 0.3793794683047703, 0.45666262933186125, 0.3646839346204485, 0.37328084877559115, 0.3807623216084072, 0.3807224290711539, 0.3850329007421221, 0.3644370606967381], "val_accuracy": [0.43833333253860474, 0.5666666626930237, 0.7043333053588867, 0.6743333339691162, 0.7400000095367432, 0.7506666779518127, 0.7453333139419556, 0.7293333411216736, 0.7710000276565552, 0.7559999823570251, 0.7883333563804626, 0.7803333401679993, 0.7916666865348816, 0.7580000162124634, 0.7803333401679993, 0.7990000247955322, 0.7923333048820496, 0.8046666383743286, 0.8080000281333923, 0.7826666831970215, 0.7993333339691162, 0.809333324432373, 0.8053333163261414, 0.8073333501815796, 0.8263333439826965, 0.8169999718666077, 0.8333333134651184, 0.8373333215713501, 0.7990000247955322, 0.8493333458900452, 0.8399999737739563, 0.8360000252723694, 0.8426666855812073, 0.8293333053588867, 0.8476666808128357]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 2, 4, 6, 2, 1, 9, 3, 2, 1, 5, 8, 2, 3, 2, 4, 0, 5, 0, 2, 4, 5, 6, 2, 0, 5, 2, 4, 6, 9, 6, 6, 5, 6, 0, 3, 6, 7, 1, 1, 2, 2], [0, 1, 2, 0, 2, 0, 1, 2, 2, 0, 0, 3, 2, 2, 3, 1, 0, 3, 2, 1, 0, 0, 1, 3, 3, 2, 0, 2, 0, 0], [31, 62, 7, 73, 7, 1, 49, 51, 88, 77, 64, 19, 79, 59], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 0, 1, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 50, 71, 34]], "fitness": -0.7994285821914673, "mapping_values": [1, 65, 65, 39, 26, 10, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 41, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.square(tf.math.add(alpha, grad)), tf.math.sqrt(tf.math.add(alpha, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))), alpha)))), tf.math.add(alpha, grad)), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32))))))), tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.negative(grad))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(grad, grad)))))), tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(grad, alpha)), tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.square(grad))))), tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, grad)), tf.math.multiply(tf.math.add(alpha, alpha), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32)), tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32))), alpha))))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), grad))))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9679144304410545, 1.3226947244195228, 1.0252791891921829, 0.8498550072605615, 0.7957839751838772, 0.7685113716607301, 0.7111084468848733, 0.6925771452920501, 0.6620612910253307, 0.6415846370324924, 0.6484794343986909, 0.6126561483466441, 0.5802824207741618, 0.5890914518063834, 0.5935352842537892, 0.5675388721899507, 0.5376105530387013, 0.5534235059844976, 0.5283125919940497, 0.5117208338479765], "accuracy": [0.3457931578159332, 0.5493329763412476, 0.6242240071296692, 0.6823405027389526, 0.6996433734893799, 0.7116629481315613, 0.7312111854553223, 0.7378153204917908, 0.746268630027771, 0.7548540234565735, 0.7506273984909058, 0.7693831920623779, 0.7839123010635376, 0.7724210619926453, 0.7726852297782898, 0.7852331399917603, 0.7981772422790527, 0.7897239327430725, 0.8045172095298767, 0.8129705190658569], "val_loss": [1.0911285877227783, 0.8829929147447858, 0.6232965333121163, 0.6222287586757115, 0.5757596833365304, 0.5363862684794835, 0.534558619771685, 0.5229884556361607, 0.5058911527906146, 0.562941176550729, 0.4898409162248884, 0.48863824776240755, 0.4787475551877703, 0.4832566635949271, 0.44930320978164673, 0.43754665340696064, 0.47442284652165007, 0.4392067619732448, 0.4289855531283787, 0.4420051234109061], "val_accuracy": [0.5433333516120911, 0.5860000252723694, 0.7196666598320007, 0.7136666774749756, 0.75, 0.750333309173584, 0.7633333206176758, 0.7549999952316284, 0.7723333239555359, 0.7386666536331177, 0.7833333611488342, 0.7963333129882812, 0.7853333353996277, 0.7683333158493042, 0.8133333325386047, 0.8086666464805603, 0.7893333435058594, 0.809333324432373, 0.8106666803359985, 0.7979999780654907]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [2, 2, 4, 8, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2, 4, 3, 9, 4, 7, 6, 5, 9, 2, 6, 5, 4, 0, 6, 4, 2, 3, 2, 7, 9], [1, 2, 2, 1, 2, 0, 1, 2, 0, 0, 0, 2, 2, 2, 0, 1, 1, 2, 2, 3, 2, 2, 2, 1], [87, 55, 35, 73, 95, 21, 60, 81], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 5, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 5, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.7834285497665405, "mapping_values": [1, 11, 11, 6, 5, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 5, 3, 2, 0], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)), tf.math.pow(tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), alpha))))), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.square(beta)))", "other_info": {"loss": [2.3007557941008994, 2.3001051685042024, 2.2902750939016627, 2.280476999320626, 2.271580693775621, 2.251614054794624, 2.2174524828553466, 2.112502027858502, 1.7928070391425839, 1.4545219746311153, 1.1526915720976292, 1.0286866423318792, 0.9551179946578962, 0.9096647426751721, 0.8662572763205802, 0.8350903223754708, 0.8287698327983296, 0.802513201569585, 0.7846078937079818, 0.7712058644284662, 0.7697231264445665, 0.7522162456459546, 0.7446704467510299, 0.7403923712858765, 0.730422964311468, 0.7146097714748869, 0.7191913549170408, 0.6992468337231088, 0.7029349106398273, 0.6905940207019852, 0.690142705385097, 0.6826498437598554, 0.6794057193842893, 0.6665337736800897, 0.6666215485144663, 0.6689764520259439, 0.6654252780033314, 0.6532198034493584, 0.6496657563899692, 0.6350015901917747, 0.6382468590536736, 0.6426629251524316, 0.6217387251141616, 0.6335048108383681, 0.6110098771667279, 0.6231177283426113, 0.6218061093892939, 0.60734155065962, 0.6031843503436959, 0.614969134771624, 0.5991582547542899], "accuracy": [0.08955223858356476, 0.09509972482919693, 0.11834631860256195, 0.14014001190662384, 0.1632545292377472, 0.19733192026615143, 0.2300885021686554, 0.29282790422439575, 0.3843613862991333, 0.46149781346321106, 0.5691454410552979, 0.6234315037727356, 0.6454893946647644, 0.6737551093101501, 0.6774534583091736, 0.6840575933456421, 0.6946242451667786, 0.6988508701324463, 0.7077004313468933, 0.7117950320243835, 0.7092854380607605, 0.7238145470619202, 0.7205125093460083, 0.7252674698829651, 0.7316074371337891, 0.733060359954834, 0.7297582626342773, 0.737947404384613, 0.7374191284179688, 0.7382115721702576, 0.7345132827758789, 0.739928662776947, 0.7417778372764587, 0.7514199018478394, 0.7442874312400818, 0.7497028112411499, 0.7510236501693726, 0.7520803213119507, 0.7547219395637512, 0.7623828053474426, 0.7561748623847961, 0.7572315335273743, 0.7663452625274658, 0.7594769597053528, 0.7675340175628662, 0.7631752490997314, 0.7681944370269775, 0.7737419009208679, 0.7713643908500671, 0.7666094303131104, 0.77677983045578], "val_loss": [1.9688826288495744, 1.9622558185032435, 1.9537111691066198, 1.9447193145751953, 1.9304580688476562, 1.9040684700012207, 1.8441746575491769, 1.6242381164005824, 1.0977918761117118, 0.8258667843682426, 0.7477965865816388, 0.6646388598850795, 0.6313027824674334, 0.6243572916303363, 0.5857611213411603, 0.5671063320977348, 0.5707699060440063, 0.5536814757755825, 0.5451156071254185, 0.5428567954472133, 0.5297207832336426, 0.5278510877064296, 0.5107019969395229, 0.5216515234538487, 0.5076495068413871, 0.5106150593076434, 0.5184765202658517, 0.5106529678617205, 0.4898736817496164, 0.49566221237182617, 0.501503484589713, 0.5004722050258091, 0.5048978158405849, 0.48466942991529194, 0.4785025290080479, 0.4796661990029471, 0.4866074323654175, 0.47357588154929026, 0.47807461874825613, 0.4741081850869315, 0.46910580566951204, 0.46770851952689035, 0.4691007137298584, 0.4682314225605556, 0.4737894705363682, 0.4619313989366804, 0.45070464270455496, 0.4597090482711792, 0.4484891380582537, 0.45922988653182983, 0.44679488454546246], "val_accuracy": [0.05066666752099991, 0.10400000214576721, 0.1783333271741867, 0.23100000619888306, 0.304666668176651, 0.38866665959358215, 0.42633333802223206, 0.476666659116745, 0.5663333535194397, 0.6826666593551636, 0.6326666474342346, 0.7089999914169312, 0.7243333458900452, 0.7103333473205566, 0.7260000109672546, 0.7509999871253967, 0.7423333525657654, 0.7606666684150696, 0.7613333463668823, 0.7519999742507935, 0.7643333077430725, 0.7689999938011169, 0.7723333239555359, 0.7789999842643738, 0.7763333320617676, 0.7716666460037231, 0.7649999856948853, 0.7643333077430725, 0.7866666913032532, 0.7776666879653931, 0.781000018119812, 0.7753333449363708, 0.7793333530426025, 0.7893333435058594, 0.796999990940094, 0.7946666479110718, 0.765999972820282, 0.7929999828338623, 0.8019999861717224, 0.8109999895095825, 0.7870000004768372, 0.800000011920929, 0.8113333582878113, 0.7979999780654907, 0.8043333292007446, 0.8130000233650208, 0.8113333582878113, 0.8083333373069763, 0.8119999766349792, 0.8076666593551636, 0.8080000281333923]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 6, 2, 1, 9, 3, 2, 1, 5, 8, 2, 3, 2, 4, 0, 5, 0, 2, 4, 5, 6, 2, 0, 5, 2, 4, 6, 9, 6, 6, 5, 6, 0, 3, 6, 7, 1, 1, 2, 2], [1, 1, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [31, 62, 7, 73, 7, 1, 49, 51, 88, 77, 64, 19, 79, 59], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [4, 0, 1, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.7817142605781555, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.059827611242004, 1.4444234265375446, 1.1173142710413522, 0.8930616043955816, 0.817605388737657, 0.7718845468234424, 0.7429830720868361, 0.714590826188537, 0.681932266149633, 0.6775021832679886, 0.669075690681247, 0.6279343220819461, 0.6228671960622217, 0.6041482319889792, 0.5838314689476382, 0.568562915879092, 0.5811967707155813, 0.5443793335028329, 0.5271546468443764, 0.5319343567083478], "accuracy": [0.32082948088645935, 0.5165764093399048, 0.5913353562355042, 0.6579051613807678, 0.691850483417511, 0.7046625018119812, 0.7199841737747192, 0.7294940948486328, 0.7411174178123474, 0.7391361594200134, 0.7473253011703491, 0.7635715007781982, 0.7582882046699524, 0.7707040309906006, 0.78113853931427, 0.7864218950271606, 0.7783648371696472, 0.7936864495277405, 0.8059701323509216, 0.7998943328857422], "val_loss": [1.5144595078059606, 0.8162169286182949, 0.6894856861659459, 0.6851374932697841, 0.5859642539705548, 0.5656135422842843, 0.6072846821376255, 0.5555139780044556, 0.5145563227789742, 0.5042596885136196, 0.5403459583009992, 0.5190174068723407, 0.47902934891836985, 0.4628023760659354, 0.4380840914590018, 0.4607759884425572, 0.4683897835867746, 0.4505837048803057, 0.46563853536333355, 0.4672251599175589], "val_accuracy": [0.515666663646698, 0.5986666679382324, 0.6930000185966492, 0.687666654586792, 0.7356666922569275, 0.7353333234786987, 0.7166666388511658, 0.7403333187103271, 0.7723333239555359, 0.7670000195503235, 0.746666669845581, 0.7523333430290222, 0.777999997138977, 0.7950000166893005, 0.8143333196640015, 0.7929999828338623, 0.7979999780654907, 0.8043333292007446, 0.7770000100135803, 0.7913333177566528]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 6, 1, 0, 2, 3, 2, 4, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2, 2, 3, 0, 3, 1, 2, 0, 0, 0, 0], [22, 55, 4, 73, 95], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 0, 1, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.7817142605781555, "mapping_values": [1, 24, 24, 14, 10, 4, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(grad, tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), tf.math.pow(tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha)))))))))), tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32))))), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.059827611242004, 1.4444234265375446, 1.1173142710413522, 0.8930616043955816, 0.817605388737657, 0.7718845468234424, 0.7429830720868361, 0.714590826188537, 0.681932266149633, 0.6775021832679886, 0.669075690681247, 0.6279343220819461, 0.6228671960622217, 0.6041482319889792, 0.5838314689476382, 0.568562915879092, 0.5811967707155813, 0.5443793335028329, 0.5271546468443764, 0.5319343567083478], "accuracy": [0.32082948088645935, 0.5165764093399048, 0.5913353562355042, 0.6579051613807678, 0.691850483417511, 0.7046625018119812, 0.7199841737747192, 0.7294940948486328, 0.7411174178123474, 0.7391361594200134, 0.7473253011703491, 0.7635715007781982, 0.7582882046699524, 0.7707040309906006, 0.78113853931427, 0.7864218950271606, 0.7783648371696472, 0.7936864495277405, 0.8059701323509216, 0.7998943328857422], "val_loss": [1.5144595078059606, 0.8162169286182949, 0.6894856861659459, 0.6851374932697841, 0.5859642539705548, 0.5656135422842843, 0.6072846821376255, 0.5555139780044556, 0.5145563227789742, 0.5042596885136196, 0.5403459583009992, 0.5190174068723407, 0.47902934891836985, 0.4628023760659354, 0.4380840914590018, 0.4607759884425572, 0.4683897835867746, 0.4505837048803057, 0.46563853536333355, 0.4672251599175589], "val_accuracy": [0.515666663646698, 0.5986666679382324, 0.6930000185966492, 0.687666654586792, 0.7356666922569275, 0.7353333234786987, 0.7166666388511658, 0.7403333187103271, 0.7723333239555359, 0.7670000195503235, 0.746666669845581, 0.7523333430290222, 0.777999997138977, 0.7950000166893005, 0.8143333196640015, 0.7929999828338623, 0.7979999780654907, 0.8043333292007446, 0.7770000100135803, 0.7913333177566528]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 6, 1, 1, 2, 3, 2, 1, 5, 2, 9, 3, 2, 6, 0, 5, 0, 2], [1, 1, 1, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2, 2, 3, 0, 3, 1, 2, 0, 0, 0, 0], [94, 55, 35, 17, 95], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 0, 1, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.7817142605781555, "mapping_values": [1, 13, 13, 6, 7, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha))), tf.math.add(alpha, grad))), tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.059827611242004, 1.4444234265375446, 1.1173142710413522, 0.8930616043955816, 0.817605388737657, 0.7718845468234424, 0.7429830720868361, 0.714590826188537, 0.681932266149633, 0.6775021832679886, 0.669075690681247, 0.6279343220819461, 0.6228671960622217, 0.6041482319889792, 0.5838314689476382, 0.568562915879092, 0.5811967707155813, 0.5443793335028329, 0.5271546468443764, 0.5319343567083478], "accuracy": [0.32082948088645935, 0.5165764093399048, 0.5913353562355042, 0.6579051613807678, 0.691850483417511, 0.7046625018119812, 0.7199841737747192, 0.7294940948486328, 0.7411174178123474, 0.7391361594200134, 0.7473253011703491, 0.7635715007781982, 0.7582882046699524, 0.7707040309906006, 0.78113853931427, 0.7864218950271606, 0.7783648371696472, 0.7936864495277405, 0.8059701323509216, 0.7998943328857422], "val_loss": [1.5144595078059606, 0.8162169286182949, 0.6894856861659459, 0.6851374932697841, 0.5859642539705548, 0.5656135422842843, 0.6072846821376255, 0.5555139780044556, 0.5145563227789742, 0.5042596885136196, 0.5403459583009992, 0.5190174068723407, 0.47902934891836985, 0.4628023760659354, 0.4380840914590018, 0.4607759884425572, 0.4683897835867746, 0.4505837048803057, 0.46563853536333355, 0.4672251599175589], "val_accuracy": [0.515666663646698, 0.5986666679382324, 0.6930000185966492, 0.687666654586792, 0.7356666922569275, 0.7353333234786987, 0.7166666388511658, 0.7403333187103271, 0.7723333239555359, 0.7670000195503235, 0.746666669845581, 0.7523333430290222, 0.777999997138977, 0.7950000166893005, 0.8143333196640015, 0.7929999828338623, 0.7979999780654907, 0.8043333292007446, 0.7770000100135803, 0.7913333177566528]}}, {"genotype": [[0], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 6, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 2, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 3, 3, 1, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 2, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.3082857131958008, "mapping_values": [1, 9, 9, 4, 5, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.pow(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, grad)))), tf.math.add(alpha, grad)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(sigma, beta))", "other_info": {"loss": [2.503057418261946, 2.4087114442120674, 2.3055709221454075, 2.3032915582116473, 2.302557666965243, 2.2987595551427424, 2.418324596673081, 2.305837384997232, 2.303977871489106, 2.3033716199640835, 2.303255743685022], "accuracy": [0.21159687638282776, 0.20499274134635925, 0.09655263274908066, 0.09972262382507324, 0.1018359512090683, 0.1254788041114807, 0.18161405622959137, 0.09906221181154251, 0.09655263274908066, 0.09602430462837219, 0.09642054885625839], "val_loss": [1.980640070778983, 1.9786290441240584, 1.9738168035234724, 1.9734040669032507, 1.9727723939078194, 1.9436153684343611, 1.9773002352033342, 1.9740048817225866, 1.9735165323529924, 1.9737892150878906, 1.973607063293457], "val_accuracy": [0.09966666996479034, 0.09833333641290665, 0.10400000214576721, 0.09833333641290665, 0.17000000178813934, 0.2826666533946991, 0.09966666996479034, 0.1080000028014183, 0.10400000214576721, 0.0976666659116745, 0.14866666495800018]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [2, 1, 4, 6, 2, 1, 9, 3, 2, 1, 5, 8, 2, 3, 2, 4, 0, 5, 0, 2, 4, 5, 6, 2, 0, 5, 2, 4, 0, 9, 6, 3, 5, 6, 0, 3, 6, 7, 1, 1, 2, 2], [0, 1, 0, 0, 2, 0, 1, 2, 2, 0, 0, 3, 2, 2, 2, 1, 0, 3, 2, 1, 0, 0, 1, 3, 3, 2, 0, 2, 0, 0], [31, 62, 17, 73, 87, 82, 49, 51, 50, 77, 64, 97], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 0, 1, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.3082857131958008, "mapping_values": [1, 64, 64, 39, 25, 11, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), grad)), tf.math.add(alpha, tf.math.negative(grad)))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))))))), tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.negative(grad))), tf.math.square(tf.math.add(grad, grad)))), tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(grad, alpha)), tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))))), tf.math.square(grad))))))))), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.multiply(tf.math.add(alpha, alpha), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.constant(9.49275639e-01, shape=shape, dtype=tf.float32))), alpha)))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.503057418261946, 2.4087114442120674, 2.3055709221454075, 2.3032915582116473, 2.302557666965243, 2.2987595551427424, 2.418324596673081, 2.305837384997232, 2.303977871489106, 2.3033716199640835, 2.303255743685022], "accuracy": [0.21159687638282776, 0.20499274134635925, 0.09655263274908066, 0.09972262382507324, 0.1018359512090683, 0.1254788041114807, 0.18161405622959137, 0.09906221181154251, 0.09655263274908066, 0.09602430462837219, 0.09642054885625839], "val_loss": [1.980640070778983, 1.9786290441240584, 1.9738168035234724, 1.9734040669032507, 1.9727723939078194, 1.9436153684343611, 1.9773002352033342, 1.9740048817225866, 1.9735165323529924, 1.9737892150878906, 1.973607063293457], "val_accuracy": [0.09966666996479034, 0.09833333641290665, 0.10400000214576721, 0.09833333641290665, 0.17000000178813934, 0.2826666533946991, 0.09966666996479034, 0.1080000028014183, 0.10400000214576721, 0.0976666659116745, 0.14866666495800018]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 6, 1, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 1, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [31, 62, 7, 73, 7, 1, 49, 51, 88, 77, 64, 19, 79, 59], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [7, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.3082857131958008, "mapping_values": [1, 30, 30, 17, 13, 5, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))), tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha))))), tf.math.add(alpha, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32))))))))), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad))), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.503057418261946, 2.4087114442120674, 2.3055709221454075, 2.3032915582116473, 2.302557666965243, 2.2987595551427424, 2.418324596673081, 2.305837384997232, 2.303977871489106, 2.3033716199640835, 2.303255743685022], "accuracy": [0.21159687638282776, 0.20499274134635925, 0.09655263274908066, 0.09972262382507324, 0.1018359512090683, 0.1254788041114807, 0.18161405622959137, 0.09906221181154251, 0.09655263274908066, 0.09602430462837219, 0.09642054885625839], "val_loss": [1.980640070778983, 1.9786290441240584, 1.9738168035234724, 1.9734040669032507, 1.9727723939078194, 1.9436153684343611, 1.9773002352033342, 1.9740048817225866, 1.9735165323529924, 1.9737892150878906, 1.973607063293457], "val_accuracy": [0.09966666996479034, 0.09833333641290665, 0.10400000214576721, 0.09833333641290665, 0.17000000178813934, 0.2826666533946991, 0.09966666996479034, 0.1080000028014183, 0.10400000214576721, 0.0976666659116745, 0.14866666495800018]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0], [1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1], [2, 2, 4, 3, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 2, 0, 2, 4, 3, 9, 2, 7, 6, 5, 9, 3, 6, 5, 4, 0, 6, 4, 2, 3, 2, 7, 9], [1, 2, 2, 1, 1, 0, 1, 0, 0, 0, 1, 2, 1, 2, 2, 1, 1, 2, 2, 3, 2, 2, 2, 1], [87, 21, 50, 73, 95, 21, 90, 81], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 5, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 2, 9, 9, 2, 9], [0, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [31252569.774168115, 609088399.689341, 2816148380.859596, 7784339710.410778, 16672517843.738476, 30853913030.179367], "accuracy": [0.09760929644107819, 0.09972262382507324, 0.09417514503002167, 0.09800554811954498, 0.10249637067317963, 0.10091137140989304], "val_loss": [120597746.28571428, 963790262.8571428, 3251707757.714286, 7706389357.714286, 15050018230.857143, 26004600539.42857], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 1, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2, 4, 3, 9, 4, 7, 6, 5, 9, 2, 6, 5, 4, 0, 6, 4, 2, 3, 2, 7, 9], [0, 2, 1, 2, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [22, 55, 4, 73, 95], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 9, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [68, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 12, 12, 6, 6, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 2, 0, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), tf.math.pow(tf.math.subtract(tf.math.negative(tf.math.subtract(tf.math.add(alpha, alpha), grad)), tf.math.add(alpha, grad)), tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [1140900968.774234, 22262310153.772026, 102969383333.71866, 284673579079.14307, 609766238158.4974, 1128503808002.705], "accuracy": [0.09760929644107819, 0.09972262382507324, 0.09417514503002167, 0.09787346422672272, 0.10249637067317963, 0.10077928751707077], "val_loss": [4405770240.0, 35235450294.85714, 118908092416.0, 281838429330.2857, 550441264274.2858, 951175610368.0], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [5, 2, 4, 6, 1, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 1, 2, 2, 1, 2, 0, 0, 0, 3, 2, 2], [31, 62, 35, 73, 14, 1, 49, 51, 68, 77, 64, 97], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 0, 1, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [7, 3], [], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 4, 0, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [26.851693629903597, 286.66489298443486, 1099.4022880758764, 2840.585156482177, 5886.333584514513, 10685.896086836283], "accuracy": [0.09853387624025345, 0.09972262382507324, 0.09430722147226334, 0.09840179979801178, 0.10276053100824356, 0.10077928751707077], "val_loss": [72.53887721470424, 400.923331124442, 1215.2040318080358, 2753.096261160714, 5249.9521484375, 8941.07505580357], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 2, 4, 6, 2, 1, 9, 3, 2, 1, 5, 8, 2, 3, 2, 4, 0, 5, 0, 2, 2, 5, 6, 2, 0, 5, 2, 4, 6, 9, 6, 6, 0, 6, 0, 5, 6, 7, 3, 1, 2, 2], [0, 1, 2, 0, 2, 0, 1, 2, 2, 0, 0, 3, 2, 2, 3, 1, 1, 3, 2, 1, 0, 0, 1, 3, 3, 2, 0, 2, 0, 0], [79, 62, 35, 73, 14, 1, 49, 51, 68, 77, 64, 97], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 0, 1, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 49, 49, 30, 19, 7, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.square(grad), tf.math.sqrt(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad))), tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))), alpha)), tf.math.add(alpha, grad)), grad)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)))))))), tf.math.negative(tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))))))), grad), tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha)), alpha)), grad))))))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08030643314123154, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 2, 4, 6, 0, 1, 2, 3, 2, 1, 5, 8, 2, 3, 2, 6, 0, 5, 0, 6, 0, 1, 5, 1, 9, 1, 0], [1, 2, 2, 1, 2, 0, 1, 2, 0, 0, 0, 1, 2, 2, 1, 2], [74, 49, 35, 73, 95, 84], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 5, 3, 8, 1, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 1, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [1, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 41, 41, 25, 16, 5, 10, 10, 7, 3, 2, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.sqrt(tf.math.add(alpha, alpha))), tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, alpha), grad), tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.math.subtract(alpha, grad))), tf.math.square(tf.math.add(alpha, grad)))))))), tf.math.add(alpha, tf.math.subtract(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, alpha)))))), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.add(beta, tf.math.multiply(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, alpha)))))))), tf.math.sqrt(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 9, 4, 6, 5, 1, 9, 4, 2, 8, 5, 8, 2, 8, 2, 4, 0, 5, 0, 2, 4, 8, 6, 2, 0, 5, 2, 9, 0, 9, 6, 6, 5, 6, 0, 3, 6, 7, 1, 1, 2, 2], [0, 2, 2, 0, 2, 0, 1, 2, 2, 0, 1, 3, 2, 2, 3, 1, 0, 3, 2, 1, 0, 0, 1, 3, 3, 2, 0, 2, 0, 0], [31, 62, 7, 73, 7, 1, 49, 32, 88, 77, 64, 19, 79, 59], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 0, 1, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [2, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 6, 1, 0, 2, 3, 2, 4, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [3, 0, 1, 2, 1, 0, 1, 2, 0, 0, 0, 3, 2, 2], [22, 55, 4, 73, 95], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(grad, tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08030643314123154, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1], [9, 2, 4, 6, 2, 1, 9, 3, 2, 1, 5, 8, 2, 3, 2, 4, 0, 5, 0, 2, 4, 5, 6, 2, 0, 5, 2, 4, 6, 2, 6, 6, 5, 6, 0, 9, 6, 7, 1, 1, 2, 2], [0, 2, 2, 2, 0, 0, 1, 0, 0, 0, 0, 3, 2, 2, 2, 2, 0, 3, 1, 2, 0, 1, 0, 0], [31, 62, 35, 73, 14, 1, 25, 51, 68, 77, 64, 97, 23], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 0, 1, 3, 0, 2, 1, 3, 0, 0], [38, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08030643314123154, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], [3, 2, 4, 6, 2, 1, 9, 3, 2, 1, 5, 8, 2, 2, 2, 8, 0, 4, 0, 2, 4, 5, 2, 2, 0, 5, 2, 4, 6, 8, 6, 6, 5, 6, 0, 3, 5, 7, 1, 1, 2, 2], [0, 1, 2, 0, 2, 0, 2, 2, 2, 0, 0, 3, 2, 2, 3, 2, 0, 3, 2, 1, 0, 0, 1, 2, 3, 2, 0, 2, 0, 0], [31, 62, 7, 73, 7, 1, 49, 51, 88, 91, 64, 19, 79, 59], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 0, 1, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 4, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 28, 28, 16, 12, 6, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)))), tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(alpha, grad))), tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.add(alpha, tf.constant(1.86692945e-04, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(sigma, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09840179979801178, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 6, 1, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [3, 2, 2, 1, 2, 2, 1, 2, 0, 0, 0, 3, 2, 2], [94, 55, 35, 73, 95], [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [7, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: beta, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, beta))", "other_info": {"loss": [2.301090929470735, 2.3043358644647465, 2.302618531251171, 2.3013418032555863, 2.303173653878839, 2.302403352641946], "accuracy": [0.08915598690509796, 0.08677849918603897, 0.09219389408826828, 0.09126931428909302, 0.08387266844511032, 0.09272222965955734], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 6, 1, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 1, 2, 1, 0, 1, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 5, 5, 2, 3, 0, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 4, 3, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)), alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.301090929470735, 2.3043358644647465, 2.302618531251171, 2.3013418032555863, 2.303173653878839, 2.302403352641946], "accuracy": [0.08915598690509796, 0.08677849918603897, 0.09219389408826828, 0.09126931428909302, 0.08387266844511032, 0.09272222965955734], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}]