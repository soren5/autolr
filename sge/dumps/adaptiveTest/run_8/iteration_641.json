[{"genotype": [[0], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 8, 1, 0, 5, 2, 1, 8, 0, 4, 9, 2, 9, 3, 6, 6, 9, 5, 0, 2, 8, 2, 0, 2, 8, 4], [2, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [34, 41, 35, 44, 70, 79, 53, 52, 44], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 4, 9, 8, 4, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 1, 3, 1, 0, 2, 1, 3, 0, 0], [77, 33, 93, 84, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [50, 25, 50, 71, 34]], "fitness": -0.8097142577171326, "mapping_values": [1, 37, 37, 26, 11, 7, 6, 6, 4, 2, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.square(tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)), grad), tf.math.add(alpha, tf.math.sqrt(tf.math.negative(tf.math.pow(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), grad)))))))))))), tf.math.add(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), tf.math.square(tf.math.negative(tf.math.add(tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, alpha))), tf.math.add(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), grad))))), tf.math.add(alpha, tf.math.sqrt(tf.math.pow(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.166302981456635, 1.858865811619792, 1.6442733682330888, 1.1614674327080954, 0.9706384812710135, 0.8265391323056597, 0.8096372335106076, 0.7524221522885858, 0.7119709802750882, 0.6769221858451742, 0.6521419066763069, 0.6629133759441157, 0.612564034694064, 0.599664507131409, 0.5939713690054493, 0.5880528030268284, 0.5433838351165551, 0.5321409287170538, 0.538788065304452, 0.510053264466511, 0.5100593366375406, 0.4980747534882013, 0.531032577993501, 0.4703994350520895], "accuracy": [0.3225465714931488, 0.3875313699245453, 0.4414212107658386, 0.5842028856277466, 0.6284506916999817, 0.6956809163093567, 0.6988508701324463, 0.7156254053115845, 0.7357020378112793, 0.7403249144554138, 0.7573636174201965, 0.7465327978134155, 0.7688548564910889, 0.7761194109916687, 0.7769119143486023, 0.77677983045578, 0.7936864495277405, 0.8026680946350098, 0.7981772422790527, 0.8043851256370544, 0.8059701323509216, 0.81548011302948, 0.8006868362426758, 0.8248580098152161], "val_loss": [1.9371372631617956, 1.642185892377581, 0.9981708867209298, 0.787963901247297, 0.6514591489519391, 0.7159331866673061, 0.5713674000331334, 0.6346854993275234, 0.53754004410335, 0.5827900000980922, 0.5634927919932774, 0.45631602832249235, 0.4462744508470808, 0.5078550236565726, 0.49403394971575054, 0.4623301199504307, 0.4332980854170663, 0.48519948550633024, 0.4063571946961539, 0.46410065037863596, 0.42656281164714266, 0.44182361023766653, 0.41734369312013897, 0.4175941177776882], "val_accuracy": [0.27566665410995483, 0.29866665601730347, 0.6466666460037231, 0.6463333368301392, 0.6996666789054871, 0.6643333435058594, 0.7409999966621399, 0.6943333148956299, 0.7480000257492065, 0.7300000190734863, 0.7179999947547913, 0.8046666383743286, 0.8090000152587891, 0.7613333463668823, 0.7463333606719971, 0.781333327293396, 0.8106666803359985, 0.7753333449363708, 0.824999988079071, 0.7883333563804626, 0.8149999976158142, 0.7960000038146973, 0.7993333339691162, 0.8090000152587891]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 6, 1, 0, 4, 2, 1, 8, 0, 4, 9, 2, 9, 3, 6, 6, 9, 5, 0, 2, 8, 2, 0, 2, 8, 4], [1, 1, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 41, 35, 44, 70, 79, 53, 52, 44], [1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 9, 4, 8, 4, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 1, 3, 1, 0, 2, 1, 3, 0, 0], [32, 33, 93, 84, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [50, 25, 50, 71, 34]], "fitness": -0.8097142577171326, "mapping_values": [1, 33, 33, 23, 10, 5, 3, 3, 2, 1, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.pow(alpha, alpha)))), tf.math.add(tf.math.add(alpha, grad), grad)), tf.math.add(alpha, tf.math.subtract(tf.math.sqrt(tf.math.negative(tf.math.pow(grad, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.negative(tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))), tf.math.negative(grad)))))), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(grad, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.166302981456635, 1.858865811619792, 1.6442733682330888, 1.1614674327080954, 0.9706384812710135, 0.8265391323056597, 0.8096372335106076, 0.7524221522885858, 0.7119709802750882, 0.6769221858451742, 0.6521419066763069, 0.6629133759441157, 0.612564034694064, 0.599664507131409, 0.5939713690054493, 0.5880528030268284, 0.5433838351165551, 0.5321409287170538, 0.538788065304452, 0.510053264466511, 0.5100593366375406, 0.4980747534882013, 0.531032577993501, 0.4703994350520895], "accuracy": [0.3225465714931488, 0.3875313699245453, 0.4414212107658386, 0.5842028856277466, 0.6284506916999817, 0.6956809163093567, 0.6988508701324463, 0.7156254053115845, 0.7357020378112793, 0.7403249144554138, 0.7573636174201965, 0.7465327978134155, 0.7688548564910889, 0.7761194109916687, 0.7769119143486023, 0.77677983045578, 0.7936864495277405, 0.8026680946350098, 0.7981772422790527, 0.8043851256370544, 0.8059701323509216, 0.81548011302948, 0.8006868362426758, 0.8248580098152161], "val_loss": [1.9371372631617956, 1.642185892377581, 0.9981708867209298, 0.787963901247297, 0.6514591489519391, 0.7159331866673061, 0.5713674000331334, 0.6346854993275234, 0.53754004410335, 0.5827900000980922, 0.5634927919932774, 0.45631602832249235, 0.4462744508470808, 0.5078550236565726, 0.49403394971575054, 0.4623301199504307, 0.4332980854170663, 0.48519948550633024, 0.4063571946961539, 0.46410065037863596, 0.42656281164714266, 0.44182361023766653, 0.41734369312013897, 0.4175941177776882], "val_accuracy": [0.27566665410995483, 0.29866665601730347, 0.6466666460037231, 0.6463333368301392, 0.6996666789054871, 0.6643333435058594, 0.7409999966621399, 0.6943333148956299, 0.7480000257492065, 0.7300000190734863, 0.7179999947547913, 0.8046666383743286, 0.8090000152587891, 0.7613333463668823, 0.7463333606719971, 0.781333327293396, 0.8106666803359985, 0.7753333449363708, 0.824999988079071, 0.7883333563804626, 0.8149999976158142, 0.7960000038146973, 0.7993333339691162, 0.8090000152587891]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 8, 1, 0, 5, 2, 1, 8, 0, 3, 9, 2, 9, 3, 6, 6, 1, 8, 0, 2, 8, 2, 0, 2, 8, 4], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 41, 35, 44, 70, 79, 53, 52, 44], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [70, 33, 79, 84, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.7691428661346436, "mapping_values": [1, 10, 10, 6, 4, 2, 7, 7, 3, 4, 2, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.square(tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(tf.math.add(alpha, grad), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2586759832226257, 2.059674110977547, 1.629489022837402, 1.271388039534134, 1.1049027706354584, 1.0094221912795809, 0.9455899483870049, 0.8823745952400753, 0.8500339400026666, 0.8366549693834292, 0.8013922104966513, 0.7734591893673636, 0.7678074772804169, 0.7606303374276988, 0.736263864257033, 0.7367617789197828, 0.7114547003592483, 0.7045267282255322, 0.6992496977849423, 0.6807847725653834, 0.6893079962004225, 0.6695030584484595, 0.6797889194247934, 0.6597061608886643, 0.668072535920499], "accuracy": [0.19799233973026276, 0.3955884277820587, 0.48527276515960693, 0.5620129704475403, 0.6092986464500427, 0.6513010263442993, 0.6627922058105469, 0.684982180595398, 0.6984546184539795, 0.7020208835601807, 0.7102100253105164, 0.7230220437049866, 0.7199841737747192, 0.7215691208839417, 0.7371549606323242, 0.7294940948486328, 0.7375511527061462, 0.741909921169281, 0.7440232634544373, 0.7461365461349487, 0.7474573850631714, 0.7530049085617065, 0.7506273984909058, 0.7565711140632629, 0.7490423917770386], "val_loss": [1.852283273424421, 1.5153933252607072, 1.0493993077959334, 0.8287030117852348, 0.7313829660415649, 0.6741962773459298, 0.6448532513209752, 0.6064928599766323, 0.5868234634399414, 0.5855767386300224, 0.5616768939154488, 0.5490635292870658, 0.5442522934504918, 0.5313865797860282, 0.5662247794015067, 0.5131614037922451, 0.5501985890524728, 0.5057536704199654, 0.5059473173958915, 0.4886449234826224, 0.4892934731074742, 0.5023098162242344, 0.49954349654061453, 0.4893836293901716, 0.49083518981933594], "val_accuracy": [0.44966667890548706, 0.5816666483879089, 0.6740000247955322, 0.6919999718666077, 0.7026666402816772, 0.7226666808128357, 0.7223333120346069, 0.749666690826416, 0.7553333044052124, 0.7526666522026062, 0.7586666941642761, 0.7673333287239075, 0.7670000195503235, 0.7763333320617676, 0.746666669845581, 0.7870000004768372, 0.7383333444595337, 0.7906666398048401, 0.7866666913032532, 0.79666668176651, 0.7916666865348816, 0.7803333401679993, 0.7716666460037231, 0.7893333435058594, 0.7836666703224182]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 8, 1, 0, 5, 2, 1, 8, 0, 4, 9, 2, 9, 3, 6, 6, 9, 5, 0, 2, 8, 2, 0, 2, 8, 4], [2, 2, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 41, 35, 44, 70, 79, 53, 52, 44], [0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 4, 3, 8, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 0, 0, 2, 1, 3, 0, 0], [77, 33, 93, 84, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.7691428661346436, "mapping_values": [1, 10, 10, 6, 4, 0, 12, 12, 6, 6, 3, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(grad))))))), tf.math.add(tf.math.add(alpha, grad), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.pow(tf.math.multiply(tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2586759832226257, 2.059674110977547, 1.629489022837402, 1.271388039534134, 1.1049027706354584, 1.0094221912795809, 0.9455899483870049, 0.8823745952400753, 0.8500339400026666, 0.8366549693834292, 0.8013922104966513, 0.7734591893673636, 0.7678074772804169, 0.7606303374276988, 0.736263864257033, 0.7367617789197828, 0.7114547003592483, 0.7045267282255322, 0.6992496977849423, 0.6807847725653834, 0.6893079962004225, 0.6695030584484595, 0.6797889194247934, 0.6597061608886643, 0.668072535920499], "accuracy": [0.19799233973026276, 0.3955884277820587, 0.48527276515960693, 0.5620129704475403, 0.6092986464500427, 0.6513010263442993, 0.6627922058105469, 0.684982180595398, 0.6984546184539795, 0.7020208835601807, 0.7102100253105164, 0.7230220437049866, 0.7199841737747192, 0.7215691208839417, 0.7371549606323242, 0.7294940948486328, 0.7375511527061462, 0.741909921169281, 0.7440232634544373, 0.7461365461349487, 0.7474573850631714, 0.7530049085617065, 0.7506273984909058, 0.7565711140632629, 0.7490423917770386], "val_loss": [1.852283273424421, 1.5153933252607072, 1.0493993077959334, 0.8287030117852348, 0.7313829660415649, 0.6741962773459298, 0.6448532513209752, 0.6064928599766323, 0.5868234634399414, 0.5855767386300224, 0.5616768939154488, 0.5490635292870658, 0.5442522934504918, 0.5313865797860282, 0.5662247794015067, 0.5131614037922451, 0.5501985890524728, 0.5057536704199654, 0.5059473173958915, 0.4886449234826224, 0.4892934731074742, 0.5023098162242344, 0.49954349654061453, 0.4893836293901716, 0.49083518981933594], "val_accuracy": [0.44966667890548706, 0.5816666483879089, 0.6740000247955322, 0.6919999718666077, 0.7026666402816772, 0.7226666808128357, 0.7223333120346069, 0.749666690826416, 0.7553333044052124, 0.7526666522026062, 0.7586666941642761, 0.7673333287239075, 0.7670000195503235, 0.7763333320617676, 0.746666669845581, 0.7870000004768372, 0.7383333444595337, 0.7906666398048401, 0.7866666913032532, 0.79666668176651, 0.7916666865348816, 0.7803333401679993, 0.7716666460037231, 0.7893333435058594, 0.7836666703224182]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 8, 1, 6, 5, 2, 1, 8, 0, 4, 9, 2, 9, 3, 6, 6, 9, 5, 0, 2, 8, 2, 0, 2, 8, 4], [2, 2, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 41, 35, 44, 70, 79, 53, 52, 44], [1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 4, 3, 8, 6, 9, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 3, 0, 0, 2, 1, 3, 0, 0], [95, 33, 93, 84, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.7691428661346436, "mapping_values": [1, 33, 33, 23, 10, 5, 7, 7, 3, 4, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.square(grad), tf.math.add(tf.math.add(alpha, grad), grad))))), tf.math.add(alpha, tf.math.subtract(tf.math.sqrt(tf.math.negative(tf.math.pow(grad, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.negative(tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))), tf.math.negative(grad)))))), tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, grad), beta), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2586759832226257, 2.059674110977547, 1.629489022837402, 1.271388039534134, 1.1049027706354584, 1.0094221912795809, 0.9455899483870049, 0.8823745952400753, 0.8500339400026666, 0.8366549693834292, 0.8013922104966513, 0.7734591893673636, 0.7678074772804169, 0.7606303374276988, 0.736263864257033, 0.7367617789197828, 0.7114547003592483, 0.7045267282255322, 0.6992496977849423, 0.6807847725653834, 0.6893079962004225, 0.6695030584484595, 0.6797889194247934, 0.6597061608886643, 0.668072535920499], "accuracy": [0.19799233973026276, 0.3955884277820587, 0.48527276515960693, 0.5620129704475403, 0.6092986464500427, 0.6513010263442993, 0.6627922058105469, 0.684982180595398, 0.6984546184539795, 0.7020208835601807, 0.7102100253105164, 0.7230220437049866, 0.7199841737747192, 0.7215691208839417, 0.7371549606323242, 0.7294940948486328, 0.7375511527061462, 0.741909921169281, 0.7440232634544373, 0.7461365461349487, 0.7474573850631714, 0.7530049085617065, 0.7506273984909058, 0.7565711140632629, 0.7490423917770386], "val_loss": [1.852283273424421, 1.5153933252607072, 1.0493993077959334, 0.8287030117852348, 0.7313829660415649, 0.6741962773459298, 0.6448532513209752, 0.6064928599766323, 0.5868234634399414, 0.5855767386300224, 0.5616768939154488, 0.5490635292870658, 0.5442522934504918, 0.5313865797860282, 0.5662247794015067, 0.5131614037922451, 0.5501985890524728, 0.5057536704199654, 0.5059473173958915, 0.4886449234826224, 0.4892934731074742, 0.5023098162242344, 0.49954349654061453, 0.4893836293901716, 0.49083518981933594], "val_accuracy": [0.44966667890548706, 0.5816666483879089, 0.6740000247955322, 0.6919999718666077, 0.7026666402816772, 0.7226666808128357, 0.7223333120346069, 0.749666690826416, 0.7553333044052124, 0.7526666522026062, 0.7586666941642761, 0.7673333287239075, 0.7670000195503235, 0.7763333320617676, 0.746666669845581, 0.7870000004768372, 0.7383333444595337, 0.7906666398048401, 0.7866666913032532, 0.79666668176651, 0.7916666865348816, 0.7803333401679993, 0.7716666460037231, 0.7893333435058594, 0.7836666703224182]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 8, 1, 0, 5, 2, 1, 8, 0, 4, 9, 2, 9, 3, 6, 6, 9, 5, 0, 2, 8, 9, 0, 2, 8, 4], [2, 0, 0, 2, 2, 2, 1, 0, 2, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [34, 41, 35, 44, 70, 4, 53, 52, 44], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 1, 1, 2, 4, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 0, 0, 2, 1, 3, 0, 0], [29, 80, 30, 84, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [74, 25, 50, 71, 34]], "fitness": -0.6825714111328125, "mapping_values": [1, 4, 4, 2, 2, 1, 12, 12, 6, 6, 3, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32))))))), beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.9807035341679757, 2.8501761090627924, 2.3074448868866533, 2.303790512590077, 2.302535249320602, 2.284828573878667, 2.24761162457953, 2.285014333442816, 2.111549656987269, 2.2480737757075024, 1.869047091054784, 1.4282225602023622, 1.0771258261225494, 0.950899699651932, 0.8527362064489552, 0.8116357506006433, 0.7525988416727807, 0.7301650254670671, 0.7114182526818702, 0.6914176050666584, 0.7610855145524317, 0.6582336235024343, 0.6492540862629238], "accuracy": [0.18359529972076416, 0.151234969496727, 0.09668471664190292, 0.09893012791872025, 0.1018359512090683, 0.1430458277463913, 0.1476687341928482, 0.14370624721050262, 0.2417117953300476, 0.18082155287265778, 0.36045435070991516, 0.5378417372703552, 0.6296393871307373, 0.6711134314537048, 0.705058753490448, 0.7053229212760925, 0.7264562249183655, 0.7396644949913025, 0.7475894689559937, 0.7485140562057495, 0.7310791015625, 0.7631752490997314, 0.7609298825263977], "val_loss": [1.9753948620387487, 1.9792498861040388, 1.9747373035975866, 1.9734622410365514, 1.9717905861990792, 1.6555065086909704, 1.973860536302839, 1.6556784766060966, 1.764864717211042, 1.431175947189331, 1.2112437656947546, 0.9761872972760882, 0.6578394174575806, 0.6405137607029506, 0.6537914957318988, 0.5217258589608329, 0.6121659619467599, 0.5415909801210675, 0.5351335150854928, 0.5153609343937465, 0.5118015834263393, 0.5353121927806309, 0.5529822451727731], "val_accuracy": [0.09833333641290665, 0.09966666996479034, 0.09833333641290665, 0.09833333641290665, 0.13833333551883698, 0.34933334589004517, 0.09733333438634872, 0.3683333396911621, 0.3713333308696747, 0.4320000112056732, 0.5586666464805603, 0.621999979019165, 0.706333339214325, 0.70333331823349, 0.7253333330154419, 0.777999997138977, 0.7450000047683716, 0.7793333530426025, 0.777999997138977, 0.7713333368301392, 0.7760000228881836, 0.7583333253860474, 0.7636666893959045]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 8, 1, 0, 5, 2, 1, 8, 0, 3, 9, 2, 9, 3, 6, 6, 1, 8, 0, 2, 8, 2, 0, 2, 8, 4], [2, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [1, 41, 52, 44, 70, 79, 53, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 1, 9, 6, 4, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [77, 33, 93, 84, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.3085714280605316, "mapping_values": [1, 10, 10, 6, 4, 1, 7, 7, 4, 3, 2, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))))))), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [3.0192713936196185, 2.6111714663900454, 2.3049714658490545, 2.303312244920399, 2.301822350151456, 2.283908897654854, 2.5914366385719765, 2.3038368464744385, 2.301976975606118, 2.2134644807274664, 2.307057295807947], "accuracy": [0.1802932173013687, 0.14859332144260406, 0.09694888442754745, 0.09932637959718704, 0.10527011007070541, 0.14000792801380157, 0.17382116615772247, 0.09760929644107819, 0.10276053100824356, 0.18702945113182068, 0.10394927859306335], "val_loss": [1.6779258251190186, 1.9757700647626604, 1.9741509301321847, 1.9732460294451033, 1.9701388904026575, 1.8974482672555106, 1.9749916621616908, 1.97441680090768, 1.9540687969752721, 1.98326689856393, 1.973717144557408], "val_accuracy": [0.33899998664855957, 0.09966666996479034, 0.09833333641290665, 0.09833333641290665, 0.21166667342185974, 0.3973333239555359, 0.10000000149011612, 0.10300000011920929, 0.1276666671037674, 0.10233332961797714, 0.10400000214576721]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 5, 1, 0, 5, 2, 1, 8, 0, 4, 9, 2, 9, 3, 6, 6, 9, 5, 0, 2, 8, 2, 0, 2, 8, 4], [2, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [41, 41, 35, 44, 70, 79, 53, 52, 44], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 1, 9, 6, 4, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 0, 0, 0, 0, 2, 1, 3, 0, 0], [59, 33, 56, 84, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.3085714280605316, "mapping_values": [1, 4, 4, 2, 2, 1, 7, 7, 4, 3, 3, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), alpha), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [3.0192713936196185, 2.6111714663900454, 2.3049714658490545, 2.303312244920399, 2.301822350151456, 2.283908897654854, 2.5914366385719765, 2.3038368464744385, 2.301976975606118, 2.2134644807274664, 2.307057295807947], "accuracy": [0.1802932173013687, 0.14859332144260406, 0.09694888442754745, 0.09932637959718704, 0.10527011007070541, 0.14000792801380157, 0.17382116615772247, 0.09760929644107819, 0.10276053100824356, 0.18702945113182068, 0.10394927859306335], "val_loss": [1.6779258251190186, 1.9757700647626604, 1.9741509301321847, 1.9732460294451033, 1.9701388904026575, 1.8974482672555106, 1.9749916621616908, 1.97441680090768, 1.9540687969752721, 1.98326689856393, 1.973717144557408], "val_accuracy": [0.33899998664855957, 0.09966666996479034, 0.09833333641290665, 0.09833333641290665, 0.21166667342185974, 0.3973333239555359, 0.10000000149011612, 0.10300000011920929, 0.1276666671037674, 0.10233332961797714, 0.10400000214576721]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [9, 8, 1, 0, 5, 2, 1, 8, 0, 4, 9, 2, 9, 3, 6, 6, 9, 5, 0, 2, 8, 2, 0, 2, 8, 4], [2, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 41, 35, 44, 70, 79, 53, 52, 44], [1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 4, 3, 8, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 0, 2, 0, 2, 1, 3, 0, 0], [77, 33, 93, 84, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [8, 3, 9, 9, 2, 9], [1, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 12, 12, 7, 5, 4, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(beta, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.multiply(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [9, 3, 5, 0, 5, 2, 1, 8, 0, 4, 9, 2, 9, 3, 6, 6, 9, 5, 0, 2, 8, 2, 0, 2, 8, 4], [2, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [4, 41, 35, 44, 70, 79, 53, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 3, 2, 6, 4, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 0, 0, 0, 2, 1, 3, 0, 0], [77, 33, 93, 84, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [1, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 11, 11, 5, 6, 4, 1, 1, 0, 1, 0, 3, 1, 2, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.pow(tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32), beta)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09668471664190292, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 2, 1, 0, 5, 2, 1, 8, 0, 3, 9, 2, 9, 3, 6, 6, 1, 8, 0, 2, 8, 2, 0, 2, 8, 4], [2, 0, 1, 2, 2, 2, 1, 2, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 41, 35, 44, 70, 79, 53, 52, 44], [0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 3, 9, 6, 4, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 2, 1, 3, 0, 0], [77, 33, 93, 84, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 9, 9, 5, 4, 1, 7, 7, 4, 3, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))))), tf.math.square(alpha))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.multiply(tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07726852595806122, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 6, 1, 0, 5, 6, 1, 8, 0, 5, 9, 2, 9, 3, 6, 6, 9, 5, 0, 2, 8, 2, 6, 2, 8, 4], [2, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [77, 41, 52, 44, 70, 79, 53, 52, 44], [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 4, 9, 2, 4, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 1, 3, 1, 0, 2, 1, 3, 0, 0], [77, 33, 93, 84, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 0, 1, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [50, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 7, 7, 4, 3, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.pow(tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07726852595806122, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 8, 2, 0, 5, 2, 1, 8, 0, 5, 9, 2, 9, 3, 6, 6, 9, 5, 0, 2, 8, 2, 6, 2, 8, 4], [1, 1, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [95, 41, 35, 44, 70, 79, 53, 52, 44], [0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 4, 3, 8, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 1, 3, 1, 0, 2, 1, 3, 0, 0], [95, 17, 23, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 5, 2, 0, 12, 12, 7, 5, 2, 1, 1, 0, 1, 0, 4, 4, 0, 2], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.negative(tf.math.square(alpha))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.pow(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(alpha))), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.773490894078547, 7.813135215115349, 19.736199281848954, 38.99746849413766, 66.47762110847067, 105.55604960237905], "accuracy": [0.09879804402589798, 0.10170386731624603, 0.10500594228506088, 0.09879804402589798, 0.10249637067317963, 0.09708096832036972], "val_loss": [3.215962682451521, 8.67691775730678, 18.570594787597656, 33.63251059395926, 54.746892656598774, 82.93691580636161], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 8, 1, 0, 5, 2, 1, 8, 0, 5, 9, 2, 9, 3, 6, 6, 9, 5, 0, 2, 8, 2, 6, 2, 8, 4], [2, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [1, 41, 52, 44, 70, 79, 53, 52, 44], [1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 9, 3, 8, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 1, 3, 1, 0, 2, 1, 3, 0, 0], [40, 17, 23, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 5, 2, 1, 6, 6, 4, 2, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.negative(tf.math.square(tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07726852595806122, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 5, 1, 0, 4, 2, 1, 8, 0, 4, 9, 2, 9, 3, 6, 6, 9, 5, 0, 2, 8, 2, 0, 2, 8, 4], [2, 1, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 41, 35, 44, 70, 79, 53, 52, 44], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [8, 1, 3, 2, 4, 0, 5, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 0, 0, 2, 1, 3, 0, 0], [77, 33, 93, 84, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [8, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 4, 2, 0, 14, 14, 9, 5, 4, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.square(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))), tf.math.add(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 8, 1, 0, 5, 2, 4, 2, 0, 4, 9, 2, 9, 3, 6, 6, 9, 5, 0, 2, 8, 2, 0, 2, 8, 4], [2, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [34, 41, 35, 44, 70, 79, 53, 52, 44], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 4, 9, 8, 4, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 1, 3, 1, 0, 2, 1, 3, 0, 0], [77, 33, 93, 84, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 1, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [50, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 10, 10, 6, 4, 1, 6, 6, 4, 2, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)))))), tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, grad), grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(sigma, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.303770916699072, 2.3029652877868583, 2.3031234290574316, 2.302981016768472, 2.302958939604834, 2.302964609910972], "accuracy": [0.09060890227556229, 0.09549596905708313, 0.09338264167308807, 0.09298639744520187, 0.09932637959718704, 0.08915598690509796], "val_loss": [1.9736730711800712, 1.9736925533839635, 1.9738271577017648, 1.97369384765625, 1.973658766065325, 1.9736828804016113], "val_accuracy": [0.10400000214576721, 0.0976666659116745, 0.0976666659116745, 0.10000000149011612, 0.0976666659116745, 0.09733333438634872]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 8, 1, 0, 5, 2, 1, 8, 0, 5, 9, 2, 9, 3, 6, 6, 9, 5, 0, 2, 8, 2, 6, 2, 8, 4], [2, 0, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 41, 35, 44, 70, 79, 53, 52, 44], [1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 4, 3, 8, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 1, 3, 1, 0, 2, 1, 3, 0, 0], [95, 17, 23, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 6, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 5, 2, 1, 12, 12, 7, 5, 2, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.negative(tf.math.square(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), alpha))))))), tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.divide_no_nan(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09760929644107819, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 6, 1, 0, 5, 2, 1, 8, 0, 4, 9, 2, 9, 3, 6, 6, 9, 5, 0, 2, 8, 2, 0, 2, 8, 4], [1, 1, 2, 2, 2, 2, 1, 0, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 41, 35, 44, 70, 79, 53, 52, 44], [1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 4, 9, 8, 4, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 0, 3, 2, 1, 3, 0, 0], [77, 73, 93, 84, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [18, 25, 50, 71, 34]], "fitness": -0.09942857176065445, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 4, 0, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.303817118950933, 2.306279436944577, 2.312987982872502, 2.3204116561173165, 2.3274484608135895, 2.343577185579027, 2.358371635485382, 2.37905276242091, 2.411000828213302, 2.439226307621438, 2.476987878140394, 2.5263811400411877, 2.585697688163311, 2.642590202218931, 2.720672408335591, 2.7800844442480668, 2.8678078881942555, 2.952312669481946, 3.0546940004726397, 3.166469594097377, 3.2530580076795323, 3.386734872997366], "accuracy": [0.09021265059709549, 0.08928807079792023, 0.09100515395402908, 0.08440100401639938, 0.09140139818191528, 0.0944393053650856, 0.09087307006120682, 0.09536388516426086, 0.09576013684272766, 0.09602430462837219, 0.09879804402589798, 0.09800554811954498, 0.09813763201236725, 0.1002509593963623, 0.0944393053650856, 0.10091137140989304, 0.1010434553027153, 0.0948355570435524, 0.09708096832036972, 0.09972262382507324, 0.10170386731624603, 0.09932637959718704], "val_loss": [1.9722402436392648, 1.974264689854213, 1.9763295309884208, 1.978799547467913, 1.9830296380179269, 1.9896323340279716, 1.9986160142081124, 2.0099246161324635, 2.0237244878496443, 2.0402612004961287, 2.059766020093645, 2.082486016409738, 2.1086839267185757, 2.138610703604562, 2.1725216593061174, 2.2106287138802663, 2.2531488282339915, 2.3002973965236118, 2.3522654260907854, 2.40922280720302, 2.471290111541748, 2.5386050769260953], "val_accuracy": [0.024000000208616257, 0.029666665941476822, 0.052666667848825455, 0.07800000160932541, 0.09099999815225601, 0.0963333323597908, 0.09666666388511658, 0.09600000083446503, 0.0976666659116745, 0.09866666793823242, 0.0989999994635582, 0.09866666793823242, 0.0989999994635582, 0.0989999994635582, 0.09966666996479034, 0.09966666996479034, 0.10000000149011612, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 4, 1, 4, 0, 8, 1, 8, 4, 4, 9, 2, 9, 3, 6, 6, 9, 2, 0, 2, 8, 2, 0, 2, 8, 4, 0, 4, 9, 1, 1, 9, 3, 2, 2, 4, 9], [3, 0, 2, 0, 2, 2, 1, 0, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [17, 41, 35, 13, 70, 79, 53, 52, 44, 19, 93, 41, 13], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 4, 1, 8, 4, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 1, 3, 1, 0, 2, 1, 3, 0, 0], [47, 33, 93, 84, 91, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [7, 3], [], [1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1], [0, 3, 4, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [50, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 5, 5, 2, 3, 1, 3, 3, 1, 2, 0, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(grad, tf.math.pow(tf.math.add(alpha, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3030593547964644, 2.3023767841333065, 2.303124456042863, 2.30295115921082, 2.3026007700904865, 2.302823596359039], "accuracy": [0.09100515395402908, 0.0878351628780365, 0.0936468094587326, 0.0874389111995697, 0.09219389408826828, 0.09060890227556229], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [6, 8, 1, 4, 5, 2, 1, 8, 0, 3, 9, 2, 9, 3, 6, 6, 1, 8, 0, 2, 8, 2, 0, 2, 8, 4], [2, 2, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 41, 35, 44, 70, 79, 53, 52, 44], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 3, 6, 6, 4, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 0, 0, 0, 2, 1, 3, 0, 0], [95, 33, 93, 84, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 38, 38, 25, 13, 6, 13, 13, 7, 6, 5, 1, 1, 0, 1, 0, 5, 3, 2, 0], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.pow(tf.math.add(alpha, tf.math.square(grad)), tf.math.add(tf.math.add(alpha, grad), grad))))), tf.math.add(alpha, tf.math.subtract(tf.math.sqrt(tf.math.negative(tf.math.multiply(grad, tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))))), tf.math.add(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.subtract(tf.math.sqrt(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, grad))))), tf.math.negative(grad)))), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.multiply(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)))), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.sqrt(beta)))", "other_info": {"loss": [2.3030593547964644, 2.3023767841333065, 2.303124456042863, 2.30295115921082, 2.3026007700904865, 2.302823596359039], "accuracy": [0.09100515395402908, 0.0878351628780365, 0.0936468094587326, 0.0874389111995697, 0.09219389408826828, 0.09060890227556229], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}]