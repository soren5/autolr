[{"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 6, 6, 1, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 3, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 3, 6, 9], [3, 3, 3, 1], [45, 38]], "fitness": -0.8137142658233643, "mapping_values": [1, 3, 3, 1, 2, 1, 17, 17, 9, 8, 2, 1, 1, 0, 1, 0, 8, 5, 3, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, alpha)), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(sigma, sigma), sigma), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.046367117474029, 1.4673216792617916, 1.0546787111530247, 0.926860104887603, 0.8028491913067777, 0.7629254151486513, 0.7313241416815014, 0.6678399452443892, 0.696023648338799, 0.6596632249020566, 0.6703747950131158, 0.6053863870878702, 0.6089457546431769, 0.5665245093862851, 0.5867281795067637, 0.5526255855880251, 0.5356838311643302, 0.5464582311919715, 0.5144196096869225, 0.5119300960171823, 0.5291976253700735, 0.495446008080111, 0.49198711847411863, 0.4784645300342296, 0.4843688481763495, 0.45556448274646943, 0.458829027554457, 0.4445069804010201, 0.4690270607521222, 0.43321485009884336, 0.4390988710053829, 0.41767108206184644, 0.3955000540709782, 0.4085282242734277, 0.41544644333635733, 0.41015136752854786, 0.39600744614385736, 0.4074914272923306, 0.38517565875084264, 0.3847994427631528, 0.38752656257494233, 0.38209156876053746, 0.3606313704310659], "accuracy": [0.31726324558258057, 0.5145951509475708, 0.6292431354522705, 0.657508909702301, 0.6933034062385559, 0.7150970697402954, 0.722229540348053, 0.7464007139205933, 0.7376832365989685, 0.7497028112411499, 0.7423061728477478, 0.769911527633667, 0.7711002230644226, 0.7862898111343384, 0.7796856164932251, 0.7903843522071838, 0.7979130744934082, 0.7964601516723633, 0.8078193068504333, 0.8074230551719666, 0.7998943328857422, 0.8112534880638123, 0.813498854637146, 0.8212917447090149, 0.8177255392074585, 0.8309338092803955, 0.8278959393501282, 0.8360850811004639, 0.8238013386726379, 0.839519202709198, 0.8341038227081299, 0.844010055065155, 0.8548408150672913, 0.846387505531311, 0.8459912538528442, 0.8498216867446899, 0.8514066934585571, 0.8495575189590454, 0.857218325138092, 0.8553691506385803, 0.8544445633888245, 0.857218325138092, 0.8665962219238281], "val_loss": [1.509890045438494, 0.8523410047803607, 0.6973650966371808, 0.5907351630074638, 0.6215802942003522, 0.5761998721531459, 0.5534623861312866, 0.5519106388092041, 0.5815914017813546, 0.5840072802134922, 0.48404501165662495, 0.47194697175707134, 0.4605202504566738, 0.5138604130063739, 0.4846014976501465, 0.44889436449323383, 0.4377315810748509, 0.4223222051348005, 0.469085693359375, 0.42096581629344393, 0.43665811845234465, 0.39941392626081196, 0.4342706288610186, 0.42841256516320364, 0.3851305161203657, 0.39214426279067993, 0.3903435894421169, 0.4874082974025181, 0.3852490356990269, 0.4008370041847229, 0.36982268946511404, 0.3830616559301104, 0.35174345118658884, 0.36626763003213064, 0.3776981064251491, 0.3802834834371294, 0.38904293945857454, 0.3492822732244219, 0.39660491262163433, 0.3517040950911386, 0.3546742626598903, 0.3696207915033613, 0.3739221436636789], "val_accuracy": [0.5, 0.6623333096504211, 0.6823333501815796, 0.734666645526886, 0.7239999771118164, 0.746999979019165, 0.7483333349227905, 0.7553333044052124, 0.7179999947547913, 0.7200000286102295, 0.7956666946411133, 0.7910000085830688, 0.8073333501815796, 0.7749999761581421, 0.7853333353996277, 0.8050000071525574, 0.8153333067893982, 0.8243333101272583, 0.7820000052452087, 0.8230000138282776, 0.8056666851043701, 0.8276666402816772, 0.8080000281333923, 0.8066666722297668, 0.8383333086967468, 0.8303333520889282, 0.8416666388511658, 0.7863333225250244, 0.8393333554267883, 0.8209999799728394, 0.8460000157356262, 0.8349999785423279, 0.8553333282470703, 0.8410000205039978, 0.840666651725769, 0.8379999995231628, 0.8289999961853027, 0.859666645526886, 0.8276666402816772, 0.8486666679382324, 0.8539999723434448, 0.8349999785423279, 0.8423333168029785]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [2, 6, 4, 9], [2, 3, 2, 3], [74, 57, 46], [1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1], [2, 2, 1, 1, 1, 5, 1, 1, 2, 1, 4, 2, 8, 1, 1, 8, 9, 0, 1], [3, 3, 3, 2, 2, 3, 3, 2, 3, 0, 1, 0, 3, 1], [94, 82, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [0, 0], [85], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [3, 3, 2, 8, 5, 5, 5, 2, 1, 8, 1, 2, 7, 4, 3, 9, 1, 5], [3, 0, 1, 1], [29, 38]], "fitness": -0.5834285616874695, "mapping_values": [1, 3, 3, 1, 2, 0, 33, 33, 19, 14, 3, 1, 1, 0, 1, 1, 7, 3, 4, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, grad))), tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.math.square(tf.math.add(beta, beta)))))), tf.math.subtract(tf.math.subtract(tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, beta), grad)), tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, beta)))), tf.math.sqrt(tf.math.subtract(tf.math.subtract(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)))), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.negative(alpha))), tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.subtract(grad, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.99232587e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.multiply(tf.math.add(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), alpha), alpha))", "other_info": {"loss": [2.2741201533271087, 2.1361306787182737, 1.8658846622570835, NaN, NaN, NaN, NaN], "accuracy": [0.15691454708576202, 0.30960243940353394, 0.37564390897750854, 0.13036586344242096, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.8882312774658203, 1.6452960286821638, 1.3076446056365967, NaN, NaN, NaN, NaN], "val_accuracy": [0.4099999964237213, 0.5923333168029785, 0.5386666655540466, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0], [7, 6, 4, 9], [2, 3, 2, 3], [63, 57], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 1, 5, 5, 5, 1, 1, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 0, 0, 1, 3, 3, 0], [17, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [2], [], [0, 1, 0, 0, 1, 1, 1, 0, 1, 0], [1, 3, 8, 8, 5, 5, 5, 2, 1, 8, 1, 2, 7, 4, 3, 9, 1, 5], [3, 2, 1, 1], [29, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 12, 12, 7, 5, 1, 1, 1, 0, 1, 0, 6, 3, 3, 0], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad))))))), grad)), tf.math.add(beta, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(tf.math.sqrt(beta), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 2, 2, 3], [44, 57], [1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1], [1, 2, 6, 6, 1, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 3, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [2], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 3, 1, 9], [3, 3, 3, 1], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 15, 15, 8, 7, 2, 1, 1, 0, 1, 0, 8, 5, 3, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(beta, grad)), tf.math.subtract(tf.math.subtract(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), alpha))), tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.subtract(sigma, sigma), sigma), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 1, 2, 3], [44, 57, 63, 98, 28], [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1], [2, 5, 0, 1, 3, 2, 2, 5, 2, 1, 8, 3, 5, 1, 1, 8, 8, 0], [3, 3, 3, 2, 0, 3, 0, 2, 3, 3, 1], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0, 1, 1], [1, 0, 1], [3, 3], [4], [19], [1, 1, 1, 0, 1, 0, 1, 1, 1, 0], [0, 3, 3, 6, 3, 1, 1, 6, 9, 8, 5, 4, 7, 7, 0, 3, 5], [3, 3, 3, 1], [10, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 5, 5, 3, 2, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.square(tf.math.negative(tf.math.add(beta, grad))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08506141602993011, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [2, 6, 4, 9], [0, 3, 2, 3], [44, 57], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 6, 6, 1, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 3, 0], [42, 6, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [9, 3, 3, 6, 9], [3, 3, 3, 1], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3027980179283456, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [9, 6, 4, 9], [0, 3, 2, 3], [44, 57], [1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [5, 9, 6, 6, 1, 2, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 3, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0], [0, 3, 9, 0, 9], [3, 3, 3, 1], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 1, 0, 1, 2, 2, 2, 0, 1, 1, 1, 0, 1, 0, 5, 4, 1, 1], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.square(tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.math.negative(sigma)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06749438494443893, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0], [7, 2, 4, 9], [0, 3, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1], [1, 2, 1, 1, 1, 5, 1, 1, 2, 4, 4, 9, 8, 1, 1, 8, 9, 0], [2, 3, 3, 2, 0, 3, 0, 2, 3, 0, 1], [94, 82, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3, 4], [4], [85], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [0, 3, 3, 6, 3, 1, 1, 6, 9, 8, 5, 4, 7, 7, 0, 3, 5], [2, 0, 0, 1, 2, 1, 2, 2, 0, 3, 1], [63, 38, 24, 18]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 2, 22, 22, 11, 11, 3, 1, 1, 0, 1, 0, 18, 11, 7, 3], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.subtract(beta, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.add(beta, grad)), beta))), tf.math.subtract(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), beta)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), alpha))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(beta, tf.math.multiply(tf.constant(9.38616893e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.math.subtract(alpha, tf.math.divide_no_nan(tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32), beta))))), tf.math.sqrt(alpha)), tf.math.square(beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 1, 2, 3], [44, 57, 63, 98, 28], [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [2, 5, 6, 1, 3, 2, 2, 5, 2, 1, 0, 3, 8, 1, 1, 8, 9, 0], [4, 3, 3, 1, 0, 3, 1, 3, 3, 0, 0], [94, 82, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [0], [19], [1, 1, 1, 0, 1, 0, 1, 1, 1, 0], [0, 3, 3, 6, 9], [2, 3, 3, 1], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 4, 4, 2, 2, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.square(grad), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08440100401639938, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [1, 0, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [2, 2, 3, 6, 6, 8, 2, 4, 4, 1, 4, 9, 8, 1, 1, 8, 9, 0], [5, 4, 4, 3, 0, 1, 1, 3, 3, 0], [82, 65, 43, 84, 1, 78], [0, 0, 0, 1, 0, 1, 1], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1], [0, 3, 3, 6, 3, 1, 1, 6, 9, 8, 5, 4, 6, 7, 0, 3, 5], [3, 3, 0, 1, 3, 0, 3, 0, 1, 1, 0, 3, 0, 0, 1, 1, 2, 3, 3, 0], [12, 17, 58, 18, 77]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 18, 18, 9, 9, 1, 1, 1, 0, 1, 0, 17, 10, 7, 3], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.math.multiply(grad, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad)))), tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))))), alpha)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), grad)))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(sigma, tf.math.multiply(sigma, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32))), alpha), tf.math.subtract(tf.math.subtract(tf.math.divide_no_nan(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), sigma), tf.math.sqrt(tf.constant(8.47764177e-01, shape=shape, dtype=tf.float32))), sigma)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10157178342342377, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 0, 1, 0], [3, 6, 4, 9], [0, 3, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1], [1, 0, 6, 6, 1, 4, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 3, 3, 3, 3, 0], [42, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1], [0, 3, 3, 6, 9, 4, 2], [3, 3, 3, 1, 2], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 6, 6, 3, 3, 0, 1, 1, 0, 1, 0, 12, 7, 5, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.negative(grad)), tf.math.divide_no_nan(grad, tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(sigma, sigma), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), tf.math.pow(sigma, tf.math.add(alpha, beta))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [2, 6, 4, 9], [0, 3, 2, 3], [44, 57], [0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [4, 2, 3, 6, 8, 1, 9, 4, 8, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 3, 3, 3, 2, 1, 1, 3, 0, 0], [9, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [47], [0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1], [3, 3, 2, 6, 3, 5, 5, 7, 4, 9, 8, 3], [1, 3, 3, 1, 3, 0, 1], [12, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 10, 10, 5, 5, 0, 1, 1, 0, 1, 0, 15, 8, 7, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.divide_no_nan(beta, tf.math.add(beta, grad)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))), tf.math.add(beta, grad)), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(sigma, sigma)), tf.math.multiply(alpha, sigma)), tf.math.square(tf.math.square(tf.math.add(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32), alpha))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09628847241401672, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [44, 57], [1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1], [1, 2, 6, 6, 1, 1, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 3, 3, 1, 3, 1, 1, 3, 3, 0], [42, 79, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [0, 3, 1, 6, 9], [3, 3, 0, 1], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 19, 19, 10, 9, 1, 1, 1, 0, 1, 0, 8, 5, 3, 2], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, alpha)), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad))), tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), alpha)), tf.math.add(beta, grad)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.subtract(tf.math.divide_no_nan(sigma, sigma), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [329412.0354443337, 6177933.800554749, 27929483.447893277, 79412464.6033549, 170801484.4453837, 311414416.82208425], "accuracy": [0.09655263274908066, 0.09747721254825592, 0.10447761416435242, 0.1010434553027153, 0.10038304328918457, 0.10711926966905594], "val_loss": [1225480.25, 9762186.0, 32902173.714285713, 77937460.57142857, 152160566.85714287, 262863177.14285713], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 1, 0], [2, 6, 4, 9], [0, 3, 2, 3], [44, 57], [1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 2, 6, 6, 1, 1, 0, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 0, 1, 1, 3, 3, 0], [26, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 0, 0, 1, 1, 1, 1, 0], [0, 3, 3, 6, 9], [2, 3, 1, 1], [12, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 2, 18, 18, 9, 9, 1, 1, 1, 0, 1, 0, 8, 5, 3, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad)), tf.math.negative(tf.math.add(beta, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), grad)))))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32), beta), sigma), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [9, 6, 4, 9], [0, 3, 2, 3], [87, 57], [0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1], [5, 9, 6, 6, 1, 2, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 2, 2, 3, 3, 2, 3, 0], [26, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0], [0, 3, 4, 4, 9], [3, 3, 3, 1, 0], [45, 38]], "fitness": -0.08485714346170425, "mapping_values": [1, 1, 1, 1, 0, 1, 2, 2, 2, 0, 1, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, sigma))", "other_info": {"loss": [2.3046627546644736, 2.3055487397387515, 2.3059663242903903, 2.309325357579977, 2.310437005193809, 2.3146676987295436, 2.318210451531451, 2.323673609587589, 2.3328892167501634, 2.3435519233812445, 2.374100144040772, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08717474341392517, 0.0886276587843895, 0.0866464152932167, 0.08136309683322906, 0.08096684515476227, 0.07845727354288101, 0.07436270266771317, 0.07885351777076721, 0.06907938420772552, 0.08057060092687607, 0.080042265355587, 0.09893012791872025, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9718273026602608, 1.9732892853873116, 1.9748973165239607, 1.9770683561052596, 1.9794645990644182, 1.9820325715201241, 1.9851249286106654, 1.9890111514500208, 1.9952903475080217, 2.0082409722464427, 2.06120879309518, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.032999999821186066, 0.03099999949336052, 0.03133333474397659, 0.02800000086426735, 0.030666666105389595, 0.03633333370089531, 0.0430000014603138, 0.05900000035762787, 0.07766667008399963, 0.0963333323597908, 0.10000000149011612, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [1, 0, 1, 1, 0, 1, 0], [7, 6, 8, 9], [0, 3, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1], [2, 5, 6, 1, 3, 2, 4, 5, 2, 1, 0, 3, 8, 1, 1, 8, 9, 0], [3, 1, 3, 1, 0, 3, 1, 3, 3, 0, 0], [12, 71, 43, 84, 1, 78], [0, 0, 0, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [0], [24], [1, 1, 1, 0, 1, 0, 1, 1, 1, 0], [0, 3, 3, 6, 9, 1, 5, 3, 7, 1, 4, 3, 3, 3, 2, 6, 8, 4, 7, 6, 3, 3, 5, 6, 2, 0, 5], [3, 3, 3, 1], [10, 38]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 6, 4, 3, 1, 1, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), sigma)), tf.math.add(sigma, tf.math.negative(sigma)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.304021071417772, 2.3033013486780307, 2.3018772880461995, 2.302938699879745, 2.3014947824222443, 2.3022399149267287], "accuracy": [0.08902391046285629, 0.09206181764602661, 0.09285431355237961, 0.0882314071059227, 0.09496764093637466, 0.09008057415485382], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 0, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [44, 57], [0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1], [5, 2, 0, 6, 9, 0, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 3, 0], [42, 71, 43, 84, 1, 78], [1, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 0, 1, 1, 0, 0, 1, 0], [0, 3, 3, 6, 9, 9], [3, 2, 1, 1], [45, 38]], "fitness": -0.03999999910593033, "mapping_values": [1, 7, 7, 4, 3, 2, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 8, 6, 2, 2], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(sigma, beta), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.304021071417772, 2.3033013486780307, 2.3018772880461995, 2.302938699879745, 2.3014947824222443, 2.3022399149267287], "accuracy": [0.08902391046285629, 0.09206181764602661, 0.09285431355237961, 0.0882314071059227, 0.09496764093637466, 0.09008057415485382], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [3, 0, 2, 3], [21, 57], [1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [1, 9, 2, 6, 6, 5, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 1, 0, 1, 1, 3, 3, 0], [94, 82, 43, 84, 1, 78], [1, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [47], [0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1], [3, 3, 4, 8, 5, 5, 5, 2, 1, 8, 1, 2, 7, 4, 3, 9, 1, 5], [3, 3, 0, 1, 1, 1, 1], [98, 38]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 3, 2, 2, 1, 0, 0, 0, 0, 7, 3, 4, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.multiply(sigma, sigma), tf.math.pow(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), alpha))", "other_info": {"loss": [2.304021071417772, 2.3033013486780307, 2.3018772880461995, 2.302938699879745, 2.3014947824222443, 2.3022399149267287], "accuracy": [0.08902391046285629, 0.09206181764602661, 0.09285431355237961, 0.0882314071059227, 0.09496764093637466, 0.09008057415485382], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 1, 2, 3], [44, 57], [0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1], [2, 5, 6, 1, 3, 2, 2, 5, 2, 1, 0, 3, 8, 1, 1, 8, 9, 0], [2, 3, 3, 3, 2, 1, 1, 3, 0, 0], [42, 71, 43, 84, 1, 78], [0, 0, 1, 1, 0], [0, 0, 1, 1], [3, 3], [0, 3], [47], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1], [0, 3, 3, 6, 9], [3, 3, 0, 1, 1, 1, 2], [12, 38]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1, 1, 8, 5, 3, 2], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(sigma, sigma)), tf.math.add(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(sigma, tf.math.divide_no_nan(sigma, tf.constant(5.12469082e-04, shape=shape, dtype=tf.float32))), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.304021071417772, 2.3033013486780307, 2.3018772880461995, 2.302938699879745, 2.3014947824222443, 2.3022399149267287], "accuracy": [0.08902391046285629, 0.09206181764602661, 0.09285431355237961, 0.0882314071059227, 0.09496764093637466, 0.09008057415485382], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [9, 6, 4, 9], [0, 3, 2, 3], [44, 57], [0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [5, 9, 6, 6, 1, 2, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 3, 3, 0, 1, 1, 3, 3, 0], [94, 82, 43, 84, 1, 78], [0, 0, 0, 1, 0, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1], [3, 3, 4, 3], [4, 5], [], [0, 0, 0, 1, 0, 1, 1, 1, 1, 0], [0, 3, 3, 4, 9], [3, 3, 3, 1, 0], [45, 38]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 1, 0, 1, 2, 2, 2, 0, 1, 9, 6, 4, 2, 0, 8, 4, 4, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), tf.math.add(sigma, tf.math.pow(tf.math.add(sigma, tf.math.multiply(sigma, tf.math.add(sigma, grad))), sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(sigma, tf.math.pow(sigma, sigma)), alpha))", "other_info": {"loss": [2.304021071417772, 2.3033013486780307, 2.3018772880461995, 2.302938699879745, 2.3014947824222443, 2.3022399149267287], "accuracy": [0.08902391046285629, 0.09206181764602661, 0.09285431355237961, 0.0882314071059227, 0.09496764093637466, 0.09008057415485382], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}]