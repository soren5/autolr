[{"genotype": [[0], [1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 5, 9, 9, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 0, 2, 2, 2, 1, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 65, 59, 9, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [36, 25, 50, 71, 34]], "fitness": -0.7785714268684387, "mapping_values": [1, 7, 7, 6, 1, 2, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))))), grad), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.250102611722381, 1.9663503637970117, 1.4501770155037148, 1.162379437654309, 1.01159986710709, 0.9464771295771576, 0.8979547872220237, 0.8554151872633754, 0.8198870803386843, 0.7816284202061876, 0.783986380181812, 0.7481759693786028, 0.742051546647013, 0.7212891599852034, 0.709882376373814, 0.6999497284994401, 0.7014131111444311, 0.6848615442347674, 0.6724127534988015, 0.6669959172817065, 0.6529533854013956, 0.6555732071612254, 0.6384291070138364, 0.6386758888307863, 0.6297483204252228, 0.6264373338800364, 0.6197659503577518, 0.6232082497615383], "accuracy": [0.2114647924900055, 0.4105137884616852, 0.5190860033035278, 0.5921278595924377, 0.6446968913078308, 0.6625280380249023, 0.684982180595398, 0.6939638257026672, 0.7010962963104248, 0.7128516435623169, 0.7125874757766724, 0.7265883088111877, 0.7211728692054749, 0.7304186820983887, 0.7366266250610352, 0.7434949278831482, 0.7376832365989685, 0.7430986762046814, 0.7520803213119507, 0.7490423917770386, 0.76106196641922, 0.752740740776062, 0.7663452625274658, 0.7618544697761536, 0.7687227725982666, 0.7666094303131104, 0.7733456492424011, 0.7684586048126221], "val_loss": [1.8176185744149345, 1.3268579074314661, 0.9033890451703753, 0.752734729221889, 0.6837872607367379, 0.7006223712648664, 0.6259618486676898, 0.5886610235486712, 0.5676862342017037, 0.563029306275504, 0.5495930910110474, 0.5475183555058071, 0.5215960570744106, 0.519634655543736, 0.5157099451337542, 0.5120690209524972, 0.5267342158726284, 0.4972397599901472, 0.5143796375819615, 0.49268421104976107, 0.4823901653289795, 0.48141729831695557, 0.4693906988416399, 0.4817415646144322, 0.48071578570774626, 0.4777154581887381, 0.46718290873936247, 0.46506515571049284], "val_accuracy": [0.4663333296775818, 0.5776666402816772, 0.6636666655540466, 0.6859999895095825, 0.7166666388511658, 0.6966666579246521, 0.7086666822433472, 0.7386666536331177, 0.7636666893959045, 0.762666642665863, 0.762333333492279, 0.7680000066757202, 0.7806666493415833, 0.7823333144187927, 0.7749999761581421, 0.7793333530426025, 0.7553333044052124, 0.7986666560173035, 0.7696666717529297, 0.7793333530426025, 0.7933333516120911, 0.7860000133514404, 0.8059999942779541, 0.781000018119812, 0.796999990940094, 0.7976666688919067, 0.7896666526794434, 0.8003333210945129]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 2, 9, 4, 5, 2, 0, 4, 9, 5, 1, 9, 1, 3, 3, 8, 0, 8, 5, 2, 0, 2, 8, 8], [2, 2, 0, 2, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 65, 59, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.7765714526176453, "mapping_values": [1, 35, 35, 25, 10, 6, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 53, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), tf.math.pow(tf.math.square(tf.math.add(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.math.multiply(tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.square(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), grad)), tf.math.add(alpha, grad)))), grad), grad)))))))))))), tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2607041313474707, 2.067708392043108, 1.6420504483627432, 1.2868192910108867, 1.0934697172314563, 1.006899517115632, 0.9401841564673505, 0.8962354442352443, 0.8602345052916124, 0.8178596289371062, 0.8110186158547926, 0.7786528340514625, 0.7685373502006904, 0.7471714711712021, 0.7400228860292924, 0.7271779218149569, 0.7251627223917743, 0.7099440532385035, 0.6921487788892048, 0.6880060032437175, 0.6766910880091578, 0.6771379602646642, 0.6610655836409676, 0.6585243322971773, 0.650052325277753, 0.6468100530706644, 0.6413836180730786, 0.6418128929684868], "accuracy": [0.1938977688550949, 0.3777572214603424, 0.4810461103916168, 0.5604279637336731, 0.6221106648445129, 0.6483951807022095, 0.6753401160240173, 0.6799629926681519, 0.6911900639533997, 0.7057191729545593, 0.7046625018119812, 0.720380425453186, 0.718399167060852, 0.7219653725624084, 0.7253995537757874, 0.7317395210266113, 0.7316074371337891, 0.7358341217041016, 0.7450799345970154, 0.7428345084190369, 0.752740740776062, 0.7477215528488159, 0.7597411274909973, 0.7553823590278625, 0.7644960880279541, 0.7597411274909973, 0.7626469135284424, 0.7638356685638428], "val_loss": [1.8557968139648438, 1.5265875203268868, 1.0590907164982386, 0.8303024939128331, 0.7439345291682652, 0.682963524545942, 0.6438647508621216, 0.6141367469515119, 0.58844108240945, 0.5751303604670933, 0.5671040330614362, 0.55778021471841, 0.5378121818814959, 0.534273624420166, 0.527474011693682, 0.5219260283878872, 0.5403243473597935, 0.5082596029554095, 0.5156699078423637, 0.5025120973587036, 0.4968275172369821, 0.493048940386091, 0.4792332138334002, 0.48504635265895296, 0.4859964847564697, 0.487220219203404, 0.4749499559402466, 0.47335217680249897], "val_accuracy": [0.4449999928474426, 0.5600000023841858, 0.6396666765213013, 0.6830000281333923, 0.6926666498184204, 0.7086666822433472, 0.7133333086967468, 0.731333315372467, 0.7596666812896729, 0.7603333592414856, 0.7606666684150696, 0.762666642665863, 0.7730000019073486, 0.7746666669845581, 0.7720000147819519, 0.7766666412353516, 0.7506666779518127, 0.7943333387374878, 0.7753333449363708, 0.7739999890327454, 0.7829999923706055, 0.7786666750907898, 0.8009999990463257, 0.7850000262260437, 0.7963333129882812, 0.7906666398048401, 0.7876666784286499, 0.7960000038146973]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 1, 5, 2, 9, 4, 5, 2, 0, 4, 9, 5, 1, 8, 1, 3, 3, 8, 0, 8, 5, 2, 0, 2, 8, 8], [2, 2, 0, 2, 2, 2, 2, 2, 2, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 65, 59, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.7765714526176453, "mapping_values": [1, 35, 35, 24, 11, 4, 2, 2, 1, 1, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))), grad), tf.math.pow(tf.math.square(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.sqrt(grad)))), tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))), tf.math.add(alpha, grad)))))), grad)), grad))), tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))))))), grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2607041313474707, 2.067708392043108, 1.6420504483627432, 1.2868192910108867, 1.0934697172314563, 1.006899517115632, 0.9401841564673505, 0.8962354442352443, 0.8602345052916124, 0.8178596289371062, 0.8110186158547926, 0.7786528340514625, 0.7685373502006904, 0.7471714711712021, 0.7400228860292924, 0.7271779218149569, 0.7251627223917743, 0.7099440532385035, 0.6921487788892048, 0.6880060032437175, 0.6766910880091578, 0.6771379602646642, 0.6610655836409676, 0.6585243322971773, 0.650052325277753, 0.6468100530706644, 0.6413836180730786, 0.6418128929684868], "accuracy": [0.1938977688550949, 0.3777572214603424, 0.4810461103916168, 0.5604279637336731, 0.6221106648445129, 0.6483951807022095, 0.6753401160240173, 0.6799629926681519, 0.6911900639533997, 0.7057191729545593, 0.7046625018119812, 0.720380425453186, 0.718399167060852, 0.7219653725624084, 0.7253995537757874, 0.7317395210266113, 0.7316074371337891, 0.7358341217041016, 0.7450799345970154, 0.7428345084190369, 0.752740740776062, 0.7477215528488159, 0.7597411274909973, 0.7553823590278625, 0.7644960880279541, 0.7597411274909973, 0.7626469135284424, 0.7638356685638428], "val_loss": [1.8557968139648438, 1.5265875203268868, 1.0590907164982386, 0.8303024939128331, 0.7439345291682652, 0.682963524545942, 0.6438647508621216, 0.6141367469515119, 0.58844108240945, 0.5751303604670933, 0.5671040330614362, 0.55778021471841, 0.5378121818814959, 0.534273624420166, 0.527474011693682, 0.5219260283878872, 0.5403243473597935, 0.5082596029554095, 0.5156699078423637, 0.5025120973587036, 0.4968275172369821, 0.493048940386091, 0.4792332138334002, 0.48504635265895296, 0.4859964847564697, 0.487220219203404, 0.4749499559402466, 0.47335217680249897], "val_accuracy": [0.4449999928474426, 0.5600000023841858, 0.6396666765213013, 0.6830000281333923, 0.6926666498184204, 0.7086666822433472, 0.7133333086967468, 0.731333315372467, 0.7596666812896729, 0.7603333592414856, 0.7606666684150696, 0.762666642665863, 0.7730000019073486, 0.7746666669845581, 0.7720000147819519, 0.7766666412353516, 0.7506666779518127, 0.7943333387374878, 0.7753333449363708, 0.7739999890327454, 0.7829999923706055, 0.7786666750907898, 0.8009999990463257, 0.7850000262260437, 0.7963333129882812, 0.7906666398048401, 0.7876666784286499, 0.7960000038146973]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 4, 9, 4, 5, 2, 0, 4, 9, 5, 1, 9, 1, 3, 3, 8, 0, 6, 5, 2, 0, 2, 8, 8], [2, 2, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 65, 59, 52, 8, 79, 86, 52, 44], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.7765714526176453, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(grad, tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2607041313474707, 2.067708392043108, 1.6420504483627432, 1.2868192910108867, 1.0934697172314563, 1.006899517115632, 0.9401841564673505, 0.8962354442352443, 0.8602345052916124, 0.8178596289371062, 0.8110186158547926, 0.7786528340514625, 0.7685373502006904, 0.7471714711712021, 0.7400228860292924, 0.7271779218149569, 0.7251627223917743, 0.7099440532385035, 0.6921487788892048, 0.6880060032437175, 0.6766910880091578, 0.6771379602646642, 0.6610655836409676, 0.6585243322971773, 0.650052325277753, 0.6468100530706644, 0.6413836180730786, 0.6418128929684868], "accuracy": [0.1938977688550949, 0.3777572214603424, 0.4810461103916168, 0.5604279637336731, 0.6221106648445129, 0.6483951807022095, 0.6753401160240173, 0.6799629926681519, 0.6911900639533997, 0.7057191729545593, 0.7046625018119812, 0.720380425453186, 0.718399167060852, 0.7219653725624084, 0.7253995537757874, 0.7317395210266113, 0.7316074371337891, 0.7358341217041016, 0.7450799345970154, 0.7428345084190369, 0.752740740776062, 0.7477215528488159, 0.7597411274909973, 0.7553823590278625, 0.7644960880279541, 0.7597411274909973, 0.7626469135284424, 0.7638356685638428], "val_loss": [1.8557968139648438, 1.5265875203268868, 1.0590907164982386, 0.8303024939128331, 0.7439345291682652, 0.682963524545942, 0.6438647508621216, 0.6141367469515119, 0.58844108240945, 0.5751303604670933, 0.5671040330614362, 0.55778021471841, 0.5378121818814959, 0.534273624420166, 0.527474011693682, 0.5219260283878872, 0.5403243473597935, 0.5082596029554095, 0.5156699078423637, 0.5025120973587036, 0.4968275172369821, 0.493048940386091, 0.4792332138334002, 0.48504635265895296, 0.4859964847564697, 0.487220219203404, 0.4749499559402466, 0.47335217680249897], "val_accuracy": [0.4449999928474426, 0.5600000023841858, 0.6396666765213013, 0.6830000281333923, 0.6926666498184204, 0.7086666822433472, 0.7133333086967468, 0.731333315372467, 0.7596666812896729, 0.7603333592414856, 0.7606666684150696, 0.762666642665863, 0.7730000019073486, 0.7746666669845581, 0.7720000147819519, 0.7766666412353516, 0.7506666779518127, 0.7943333387374878, 0.7753333449363708, 0.7739999890327454, 0.7829999923706055, 0.7786666750907898, 0.8009999990463257, 0.7850000262260437, 0.7963333129882812, 0.7906666398048401, 0.7876666784286499, 0.7960000038146973]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 9, 9, 4, 5, 2, 0, 4, 9, 5, 1, 9, 1, 3, 3, 8, 0, 6, 5, 2, 0, 2, 8, 8], [2, 2, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 65, 59, 52, 8, 79, 86, 52, 44], [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.4382857084274292, "mapping_values": [1, 6, 6, 4, 2, 1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.negative(tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2275438239750467, 2.3281114625735544, 2.1105868064369964, 2.0680399089362784, 2.418133505473063, 2.246520413226298, 2.368378024484818, 2.3025216696017043], "accuracy": [0.22837141156196594, 0.23154141008853912, 0.25941091775894165, 0.31541407108306885, 0.26020342111587524, 0.19019944965839386, 0.19574692845344543, 0.11042134463787079], "val_loss": [1.9505865233285087, 1.517021690096174, 1.5602144854409354, 4.087242262704032, 1.5477464880262102, 1.968341486794608, 1.9737776347569056, 1.9423913955688477], "val_accuracy": [0.22766666114330292, 0.3933333456516266, 0.4480000138282776, 0.10633333027362823, 0.4423333406448364, 0.13233333826065063, 0.09733333438634872, 0.23533333837985992]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 8, 0, 3, 6, 2, 0, 8, 4, 5, 2, 9, 8, 9, 2, 9, 8, 0, 5, 0, 2, 0, 2, 8, 8], [0, 2, 0, 2, 2, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 52, 27, 56, 8, 79, 86, 52, 44], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 0, 0, 2, 1, 3, 0, 0], [87, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 5, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [30, 25, 50, 71, 34]], "fitness": -0.43799999356269836, "mapping_values": [1, 14, 14, 8, 6, 2, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 3, 2, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(grad, tf.math.add(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))))))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.square(beta)))", "other_info": {"loss": [2.3464212191182043, 2.235826063307285, 2.2897417624361087, 2.3460458290496633, 2.304555439095629, 2.3031707252131604, 2.3031650248645805], "accuracy": [0.20803064107894897, 0.1760665625333786, 0.1698586642742157, 0.1310262829065323, 0.10408136248588562, 0.09496764093637466, 0.10091137140989304], "val_loss": [1.9729489598955428, 1.4454574584960938, 1.6006601878574915, 1.9754220417567663, 1.9740053585597448, 1.9737705503191267, 1.9736405781337194], "val_accuracy": [0.09700000286102295, 0.41733333468437195, 0.36500000953674316, 0.10233332961797714, 0.09966666996479034, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 1, 0, 1, 8, 2, 0, 8, 4, 5, 2, 9, 8, 9, 2, 9, 8, 0, 5, 0, 2, 0, 2, 8, 8], [0, 2, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 5, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [30, 25, 50, 71, 34]], "fitness": -0.41685715317726135, "mapping_values": [1, 13, 13, 7, 6, 3, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 4, 1, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(grad)))), tf.math.add(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32))), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.square(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), sigma))", "other_info": {"loss": [2.3033834750767883, 2.301840211012738, 2.299409800012901, 2.299886963575618, 2.297939184492668, 2.2974929178805006, 2.298195954279861, 2.2964987020136074, 2.295498522312697, 2.2941075697740025, 2.29432991133264, 2.2926576905923826, 2.2935303050167035, 2.2911555112675748, 2.29144272478643, 2.2919514001305425, 2.2901263297147376, 2.2886489549915727, 2.290646172879851, 2.2874391389135607, 2.285844180593716, 2.286105866413925, 2.2859848513658005, 2.2841710633038685, 2.284534078563256, 2.2824661386263383, 2.28161295104918, 2.2817606301497255, 2.280268813829695, 2.2803608356859266, 2.2797404501998995, 2.2778385285735365, 2.2771549362784222, 2.2773789537266307, 2.27492642282983, 2.275970379123126, 2.2753449470737683, 2.2733378992608477, 2.2755629930041485, 2.2710787112198614, 2.271416295552534, 2.2708557399351204, 2.2702843385554576, 2.269249200757941, 2.2687986078767444, 2.2674578393470846, 2.2677592843546606, 2.2658505729160856, 2.265805582439013, 2.263552232803276, 2.262562722546345, 2.262779673313216, 2.263804265143077, 2.260124984182434, 2.260858924082478, 2.2598411524851625, 2.258870993465433, 2.2587282391209187, 2.256641952951492, 2.256192330088456, 2.2551135416311783, 2.2537540710518753, 2.2516251038629553, 2.2544475555293957, 2.2525874622084476, 2.251818020897078, 2.2517240581542683, 2.2492800142156955, 2.2488150769504403, 2.2479346208190716, 2.2484194783014377, 2.247004063185164, 2.242953367016618, 2.2430412439606555, 2.2418844913368794, 2.2419669920380056, 2.241413005858585, 2.241476776955418, 2.2406037165236556, 2.237707245666369, 2.237760627998762, 2.235527655546455, 2.23528559405365, 2.23354395143486, 2.233592165491096, 2.232120163546829, 2.2311984876426867, 2.2297494815183496, 2.2297661984050277, 2.2280472529452506, 2.230032639591024, 2.2263589264962023, 2.2255195865636144, 2.225008298471824, 2.2242115810798886, 2.2218098956926733, 2.2223062946056062, 2.219775179420968, 2.217913039812968, 2.2175683472622905], "accuracy": [0.08849557489156723, 0.09047681838274002, 0.10051512718200684, 0.09787346422672272, 0.10210011899471283, 0.10091137140989304, 0.09893012791872025, 0.1072513535618782, 0.10685510188341141, 0.11266675591468811, 0.11345925182104111, 0.11557257920503616, 0.11636507511138916, 0.11359133571386337, 0.11332716792821884, 0.11174217611551285, 0.12059172987937927, 0.1302337795495987, 0.12468630075454712, 0.13300752639770508, 0.1336679458618164, 0.13538502156734467, 0.13181878626346588, 0.14053626358509064, 0.13881917297840118, 0.14278165996074677, 0.14212125539779663, 0.15110288560390472, 0.14898955821990967, 0.14595165848731995, 0.15400871634483337, 0.1508387327194214, 0.15281997621059418, 0.16193369030952454, 0.1620657742023468, 0.16180160641670227, 0.1592920422554016, 0.16695284843444824, 0.16193369030952454, 0.1666886806488037, 0.17131158709526062, 0.17091533541679382, 0.17580240964889526, 0.1740853190422058, 0.18055738508701324, 0.18372738361358643, 0.18042530119419098, 0.1868973672389984, 0.19152027368545532, 0.18518029153347015, 0.19680359959602356, 0.19521859288215637, 0.19363360106945038, 0.20261524617671967, 0.20684190094470978, 0.20195482671260834, 0.20155857503414154, 0.19970941543579102, 0.2044644057750702, 0.2098798006772995, 0.20644564926624298, 0.21503104269504547, 0.2176727056503296, 0.21172896027565002, 0.21740853786468506, 0.21740853786468506, 0.21701228618621826, 0.2230881005525589, 0.2285034954547882, 0.2285034954547882, 0.22559767961502075, 0.22903183102607727, 0.23986263573169708, 0.2479196935892105, 0.24514594674110413, 0.24607053399085999, 0.24342887103557587, 0.24422137439250946, 0.24382512271404266, 0.25558051466941833, 0.2550521790981293, 0.2495046854019165, 0.25016510486602783, 0.2607317268848419, 0.2635054886341095, 0.25742965936660767, 0.25676923990249634, 0.26799631118774414, 0.26403382420539856, 0.2607317268848419, 0.2623167335987091, 0.27327960729599, 0.2639017403125763, 0.27222296595573425, 0.26443007588386536, 0.27882710099220276, 0.28041210770606995, 0.2801479399204254, 0.2798837721347809, 0.2829216718673706], "val_loss": [1.9698726109095983, 1.9691484315054757, 1.968423639025007, 1.9676991190229143, 1.9669828414916992, 1.96625702721732, 1.9655329840523856, 1.9648190907069616, 1.964104516165597, 1.963388238634382, 1.962679045540946, 1.9619701249258858, 1.9612551416669572, 1.9605481284005302, 1.9598378453935896, 1.9591188430786133, 1.9584076745169503, 1.9576984814235143, 1.9569881984165736, 1.9562723296029227, 1.9555587768554688, 1.95484835760934, 1.9541361672537667, 1.9534309932163783, 1.9527151244027274, 1.952003342764718, 1.9512930597577776, 1.950580665043422, 1.9498645237513952, 1.949148314339774, 1.948434693472726, 1.9477115358625139, 1.94698395047869, 1.9462700571332658, 1.9455429485866003, 1.9448196547372, 1.9440908432006836, 1.943364075251988, 1.942636149270194, 1.941901615687779, 1.9411697387695312, 1.9404354776654924, 1.9396977424621582, 1.9389589173453194, 1.9382150513785226, 1.9374669619968958, 1.936713354928153, 1.9359574999128069, 1.935194424220494, 1.9344336645943778, 1.933671270098005, 1.9329051290239607, 1.9321412358965193, 1.9313625608171736, 1.9305943080357142, 1.9298125675746374, 1.9290226527622767, 1.928232261112758, 1.9274375098092216, 1.9266418729509627, 1.9258416039603097, 1.9250341824122839, 1.924220017024449, 1.923417023250035, 1.9226044246128626, 1.921788147517613, 1.920959540775844, 1.9201263700212752, 1.919295379093715, 1.918447766985212, 1.917602607182094, 1.916757311139788, 1.9158827236720495, 1.9150115421840124, 1.9141326631818498, 1.9132500376020158, 1.9123659815107072, 1.911473069872175, 1.9105826105390276, 1.909672464643206, 1.9087516920907157, 1.9078288759504045, 1.9069006102425712, 1.9059603554861886, 1.9050212587629045, 1.9040743282863073, 1.9031027385166712, 1.902132851736886, 1.9011686188834054, 1.9001810891287667, 1.899200780051095, 1.8981990814208984, 1.8971990176609583, 1.896195616040911, 1.8951733452933175, 1.8941452162606376, 1.8931210381644112, 1.8920819418770927, 1.8910314014979772, 1.8899685314723425], "val_accuracy": [0.04266666620969772, 0.04933333396911621, 0.05299999937415123, 0.058666665107011795, 0.06199999898672104, 0.06566666811704636, 0.07233333587646484, 0.07733333110809326, 0.08399999886751175, 0.09000000357627869, 0.09799999743700027, 0.1066666692495346, 0.1120000034570694, 0.11866666376590729, 0.1276666671037674, 0.1340000033378601, 0.14000000059604645, 0.1469999998807907, 0.15433333814144135, 0.1616666615009308, 0.1693333387374878, 0.17666666209697723, 0.18566666543483734, 0.19099999964237213, 0.1993333399295807, 0.20600000023841858, 0.2136666625738144, 0.2199999988079071, 0.22300000488758087, 0.22833333909511566, 0.2329999953508377, 0.2396666705608368, 0.24633333086967468, 0.2513333261013031, 0.25733333826065063, 0.2639999985694885, 0.27166667580604553, 0.2770000100135803, 0.2826666533946991, 0.2903333306312561, 0.2933333218097687, 0.2983333468437195, 0.30266666412353516, 0.3083333373069763, 0.3140000104904175, 0.31700000166893005, 0.32066667079925537, 0.3253333270549774, 0.3293333351612091, 0.33399999141693115, 0.33933332562446594, 0.34333333373069763, 0.3476666808128357, 0.35066667199134827, 0.35366666316986084, 0.3566666543483734, 0.359333336353302, 0.36033332347869873, 0.3630000054836273, 0.36399999260902405, 0.3659999966621399, 0.36766666173934937, 0.36899998784065247, 0.37166666984558105, 0.37433332204818726, 0.3773333430290222, 0.3776666522026062, 0.37933334708213806, 0.38100001215934753, 0.38333332538604736, 0.38333332538604736, 0.3843333423137665, 0.3866666555404663, 0.3893333375453949, 0.39100000262260437, 0.3933333456516266, 0.3946666717529297, 0.3959999978542328, 0.39800000190734863, 0.3996666669845581, 0.4009999930858612, 0.4020000100135803, 0.4046666622161865, 0.4050000011920929, 0.4059999883174896, 0.4073333442211151, 0.40933331847190857, 0.40966665744781494, 0.41200000047683716, 0.4129999876022339, 0.41466665267944336, 0.4156666696071625, 0.4169999957084656, 0.4183333218097687, 0.42233332991600037, 0.42399999499320984, 0.4266666769981384, 0.4259999990463257, 0.4286666810512543, 0.42899999022483826]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 4, 2, 3, 5, 2, 0, 4, 9, 5, 1, 9, 1, 3, 3, 8, 0, 6, 5, 2, 0, 2, 8, 8], [2, 0, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [28, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 5, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [30, 25, 50, 71, 34]], "fitness": -0.41685715317726135, "mapping_values": [1, 13, 13, 7, 6, 3, 2, 2, 1, 1, 1, 1, 1, 0, 1, 0, 5, 4, 1, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.multiply(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)))))))))), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.square(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), sigma))", "other_info": {"loss": [2.3033834750767883, 2.301840211012738, 2.299409800012901, 2.299886963575618, 2.297939184492668, 2.2974929178805006, 2.298195954279861, 2.2964987020136074, 2.295498522312697, 2.2941075697740025, 2.29432991133264, 2.2926576905923826, 2.2935303050167035, 2.2911555112675748, 2.29144272478643, 2.2919514001305425, 2.2901263297147376, 2.2886489549915727, 2.290646172879851, 2.2874391389135607, 2.285844180593716, 2.286105866413925, 2.2859848513658005, 2.2841710633038685, 2.284534078563256, 2.2824661386263383, 2.28161295104918, 2.2817606301497255, 2.280268813829695, 2.2803608356859266, 2.2797404501998995, 2.2778385285735365, 2.2771549362784222, 2.2773789537266307, 2.27492642282983, 2.275970379123126, 2.2753449470737683, 2.2733378992608477, 2.2755629930041485, 2.2710787112198614, 2.271416295552534, 2.2708557399351204, 2.2702843385554576, 2.269249200757941, 2.2687986078767444, 2.2674578393470846, 2.2677592843546606, 2.2658505729160856, 2.265805582439013, 2.263552232803276, 2.262562722546345, 2.262779673313216, 2.263804265143077, 2.260124984182434, 2.260858924082478, 2.2598411524851625, 2.258870993465433, 2.2587282391209187, 2.256641952951492, 2.256192330088456, 2.2551135416311783, 2.2537540710518753, 2.2516251038629553, 2.2544475555293957, 2.2525874622084476, 2.251818020897078, 2.2517240581542683, 2.2492800142156955, 2.2488150769504403, 2.2479346208190716, 2.2484194783014377, 2.247004063185164, 2.242953367016618, 2.2430412439606555, 2.2418844913368794, 2.2419669920380056, 2.241413005858585, 2.241476776955418, 2.2406037165236556, 2.237707245666369, 2.237760627998762, 2.235527655546455, 2.23528559405365, 2.23354395143486, 2.233592165491096, 2.232120163546829, 2.2311984876426867, 2.2297494815183496, 2.2297661984050277, 2.2280472529452506, 2.230032639591024, 2.2263589264962023, 2.2255195865636144, 2.225008298471824, 2.2242115810798886, 2.2218098956926733, 2.2223062946056062, 2.219775179420968, 2.217913039812968, 2.2175683472622905], "accuracy": [0.08849557489156723, 0.09047681838274002, 0.10051512718200684, 0.09787346422672272, 0.10210011899471283, 0.10091137140989304, 0.09893012791872025, 0.1072513535618782, 0.10685510188341141, 0.11266675591468811, 0.11345925182104111, 0.11557257920503616, 0.11636507511138916, 0.11359133571386337, 0.11332716792821884, 0.11174217611551285, 0.12059172987937927, 0.1302337795495987, 0.12468630075454712, 0.13300752639770508, 0.1336679458618164, 0.13538502156734467, 0.13181878626346588, 0.14053626358509064, 0.13881917297840118, 0.14278165996074677, 0.14212125539779663, 0.15110288560390472, 0.14898955821990967, 0.14595165848731995, 0.15400871634483337, 0.1508387327194214, 0.15281997621059418, 0.16193369030952454, 0.1620657742023468, 0.16180160641670227, 0.1592920422554016, 0.16695284843444824, 0.16193369030952454, 0.1666886806488037, 0.17131158709526062, 0.17091533541679382, 0.17580240964889526, 0.1740853190422058, 0.18055738508701324, 0.18372738361358643, 0.18042530119419098, 0.1868973672389984, 0.19152027368545532, 0.18518029153347015, 0.19680359959602356, 0.19521859288215637, 0.19363360106945038, 0.20261524617671967, 0.20684190094470978, 0.20195482671260834, 0.20155857503414154, 0.19970941543579102, 0.2044644057750702, 0.2098798006772995, 0.20644564926624298, 0.21503104269504547, 0.2176727056503296, 0.21172896027565002, 0.21740853786468506, 0.21740853786468506, 0.21701228618621826, 0.2230881005525589, 0.2285034954547882, 0.2285034954547882, 0.22559767961502075, 0.22903183102607727, 0.23986263573169708, 0.2479196935892105, 0.24514594674110413, 0.24607053399085999, 0.24342887103557587, 0.24422137439250946, 0.24382512271404266, 0.25558051466941833, 0.2550521790981293, 0.2495046854019165, 0.25016510486602783, 0.2607317268848419, 0.2635054886341095, 0.25742965936660767, 0.25676923990249634, 0.26799631118774414, 0.26403382420539856, 0.2607317268848419, 0.2623167335987091, 0.27327960729599, 0.2639017403125763, 0.27222296595573425, 0.26443007588386536, 0.27882710099220276, 0.28041210770606995, 0.2801479399204254, 0.2798837721347809, 0.2829216718673706], "val_loss": [1.9698726109095983, 1.9691484315054757, 1.968423639025007, 1.9676991190229143, 1.9669828414916992, 1.96625702721732, 1.9655329840523856, 1.9648190907069616, 1.964104516165597, 1.963388238634382, 1.962679045540946, 1.9619701249258858, 1.9612551416669572, 1.9605481284005302, 1.9598378453935896, 1.9591188430786133, 1.9584076745169503, 1.9576984814235143, 1.9569881984165736, 1.9562723296029227, 1.9555587768554688, 1.95484835760934, 1.9541361672537667, 1.9534309932163783, 1.9527151244027274, 1.952003342764718, 1.9512930597577776, 1.950580665043422, 1.9498645237513952, 1.949148314339774, 1.948434693472726, 1.9477115358625139, 1.94698395047869, 1.9462700571332658, 1.9455429485866003, 1.9448196547372, 1.9440908432006836, 1.943364075251988, 1.942636149270194, 1.941901615687779, 1.9411697387695312, 1.9404354776654924, 1.9396977424621582, 1.9389589173453194, 1.9382150513785226, 1.9374669619968958, 1.936713354928153, 1.9359574999128069, 1.935194424220494, 1.9344336645943778, 1.933671270098005, 1.9329051290239607, 1.9321412358965193, 1.9313625608171736, 1.9305943080357142, 1.9298125675746374, 1.9290226527622767, 1.928232261112758, 1.9274375098092216, 1.9266418729509627, 1.9258416039603097, 1.9250341824122839, 1.924220017024449, 1.923417023250035, 1.9226044246128626, 1.921788147517613, 1.920959540775844, 1.9201263700212752, 1.919295379093715, 1.918447766985212, 1.917602607182094, 1.916757311139788, 1.9158827236720495, 1.9150115421840124, 1.9141326631818498, 1.9132500376020158, 1.9123659815107072, 1.911473069872175, 1.9105826105390276, 1.909672464643206, 1.9087516920907157, 1.9078288759504045, 1.9069006102425712, 1.9059603554861886, 1.9050212587629045, 1.9040743282863073, 1.9031027385166712, 1.902132851736886, 1.9011686188834054, 1.9001810891287667, 1.899200780051095, 1.8981990814208984, 1.8971990176609583, 1.896195616040911, 1.8951733452933175, 1.8941452162606376, 1.8931210381644112, 1.8920819418770927, 1.8910314014979772, 1.8899685314723425], "val_accuracy": [0.04266666620969772, 0.04933333396911621, 0.05299999937415123, 0.058666665107011795, 0.06199999898672104, 0.06566666811704636, 0.07233333587646484, 0.07733333110809326, 0.08399999886751175, 0.09000000357627869, 0.09799999743700027, 0.1066666692495346, 0.1120000034570694, 0.11866666376590729, 0.1276666671037674, 0.1340000033378601, 0.14000000059604645, 0.1469999998807907, 0.15433333814144135, 0.1616666615009308, 0.1693333387374878, 0.17666666209697723, 0.18566666543483734, 0.19099999964237213, 0.1993333399295807, 0.20600000023841858, 0.2136666625738144, 0.2199999988079071, 0.22300000488758087, 0.22833333909511566, 0.2329999953508377, 0.2396666705608368, 0.24633333086967468, 0.2513333261013031, 0.25733333826065063, 0.2639999985694885, 0.27166667580604553, 0.2770000100135803, 0.2826666533946991, 0.2903333306312561, 0.2933333218097687, 0.2983333468437195, 0.30266666412353516, 0.3083333373069763, 0.3140000104904175, 0.31700000166893005, 0.32066667079925537, 0.3253333270549774, 0.3293333351612091, 0.33399999141693115, 0.33933332562446594, 0.34333333373069763, 0.3476666808128357, 0.35066667199134827, 0.35366666316986084, 0.3566666543483734, 0.359333336353302, 0.36033332347869873, 0.3630000054836273, 0.36399999260902405, 0.3659999966621399, 0.36766666173934937, 0.36899998784065247, 0.37166666984558105, 0.37433332204818726, 0.3773333430290222, 0.3776666522026062, 0.37933334708213806, 0.38100001215934753, 0.38333332538604736, 0.38333332538604736, 0.3843333423137665, 0.3866666555404663, 0.3893333375453949, 0.39100000262260437, 0.3933333456516266, 0.3946666717529297, 0.3959999978542328, 0.39800000190734863, 0.3996666669845581, 0.4009999930858612, 0.4020000100135803, 0.4046666622161865, 0.4050000011920929, 0.4059999883174896, 0.4073333442211151, 0.40933331847190857, 0.40966665744781494, 0.41200000047683716, 0.4129999876022339, 0.41466665267944336, 0.4156666696071625, 0.4169999957084656, 0.4183333218097687, 0.42233332991600037, 0.42399999499320984, 0.4266666769981384, 0.4259999990463257, 0.4286666810512543, 0.42899999022483826]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 9, 5, 4, 9, 4, 5, 2, 0, 4, 9, 5, 1, 9, 1, 3, 3, 8, 0, 6, 5, 2, 0, 2, 8, 8], [2, 2, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 52, 59, 56, 8, 79, 86, 52, 44], [1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [67, 25, 50, 71, 34]], "fitness": -0.20685714483261108, "mapping_values": [1, 6, 6, 5, 1, 2, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))))), lambda shape,  alpha, beta, grad: tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2807963158649427, 2.5409122765450003, 2.3055186344726666, 2.303515983531661, 2.3030938088476636, 2.3030482659864546], "accuracy": [0.2098798006772995, 0.11068551242351532, 0.09285431355237961, 0.09602430462837219, 0.0944393053650856, 0.09774138033390045], "val_loss": [2.427429403577532, 1.9768274852207728, 1.9742355346679688, 1.973651613507952, 1.9737176213945662, 1.9736993653433663], "val_accuracy": [0.1993333399295807, 0.09833333641290665, 0.09700000286102295, 0.10233332961797714, 0.09833333641290665, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 2, 9, 4, 5, 2, 0, 4, 9, 5, 1, 9, 1, 3, 3, 8, 0, 8, 5, 2, 0, 2, 8, 8], [2, 0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 65, 59, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 4, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [71, 25, 50, 71, 34]], "fitness": -0.17257143557071686, "mapping_values": [1, 29, 29, 21, 8, 4, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), grad)))), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), tf.math.pow(grad, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.subtract(tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(grad), tf.math.add(alpha, tf.math.negative(grad))))))))))), tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.3532136994708153, 2.2959792706881688, 2.302908857721206, 2.248525710263981, 2.2169950174035145, 2.3052371325131973, 2.303330668463384, 2.3030251962885706, 2.3031684122285854], "accuracy": [0.20895522832870483, 0.16642451286315918, 0.10077928751707077, 0.17976489663124084, 0.20499274134635925, 0.09853387624025345, 0.09866596013307571, 0.09642054885625839, 0.09351472556591034], "val_loss": [1.9727888788495744, 1.9743903705051966, 1.9646598952157157, 1.8764293534415108, 1.9779511179242815, 1.9740044048854284, 1.9736964362008231, 1.97369384765625, 1.9738011360168457], "val_accuracy": [0.09700000286102295, 0.09833333641290665, 0.10233332961797714, 0.10633333027362823, 0.09700000286102295, 0.09733333438634872, 0.09733333438634872, 0.10400000214576721, 0.09700000286102295]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [3, 6, 6, 8, 9, 4, 5, 2, 0, 4, 9, 5, 1, 3, 1, 1, 3, 8, 0, 8, 5, 2, 2, 9, 8, 8], [2, 1, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [44, 65, 6, 52, 8, 65, 86, 52, 44], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [2, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.12714286148548126, "mapping_values": [1, 37, 37, 26, 11, 6, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 56, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))), tf.math.pow(tf.math.square(tf.math.add(alpha, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.subtract(tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.subtract(tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.square(tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.sqrt(tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))))), grad), grad)), tf.math.add(alpha, grad)), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32))))))))), alpha))), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.3592625127854583, 9.162949598476382, NaN, NaN, NaN, NaN], "accuracy": [0.19099193811416626, 0.15638621151447296, 0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9745329448154993, 41757.62946428572, NaN, NaN, NaN, NaN], "val_accuracy": [0.1313333362340927, 0.0963333323597908, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [3, 4, 6, 6, 9, 4, 5, 2, 0, 4, 9, 5, 6, 3, 1, 0, 3, 8, 0, 8, 5, 2, 0, 2, 8, 8], [2, 1, 0, 2, 2, 0, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 65, 6, 52, 8, 79, 86, 52, 44], [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 2, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10285714268684387, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [408.7929680633381, 2.352798386209629, 2.321637977588257, 2.3080876160448947, 775.7335831543018, 72463179439.34691, 2.311410822620828, 2.3051259197405916, 2.303497770348749, 2.303017167430339], "accuracy": [0.09694888442754745, 0.09642054885625839, 0.09602430462837219, 0.09681680053472519, 0.09192973375320435, 0.10077928751707077, 0.09760929644107819, 0.09747721254825592, 0.08677849918603897, 0.09642054885625839], "val_loss": [2.0379811014447893, 2.0005645070757185, 1.9822703770228796, 1.976184504372733, 531447845449.1429, 1.9872046879359655, 1.9777656282697404, 1.9748016084943498, 1.9740463665553503, 1.9739024979727608], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.10233332961797714, 0.10233332961797714, 0.12099999934434891, 0.10233332961797714, 0.10233332961797714, 0.10400000214576721, 0.09700000286102295, 0.0976666659116745]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 6, 5, 2, 9, 4, 5, 2, 0, 4, 9, 5, 1, 9, 1, 3, 3, 8, 0, 8, 5, 2, 0, 2, 8, 8], [2, 2, 2, 2, 2, 2, 1, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 10, 59, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [8, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 31, 31, 23, 8, 3, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 49, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), tf.math.pow(tf.math.square(tf.math.add(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(tf.math.multiply(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.sqrt(grad)))))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.add(alpha, grad)), tf.math.add(alpha, alpha)))))))))))))), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.sqrt(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 9, 2, 4, 5, 2, 0, 4, 9, 5, 1, 9, 1, 3, 3, 8, 0, 6, 5, 2, 0, 2, 8, 8], [2, 2, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 65, 59, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 2, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [61, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 6, 6, 3, 3, 1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(sigma, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [16174115.566261707, 2.313806024760996, 2.3060096145668174, 2.3035506094608955, 2.3031604769616916, 2.303053668650339, 2.3030153891319425, 2.30294198439405, 2.3030426839496703, 2.30291743058696, 2.303033548213267, 2.3029667408459096, 2.30300259775946], "accuracy": [0.09628847241401672, 0.09642054885625839, 0.09602430462837219, 0.09681680053472519, 0.09206181764602661, 0.09787346422672272, 0.09840179979801178, 0.09747721254825592, 0.08677849918603897, 0.09655263274908066, 0.09179764986038208, 0.09311848133802414, 0.09734513610601425], "val_loss": [1.9904531751360213, 1.978752272469657, 1.9748773574829102, 1.9739956855773926, 1.9738360132489885, 1.9737526348658971, 1.973653929574149, 1.973642144884382, 1.9737135342189245, 1.9737589018685477, 1.9737372398376465, 1.9737121037074499, 1.9737416676112585], "val_accuracy": [0.09833333641290665, 0.09833333641290665, 0.10233332961797714, 0.10233332961797714, 0.09833333641290665, 0.10233332961797714, 0.10233332961797714, 0.10400000214576721, 0.09700000286102295, 0.0976666659116745, 0.10000000149011612, 0.09966666996479034, 0.09833333641290665]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 8, 2, 9, 4, 5, 2, 0, 4, 2, 5, 1, 9, 0, 2, 3, 6, 0, 8, 5, 2, 9, 2, 1, 8], [2, 2, 0, 2, 2, 2, 1, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 65, 59, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 6, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 35, 35, 24, 11, 6, 12, 12, 8, 4, 4, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 46, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), tf.math.pow(grad, tf.math.square(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.sqrt(grad))), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(alpha, grad), grad))))))), tf.math.add(alpha, alpha))), grad)))))), tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))))), grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.pow(grad, tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))))), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.divide_no_nan(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09747721254825592, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [3, 6, 6, 6, 9, 4, 5, 2, 0, 4, 9, 5, 1, 3, 1, 3, 3, 8, 0, 8, 1, 2, 0, 9, 8, 8], [2, 1, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 65, 59, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [0, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 36, 36, 23, 13, 7, 4, 4, 2, 2, 0, 3, 1, 1, 0, 0, 4, 3, 1, 2], "tree_depth": 50, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))))), tf.math.divide_no_nan(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.pow(tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.multiply(tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.negative(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.sqrt(tf.math.subtract(grad, tf.math.add(alpha, grad)))))), tf.math.add(tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)), alpha)), tf.math.negative(tf.math.add(alpha, grad))), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))))))), tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.pow(grad, tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.796543707700847, 7.839810508699811, 19.771032827405282, 38.799339532253846, 66.13258193125263, 103.82041027838481], "accuracy": [0.09338264167308807, 0.09668471664190292, 0.09628847241401672, 0.10157178342342377, 0.10659094154834747, 0.10553427785634995], "val_loss": [3.215962682451521, 8.67691775730678, 18.570594787597656, 33.63251059395926, 54.746892656598774, 82.93691580636161], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 2, 9, 4, 5, 2, 0, 4, 9, 5, 1, 9, 1, 3, 3, 8, 0, 8, 5, 2, 0, 2, 8, 8], [0, 2, 0, 2, 2, 2, 1, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 65, 59, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [2, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [7, 3, 6, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 9, 5, 4, 2], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(sigma, tf.math.divide_no_nan(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3019827674991182, 2.3022517970587364, 2.3023070684119835, 2.3041089715706975, 2.311485646344478, 2.3559674328942704], "accuracy": [0.09945846349000931, 0.1018359512090683, 0.10355303436517715, 0.10011887550354004, 0.10117553919553757, 0.10328886657953262], "val_loss": [1.9736954144069128, 1.9738358770098006, 1.9746738161359514, 1.9778926031930106, 1.9941067695617676, 2.100791726793562], "val_accuracy": [0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.10000000149011612]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 8, 2, 9, 2, 5, 5, 0, 4, 5, 5, 1, 9, 1, 2, 9, 8, 0, 8, 5, 2, 9, 2, 8, 8], [2, 2, 0, 2, 2, 2, 1, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 65, 59, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 6, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [66, 25, 50, 71, 34]], "fitness": -0.06714285910129547, "mapping_values": [1, 24, 24, 18, 6, 4, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), grad), tf.math.add(tf.math.square(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))))), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(grad))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.divide_no_nan(beta, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.3031000333014355, 2.3015603879659783, 2.299592989594189, 2.3003174511984184, 2.299439624630937, 2.299762924884871, 2.300401337158411, 2.299931043174682, 2.2995220324335284, 2.29895298658282, 2.299515759042698, 2.2996260860986273], "accuracy": [0.08875974267721176, 0.09126931428909302, 0.10038304328918457, 0.09840179979801178, 0.09840179979801178, 0.09642054885625839, 0.09470347315073013, 0.10117553919553757, 0.09734513610601425, 0.09826971590518951, 0.10157178342342377, 0.09417514503002167], "val_loss": [1.9695890971592493, 1.969245297568185, 1.9690526553562708, 1.9689785412379675, 1.9691064698355538, 1.969254425593785, 1.969115938459124, 1.9690776552472795, 1.969081197466169, 1.9692356927054269, 1.9694177763802665, 1.9697331701006209], "val_accuracy": [0.04933333396911621, 0.055666666477918625, 0.05833333358168602, 0.06266666948795319, 0.06533333659172058, 0.06733333319425583, 0.07400000095367432, 0.07400000095367432, 0.07199999690055847, 0.070333331823349, 0.07199999690055847, 0.07400000095367432]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 2, 9, 4, 5, 2, 0, 4, 9, 5, 1, 2, 1, 3, 3, 9, 0, 8, 5, 5, 0, 2, 8, 8], [0, 2, 0, 2, 2, 2, 2, 2, 0, 2, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 65, 59, 52, 15, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 3, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.0462857149541378, "mapping_values": [1, 35, 35, 25, 10, 6, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 53, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32))))), tf.math.pow(tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.subtract(tf.math.add(tf.math.subtract(grad, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.square(tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.square(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.add(alpha, grad)))))))), tf.math.add(alpha, grad)), grad))))), grad))), tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.multiply(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.303662551660201, 2.3028374142445878, 2.3011290850404422, 2.3023097781205393, 2.3010952294132636, 2.301378424487897, 2.3027385852560784, 2.30179462992142, 2.301515153275977, 2.3008061545226774, 2.3017233889950988, 2.3007731636706406, 2.302349580324652, 2.3006338584755297, 2.3017283132787645, 2.3029349659254774, 2.301826802290127, 2.3010561699565564, 2.3037193903849347, 2.301274293102939, 2.3003792300153134, 2.301388056680369, 2.3019713300834197, 2.300730966920189, 2.3019358178076885, 2.300564284715765, 2.300317761542507], "accuracy": [0.08730682730674744, 0.08875974267721176, 0.09589222073554993, 0.09285431355237961, 0.09589222073554993, 0.09166556596755981, 0.08796724677085876, 0.0944393053650856, 0.09153348207473755, 0.0952318087220192, 0.09840179979801178, 0.09496764093637466, 0.09272222965955734, 0.09166556596755981, 0.08889182657003403, 0.0870426595211029, 0.09509972482919693, 0.1006472036242485, 0.09430722147226334, 0.09338264167308807, 0.09708096832036972, 0.09576013684272766, 0.09219389408826828, 0.0956280529499054, 0.0940430611371994, 0.09206181764602661, 0.0940430611371994], "val_loss": [1.9705330984933036, 1.970494610922677, 1.9704583712986536, 1.9704166139875139, 1.9703820092337472, 1.9703425679888045, 1.970287527356829, 1.9702534675598145, 1.9702159336635046, 1.970174925667899, 1.9701345988682337, 1.9700966562543596, 1.9700489725385393, 1.9700157301766532, 1.969994068145752, 1.9699596677507674, 1.9699274471827917, 1.9699037415640694, 1.969867501940046, 1.9698328290666853, 1.9698000635419572, 1.9697773797171456, 1.969747543334961, 1.9697181837899345, 1.9696859632219588, 1.9696567399161202, 1.9696308544703893], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03999999910593033, 0.041333332657814026, 0.0416666679084301, 0.041999999433755875, 0.0430000014603138, 0.04333333298563957, 0.043666668236255646, 0.043666668236255646, 0.04466666653752327, 0.04533333331346512, 0.045666664838790894, 0.04600000008940697, 0.04633333161473274, 0.04699999839067459, 0.046666666865348816, 0.045666664838790894, 0.047333333641290665, 0.04766666516661644, 0.04800000041723251, 0.04766666516661644, 0.04800000041723251, 0.04766666516661644, 0.04800000041723251, 0.04800000041723251]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 2, 9, 4, 5, 2, 0, 4, 9, 5, 1, 3, 1, 3, 3, 8, 0, 8, 4, 1, 0, 2, 8, 8], [2, 2, 2, 2, 2, 2, 1, 1, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 65, 59, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(beta)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3036933188992026, 2.302920944387446, 2.301256194893773, 2.3025015770341932, 2.301306616376656, 2.3016418142561834], "accuracy": [0.0874389111995697, 0.0882314071059227, 0.09576013684272766, 0.09298639744520187, 0.09457138925790787, 0.09060890227556229], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}]