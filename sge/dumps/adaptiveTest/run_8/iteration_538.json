[{"genotype": [[0], [0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [1, 4, 6, 6, 0, 2, 8, 0, 3, 6, 3, 8, 9, 3, 2, 6, 0, 5, 0, 2], [0, 0, 2, 2, 2, 1, 1, 2, 0, 0, 0, 3, 2, 2], [56, 42, 74, 73, 95], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 2, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [49, 25, 50, 71, 34]], "fitness": -0.7994285821914673, "mapping_values": [1, 21, 21, 13, 8, 3, 1, 1, 0, 1, 0, 5, 3, 2, 1, 0, 5, 2, 3, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.divide_no_nan(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))), grad))), tf.math.multiply(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.add(sigma, sigma)), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.560892429050752, 2.11498297172499, 1.885248899522821, 1.6270798133459106, 1.3250039628373633, 0.9685480697689401, 0.8888796408021171, 0.8121155402002522, 0.7785424446354232, 0.6873097899268411, 0.6612386225772304, 0.6764481251565079, 0.6099082933456639, 0.5944409298150453, 0.5731924162911166, 0.5692619432657937, 0.5658159534440867], "accuracy": [0.2635054886341095, 0.31079116463661194, 0.37339848279953003, 0.43270373344421387, 0.5300488471984863, 0.6380926966667175, 0.6686038970947266, 0.6914542317390442, 0.7066437602043152, 0.7425703406333923, 0.7493065595626831, 0.7390040755271912, 0.7697794437408447, 0.7746664881706238, 0.7777044177055359, 0.7804781198501587, 0.7877426743507385], "val_loss": [1.4771066393171037, 1.5986077104296004, 1.3507236071995325, 1.329662527356829, 0.8020317384174892, 0.7414038862500872, 0.6006512131009784, 0.5643153871808734, 0.5513266835893903, 0.5227545670100621, 0.49457623277391705, 0.4674357516424997, 0.46690922124045237, 0.4367150919778006, 0.45033925771713257, 0.4616288798195975, 0.5146686690194267], "val_accuracy": [0.4436666667461395, 0.406333327293396, 0.5146666765213013, 0.4519999921321869, 0.621666669845581, 0.6383333206176758, 0.7123333215713501, 0.7326666712760925, 0.734000027179718, 0.7480000257492065, 0.7730000019073486, 0.8050000071525574, 0.7886666655540466, 0.7990000247955322, 0.7903333306312561, 0.7946666479110718, 0.781333327293396]}}, {"genotype": [[0], [0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [4, 2, 6, 6, 9, 4, 2, 0, 8, 9, 8, 8, 4, 3, 2, 6, 8, 5, 0, 2], [1, 2, 2, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [26, 98, 45, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.7748571634292603, "mapping_values": [1, 15, 15, 10, 5, 3, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), grad)))), tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad)))))), tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.21904905055571, 1.9681259326773581, 1.4926226868400831, 1.0965920797727677, 0.8445126351553136, 0.7698571927763799, 0.7312574543894369, 0.6752151568426259, 0.664150302215826, 0.6329485096038372, 0.5899870230883593, 0.587649742775369, 0.5652539275577748, 0.573185359080706], "accuracy": [0.25782591104507446, 0.368511438369751, 0.481838583946228, 0.6029586791992188, 0.6847180128097534, 0.7069079279899597, 0.720380425453186, 0.7349095344543457, 0.746268630027771, 0.7643640041351318, 0.7750627398490906, 0.7781006693840027, 0.7848368883132935, 0.7839123010635376], "val_loss": [1.9293145452226912, 1.4444958482469832, 1.1225274971553258, 0.6418157305036273, 0.6303464344569615, 0.5821249825613839, 0.540564911706107, 0.5769955941608974, 0.473646879196167, 0.49155705315726145, 0.5402304444994245, 0.47667297295161654, 0.48200862748282297, 0.45614631686891827], "val_accuracy": [0.23533333837985992, 0.45100000500679016, 0.5583333373069763, 0.7409999966621399, 0.7113333344459534, 0.7173333168029785, 0.7513333559036255, 0.7210000157356262, 0.7976666688919067, 0.7559999823570251, 0.749666690826416, 0.7820000052452087, 0.7829999923706055, 0.7786666750907898]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1], [4, 4, 6, 6, 0, 2, 8, 0, 3, 4, 3, 8, 4, 3, 2, 6, 8, 5, 0, 2, 4, 4, 6, 5, 2], [2, 3, 0, 0, 2, 0, 2, 2, 0, 1, 0, 3, 2, 2, 3, 3, 0, 1], [26, 98, 83, 73, 46, 42], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.7748571634292603, "mapping_values": [1, 43, 43, 25, 18, 6, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.pow(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), grad))))), tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.multiply(grad, tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.multiply(tf.math.add(alpha, grad), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, grad))))))))), tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(grad, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))), grad))), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.21904905055571, 1.9681259326773581, 1.4926226868400831, 1.0965920797727677, 0.8445126351553136, 0.7698571927763799, 0.7312574543894369, 0.6752151568426259, 0.664150302215826, 0.6329485096038372, 0.5899870230883593, 0.587649742775369, 0.5652539275577748, 0.573185359080706], "accuracy": [0.25782591104507446, 0.368511438369751, 0.481838583946228, 0.6029586791992188, 0.6847180128097534, 0.7069079279899597, 0.720380425453186, 0.7349095344543457, 0.746268630027771, 0.7643640041351318, 0.7750627398490906, 0.7781006693840027, 0.7848368883132935, 0.7839123010635376], "val_loss": [1.9293145452226912, 1.4444958482469832, 1.1225274971553258, 0.6418157305036273, 0.6303464344569615, 0.5821249825613839, 0.540564911706107, 0.5769955941608974, 0.473646879196167, 0.49155705315726145, 0.5402304444994245, 0.47667297295161654, 0.48200862748282297, 0.45614631686891827], "val_accuracy": [0.23533333837985992, 0.45100000500679016, 0.5583333373069763, 0.7409999966621399, 0.7113333344459534, 0.7173333168029785, 0.7513333559036255, 0.7210000157356262, 0.7976666688919067, 0.7559999823570251, 0.749666690826416, 0.7820000052452087, 0.7829999923706055, 0.7786666750907898]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [1, 4, 6, 6, 4, 2, 8, 0, 3, 6, 3, 8, 9, 3, 2, 6, 0, 5, 0, 2], [0, 0, 2, 2, 2, 1, 2, 2, 0, 0, 0, 3, 2, 2], [29, 86, 74, 73, 95], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 2, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 3, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [49, 25, 50, 71, 34]], "fitness": -0.3051428496837616, "mapping_values": [1, 24, 24, 14, 10, 5, 1, 1, 0, 1, 0, 5, 3, 2, 1, 0, 5, 2, 3, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.divide_no_nan(tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.pow(tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(9.99372875e-01, shape=shape, dtype=tf.float32)), grad))))), tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.multiply(grad, tf.math.sqrt(tf.math.add(alpha, alpha))))), grad), tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))), tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.add(sigma, sigma)), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, sigma), beta)", "other_info": {"loss": [2.521091284768897, 2.2479329872219522, 2.238993805885441, 2.277110887162674, 2.303484187890132, 2.3030252790469943, 2.303076909187054, 2.302973398647729], "accuracy": [0.17897239327430725, 0.1822744756937027, 0.19099193811416626, 0.12970545887947083, 0.0948355570435524, 0.09734513610601425, 0.09298639744520187, 0.09919429570436478], "val_loss": [1.9739197322300501, 1.97298492704119, 1.8104420389447893, 1.9737591062273299, 1.9736482075282507, 1.9737961632864816, 1.9736620358058385, 1.9737215042114258], "val_accuracy": [0.1756666600704193, 0.1550000011920929, 0.25433334708213806, 0.10400000214576721, 0.10400000214576721, 0.09700000286102295, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [1, 4, 0, 9, 2, 2, 8, 0, 3, 9, 3, 8, 9, 3, 2, 6, 0, 5, 0, 2], [0, 0, 2, 2, 2, 1, 1, 2, 0, 0, 0, 3, 2, 2], [56, 42, 74, 73, 95], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 2, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [3, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [10, 25, 50, 71, 34]], "fitness": -0.3051428496837616, "mapping_values": [1, 6, 6, 4, 2, 3, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.negative(tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(sigma, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.521091284768897, 2.2479329872219522, 2.238993805885441, 2.277110887162674, 2.303484187890132, 2.3030252790469943, 2.303076909187054, 2.302973398647729], "accuracy": [0.17897239327430725, 0.1822744756937027, 0.19099193811416626, 0.12970545887947083, 0.0948355570435524, 0.09734513610601425, 0.09298639744520187, 0.09919429570436478], "val_loss": [1.9739197322300501, 1.97298492704119, 1.8104420389447893, 1.9737591062273299, 1.9736482075282507, 1.9737961632864816, 1.9736620358058385, 1.9737215042114258], "val_accuracy": [0.1756666600704193, 0.1550000011920929, 0.25433334708213806, 0.10400000214576721, 0.10400000214576721, 0.09700000286102295, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], [6, 8, 6, 6, 0, 2, 8, 0, 3, 6, 1, 8, 2, 3, 2, 6, 8, 5, 0, 2], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [56, 74, 71, 54, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [36, 25, 50, 71, 34]], "fitness": -0.12514285743236542, "mapping_values": [1, 19, 19, 11, 8, 3, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.negative(tf.math.add(grad, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32))))))), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))))), tf.math.multiply(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.536755008216327, 2.525150976381313, 2.31076929528621, 2.239677437260922, 2.1679608395165455, 2.33472762459289], "accuracy": [0.18478403985500336, 0.21080438792705536, 0.13551710546016693, 0.1558578759431839, 0.21833311021327972, 0.16100911796092987], "val_loss": [1.9080747876848494, 2.0502561841692244, 1.8910219328744071, 1.9657198360988073, 1.6706206457955497, 1.9694631440298898], "val_accuracy": [0.3893333375453949, 0.09700000286102295, 0.21533332765102386, 0.18066667020320892, 0.3479999899864197, 0.1106666699051857]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [4, 2, 6, 4, 9, 2, 2, 9, 8, 9, 8, 8, 4, 3, 2, 6, 8, 5, 0, 2], [0, 3, 2, 0, 2, 1, 1, 2, 0, 0, 0, 3, 2, 2], [56, 73, 74, 54, 46], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 1, 1, 0, 1], [0, 1, 0, 0], [3, 2, 0], [5, 3], [], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [5, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.10028571635484695, "mapping_values": [1, 14, 14, 9, 5, 4, 1, 1, 0, 1, 0, 3, 2, 1, 1, 0, 2, 1, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.math.add(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), grad)))))), tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.sqrt(grad)))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.square(beta)", "other_info": {"loss": [2.2997672173325348, 2.3016208218010332, 2.3024071658276424, 2.3028631389196192, 2.305103153584734, 2.3394007444413205, 2.7922683356066798, 4.637230520912244, 9.011513518052661], "accuracy": [0.09100515395402908, 0.08519349992275238, 0.09245806187391281, 0.11042134463787079, 0.1018359512090683, 0.1006472036242485, 0.09774138033390045, 0.09998679161071777, 0.09430722147226334], "val_loss": [1.9704180444989885, 1.9732368332999093, 1.9738349914550781, 1.974728788648333, 1.9812555994306291, 2.116450309753418, 3.115743568965367, 5.907110486711774, 11.312786374773298], "val_accuracy": [0.09133332967758179, 0.07699999958276749, 0.0860000029206276, 0.10833333432674408, 0.09733333438634872, 0.10233332961797714, 0.09833333641290665, 0.09833333641290665, 0.09733333438634872]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [4, 4, 6, 0, 6, 2, 8, 0, 3, 6, 3, 8, 5, 3, 2, 6, 8, 5, 0, 2], [1, 3, 0, 2, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [26, 52, 68, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 8, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 24, 24, 14, 10, 4, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(grad, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32), tf.math.sqrt(grad))), tf.math.square(grad)), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))))))), grad))))))), tf.math.add(alpha, tf.math.multiply(grad, tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.sqrt(beta), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1], [4, 4, 6, 6, 0, 2, 8, 1, 3, 6, 3, 8, 4, 3, 2, 6, 8, 5, 0, 2, 9, 5], [2, 2, 0, 0, 2, 2, 2, 2, 0, 0, 0, 3, 2, 2], [56, 73, 88, 73, 46, 77, 50], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 8, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 35, 35, 21, 14, 6, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), grad)), tf.math.multiply(tf.math.add(alpha, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, grad)))), tf.math.sqrt(grad)))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.multiply(grad, tf.math.add(alpha, tf.math.add(tf.constant(9.99581233e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(tf.math.add(alpha, grad), grad)))), tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.sqrt(beta), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [4, 4, 6, 6, 0, 2, 8, 2, 3, 6, 5, 8, 6, 3, 2, 6, 8, 5, 0, 2], [0, 0, 2, 2, 0, 1, 2, 2, 0, 2, 0, 3, 2, 2], [56, 73, 74, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 0, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [49, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 10, 9, 4, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 9, 5, 4, 3], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), tf.math.add(alpha, grad)))), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.add(alpha, alpha), tf.math.multiply(tf.math.add(alpha, grad), tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(tf.math.add(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2071389.9675166265, 2.3138105853547697, 2.3058284971267162, 2.3035914971607707, 2.302944593929643, 2.3029593323294546, 2.3029394021296876, 2.3029746616584212, 2.3029164700475997], "accuracy": [0.09060890227556229, 0.09760929644107819, 0.0944393053650856, 0.09747721254825592, 0.0944393053650856, 0.09906221181154251, 0.09721305221319199, 0.09430722147226334, 0.09642054885625839], "val_loss": [1.9905407088143485, 1.9786556788853236, 1.9750194549560547, 1.9738954135349818, 1.973757335117885, 1.973813806261335, 1.9736804962158203, 1.9737065179007394, 1.9735815865652901], "val_accuracy": [0.09700000286102295, 0.09833333641290665, 0.09833333641290665, 0.10400000214576721, 0.09733333438634872, 0.09700000286102295, 0.09966666996479034, 0.09966666996479034, 0.10000000149011612]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1], [1, 2, 6, 6, 0, 2, 8, 0, 3, 6, 3, 8, 9, 3, 2, 6, 0, 5, 0, 2], [2, 3, 0, 0, 2, 1, 2, 2, 0, 0, 0, 3, 2, 2], [26, 77, 68, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [1, 0, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 16, 9, 7, 2, 1, 1, 0, 1, 0, 5, 3, 2, 1, 0, 6, 4, 2, 2], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32))))), tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.multiply(grad, alpha)))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(sigma, sigma)), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.negative(tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [4351680.286035794, 2.3138854441909174, 2.3058245250687794, 2.303585645623762, 2.3029439912228424, 2.30296112712915, 2.302941610784484, 2.3029769155028443, 2.302918283017619], "accuracy": [0.09060890227556229, 0.09760929644107819, 0.0944393053650856, 0.09747721254825592, 0.0944393053650856, 0.09906221181154251, 0.09721305221319199, 0.09430722147226334, 0.09642054885625839], "val_loss": [1.9906934329441615, 1.9786599023001534, 1.9750083514622279, 1.9738888059343611, 1.9737544059753418, 1.9738148280552454, 1.9736793381827218, 1.9737064497811454, 1.9735832895551408], "val_accuracy": [0.09700000286102295, 0.09833333641290665, 0.09833333641290665, 0.10400000214576721, 0.09733333438634872, 0.09700000286102295, 0.09966666996479034, 0.09966666996479034, 0.10000000149011612]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0], [1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1], [6, 4, 6, 6, 0, 2, 8, 0, 3, 6, 3, 8, 2, 3, 2, 6, 8, 5, 0, 2], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [56, 73, 74, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0734381154179573, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [0, 2, 6, 6, 9, 4, 2, 9, 8, 8, 8, 8, 4, 3, 2, 6, 8, 5, 0, 2], [2, 1, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [26, 98, 75, 73, 4], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 2, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 10, 4, 4, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(tf.math.add(alpha, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, alpha)))), tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.sqrt(tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.302078983267584, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1], [0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [1, 4, 6, 6, 0, 2, 8, 0, 3, 6, 3, 8, 9, 3, 2, 6, 0, 5, 0, 2], [0, 0, 2, 2, 2, 1, 1, 2, 0, 0, 0, 3, 2, 2], [56, 42, 74, 73, 95], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 1, 1, 0, 1], [0, 0, 0, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [49, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 2, 1, 1, 0, 1, 0, 6, 3, 3, 0, 0, 5, 2, 3, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), tf.math.pow(tf.math.add(alpha, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(sigma, sigma)), tf.math.add(sigma, tf.math.negative(sigma)))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.068815216422081, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [6, 4, 6, 6, 0, 2, 2, 9, 3, 6, 3, 8, 2, 3, 2, 6, 8, 5, 0, 2], [1, 3, 2, 1, 2, 1, 2, 2, 0, 0, 0, 3, 2, 2], [21, 18, 74, 54, 46], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 1, 1, 0, 1], [0, 0, 1, 0], [5, 9, 0], [5, 3], [62], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 3, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 23, 23, 13, 10, 3, 8, 8, 4, 4, 0, 2, 2, 2, 0, 1, 3, 1, 2, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(alpha, tf.math.divide_no_nan(tf.math.negative(tf.math.add(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.constant(3.14881358e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), alpha)), tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), tf.math.add(alpha, grad)))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, grad), tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), grad)), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.square(tf.math.add(sigma, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(beta, sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 9, 6, 6, 0, 3, 3, 2, 5, 6, 1, 8], [2, 2, 1, 0, 2, 2, 2, 2, 0, 0, 0, 3, 2, 2], [26, 98, 68, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 4, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 15, 15, 9, 6, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.constant(8.59898661e-03, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(grad)))))), grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.pow(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1], [5, 8, 6, 6, 0, 8, 8, 4, 5, 8, 1, 8], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [57, 30, 68, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 0, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 1, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [52, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 10, 4, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.sqrt(tf.math.sqrt(tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.sqrt(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), alpha)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1], [1, 4, 6, 6, 0, 9, 8, 0, 3, 6, 3, 8, 9, 3, 2, 6, 0, 5, 0, 2], [2, 3, 0, 0, 2, 0, 2, 2, 0, 0, 0, 3, 2, 2], [50, 98, 68, 73, 46], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 2, 0], [5, 3], [], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [92, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 16, 10, 6, 4, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.pow(tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.add(alpha, grad), tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32), grad))), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0734381154179573, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [1, 4, 6, 6, 0, 2, 8, 0, 3, 6, 3, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 0, 2, 2, 2, 1, 1, 2, 0, 0, 0, 3, 2, 2], [56, 47, 74, 73, 95], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [1, 0, 1, 1, 0, 1], [0, 0, 0, 0], [3, 2, 0], [4, 3], [], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [8, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [49, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 21, 21, 13, 8, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.pow(tf.math.divide_no_nan(tf.math.divide_no_nan(alpha, tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(grad, tf.math.divide_no_nan(grad, grad)))))))), alpha), tf.math.multiply(alpha, tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: beta", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0734381154179573, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [1, 4, 6, 6, 0, 2, 8, 0, 3, 4, 3, 8, 9, 3, 2, 6, 0, 5, 0, 2], [0, 0, 2, 2, 2, 1, 1, 2, 0, 0, 0, 3, 2, 2], [56, 25, 74, 73, 95], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 2, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 4, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 0, 1, 1, 0, 1], [0, 0, 1, 0], [3, 2, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 3, 2, 9, 2, 9], [2, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [49, 25, 50, 71, 34]], "fitness": -0.08342856913805008, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1, 0, 5, 2, 3, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.add(sigma, sigma)), tf.math.add(sigma, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [2.418089865126614, 3.62916545986956, 37.0061868132381, 3.426860618144136, 2.7251929570484997e+20, NaN, NaN], "accuracy": [0.2533350884914398, 0.12032756209373474, 0.120459645986557, 0.10210011899471283, 0.09866596013307571, 0.09919429570436478, 0.09998679161071777], "val_loss": [2.064135347093855, 1.9914366858346122, 2.186251640319824, 2.3152997153145924, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.2096666693687439, 0.10000000149011612, 0.09700000286102295, 0.09733333438634872, 0.09966666996479034, 0.09966666996479034]}}]