[{"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 6, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 5, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.8037142753601074, "mapping_values": [1, 14, 14, 7, 7, 1, 8, 8, 5, 3, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)), tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))))), tf.math.add(alpha, grad)), tf.math.add(tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0510293233506416, 1.5177552609191107, 1.1896764870411716, 0.9253344025830426, 0.8233577437121178, 0.7386824696874259, 0.7387029433042587, 0.6806207925037953, 0.671763080112088, 0.6422964455098555, 0.6340014393366464, 0.5948775550078691, 0.6031622686217316, 0.604115490069589, 0.5632767792957932, 0.5468842320280966, 0.5298705355303241, 0.5467196636432355, 0.5443487691290391, 0.5074836968226187, 0.489949606889432], "accuracy": [0.31739532947540283, 0.47325319051742554, 0.5805045366287231, 0.6581693291664124, 0.6886804699897766, 0.7223616242408752, 0.7211728692054749, 0.7378153204917908, 0.7401928305625916, 0.7543256878852844, 0.7593448758125305, 0.7701756954193115, 0.7730814814567566, 0.7693831920623779, 0.787082314491272, 0.793422281742096, 0.800290584564209, 0.789988100528717, 0.7922335267066956, 0.8129705190658569, 0.8136309385299683], "val_loss": [1.662872212273734, 0.8618397201810565, 0.8239680698939732, 0.6712393930980137, 0.5674336808068412, 0.5581559623990741, 0.5371087959834507, 0.5842152152742658, 0.5242125477109637, 0.4826329435620989, 0.4735979012080601, 0.5334806271961757, 0.5015185901096889, 0.46079751423427034, 0.46826556750706266, 0.4352776663643973, 0.4664924144744873, 0.44705796241760254, 0.42819916350500925, 0.40903408186776297, 0.41766679286956787], "val_accuracy": [0.3893333375453949, 0.5720000267028809, 0.6079999804496765, 0.67166668176651, 0.7526666522026062, 0.749666690826416, 0.7416666746139526, 0.722000002861023, 0.7593333125114441, 0.7896666526794434, 0.7839999794960022, 0.7593333125114441, 0.7609999775886536, 0.8023333549499512, 0.7883333563804626, 0.8176666498184204, 0.7879999876022339, 0.7910000085830688, 0.815666675567627, 0.8159999847412109, 0.8166666626930237]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 3, 2, 1, 2, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 1, 2, 2, 2, 0, 1, 2, 1, 0, 0, 3, 2, 2], [52, 55, 35, 77, 95], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [5, 9, 3, 8, 8, 8, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.8037142753601074, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0510293233506416, 1.5177552609191107, 1.1896764870411716, 0.9253344025830426, 0.8233577437121178, 0.7386824696874259, 0.7387029433042587, 0.6806207925037953, 0.671763080112088, 0.6422964455098555, 0.6340014393366464, 0.5948775550078691, 0.6031622686217316, 0.604115490069589, 0.5632767792957932, 0.5468842320280966, 0.5298705355303241, 0.5467196636432355, 0.5443487691290391, 0.5074836968226187, 0.489949606889432], "accuracy": [0.31739532947540283, 0.47325319051742554, 0.5805045366287231, 0.6581693291664124, 0.6886804699897766, 0.7223616242408752, 0.7211728692054749, 0.7378153204917908, 0.7401928305625916, 0.7543256878852844, 0.7593448758125305, 0.7701756954193115, 0.7730814814567566, 0.7693831920623779, 0.787082314491272, 0.793422281742096, 0.800290584564209, 0.789988100528717, 0.7922335267066956, 0.8129705190658569, 0.8136309385299683], "val_loss": [1.662872212273734, 0.8618397201810565, 0.8239680698939732, 0.6712393930980137, 0.5674336808068412, 0.5581559623990741, 0.5371087959834507, 0.5842152152742658, 0.5242125477109637, 0.4826329435620989, 0.4735979012080601, 0.5334806271961757, 0.5015185901096889, 0.46079751423427034, 0.46826556750706266, 0.4352776663643973, 0.4664924144744873, 0.44705796241760254, 0.42819916350500925, 0.40903408186776297, 0.41766679286956787], "val_accuracy": [0.3893333375453949, 0.5720000267028809, 0.6079999804496765, 0.67166668176651, 0.7526666522026062, 0.749666690826416, 0.7416666746139526, 0.722000002861023, 0.7593333125114441, 0.7896666526794434, 0.7839999794960022, 0.7593333125114441, 0.7609999775886536, 0.8023333549499512, 0.7883333563804626, 0.8176666498184204, 0.7879999876022339, 0.7910000085830688, 0.815666675567627, 0.8159999847412109, 0.8166666626930237]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 3, 2, 1, 2, 2, 3, 3, 1, 2, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 1, 2, 2, 2, 0, 1, 2, 1, 0, 0, 3, 2, 2], [31, 62, 35, 73, 95, 1], [0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [5, 2, 3, 8, 8, 8, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 1, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 17, 50, 71, 34]], "fitness": -0.8037142753601074, "mapping_values": [1, 24, 24, 12, 12, 3, 7, 7, 4, 3, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha)), tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.math.add(alpha, grad))), tf.math.add(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), tf.math.multiply(tf.math.add(alpha, grad), tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)))), tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))), grad)))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.sqrt(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0510293233506416, 1.5177552609191107, 1.1896764870411716, 0.9253344025830426, 0.8233577437121178, 0.7386824696874259, 0.7387029433042587, 0.6806207925037953, 0.671763080112088, 0.6422964455098555, 0.6340014393366464, 0.5948775550078691, 0.6031622686217316, 0.604115490069589, 0.5632767792957932, 0.5468842320280966, 0.5298705355303241, 0.5467196636432355, 0.5443487691290391, 0.5074836968226187, 0.489949606889432], "accuracy": [0.31739532947540283, 0.47325319051742554, 0.5805045366287231, 0.6581693291664124, 0.6886804699897766, 0.7223616242408752, 0.7211728692054749, 0.7378153204917908, 0.7401928305625916, 0.7543256878852844, 0.7593448758125305, 0.7701756954193115, 0.7730814814567566, 0.7693831920623779, 0.787082314491272, 0.793422281742096, 0.800290584564209, 0.789988100528717, 0.7922335267066956, 0.8129705190658569, 0.8136309385299683], "val_loss": [1.662872212273734, 0.8618397201810565, 0.8239680698939732, 0.6712393930980137, 0.5674336808068412, 0.5581559623990741, 0.5371087959834507, 0.5842152152742658, 0.5242125477109637, 0.4826329435620989, 0.4735979012080601, 0.5334806271961757, 0.5015185901096889, 0.46079751423427034, 0.46826556750706266, 0.4352776663643973, 0.4664924144744873, 0.44705796241760254, 0.42819916350500925, 0.40903408186776297, 0.41766679286956787], "val_accuracy": [0.3893333375453949, 0.5720000267028809, 0.6079999804496765, 0.67166668176651, 0.7526666522026062, 0.749666690826416, 0.7416666746139526, 0.722000002861023, 0.7593333125114441, 0.7896666526794434, 0.7839999794960022, 0.7593333125114441, 0.7609999775886536, 0.8023333549499512, 0.7883333563804626, 0.8176666498184204, 0.7879999876022339, 0.7910000085830688, 0.815666675567627, 0.8159999847412109, 0.8166666626930237]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [1, 2, 4, 6, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 0, 2, 1, 2, 2, 0, 2, 2, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 5, 9, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.8037142753601074, "mapping_values": [1, 10, 10, 5, 5, 1, 7, 7, 6, 1, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.divide_no_nan(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, alpha)))), grad))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.square(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))), tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0510293233506416, 1.5177552609191107, 1.1896764870411716, 0.9253344025830426, 0.8233577437121178, 0.7386824696874259, 0.7387029433042587, 0.6806207925037953, 0.671763080112088, 0.6422964455098555, 0.6340014393366464, 0.5948775550078691, 0.6031622686217316, 0.604115490069589, 0.5632767792957932, 0.5468842320280966, 0.5298705355303241, 0.5467196636432355, 0.5443487691290391, 0.5074836968226187, 0.489949606889432], "accuracy": [0.31739532947540283, 0.47325319051742554, 0.5805045366287231, 0.6581693291664124, 0.6886804699897766, 0.7223616242408752, 0.7211728692054749, 0.7378153204917908, 0.7401928305625916, 0.7543256878852844, 0.7593448758125305, 0.7701756954193115, 0.7730814814567566, 0.7693831920623779, 0.787082314491272, 0.793422281742096, 0.800290584564209, 0.789988100528717, 0.7922335267066956, 0.8129705190658569, 0.8136309385299683], "val_loss": [1.662872212273734, 0.8618397201810565, 0.8239680698939732, 0.6712393930980137, 0.5674336808068412, 0.5581559623990741, 0.5371087959834507, 0.5842152152742658, 0.5242125477109637, 0.4826329435620989, 0.4735979012080601, 0.5334806271961757, 0.5015185901096889, 0.46079751423427034, 0.46826556750706266, 0.4352776663643973, 0.4664924144744873, 0.44705796241760254, 0.42819916350500925, 0.40903408186776297, 0.41766679286956787], "val_accuracy": [0.3893333375453949, 0.5720000267028809, 0.6079999804496765, 0.67166668176651, 0.7526666522026062, 0.749666690826416, 0.7416666746139526, 0.722000002861023, 0.7593333125114441, 0.7896666526794434, 0.7839999794960022, 0.7593333125114441, 0.7609999775886536, 0.8023333549499512, 0.7883333563804626, 0.8176666498184204, 0.7879999876022339, 0.7910000085830688, 0.815666675567627, 0.8159999847412109, 0.8166666626930237]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 1, 2, 1, 2, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [31, 62, 35, 73, 95, 1], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [5, 2, 3, 8, 8, 8, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.8037142753601074, "mapping_values": [1, 13, 13, 6, 7, 1, 8, 8, 5, 3, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))), grad)), tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))))))), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0510293233506416, 1.5177552609191107, 1.1896764870411716, 0.9253344025830426, 0.8233577437121178, 0.7386824696874259, 0.7387029433042587, 0.6806207925037953, 0.671763080112088, 0.6422964455098555, 0.6340014393366464, 0.5948775550078691, 0.6031622686217316, 0.604115490069589, 0.5632767792957932, 0.5468842320280966, 0.5298705355303241, 0.5467196636432355, 0.5443487691290391, 0.5074836968226187, 0.489949606889432], "accuracy": [0.31739532947540283, 0.47325319051742554, 0.5805045366287231, 0.6581693291664124, 0.6886804699897766, 0.7223616242408752, 0.7211728692054749, 0.7378153204917908, 0.7401928305625916, 0.7543256878852844, 0.7593448758125305, 0.7701756954193115, 0.7730814814567566, 0.7693831920623779, 0.787082314491272, 0.793422281742096, 0.800290584564209, 0.789988100528717, 0.7922335267066956, 0.8129705190658569, 0.8136309385299683], "val_loss": [1.662872212273734, 0.8618397201810565, 0.8239680698939732, 0.6712393930980137, 0.5674336808068412, 0.5581559623990741, 0.5371087959834507, 0.5842152152742658, 0.5242125477109637, 0.4826329435620989, 0.4735979012080601, 0.5334806271961757, 0.5015185901096889, 0.46079751423427034, 0.46826556750706266, 0.4352776663643973, 0.4664924144744873, 0.44705796241760254, 0.42819916350500925, 0.40903408186776297, 0.41766679286956787], "val_accuracy": [0.3893333375453949, 0.5720000267028809, 0.6079999804496765, 0.67166668176651, 0.7526666522026062, 0.749666690826416, 0.7416666746139526, 0.722000002861023, 0.7593333125114441, 0.7896666526794434, 0.7839999794960022, 0.7593333125114441, 0.7609999775886536, 0.8023333549499512, 0.7883333563804626, 0.8176666498184204, 0.7879999876022339, 0.7910000085830688, 0.815666675567627, 0.8159999847412109, 0.8166666626930237]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 1, 2, 2, 2, 3, 2, 2, 5, 8, 6, 4, 2, 6, 6, 5, 0, 2, 4, 4, 4, 8, 9], [1, 2, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 5, 3, 9, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.8037142753601074, "mapping_values": [1, 23, 23, 12, 11, 4, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)), tf.math.pow(tf.math.subtract(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))), tf.math.add(alpha, grad))), tf.math.add(tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))))), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0510293233506416, 1.5177552609191107, 1.1896764870411716, 0.9253344025830426, 0.8233577437121178, 0.7386824696874259, 0.7387029433042587, 0.6806207925037953, 0.671763080112088, 0.6422964455098555, 0.6340014393366464, 0.5948775550078691, 0.6031622686217316, 0.604115490069589, 0.5632767792957932, 0.5468842320280966, 0.5298705355303241, 0.5467196636432355, 0.5443487691290391, 0.5074836968226187, 0.489949606889432], "accuracy": [0.31739532947540283, 0.47325319051742554, 0.5805045366287231, 0.6581693291664124, 0.6886804699897766, 0.7223616242408752, 0.7211728692054749, 0.7378153204917908, 0.7401928305625916, 0.7543256878852844, 0.7593448758125305, 0.7701756954193115, 0.7730814814567566, 0.7693831920623779, 0.787082314491272, 0.793422281742096, 0.800290584564209, 0.789988100528717, 0.7922335267066956, 0.8129705190658569, 0.8136309385299683], "val_loss": [1.662872212273734, 0.8618397201810565, 0.8239680698939732, 0.6712393930980137, 0.5674336808068412, 0.5581559623990741, 0.5371087959834507, 0.5842152152742658, 0.5242125477109637, 0.4826329435620989, 0.4735979012080601, 0.5334806271961757, 0.5015185901096889, 0.46079751423427034, 0.46826556750706266, 0.4352776663643973, 0.4664924144744873, 0.44705796241760254, 0.42819916350500925, 0.40903408186776297, 0.41766679286956787], "val_accuracy": [0.3893333375453949, 0.5720000267028809, 0.6079999804496765, 0.67166668176651, 0.7526666522026062, 0.749666690826416, 0.7416666746139526, 0.722000002861023, 0.7593333125114441, 0.7896666526794434, 0.7839999794960022, 0.7593333125114441, 0.7609999775886536, 0.8023333549499512, 0.7883333563804626, 0.8176666498184204, 0.7879999876022339, 0.7910000085830688, 0.815666675567627, 0.8159999847412109, 0.8166666626930237]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 3, 2, 4, 2, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 1, 2, 2, 0, 0, 1, 2, 1, 0, 2, 3, 2, 2], [31, 9, 35, 73, 95, 1], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [5, 8, 3, 5, 8, 8, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.8037142753601074, "mapping_values": [1, 23, 23, 13, 10, 4, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, alpha)), tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, grad), tf.math.multiply(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))))), tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))))))), alpha), tf.constant(9.91401013e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0510293233506416, 1.5177552609191107, 1.1896764870411716, 0.9253344025830426, 0.8233577437121178, 0.7386824696874259, 0.7387029433042587, 0.6806207925037953, 0.671763080112088, 0.6422964455098555, 0.6340014393366464, 0.5948775550078691, 0.6031622686217316, 0.604115490069589, 0.5632767792957932, 0.5468842320280966, 0.5298705355303241, 0.5467196636432355, 0.5443487691290391, 0.5074836968226187, 0.489949606889432], "accuracy": [0.31739532947540283, 0.47325319051742554, 0.5805045366287231, 0.6581693291664124, 0.6886804699897766, 0.7223616242408752, 0.7211728692054749, 0.7378153204917908, 0.7401928305625916, 0.7543256878852844, 0.7593448758125305, 0.7701756954193115, 0.7730814814567566, 0.7693831920623779, 0.787082314491272, 0.793422281742096, 0.800290584564209, 0.789988100528717, 0.7922335267066956, 0.8129705190658569, 0.8136309385299683], "val_loss": [1.662872212273734, 0.8618397201810565, 0.8239680698939732, 0.6712393930980137, 0.5674336808068412, 0.5581559623990741, 0.5371087959834507, 0.5842152152742658, 0.5242125477109637, 0.4826329435620989, 0.4735979012080601, 0.5334806271961757, 0.5015185901096889, 0.46079751423427034, 0.46826556750706266, 0.4352776663643973, 0.4664924144744873, 0.44705796241760254, 0.42819916350500925, 0.40903408186776297, 0.41766679286956787], "val_accuracy": [0.3893333375453949, 0.5720000267028809, 0.6079999804496765, 0.67166668176651, 0.7526666522026062, 0.749666690826416, 0.7416666746139526, 0.722000002861023, 0.7593333125114441, 0.7896666526794434, 0.7839999794960022, 0.7593333125114441, 0.7609999775886536, 0.8023333549499512, 0.7883333563804626, 0.8176666498184204, 0.7879999876022339, 0.7910000085830688, 0.815666675567627, 0.8159999847412109, 0.8166666626930237]}}, {"genotype": [[0], [1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 6, 3, 6, 1, 2, 8, 3, 2, 1, 3, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 1, 2, 0, 1, 2, 1, 0, 0, 3, 2, 2], [52, 55, 35, 77, 95], [0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 2, 3, 8, 8, 8, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [98, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.8037142753601074, "mapping_values": [1, 14, 14, 7, 7, 1, 14, 14, 8, 6, 2, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.divide_no_nan(tf.math.multiply(alpha, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, alpha)))), tf.math.add(alpha, grad))), tf.math.sqrt(tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32))))))), grad), tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), beta))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0510293233506416, 1.5177552609191107, 1.1896764870411716, 0.9253344025830426, 0.8233577437121178, 0.7386824696874259, 0.7387029433042587, 0.6806207925037953, 0.671763080112088, 0.6422964455098555, 0.6340014393366464, 0.5948775550078691, 0.6031622686217316, 0.604115490069589, 0.5632767792957932, 0.5468842320280966, 0.5298705355303241, 0.5467196636432355, 0.5443487691290391, 0.5074836968226187, 0.489949606889432], "accuracy": [0.31739532947540283, 0.47325319051742554, 0.5805045366287231, 0.6581693291664124, 0.6886804699897766, 0.7223616242408752, 0.7211728692054749, 0.7378153204917908, 0.7401928305625916, 0.7543256878852844, 0.7593448758125305, 0.7701756954193115, 0.7730814814567566, 0.7693831920623779, 0.787082314491272, 0.793422281742096, 0.800290584564209, 0.789988100528717, 0.7922335267066956, 0.8129705190658569, 0.8136309385299683], "val_loss": [1.662872212273734, 0.8618397201810565, 0.8239680698939732, 0.6712393930980137, 0.5674336808068412, 0.5581559623990741, 0.5371087959834507, 0.5842152152742658, 0.5242125477109637, 0.4826329435620989, 0.4735979012080601, 0.5334806271961757, 0.5015185901096889, 0.46079751423427034, 0.46826556750706266, 0.4352776663643973, 0.4664924144744873, 0.44705796241760254, 0.42819916350500925, 0.40903408186776297, 0.41766679286956787], "val_accuracy": [0.3893333375453949, 0.5720000267028809, 0.6079999804496765, 0.67166668176651, 0.7526666522026062, 0.749666690826416, 0.7416666746139526, 0.722000002861023, 0.7593333125114441, 0.7896666526794434, 0.7839999794960022, 0.7593333125114441, 0.7609999775886536, 0.8023333549499512, 0.7883333563804626, 0.8176666498184204, 0.7879999876022339, 0.7910000085830688, 0.815666675567627, 0.8159999847412109, 0.8166666626930237]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 2, 0, 9, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 1, 2, 2, 2, 0, 1, 2, 1, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [5, 2, 3, 8, 8, 8, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [14, 25, 50, 71, 34]], "fitness": -0.5337142944335938, "mapping_values": [1, 1, 1, 0, 1, 0, 8, 8, 5, 3, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))))))), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.301756157363017, 2.299626852054921, 2.299593690143616, 2.297402914630707, 2.2960111817128275, 2.294655558298041, 2.29399709968582, 2.2902115044765754, 2.288252650313704, 2.2877036574777754, 2.2854969449535165, 2.286313247183106, 2.2833993934668633, 2.2808999344499874, 2.2793252691065615, 2.2780249014569627, 2.2767908009776128, 2.2736453725960684, 2.2732387796101428, 2.272542050643415, 2.268963391235114, 2.267739967379698, 2.2671105824504405, 2.2649654123399237, 2.263419955240627, 2.2613180024103325, 2.259764762492212, 2.2569985059683493, 2.2562918006436954, 2.2543320331150247, 2.25125655849549, 2.2497361756870067, 2.2499001943172323, 2.2483588221082282, 2.2449462186107705, 2.2436366092889473, 2.2399922079492662, 2.2401097931519884, 2.236962270176154, 2.235486000536172, 2.232762093683197, 2.2302400521661436, 2.2270299230411053, 2.2266346346417185, 2.2228396734021767, 2.2205407946668108, 2.2200594615029337, 2.2164374769576365, 2.217008859190754, 2.2148163433261376, 2.2098607241658645, 2.206047367977192, 2.2073217890344794, 2.2048429313856674, 2.199121432832802, 2.1970482739191706, 2.196023622004426, 2.19218157074943, 2.189401969807637, 2.1850821089829595, 2.183592482863983, 2.17937139150977, 2.1747440039410866, 2.174227174309975, 2.1717032445908346, 2.166550375199384, 2.1641729220958545, 2.1588124309973615, 2.155940291211117, 2.1536910549965453, 2.14847119313347, 2.1466696441228663, 2.139435461593767, 2.1384383781852816, 2.135122573922071, 2.1287166353670863, 2.1279451879197264, 2.1220673470527993, 2.1153431008000965, 2.1107899909950976, 2.1058062966379114, 2.106592072440397, 2.099519403902547, 2.095153219459583, 2.093081209338683, 2.085874997928646, 2.0809374027531837, 2.0773106347206105, 2.069738413002418, 2.06685500093943, 2.0600010618447406, 2.0566412332807125, 2.0464013743598968, 2.044690582210897, 2.03688337771081, 2.031909156705347, 2.026570060454371, 2.021909929836557, 2.013744528472164, 2.0064599432130894], "accuracy": [0.09100515395402908, 0.09787346422672272, 0.10130762308835983, 0.10791176557540894, 0.10896842926740646, 0.10817593336105347, 0.11174217611551285, 0.1224408894777298, 0.12415797263383865, 0.12415797263383865, 0.1298375427722931, 0.137630432844162, 0.13961167633533478, 0.14463083446025848, 0.15097081661224365, 0.14978206157684326, 0.1554616242647171, 0.16576409339904785, 0.16840575635433197, 0.17157575488090515, 0.17804782092571259, 0.18742570281028748, 0.18650111556053162, 0.18874652683734894, 0.1896711140871048, 0.19680359959602356, 0.1970677524805069, 0.21212521195411682, 0.2082948088645935, 0.2082948088645935, 0.22255976498126984, 0.2308809906244278, 0.23180557787418365, 0.22916391491889954, 0.2312772423028946, 0.24144762754440308, 0.24858011305332184, 0.24461762607097626, 0.24422137439250946, 0.258090078830719, 0.2595430016517639, 0.26297715306282043, 0.27037379145622253, 0.27077004313468933, 0.2735437750816345, 0.2833179235458374, 0.28239333629608154, 0.284110426902771, 0.28503501415252686, 0.2851670980453491, 0.2950733006000519, 0.3007528781890869, 0.292959988117218, 0.29705455899238586, 0.31224408745765686, 0.3129045069217682, 0.31197991967201233, 0.31699907779693604, 0.3163386583328247, 0.31620657444000244, 0.31224408745765686, 0.32426363229751587, 0.33522653579711914, 0.3345661163330078, 0.33258485794067383, 0.3343019485473633, 0.33086779713630676, 0.34143441915512085, 0.34803855419158936, 0.3457931578159332, 0.34883105754852295, 0.3509443998336792, 0.3611147701740265, 0.35847312211990356, 0.35966187715530396, 0.36824727058410645, 0.36085060238838196, 0.3671905994415283, 0.37287017703056335, 0.37683266401290894, 0.3809272348880768, 0.37828555703163147, 0.37405890226364136, 0.37828555703163147, 0.3796063959598541, 0.38660678267478943, 0.3910976052284241, 0.3875313699245453, 0.395720511674881, 0.39149385690689087, 0.4011359214782715, 0.3991546630859375, 0.4010038375854492, 0.3910976052284241, 0.4072117209434509, 0.4061550796031952, 0.40985339879989624, 0.39928674697875977, 0.4155329465866089, 0.41566503047943115], "val_loss": [1.9690701620919364, 1.9675594057355608, 1.9660369328090124, 1.9645384379795618, 1.9630470957074846, 1.9615372930254256, 1.9600438390459334, 1.9585631234305245, 1.9570637430463518, 1.9555620465959822, 1.9540613038199288, 1.9525731631687708, 1.9510554586138045, 1.9495489256722587, 1.9480383055550712, 1.9465241432189941, 1.9450122969491142, 1.9434823989868164, 1.9419398307800293, 1.9404017584664481, 1.9388408660888672, 1.9372572217668806, 1.9356649262564523, 1.9340832574026925, 1.932469367980957, 1.9308224405561174, 1.929180417742048, 1.927511283329555, 1.9258226667131697, 1.9241331645420618, 1.9224226134163993, 1.9206726891653878, 1.9188998086111886, 1.917125906263079, 1.915304252079555, 1.9134630475725447, 1.911581584385463, 1.9096719878060477, 1.9077506746564592, 1.9058193479265486, 1.9038344791957311, 1.9018077850341797, 1.89973783493042, 1.8976610728672572, 1.8955095154898507, 1.8933250563485282, 1.8911220686776298, 1.8888914925711495, 1.88663877759661, 1.8843552725655692, 1.8819939068385534, 1.879551887512207, 1.8771273749215263, 1.8746583121163505, 1.8720908846173967, 1.8694876262119837, 1.866865771157401, 1.8641768864222936, 1.8614048276628767, 1.8585678509303503, 1.8557013784136092, 1.8527449199131556, 1.849724497113909, 1.846682003566197, 1.843592916216169, 1.8404156139918737, 1.8371902874537878, 1.833869797842843, 1.8304988316127233, 1.8270794323512487, 1.8235629626682825, 1.8199894087655204, 1.816300664629255, 1.8125959123883928, 1.808805329459054, 1.8049263954162598, 1.8010572705950056, 1.7970433235168457, 1.7929683412824358, 1.7887586866106306, 1.7844928332737513, 1.7801844051906042, 1.7757950510297502, 1.771324702671596, 1.7668140956333704, 1.7621665682111467, 1.7574212891714913, 1.7526352746146066, 1.7477211952209473, 1.7427503722054618, 1.7376799583435059, 1.7325025285993303, 1.7272162437438965, 1.7218910626002721, 1.7164200033460344, 1.7108875002179826, 1.7052788053240096, 1.6995643207005091, 1.693709373474121, 1.6877933229718889], "val_accuracy": [0.049666665494441986, 0.060333333909511566, 0.06833333522081375, 0.0793333351612091, 0.09333333373069763, 0.11100000143051147, 0.12466666847467422, 0.1393333375453949, 0.15333333611488342, 0.16899999976158142, 0.18400000035762787, 0.2016666680574417, 0.21466666460037231, 0.22566667199134827, 0.2370000034570694, 0.24966666102409363, 0.26100000739097595, 0.2750000059604645, 0.289000004529953, 0.29733332991600037, 0.30933332443237305, 0.3179999887943268, 0.32600000500679016, 0.33666667342185974, 0.3440000116825104, 0.351666659116745, 0.35600000619888306, 0.3606666624546051, 0.3636666536331177, 0.3683333396911621, 0.3733333349227905, 0.3776666522026062, 0.3816666603088379, 0.38366666436195374, 0.3869999945163727, 0.3930000066757202, 0.3946666717529297, 0.39766666293144226, 0.39933332800865173, 0.4020000100135803, 0.4036666750907898, 0.406333327293396, 0.4099999964237213, 0.41233333945274353, 0.4156666696071625, 0.41999998688697815, 0.42399999499320984, 0.4269999861717224, 0.4309999942779541, 0.43299999833106995, 0.4346666634082794, 0.4359999895095825, 0.43966665863990784, 0.4416666626930237, 0.4440000057220459, 0.44699999690055847, 0.44966667890548706, 0.45133334398269653, 0.4546666741371155, 0.4580000042915344, 0.4580000042915344, 0.4633333384990692, 0.46433332562446594, 0.46533334255218506, 0.46833333373069763, 0.4713333249092102, 0.4729999899864197, 0.47466665506362915, 0.47600001096725464, 0.4776666760444641, 0.4803333282470703, 0.4816666543483734, 0.4846666753292084, 0.4866666793823242, 0.4893333315849304, 0.49033331871032715, 0.4933333396911621, 0.4959999918937683, 0.49799999594688416, 0.49933332204818726, 0.5016666650772095, 0.5043333172798157, 0.5053333044052124, 0.5099999904632568, 0.5113333463668823, 0.515666663646698, 0.5183333158493042, 0.5203333497047424, 0.5223333239555359, 0.5246666669845581, 0.5266666412353516, 0.5286666750907898, 0.5299999713897705, 0.5316666960716248, 0.5336666703224182, 0.5346666574478149, 0.5363333225250244, 0.5366666913032532, 0.5383333563804626, 0.5396666526794434]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 6, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [22, 55, 35, 73, 95], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [5, 2, 3, 8, 8, 8, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.17085714638233185, "mapping_values": [1, 1, 1, 0, 1, 0, 7, 7, 4, 3, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [4.152719915566617, 2.3166105241162067, 2.3056358817766496, 2.3046023917157243, 2.3031409205289455, 2.303126805273612, 2.30242612635565, 2.203508461187733], "accuracy": [0.20023775100708008, 0.09945846349000931, 0.09496764093637466, 0.09509972482919693, 0.09985470771789551, 0.10051512718200684, 0.10130762308835983, 0.17659489810466766], "val_loss": [1.9982506207057409, 1.9763060297284807, 1.9742908477783203, 1.9738155092511858, 1.9735298156738281, 1.9734124456133162, 1.9706317356654577, 1.9758430208478654], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.10400000214576721, 0.09833333641290665, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721, 0.10400000214576721]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0], [3, 2, 4, 2, 0, 1, 2, 2, 8, 1, 5, 8, 2, 3, 2, 6, 0, 5, 0, 2], [0, 0, 2, 2, 1, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 0, 2], [22, 55, 52, 73, 95], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 9, 3, 6, 8, 8, 9, 6, 4, 1, 8, 9, 8, 1, 1, 8, 9, 0], [3, 2, 3, 1, 0, 2, 1, 3, 0, 0], [2, 17, 99, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 16, 8, 8, 2, 8, 8, 5, 3, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), grad))), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad)))), tf.math.add(alpha, tf.math.subtract(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, alpha)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))), tf.math.add(beta, grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0820235088467598, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 1, 2, 2, 2, 3, 2, 1, 5, 8, 6, 4, 2, 6, 6, 5, 0, 2, 4, 4, 4, 8, 9], [1, 2, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [66, 55, 76, 40, 95, 1, 69], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1], [1, 6, 3, 6, 8, 8, 9, 4, 4, 1, 8, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 1, 0, 2, 1, 3, 0, 0], [80, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [9, 3, 9, 9, 2, 9], [3, 1, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 17, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 23, 23, 12, 11, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, alpha), tf.math.subtract(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, alpha))), tf.math.add(alpha, grad)))))), tf.math.add(tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.sqrt(tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0820235088467598, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [4, 2, 4, 6, 0, 3, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [31, 62, 35, 73, 95, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 5, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 1, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [0, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 7, 7, 1, 8, 8, 5, 3, 1, 1, 1, 0, 1, 0, 4, 3, 1, 2], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)), tf.math.pow(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, alpha)))), tf.math.add(alpha, grad)), tf.math.add(tf.math.add(alpha, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))))))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [27.703994104276795, 281.22472747895443, 1105.0418992844302, 2840.8132658618206, 5909.638764487849, 10693.928246325411], "accuracy": [0.09549596905708313, 0.09668471664190292, 0.09945846349000931, 0.09985470771789551, 0.10315678268671036, 0.09457138925790787], "val_loss": [72.53887721470424, 400.923331124442, 1215.2040318080358, 2753.096261160714, 5249.9521484375, 8941.07505580357], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1], [3, 2, 3, 6, 1, 2, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 2, 2, 0, 1, 2, 1, 0, 0, 3, 2, 2], [31, 55, 35, 73, 95, 1, 69], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 0, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [98, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1], [0, 3, 0, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 0, 7, 7, 4, 3, 1, 1, 1, 0, 1, 0, 5, 4, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.negative(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.negative(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06670188903808594, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 3, 2, 1, 2, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 1, 2, 2, 2, 0, 1, 2, 1, 0, 0, 3, 2, 2], [52, 55, 35, 77, 95], [0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [1, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 17, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 8, 8, 4, 4, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))))), grad), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08981640636920929, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0], [1, 2, 4, 0, 0, 1, 2, 3, 9, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 2, 2, 0, 1, 2, 2, 0, 0, 3, 2, 2], [59, 55, 35, 73, 95], [0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 5, 3, 0, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 0, 3, 3, 0, 2, 1, 3, 0, 0], [19, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 19, 19, 12, 7, 2, 7, 7, 4, 3, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.negative(alpha)))), tf.math.subtract(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, tf.math.multiply(grad, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32))))), grad))), tf.math.subtract(grad, tf.math.add(alpha, tf.math.square(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.math.sqrt(alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.add(beta, tf.math.multiply(tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.negative(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0820235088467598, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 4, 6, 8, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [77, 55, 35, 73, 95], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 5, 3, 8, 8, 8, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 5, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 22, 22, 13, 9, 3, 9, 9, 7, 2, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)), tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, alpha))))), tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32))), tf.math.add(tf.math.add(alpha, alpha), tf.math.subtract(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))))))))), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.square(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))))))))))), tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0820235088467598, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 3, 6, 0, 1, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 2, 1, 2, 0, 0, 2, 0, 0, 0, 3, 2, 2], [52, 55, 35, 77, 95], [0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [1, 2, 8, 8, 8, 8, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 2, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 5, 5, 2, 3, 0, 8, 8, 5, 3, 1, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.sqrt(tf.math.add(beta, grad)), tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32)))))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.add(beta, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1], [3, 2, 3, 2, 1, 2, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 1, 2, 2, 2, 0, 1, 2, 1, 0, 0, 3, 2, 2], [52, 55, 35, 77, 95], [0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [5, 2, 3, 8, 8, 8, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 3, 3, 0, 2, 1, 3, 0, 0], [60, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 0, 7, 7, 4, 3, 1, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.sqrt(tf.constant(8.92947854e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3024130645067213, 2.301884237769856, 2.3034922661577877, 2.3028465233710715, 2.302994276538517, 2.3033096819285466], "accuracy": [0.08994849026203156, 0.09311848133802414, 0.09074098616838455, 0.0948355570435524, 0.08981640636920929, 0.08968432247638702], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1], [3, 2, 3, 6, 1, 2, 2, 3, 2, 1, 5, 8, 9, 3, 2, 6, 0, 5, 0, 2], [1, 2, 0, 1, 2, 0, 1, 2, 0, 0, 0, 3, 2, 2], [52, 55, 35, 77, 95], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [5, 6, 3, 8, 8, 8, 6, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 0, 1, 0, 2, 1, 3, 0, 0], [98, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [3, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [45, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 5, 5, 2, 3, 1, 17, 17, 10, 7, 3, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.multiply(tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.divide_no_nan(tf.constant(9.99944439e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), alpha), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, alpha)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.3024130645067213, 2.301884237769856, 2.3034922661577877, 2.3028465233710715, 2.302994276538517, 2.3033096819285466], "accuracy": [0.08994849026203156, 0.09311848133802414, 0.09074098616838455, 0.0948355570435524, 0.08981640636920929, 0.08968432247638702], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}]