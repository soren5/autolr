[{"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 3, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [54, 74, 59, 56, 8, 79, 86, 52, 44], [0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [8, 0, 8, 2, 8, 5, 3, 2, 2, 8, 2, 1, 1, 6, 6, 8, 2, 9, 2, 9, 0, 2, 2, 0, 9], [3, 1, 1, 1, 3, 3, 2, 3, 0, 0, 5, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [77, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [48, 9, 43, 71, 34]], "fitness": -0.8377143144607544, "mapping_values": [1, 3, 3, 1, 2, 1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.157025098800659, 1.9900758266448975, 1.484965205192566, 1.0814669132232666, 0.9740024209022522, 0.8250920176506042, 0.8039234280586243, 0.6982702016830444, 0.687309205532074, 0.6962217688560486, 0.6541593074798584, 0.6155301928520203, 0.6114798188209534, 0.5990716218948364, 0.5690410733222961, 0.5599753856658936, 0.522433876991272, 0.5448400974273682, 0.5020512938499451, 0.5022940635681152, 0.5036994218826294, 0.4869716167449951, 0.4701118469238281, 0.4609696865081787, 0.4580439031124115, 0.4383966624736786, 0.4380562901496887, 0.4533652365207672, 0.41938716173171997, 0.4101652503013611, 0.4198158085346222, 0.4058745503425598, 0.41722461581230164, 0.40038007497787476, 0.39791280031204224, 0.38149258494377136, 0.3839149475097656, 0.3625325858592987, 0.37259355187416077, 0.370283305644989, 0.3665775954723358], "accuracy": [0.28041210770606995, 0.3687755763530731, 0.5099722743034363, 0.6136573553085327, 0.639809787273407, 0.6856426000595093, 0.6909258961677551, 0.7323999404907227, 0.7396644949913025, 0.7413815855979919, 0.7477215528488159, 0.7644960880279541, 0.7648923397064209, 0.7708360552787781, 0.7843085527420044, 0.7841764688491821, 0.7965922355651855, 0.7889314293861389, 0.8128384351730347, 0.8084797263145447, 0.8090080618858337, 0.8108572363853455, 0.8189142942428589, 0.8235371708869934, 0.8253863453865051, 0.8343679904937744, 0.8301413059234619, 0.8245938420295715, 0.8455950617790222, 0.8446704745292664, 0.8412362933158875, 0.8444063067436218, 0.8411042094230652, 0.8500858545303345, 0.8487650156021118, 0.8561616539955139, 0.8535200357437134, 0.86553955078125, 0.8589354157447815, 0.8618412613868713, 0.859199583530426], "val_loss": [2.1926231384277344, 1.3612151145935059, 1.3480995893478394, 0.7973322868347168, 0.7532726526260376, 0.6649767160415649, 0.6256312131881714, 0.645408034324646, 0.7040982842445374, 0.5366963148117065, 0.5748626589775085, 0.5811615586280823, 0.5283421277999878, 0.5293623208999634, 0.47892680764198303, 0.480739951133728, 0.46285873651504517, 0.4699830412864685, 0.48140811920166016, 0.44248953461647034, 0.4352845847606659, 0.4336377680301666, 0.46220800280570984, 0.4642754793167114, 0.4368521273136139, 0.4032018184661865, 0.4971764385700226, 0.4071667492389679, 0.41431859135627747, 0.405060738325119, 0.4037277102470398, 0.40889808535575867, 0.44644224643707275, 0.408081591129303, 0.3989682197570801, 0.38889142870903015, 0.38660624623298645, 0.43368807435035706, 0.4076412320137024, 0.389975905418396, 0.3872307240962982], "val_accuracy": [0.3709999918937683, 0.5276666879653931, 0.4620000123977661, 0.7043333053588867, 0.7066666483879089, 0.7630000114440918, 0.7443333268165588, 0.7513333559036255, 0.7426666617393494, 0.7946666479110718, 0.778333306312561, 0.7776666879653931, 0.7736666798591614, 0.793666660785675, 0.8273333311080933, 0.8199999928474426, 0.8336666822433472, 0.8216666579246521, 0.8209999799728394, 0.8360000252723694, 0.8420000076293945, 0.8379999995231628, 0.8136666417121887, 0.8296666741371155, 0.8473333120346069, 0.8619999885559082, 0.8009999990463257, 0.8600000143051147, 0.8450000286102295, 0.8553333282470703, 0.862333357334137, 0.8529999852180481, 0.8236666917800903, 0.8503333330154419, 0.8566666841506958, 0.8690000176429749, 0.8636666536331177, 0.8306666612625122, 0.8619999885559082, 0.859333336353302, 0.8583333492279053]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 3, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [99, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [1, 8, 2, 8, 8, 2, 3, 4, 2, 8, 9, 5, 1, 6, 6, 5, 6, 9, 2, 9, 0, 2, 2, 0, 9], [3, 1, 3, 1, 3, 3, 2, 3, 3, 0, 5, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [77, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [48, 9, 43, 71, 34]], "fitness": -0.8165714144706726, "mapping_values": [1, 3, 3, 1, 2, 1, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.sqrt(grad)), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.157238483428955, 1.991047739982605, 1.4649019241333008, 1.171199083328247, 0.8865330815315247, 0.8705434799194336, 0.7954188585281372, 0.6951616406440735, 0.743887186050415, 0.6604469418525696, 0.6584290862083435, 0.6077643632888794, 0.610018789768219, 0.6084277629852295, 0.5617647767066956, 0.5644885897636414, 0.5211079716682434, 0.5541929602622986, 0.5127081274986267, 0.4881609082221985, 0.5012015104293823, 0.48701727390289307, 0.4671115577220917, 0.46673089265823364, 0.4565449655056, 0.43862780928611755, 0.438454270362854, 0.4443327486515045, 0.4156995415687561, 0.4072473645210266, 0.4197371006011963, 0.39808762073516846, 0.4150993824005127, 0.3944132328033447, 0.4021649658679962, 0.37948039174079895, 0.386812299489975, 0.37146949768066406, 0.3718869984149933, 0.3641945719718933, 0.3574182987213135], "accuracy": [0.28001585602760315, 0.36824727058410645, 0.5105006098747253, 0.5782591700553894, 0.6667547225952148, 0.6715096831321716, 0.6884163022041321, 0.7354378700256348, 0.7190595865249634, 0.7490423917770386, 0.7512878179550171, 0.765949010848999, 0.7631752490997314, 0.7667415142059326, 0.7814027070999146, 0.7898560166358948, 0.7988376617431641, 0.7909126877784729, 0.8059701323509216, 0.8123101592063904, 0.8075551390647888, 0.8137630224227905, 0.8204993009567261, 0.8201030492782593, 0.8271034359931946, 0.8330471515655518, 0.8333113193511963, 0.8329150676727295, 0.8444063067436218, 0.844010055065155, 0.8421608805656433, 0.848368763923645, 0.8405758738517761, 0.8466516733169556, 0.8455950617790222, 0.8556333184242249, 0.8525954484939575, 0.8632941246032715, 0.8614450097084045, 0.8667283058166504, 0.8673887252807617], "val_loss": [2.1943535804748535, 1.3818769454956055, 0.9287517070770264, 0.7487754821777344, 0.7255463004112244, 0.6647450923919678, 0.6443004012107849, 0.6378986239433289, 0.5477819442749023, 0.6016839146614075, 0.5336874127388, 0.5827552676200867, 0.5588792562484741, 0.49164867401123047, 0.4941597580909729, 0.48636677861213684, 0.5204166173934937, 0.5181387662887573, 0.4546482264995575, 0.43488699197769165, 0.4558064639568329, 0.4246289134025574, 0.4667818248271942, 0.4387819468975067, 0.43018245697021484, 0.40460118651390076, 0.4935949444770813, 0.4059486389160156, 0.40795958042144775, 0.404436320066452, 0.3945191502571106, 0.40176811814308167, 0.4175228774547577, 0.41219714283943176, 0.3919467329978943, 0.38772037625312805, 0.3786311745643616, 0.43845704197883606, 0.4198649227619171, 0.38627102971076965, 0.388857901096344], "val_accuracy": [0.367000013589859, 0.5243333578109741, 0.6779999732971191, 0.721666693687439, 0.7210000157356262, 0.7450000047683716, 0.7450000047683716, 0.753333330154419, 0.7876666784286499, 0.7566666603088379, 0.7956666946411133, 0.7633333206176758, 0.762666642665863, 0.8163333535194397, 0.8100000023841858, 0.8193333148956299, 0.7979999780654907, 0.8033333420753479, 0.8186666369438171, 0.8349999785423279, 0.8176666498184204, 0.8479999899864197, 0.8216666579246521, 0.8410000205039978, 0.847000002861023, 0.8546666502952576, 0.8050000071525574, 0.859000027179718, 0.8476666808128357, 0.8600000143051147, 0.859333336353302, 0.8579999804496765, 0.8420000076293945, 0.8473333120346069, 0.862333357334137, 0.8700000047683716, 0.8653333187103271, 0.8303333520889282, 0.8443333506584167, 0.8633333444595337, 0.8633333444595337]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 3, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [99, 74, 59, 56, 8, 79, 86, 52, 44], [0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [1, 6, 2, 8, 8, 2, 3, 4, 2, 8, 9, 5, 1, 6, 6, 5, 6, 9, 2, 9, 0, 2, 2, 0, 9], [3, 2, 1, 1, 3, 3, 2, 3, 3, 0, 5, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [77, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [48, 9, 43, 71, 34]], "fitness": -0.8048571348190308, "mapping_values": [1, 3, 3, 1, 2, 1, 36, 36, 25, 11, 5, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 40, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(grad, tf.math.multiply(tf.math.pow(tf.math.add(tf.math.sqrt(tf.math.add(beta, beta)), tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), alpha), tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(alpha)), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))))), tf.math.add(beta, beta)))))))))), grad), grad)), tf.math.add(tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.1573197841644287, 1.9906091690063477, 1.5015767812728882, 1.1162692308425903, 0.9157106876373291, 0.8586537837982178, 0.7897262573242188, 0.7197957038879395, 0.720812201499939, 0.678371787071228, 0.6370026469230652, 0.6239280700683594, 0.615914523601532, 0.6127102375030518, 0.5486729145050049, 0.5624101758003235, 0.5187028050422668, 0.547252357006073, 0.5206369161605835, 0.503792405128479, 0.499029278755188, 0.49185022711753845, 0.473836749792099, 0.4617469906806946, 0.4664084017276764, 0.4352434277534485, 0.4366573691368103, 0.4399375319480896, 0.4217669665813446, 0.4097793698310852, 0.41543519496917725, 0.40386176109313965, 0.4029426574707031, 0.39143607020378113, 0.40231165289878845, 0.3798876106739044, 0.38350731134414673, 0.369136244058609, 0.38499224185943604, 0.3650660514831543, 0.37734559178352356], "accuracy": [0.28001585602760315, 0.36785101890563965, 0.509840190410614, 0.6003170013427734, 0.6509047746658325, 0.6745476126670837, 0.6930392384529114, 0.7191916704177856, 0.7239466309547424, 0.7409853339195251, 0.7578919529914856, 0.7581561207771301, 0.7552502751350403, 0.7703077793121338, 0.7902522683143616, 0.7860256433486938, 0.8006868362426758, 0.7895918488502502, 0.8031964302062988, 0.8058380484580994, 0.8092722296714783, 0.8117818236351013, 0.8171972036361694, 0.8255184292793274, 0.8255184292793274, 0.8345000743865967, 0.8355567455291748, 0.835160493850708, 0.8422929644584656, 0.8444063067436218, 0.844010055065155, 0.8438779711723328, 0.847840428352356, 0.8519350290298462, 0.8488970994949341, 0.8560295701026917, 0.8545766472816467, 0.8594637513160706, 0.8525954484939575, 0.8588033318519592, 0.857218325138092], "val_loss": [2.1944639682769775, 1.3490757942199707, 0.9028313159942627, 0.9156240224838257, 0.8106274604797363, 0.6661020517349243, 0.6192147731781006, 0.644878089427948, 0.5680535435676575, 0.5906547904014587, 0.5569132566452026, 0.5626329779624939, 0.5525245666503906, 0.5087118148803711, 0.47690925002098083, 0.48882657289505005, 0.5485020875930786, 0.5376773476600647, 0.4532041847705841, 0.4371166527271271, 0.4407595694065094, 0.4268958866596222, 0.4718908667564392, 0.48366519808769226, 0.4210887849330902, 0.4100845456123352, 0.4543246328830719, 0.4092101752758026, 0.40527448058128357, 0.4039735496044159, 0.38961103558540344, 0.3993243873119354, 0.4007774293422699, 0.42276448011398315, 0.4059242010116577, 0.3860442042350769, 0.384492427110672, 0.39122188091278076, 0.4072912931442261, 0.4051107168197632, 0.38143160939216614], "val_accuracy": [0.367000013589859, 0.5320000052452087, 0.6940000057220459, 0.6606666445732117, 0.6769999861717224, 0.7393333315849304, 0.7586666941642761, 0.7556666731834412, 0.7833333611488342, 0.7950000166893005, 0.7720000147819519, 0.7730000019073486, 0.7693333625793457, 0.8050000071525574, 0.8226666450500488, 0.8196666836738586, 0.7839999794960022, 0.7986666560173035, 0.8289999961853027, 0.8353333473205566, 0.8399999737739563, 0.8460000157356262, 0.8086666464805603, 0.8246666789054871, 0.8513333201408386, 0.8553333282470703, 0.8346666693687439, 0.859666645526886, 0.8519999980926514, 0.8583333492279053, 0.8653333187103271, 0.8529999852180481, 0.8539999723434448, 0.8456666469573975, 0.8556666374206543, 0.8679999709129333, 0.8646666407585144, 0.8606666922569275, 0.8463333249092102, 0.8560000061988831, 0.8656666874885559]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 3, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [99, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [1, 6, 2, 8, 8, 2, 3, 4, 1, 8, 9, 5, 6, 6, 5, 5, 6, 9, 2, 9, 1, 2, 5, 1, 9], [2, 1, 3, 1, 3, 3, 2, 1, 3, 0, 5, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [77, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [28, 9, 43, 71, 34]], "fitness": -0.7791428565979004, "mapping_values": [1, 1, 1, 0, 1, 1, 8, 8, 4, 4, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, alpha)))), grad)), alpha), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(1.28252101e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2921581268310547, 2.2659168243408203, 2.235369920730591, 2.1980669498443604, 2.1447036266326904, 2.0695576667785645, 1.976766586303711, 1.861304759979248, 1.7390475273132324, 1.608974575996399, 1.4944992065429688, 1.4053369760513306, 1.3251793384552002, 1.2592525482177734, 1.2012978792190552, 1.168434500694275, 1.1334270238876343, 1.0867081880569458, 1.0697578191757202, 1.0338419675827026, 1.0189660787582397, 0.9944485425949097, 0.9758525490760803, 0.961362361907959, 0.952081024646759, 0.9277613162994385, 0.9276366829872131, 0.9111854434013367, 0.8920459151268005, 0.8770684599876404, 0.8777424693107605, 0.8543698787689209, 0.865976095199585, 0.8566076159477234, 0.8375979661941528, 0.8331876993179321, 0.8410061001777649, 0.8103070259094238, 0.8175076842308044, 0.8032292723655701, 0.7965826988220215, 0.8044237494468689, 0.7905988693237305, 0.784084677696228, 0.7817848324775696, 0.784092366695404, 0.7668814063072205, 0.7695904970169067, 0.7643600106239319, 0.7656826376914978, 0.7547633647918701, 0.7420888543128967, 0.7521886825561523, 0.7359722256660461, 0.7344517707824707, 0.7469432950019836, 0.7207775712013245, 0.7257862091064453, 0.7230715155601501, 0.7215412855148315, 0.7138718962669373, 0.7202045321464539, 0.7135245203971863, 0.714104175567627, 0.7061184048652649, 0.7101724147796631, 0.6962517499923706, 0.6996670961380005, 0.700431764125824, 0.696366012096405, 0.6989676356315613], "accuracy": [0.11451591551303864, 0.186104878783226, 0.2569013237953186, 0.30445119738578796, 0.3435477614402771, 0.3871351182460785, 0.4123629629611969, 0.4468366205692291, 0.4624224007129669, 0.48646149039268494, 0.5107647776603699, 0.535332202911377, 0.5501254796981812, 0.5719191431999207, 0.5758816599845886, 0.5975432395935059, 0.609959065914154, 0.6219785809516907, 0.6268656849861145, 0.6299035549163818, 0.6375643610954285, 0.6552634835243225, 0.6524897813796997, 0.6622639298439026, 0.6600185036659241, 0.6716417670249939, 0.6720380187034607, 0.678642213344574, 0.6841896772384644, 0.6897371411323547, 0.6903975605964661, 0.6951525807380676, 0.6902654767036438, 0.6966054439544678, 0.7012283802032471, 0.7024171352386475, 0.6991150379180908, 0.7067758440971375, 0.7107383608818054, 0.7098137736320496, 0.71100252866745, 0.7059833407402039, 0.715889573097229, 0.7214370369911194, 0.7197200059890747, 0.7145687341690063, 0.7214370369911194, 0.7201162576675415, 0.7230220437049866, 0.7238145470619202, 0.7252674698829651, 0.7306828498840332, 0.7283053994178772, 0.7280412316322327, 0.7283053994178772, 0.7232862114906311, 0.7351737022399902, 0.7353057861328125, 0.7376832365989685, 0.739400327205658, 0.7366266250610352, 0.7371549606323242, 0.7403249144554138, 0.737947404384613, 0.7446836829185486, 0.7506273984909058, 0.7449478507041931, 0.7450799345970154, 0.7434949278831482, 0.743891179561615, 0.7456082701683044], "val_loss": [2.2701003551483154, 2.2389273643493652, 2.2003002166748047, 2.1488680839538574, 2.078219175338745, 1.9822460412979126, 1.8583601713180542, 1.7112141847610474, 1.557192087173462, 1.4101388454437256, 1.280918002128601, 1.1784480810165405, 1.0957902669906616, 1.0276387929916382, 0.9719409346580505, 0.9292159080505371, 0.8924497365951538, 0.8607451915740967, 0.8338950276374817, 0.8113605380058289, 0.7908933758735657, 0.7737952470779419, 0.757591962814331, 0.7431960701942444, 0.730951189994812, 0.7190506458282471, 0.711352527141571, 0.6997194290161133, 0.6874555945396423, 0.6802889704704285, 0.6731929779052734, 0.6636768579483032, 0.6589446663856506, 0.6535239219665527, 0.6473127603530884, 0.6403675675392151, 0.6357477307319641, 0.630141019821167, 0.6277632117271423, 0.6213556528091431, 0.6180337071418762, 0.612429678440094, 0.608467698097229, 0.6041920781135559, 0.5996221303939819, 0.5956996083259583, 0.5929810404777527, 0.5923631191253662, 0.5875176787376404, 0.5837625861167908, 0.5795053839683533, 0.577674388885498, 0.5767770409584045, 0.5713503956794739, 0.569044291973114, 0.5684430003166199, 0.5658616423606873, 0.5635671615600586, 0.5609224438667297, 0.5590168833732605, 0.5585221648216248, 0.5532231330871582, 0.5530280470848083, 0.5503140687942505, 0.5494326949119568, 0.5459290742874146, 0.5444347858428955, 0.5421233773231506, 0.5394574999809265, 0.5382887125015259, 0.5362945199012756], "val_accuracy": [0.2639999985694885, 0.38499999046325684, 0.4363333284854889, 0.46833333373069763, 0.4973333477973938, 0.5346666574478149, 0.5490000247955322, 0.5709999799728394, 0.5886666774749756, 0.6116666793823242, 0.6543333530426025, 0.6663333177566528, 0.6800000071525574, 0.687666654586792, 0.699999988079071, 0.7116666436195374, 0.7126666903495789, 0.7210000157356262, 0.7236666679382324, 0.7266666889190674, 0.7333333492279053, 0.7400000095367432, 0.7390000224113464, 0.7419999837875366, 0.7476666569709778, 0.749666690826416, 0.753333330154419, 0.7559999823570251, 0.7576666474342346, 0.7583333253860474, 0.7639999985694885, 0.765333354473114, 0.7676666378974915, 0.7689999938011169, 0.7736666798591614, 0.7723333239555359, 0.7730000019073486, 0.7793333530426025, 0.777999997138977, 0.778333306312561, 0.7770000100135803, 0.7816666960716248, 0.7760000228881836, 0.7823333144187927, 0.7860000133514404, 0.7836666703224182, 0.7816666960716248, 0.7799999713897705, 0.7866666913032532, 0.7886666655540466, 0.7896666526794434, 0.7900000214576721, 0.7950000166893005, 0.7906666398048401, 0.7903333306312561, 0.793666660785675, 0.7953333258628845, 0.7916666865348816, 0.7953333258628845, 0.8009999990463257, 0.796999990940094, 0.796999990940094, 0.8006666898727417, 0.8013333082199097, 0.8016666769981384, 0.8043333292007446, 0.8006666898727417, 0.8026666641235352, 0.7990000247955322, 0.8029999732971191, 0.800000011920929]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 3, 4, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [99, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [2, 4, 2, 2, 8, 5, 3, 2, 8, 8, 8, 5, 6, 6, 9, 8, 4, 6, 2, 9, 0, 2, 2, 0, 9], [3, 3, 1, 2, 3, 0, 2, 3, 3, 0, 3, 1, 4, 1, 4], [77, 82, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [70, 9, 43, 71, 34]], "fitness": -0.40771427750587463, "mapping_values": [1, 7, 7, 3, 4, 1, 11, 11, 6, 5, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(alpha, tf.math.pow(grad, grad)), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.sqrt(grad))), tf.math.square(alpha)), tf.math.add(beta, beta))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.5294673442840576, 2.8624467849731445, 2.3019204139709473, 2.7674145698547363, 2.2109298706054688, 1.98196280002594, 2.36301589012146, 1.8692271709442139, 1.7281843423843384, 1.5628209114074707, 1.4912055730819702, 1.5227296352386475, 1.3201806545257568, 1.775161623954773, 2.3770389556884766, 1.6651173830032349, 1.3746323585510254, 1.312791109085083], "accuracy": [0.189274862408638, 0.2156914472579956, 0.12217672914266586, 0.14700831472873688, 0.19442610442638397, 0.3583410382270813, 0.29982829093933105, 0.3801347315311432, 0.4329679012298584, 0.486989825963974, 0.4998018741607666, 0.49266940355300903, 0.5352001190185547, 0.41143837571144104, 0.2211068570613861, 0.43309998512268066, 0.5262184739112854, 0.5457667708396912], "val_loss": [1.7881630659103394, 2.3404769897460938, 2.081005096435547, 2.2962076663970947, 1.860532283782959, 3.0308167934417725, 1.5330922603607178, 1.3447353839874268, 1.4287559986114502, 1.1802260875701904, 1.178033709526062, 1.2752704620361328, 0.9583315253257751, 2.152109146118164, 1.615786075592041, 1.2698237895965576, 1.123981237411499, 1.1885684728622437], "val_accuracy": [0.312666654586792, 0.1003333330154419, 0.34466665983200073, 0.15966667234897614, 0.35466668009757996, 0.5163333415985107, 0.4560000002384186, 0.5506666898727417, 0.5726666450500488, 0.621666669845581, 0.593666672706604, 0.5106666684150696, 0.6616666913032532, 0.26733332872390747, 0.46933332085609436, 0.5889999866485596, 0.6366666555404663, 0.5786666870117188]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 3, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 1, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [35, 74, 59, 56, 8, 79, 86, 52, 44], [0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 4, 2, 2, 8, 5, 3, 2, 8, 2, 9, 5, 6, 6, 9, 8, 4, 6, 2, 9, 0, 2, 2, 0, 9], [3, 0, 1, 0, 3, 3, 2, 2, 1, 3, 5, 1, 4, 1, 4, 2, 0, 1, 0, 0, 4, 1, 3, 2, 3, 0, 1, 1, 1, 5, 4, 4, 5, 3, 2, 5, 5, 4, 5, 2, 3, 2], [77, 82, 50, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [70, 9, 43, 71, 34]], "fitness": -0.38942858576774597, "mapping_values": [1, 3, 3, 1, 2, 1, 36, 36, 25, 11, 6, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.square(grad))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.add(beta, alpha)))), tf.math.add(tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.square(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32), grad), grad))), beta)), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(beta, tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), alpha)))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(grad, grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.5295047760009766, 2.233567714691162, 2.3058600425720215, 2.5906527042388916, 2.3105080127716064, 2.271108388900757, 2.111367702484131, 1.9586538076400757, 2.0417234897613525, 2.1047213077545166, 2.1370315551757812, 2.303088426589966], "accuracy": [0.18914277851581573, 0.20895522832870483, 0.19812442362308502, 0.1958790123462677, 0.10408136248588562, 0.15321621298789978, 0.2550521790981293, 0.3346982002258301, 0.2837141752243042, 0.31739532947540283, 0.21093647181987762, 0.10830801725387573], "val_loss": [1.797041654586792, 1.964761734008789, 2.2721011638641357, 2.316290855407715, 2.298271417617798, 1.9309518337249756, 1.7258951663970947, 2.092546224594116, 1.7760322093963623, 2.2836315631866455, 2.3067281246185303, 2.1648452281951904], "val_accuracy": [0.32100000977516174, 0.26600000262260437, 0.10400000214576721, 0.10300000011920929, 0.16433332860469818, 0.3543333411216736, 0.42266666889190674, 0.2669999897480011, 0.40066665410995483, 0.11133333295583725, 0.09933333098888397, 0.31166666746139526]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 3, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 2, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [99, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 4, 2, 2, 8, 5, 3, 2, 8, 3, 9, 5, 6, 6, 8, 2, 4, 6, 2, 9, 0, 2, 2, 0, 9], [3, 3, 1, 3, 3, 2, 2, 3, 3, 0, 3, 1, 4, 1, 4], [77, 26, 98, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [3, 9, 43, 71, 34]], "fitness": -0.16857142746448517, "mapping_values": [1, 6, 6, 3, 3, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.multiply(tf.math.add(alpha, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, grad)))), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302999258041382, 2.30326247215271, 2.3033769130706787, 2.3035264015197754, 2.3029346466064453, 2.300629138946533, 2.301825523376465, 2.3016834259033203, 2.3025097846984863, 2.3007965087890625, 2.3021483421325684, 2.3018953800201416, 2.3007993698120117, 2.3014535903930664, 2.2996456623077393, 2.300248384475708, 2.299919843673706, 2.298621416091919, 2.301004409790039, 2.2985169887542725, 2.3011443614959717, 2.299269676208496, 2.2998690605163574, 2.2993907928466797, 2.29886794090271, 2.299121141433716, 2.298945665359497, 2.2996959686279297, 2.2987565994262695, 2.2989003658294678, 2.2982726097106934, 2.2981390953063965, 2.299116849899292, 2.2987935543060303, 2.2968461513519287, 2.2978763580322266, 2.297304630279541, 2.29730224609375, 2.2977263927459717, 2.2961981296539307, 2.2963223457336426, 2.2955939769744873, 2.2949209213256836, 2.2959353923797607, 2.294987201690674, 2.29592227935791, 2.2962498664855957, 2.29398775100708, 2.294640064239502, 2.2958545684814453, 2.295776128768921, 2.2938239574432373, 2.294614791870117, 2.291994571685791, 2.2932937145233154, 2.294351577758789, 2.2924106121063232, 2.29193115234375, 2.2933599948883057, 2.2921957969665527, 2.2933504581451416, 2.2931222915649414, 2.2916171550750732, 2.291633367538452, 2.2909047603607178, 2.2923388481140137, 2.2896997928619385, 2.2915515899658203, 2.2919275760650635, 2.291334390640259, 2.2915759086608887, 2.291480541229248, 2.2909510135650635, 2.290769338607788, 2.2902867794036865, 2.290412425994873, 2.288729190826416, 2.2891130447387695, 2.2907187938690186, 2.2902514934539795, 2.2889370918273926, 2.2887308597564697, 2.2877659797668457, 2.2895164489746094, 2.2898242473602295, 2.289494752883911, 2.288358449935913, 2.286984443664551, 2.287034749984741, 2.288184404373169, 2.2877283096313477, 2.288320541381836, 2.2884063720703125, 2.287102699279785, 2.287411689758301, 2.287015676498413, 2.287498950958252, 2.2855374813079834, 2.286947727203369, 2.287860155105591], "accuracy": [0.08625016361474991, 0.09100515395402908, 0.09430722147226334, 0.08994849026203156, 0.08955223858356476, 0.08836349099874496, 0.09853387624025345, 0.09642054885625839, 0.09826971590518951, 0.09457138925790787, 0.09126931428909302, 0.09536388516426086, 0.09589222073554993, 0.09179764986038208, 0.09787346422672272, 0.09008057415485382, 0.09959053993225098, 0.10130762308835983, 0.09377889335155487, 0.10328886657953262, 0.09377889335155487, 0.09998679161071777, 0.09893012791872025, 0.0944393053650856, 0.1022322028875351, 0.09840179979801178, 0.1002509593963623, 0.09708096832036972, 0.09985470771789551, 0.10077928751707077, 0.09879804402589798, 0.09893012791872025, 0.09972262382507324, 0.10236428678035736, 0.11227050423622131, 0.10342095047235489, 0.10289261490106583, 0.10579843819141388, 0.10368511080741882, 0.10976093262434006, 0.10500594228506088, 0.10606260597705841, 0.10738343745470047, 0.10751552134752274, 0.11028926074504852, 0.10434553027153015, 0.10487385839223862, 0.11636507511138916, 0.11213842034339905, 0.10487385839223862, 0.1072513535618782, 0.11306300014257431, 0.11200633645057678, 0.11319508403539658, 0.11015717685222626, 0.11068551242351532, 0.11121384054422379, 0.11702549457550049, 0.11266675591468811, 0.11834631860256195, 0.11266675591468811, 0.11161009222269058, 0.11662924289703369, 0.11332716792821884, 0.12178047746419907, 0.11887465417385101, 0.1208558976650238, 0.12138422578573227, 0.11755382269620895, 0.11927089840173721, 0.1216483935713768, 0.11570466309785843, 0.12217672914266586, 0.12019548565149307, 0.1278562992811203, 0.11913882195949554, 0.12693171203136444, 0.12653546035289764, 0.12442214041948318, 0.1220446452498436, 0.11979923397302628, 0.12415797263383865, 0.1290450394153595, 0.12415797263383865, 0.12257297337055206, 0.12508255243301392, 0.1254788041114807, 0.1294412910938263, 0.1328754425048828, 0.13247919082641602, 0.12455421686172485, 0.1254788041114807, 0.12402588874101639, 0.12812046706676483, 0.1282525360584259, 0.1344604343175888, 0.13168670237064362, 0.13538502156734467, 0.1278562992811203, 0.1270637959241867], "val_loss": [2.298969030380249, 2.298776626586914, 2.298584461212158, 2.2983949184417725, 2.298206329345703, 2.298016309738159, 2.2978267669677734, 2.297637701034546, 2.2974486351013184, 2.29725980758667, 2.2970712184906006, 2.2968814373016357, 2.296694040298462, 2.2965025901794434, 2.2963128089904785, 2.296123743057251, 2.2959351539611816, 2.295746326446533, 2.2955574989318848, 2.2953689098358154, 2.2951817512512207, 2.294991970062256, 2.2948033809661865, 2.2946152687072754, 2.2944281101226807, 2.294239044189453, 2.294050693511963, 2.2938625812530518, 2.2936761379241943, 2.2934885025024414, 2.2933013439178467, 2.293112277984619, 2.292924404144287, 2.2927377223968506, 2.2925493717193604, 2.292361259460449, 2.2921741008758545, 2.291985511779785, 2.2917978763580322, 2.2916102409362793, 2.29142165184021, 2.291236400604248, 2.291048765182495, 2.2908620834350586, 2.2906763553619385, 2.290491819381714, 2.2903051376342773, 2.2901194095611572, 2.289931058883667, 2.2897448539733887, 2.2895572185516357, 2.2893688678741455, 2.2891836166381836, 2.2889957427978516, 2.2888100147247314, 2.2886219024658203, 2.2884349822998047, 2.2882437705993652, 2.2880585193634033, 2.2878732681274414, 2.2876877784729004, 2.2875022888183594, 2.2873165607452393, 2.2871291637420654, 2.2869417667388916, 2.2867562770843506, 2.286569595336914, 2.2863848209381104, 2.2861993312835693, 2.286013126373291, 2.285825252532959, 2.285637617111206, 2.2854533195495605, 2.2852652072906494, 2.2850804328918457, 2.2848944664001465, 2.2847044467926025, 2.2845189571380615, 2.2843308448791504, 2.2841460704803467, 2.2839577198028564, 2.2837700843811035, 2.283583879470825, 2.283397912979126, 2.2832131385803223, 2.2830257415771484, 2.2828400135040283, 2.2826523780822754, 2.2824673652648926, 2.2822818756103516, 2.2820944786071777, 2.2819066047668457, 2.281719446182251, 2.281531810760498, 2.2813446521759033, 2.2811601161956787, 2.2809743881225586, 2.2807865142822266, 2.280599355697632, 2.2804131507873535], "val_accuracy": [0.038333334028720856, 0.039000000804662704, 0.03933333232998848, 0.03966666758060455, 0.04100000113248825, 0.041333332657814026, 0.04233333468437195, 0.04233333468437195, 0.0430000014603138, 0.04399999976158142, 0.04633333161473274, 0.046666666865348816, 0.047333333641290665, 0.04800000041723251, 0.04866666719317436, 0.04933333396911621, 0.05000000074505806, 0.050333332270383835, 0.05133333429694176, 0.052000001072883606, 0.052666667848825455, 0.05400000140070915, 0.054666668176651, 0.056333333253860474, 0.05766666680574417, 0.05900000035762787, 0.060333333909511566, 0.06233333423733711, 0.06300000101327896, 0.06366666406393051, 0.06466666609048843, 0.06533333659172058, 0.06666667014360428, 0.06866666674613953, 0.07100000232458115, 0.07233333587646484, 0.0729999989271164, 0.07533333450555801, 0.07633333653211594, 0.07900000363588333, 0.08166666328907013, 0.08266666531562805, 0.08433333039283752, 0.0860000029206276, 0.08666666597127914, 0.08833333104848862, 0.09066666662693024, 0.09133332967758179, 0.09266666322946548, 0.09399999678134918, 0.09466666728258133, 0.09566666930913925, 0.09733333438634872, 0.09833333641290665, 0.10100000351667404, 0.10266666859388351, 0.10400000214576721, 0.10566666722297668, 0.10566666722297668, 0.10766666382551193, 0.109333336353302, 0.11166666448116302, 0.1120000034570694, 0.11266666650772095, 0.11533333361148834, 0.11699999868869781, 0.11766666918992996, 0.11999999731779099, 0.12200000137090683, 0.12333333492279053, 0.12399999797344208, 0.12533333897590637, 0.12733332812786102, 0.12833333015441895, 0.1289999932050705, 0.13066667318344116, 0.13300000131130219, 0.13466666638851166, 0.1353333294391632, 0.13633333146572113, 0.13866665959358215, 0.14033333957195282, 0.140666663646698, 0.14366666972637177, 0.1459999978542328, 0.1483333259820938, 0.1496666669845581, 0.1509999930858612, 0.1536666601896286, 0.15466666221618652, 0.15666666626930237, 0.1589999943971634, 0.1616666615009308, 0.1653333306312561, 0.16733333468437195, 0.16833333671092987, 0.16899999976158142, 0.1706666648387909, 0.1720000058412552, 0.17399999499320984]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 3, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [99, 74, 59, 56, 8, 79, 86, 52, 44], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [1, 4, 0, 5, 2, 4, 6, 6, 4, 8, 9, 2, 8, 6, 1, 3, 0, 1, 6, 2, 0, 4, 0, 4, 1, 3, 2, 9, 6, 0, 9, 5, 3, 8, 1, 7, 1, 7, 5, 1, 7, 8, 1, 3, 2, 0, 9, 5, 2, 3, 8, 9, 3, 0, 9, 3, 5, 5, 8, 0, 3, 6], [3, 3, 1, 0, 3, 3, 2, 2, 1, 3, 5, 1, 4, 1, 4, 2, 0, 1, 0, 0, 4, 1, 3, 2, 3, 0, 1, 1, 1, 5, 4, 4, 5, 3, 2, 5, 5, 4, 5, 2, 3, 2], [77, 82, 50, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [6, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [48, 33, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 21, 21, 13, 8, 2, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.square(tf.math.add(beta, grad)))), tf.math.add(grad, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(alpha, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.pow(grad, grad), tf.math.sqrt(tf.math.add(beta, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(tf.math.add(beta, tf.math.sqrt(beta)), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.divide_no_nan(sigma, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09430722147226334, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 3, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [99, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [1, 2, 2, 4, 1, 4, 3, 1, 2, 8, 5, 6, 2, 4, 8, 2, 9, 4, 2, 6, 0, 3, 2, 2, 9, 3, 2, 1, 9, 2, 8, 2, 3, 4, 2, 8, 4, 7, 7, 3, 2, 2, 2, 8, 4, 5, 8, 5, 4, 2, 4, 8, 9, 3, 4, 1, 9, 0, 9, 0, 8, 3, 5, 6, 2, 9, 6, 8, 0], [3, 3, 1, 3, 3, 3, 2, 2, 3, 3, 5, 1, 4, 1, 4, 2, 0, 1, 0, 3, 4, 1, 3, 2, 3, 0, 1, 1, 1, 1, 4, 4, 5, 3, 2, 5, 5, 2, 5, 2, 3, 2], [18, 82, 50, 16, 35, 78, 62, 20, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 5, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [48, 33, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 94, 94, 56, 38, 7, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 58, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.pow(grad, tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.add(tf.math.sqrt(grad), tf.math.square(alpha))), tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.pow(tf.math.sqrt(tf.math.add(beta, tf.math.add(grad, grad))), grad)), tf.math.add(beta, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32))), tf.math.add(beta, beta)))), tf.math.add(beta, beta))), grad)), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.negative(tf.math.multiply(grad, alpha))), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, grad), alpha), tf.math.add(beta, grad))))), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(beta, tf.math.add(tf.math.subtract(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))), tf.math.add(beta, tf.math.add(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, alpha), tf.math.add(tf.math.sqrt(tf.math.pow(tf.math.add(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), grad), tf.math.add(tf.math.multiply(grad, tf.math.add(alpha, tf.math.add(beta, grad))), tf.math.add(beta, beta)))), tf.math.add(tf.math.add(grad, tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.square(alpha))))))), tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.pow(tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, alpha)), tf.math.pow(tf.math.sqrt(alpha), grad)))))))))), tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, beta)))), grad)))))), tf.math.add(beta, grad))), tf.math.add(beta, beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.square(tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [98199789568.0, Infinity, 2.3640875816345215, 2.403573513031006, 2.4786181449890137, 2.6335079669952393], "accuracy": [0.054154008626937866, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [Infinity, 2.3501012325286865, 2.3798961639404297, 2.43497371673584, 2.5452218055725098, 2.7803332805633545], "val_accuracy": [0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 3, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [99, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 4, 0, 2, 2, 2, 6, 6, 2, 8, 9, 2, 8, 6, 1, 3, 0, 1, 6, 2, 0, 4, 0, 4, 1, 3, 2, 9, 6, 0, 9, 5, 3, 8, 1, 7, 1, 7, 5, 1, 7, 8, 1, 3, 2, 0, 9, 5, 2, 3, 8, 9, 3, 0, 9, 3, 5, 5, 8, 0, 3, 6], [3, 0, 1, 3, 3, 3, 2, 3, 3, 3, 5, 1, 0, 1, 3, 0, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [18, 16, 50, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [2, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [48, 9, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 22, 22, 13, 9, 2, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, grad), tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(tf.math.add(tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, alpha), tf.math.divide_no_nan(tf.math.add(beta, grad), grad))), grad)), tf.math.add(tf.math.sqrt(tf.constant(1.14904229e-03, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, tf.math.sqrt(beta)), grad)))))), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(beta)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10157178342342377, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 3, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [99, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [1, 4, 5, 2, 8, 5, 3, 2, 2, 8, 9, 5, 1, 6, 6, 8, 1, 9, 2, 9, 0, 2, 2, 0, 9], [3, 0, 2, 1, 3, 1, 2, 3, 3, 0, 5, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [91, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [9, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [48, 9, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 10, 10, 6, 4, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(grad)), tf.math.add(beta, tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32))))), tf.math.square(tf.math.add(beta, beta)))), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3025310039520264, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 3, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [1, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [99, 74, 59, 56, 8, 79, 86, 52, 44], [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [1, 8, 2, 8, 8, 2, 3, 4, 2, 5, 9, 5, 1, 6, 6, 8, 9, 9, 2, 9, 0, 2, 2, 0, 9], [3, 3, 4, 0, 3, 3, 2, 2, 1, 3, 5, 1, 4, 1, 4, 2, 0, 1, 0, 0, 4, 1, 3, 2, 3, 0, 1, 1, 1, 5, 4, 4, 5, 3, 2, 5, 5, 4, 5, 2, 3, 2], [77, 82, 50, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [9, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [48, 33, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 8, 8, 5, 3, 0, 3, 2, 1, 1, 0, 1, 1, 0, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.sqrt(tf.math.add(tf.math.add(beta, tf.math.sqrt(grad)), tf.math.sqrt(grad))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3025310039520264, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824, 2.3025851249694824], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615, 2.3025853633880615], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 3, 4, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [99, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [2, 2, 9, 4, 1, 4, 3, 0, 2, 8, 9, 6, 1, 4, 8, 2, 9, 4, 2, 6, 0, 3, 2, 2, 9, 3, 2, 1, 9, 2, 7, 2, 2, 4, 2, 8, 4, 7, 7, 3, 8, 4, 1, 8, 4, 5, 5, 5, 4, 2, 4, 8, 9, 3, 4, 1, 4, 0, 5, 0, 8, 3, 5, 6, 2, 9, 6, 8, 0], [3, 3, 0, 3, 2, 3, 2, 0, 3, 0, 3, 0, 4, 1, 4], [77, 3, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 2, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [65, 9, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 16, 16, 9, 7, 2, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.add(tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.subtract(grad, tf.math.pow(tf.math.add(beta, tf.math.multiply(tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32), grad)), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.add(beta, tf.math.add(beta, grad))))))))))), beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 3, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 2, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [99, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [2, 1, 2, 2, 8, 5, 3, 2, 8, 8, 9, 5, 6, 6, 9, 8, 4, 6, 2, 9, 0, 2, 2, 0, 9], [3, 3, 1, 2, 3, 0, 2, 3, 3, 0, 3, 1, 4, 1, 4], [77, 82, 50, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [48, 33, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 11, 11, 6, 5, 0, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), grad)), alpha), tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, beta)))))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0750231146812439, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 3, 4, 6, 2, 2, 9, 0, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [35, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [1, 4, 2, 2, 8, 5, 3, 2, 8, 8, 9, 3, 6, 6, 6, 8, 4, 9, 2, 5, 0, 2, 2, 0, 9], [3, 3, 0, 3, 3, 3, 2, 0, 3, 0, 3, 1, 4, 1, 4], [89, 3, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [70, 9, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 16, 16, 10, 6, 3, 28, 28, 18, 10, 5, 1, 1, 0, 1, 0, 11, 6, 5, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(alpha, tf.math.pow(tf.math.divide_no_nan(tf.math.add(tf.math.add(alpha, grad), tf.math.add(tf.math.add(alpha, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.negative(tf.math.add(alpha, grad))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.square(grad))), grad)), tf.math.multiply(tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, grad), tf.math.sqrt(tf.math.sqrt(tf.math.add(beta, tf.constant(8.32200197e-05, shape=shape, dtype=tf.float32))))))), tf.math.multiply(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.divide_no_nan(grad, beta))), tf.math.add(beta, tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.math.multiply(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(sigma, beta), tf.math.square(beta)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 3, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [99, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [1, 4, 2, 2, 8, 5, 3, 2, 8, 8, 9, 9, 1, 6, 6, 8, 4, 9, 2, 5, 0, 2, 2, 0, 9], [3, 3, 3, 1, 3, 3, 2, 1, 3, 0, 5, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [77, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [13, 9, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 21, 21, 14, 7, 2, 1, 1, 0, 1, 0, 11, 6, 5, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.square(grad))), grad)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(tf.math.add(beta, tf.math.sqrt(tf.math.sqrt(alpha))), tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, grad), grad), beta))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(tf.math.multiply(tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(sigma, beta), tf.math.square(beta)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10011887550354004, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 3, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [99, 74, 59, 56, 8, 79, 86, 52, 44], [0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [1, 0, 8, 2, 8, 5, 3, 2, 2, 8, 2, 1, 1, 6, 6, 8, 9, 9, 2, 9, 0, 2, 2, 0, 9], [3, 2, 5, 1, 3, 3, 2, 3, 3, 0, 5, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [77, 22, 51, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [95, 9, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 8, 8, 5, 3, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.sqrt(tf.math.add(beta, grad)))), tf.math.add(tf.math.sqrt(beta), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08347642421722412, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 3, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [99, 74, 59, 56, 8, 79, 86, 52, 44], [0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [1, 6, 2, 8, 8, 2, 3, 4, 2, 8, 9, 5, 1, 6, 4, 5, 6, 9, 2, 9, 0, 5, 2, 0, 9, 9], [3, 0, 3, 1, 3, 3, 2, 3, 3, 0, 5, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [18, 82, 76, 61, 35, 66, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 0, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [48, 9, 43, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 35, 35, 26, 9, 6, 1, 1, 0, 1, 0, 3, 1, 2, 1], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.math.add(tf.math.multiply(tf.math.pow(tf.math.add(grad, tf.math.sqrt(tf.math.add(beta, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)))), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)), grad), tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, tf.math.square(alpha)), tf.math.add(beta, grad)), tf.math.divide_no_nan(tf.math.add(beta, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)), tf.math.add(tf.math.add(beta, grad), beta)))), tf.constant(9.10782940e-01, shape=shape, dtype=tf.float32)))))))), tf.math.negative(tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))), grad))))), grad)), tf.math.add(beta, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0750231146812439, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 3, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [1, 0, 8, 2, 8, 5, 3, 2, 2, 8, 2, 1, 1, 6, 6, 8, 9, 9, 2, 9, 0, 2, 2, 0, 9], [3, 4, 3, 1, 3, 3, 2, 3, 3, 0, 5, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [18, 82, 50, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 1, 3, 2, 1, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [48, 9, 43, 71, 34]], "fitness": -0.03857142850756645, "mapping_values": [1, 1, 1, 0, 1, 1, 5, 5, 3, 2, 0, 3, 2, 1, 1, 0, 4, 2, 2, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.sqrt(grad))), tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(alpha))", "other_info": {"loss": [2.3030714988708496, 2.3035104274749756, 2.3038034439086914, 2.304119110107422, 2.303697347640991, 2.301572561264038], "accuracy": [0.08625016361474991, 0.09047681838274002, 0.09272222965955734, 0.08875974267721176, 0.08809932321310043, 0.08625016361474991], "val_loss": [2.299161195755005, 2.299161195755005, 2.299161195755005, 2.299161195755005, 2.299161195755005, 2.299161195755005], "val_accuracy": [0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901, 0.03766666725277901]}}, {"genotype": [[0], [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 3, 5, 8, 2, 2, 9, 8, 8, 0, 8, 8, 3, 9, 5, 9, 3, 2, 0, 5, 5, 2, 5, 2, 1, 8], [0, 3, 2, 2, 0, 2, 0, 2, 2, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [99, 74, 59, 56, 8, 79, 86, 52, 44], [1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0], [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1], [3, 6, 4, 5, 8, 2, 0, 4, 2, 8, 9, 5, 1, 6, 6, 5, 6, 9, 2, 9, 0, 2, 2, 0, 9], [0, 2, 1, 3, 3, 3, 2, 3, 3, 0, 5, 1, 0, 1, 4, 5, 5, 0, 5, 2, 3, 3, 4, 3, 3, 2, 3, 3, 3, 0, 5, 1, 1, 0, 3, 5, 1, 3, 3, 0, 4, 0], [77, 82, 50, 61, 35, 78, 62, 1, 12, 42, 17, 61, 53, 1, 50], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1], [3, 0, 3, 3, 7, 5, 3, 1, 4, 3, 9, 2, 0, 2, 8, 6], [3, 3, 3, 2, 2, 0, 1, 1, 0, 3, 2, 2, 3, 3, 2, 0, 3, 2, 0, 2, 0], [48, 9, 43, 71, 34]], "fitness": -0.03685714304447174, "mapping_values": [1, 1, 1, 0, 1, 1, 17, 17, 11, 6, 2, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.divide_no_nan(tf.math.pow(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)))), tf.math.sqrt(beta)), tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha))), grad))), tf.math.pow(tf.math.add(grad, grad), tf.math.sqrt(tf.math.add(beta, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(sigma, tf.math.negative(sigma))", "other_info": {"loss": [2.303553819656372, 2.3055267333984375, 2.3080263137817383, 2.3105721473693848, 2.313117742538452, 2.3141775131225586, 2.31923770904541, 2.3251659870147705, 2.3337771892547607, 2.3450629711151123, 2.3846030235290527, 499977679798272.0, 3.4457855224609375, 7.770469665527344, 13.493875503540039], "accuracy": [0.08677849918603897, 0.08849557489156723, 0.08730682730674744, 0.07924976944923401, 0.07924976944923401, 0.07396645098924637, 0.07806102186441422, 0.07753269374370575, 0.07436270266771317, 0.07436270266771317, 0.08017434924840927, 0.09694888442754745, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.300341844558716, 2.301978588104248, 2.3039321899414062, 2.3061628341674805, 2.308634042739868, 2.311633348464966, 2.314945936203003, 2.3195347785949707, 2.3272483348846436, 2.3428988456726074, 2.428650379180908, 2.754833936691284, 5.4329986572265625, 11.084394454956055, 16.842823028564453], "val_accuracy": [0.03099999949336052, 0.02500000037252903, 0.029666665941476822, 0.033666666597127914, 0.041999999433755875, 0.050999999046325684, 0.06800000369548798, 0.08699999749660492, 0.09833333641290665, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929, 0.10300000011920929]}}]