[{"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 2, 4, 5, 3, 2, 1, 2, 1, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 35, 27, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.7951428294181824, "mapping_values": [1, 24, 24, 14, 10, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(tf.math.subtract(tf.math.add(alpha, grad), grad), grad))))), tf.math.square(tf.math.add(tf.math.add(alpha, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), alpha)))), tf.math.multiply(tf.math.add(alpha, grad), grad)))))), tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0868335317201807, 1.876833626906224, 1.466226708950415, 1.1145450835293467, 0.9214413665493859, 0.8625986199919983, 0.791384590449917, 0.769952762293825, 0.7426005412228214, 0.6739277034592493, 0.6838557397794919, 0.6256953786077941, 0.6243461652312847, 0.6003939128271608, 0.5898102457812119, 0.5689274770015927, 0.5592954707277953, 0.5473220223260042], "accuracy": [0.29824328422546387, 0.43045833706855774, 0.5033681392669678, 0.5926561951637268, 0.6616035103797913, 0.6804913282394409, 0.6966054439544678, 0.7120591998100281, 0.7174745798110962, 0.7423061728477478, 0.7428345084190369, 0.7635715007781982, 0.7630431652069092, 0.7728173136711121, 0.7709681391716003, 0.7891955971717834, 0.7836481332778931, 0.796328067779541], "val_loss": [1.087817566735404, 1.1144129548754012, 0.873228771345956, 0.6523013114929199, 0.8133461475372314, 0.7557629346847534, 0.5450494459697178, 0.6254144396100726, 0.5124504906790597, 0.5538329396929059, 0.4790210042681013, 0.46221217938831877, 0.45694723299571444, 0.5165695803506034, 0.43749055692127775, 0.4440463440758841, 0.4504824365888323, 0.48847648075648714], "val_accuracy": [0.621999979019165, 0.49300000071525574, 0.6299999952316284, 0.7223333120346069, 0.6503333449363708, 0.6690000295639038, 0.7630000114440918, 0.7163333296775818, 0.7603333592414856, 0.7426666617393494, 0.7919999957084656, 0.793666660785675, 0.812666654586792, 0.7646666765213013, 0.8119999766349792, 0.8066666722297668, 0.7993333339691162, 0.7763333320617676]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [3, 3, 3, 6, 6, 2, 2, 5, 9, 1, 4, 2, 6, 2, 2, 5, 9, 5, 6, 9, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 0, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [29, 10, 50, 27, 57, 91, 53, 52, 57, 21], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.7951428294181824, "mapping_values": [1, 24, 24, 13, 11, 5, 13, 13, 8, 5, 3, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 29, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.add(alpha, tf.math.add(grad, tf.math.square(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, tf.math.subtract(grad, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32))))))), tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(alpha, tf.math.add(alpha, grad))), tf.math.add(alpha, grad)), tf.math.add(alpha, alpha))), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0868335317201807, 1.876833626906224, 1.466226708950415, 1.1145450835293467, 0.9214413665493859, 0.8625986199919983, 0.791384590449917, 0.769952762293825, 0.7426005412228214, 0.6739277034592493, 0.6838557397794919, 0.6256953786077941, 0.6243461652312847, 0.6003939128271608, 0.5898102457812119, 0.5689274770015927, 0.5592954707277953, 0.5473220223260042], "accuracy": [0.29824328422546387, 0.43045833706855774, 0.5033681392669678, 0.5926561951637268, 0.6616035103797913, 0.6804913282394409, 0.6966054439544678, 0.7120591998100281, 0.7174745798110962, 0.7423061728477478, 0.7428345084190369, 0.7635715007781982, 0.7630431652069092, 0.7728173136711121, 0.7709681391716003, 0.7891955971717834, 0.7836481332778931, 0.796328067779541], "val_loss": [1.087817566735404, 1.1144129548754012, 0.873228771345956, 0.6523013114929199, 0.8133461475372314, 0.7557629346847534, 0.5450494459697178, 0.6254144396100726, 0.5124504906790597, 0.5538329396929059, 0.4790210042681013, 0.46221217938831877, 0.45694723299571444, 0.5165695803506034, 0.43749055692127775, 0.4440463440758841, 0.4504824365888323, 0.48847648075648714], "val_accuracy": [0.621999979019165, 0.49300000071525574, 0.6299999952316284, 0.7223333120346069, 0.6503333449363708, 0.6690000295639038, 0.7630000114440918, 0.7163333296775818, 0.7603333592414856, 0.7426666617393494, 0.7919999957084656, 0.793666660785675, 0.812666654586792, 0.7646666765213013, 0.8119999766349792, 0.8066666722297668, 0.7993333339691162, 0.7763333320617676]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1], [3, 8, 2, 4, 5, 2, 2, 5, 2, 3, 5, 2, 9, 4, 2, 6, 9, 5, 4, 2, 8, 2, 0, 9, 2, 0, 8, 9, 8], [0, 0, 2, 2, 2, 2, 1, 2, 2, 2, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 35, 43, 57, 89, 53, 52, 71], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [6, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 1, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.7951428294181824, "mapping_values": [1, 41, 41, 29, 12, 8, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 53, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(grad)))), tf.math.add(alpha, tf.math.add(tf.math.multiply(tf.math.add(alpha, grad), grad), tf.math.square(tf.math.add(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.square(grad)), tf.math.pow(tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.add(alpha, tf.math.add(alpha, tf.math.negative(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))), grad), tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.sqrt(grad))), tf.math.add(alpha, tf.constant(9.99657809e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(alpha, grad))))))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32))))))))), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0868335317201807, 1.876833626906224, 1.466226708950415, 1.1145450835293467, 0.9214413665493859, 0.8625986199919983, 0.791384590449917, 0.769952762293825, 0.7426005412228214, 0.6739277034592493, 0.6838557397794919, 0.6256953786077941, 0.6243461652312847, 0.6003939128271608, 0.5898102457812119, 0.5689274770015927, 0.5592954707277953, 0.5473220223260042], "accuracy": [0.29824328422546387, 0.43045833706855774, 0.5033681392669678, 0.5926561951637268, 0.6616035103797913, 0.6804913282394409, 0.6966054439544678, 0.7120591998100281, 0.7174745798110962, 0.7423061728477478, 0.7428345084190369, 0.7635715007781982, 0.7630431652069092, 0.7728173136711121, 0.7709681391716003, 0.7891955971717834, 0.7836481332778931, 0.796328067779541], "val_loss": [1.087817566735404, 1.1144129548754012, 0.873228771345956, 0.6523013114929199, 0.8133461475372314, 0.7557629346847534, 0.5450494459697178, 0.6254144396100726, 0.5124504906790597, 0.5538329396929059, 0.4790210042681013, 0.46221217938831877, 0.45694723299571444, 0.5165695803506034, 0.43749055692127775, 0.4440463440758841, 0.4504824365888323, 0.48847648075648714], "val_accuracy": [0.621999979019165, 0.49300000071525574, 0.6299999952316284, 0.7223333120346069, 0.6503333449363708, 0.6690000295639038, 0.7630000114440918, 0.7163333296775818, 0.7603333592414856, 0.7426666617393494, 0.7919999957084656, 0.793666660785675, 0.812666654586792, 0.7646666765213013, 0.8119999766349792, 0.8066666722297668, 0.7993333339691162, 0.7763333320617676]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [3, 2, 2, 1, 5, 1, 2, 8, 2, 1, 1, 1, 9, 8, 2, 0, 9, 5, 0, 1, 1, 2, 6, 9, 2, 8], [0, 0, 2, 2, 2, 0, 0, 1, 2, 1, 2, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [41, 66, 50, 41, 57, 79, 83, 52, 48], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 1, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 2, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.7951428294181824, "mapping_values": [1, 29, 29, 19, 10, 6, 7, 7, 3, 4, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 38, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.65554804e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.add(grad, tf.math.sqrt(tf.math.add(tf.math.subtract(grad, tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, grad), tf.math.subtract(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)))))), tf.math.sqrt(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))), alpha))), tf.math.add(tf.math.negative(tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.square(tf.math.negative(tf.math.add(alpha, grad))))))), tf.math.add(alpha, alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, alpha)), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0868335317201807, 1.876833626906224, 1.466226708950415, 1.1145450835293467, 0.9214413665493859, 0.8625986199919983, 0.791384590449917, 0.769952762293825, 0.7426005412228214, 0.6739277034592493, 0.6838557397794919, 0.6256953786077941, 0.6243461652312847, 0.6003939128271608, 0.5898102457812119, 0.5689274770015927, 0.5592954707277953, 0.5473220223260042], "accuracy": [0.29824328422546387, 0.43045833706855774, 0.5033681392669678, 0.5926561951637268, 0.6616035103797913, 0.6804913282394409, 0.6966054439544678, 0.7120591998100281, 0.7174745798110962, 0.7423061728477478, 0.7428345084190369, 0.7635715007781982, 0.7630431652069092, 0.7728173136711121, 0.7709681391716003, 0.7891955971717834, 0.7836481332778931, 0.796328067779541], "val_loss": [1.087817566735404, 1.1144129548754012, 0.873228771345956, 0.6523013114929199, 0.8133461475372314, 0.7557629346847534, 0.5450494459697178, 0.6254144396100726, 0.5124504906790597, 0.5538329396929059, 0.4790210042681013, 0.46221217938831877, 0.45694723299571444, 0.5165695803506034, 0.43749055692127775, 0.4440463440758841, 0.4504824365888323, 0.48847648075648714], "val_accuracy": [0.621999979019165, 0.49300000071525574, 0.6299999952316284, 0.7223333120346069, 0.6503333449363708, 0.6690000295639038, 0.7630000114440918, 0.7163333296775818, 0.7603333592414856, 0.7426666617393494, 0.7919999957084656, 0.793666660785675, 0.812666654586792, 0.7646666765213013, 0.8119999766349792, 0.8066666722297668, 0.7993333339691162, 0.7763333320617676]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [3, 2, 2, 1, 5, 1, 2, 8, 2, 1, 5, 8, 1, 8, 2, 0, 9, 5, 0, 1, 1, 2, 6, 9, 2, 8], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [41, 10, 50, 41, 57, 79, 83, 52, 48], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [2, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.7951428294181824, "mapping_values": [1, 20, 20, 11, 9, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.subtract(tf.math.square(tf.math.add(alpha, tf.math.subtract(grad, tf.math.add(alpha, grad)))), tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.add(alpha, grad), tf.math.subtract(grad, tf.math.square(alpha))))), grad)), tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0868335317201807, 1.876833626906224, 1.466226708950415, 1.1145450835293467, 0.9214413665493859, 0.8625986199919983, 0.791384590449917, 0.769952762293825, 0.7426005412228214, 0.6739277034592493, 0.6838557397794919, 0.6256953786077941, 0.6243461652312847, 0.6003939128271608, 0.5898102457812119, 0.5689274770015927, 0.5592954707277953, 0.5473220223260042], "accuracy": [0.29824328422546387, 0.43045833706855774, 0.5033681392669678, 0.5926561951637268, 0.6616035103797913, 0.6804913282394409, 0.6966054439544678, 0.7120591998100281, 0.7174745798110962, 0.7423061728477478, 0.7428345084190369, 0.7635715007781982, 0.7630431652069092, 0.7728173136711121, 0.7709681391716003, 0.7891955971717834, 0.7836481332778931, 0.796328067779541], "val_loss": [1.087817566735404, 1.1144129548754012, 0.873228771345956, 0.6523013114929199, 0.8133461475372314, 0.7557629346847534, 0.5450494459697178, 0.6254144396100726, 0.5124504906790597, 0.5538329396929059, 0.4790210042681013, 0.46221217938831877, 0.45694723299571444, 0.5165695803506034, 0.43749055692127775, 0.4440463440758841, 0.4504824365888323, 0.48847648075648714], "val_accuracy": [0.621999979019165, 0.49300000071525574, 0.6299999952316284, 0.7223333120346069, 0.6503333449363708, 0.6690000295639038, 0.7630000114440918, 0.7163333296775818, 0.7603333592414856, 0.7426666617393494, 0.7919999957084656, 0.793666660785675, 0.812666654586792, 0.7646666765213013, 0.8119999766349792, 0.8066666722297668, 0.7993333339691162, 0.7763333320617676]}}, {"genotype": [[0], [1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [3, 3, 3, 9, 6, 2, 2, 5, 9, 1, 4, 2, 6, 2, 2, 5, 9, 5, 6, 9, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [29, 90, 50, 27, 57, 91, 53, 52, 57, 21], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 9, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 3, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.7951428294181824, "mapping_values": [1, 7, 7, 4, 3, 3, 9, 9, 6, 3, 2, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.multiply(tf.math.multiply(tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.sqrt(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), sigma))", "other_info": {"loss": [2.0868335317201807, 1.876833626906224, 1.466226708950415, 1.1145450835293467, 0.9214413665493859, 0.8625986199919983, 0.791384590449917, 0.769952762293825, 0.7426005412228214, 0.6739277034592493, 0.6838557397794919, 0.6256953786077941, 0.6243461652312847, 0.6003939128271608, 0.5898102457812119, 0.5689274770015927, 0.5592954707277953, 0.5473220223260042], "accuracy": [0.29824328422546387, 0.43045833706855774, 0.5033681392669678, 0.5926561951637268, 0.6616035103797913, 0.6804913282394409, 0.6966054439544678, 0.7120591998100281, 0.7174745798110962, 0.7423061728477478, 0.7428345084190369, 0.7635715007781982, 0.7630431652069092, 0.7728173136711121, 0.7709681391716003, 0.7891955971717834, 0.7836481332778931, 0.796328067779541], "val_loss": [1.087817566735404, 1.1144129548754012, 0.873228771345956, 0.6523013114929199, 0.8133461475372314, 0.7557629346847534, 0.5450494459697178, 0.6254144396100726, 0.5124504906790597, 0.5538329396929059, 0.4790210042681013, 0.46221217938831877, 0.45694723299571444, 0.5165695803506034, 0.43749055692127775, 0.4440463440758841, 0.4504824365888323, 0.48847648075648714], "val_accuracy": [0.621999979019165, 0.49300000071525574, 0.6299999952316284, 0.7223333120346069, 0.6503333449363708, 0.6690000295639038, 0.7630000114440918, 0.7163333296775818, 0.7603333592414856, 0.7426666617393494, 0.7919999957084656, 0.793666660785675, 0.812666654586792, 0.7646666765213013, 0.8119999766349792, 0.8066666722297668, 0.7993333339691162, 0.7763333320617676]}}, {"genotype": [[0], [1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1], [2, 2, 2, 9, 6, 1, 2, 1, 2, 0, 5, 6, 1, 8, 2, 6, 9, 8, 0, 1, 1, 2, 6, 9, 2, 8], [0, 0, 0, 2, 1, 2, 1, 2, 0, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 35, 43, 57, 79, 53, 52, 73, 74, 58], [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 2, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.7951428294181824, "mapping_values": [1, 3, 3, 1, 2, 2, 7, 7, 3, 4, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(tf.math.add(beta, grad), tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0868335317201807, 1.876833626906224, 1.466226708950415, 1.1145450835293467, 0.9214413665493859, 0.8625986199919983, 0.791384590449917, 0.769952762293825, 0.7426005412228214, 0.6739277034592493, 0.6838557397794919, 0.6256953786077941, 0.6243461652312847, 0.6003939128271608, 0.5898102457812119, 0.5689274770015927, 0.5592954707277953, 0.5473220223260042], "accuracy": [0.29824328422546387, 0.43045833706855774, 0.5033681392669678, 0.5926561951637268, 0.6616035103797913, 0.6804913282394409, 0.6966054439544678, 0.7120591998100281, 0.7174745798110962, 0.7423061728477478, 0.7428345084190369, 0.7635715007781982, 0.7630431652069092, 0.7728173136711121, 0.7709681391716003, 0.7891955971717834, 0.7836481332778931, 0.796328067779541], "val_loss": [1.087817566735404, 1.1144129548754012, 0.873228771345956, 0.6523013114929199, 0.8133461475372314, 0.7557629346847534, 0.5450494459697178, 0.6254144396100726, 0.5124504906790597, 0.5538329396929059, 0.4790210042681013, 0.46221217938831877, 0.45694723299571444, 0.5165695803506034, 0.43749055692127775, 0.4440463440758841, 0.4504824365888323, 0.48847648075648714], "val_accuracy": [0.621999979019165, 0.49300000071525574, 0.6299999952316284, 0.7223333120346069, 0.6503333449363708, 0.6690000295639038, 0.7630000114440918, 0.7163333296775818, 0.7603333592414856, 0.7426666617393494, 0.7919999957084656, 0.793666660785675, 0.812666654586792, 0.7646666765213013, 0.8119999766349792, 0.8066666722297668, 0.7993333339691162, 0.7763333320617676]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 2, 0, 5, 3, 2, 5, 8, 3, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 1, 2, 1, 2, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [67, 83, 91, 29, 57, 79, 53, 52], [0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 8, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 36, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.7951428294181824, "mapping_values": [1, 13, 13, 8, 5, 2, 14, 14, 8, 6, 2, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.multiply(tf.math.add(alpha, tf.math.add(tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32), tf.math.square(grad))), tf.math.add(alpha, grad)))))), alpha)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.multiply(grad, tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, alpha))), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.math.sqrt(tf.math.divide_no_nan(grad, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32))), beta))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.0868335317201807, 1.876833626906224, 1.466226708950415, 1.1145450835293467, 0.9214413665493859, 0.8625986199919983, 0.791384590449917, 0.769952762293825, 0.7426005412228214, 0.6739277034592493, 0.6838557397794919, 0.6256953786077941, 0.6243461652312847, 0.6003939128271608, 0.5898102457812119, 0.5689274770015927, 0.5592954707277953, 0.5473220223260042], "accuracy": [0.29824328422546387, 0.43045833706855774, 0.5033681392669678, 0.5926561951637268, 0.6616035103797913, 0.6804913282394409, 0.6966054439544678, 0.7120591998100281, 0.7174745798110962, 0.7423061728477478, 0.7428345084190369, 0.7635715007781982, 0.7630431652069092, 0.7728173136711121, 0.7709681391716003, 0.7891955971717834, 0.7836481332778931, 0.796328067779541], "val_loss": [1.087817566735404, 1.1144129548754012, 0.873228771345956, 0.6523013114929199, 0.8133461475372314, 0.7557629346847534, 0.5450494459697178, 0.6254144396100726, 0.5124504906790597, 0.5538329396929059, 0.4790210042681013, 0.46221217938831877, 0.45694723299571444, 0.5165695803506034, 0.43749055692127775, 0.4440463440758841, 0.4504824365888323, 0.48847648075648714], "val_accuracy": [0.621999979019165, 0.49300000071525574, 0.6299999952316284, 0.7223333120346069, 0.6503333449363708, 0.6690000295639038, 0.7630000114440918, 0.7163333296775818, 0.7603333592414856, 0.7426666617393494, 0.7919999957084656, 0.793666660785675, 0.812666654586792, 0.7646666765213013, 0.8119999766349792, 0.8066666722297668, 0.7993333339691162, 0.7763333320617676]}}, {"genotype": [[0], [1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [3, 8, 2, 4, 5, 2, 2, 5, 2, 3, 5, 2, 9, 4, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 2, 0, 2, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [65, 10, 19, 41, 30, 79, 83, 52, 48, 54, 42], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 3, 0, 5, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 1, 1, 3, 3, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.7951428294181824, "mapping_values": [1, 4, 4, 2, 2, 1, 13, 13, 8, 5, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.sqrt(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, alpha))))), tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.square(tf.math.pow(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), sigma))", "other_info": {"loss": [2.0868335317201807, 1.876833626906224, 1.466226708950415, 1.1145450835293467, 0.9214413665493859, 0.8625986199919983, 0.791384590449917, 0.769952762293825, 0.7426005412228214, 0.6739277034592493, 0.6838557397794919, 0.6256953786077941, 0.6243461652312847, 0.6003939128271608, 0.5898102457812119, 0.5689274770015927, 0.5592954707277953, 0.5473220223260042], "accuracy": [0.29824328422546387, 0.43045833706855774, 0.5033681392669678, 0.5926561951637268, 0.6616035103797913, 0.6804913282394409, 0.6966054439544678, 0.7120591998100281, 0.7174745798110962, 0.7423061728477478, 0.7428345084190369, 0.7635715007781982, 0.7630431652069092, 0.7728173136711121, 0.7709681391716003, 0.7891955971717834, 0.7836481332778931, 0.796328067779541], "val_loss": [1.087817566735404, 1.1144129548754012, 0.873228771345956, 0.6523013114929199, 0.8133461475372314, 0.7557629346847534, 0.5450494459697178, 0.6254144396100726, 0.5124504906790597, 0.5538329396929059, 0.4790210042681013, 0.46221217938831877, 0.45694723299571444, 0.5165695803506034, 0.43749055692127775, 0.4440463440758841, 0.4504824365888323, 0.48847648075648714], "val_accuracy": [0.621999979019165, 0.49300000071525574, 0.6299999952316284, 0.7223333120346069, 0.6503333449363708, 0.6690000295639038, 0.7630000114440918, 0.7163333296775818, 0.7603333592414856, 0.7426666617393494, 0.7919999957084656, 0.793666660785675, 0.812666654586792, 0.7646666765213013, 0.8119999766349792, 0.8066666722297668, 0.7993333339691162, 0.7763333320617676]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [9, 8, 2, 4, 5, 2, 2, 5, 2, 3, 5, 2, 9, 4, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [46, 83, 3, 29, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 4, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 1, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [0, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [41, 25, 50, 71, 34]], "fitness": -0.7945713996887207, "mapping_values": [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32), beta))", "other_info": {"loss": [2.0872654268974955, 1.4007674275671471, 1.0761689034750308, 0.9366695577237647, 0.8234278746111644, 0.786864693555944, 0.7718227787292424, 0.7401938864961513, 0.7454029680195895, 0.6889655561872903, 0.6701143299032747, 0.6526448821756959, 0.6299868704793696, 0.6448604469333327, 0.6424848220336077, 0.6176247107055225, 0.603578347461319, 0.6091086341562902, 0.5886920272099454, 0.5825029638591082, 0.5629086159145071], "accuracy": [0.3074890971183777, 0.5083872675895691, 0.6107515692710876, 0.652621865272522, 0.6909258961677551, 0.7094175219535828, 0.707040011882782, 0.7219653725624084, 0.722757875919342, 0.7382115721702576, 0.7474573850631714, 0.7494386434555054, 0.7598732113838196, 0.7530049085617065, 0.7547219395637512, 0.76542067527771, 0.7638356685638428, 0.7713643908500671, 0.7729493975639343, 0.7751948237419128, 0.7907806038856506], "val_loss": [1.1435814244406564, 0.8113764013562884, 0.6957724945885795, 0.6244108847209385, 0.605271543775286, 0.5691205944333758, 0.5684792484555926, 0.5740750176565987, 0.5267346245901925, 0.5278598240443638, 0.5110718863351005, 0.49569228717259, 0.506697586604527, 0.5039777074541364, 0.4662333386284964, 0.46656790801457, 0.5106065102985927, 0.4876142740249634, 0.46229895523616243, 0.4695541688374111, 0.44911394800458637], "val_accuracy": [0.6106666922569275, 0.684333324432373, 0.690666675567627, 0.7350000143051147, 0.7336666584014893, 0.7526666522026062, 0.7440000176429749, 0.7310000061988831, 0.7693333625793457, 0.7603333592414856, 0.7706666588783264, 0.7889999747276306, 0.7693333625793457, 0.7649999856948853, 0.7963333129882812, 0.8053333163261414, 0.7599999904632568, 0.7609999775886536, 0.7926666736602783, 0.7979999780654907, 0.796999990940094]}}, {"genotype": [[0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [3, 3, 3, 6, 6, 2, 2, 5, 5, 1, 4, 2, 6, 2, 2, 5, 9, 5, 6, 9, 8, 2, 0, 9, 2], [0, 0, 2, 1, 2, 2, 1, 2, 2, 1, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [29, 10, 50, 27, 57, 91, 53, 52, 57, 21], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1], [3, 3, 3, 3, 0, 4, 2, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0, 1], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [76, 25, 50, 71, 34]], "fitness": -0.74314284324646, "mapping_values": [1, 23, 23, 12, 11, 3, 28, 28, 17, 11, 6, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(1.56514861e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.add(grad, tf.math.add(alpha, tf.math.add(alpha, grad))))), tf.math.square(tf.math.square(tf.math.add(alpha, grad))))))), tf.math.add(alpha, alpha))), tf.math.subtract(tf.math.pow(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, grad))), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.divide_no_nan(tf.math.add(tf.math.subtract(alpha, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta)))), tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha)), tf.math.add(beta, grad))))))), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.sqrt(tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32))), tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))), alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(9.95290886e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.532811753990124, 2.249621648483619, 2.3229675584575675, 2.256908948379595, 2.3244069621484544, 2.1334101855243124, 1.915676134751536, 1.7773307778532668, 1.6120031850212964, 1.6178990674450286, 1.5011414530380858, 1.3779879709858984, 1.178655945409196, 1.2394351177148815, 1.0798524078864935, 0.9768633672180523, 0.9052764343831202, 0.9586618422769111, 0.8664089718105582, 0.8084215193597192, 0.757824535942065, 0.7686130844323296, 0.7085026264143437, 0.7634026204212356, 0.6848814320554822], "accuracy": [0.19204860925674438, 0.15440496802330017, 0.1538766324520111, 0.16523577272891998, 0.17382116615772247, 0.23893804848194122, 0.3735305666923523, 0.39043718576431274, 0.49108439683914185, 0.4414212107658386, 0.501518964767456, 0.5101043581962585, 0.5876370072364807, 0.5700700283050537, 0.6376964449882507, 0.6350548267364502, 0.6653017997741699, 0.6544709801673889, 0.6856426000595093, 0.6989829540252686, 0.7168141603469849, 0.709549605846405, 0.735041618347168, 0.7264562249183655, 0.7331924438476562], "val_loss": [1.7060395649501257, 1.9697892325265067, 1.9068269729614258, 1.9681709834507533, 1.9516908100673132, 1.806222370692662, 1.3547309807368688, 1.2476616927555628, 1.7036687646593367, 1.1704981667654855, 1.6140337671552385, 0.7859861510140556, 0.876203077180045, 0.7774199587958199, 0.7036255938666207, 0.6211366142545428, 0.6071298973900932, 0.6323658909116473, 0.6307648931230817, 0.5082068272999355, 0.532075217791966, 0.5808187212262835, 0.6602107627051217, 0.5189465795244489, 0.5281807695116315], "val_accuracy": [0.33766666054725647, 0.12399999797344208, 0.3466666638851166, 0.10566666722297668, 0.25066667795181274, 0.3186666667461395, 0.4416666626930237, 0.5070000290870667, 0.24166665971279144, 0.47833332419395447, 0.2706666588783264, 0.6570000052452087, 0.6620000004768372, 0.721666693687439, 0.7206666469573975, 0.7179999947547913, 0.7300000190734863, 0.7426666617393494, 0.7406666874885559, 0.7803333401679993, 0.7696666717529297, 0.7483333349227905, 0.7129999995231628, 0.7760000228881836, 0.765333354473114]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 2, 0, 5, 3, 2, 5, 8, 3, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [38, 83, 91, 29, 57, 79, 53, 52], [0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.5454285740852356, "mapping_values": [1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [2.527444312601136, 2.248304533527008, 2.391251770827465, 2.335409163358016, 2.268356862683511, 2.278268044099769, 2.194772116842838, 2.0783905791820647, 1.6643351606484402, 2.5138943089375707, 1.7430869519293284, 1.8743885293250637, 1.7149908149782471, 1.6921851565384074, 2.2364209453427577, 2.0750659861033696, 2.0923224377547114, 1.9454086629580103], "accuracy": [0.19310526549816132, 0.15176330506801605, 0.1302337795495987, 0.13776251673698425, 0.1592920422554016, 0.19680359959602356, 0.22480517625808716, 0.34143441915512085, 0.4667811393737793, 0.1690661758184433, 0.45647865533828735, 0.3391890227794647, 0.41989168524742126, 0.43706247210502625, 0.21080438792705536, 0.27605336904525757, 0.26403382420539856, 0.3801347315311432], "val_loss": [1.7138005324772425, 2.156000477927072, 1.785501343863351, 1.9713905198233468, 1.6421262536730086, 1.96351500919887, 1.7416832787649972, 1.3734072276524134, 1.694293464933123, 1.231250592640468, 2.00442681993757, 1.422950233731951, 1.0068951334272112, 2.1392508915492465, 1.757571016039167, 1.9102076121738978, 1.3479865959712438, 1.978994641985212], "val_accuracy": [0.30399999022483826, 0.24033333361148834, 0.33666667342185974, 0.19566667079925537, 0.46266666054725647, 0.15299999713897705, 0.35366666316986084, 0.460999995470047, 0.34466665983200073, 0.5406666398048401, 0.10199999809265137, 0.47866666316986084, 0.5740000009536743, 0.18333333730697632, 0.25866666436195374, 0.14366666972637177, 0.4763333201408386, 0.1066666692495346]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 2, 4, 5, 2, 2, 5, 2, 3, 5, 2, 9, 4, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [52, 10, 35, 27, 57, 79, 53, 52], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [0, 2, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 29, 29, 19, 10, 5, 8, 8, 4, 4, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.square(tf.math.add(tf.math.add(alpha, tf.math.add(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(grad)))), tf.math.add(tf.math.multiply(tf.math.add(alpha, grad), grad), tf.math.square(tf.math.add(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.pow(grad, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))))))))), grad))))), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, alpha)), tf.math.add(beta, grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), sigma))", "other_info": {"loss": [545858.0796530467, 2.3138772815273043, 2.305644963915322, 2.303521911371433, 2.3030592168027764, 2.303019492475978, 2.302942877353663, 2.3028788743568938], "accuracy": [0.09972262382507324, 0.09602430462837219, 0.09126931428909302, 0.09879804402589798, 0.09153348207473755, 0.09826971590518951, 0.09694888442754745, 0.09694888442754745], "val_loss": [1.99039888381958, 1.9783190999712263, 1.9751178196498327, 1.9739950725010462, 1.9737346512930733, 1.9735875810895647, 1.9736088344029017, 1.9736041341509138], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.10400000214576721, 0.10233332961797714, 0.09733333438634872, 0.10000000149011612, 0.10400000214576721, 0.10400000214576721]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [2, 8, 2, 4, 5, 2, 2, 5, 2, 3, 5, 2, 9, 4, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [46, 83, 3, 29, 57, 79, 53, 52], [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 0, 0, 8, 6, 3, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 1, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [1, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.10117553919553757, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 2, 2, 9, 6, 1, 2, 1, 2, 2, 5, 0, 1, 8, 2, 6, 9, 6, 0, 1, 1, 2, 6, 9, 2, 8], [0, 1, 2, 2, 2, 0, 0, 1, 2, 1, 2, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [34, 10, 19, 41, 30, 79, 61, 52, 48, 54, 42], [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 3, 1, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [2, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 30, 30, 18, 12, 6, 13, 13, 8, 5, 3, 1, 1, 0, 1, 0, 1, 0, 1, 0], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(tf.math.add(alpha, tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32)), tf.math.add(alpha, alpha)), tf.math.add(alpha, tf.math.add(tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(alpha, tf.math.subtract(grad, grad)), tf.math.add(tf.math.subtract(tf.math.add(grad, tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(2.10440443e-03, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.negative(tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))))))), tf.math.subtract(alpha, grad)), tf.math.sqrt(tf.math.add(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)))), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.multiply(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))))), alpha), tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.constant(1.40591988e-03, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.divide_no_nan(grad, tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32)))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09932637959718704, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 2, 0, 5, 3, 2, 5, 8, 3, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [67, 5, 91, 29, 57, 79, 53, 52], [0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 3, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [0, 9, 5, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 2, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 2, 2, 0, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.constant(1.24647146e-04, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(beta, tf.math.add(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [66980801.197918154, 1271383150.5692775, 5916015261.6373005, 16410001932.781403, 35138815939.67719, 63976003420.34394], "accuracy": [0.10091137140989304, 0.09906221181154251, 0.10474177449941635, 0.1006472036242485, 0.09985470771789551, 0.10315678268671036], "val_loss": [252293065.14285713, 2016736256.0, 6804672073.142858, 16127298998.857143, 31496456484.57143, 54422684818.28571], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [5, 8, 2, 0, 5, 3, 2, 5, 8, 3, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [67, 83, 91, 29, 57, 79, 53, 52], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 0, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 2, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [56, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 2, 1, 1, 7, 7, 3, 4, 1, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.square(tf.math.sqrt(tf.math.add(alpha, tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.subtract(beta, tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, alpha), tf.math.add(beta, grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(sigma, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [9576444.519687276, 2.3138773624907394, 2.305644932424293, 2.3035217359349116, 2.303059333728966, 2.3030193215111825, 2.3029428278812563, 2.3028793287409486], "accuracy": [0.09972262382507324, 0.09602430462837219, 0.09126931428909302, 0.09879804402589798, 0.09153348207473755, 0.09826971590518951, 0.09694888442754745, 0.09694888442754745], "val_loss": [1.99039888381958, 1.978318759373256, 1.9751177515302385, 1.973994323185512, 1.9737345831734794, 1.973588534763881, 1.9736104692731584, 1.9736051559448242], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.10400000214576721, 0.10233332961797714, 0.09733333438634872, 0.10000000149011612, 0.10400000214576721, 0.10400000214576721]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 2, 4, 5, 3, 2, 5, 2, 3, 5, 2, 9, 3, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 10, 35, 43, 57, 79, 53, 52, 73], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 0, 2, 3, 0, 2, 1, 3, 0, 0], [95, 46, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [2, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 17, 17, 10, 7, 3, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(grad, tf.math.subtract(tf.constant(9.99898151e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, beta))), tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.constant(3.30246430e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(grad, tf.math.add(tf.constant(9.99847452e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.math.add(beta, alpha))))))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, beta), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.06775855273008347, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 2, 4, 5, 2, 2, 5, 2, 3, 5, 2, 9, 4, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [0, 0, 2, 2, 2, 0, 0, 1, 2, 1, 2, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [41, 10, 50, 41, 57, 79, 83, 52, 48], [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 1, 3, 0, 8, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 1, 1, 3, 0, 2, 1, 3, 0, 0], [95, 17, 93, 84, 1, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.09428571164608002, "mapping_values": [1, 4, 4, 2, 2, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, tf.constant(1.52235823e-01, shape=shape, dtype=tf.float32))), tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, beta))", "other_info": {"loss": [2.3025450783320043, 2.3051913033670455, 2.306668299599535, 2.3099510561694023, 2.311675744522139, 2.3166360458315576, 2.320167877796603, 2.321566824144014, 2.3340657011172428, 2.3457790074520393, 2.3794308517744764, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09074098616838455, 0.08836349099874496, 0.08466517180204391, 0.07911768555641174, 0.08294808864593506, 0.07607977837324142, 0.07687227427959442, 0.07475894689559937, 0.07489103078842163, 0.07872143387794495, 0.0820235088467598, 0.10117553919553757, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9716766221182687, 1.9732389450073242, 1.9748289244515556, 1.9770300728934151, 1.9794930730547224, 1.98244994027274, 1.985814162663051, 1.989572320665632, 1.9966088022504533, 2.011157717023577, 2.072676658630371, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.03400000184774399, 0.030666666105389595, 0.033666666597127914, 0.029333332553505898, 0.029999999329447746, 0.03799999877810478, 0.05066666752099991, 0.07066666334867477, 0.08866667002439499, 0.0989999994635582, 0.10000000149011612, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1], [3, 8, 2, 4, 5, 2, 2, 5, 2, 3, 5, 2, 9, 4, 2, 6, 9, 5, 0, 2, 8, 2, 0, 9, 2], [2, 0, 2, 2, 2, 2, 1, 2, 2, 0, 0, 0, 1, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [33, 10, 19, 41, 30, 79, 83, 52, 48, 54, 42], [0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 1, 3, 0, 4, 4, 9, 6, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 1, 1, 3, 0, 2, 1, 3, 0, 0], [61, 17, 93, 84, 1, 78], [1, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [47, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 4, 4, 2, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 4, 3, 1, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.multiply(tf.math.sqrt(tf.math.add(alpha, grad)), tf.math.add(alpha, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(3.76354517e-01, shape=shape, dtype=tf.float32), sigma))", "other_info": {"loss": [2.3020483535813963, 2.3030113874724387, 2.302598933596668, 2.3033627805582615, 2.3023160406154743, 2.3031602705379974], "accuracy": [0.09245806187391281, 0.08928807079792023, 0.0870426595211029, 0.0870426595211029, 0.09338264167308807, 0.08479725569486618], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}]