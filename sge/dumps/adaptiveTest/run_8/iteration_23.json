[{"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [3, 2, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 6, 6, 6, 5, 2, 2, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 0, 0], [90, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 3, 6, 9], [3, 3, 3, 1], [45, 38]], "fitness": -0.822857141494751, "mapping_values": [1, 3, 3, 1, 2, 0, 18, 18, 9, 9, 2, 1, 1, 0, 1, 0, 8, 5, 3, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(grad, grad), tf.math.add(beta, grad))), tf.math.divide_no_nan(tf.math.square(tf.math.add(beta, alpha)), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad)))))), tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(sigma, tf.math.divide_no_nan(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), sigma)), sigma))", "other_info": {"loss": [2.0187908210585603, 1.4776899226353295, 1.0991971081888137, 0.868797257457978, 0.809984131417396, 0.7663422212105039, 0.7146812584878526, 0.6850262094702876, 0.6693229545392475, 0.6255849314135898, 0.6364862393583399, 0.6099373777591951, 0.5924067404984703, 0.5827142742756823, 0.5827650404200027, 0.5719413553577263, 0.5544998590751898, 0.5245472663437072, 0.5387778742092003, 0.5101926529002841, 0.49988152332561614, 0.499280630774612, 0.5074387459612605, 0.4823450104687365, 0.47636749696470193, 0.4612308850007806, 0.44565570424922846, 0.485206314731252, 0.44826774413496545, 0.4462402545150875, 0.4601983550737689, 0.4295228628977777, 0.4190092025541941, 0.45012736338996584, 0.417197962388103, 0.39976353584153385, 0.40848645538764783], "accuracy": [0.33403778076171875, 0.48831066489219666, 0.6013736724853516, 0.6757363677024841, 0.691850483417511, 0.7145687341690063, 0.7325320243835449, 0.7380794882774353, 0.7499669790267944, 0.7648923397064209, 0.7519482374191284, 0.7675340175628662, 0.7751948237419128, 0.7765156626701355, 0.7736098170280457, 0.787082314491272, 0.7902522683143616, 0.806630551815033, 0.7988376617431641, 0.8058380484580994, 0.81548011302948, 0.8146876096725464, 0.8063663840293884, 0.8195747137069702, 0.8238013386726379, 0.8313300609588623, 0.8384625315666199, 0.8234050869941711, 0.830669641494751, 0.8355567455291748, 0.830669641494751, 0.8417646288871765, 0.8499537706375122, 0.8308017253875732, 0.8469158411026001, 0.854708731174469, 0.8512746095657349], "val_loss": [1.6809428759983607, 0.9945434161594936, 0.6755467823573521, 0.612570081438337, 0.6282991341182164, 0.5736849478312901, 0.5632102489471436, 0.5308847427368164, 0.5046655280249459, 0.49473743779318674, 0.4907506023134504, 0.5378768954958234, 0.4664269345147269, 0.5280430146626064, 0.4705623047692435, 0.533426182610648, 0.43486978326525005, 0.42905804940632414, 0.4654881272997175, 0.42198365926742554, 0.4581431065286909, 0.43071105650493074, 0.43398221901484896, 0.4106803280966623, 0.3897033504077366, 0.3787744300706046, 0.3927591102463858, 0.3901241591998509, 0.3964218667575291, 0.4116043874195644, 0.376671348299299, 0.3677669508116586, 0.4218055946486337, 0.37439978974206106, 0.38615985427583965, 0.3659234642982483, 0.3712783455848694], "val_accuracy": [0.36666667461395264, 0.6666666865348816, 0.7013333439826965, 0.718666672706604, 0.7273333072662354, 0.7263333201408386, 0.7360000014305115, 0.7733333110809326, 0.781000018119812, 0.768666684627533, 0.7829999923706055, 0.7453333139419556, 0.7963333129882812, 0.7436666488647461, 0.8066666722297668, 0.7559999823570251, 0.8016666769981384, 0.8133333325386047, 0.7763333320617676, 0.8056666851043701, 0.7950000166893005, 0.812666654586792, 0.8153333067893982, 0.8296666741371155, 0.8309999704360962, 0.8420000076293945, 0.8373333215713501, 0.8339999914169312, 0.8316666483879089, 0.8143333196640015, 0.843999981880188, 0.8496666550636292, 0.7979999780654907, 0.8420000076293945, 0.8273333311080933, 0.843666672706604, 0.8373333215713501]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 0], [0, 0, 1, 1, 1, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [24, 57], [1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [6, 6, 8, 8, 5, 2, 2, 4, 5, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 3, 0, 1, 0, 1, 1, 3, 0, 0], [42, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 1, 0, 0, 0, 1, 1, 1, 0], [0, 3, 3, 6, 9], [3, 3, 3, 1], [45, 38]], "fitness": -0.822857141494751, "mapping_values": [1, 5, 5, 2, 3, 1, 6, 6, 3, 3, 1, 1, 1, 0, 1, 0, 8, 5, 3, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), grad), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(tf.math.add(beta, beta))), grad), tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.multiply(tf.math.divide_no_nan(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), sigma), sigma)))", "other_info": {"loss": [2.0187908210585603, 1.4776899226353295, 1.0991971081888137, 0.868797257457978, 0.809984131417396, 0.7663422212105039, 0.7146812584878526, 0.6850262094702876, 0.6693229545392475, 0.6255849314135898, 0.6364862393583399, 0.6099373777591951, 0.5924067404984703, 0.5827142742756823, 0.5827650404200027, 0.5719413553577263, 0.5544998590751898, 0.5245472663437072, 0.5387778742092003, 0.5101926529002841, 0.49988152332561614, 0.499280630774612, 0.5074387459612605, 0.4823450104687365, 0.47636749696470193, 0.4612308850007806, 0.44565570424922846, 0.485206314731252, 0.44826774413496545, 0.4462402545150875, 0.4601983550737689, 0.4295228628977777, 0.4190092025541941, 0.45012736338996584, 0.417197962388103, 0.39976353584153385, 0.40848645538764783], "accuracy": [0.33403778076171875, 0.48831066489219666, 0.6013736724853516, 0.6757363677024841, 0.691850483417511, 0.7145687341690063, 0.7325320243835449, 0.7380794882774353, 0.7499669790267944, 0.7648923397064209, 0.7519482374191284, 0.7675340175628662, 0.7751948237419128, 0.7765156626701355, 0.7736098170280457, 0.787082314491272, 0.7902522683143616, 0.806630551815033, 0.7988376617431641, 0.8058380484580994, 0.81548011302948, 0.8146876096725464, 0.8063663840293884, 0.8195747137069702, 0.8238013386726379, 0.8313300609588623, 0.8384625315666199, 0.8234050869941711, 0.830669641494751, 0.8355567455291748, 0.830669641494751, 0.8417646288871765, 0.8499537706375122, 0.8308017253875732, 0.8469158411026001, 0.854708731174469, 0.8512746095657349], "val_loss": [1.6809428759983607, 0.9945434161594936, 0.6755467823573521, 0.612570081438337, 0.6282991341182164, 0.5736849478312901, 0.5632102489471436, 0.5308847427368164, 0.5046655280249459, 0.49473743779318674, 0.4907506023134504, 0.5378768954958234, 0.4664269345147269, 0.5280430146626064, 0.4705623047692435, 0.533426182610648, 0.43486978326525005, 0.42905804940632414, 0.4654881272997175, 0.42198365926742554, 0.4581431065286909, 0.43071105650493074, 0.43398221901484896, 0.4106803280966623, 0.3897033504077366, 0.3787744300706046, 0.3927591102463858, 0.3901241591998509, 0.3964218667575291, 0.4116043874195644, 0.376671348299299, 0.3677669508116586, 0.4218055946486337, 0.37439978974206106, 0.38615985427583965, 0.3659234642982483, 0.3712783455848694], "val_accuracy": [0.36666667461395264, 0.6666666865348816, 0.7013333439826965, 0.718666672706604, 0.7273333072662354, 0.7263333201408386, 0.7360000014305115, 0.7733333110809326, 0.781000018119812, 0.768666684627533, 0.7829999923706055, 0.7453333139419556, 0.7963333129882812, 0.7436666488647461, 0.8066666722297668, 0.7559999823570251, 0.8016666769981384, 0.8133333325386047, 0.7763333320617676, 0.8056666851043701, 0.7950000166893005, 0.812666654586792, 0.8153333067893982, 0.8296666741371155, 0.8309999704360962, 0.8420000076293945, 0.8373333215713501, 0.8339999914169312, 0.8316666483879089, 0.8143333196640015, 0.843999981880188, 0.8496666550636292, 0.7979999780654907, 0.8420000076293945, 0.8273333311080933, 0.843666672706604, 0.8373333215713501]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 0], [0, 0, 1, 1, 0, 1, 0], [7, 8, 4, 9], [0, 3, 2, 3], [44, 57], [1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [6, 6, 6, 8, 1, 2, 2, 4, 5, 1, 4, 9, 8, 1, 1, 8, 9, 0], [4, 3, 3, 1, 0, 1, 1, 3, 0, 0], [42, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 1, 1, 0, 1, 1, 1, 0], [0, 1, 3, 6, 9], [3, 3, 0, 1], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 4, 4, 2, 2, 1, 19, 19, 10, 9, 2, 1, 1, 0, 1, 0, 8, 4, 4, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.sqrt(grad)), tf.math.subtract(grad, tf.math.add(beta, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32))), alpha))))))), tf.math.square(tf.math.add(beta, alpha)))), tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(tf.math.multiply(sigma, sigma), tf.math.divide_no_nan(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0956280529499054, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [44, 57], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [1, 6, 6, 6, 5, 2, 2, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 2, 0, 1, 3, 3, 0, 0], [42, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 3, 6, 9], [3, 3, 1, 1], [40, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 18, 18, 9, 9, 2, 1, 1, 0, 1, 0, 8, 5, 3, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), grad)), grad), tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, beta))), tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(alpha, tf.math.add(tf.math.add(beta, grad), grad)))), tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(sigma, tf.math.divide_no_nan(tf.constant(1.27951705e-01, shape=shape, dtype=tf.float32), sigma)), alpha))", "other_info": {"loss": [2.302283209328481, 2.302635512473545, 2.3026242202944713, 2.302643873562131, 2.3026576898731275, 2.3026318748818255], "accuracy": [0.09219389408826828, 0.09589222073554993, 0.09760929644107819, 0.09179764986038208, 0.09285431355237961, 0.0936468094587326], "val_loss": [1.9736337661743164, 1.9736336299351283, 1.9736395563398088, 1.9736413274492537, 1.9736427579607283, 1.9736439159938268], "val_accuracy": [0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10233332961797714, 0.10000000149011612]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [0, 2, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], [6, 6, 6, 8, 5, 2, 2, 4, 5, 6, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 0, 0], [1, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [3], [], [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1], [0, 9, 3, 2, 9, 8, 0, 3], [3, 1, 3, 1], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 1, 9, 9, 5, 4, 0, 1, 1, 0, 1, 0, 2, 2, 0, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(beta, grad)), tf.math.sqrt(tf.math.square(tf.math.add(beta, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, sigma), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [30111042.16101794, 557666559.644961, 2599003290.729362, 7247331955.708889, 15404762817.344076, 28564887718.902126], "accuracy": [0.1022322028875351, 0.09919429570436478, 0.09628847241401672, 0.10011887550354004, 0.10315678268671036, 0.10170386731624603], "val_loss": [112155428.57142857, 896301147.4285715, 3023962989.714286, 7166656512.0, 13995870208.0, 24183408932.57143], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [3, 2, 2, 3], [44, 57, 55], [1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1], [1, 6, 6, 6, 5, 2, 2, 0, 0, 1, 4, 9, 8, 1, 8, 8, 2, 0, 8, 6, 8, 1, 2, 1, 4, 0, 0, 3, 3, 9, 5, 2, 1, 8, 6, 5, 4, 5, 6, 2, 4, 8, 3, 5, 3, 8, 4, 5, 9, 7, 4, 0, 6, 4, 6, 9], [3, 3, 1, 1, 0, 1, 1, 3, 3, 0], [90, 93, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [0], [87], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1], [0, 3, 4, 6, 9, 3, 3], [3, 3, 3, 2, 0], [43, 57]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 4, 5, 1, 1, 1, 0, 1, 1, 12, 7, 5, 2], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, grad))), tf.math.add(beta, alpha))), tf.math.divide_no_nan(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.pow(sigma, tf.math.divide_no_nan(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.math.multiply(sigma, sigma))), tf.math.multiply(beta, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09602430462837219, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 0, 8, 8], [2, 2, 2, 3], [44, 57], [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1], [1, 6, 8, 6, 5, 2, 2, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 0, 1, 1, 3, 0, 0], [96, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0], [9, 3, 3, 6, 9], [3, 1, 3, 1], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 6, 6, 3, 3, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, grad), tf.math.divide_no_nan(tf.math.sqrt(grad), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)", "other_info": {"loss": [2.3022174493212506, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09602430462837219, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [3, 2, 2, 3], [44, 57], [1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1], [1, 6, 6, 6, 5, 2, 2, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0, 4, 9, 3, 1, 2, 7, 2, 8, 9, 8], [3, 3, 2, 1, 0, 1, 3, 3, 0, 0, 5, 2, 1, 3, 5], [90, 71, 49, 84, 1, 78, 68], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 0, 6, 9], [3, 3, 3, 1], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 43, 43, 28, 15, 7, 1, 1, 0, 1, 0, 7, 5, 2, 1], "tree_depth": 35, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(grad, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.square(tf.math.add(tf.math.add(beta, beta), tf.math.add(beta, tf.math.add(tf.math.pow(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.add(tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32))))))))), tf.math.add(beta, tf.math.sqrt(grad)))))), tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))))), tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.sqrt(tf.math.add(beta, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(5.55606489e-05, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.math.multiply(tf.math.subtract(grad, tf.math.add(tf.math.add(tf.math.add(beta, tf.math.add(tf.math.sqrt(beta), alpha)), tf.constant(9.76737464e-01, shape=shape, dtype=tf.float32)), grad)), tf.math.sqrt(tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.negative(sigma), tf.math.divide_no_nan(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), sigma)))", "other_info": {"loss": [2.3022174493212506, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09602430462837219, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0], [1, 0, 1, 1, 0, 1, 0], [7, 4, 4, 9], [1, 2, 2, 3], [44, 57], [1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1], [4, 4, 6, 6, 5, 2, 2, 4, 5, 2, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 1, 0, 1, 1, 3, 0, 0], [48, 53, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1], [7, 3, 3, 6, 1, 9, 2, 9, 7, 2, 8], [3, 3, 3, 1, 2, 3, 2], [35, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 9, 9, 4, 5, 2, 1, 1, 0, 1, 0, 7, 3, 4, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(grad, grad)), tf.math.add(beta, tf.constant(4.24816868e-01, shape=shape, dtype=tf.float32)))), tf.math.divide_no_nan(alpha, tf.math.add(beta, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, tf.math.multiply(sigma, alpha)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07674019038677216, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 0, 1, 0, 1], [7, 2, 4, 0], [3, 2, 2, 3], [44, 57], [1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [9, 6, 5, 6, 5, 2, 8, 4, 4, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 0, 0], [42, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [0, 0, 1, 1], [3, 3], [4, 1], [], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1], [4, 3, 3, 6, 9, 9, 2], [3, 0, 2, 2], [45, 38, 52]], "fitness": -0.10000000149011612, "mapping_values": [1, 8, 8, 4, 4, 0, 1, 1, 1, 0, 1, 5, 4, 2, 2, 0, 11, 7, 4, 3], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, grad))))), lambda shape,  alpha, beta, grad: tf.constant(1.80176593e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), tf.math.add(sigma, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.multiply(sigma, tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.math.divide_no_nan(tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09602430462837219, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 0], [0, 0, 1, 1, 0, 1, 0], [7, 6, 4, 9], [2, 2, 2, 3], [44, 57], [1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [6, 6, 6, 8, 5, 2, 2, 4, 5, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 3, 3, 1, 0, 1, 1, 3, 0, 0], [42, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 1, 1, 1, 0, 0, 1, 1, 1, 0], [0, 3, 3, 6, 8], [0, 3, 3, 1], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 9, 9, 5, 4, 0, 1, 1, 0, 1, 0, 2, 1, 1, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, beta), grad)), tf.math.add(beta, grad)), tf.math.sqrt(tf.math.add(beta, tf.math.square(tf.math.add(beta, alpha))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32))", "other_info": {"loss": [30111042.16101794, 557666559.644961, 2599003290.729362, 7247331955.708889, 15404762817.344076, 28564887718.902126], "accuracy": [0.1022322028875351, 0.09919429570436478, 0.09628847241401672, 0.10011887550354004, 0.10315678268671036, 0.10170386731624603], "val_loss": [112155428.57142857, 896301147.4285715, 3023962989.714286, 7166656512.0, 13995870208.0, 24183408932.57143], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [3, 2, 2, 3], [44, 57], [0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [3, 5, 0, 6, 2, 4, 2, 4, 5, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 3, 1, 0, 1, 1, 3, 0, 0], [90, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 0, 6, 9], [3, 1, 3, 1], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 3, 2, 0, 1, 1, 0, 1, 0, 7, 5, 2, 1], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.negative(grad)))), beta)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.negative(sigma), tf.math.divide_no_nan(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), alpha)))", "other_info": {"loss": [2.9343390498478117, 3.163426209749437, 3.163470203944831, 3.163453426437922, 3.163446027715177, 3.163459746750386], "accuracy": [0.09985470771789551, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [2.71925755909511, 2.7191531317574635, 2.7191217286246165, 2.719097478049142, 2.719085148402623, 2.719076565333775], "val_accuracy": [0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295, 0.09700000286102295]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [3, 2, 2, 3], [44, 57], [1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0], [2, 6, 6, 6, 5, 2, 2, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 1, 0, 1, 1, 3, 3, 0], [90, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0], [0, 8, 3, 6, 9, 7, 0], [3, 3, 0, 1], [99, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 22, 22, 12, 10, 4, 1, 1, 0, 1, 0, 9, 6, 3, 2], "tree_depth": 25, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(grad, tf.math.add(beta, grad))), tf.math.add(beta, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(alpha, tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(tf.math.add(beta, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(alpha, tf.math.add(beta, tf.math.add(tf.math.add(beta, alpha), tf.math.add(beta, grad)))))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32), tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.sqrt(tf.math.multiply(sigma, tf.math.divide_no_nan(tf.constant(9.99954602e-01, shape=shape, dtype=tf.float32), tf.math.add(sigma, tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32))))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09602430462837219, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [3, 2, 2, 3], [44, 57], [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [4, 6, 5, 6, 5, 2, 8, 4, 4, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 0, 0], [90, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 1, 1, 1], [4, 1, 3, 6, 9], [3, 3, 3, 1], [45, 38]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 6, 6, 3, 3, 0, 1, 1, 0, 1, 0, 5, 2, 3, 0], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, grad), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, grad))), grad)), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.pow(tf.math.subtract(sigma, sigma), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09602430462837219, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 1, 0, 1, 0, 0], [0, 0, 0, 1, 1, 1, 1], [1, 6, 4, 9], [3, 2, 2, 1], [44, 57], [0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1], [1, 6, 6, 6, 5, 2, 2, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 1, 3, 1, 3, 1, 2, 3, 2, 0, 1], [90, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [87], [0, 1, 0, 0, 0, 0, 0, 1, 1, 0], [1, 3, 3, 6, 9, 9], [3, 0, 0, 1], [45, 38, 30, 51]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 3, 4, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 9, 6, 3, 4], "tree_depth": 13, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.subtract(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.pow(tf.math.add(alpha, grad), grad), tf.math.add(alpha, grad))), tf.math.add(alpha, alpha)), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(sigma, tf.math.multiply(tf.math.multiply(tf.math.divide_no_nan(tf.constant(2.87185901e-01, shape=shape, dtype=tf.float32), tf.constant(8.92170603e-02, shape=shape, dtype=tf.float32)), tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)), tf.constant(5.75183132e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.0948355570435524, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], [7, 6, 4, 2, 6, 4, 9, 3, 6], [0, 3, 2, 3, 0, 0, 0, 3], [84, 57, 55, 15, 49], [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [6, 6, 6, 8, 5, 2, 2, 4, 5, 1, 4, 9, 8, 1, 1, 8, 9, 0], [2, 3, 3, 1, 0, 1, 1, 3, 0, 0], [42, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 1, 1, 0, 0, 1, 1, 1, 0], [0, 3, 1, 6, 9], [3, 3, 3, 1], [45, 38]], "fitness": -0.07571428269147873, "mapping_values": [1, 17, 17, 9, 8, 5, 9, 9, 5, 4, 0, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.99060945e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.pow(tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32), grad))), tf.math.multiply(tf.math.add(alpha, grad), grad))), tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.constant(9.39055039e-04, shape=shape, dtype=tf.float32))))), tf.math.add(alpha, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32))), grad), lambda shape,  alpha, beta, grad: tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(beta, tf.math.divide_no_nan(tf.math.sqrt(tf.math.add(beta, beta)), grad)), grad), tf.math.square(tf.math.add(beta, alpha))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, sigma))", "other_info": {"loss": [2.3028290777190046, 2.303529353772235, 2.3058293380631496, 2.307933443179299, 2.309443131602908, 2.3144558214193416, 2.3194211855414615, 2.321922629217446, 2.330725390976289, 2.3407828036930427, 2.3697282040139642, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08968432247638702, 0.08942015469074249, 0.08611807972192764, 0.0816272646188736, 0.07726852595806122, 0.07806102186441422, 0.07687227427959442, 0.07607977837324142, 0.07555144280195236, 0.0738343670964241, 0.07885351777076721, 0.09166556596755981, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.971672739301409, 1.9729258673531669, 1.9745426859174455, 1.9765809604099818, 1.9785806792122977, 1.9812673841203963, 1.9844933918544225, 1.9880010059901647, 1.9937804085867745, 2.005223819187709, 2.0459365844726562, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.03266666829586029, 0.029333332553505898, 0.029666665941476822, 0.028333334252238274, 0.03133333474397659, 0.03700000047683716, 0.047333333641290665, 0.06466666609048843, 0.08533333241939545, 0.09600000083446503, 0.10000000149011612, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [1, 2, 2, 3], [44, 57], [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1], [1, 6, 6, 6, 5, 5, 4, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [1, 3, 1, 1, 0, 1, 1, 3, 0, 0], [90, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 3, 3, 8, 9], [3, 3, 3, 1], [87, 38]], "fitness": -0.07514286041259766, "mapping_values": [1, 3, 3, 1, 2, 0, 5, 5, 2, 3, 0, 1, 1, 0, 1, 0, 7, 5, 2, 1], "tree_depth": 12, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad)), lambda shape,  alpha, beta, grad: tf.math.subtract(tf.math.add(beta, tf.math.divide_no_nan(alpha, grad)), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(sigma, tf.math.sqrt(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))), sigma))", "other_info": {"loss": [2.3028291496445146, 2.3035301949920877, 2.3058299544685474, 2.3079189174384047, 2.309429955504527, 2.3144304860678995, 2.319395287728754, 2.321892170810964, 2.3306773658977162, 2.340694342968313, 2.3694704430781304, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.08968432247638702, 0.08942015469074249, 0.08611807972192764, 0.0816272646188736, 0.07713644206523895, 0.07819310575723648, 0.07660810649394989, 0.07607977837324142, 0.07555144280195236, 0.0734381154179573, 0.07872143387794495, 0.09153348207473755, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.9716736929757255, 1.9729268891470773, 1.9745351246425085, 1.9765680176871163, 1.9785618100847517, 1.9812429291861398, 1.984471252986363, 1.9879698753356934, 1.9937291826520647, 2.0051260675702776, 2.045388698577881, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.03266666829586029, 0.029333332553505898, 0.029666665941476822, 0.028333334252238274, 0.03133333474397659, 0.03700000047683716, 0.047333333641290665, 0.06499999761581421, 0.08533333241939545, 0.09600000083446503, 0.10000000149011612, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0], [7, 6, 4, 9], [0, 3, 2, 3], [44, 57], [1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1], [2, 6, 5, 6, 5, 2, 8, 4, 4, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 0, 0], [88, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [1, 0, 1], [3, 3], [4], [], [0, 0, 0, 1, 1, 1], [0, 3, 3, 6, 9], [3, 3, 3, 1], [45, 38]], "fitness": -0.05657142773270607, "mapping_values": [1, 7, 7, 4, 3, 2, 9, 9, 5, 4, 0, 1, 1, 0, 1, 0, 6, 3, 3, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.pow(tf.math.add(alpha, grad), tf.math.add(alpha, tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.math.divide_no_nan(grad, grad)))), grad), tf.math.add(beta, tf.math.square(tf.math.add(beta, alpha)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.multiply(sigma, sigma), sigma))", "other_info": {"loss": [2.3022783522466708, 2.301563695563207, 2.3020886583823286, 2.301661784166138, 2.3013914674422082, 2.3023746535447707, 2.302801289216418, 2.3013173598560437, 2.302269583727154, 2.301790031286483, 2.3012552147040104, 2.301545065376091, 2.3013037201467363, 2.30175857987339, 2.3026074306635165, 2.301445127871877, 2.301270473272636, 2.301146057287873, 2.30094491583623, 2.300700592972646, 2.3000848796216173, 2.2998804169686213, 2.301328998782836, 2.299746189386995, 2.3007380028662823, 2.3007439543873076, 2.301224740300086, 2.3013376658067664, 2.2991718438480664, 2.3017532383021018, 2.299310267136916, 2.300698270792691, 2.29912404087572, 2.299317945374033, 2.2997586752964976, 2.30167872278115, 2.2999962952001267, 2.2998484447254026, 2.2998678181637797, 2.2989997572162606, 2.300335048983645, 2.2991706641311453, 2.297898789753358, 2.2995870535352587, 2.2983371080928365, 2.299484191112798, 2.3005431662650078, 2.2984700838115946, 2.300104338432174, 2.2975306383386624, 2.2995922707799656, 2.297845378449218, 2.2985584459379127, 2.2998053579754942, 2.297466301253569, 2.296992970873352, 2.298062703361002, 2.2984448570097284, 2.296256136790306, 2.297807859250221, 2.2998057221692423, 2.2977013342636545, 2.2983834369701244, 2.2982380268926774, 2.2966859397036665, 2.298665351178652, 2.297299081528774, 2.2983741648145846, 2.2982035007270225, 2.2960787177825916, 2.2978611433306044, 2.2977026800327707, 2.298177932278985, 2.296722790064703, 2.2975877392577018, 2.297480708619686, 2.2987640327576555, 2.296840438753339, 2.296886618300168, 2.297228267274402, 2.2976017271948055, 2.298448234768969, 2.296789306360481, 2.2965383193023987, 2.2973082807510914, 2.2965370358225377, 2.2963582624171655, 2.2960396909505905, 2.296576628012979, 2.2969370470574786, 2.2968521834584967, 2.296668662749041, 2.296621986336759, 2.2964620485974656, 2.2966074029987733, 2.2959482487182354, 2.2956156924321682, 2.2964977166593163, 2.295858468424926, 2.2954827685161527], "accuracy": [0.09047681838274002, 0.0940430611371994, 0.0948355570435524, 0.09272222965955734, 0.09166556596755981, 0.09087307006120682, 0.09113723784685135, 0.09232597798109055, 0.09060890227556229, 0.0948355570435524, 0.0936468094587326, 0.09285431355237961, 0.09047681838274002, 0.09285431355237961, 0.09166556596755981, 0.09140139818191528, 0.09285431355237961, 0.09259014576673508, 0.09245806187391281, 0.09708096832036972, 0.09457138925790787, 0.09536388516426086, 0.09232597798109055, 0.09708096832036972, 0.09113723784685135, 0.09760929644107819, 0.08889182657003403, 0.09113723784685135, 0.09681680053472519, 0.09219389408826828, 0.10249637067317963, 0.09549596905708313, 0.09959053993225098, 0.09536388516426086, 0.09430722147226334, 0.09021265059709549, 0.09853387624025345, 0.09351472556591034, 0.09985470771789551, 0.09351472556591034, 0.09589222073554993, 0.10077928751707077, 0.09998679161071777, 0.10051512718200684, 0.09959053993225098, 0.09589222073554993, 0.09549596905708313, 0.10038304328918457, 0.09351472556591034, 0.1006472036242485, 0.09628847241401672, 0.10870426893234253, 0.10196803510189056, 0.09536388516426086, 0.10196803510189056, 0.10460969805717468, 0.09747721254825592, 0.10738343745470047, 0.10368511080741882, 0.1014397069811821, 0.09787346422672272, 0.09813763201236725, 0.09826971590518951, 0.1072513535618782, 0.10447761416435242, 0.10447761416435242, 0.10434553027153015, 0.09840179979801178, 0.10091137140989304, 0.10593052208423615, 0.10381719470024109, 0.10196803510189056, 0.10315678268671036, 0.10421344637870789, 0.10249637067317963, 0.10500594228506088, 0.10051512718200684, 0.10553427785634995, 0.10830801725387573, 0.10593052208423615, 0.09932637959718704, 0.10157178342342377, 0.09998679161071777, 0.10949676483869553, 0.10011887550354004, 0.10394927859306335, 0.10460969805717468, 0.10962884873151779, 0.10751552134752274, 0.09932637959718704, 0.11279883980751038, 0.10672302544116974, 0.10394927859306335, 0.1014397069811821, 0.1072513535618782, 0.11279883980751038, 0.107647605240345, 0.10659094154834747, 0.11279883980751038, 0.10738343745470047], "val_loss": [1.9705030577523368, 1.970417090824672, 1.9703328950064523, 1.9702442714146204, 1.9701688630240304, 1.9701010159083776, 1.9700284004211426, 1.9699553080967493, 1.9698786054338728, 1.9698034014020647, 1.9697202954973494, 1.9696506091526575, 1.9695765631539481, 1.969496522630964, 1.9694225447518485, 1.969346591404506, 1.969273226601737, 1.969200951712472, 1.9691258839198522, 1.96905551637922, 1.9689833777291434, 1.9689057213919503, 1.9688378061567033, 1.9687651906694685, 1.9687002726963587, 1.9686339242117745, 1.9685664858136858, 1.968496663229806, 1.968421459197998, 1.9683606284005302, 1.968285356249128, 1.968219825199672, 1.9681508881705148, 1.9680939401899065, 1.968031747000558, 1.9679692132132394, 1.96790988104684, 1.9678519793919154, 1.9677869251796178, 1.9677207810538155, 1.9676555224827357, 1.9675898551940918, 1.9675308636256628, 1.9674766404288155, 1.967418875013079, 1.9673617226736886, 1.9673010281154089, 1.967245101928711, 1.9671889713832311, 1.9671309334891183, 1.967076029096331, 1.967029094696045, 1.966974871499198, 1.9669203077043806, 1.9668685368129186, 1.9668159484863281, 1.966769014086042, 1.966719627380371, 1.9666682652064733, 1.966613837650844, 1.9665651321411133, 1.966515404837472, 1.9664594786507743, 1.9664108412606376, 1.9663605690002441, 1.9663103648594447, 1.966261318751744, 1.9662136350359236, 1.96616758619036, 1.9661141804286413, 1.966062000819615, 1.9660164288112096, 1.9659669739859444, 1.965916701725551, 1.965867246900286, 1.9658141817365373, 1.9657656805855888, 1.9657188143048967, 1.9656737191336495, 1.9656268528529577, 1.9655763762337821, 1.965529101235526, 1.9654831205095564, 1.965433052607945, 1.9653832571847099, 1.965339524405343, 1.9652889115469796, 1.9652419090270996, 1.9651931353977747, 1.9651445661272322, 1.9650945663452148, 1.9650495392935616, 1.9650043078831263, 1.9649521282741003, 1.9649025372096471, 1.9648562840053014, 1.964808736528669, 1.964759417942592, 1.964714459010533, 1.9646692276000977], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03999999910593033, 0.041333332657814026, 0.041999999433755875, 0.04233333468437195, 0.0430000014603138, 0.04333333298563957, 0.04333333298563957, 0.04399999976158142, 0.04466666653752327, 0.04466666653752327, 0.04533333331346512, 0.04533333331346512, 0.045666664838790894, 0.045666664838790894, 0.045666664838790894, 0.04699999839067459, 0.04800000041723251, 0.04833333194255829, 0.04899999871850014, 0.049666665494441986, 0.050333332270383835, 0.050333332270383835, 0.05133333429694176, 0.052000001072883606, 0.052666667848825455, 0.05400000140070915, 0.05400000140070915, 0.05433333292603493, 0.05433333292603493, 0.054999999701976776, 0.054999999701976776, 0.054999999701976776, 0.05533333495259285, 0.055666666477918625, 0.055666666477918625, 0.0560000017285347, 0.05766666680574417, 0.057999998331069946, 0.05900000035762787, 0.059333331882953644, 0.059333331882953644, 0.059333331882953644, 0.059333331882953644, 0.060333333909511566, 0.06066666543483734, 0.061000000685453415, 0.061666667461395264, 0.061666667461395264, 0.06199999898672104, 0.06233333423733711, 0.06233333423733711, 0.06199999898672104, 0.06199999898672104, 0.06233333423733711, 0.06266666948795319, 0.06266666948795319, 0.06300000101327896, 0.06300000101327896, 0.06333333253860474, 0.06333333253860474, 0.06400000303983688, 0.06433333456516266, 0.06433333456516266, 0.06466666609048843, 0.06466666609048843, 0.06533333659172058, 0.06599999964237213, 0.06599999964237213, 0.06599999964237213, 0.06733333319425583, 0.0676666647195816, 0.06800000369548798, 0.06866666674613953, 0.06933332979679108, 0.06933332979679108, 0.070333331823349, 0.07000000029802322, 0.07066666334867477, 0.07100000232458115, 0.07100000232458115, 0.07133333384990692, 0.07199999690055847, 0.07233333587646484, 0.07233333587646484, 0.07333333045244217, 0.07333333045244217, 0.07433333247900009, 0.07466666400432587, 0.07466666400432587, 0.07466666400432587, 0.07533333450555801, 0.07599999755620956, 0.07699999958276749, 0.07699999958276749, 0.07800000160932541, 0.07900000363588333, 0.07900000363588333, 0.08033332973718643]}}, {"genotype": [[0], [0, 0, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0], [4, 6, 4, 9], [0, 3, 2, 3], [44, 57], [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [4, 6, 5, 6, 5, 2, 8, 4, 4, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 0, 0], [90, 71, 49, 84, 1, 78], [0, 0, 0, 1, 0], [0, 0, 1, 0], [3, 3, 9], [4], [31], [1, 0, 1, 1, 0, 0, 1, 1, 1, 0], [0, 3, 9, 6, 9], [3, 1, 3, 1], [45, 38]], "fitness": -0.03999999910593033, "mapping_values": [1, 7, 7, 4, 3, 2, 1, 1, 0, 1, 0, 5, 4, 3, 1, 1, 1, 0, 1, 0], "tree_depth": 11, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))), tf.math.pow(tf.math.add(alpha, grad), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, grad: grad, lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), sigma)), tf.math.add(sigma, tf.constant(2.32625358e-02, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3023126998581924, 2.301691847171262, 2.3023010090656757, 2.3019647525522324, 2.301765649735321, 2.302825197803818], "accuracy": [0.09034473448991776, 0.09377889335155487, 0.0940430611371994, 0.09166556596755981, 0.09074098616838455, 0.09060890227556229], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0], [7, 6, 4, 9], [1, 2, 2, 3], [44, 57], [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1], [9, 6, 5, 6, 5, 2, 8, 4, 4, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 1, 0, 1, 1, 3, 0, 0], [49, 71, 49, 84, 1, 78], [1, 0, 0, 1, 0], [1, 0, 1], [0, 3], [6, 4], [], [0, 0, 1, 1, 0, 0, 1, 1, 1, 0], [0, 3, 3, 6, 9], [3, 3, 3, 1], [45, 38]], "fitness": -0.03999999910593033, "mapping_values": [1, 3, 3, 1, 2, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 4, 2, 2, 0], "tree_depth": 7, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(4.74768924e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, sigma))", "other_info": {"loss": [2.3023126998581924, 2.301691847171262, 2.3023010090656757, 2.3019647525522324, 2.301765649735321, 2.302825197803818], "accuracy": [0.09034473448991776, 0.09377889335155487, 0.0940430611371994, 0.09166556596755981, 0.09074098616838455, 0.09060890227556229], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}]