[{"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 0, 5, 9, 6, 1, 3, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 0, 0, 3, 1, 3, 0, 0], [55, 33, 2, 9, 74, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.7991428375244141, "mapping_values": [1, 1, 1, 0, 1, 0, 5, 5, 4, 1, 2, 3, 1, 1, 0, 0, 4, 2, 2, 1], "tree_depth": 14, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.add(beta, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)))))), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9739312657811119, 1.4740670406744385, 0.9999084186717708, 0.9352940048728684, 0.8141304077788462, 0.7804480262908638, 0.7210896540358869, 0.7076283075774523, 0.6791364431711882, 0.690058891846598, 0.6251505552864252, 0.6588628993310224, 0.6073598470890669, 0.6182190915376534, 0.6141668967819013, 0.5937252440047601, 0.5632276970004015, 0.557018940978755, 0.5639264701915188, 0.538917380584749, 0.5135757615458869, 0.5246972894671729, 0.53365147050818, 0.5120298523771261, 0.49747821137952675, 0.49317069228267657, 0.4865826560820823], "accuracy": [0.34024566411972046, 0.5028398036956787, 0.6316206455230713, 0.6515651941299438, 0.698718786239624, 0.7054550051689148, 0.7310791015625, 0.7314753532409668, 0.7456082701683044, 0.7391361594200134, 0.7684586048126221, 0.7506273984909058, 0.7736098170280457, 0.7650244235992432, 0.7713643908500671, 0.7729493975639343, 0.7910447716712952, 0.7918372750282288, 0.7845727205276489, 0.7972526550292969, 0.8086118102073669, 0.8062343001365662, 0.7961959838867188, 0.8100647330284119, 0.8105930685997009, 0.8177255392074585, 0.817461371421814], "val_loss": [1.5007798671722412, 0.7916109732219151, 0.7973534890583583, 0.6126217671803066, 0.581809367452349, 0.5500772850854057, 0.5166762726647514, 0.593136191368103, 0.5213547774723598, 0.5003175394875663, 0.4921962874276297, 0.4881023849759783, 0.4626361472266061, 0.4892075913293021, 0.4532210486275809, 0.44468127829687937, 0.4438244955880301, 0.4389415298189436, 0.4474625417164394, 0.4323716163635254, 0.42022648027965, 0.41089641196387156, 0.41516679525375366, 0.40701328005109516, 0.4179443972451346, 0.4161338635853359, 0.408670391355242], "val_accuracy": [0.367000013589859, 0.6616666913032532, 0.6676666736602783, 0.7193333506584167, 0.7260000109672546, 0.7536666393280029, 0.7786666750907898, 0.7170000076293945, 0.7733333110809326, 0.7799999713897705, 0.7706666588783264, 0.7876666784286499, 0.7963333129882812, 0.7833333611488342, 0.8056666851043701, 0.8180000185966492, 0.812333345413208, 0.8196666836738586, 0.8109999895095825, 0.8263333439826965, 0.8220000267028809, 0.82833331823349, 0.8163333535194397, 0.82833331823349, 0.8153333067893982, 0.8226666450500488, 0.8263333439826965]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1], [3, 0, 2, 2, 4, 1, 3, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 3, 3, 3, 3, 0, 0], [52, 87, 36, 82, 8, 7], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [6, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.7991428375244141, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 3, 1, 1, 0, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.multiply(grad, tf.math.add(beta, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.divide_no_nan(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9739312657811119, 1.4740670406744385, 0.9999084186717708, 0.9352940048728684, 0.8141304077788462, 0.7804480262908638, 0.7210896540358869, 0.7076283075774523, 0.6791364431711882, 0.690058891846598, 0.6251505552864252, 0.6588628993310224, 0.6073598470890669, 0.6182190915376534, 0.6141668967819013, 0.5937252440047601, 0.5632276970004015, 0.557018940978755, 0.5639264701915188, 0.538917380584749, 0.5135757615458869, 0.5246972894671729, 0.53365147050818, 0.5120298523771261, 0.49747821137952675, 0.49317069228267657, 0.4865826560820823], "accuracy": [0.34024566411972046, 0.5028398036956787, 0.6316206455230713, 0.6515651941299438, 0.698718786239624, 0.7054550051689148, 0.7310791015625, 0.7314753532409668, 0.7456082701683044, 0.7391361594200134, 0.7684586048126221, 0.7506273984909058, 0.7736098170280457, 0.7650244235992432, 0.7713643908500671, 0.7729493975639343, 0.7910447716712952, 0.7918372750282288, 0.7845727205276489, 0.7972526550292969, 0.8086118102073669, 0.8062343001365662, 0.7961959838867188, 0.8100647330284119, 0.8105930685997009, 0.8177255392074585, 0.817461371421814], "val_loss": [1.5007798671722412, 0.7916109732219151, 0.7973534890583583, 0.6126217671803066, 0.581809367452349, 0.5500772850854057, 0.5166762726647514, 0.593136191368103, 0.5213547774723598, 0.5003175394875663, 0.4921962874276297, 0.4881023849759783, 0.4626361472266061, 0.4892075913293021, 0.4532210486275809, 0.44468127829687937, 0.4438244955880301, 0.4389415298189436, 0.4474625417164394, 0.4323716163635254, 0.42022648027965, 0.41089641196387156, 0.41516679525375366, 0.40701328005109516, 0.4179443972451346, 0.4161338635853359, 0.408670391355242], "val_accuracy": [0.367000013589859, 0.6616666913032532, 0.6676666736602783, 0.7193333506584167, 0.7260000109672546, 0.7536666393280029, 0.7786666750907898, 0.7170000076293945, 0.7733333110809326, 0.7799999713897705, 0.7706666588783264, 0.7876666784286499, 0.7963333129882812, 0.7833333611488342, 0.8056666851043701, 0.8180000185966492, 0.812333345413208, 0.8196666836738586, 0.8109999895095825, 0.8263333439826965, 0.8220000267028809, 0.82833331823349, 0.8163333535194397, 0.82833331823349, 0.8153333067893982, 0.8226666450500488, 0.8263333439826965]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [4, 1, 3, 1, 0, 4, 9, 6, 1, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 0, 0, 3, 1, 3, 0, 0], [55, 33, 2, 9, 74, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.7991428375244141, "mapping_values": [1, 1, 1, 0, 1, 0, 20, 20, 12, 8, 5, 3, 1, 1, 0, 0, 4, 2, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.negative(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))))), tf.math.divide_no_nan(tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))), tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, alpha)), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9739312657811119, 1.4740670406744385, 0.9999084186717708, 0.9352940048728684, 0.8141304077788462, 0.7804480262908638, 0.7210896540358869, 0.7076283075774523, 0.6791364431711882, 0.690058891846598, 0.6251505552864252, 0.6588628993310224, 0.6073598470890669, 0.6182190915376534, 0.6141668967819013, 0.5937252440047601, 0.5632276970004015, 0.557018940978755, 0.5639264701915188, 0.538917380584749, 0.5135757615458869, 0.5246972894671729, 0.53365147050818, 0.5120298523771261, 0.49747821137952675, 0.49317069228267657, 0.4865826560820823], "accuracy": [0.34024566411972046, 0.5028398036956787, 0.6316206455230713, 0.6515651941299438, 0.698718786239624, 0.7054550051689148, 0.7310791015625, 0.7314753532409668, 0.7456082701683044, 0.7391361594200134, 0.7684586048126221, 0.7506273984909058, 0.7736098170280457, 0.7650244235992432, 0.7713643908500671, 0.7729493975639343, 0.7910447716712952, 0.7918372750282288, 0.7845727205276489, 0.7972526550292969, 0.8086118102073669, 0.8062343001365662, 0.7961959838867188, 0.8100647330284119, 0.8105930685997009, 0.8177255392074585, 0.817461371421814], "val_loss": [1.5007798671722412, 0.7916109732219151, 0.7973534890583583, 0.6126217671803066, 0.581809367452349, 0.5500772850854057, 0.5166762726647514, 0.593136191368103, 0.5213547774723598, 0.5003175394875663, 0.4921962874276297, 0.4881023849759783, 0.4626361472266061, 0.4892075913293021, 0.4532210486275809, 0.44468127829687937, 0.4438244955880301, 0.4389415298189436, 0.4474625417164394, 0.4323716163635254, 0.42022648027965, 0.41089641196387156, 0.41516679525375366, 0.40701328005109516, 0.4179443972451346, 0.4161338635853359, 0.408670391355242], "val_accuracy": [0.367000013589859, 0.6616666913032532, 0.6676666736602783, 0.7193333506584167, 0.7260000109672546, 0.7536666393280029, 0.7786666750907898, 0.7170000076293945, 0.7733333110809326, 0.7799999713897705, 0.7706666588783264, 0.7876666784286499, 0.7963333129882812, 0.7833333611488342, 0.8056666851043701, 0.8180000185966492, 0.812333345413208, 0.8196666836738586, 0.8109999895095825, 0.8263333439826965, 0.8220000267028809, 0.82833331823349, 0.8163333535194397, 0.82833331823349, 0.8153333067893982, 0.8226666450500488, 0.8263333439826965]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [4, 2, 3, 1, 0, 3, 9, 6, 1, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 3, 3, 0, 3, 0, 0], [52, 87, 36, 82, 8, 7], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.7697142958641052, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 8, 6, 1, 1, 1, 0, 1, 0, 5, 3, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(grad, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.negative(tf.math.add(beta, grad)), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.multiply(grad, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.math.sqrt(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.442473375156429, 2.287385264218932, 2.0208560395722595, 1.9300322657673192, 1.902534417881863, 1.586182443110887, 1.2244558838915596, 1.053673999294739, 1.024938771580157, 0.9770158964093997, 0.8684244983625481, 0.8128397530568447, 0.7635266577185043, 0.8035353880044476, 0.7554921038304149, 0.6993537257927253, 0.674764877273548, 0.6539524762291304, 0.6238165247583622, 0.6438455853904983, 0.6104460989463725, 0.5991317207204542], "accuracy": [0.22612600028514862, 0.1274600476026535, 0.28120461106300354, 0.33601900935173035, 0.35807687044143677, 0.44868576526641846, 0.559371292591095, 0.617751955986023, 0.625148594379425, 0.6427156329154968, 0.6757363677024841, 0.6972658634185791, 0.7078325152397156, 0.698718786239624, 0.7166820764541626, 0.737022876739502, 0.7415136694908142, 0.7470611333847046, 0.7662131786346436, 0.7536653280258179, 0.7647602558135986, 0.7700436115264893], "val_loss": [1.9734289305550712, 1.8455957685198103, 1.353398357118879, 1.738555567605155, 1.103762422289167, 1.005453041621617, 0.7993535995483398, 0.8628172704151699, 0.6760903767177037, 0.6201736756733486, 0.5901643889290946, 0.6246667930058071, 0.6408706903457642, 0.5366489376340594, 0.5692073277064732, 0.5298718895230975, 0.4977060556411743, 0.5665378059659686, 0.5628514630453927, 0.4825919696262905, 0.5069682427815029, 0.5051719290869576], "val_accuracy": [0.14533333480358124, 0.24633333086967468, 0.5640000104904175, 0.3959999978542328, 0.5246666669845581, 0.5543333292007446, 0.6363333463668823, 0.624666690826416, 0.6886666417121887, 0.7200000286102295, 0.7509999871253967, 0.7099999785423279, 0.7113333344459534, 0.762666642665863, 0.7426666617393494, 0.7643333077430725, 0.7886666655540466, 0.7413333058357239, 0.7356666922569275, 0.7836666703224182, 0.7720000147819519, 0.7766666412353516]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [5, 2, 0, 1, 6, 3, 9, 3, 1, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 1, 3, 0, 3, 1, 1, 3, 0, 0], [55, 33, 28, 9, 74, 78], [0, 0, 0, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [9], [0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.7697142958641052, "mapping_values": [1, 1, 1, 0, 1, 0, 11, 11, 6, 5, 2, 3, 3, 1, 2, 0, 5, 3, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.subtract(tf.math.divide_no_nan(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, alpha)), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.multiply(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), grad))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), tf.math.add(sigma, sigma))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.math.sqrt(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.442473375156429, 2.287385264218932, 2.0208560395722595, 1.9300322657673192, 1.902534417881863, 1.586182443110887, 1.2244558838915596, 1.053673999294739, 1.024938771580157, 0.9770158964093997, 0.8684244983625481, 0.8128397530568447, 0.7635266577185043, 0.8035353880044476, 0.7554921038304149, 0.6993537257927253, 0.674764877273548, 0.6539524762291304, 0.6238165247583622, 0.6438455853904983, 0.6104460989463725, 0.5991317207204542], "accuracy": [0.22612600028514862, 0.1274600476026535, 0.28120461106300354, 0.33601900935173035, 0.35807687044143677, 0.44868576526641846, 0.559371292591095, 0.617751955986023, 0.625148594379425, 0.6427156329154968, 0.6757363677024841, 0.6972658634185791, 0.7078325152397156, 0.698718786239624, 0.7166820764541626, 0.737022876739502, 0.7415136694908142, 0.7470611333847046, 0.7662131786346436, 0.7536653280258179, 0.7647602558135986, 0.7700436115264893], "val_loss": [1.9734289305550712, 1.8455957685198103, 1.353398357118879, 1.738555567605155, 1.103762422289167, 1.005453041621617, 0.7993535995483398, 0.8628172704151699, 0.6760903767177037, 0.6201736756733486, 0.5901643889290946, 0.6246667930058071, 0.6408706903457642, 0.5366489376340594, 0.5692073277064732, 0.5298718895230975, 0.4977060556411743, 0.5665378059659686, 0.5628514630453927, 0.4825919696262905, 0.5069682427815029, 0.5051719290869576], "val_accuracy": [0.14533333480358124, 0.24633333086967468, 0.5640000104904175, 0.3959999978542328, 0.5246666669845581, 0.5543333292007446, 0.6363333463668823, 0.624666690826416, 0.6886666417121887, 0.7200000286102295, 0.7509999871253967, 0.7099999785423279, 0.7113333344459534, 0.762666642665863, 0.7426666617393494, 0.7643333077430725, 0.7886666655540466, 0.7413333058357239, 0.7356666922569275, 0.7836666703224182, 0.7720000147819519, 0.7766666412353516]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [9, 2, 3, 1, 0, 3, 4, 4, 1, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 3, 3, 0, 3, 0, 0], [52, 81, 36, 82, 8, 7], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [0, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.7697142958641052, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 2, 1, 1, 0, 0, 5, 3, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.math.sqrt(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.442473375156429, 2.287385264218932, 2.0208560395722595, 1.9300322657673192, 1.902534417881863, 1.586182443110887, 1.2244558838915596, 1.053673999294739, 1.024938771580157, 0.9770158964093997, 0.8684244983625481, 0.8128397530568447, 0.7635266577185043, 0.8035353880044476, 0.7554921038304149, 0.6993537257927253, 0.674764877273548, 0.6539524762291304, 0.6238165247583622, 0.6438455853904983, 0.6104460989463725, 0.5991317207204542], "accuracy": [0.22612600028514862, 0.1274600476026535, 0.28120461106300354, 0.33601900935173035, 0.35807687044143677, 0.44868576526641846, 0.559371292591095, 0.617751955986023, 0.625148594379425, 0.6427156329154968, 0.6757363677024841, 0.6972658634185791, 0.7078325152397156, 0.698718786239624, 0.7166820764541626, 0.737022876739502, 0.7415136694908142, 0.7470611333847046, 0.7662131786346436, 0.7536653280258179, 0.7647602558135986, 0.7700436115264893], "val_loss": [1.9734289305550712, 1.8455957685198103, 1.353398357118879, 1.738555567605155, 1.103762422289167, 1.005453041621617, 0.7993535995483398, 0.8628172704151699, 0.6760903767177037, 0.6201736756733486, 0.5901643889290946, 0.6246667930058071, 0.6408706903457642, 0.5366489376340594, 0.5692073277064732, 0.5298718895230975, 0.4977060556411743, 0.5665378059659686, 0.5628514630453927, 0.4825919696262905, 0.5069682427815029, 0.5051719290869576], "val_accuracy": [0.14533333480358124, 0.24633333086967468, 0.5640000104904175, 0.3959999978542328, 0.5246666669845581, 0.5543333292007446, 0.6363333463668823, 0.624666690826416, 0.6886666417121887, 0.7200000286102295, 0.7509999871253967, 0.7099999785423279, 0.7113333344459534, 0.762666642665863, 0.7426666617393494, 0.7643333077430725, 0.7886666655540466, 0.7413333058357239, 0.7356666922569275, 0.7836666703224182, 0.7720000147819519, 0.7766666412353516]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 2, 3, 1, 6, 3, 9, 6, 1, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 3, 3, 0, 3, 0, 0], [54, 87, 36, 82, 8, 7], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [70, 25, 61, 71, 34]], "fitness": -0.28200000524520874, "mapping_values": [1, 1, 1, 0, 1, 0, 17, 17, 9, 8, 2, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(grad, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, grad)), tf.math.add(beta, tf.math.multiply(grad, tf.constant(7.12814099e-01, shape=shape, dtype=tf.float32))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), grad)))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.math.sqrt(tf.constant(9.84348514e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.924102492320492, 2.2581847191738684, 2.183560849401252, 2.306157115239194, 2.2842951841862007, 2.904078704018745, 2.3062938585761295, 2.3036228273963855, 2.303129962217759, 2.303066792442121], "accuracy": [0.18557654321193695, 0.13630960881710052, 0.1966715157032013, 0.1006472036242485, 0.11649715900421143, 0.14040417969226837, 0.10011887550354004, 0.09734513610601425, 0.09496764093637466, 0.09906221181154251], "val_loss": [1.8772916112627303, 1.9601374353681291, 1.9804865292140417, 1.97315399987357, 1.765920570918492, 1.9789410318647112, 1.97441189629691, 1.9736799512590681, 1.9736940520150321, 1.973680019378662], "val_accuracy": [0.21400000154972076, 0.12833333015441895, 0.09833333641290665, 0.09833333641290665, 0.3473333418369293, 0.10000000149011612, 0.10000000149011612, 0.10400000214576721, 0.09700000286102295, 0.10400000214576721]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1], [4, 2, 3, 6, 0, 3, 9, 6, 1, 4, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 3, 3, 0, 3, 0, 0], [53, 87, 36, 82, 8, 7], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [0, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 2, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.22771428525447845, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 8, 6, 1, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(grad, tf.math.add(tf.math.add(beta, grad), tf.math.add(beta, tf.math.multiply(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.multiply(grad, tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), grad))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.9323043621069784, 2.2408904742413602, 2.279228291790546, 2.304905277217431, 2.303531532605027, 2.303377274524707], "accuracy": [0.1872936189174652, 0.14819706976413727, 0.17236824333667755, 0.10276053100824356, 0.09945846349000931, 0.09470347315073013], "val_loss": [1.7330497332981654, 1.9674838611057825, 1.976478031703404, 1.9742437771388464, 1.9738468442644392, 1.9738798141479492], "val_accuracy": [0.2553333342075348, 0.09966666996479034, 0.09833333641290665, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [4, 2, 5, 1, 0, 3, 9, 2, 1, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 0, 0, 3, 1, 3, 3, 0], [52, 87, 36, 34, 36, 7], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [0, 3, 0], [4, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 6, 8, 6, 7, 4, 9, 9], [1, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.22771428525447845, "mapping_values": [1, 1, 1, 0, 1, 0, 20, 20, 13, 7, 5, 2, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 34, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.multiply(tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.pow(grad, grad)), tf.math.add(beta, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, tf.constant(4.18339400e-02, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32))))), tf.math.sqrt(tf.math.add(beta, grad))), tf.math.add(beta, alpha)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.negative(sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.9323043621069784, 2.2408904742413602, 2.279228291790546, 2.304905277217431, 2.303531532605027, 2.303377274524707], "accuracy": [0.1872936189174652, 0.14819706976413727, 0.17236824333667755, 0.10276053100824356, 0.09945846349000931, 0.09470347315073013], "val_loss": [1.7330497332981654, 1.9674838611057825, 1.976478031703404, 1.9742437771388464, 1.9738468442644392, 1.9738798141479492], "val_accuracy": [0.2553333342075348, 0.09966666996479034, 0.09833333641290665, 0.0976666659116745, 0.0976666659116745, 0.0976666659116745]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [4, 2, 3, 1, 0, 3, 9, 6, 1, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 0, 0, 3, 1, 3, 0, 0], [52, 87, 27, 82, 8, 7], [0, 0, 0, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [33], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.10542856901884079, "mapping_values": [1, 1, 1, 0, 1, 0, 20, 20, 11, 9, 5, 3, 3, 1, 2, 0, 5, 3, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.math.subtract(tf.math.negative(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))))), grad)), tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(1.05038445e-02, shape=shape, dtype=tf.float32)), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, alpha)))))), tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, grad), tf.math.add(sigma, sigma))), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.math.sqrt(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.919818420672162, 2.285508474008109, 3.2238341328206865, 2.6292761564412217, 2.4111425665312627, 2.3404734163015997, 2.400800548823534, 2.307594739529498, 2.3405945427020023, 2.3035015882895906, 2.3501262898143445, 2.3574967730739695, 2.3382812517509013, 2.3698611492494064], "accuracy": [0.22176727652549744, 0.16853784024715424, 0.09840179979801178, 0.11081759631633759, 0.09998679161071777, 0.1002509593963623, 0.11227050423622131, 0.1332716941833496, 0.12521463632583618, 0.12217672914266586, 0.11227050423622131, 0.09853387624025345, 0.09509972482919693, 0.09998679161071777], "val_loss": [1.9986560004098075, 6.572023527962821, 2.0308312007359097, 2.036605085645403, 2.0106235912867954, 2.0603277342660085, 1.9599668639046806, 1.9910255840846471, 1.933750833783831, 2.008529935564314, 1.9877164704459054, 2.0402492795671736, 1.9937990733555384, 2.017892973763602], "val_accuracy": [0.09833333641290665, 0.10233332961797714, 0.09733333438634872, 0.10233332961797714, 0.10233332961797714, 0.1003333330154419, 0.1420000046491623, 0.1313333362340927, 0.14533333480358124, 0.1446666717529297, 0.10000000149011612, 0.10233332961797714, 0.10400000214576721, 0.10400000214576721]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [5, 2, 3, 1, 6, 3, 9, 6, 1, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 0, 0, 3, 1, 3, 0, 0], [14, 53, 36, 82, 8, 7], [0, 0, 0, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [0, 3], [9], [1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1], [0, 6, 8, 6, 7, 4, 9, 9], [1, 0, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [85, 25, 58, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 12, 12, 7, 5, 4, 3, 3, 1, 2, 1, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.square(tf.math.add(tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), tf.math.multiply(tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, grad))), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.multiply(tf.constant(6.69753570e-01, shape=shape, dtype=tf.float32), tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(tf.math.add(sigma, tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)), tf.math.add(sigma, sigma))), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1], [4, 2, 3, 1, 0, 3, 9, 6, 1, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 3, 3, 3, 0, 3, 0, 0], [52, 87, 36, 82, 8, 7], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 4, 8, 6, 7, 4], [2, 2, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 5, 3, 2, 0], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.pow(beta, tf.math.sqrt(beta)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [2, 0, 6, 2, 6, 1, 3, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 2, 0, 0, 3, 1, 3, 0, 0], [52, 87, 36, 82, 8, 7], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1], [0, 2, 4, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 8, 6, 4, 3, 1, 1, 0, 0, 12, 6, 6, 2], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), tf.math.add(beta, beta))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))))))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(sigma, tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)), tf.math.pow(alpha, beta)))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [9, 2, 3, 1, 6, 3, 9, 6, 1, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 0, 0, 3, 1, 3, 0, 0], [14, 53, 36, 82, 8, 7], [1, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [9], [0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1], [0, 6, 8, 6, 7, 4, 9, 9], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 10, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.constant(7.67413430e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(alpha, tf.math.sqrt(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1422533392906189, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [3, 0, 6, 2, 6, 1, 3, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 0, 0, 3, 1, 3, 0, 0], [55, 33, 2, 9, 74, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [65, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 3, 3, 1, 2, 0, 14, 14, 8, 6, 4, 3, 1, 1, 0, 0, 5, 3, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.pow(grad, tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.multiply(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.math.add(tf.math.divide_no_nan(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.math.add(beta, grad)), tf.math.add(beta, grad))), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.math.multiply(tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32), tf.constant(2.79614739e-04, shape=shape, dtype=tf.float32)))))))), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.math.sqrt(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09919429570436478, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [4, 2, 3, 1, 6, 3, 9, 6, 1, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 0, 0, 3, 1, 3, 0, 0], [13, 33, 2, 9, 74, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [0, 3], [65], [1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.constant(6.27124987e-04, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07858935743570328, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1], [4, 2, 3, 1, 0, 3, 9, 6, 1, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 3, 3, 3, 3, 3, 3, 0, 0], [52, 87, 36, 82, 8, 7], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 0, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 20, 20, 11, 9, 2, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.negative(beta), tf.math.add(beta, tf.math.multiply(tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)))), tf.math.divide_no_nan(grad, grad))), tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07858935743570328, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [9, 2, 3, 1, 6, 3, 9, 6, 1, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 1, 3, 3, 3, 0, 3, 0, 0], [10, 87, 36, 82, 8, 7], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [7, 3], [], [0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.09371428936719894, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 3, 1, 1, 0, 0, 2, 1, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(3.42191434e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [2.810254855194364, 2.888061821972453, 20.883226629041047, 270587.03943637485, NaN, NaN], "accuracy": [0.20420023798942566, 0.11781799048185349, 0.11834631860256195, 0.11887465417385101, 0.10408136248588562, 0.09998679161071777], "val_loss": [1.9560488292149134, 2.174309253692627, 3.1675879614693776, 111192290885632.0, NaN, NaN], "val_accuracy": [0.12700000405311584, 0.09966666996479034, 0.09833333641290665, 0.10333333164453506, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [1, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [4, 9, 3, 1, 0, 3, 9, 6, 1, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 0, 0, 3, 1, 3, 0, 0], [52, 87, 36, 82, 8, 7], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [0, 3], [75], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 0, 8, 8, 5, 3, 2, 1, 1, 0, 1, 1, 5, 3, 2, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.multiply(tf.math.subtract(tf.math.negative(tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.constant(9.94242714e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.math.sqrt(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.3023011485394425, 2.301786728507382, 2.3021797640070765, 2.301142641330014, 2.3023392233031696, 2.3011056165716606], "accuracy": [0.08968432247638702, 0.09285431355237961, 0.09166556596755981, 0.09008057415485382, 0.08889182657003403, 0.09470347315073013], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [1, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [4, 2, 5, 1, 0, 3, 9, 6, 1, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 2, 3, 3, 3, 0, 0, 3, 0, 0], [52, 87, 36, 82, 8, 7], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 0, 17, 17, 10, 7, 3, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, alpha), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.math.add(tf.math.square(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, beta)))), tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))))), grad), tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), grad)), tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.constant(9.99487531e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(6.13831074e-02, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3023011485394425, 2.301786728507382, 2.3021797640070765, 2.301142641330014, 2.3023392233031696, 2.3011056165716606], "accuracy": [0.08968432247638702, 0.09285431355237961, 0.09166556596755981, 0.09008057415485382, 0.08889182657003403, 0.09470347315073013], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}]