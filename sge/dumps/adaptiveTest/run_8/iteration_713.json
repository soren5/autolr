[{"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [6, 0, 2, 1, 2, 4, 9, 4, 1, 3, 4, 8, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 0, 3, 1, 0, 0, 0], [55, 56, 4, 35, 74, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.8240000009536743, "mapping_values": [1, 1, 1, 0, 1, 0, 16, 16, 9, 7, 2, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.negative(grad), tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.add(tf.math.add(beta, grad), tf.math.pow(tf.math.add(beta, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad))), grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, alpha))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.math.sqrt(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.260095937802193, 2.091147852076232, 1.6713143369351962, 1.4534607088529612, 1.0321906784333101, 0.8145608485429956, 0.7483931898425173, 0.6718741944279921, 0.6615923607133682, 0.6389582052820977, 0.5841140004354398, 0.5978315384191781, 0.567611183071212, 0.5583357117620394, 0.5610886205102411, 0.5368930497551796, 0.5036848566519854, 0.5048388982957553, 0.5214142148694059, 0.48566015939576485, 0.4914654752581804, 0.4855544167447635, 0.46829418980717863, 0.4597011502424267, 0.44669747485256056, 0.46142443587845816, 0.46155223103955817, 0.4284740966175053, 0.4198371266503108, 0.4099976465552789, 0.42594505869134575, 0.3980381778635605, 0.39861980190823154, 0.4059744566864011, 0.39094818834269035, 0.37935707329711765, 0.394938369240381, 0.3724833049904543, 0.35660993023523957, 0.36773414883662714, 0.38170123395902794, 0.3593509204320589, 0.3641062062241067], "accuracy": [0.2689208686351776, 0.2790912687778473, 0.44591203331947327, 0.5075947642326355, 0.628582775592804, 0.7040021419525146, 0.7224937081336975, 0.7427024245262146, 0.7518161535263062, 0.7552502751350403, 0.7798177003860474, 0.7746664881706238, 0.7844406366348267, 0.7885351777076721, 0.7864218950271606, 0.7991018295288086, 0.8124422430992126, 0.8049134612083435, 0.8057059645652771, 0.8235371708869934, 0.8141592741012573, 0.8206313848495483, 0.8190463781356812, 0.8252542614936829, 0.8339717388153076, 0.8227446675300598, 0.8284242749214172, 0.8374059200286865, 0.8409721255302429, 0.8491612672805786, 0.8392550349235535, 0.8507462739944458, 0.8457271456718445, 0.8482366800308228, 0.8500858545303345, 0.8595958352088928, 0.8485008478164673, 0.8593316674232483, 0.863558292388916, 0.8598600029945374, 0.8537842035293579, 0.8681812286376953, 0.8631620407104492], "val_loss": [1.9661163602556502, 1.260406494140625, 1.3617899077279227, 0.9622896058218819, 0.6544151476451329, 0.599433353969029, 0.5828209263937814, 0.5742888450622559, 0.5457526275089809, 0.48206336157662527, 0.48625757013048443, 0.4661593096596854, 0.43272726024900166, 0.4332313026700701, 0.4314233490398952, 0.41181265456335886, 0.45649669000080656, 0.40641837460654123, 0.4156777858734131, 0.4100008521761213, 0.4430024709020342, 0.41301616600581575, 0.3885211433683123, 0.3758743405342102, 0.40589544602802824, 0.4060030920164926, 0.40385494913373676, 0.378518887928554, 0.3809480667114258, 0.37481353112629484, 0.3696630001068115, 0.37478640249797274, 0.4415162886892046, 0.3568223629678999, 0.36992346388953073, 0.3545707038470677, 0.34735736676624845, 0.34596281392233713, 0.37719591174806866, 0.38383584363119944, 0.38390559809548513, 0.3614611710820879, 0.383798394884382], "val_accuracy": [0.09866666793823242, 0.4729999899864197, 0.4690000116825104, 0.562666654586792, 0.6676666736602783, 0.7306666374206543, 0.7350000143051147, 0.7363333106040955, 0.734000027179718, 0.7699999809265137, 0.781333327293396, 0.79666668176651, 0.8066666722297668, 0.8130000233650208, 0.8016666769981384, 0.8119999766349792, 0.79666668176651, 0.8169999718666077, 0.8106666803359985, 0.8223333358764648, 0.8140000104904175, 0.8253333568572998, 0.8356666564941406, 0.8389999866485596, 0.8226666450500488, 0.8289999961853027, 0.8256666660308838, 0.8393333554267883, 0.8429999947547913, 0.8410000205039978, 0.840666651725769, 0.8360000252723694, 0.815666675567627, 0.8506666421890259, 0.8433333039283752, 0.856333315372467, 0.8546666502952576, 0.8636666536331177, 0.8410000205039978, 0.8373333215713501, 0.8306666612625122, 0.8446666598320007, 0.8356666564941406]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1], [4, 8, 4, 1, 8, 4, 9, 6, 1, 4, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 3, 0, 3, 0, 1, 0, 0], [62, 33, 50, 35, 74, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.8119999766349792, "mapping_values": [1, 1, 1, 0, 1, 0, 11, 11, 7, 4, 2, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.sqrt(tf.math.add(beta, grad)), grad), tf.math.pow(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), grad)))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9787183729664777, 1.412639397136319, 1.0517654337541003, 0.8886264449396563, 0.8253713815109274, 0.7326595546893472, 0.7274859199403, 0.6936758228139382, 0.6656740031316689, 0.6415056426684775, 0.6349557616754435, 0.6167067962866796, 0.6060174597079617, 0.5908375184502285, 0.5847257622921739, 0.5648133412422741, 0.5517885456105989, 0.5253322762095807, 0.5267444626451436, 0.5417163665929822, 0.5067581303320258, 0.5053248394119773, 0.4867862169894686, 0.47595203866370994, 0.4766722748449938, 0.4639370132864049, 0.4659925846926934, 0.47024291010580643, 0.4400224083127473, 0.4500847582559796, 0.43977428914265876, 0.4293064393025379, 0.4197517796325457, 0.4167727797282701, 0.4173702309750736, 0.40124192248954593, 0.41738026672114376, 0.39987984850752734, 0.3966347859748492, 0.3906892487094576, 0.3920170526856586, 0.37450611625191965], "accuracy": [0.3311319649219513, 0.5172368288040161, 0.6193369626998901, 0.6716417670249939, 0.6930392384529114, 0.7263241410255432, 0.7317395210266113, 0.7384757399559021, 0.7506273984909058, 0.7605336308479309, 0.7564390301704407, 0.7687227725982666, 0.7646281719207764, 0.7812706232070923, 0.774270236492157, 0.7864218950271606, 0.7893276810646057, 0.804649293422699, 0.8017435073852539, 0.7980451583862305, 0.8101968169212341, 0.816008448600769, 0.8204993009567261, 0.8208954930305481, 0.8235371708869934, 0.82683926820755, 0.8245938420295715, 0.8267071843147278, 0.842028796672821, 0.8339717388153076, 0.8333113193511963, 0.8408400416374207, 0.8457271456718445, 0.8441421389579773, 0.842028796672821, 0.8535200357437134, 0.8413683772087097, 0.8532558679580688, 0.8525954484939575, 0.8529917001724243, 0.8540483713150024, 0.8619733452796936], "val_loss": [1.5430589744022913, 0.8866604055677142, 0.7120890276772636, 0.6880364758627755, 0.579527565411159, 0.5606657947812762, 0.5493984052113124, 0.5382266044616699, 0.5113002402441842, 0.519099405833653, 0.5337103605270386, 0.4773712158203125, 0.4776343788419451, 0.47151356084006174, 0.46743035316467285, 0.4609401226043701, 0.4748404026031494, 0.4178149104118347, 0.4252594198499407, 0.4382694108145578, 0.44796790395464214, 0.410329418522971, 0.4084770509174892, 0.4160252468926566, 0.41885244846343994, 0.4093408073697771, 0.38998208727155415, 0.38582199811935425, 0.40757093259266447, 0.37524149247578215, 0.3754997253417969, 0.36606826952525545, 0.3790530817849295, 0.36304406608854023, 0.3723734532083784, 0.37545678445271086, 0.35041102341243197, 0.36304664611816406, 0.34636515378952026, 0.35004979372024536, 0.37007990905216764, 0.3649194666317531], "val_accuracy": [0.4036666750907898, 0.6223333477973938, 0.6740000247955322, 0.6823333501815796, 0.7356666922569275, 0.7400000095367432, 0.762666642665863, 0.7646666765213013, 0.7680000066757202, 0.765666663646698, 0.7559999823570251, 0.7973333597183228, 0.7873333096504211, 0.7856666445732117, 0.7990000247955322, 0.7889999747276306, 0.7956666946411133, 0.8176666498184204, 0.812333345413208, 0.8016666769981384, 0.8073333501815796, 0.8286666870117188, 0.8276666402816772, 0.8196666836738586, 0.8136666417121887, 0.8193333148956299, 0.831333339214325, 0.8370000123977661, 0.8223333358764648, 0.8403333425521851, 0.8386666774749756, 0.8456666469573975, 0.8420000076293945, 0.8423333168029785, 0.8450000286102295, 0.8336666822433472, 0.8583333492279053, 0.8473333120346069, 0.856333315372467, 0.8553333282470703, 0.8376666903495789, 0.8393333554267883]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [2, 1, 2, 1, 0, 4, 9, 4, 1, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 2, 0, 3, 2, 3, 0, 0], [55, 56, 4, 35, 74, 78], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.8119999766349792, "mapping_values": [1, 1, 1, 0, 1, 0, 16, 16, 9, 7, 3, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.negative(tf.math.pow(tf.math.add(beta, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, grad))), grad), beta)), tf.math.add(beta, tf.math.pow(tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.math.subtract(grad, tf.math.add(beta, beta))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9787183729664777, 1.412639397136319, 1.0517654337541003, 0.8886264449396563, 0.8253713815109274, 0.7326595546893472, 0.7274859199403, 0.6936758228139382, 0.6656740031316689, 0.6415056426684775, 0.6349557616754435, 0.6167067962866796, 0.6060174597079617, 0.5908375184502285, 0.5847257622921739, 0.5648133412422741, 0.5517885456105989, 0.5253322762095807, 0.5267444626451436, 0.5417163665929822, 0.5067581303320258, 0.5053248394119773, 0.4867862169894686, 0.47595203866370994, 0.4766722748449938, 0.4639370132864049, 0.4659925846926934, 0.47024291010580643, 0.4400224083127473, 0.4500847582559796, 0.43977428914265876, 0.4293064393025379, 0.4197517796325457, 0.4167727797282701, 0.4173702309750736, 0.40124192248954593, 0.41738026672114376, 0.39987984850752734, 0.3966347859748492, 0.3906892487094576, 0.3920170526856586, 0.37450611625191965], "accuracy": [0.3311319649219513, 0.5172368288040161, 0.6193369626998901, 0.6716417670249939, 0.6930392384529114, 0.7263241410255432, 0.7317395210266113, 0.7384757399559021, 0.7506273984909058, 0.7605336308479309, 0.7564390301704407, 0.7687227725982666, 0.7646281719207764, 0.7812706232070923, 0.774270236492157, 0.7864218950271606, 0.7893276810646057, 0.804649293422699, 0.8017435073852539, 0.7980451583862305, 0.8101968169212341, 0.816008448600769, 0.8204993009567261, 0.8208954930305481, 0.8235371708869934, 0.82683926820755, 0.8245938420295715, 0.8267071843147278, 0.842028796672821, 0.8339717388153076, 0.8333113193511963, 0.8408400416374207, 0.8457271456718445, 0.8441421389579773, 0.842028796672821, 0.8535200357437134, 0.8413683772087097, 0.8532558679580688, 0.8525954484939575, 0.8529917001724243, 0.8540483713150024, 0.8619733452796936], "val_loss": [1.5430589744022913, 0.8866604055677142, 0.7120890276772636, 0.6880364758627755, 0.579527565411159, 0.5606657947812762, 0.5493984052113124, 0.5382266044616699, 0.5113002402441842, 0.519099405833653, 0.5337103605270386, 0.4773712158203125, 0.4776343788419451, 0.47151356084006174, 0.46743035316467285, 0.4609401226043701, 0.4748404026031494, 0.4178149104118347, 0.4252594198499407, 0.4382694108145578, 0.44796790395464214, 0.410329418522971, 0.4084770509174892, 0.4160252468926566, 0.41885244846343994, 0.4093408073697771, 0.38998208727155415, 0.38582199811935425, 0.40757093259266447, 0.37524149247578215, 0.3754997253417969, 0.36606826952525545, 0.3790530817849295, 0.36304406608854023, 0.3723734532083784, 0.37545678445271086, 0.35041102341243197, 0.36304664611816406, 0.34636515378952026, 0.35004979372024536, 0.37007990905216764, 0.3649194666317531], "val_accuracy": [0.4036666750907898, 0.6223333477973938, 0.6740000247955322, 0.6823333501815796, 0.7356666922569275, 0.7400000095367432, 0.762666642665863, 0.7646666765213013, 0.7680000066757202, 0.765666663646698, 0.7559999823570251, 0.7973333597183228, 0.7873333096504211, 0.7856666445732117, 0.7990000247955322, 0.7889999747276306, 0.7956666946411133, 0.8176666498184204, 0.812333345413208, 0.8016666769981384, 0.8073333501815796, 0.8286666870117188, 0.8276666402816772, 0.8196666836738586, 0.8136666417121887, 0.8193333148956299, 0.831333339214325, 0.8370000123977661, 0.8223333358764648, 0.8403333425521851, 0.8386666774749756, 0.8456666469573975, 0.8420000076293945, 0.8423333168029785, 0.8450000286102295, 0.8336666822433472, 0.8583333492279053, 0.8473333120346069, 0.856333315372467, 0.8553333282470703, 0.8376666903495789, 0.8393333554267883]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [5, 1, 2, 1, 0, 4, 9, 9, 1, 1, 1, 2, 8, 1, 1, 8, 9, 0], [0, 0, 3, 2, 0, 3, 2, 3, 0, 0], [55, 56, 2, 35, 74, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.8119999766349792, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.square(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9787183729664777, 1.412639397136319, 1.0517654337541003, 0.8886264449396563, 0.8253713815109274, 0.7326595546893472, 0.7274859199403, 0.6936758228139382, 0.6656740031316689, 0.6415056426684775, 0.6349557616754435, 0.6167067962866796, 0.6060174597079617, 0.5908375184502285, 0.5847257622921739, 0.5648133412422741, 0.5517885456105989, 0.5253322762095807, 0.5267444626451436, 0.5417163665929822, 0.5067581303320258, 0.5053248394119773, 0.4867862169894686, 0.47595203866370994, 0.4766722748449938, 0.4639370132864049, 0.4659925846926934, 0.47024291010580643, 0.4400224083127473, 0.4500847582559796, 0.43977428914265876, 0.4293064393025379, 0.4197517796325457, 0.4167727797282701, 0.4173702309750736, 0.40124192248954593, 0.41738026672114376, 0.39987984850752734, 0.3966347859748492, 0.3906892487094576, 0.3920170526856586, 0.37450611625191965], "accuracy": [0.3311319649219513, 0.5172368288040161, 0.6193369626998901, 0.6716417670249939, 0.6930392384529114, 0.7263241410255432, 0.7317395210266113, 0.7384757399559021, 0.7506273984909058, 0.7605336308479309, 0.7564390301704407, 0.7687227725982666, 0.7646281719207764, 0.7812706232070923, 0.774270236492157, 0.7864218950271606, 0.7893276810646057, 0.804649293422699, 0.8017435073852539, 0.7980451583862305, 0.8101968169212341, 0.816008448600769, 0.8204993009567261, 0.8208954930305481, 0.8235371708869934, 0.82683926820755, 0.8245938420295715, 0.8267071843147278, 0.842028796672821, 0.8339717388153076, 0.8333113193511963, 0.8408400416374207, 0.8457271456718445, 0.8441421389579773, 0.842028796672821, 0.8535200357437134, 0.8413683772087097, 0.8532558679580688, 0.8525954484939575, 0.8529917001724243, 0.8540483713150024, 0.8619733452796936], "val_loss": [1.5430589744022913, 0.8866604055677142, 0.7120890276772636, 0.6880364758627755, 0.579527565411159, 0.5606657947812762, 0.5493984052113124, 0.5382266044616699, 0.5113002402441842, 0.519099405833653, 0.5337103605270386, 0.4773712158203125, 0.4776343788419451, 0.47151356084006174, 0.46743035316467285, 0.4609401226043701, 0.4748404026031494, 0.4178149104118347, 0.4252594198499407, 0.4382694108145578, 0.44796790395464214, 0.410329418522971, 0.4084770509174892, 0.4160252468926566, 0.41885244846343994, 0.4093408073697771, 0.38998208727155415, 0.38582199811935425, 0.40757093259266447, 0.37524149247578215, 0.3754997253417969, 0.36606826952525545, 0.3790530817849295, 0.36304406608854023, 0.3723734532083784, 0.37545678445271086, 0.35041102341243197, 0.36304664611816406, 0.34636515378952026, 0.35004979372024536, 0.37007990905216764, 0.3649194666317531], "val_accuracy": [0.4036666750907898, 0.6223333477973938, 0.6740000247955322, 0.6823333501815796, 0.7356666922569275, 0.7400000095367432, 0.762666642665863, 0.7646666765213013, 0.7680000066757202, 0.765666663646698, 0.7559999823570251, 0.7973333597183228, 0.7873333096504211, 0.7856666445732117, 0.7990000247955322, 0.7889999747276306, 0.7956666946411133, 0.8176666498184204, 0.812333345413208, 0.8016666769981384, 0.8073333501815796, 0.8286666870117188, 0.8276666402816772, 0.8196666836738586, 0.8136666417121887, 0.8193333148956299, 0.831333339214325, 0.8370000123977661, 0.8223333358764648, 0.8403333425521851, 0.8386666774749756, 0.8456666469573975, 0.8420000076293945, 0.8423333168029785, 0.8450000286102295, 0.8336666822433472, 0.8583333492279053, 0.8473333120346069, 0.856333315372467, 0.8553333282470703, 0.8376666903495789, 0.8393333554267883]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1], [3, 8, 4, 1, 1, 4, 9, 6, 1, 4, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 3, 0, 3, 0, 1, 0, 0], [62, 33, 50, 35, 74, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.8119999766349792, "mapping_values": [1, 1, 1, 0, 1, 0, 20, 20, 12, 8, 5, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.multiply(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.subtract(tf.math.add(beta, grad), grad), tf.math.pow(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.math.divide_no_nan(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))))))), tf.math.pow(tf.math.add(beta, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, alpha))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [1.9787183729664777, 1.412639397136319, 1.0517654337541003, 0.8886264449396563, 0.8253713815109274, 0.7326595546893472, 0.7274859199403, 0.6936758228139382, 0.6656740031316689, 0.6415056426684775, 0.6349557616754435, 0.6167067962866796, 0.6060174597079617, 0.5908375184502285, 0.5847257622921739, 0.5648133412422741, 0.5517885456105989, 0.5253322762095807, 0.5267444626451436, 0.5417163665929822, 0.5067581303320258, 0.5053248394119773, 0.4867862169894686, 0.47595203866370994, 0.4766722748449938, 0.4639370132864049, 0.4659925846926934, 0.47024291010580643, 0.4400224083127473, 0.4500847582559796, 0.43977428914265876, 0.4293064393025379, 0.4197517796325457, 0.4167727797282701, 0.4173702309750736, 0.40124192248954593, 0.41738026672114376, 0.39987984850752734, 0.3966347859748492, 0.3906892487094576, 0.3920170526856586, 0.37450611625191965], "accuracy": [0.3311319649219513, 0.5172368288040161, 0.6193369626998901, 0.6716417670249939, 0.6930392384529114, 0.7263241410255432, 0.7317395210266113, 0.7384757399559021, 0.7506273984909058, 0.7605336308479309, 0.7564390301704407, 0.7687227725982666, 0.7646281719207764, 0.7812706232070923, 0.774270236492157, 0.7864218950271606, 0.7893276810646057, 0.804649293422699, 0.8017435073852539, 0.7980451583862305, 0.8101968169212341, 0.816008448600769, 0.8204993009567261, 0.8208954930305481, 0.8235371708869934, 0.82683926820755, 0.8245938420295715, 0.8267071843147278, 0.842028796672821, 0.8339717388153076, 0.8333113193511963, 0.8408400416374207, 0.8457271456718445, 0.8441421389579773, 0.842028796672821, 0.8535200357437134, 0.8413683772087097, 0.8532558679580688, 0.8525954484939575, 0.8529917001724243, 0.8540483713150024, 0.8619733452796936], "val_loss": [1.5430589744022913, 0.8866604055677142, 0.7120890276772636, 0.6880364758627755, 0.579527565411159, 0.5606657947812762, 0.5493984052113124, 0.5382266044616699, 0.5113002402441842, 0.519099405833653, 0.5337103605270386, 0.4773712158203125, 0.4776343788419451, 0.47151356084006174, 0.46743035316467285, 0.4609401226043701, 0.4748404026031494, 0.4178149104118347, 0.4252594198499407, 0.4382694108145578, 0.44796790395464214, 0.410329418522971, 0.4084770509174892, 0.4160252468926566, 0.41885244846343994, 0.4093408073697771, 0.38998208727155415, 0.38582199811935425, 0.40757093259266447, 0.37524149247578215, 0.3754997253417969, 0.36606826952525545, 0.3790530817849295, 0.36304406608854023, 0.3723734532083784, 0.37545678445271086, 0.35041102341243197, 0.36304664611816406, 0.34636515378952026, 0.35004979372024536, 0.37007990905216764, 0.3649194666317531], "val_accuracy": [0.4036666750907898, 0.6223333477973938, 0.6740000247955322, 0.6823333501815796, 0.7356666922569275, 0.7400000095367432, 0.762666642665863, 0.7646666765213013, 0.7680000066757202, 0.765666663646698, 0.7559999823570251, 0.7973333597183228, 0.7873333096504211, 0.7856666445732117, 0.7990000247955322, 0.7889999747276306, 0.7956666946411133, 0.8176666498184204, 0.812333345413208, 0.8016666769981384, 0.8073333501815796, 0.8286666870117188, 0.8276666402816772, 0.8196666836738586, 0.8136666417121887, 0.8193333148956299, 0.831333339214325, 0.8370000123977661, 0.8223333358764648, 0.8403333425521851, 0.8386666774749756, 0.8456666469573975, 0.8420000076293945, 0.8423333168029785, 0.8450000286102295, 0.8336666822433472, 0.8583333492279053, 0.8473333120346069, 0.856333315372467, 0.8553333282470703, 0.8376666903495789, 0.8393333554267883]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], [6, 6, 2, 1, 6, 4, 9, 4, 1, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 0, 3, 1, 1, 0, 0], [55, 56, 4, 92, 74, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.10057143121957779, "mapping_values": [1, 1, 1, 0, 1, 0, 21, 21, 11, 10, 4, 1, 0, 0, 0, 0, 2, 1, 1, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.add(tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.subtract(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, grad))), tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)))))), tf.math.add(beta, grad)), tf.math.add(beta, alpha)), alpha))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)), tf.constant(9.99813307e-01, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(alpha)", "other_info": {"loss": [3.093720304243254, 3.273523862131079, NaN, NaN, NaN, NaN], "accuracy": [0.18491612374782562, 0.1558578759431839, 0.09813763201236725, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.8242263112749373, 284.4494105747768, NaN, NaN, NaN, NaN], "val_accuracy": [0.1223333328962326, 0.10133333504199982, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1], [4, 1, 2, 1, 6, 4, 9, 4, 1, 4, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 3, 3, 2, 0, 3, 0, 0], [55, 67, 59, 35, 74, 78], [1, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [2, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 21, 21, 12, 9, 5, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.subtract(tf.math.add(tf.math.add(beta, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), grad))), tf.constant(9.71677118e-01, shape=shape, dtype=tf.float32))), tf.math.add(beta, tf.math.pow(grad, tf.math.add(beta, tf.math.subtract(beta, tf.math.add(beta, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, tf.math.pow(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.math.add(beta, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [2, 8, 4, 1, 8, 4, 9, 6, 1, 2, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 3, 3, 3, 1, 3, 0, 0], [55, 56, 4, 35, 74, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [0, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 11, 11, 6, 5, 1, 1, 0, 0, 0, 0, 5, 3, 2, 2], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(grad, tf.math.sqrt(tf.math.pow(grad, tf.math.subtract(tf.math.add(beta, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.sqrt(tf.math.pow(grad, tf.math.add(beta, grad)))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32), tf.math.sqrt(tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [11812.706731930542, 213763.74432868842, 1005316.0222559768, 2782073.819310527, 5986795.331594241, 10935319.038832387], "accuracy": [0.0940430611371994, 0.10170386731624603, 0.10077928751707077, 0.09774138033390045, 0.09734513610601425, 0.09879804402589798], "val_loss": [43759.447544642855, 344190.96428571426, 1155543.6785714286, 2732060.3571428573, 5327982.714285715, 9197561.42857143], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [4, 8, 4, 1, 8, 4, 9, 6, 1, 4, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 3, 0, 3, 0, 1, 0, 0], [52, 87, 36, 82, 8, 7], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 1, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 5, 3, 2, 0], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.sqrt(alpha), alpha))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [2, 1, 2, 1, 0, 4, 9, 4, 1, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 2, 0, 3, 2, 3, 0, 0], [55, 56, 2, 35, 74, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 4, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [55, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 10, 10, 5, 5, 3, 1, 0, 0, 0, 0, 5, 2, 3, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(beta, grad), tf.math.add(tf.math.subtract(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)))), beta), tf.math.add(beta, tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.subtract(tf.math.pow(alpha, tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), sigma)", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1], [6, 1, 2, 8, 0, 4, 8, 9, 2, 1, 1, 2, 8, 1, 1, 8, 9, 0], [3, 3, 3, 0, 3, 3, 1, 3, 0, 0], [55, 24, 4, 35, 74, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [2, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 12, 12, 8, 4, 2, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.subtract(tf.math.add(tf.math.sqrt(tf.math.negative(tf.math.pow(tf.math.add(beta, grad), grad))), tf.math.sqrt(grad)), tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.constant(5.75728612e-03, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(beta, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1], [2, 5, 4, 1, 8, 8, 9, 6, 1, 4, 4, 9, 8, 1, 1, 8, 9, 0], [0, 0, 3, 3, 0, 3, 0, 1, 0, 0], [52, 33, 50, 35, 74, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 6, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 14, 14, 9, 5, 4, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(beta, tf.math.pow(tf.math.subtract(tf.math.sqrt(tf.math.add(beta, tf.math.sqrt(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.divide_no_nan(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.11279883980751038, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], [5, 1, 2, 1, 0, 4, 6, 9, 1, 1, 1, 2, 8, 1, 1, 8, 9, 0], [3, 3, 1, 3, 3, 3, 1, 3, 0, 0], [52, 94, 59, 35, 74, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0], "tree_depth": 4, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: alpha", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.07436270266771317, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1], [6, 6, 2, 1, 4, 4, 9, 4, 0, 1, 3, 9, 8, 1, 1, 8, 9, 0, 4, 2, 7], [0, 3, 3, 3, 3, 1, 0, 2, 0, 0, 3, 5], [43, 22, 77, 8, 74, 78, 94], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 33, 33, 21, 12, 7, 3, 1, 1, 0, 0, 5, 3, 2, 1], "tree_depth": 32, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.divide_no_nan(tf.math.divide_no_nan(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.pow(tf.math.pow(tf.math.add(beta, tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.pow(tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.constant(3.85103236e-03, shape=shape, dtype=tf.float32)))), tf.math.subtract(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(9.96148968e-01, shape=shape, dtype=tf.float32)))), grad)))), tf.math.add(beta, grad)), tf.math.add(beta, grad))), tf.math.sqrt(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, alpha), tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))))), tf.math.subtract(tf.math.sqrt(tf.math.add(beta, tf.constant(9.92962885e-01, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.add(beta, beta)))), tf.math.pow(tf.math.add(tf.math.add(tf.math.add(beta, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)), tf.constant(9.99875353e-01, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), grad))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.sqrt(alpha), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [4, 1, 2, 8, 0, 4, 9, 6, 1, 1, 4, 2, 8, 1, 1, 8, 9, 0], [0, 3, 3, 3, 0, 3, 1, 1, 0, 0], [52, 87, 36, 82, 8, 7], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 9, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.math.sqrt(alpha), tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.09853387624025345, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [0, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1], [4, 9, 4, 1, 8, 4, 9, 6, 1, 4, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 2, 0, 3, 2, 3, 0, 0], [55, 56, 2, 35, 74, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 1, 14, 14, 9, 5, 4, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.pow(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, tf.math.sqrt(tf.math.pow(tf.math.add(beta, tf.constant(7.88036666e-01, shape=shape, dtype=tf.float32)), grad))), tf.constant(6.79983174e-05, shape=shape, dtype=tf.float32))), tf.math.divide_no_nan(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, beta), tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.math.sqrt(tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [2.301784857058522, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464, 2.3025827767464464], "accuracy": [0.09628847241401672, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164, 1.973642349243164], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [0, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [2, 5, 2, 1, 0, 4, 9, 4, 1, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 2, 0, 3, 2, 3, 0, 0], [35, 56, 2, 35, 74, 78], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 1, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.04028571397066116, "mapping_values": [1, 1, 1, 0, 1, 1, 3, 3, 1, 2, 1, 1, 1, 0, 1, 0, 4, 2, 2, 0], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.constant(4.18766684e-04, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, alpha))", "other_info": {"loss": [2.302434537829882, 2.301917056901312, 2.30172896419833, 2.3029565766439966, 2.3031032570065633, 2.3018681483104353, 2.3016894805259738], "accuracy": [0.08677849918603897, 0.08928807079792023, 0.08677849918603897, 0.09245806187391281, 0.09034473448991776, 0.09430722147226334, 0.0944393053650856], "val_loss": [1.9706082344055176, 1.9706266266959054, 1.9706453595842635, 1.9706638881138392, 1.9706824847630091, 1.9707013538905553, 1.9707209042140417], "val_accuracy": [0.039000000804662704, 0.03933333232998848, 0.039000000804662704, 0.03799999877810478, 0.03766666725277901, 0.03766666725277901, 0.03700000047683716]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [1, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1], [4, 5, 5, 1, 0, 4, 9, 6, 1, 4, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 3, 0, 3, 0, 1, 0, 0], [62, 33, 50, 35, 74, 78], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 0, 8, 8, 5, 3, 2, 1, 1, 0, 1, 0, 4, 2, 2, 1], "tree_depth": 19, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.pow(tf.constant(9.25893264e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(beta, tf.math.square(tf.math.subtract(tf.math.negative(tf.math.add(beta, grad)), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302418749676625, 2.3018730392765927, 2.301657648764235, 2.302838448504447, 2.3029465818323276, 2.30171198647146], "accuracy": [0.08677849918603897, 0.08915598690509796, 0.08651433140039444, 0.09338264167308807, 0.09008057415485382, 0.0940430611371994], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [1, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [0, 5, 2, 1, 8, 4, 0, 8, 1, 1, 4, 8, 8, 1, 1, 8, 9, 0], [3, 3, 3, 3, 3, 3, 1, 3, 0, 0], [55, 56, 4, 35, 74, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 0, 11, 11, 7, 4, 0, 1, 0, 0, 0, 0, 4, 2, 2, 1], "tree_depth": 22, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: alpha, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.add(beta, tf.math.square(tf.math.add(tf.math.add(beta, tf.math.subtract(tf.math.sqrt(tf.math.add(beta, tf.math.pow(tf.math.add(beta, grad), tf.math.add(beta, grad)))), tf.math.add(beta, tf.math.negative(grad)))), grad))))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(alpha, tf.constant(2.47663801e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.302418749676625, 2.3018730392765927, 2.301657648764235, 2.302838448504447, 2.3029465818323276, 2.30171198647146], "accuracy": [0.08677849918603897, 0.08915598690509796, 0.08651433140039444, 0.09338264167308807, 0.09008057415485382, 0.0940430611371994], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [4, 0, 5, 7, 9, 2, 5, 2, 8, 2, 0, 5, 3, 9, 5, 9, 3, 8, 0, 5, 5, 2, 0, 2, 1, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [11, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [7, 1, 2, 1, 0, 4, 9, 4, 1, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 3, 3, 2, 3, 1, 1, 0, 0], [55, 33, 2, 9, 74, 78], [0, 0, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 5, 8, 6, 7, 4], [1, 0, 3, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [44, 25, 61, 71, 34]], "fitness": -0.037142857909202576, "mapping_values": [1, 1, 1, 0, 1, 0, 10, 10, 5, 5, 1, 1, 1, 0, 1, 0, 3, 2, 1, 0], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(tf.math.subtract(tf.constant(7.52336199e-01, shape=shape, dtype=tf.float32), grad), tf.math.add(grad, tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.negative(beta))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.square(alpha))", "other_info": {"loss": [2.3029300377999062, 2.3040755098333072, 2.3055862263445337, 2.309121687619158, 2.312493788992897, 2.3147931706399936], "accuracy": [0.08506141602993011, 0.08585391938686371, 0.0796460211277008, 0.08558975160121918, 0.07872143387794495, 0.08175934851169586], "val_loss": [1.9717326164245605, 1.9732683045523507, 1.9747484070914132, 1.9767110688345773, 1.9793041774204798, 1.9821222850254603], "val_accuracy": [0.032999999821186066, 0.027000000700354576, 0.02566666714847088, 0.02566666714847088, 0.028999999165534973, 0.032999999821186066]}}]