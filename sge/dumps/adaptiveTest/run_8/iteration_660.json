[{"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 2, 9, 4, 5, 2, 0, 4, 9, 5, 1, 9, 1, 3, 3, 8, 0, 8, 5, 2, 0, 2, 8, 8], [2, 2, 0, 2, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 65, 59, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.7799999713897705, "mapping_values": [1, 35, 35, 25, 10, 6, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 53, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), tf.math.pow(tf.math.square(tf.math.add(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.subtract(tf.math.multiply(tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.square(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.add(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, grad))), grad)), tf.math.add(alpha, grad)))), grad), grad)))))))))))), tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2569955974569282, 2.055049234519246, 1.6255391681387976, 1.270288505653081, 1.0955446213306674, 1.0004114172934477, 0.9410798518869619, 0.8969677866347604, 0.8573631207468393, 0.8459493085346391, 0.8070752548818748, 0.7808233545346425, 0.7613202688354213, 0.7490715412825263, 0.7452605314746651, 0.7214641585845706, 0.7117252380006176, 0.6919135100821683, 0.7002618105703451, 0.6875153405004095, 0.6744128800953195, 0.66948025388142, 0.6600667882856833, 0.6592014485015814, 0.6530139280851917, 0.6497862502143305, 0.6499595704756991, 0.636278880160514, 0.6322921816116437, 0.6288830108173992, 0.6210995862087506], "accuracy": [0.19891692698001862, 0.38964468240737915, 0.4843481779098511, 0.5695416927337646, 0.6185444593429565, 0.6416589617729187, 0.6659622192382812, 0.6756042838096619, 0.693831741809845, 0.6892088055610657, 0.7055870890617371, 0.7172104120254517, 0.7226257920265198, 0.7243428826332092, 0.7272487282752991, 0.7304186820983887, 0.7371549606323242, 0.746268630027771, 0.737947404384613, 0.7441553473472595, 0.7531369924545288, 0.7519482374191284, 0.757099449634552, 0.7553823590278625, 0.7553823590278625, 0.7618544697761536, 0.7553823590278625, 0.7637035846710205, 0.7644960880279541, 0.7707040309906006, 0.7689869403839111], "val_loss": [1.8496947288513184, 1.5086037431444441, 1.048706156866891, 0.8285612038203648, 0.728510992867606, 0.673450197492327, 0.6352560520172119, 0.6174240282603672, 0.6052912984575544, 0.5784122092383248, 0.5606389556612287, 0.5462240832192558, 0.5367227452141898, 0.5289602449962071, 0.5296977928706578, 0.5142681428364345, 0.5109270811080933, 0.5076772996357509, 0.49762611729758127, 0.49393177032470703, 0.49762252398899626, 0.4979543856212071, 0.4905910151345389, 0.48275624002729145, 0.48380208015441895, 0.47242603983197895, 0.46823062215532574, 0.47021848814828054, 0.4812354700905936, 0.46871135916028706, 0.46754796164376394], "val_accuracy": [0.4749999940395355, 0.5376666784286499, 0.6489999890327454, 0.6763333082199097, 0.7036666870117188, 0.7153333425521851, 0.7416666746139526, 0.7429999709129333, 0.7383333444595337, 0.753000020980835, 0.7613333463668823, 0.7749999761581421, 0.7703333497047424, 0.7683333158493042, 0.7726666927337646, 0.7749999761581421, 0.7866666913032532, 0.781000018119812, 0.7873333096504211, 0.793666660785675, 0.7903333306312561, 0.7853333353996277, 0.7833333611488342, 0.8016666769981384, 0.7913333177566528, 0.8040000200271606, 0.8019999861717224, 0.7990000247955322, 0.7870000004768372, 0.7863333225250244, 0.7996666431427002]}}, {"genotype": [[0], [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [3, 6, 6, 6, 9, 4, 5, 2, 0, 4, 9, 5, 1, 3, 1, 3, 3, 8, 0, 8, 5, 2, 0, 2, 8, 8], [2, 1, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 65, 6, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.7799999713897705, "mapping_values": [1, 32, 32, 21, 11, 5, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 37, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.math.pow(tf.math.square(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32), grad))))), tf.math.add(alpha, tf.constant(1.52547986e-04, shape=shape, dtype=tf.float32))))), tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.square(tf.math.subtract(tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, grad), tf.math.multiply(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.square(tf.math.add(alpha, grad)))))))))), tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))), tf.math.add(alpha, alpha)), grad)))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.pow(grad, tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2569955974569282, 2.055049234519246, 1.6255391681387976, 1.270288505653081, 1.0955446213306674, 1.0004114172934477, 0.9410798518869619, 0.8969677866347604, 0.8573631207468393, 0.8459493085346391, 0.8070752548818748, 0.7808233545346425, 0.7613202688354213, 0.7490715412825263, 0.7452605314746651, 0.7214641585845706, 0.7117252380006176, 0.6919135100821683, 0.7002618105703451, 0.6875153405004095, 0.6744128800953195, 0.66948025388142, 0.6600667882856833, 0.6592014485015814, 0.6530139280851917, 0.6497862502143305, 0.6499595704756991, 0.636278880160514, 0.6322921816116437, 0.6288830108173992, 0.6210995862087506], "accuracy": [0.19891692698001862, 0.38964468240737915, 0.4843481779098511, 0.5695416927337646, 0.6185444593429565, 0.6416589617729187, 0.6659622192382812, 0.6756042838096619, 0.693831741809845, 0.6892088055610657, 0.7055870890617371, 0.7172104120254517, 0.7226257920265198, 0.7243428826332092, 0.7272487282752991, 0.7304186820983887, 0.7371549606323242, 0.746268630027771, 0.737947404384613, 0.7441553473472595, 0.7531369924545288, 0.7519482374191284, 0.757099449634552, 0.7553823590278625, 0.7553823590278625, 0.7618544697761536, 0.7553823590278625, 0.7637035846710205, 0.7644960880279541, 0.7707040309906006, 0.7689869403839111], "val_loss": [1.8496947288513184, 1.5086037431444441, 1.048706156866891, 0.8285612038203648, 0.728510992867606, 0.673450197492327, 0.6352560520172119, 0.6174240282603672, 0.6052912984575544, 0.5784122092383248, 0.5606389556612287, 0.5462240832192558, 0.5367227452141898, 0.5289602449962071, 0.5296977928706578, 0.5142681428364345, 0.5109270811080933, 0.5076772996357509, 0.49762611729758127, 0.49393177032470703, 0.49762252398899626, 0.4979543856212071, 0.4905910151345389, 0.48275624002729145, 0.48380208015441895, 0.47242603983197895, 0.46823062215532574, 0.47021848814828054, 0.4812354700905936, 0.46871135916028706, 0.46754796164376394], "val_accuracy": [0.4749999940395355, 0.5376666784286499, 0.6489999890327454, 0.6763333082199097, 0.7036666870117188, 0.7153333425521851, 0.7416666746139526, 0.7429999709129333, 0.7383333444595337, 0.753000020980835, 0.7613333463668823, 0.7749999761581421, 0.7703333497047424, 0.7683333158493042, 0.7726666927337646, 0.7749999761581421, 0.7866666913032532, 0.781000018119812, 0.7873333096504211, 0.793666660785675, 0.7903333306312561, 0.7853333353996277, 0.7833333611488342, 0.8016666769981384, 0.7913333177566528, 0.8040000200271606, 0.8019999861717224, 0.7990000247955322, 0.7870000004768372, 0.7863333225250244, 0.7996666431427002]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 4, 9, 4, 5, 2, 0, 4, 9, 5, 1, 9, 1, 3, 3, 8, 0, 6, 5, 2, 0, 2, 8, 8], [2, 2, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 65, 59, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.7799999713897705, "mapping_values": [1, 10, 10, 6, 4, 2, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 17, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)))))), tf.math.pow(tf.math.add(alpha, tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), grad)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2569955974569282, 2.055049234519246, 1.6255391681387976, 1.270288505653081, 1.0955446213306674, 1.0004114172934477, 0.9410798518869619, 0.8969677866347604, 0.8573631207468393, 0.8459493085346391, 0.8070752548818748, 0.7808233545346425, 0.7613202688354213, 0.7490715412825263, 0.7452605314746651, 0.7214641585845706, 0.7117252380006176, 0.6919135100821683, 0.7002618105703451, 0.6875153405004095, 0.6744128800953195, 0.66948025388142, 0.6600667882856833, 0.6592014485015814, 0.6530139280851917, 0.6497862502143305, 0.6499595704756991, 0.636278880160514, 0.6322921816116437, 0.6288830108173992, 0.6210995862087506], "accuracy": [0.19891692698001862, 0.38964468240737915, 0.4843481779098511, 0.5695416927337646, 0.6185444593429565, 0.6416589617729187, 0.6659622192382812, 0.6756042838096619, 0.693831741809845, 0.6892088055610657, 0.7055870890617371, 0.7172104120254517, 0.7226257920265198, 0.7243428826332092, 0.7272487282752991, 0.7304186820983887, 0.7371549606323242, 0.746268630027771, 0.737947404384613, 0.7441553473472595, 0.7531369924545288, 0.7519482374191284, 0.757099449634552, 0.7553823590278625, 0.7553823590278625, 0.7618544697761536, 0.7553823590278625, 0.7637035846710205, 0.7644960880279541, 0.7707040309906006, 0.7689869403839111], "val_loss": [1.8496947288513184, 1.5086037431444441, 1.048706156866891, 0.8285612038203648, 0.728510992867606, 0.673450197492327, 0.6352560520172119, 0.6174240282603672, 0.6052912984575544, 0.5784122092383248, 0.5606389556612287, 0.5462240832192558, 0.5367227452141898, 0.5289602449962071, 0.5296977928706578, 0.5142681428364345, 0.5109270811080933, 0.5076772996357509, 0.49762611729758127, 0.49393177032470703, 0.49762252398899626, 0.4979543856212071, 0.4905910151345389, 0.48275624002729145, 0.48380208015441895, 0.47242603983197895, 0.46823062215532574, 0.47021848814828054, 0.4812354700905936, 0.46871135916028706, 0.46754796164376394], "val_accuracy": [0.4749999940395355, 0.5376666784286499, 0.6489999890327454, 0.6763333082199097, 0.7036666870117188, 0.7153333425521851, 0.7416666746139526, 0.7429999709129333, 0.7383333444595337, 0.753000020980835, 0.7613333463668823, 0.7749999761581421, 0.7703333497047424, 0.7683333158493042, 0.7726666927337646, 0.7749999761581421, 0.7866666913032532, 0.781000018119812, 0.7873333096504211, 0.793666660785675, 0.7903333306312561, 0.7853333353996277, 0.7833333611488342, 0.8016666769981384, 0.7913333177566528, 0.8040000200271606, 0.8019999861717224, 0.7990000247955322, 0.7870000004768372, 0.7863333225250244, 0.7996666431427002]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 8, 2, 9, 4, 5, 2, 0, 4, 9, 5, 1, 9, 1, 2, 3, 8, 0, 8, 5, 2, 9, 2, 8, 8], [2, 2, 0, 2, 2, 2, 1, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 65, 59, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.7799999713897705, "mapping_values": [1, 34, 34, 25, 9, 6, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 53, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), tf.math.pow(tf.math.square(tf.math.add(grad, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32), tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.subtract(tf.math.add(tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.square(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, grad)), tf.math.add(alpha, tf.math.add(tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32), tf.math.add(tf.math.add(alpha, grad), tf.math.sqrt(tf.math.add(alpha, grad)))))), alpha))))))))))), grad)), tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.2569955974569282, 2.055049234519246, 1.6255391681387976, 1.270288505653081, 1.0955446213306674, 1.0004114172934477, 0.9410798518869619, 0.8969677866347604, 0.8573631207468393, 0.8459493085346391, 0.8070752548818748, 0.7808233545346425, 0.7613202688354213, 0.7490715412825263, 0.7452605314746651, 0.7214641585845706, 0.7117252380006176, 0.6919135100821683, 0.7002618105703451, 0.6875153405004095, 0.6744128800953195, 0.66948025388142, 0.6600667882856833, 0.6592014485015814, 0.6530139280851917, 0.6497862502143305, 0.6499595704756991, 0.636278880160514, 0.6322921816116437, 0.6288830108173992, 0.6210995862087506], "accuracy": [0.19891692698001862, 0.38964468240737915, 0.4843481779098511, 0.5695416927337646, 0.6185444593429565, 0.6416589617729187, 0.6659622192382812, 0.6756042838096619, 0.693831741809845, 0.6892088055610657, 0.7055870890617371, 0.7172104120254517, 0.7226257920265198, 0.7243428826332092, 0.7272487282752991, 0.7304186820983887, 0.7371549606323242, 0.746268630027771, 0.737947404384613, 0.7441553473472595, 0.7531369924545288, 0.7519482374191284, 0.757099449634552, 0.7553823590278625, 0.7553823590278625, 0.7618544697761536, 0.7553823590278625, 0.7637035846710205, 0.7644960880279541, 0.7707040309906006, 0.7689869403839111], "val_loss": [1.8496947288513184, 1.5086037431444441, 1.048706156866891, 0.8285612038203648, 0.728510992867606, 0.673450197492327, 0.6352560520172119, 0.6174240282603672, 0.6052912984575544, 0.5784122092383248, 0.5606389556612287, 0.5462240832192558, 0.5367227452141898, 0.5289602449962071, 0.5296977928706578, 0.5142681428364345, 0.5109270811080933, 0.5076772996357509, 0.49762611729758127, 0.49393177032470703, 0.49762252398899626, 0.4979543856212071, 0.4905910151345389, 0.48275624002729145, 0.48380208015441895, 0.47242603983197895, 0.46823062215532574, 0.47021848814828054, 0.4812354700905936, 0.46871135916028706, 0.46754796164376394], "val_accuracy": [0.4749999940395355, 0.5376666784286499, 0.6489999890327454, 0.6763333082199097, 0.7036666870117188, 0.7153333425521851, 0.7416666746139526, 0.7429999709129333, 0.7383333444595337, 0.753000020980835, 0.7613333463668823, 0.7749999761581421, 0.7703333497047424, 0.7683333158493042, 0.7726666927337646, 0.7749999761581421, 0.7866666913032532, 0.781000018119812, 0.7873333096504211, 0.793666660785675, 0.7903333306312561, 0.7853333353996277, 0.7833333611488342, 0.8016666769981384, 0.7913333177566528, 0.8040000200271606, 0.8019999861717224, 0.7990000247955322, 0.7870000004768372, 0.7863333225250244, 0.7996666431427002]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 8, 0, 3, 1, 2, 0, 8, 4, 5, 2, 9, 8, 9, 2, 9, 8, 0, 5, 0, 2, 0, 2, 8, 8], [0, 2, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 5, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [30, 25, 50, 71, 34]], "fitness": -0.5428571701049805, "mapping_values": [1, 14, 14, 8, 6, 3, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 5, 3, 2, 0], "tree_depth": 26, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(grad, tf.math.add(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, grad))))))))), tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32))), tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.square(beta)))", "other_info": {"loss": [2.3015295508483837, 2.2995554727885104, 2.297364601700329, 2.2968708819181627, 2.293666781278224, 2.293923642042999, 2.2913594351720503, 2.29067802728364, 2.2878828004303706, 2.2855467391036144, 2.285387732018695, 2.2831149093069656, 2.2815530445314023, 2.27990234652373, 2.2797819417717435, 2.2751469024498983, 2.275433918299566, 2.273478644981581, 2.2709950807465855, 2.2695302097883365, 2.2669994151193893, 2.266740569160158, 2.264404230271474, 2.2619101861370017, 2.260295698624151, 2.2582969930366894, 2.2582864089963803, 2.255400767714954, 2.252945484722673, 2.251732797639056, 2.250402139745069, 2.2481983408967596, 2.2461242659720826, 2.2442818627680583, 2.242239370322136, 2.239708541800333, 2.237783109601683, 2.2368738190246975, 2.2329616079933814, 2.231082390705986, 2.2276945481006227, 2.226591063087422, 2.225078241778812, 2.222630724789145, 2.2183672895583935, 2.216595746932044, 2.2149841181432977, 2.213244573614302, 2.208050025625787, 2.2068573090504535, 2.2032927483646954, 2.2003548224336673, 2.1974270123343316, 2.1959694140717305, 2.192152370157621, 2.188803064478324, 2.1879710469027365, 2.185250672115043, 2.1817209340514854, 2.1768895486059003, 2.1743858568483514, 2.1700143234337075, 2.1678241789065424, 2.164509052393254, 2.158821685077051, 2.1563597287578733, 2.150470538776092, 2.1496542236981626, 2.145141540280958, 2.144311410435092, 2.139369921677337, 2.1335645300789974, 2.1286875171558086, 2.1243021497951915, 2.1225651101571, 2.1144022452218767, 2.1117795577469347, 2.1053673335826, 2.104287509385385, 2.0985580373355157, 2.091996338389191, 2.086909828531177, 2.079236596220473, 2.0727139955278022, 2.069773428601643, 2.0664984811456084, 2.0621313230630163, 2.051988240639925, 2.0490513268305626, 2.0438806555920177, 2.0406188301642683, 2.0294216186489176, 2.0245186046539376, 2.0184634095563423, 2.0152526409429816, 2.008791429460198, 2.000648589622957, 1.993965226881823, 1.9841412616805818, 1.9761956218305816], "accuracy": [0.09179764986038208, 0.09800554811954498, 0.10236428678035736, 0.10460969805717468, 0.11570466309785843, 0.109232597053051, 0.11662924289703369, 0.11821424216032028, 0.12362963706254959, 0.136045441031456, 0.1336679458618164, 0.13855500519275665, 0.14198917150497437, 0.14674416184425354, 0.14661207795143127, 0.16431118547916412, 0.16351869702339172, 0.16721701622009277, 0.175670325756073, 0.18002906441688538, 0.1822744756937027, 0.18650111556053162, 0.18702945113182068, 0.1942940205335617, 0.19931316375732422, 0.20763438940048218, 0.20499274134635925, 0.21159687638282776, 0.2218993455171585, 0.21701228618621826, 0.22295601665973663, 0.22705058753490448, 0.22691850364208221, 0.24197596311569214, 0.23933430016040802, 0.24422137439250946, 0.24818386137485504, 0.2545238435268402, 0.2553163468837738, 0.2584863305091858, 0.2727513015270233, 0.26641130447387695, 0.26958128809928894, 0.26601505279541016, 0.27605336904525757, 0.2867520749568939, 0.2818650007247925, 0.2864879071712494, 0.3039228618144989, 0.2954695522785187, 0.3028661906719208, 0.3019416332244873, 0.3135649263858795, 0.3031303584575653, 0.3191123902797699, 0.3160744905471802, 0.31620657444000244, 0.31937655806541443, 0.32281073927879333, 0.32703739404678345, 0.3357548415660858, 0.3335094451904297, 0.3303394615650177, 0.33826443552970886, 0.3431515097618103, 0.3435477614402771, 0.3465856611728668, 0.3497556447982788, 0.34803855419158936, 0.3431515097618103, 0.35583147406578064, 0.3621714413166046, 0.368511438369751, 0.3646810054779053, 0.363360196352005, 0.3749834895133972, 0.3761722445487976, 0.3807951509952545, 0.3693039119243622, 0.37683266401290894, 0.3763043284416199, 0.3833047151565552, 0.39347511529922485, 0.39241844415664673, 0.3941355049610138, 0.39268261194229126, 0.3913617730140686, 0.3963809311389923, 0.39770177006721497, 0.4017963409423828, 0.39941883087158203, 0.40628713369369507, 0.3995509147644043, 0.40826839208602905, 0.41249504685401917, 0.40747588872909546, 0.4119667112827301, 0.41606128215789795, 0.4189670979976654, 0.4263637661933899], "val_loss": [1.9690004757472448, 1.9673988478524345, 1.9658023289271764, 1.9642167772565569, 1.9626499584742956, 1.961087703704834, 1.9595212936401367, 1.957967758178711, 1.9564213752746582, 1.954841136932373, 1.9532806532723563, 1.9516989162990026, 1.9501067570277624, 1.9485198429652624, 1.9469434874398368, 1.9453362737383162, 1.9437431607927596, 1.9421202795846122, 1.9405031204223633, 1.9388621194022042, 1.9372098105294364, 1.9355604307992118, 1.9338721547807967, 1.9321709360395158, 1.9304558209010534, 1.9287380490984236, 1.9270035198756628, 1.925241334097726, 1.923448153904506, 1.9216255460466658, 1.919794968196324, 1.917933804648263, 1.916036537715367, 1.914102349962507, 1.9121400969369071, 1.9101580892290388, 1.9081481524876185, 1.906109060559954, 1.9040091378348214, 1.9019049916948592, 1.8997468267168318, 1.8975742203848702, 1.8953497750418526, 1.8930681092398507, 1.890758718763079, 1.8884033475603377, 1.8860161645071847, 1.883600848061698, 1.8810826710292272, 1.8785404477800642, 1.8759290150233678, 1.873260498046875, 1.8705427306038993, 1.8677919932774134, 1.8649602617536272, 1.8620750563485282, 1.8591762270246233, 1.856210163661412, 1.8531700542994909, 1.850048610142299, 1.8468575477600098, 1.8435961178370885, 1.8402910232543945, 1.8368998255048479, 1.8333985464913505, 1.8298533303397042, 1.8262404714311873, 1.8225599697657995, 1.8188068526131767, 1.8150408608572823, 1.8111705780029297, 1.8072105135236467, 1.8031602587018694, 1.7990286009652274, 1.7948504856654577, 1.7905188288007463, 1.7861501148768835, 1.7816448892865862, 1.7770943641662598, 1.772479806627546, 1.7677347319466727, 1.762908867427281, 1.7579852512904577, 1.7528982162475586, 1.7477804592677526, 1.742558206830706, 1.7372593198503767, 1.7317756925310408, 1.7262723786490304, 1.7207230159214564, 1.7150892189570837, 1.7092703069959367, 1.7033301421574183, 1.6973398753574915, 1.6912781851632255, 1.6851060731070382, 1.6787597111293249, 1.6723991802760534, 1.6658705983843123, 1.6592018604278564], "val_accuracy": [0.049666665494441986, 0.060333333909511566, 0.070333331823349, 0.08233333379030228, 0.0976666659116745, 0.11366666853427887, 0.1289999932050705, 0.1420000046491623, 0.15966667234897614, 0.17733334004878998, 0.19366666674613953, 0.20999999344348907, 0.22166666388511658, 0.23233333230018616, 0.24699999392032623, 0.25833332538604736, 0.27433332800865173, 0.2876666784286499, 0.296999990940094, 0.30933332443237305, 0.3190000057220459, 0.3253333270549774, 0.33633333444595337, 0.34566667675971985, 0.35233333706855774, 0.35633334517478943, 0.36133334040641785, 0.3659999966621399, 0.3700000047683716, 0.37466666102409363, 0.3790000081062317, 0.38333332538604736, 0.3853333294391632, 0.3883333206176758, 0.39266666769981384, 0.39633333683013916, 0.39933332800865173, 0.40299999713897705, 0.40533334016799927, 0.4076666533946991, 0.4103333353996277, 0.41366666555404663, 0.4169999957084656, 0.42233332991600037, 0.4246666729450226, 0.4283333420753479, 0.4309999942779541, 0.4320000112056732, 0.43433332443237305, 0.437333345413208, 0.4386666715145111, 0.44200000166893005, 0.4436666667461395, 0.4476666748523712, 0.4506666660308838, 0.45133334398269653, 0.45633333921432495, 0.4583333432674408, 0.46033334732055664, 0.4650000035762787, 0.4676666557788849, 0.46933332085609436, 0.4713333249092102, 0.47433334589004517, 0.47600001096725464, 0.47733333706855774, 0.47999998927116394, 0.48100000619888306, 0.4830000102519989, 0.48399999737739563, 0.4873333275318146, 0.49033331871032715, 0.4933333396911621, 0.49666666984558105, 0.4973333477973938, 0.5006666779518127, 0.503333330154419, 0.5063333511352539, 0.5080000162124634, 0.5113333463668823, 0.5139999985694885, 0.5180000066757202, 0.5193333625793457, 0.5206666588783264, 0.5233333110809326, 0.5256666541099548, 0.5276666879653931, 0.5296666622161865, 0.5320000052452087, 0.5353333353996277, 0.5360000133514404, 0.5366666913032532, 0.5379999876022339, 0.5389999747276306, 0.5406666398048401, 0.5410000085830688, 0.5416666865348816, 0.5419999957084656, 0.5433333516120911, 0.5443333387374878]}}, {"genotype": [[0], [1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 8, 4, 2, 2, 0, 9, 2, 0, 9, 0, 5, 1, 3, 8, 9, 9, 8, 0, 8, 8, 2, 0, 2, 8, 8], [2, 1, 2, 2, 0, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 52, 59, 56, 8, 79, 86, 52, 44], [0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 5, 4, 2, 6, 6, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [10, 33, 18, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.408857136964798, "mapping_values": [1, 15, 15, 11, 4, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 2, 1, 1, 0], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.sqrt(tf.math.add(alpha, tf.math.pow(tf.math.add(tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.add(alpha, grad)), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), tf.math.add(alpha, tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)))))), grad))), tf.math.add(alpha, tf.math.negative(grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(sigma)", "other_info": {"loss": [3.8871464327168646, 2.308236797267514, 2.304419953951258, 2.304260731562175, 2.30334712173866, 2.303069649623165, 2.3008777948182257, 2.280833718232223, 2.274575335521897, 2.3043378005331974, 2.303061274710018, 2.303333172252102, 2.3032905613946215], "accuracy": [0.15532954037189484, 0.09285431355237961, 0.10236428678035736, 0.09694888442754745, 0.09800554811954498, 0.09602430462837219, 0.11610091477632523, 0.1868973672389984, 0.15717871487140656, 0.09549596905708313, 0.1010434553027153, 0.09509972482919693, 0.09826971590518951], "val_loss": [1.9800951821463448, 1.9751472473144531, 1.97390535899571, 1.9736226626804896, 1.973489829472133, 1.9731276375906808, 1.96706451688494, 1.9314748900277274, 1.9740715708051408, 1.9738022259303503, 1.9737698010035925, 1.9737599236624581, 1.9738471848624093], "val_accuracy": [0.09966666996479034, 0.09833333641290665, 0.09733333438634872, 0.11166666448116302, 0.09966666996479034, 0.11766666918992996, 0.23800000548362732, 0.3190000057220459, 0.09833333641290665, 0.09700000286102295, 0.09733333438634872, 0.09700000286102295, 0.0976666659116745]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 0, 5, 2, 5, 4, 5, 2, 0, 5, 9, 5, 1, 9, 1, 3, 3, 8, 0, 8, 5, 2, 0, 1, 9, 8], [2, 2, 0, 2, 2, 2, 1, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 65, 59, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [1, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [7, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.408857136964798, "mapping_values": [1, 1, 1, 0, 1, 0, 2, 2, 1, 1, 0, 1, 0, 0, 0, 0, 5, 3, 2, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.add(tf.math.multiply(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)), beta)", "other_info": {"loss": [3.8871464327168646, 2.308236797267514, 2.304419953951258, 2.304260731562175, 2.30334712173866, 2.303069649623165, 2.3008777948182257, 2.280833718232223, 2.274575335521897, 2.3043378005331974, 2.303061274710018, 2.303333172252102, 2.3032905613946215], "accuracy": [0.15532954037189484, 0.09285431355237961, 0.10236428678035736, 0.09694888442754745, 0.09800554811954498, 0.09602430462837219, 0.11610091477632523, 0.1868973672389984, 0.15717871487140656, 0.09549596905708313, 0.1010434553027153, 0.09509972482919693, 0.09826971590518951], "val_loss": [1.9800951821463448, 1.9751472473144531, 1.97390535899571, 1.9736226626804896, 1.973489829472133, 1.9731276375906808, 1.96706451688494, 1.9314748900277274, 1.9740715708051408, 1.9738022259303503, 1.9737698010035925, 1.9737599236624581, 1.9738471848624093], "val_accuracy": [0.09966666996479034, 0.09833333641290665, 0.09733333438634872, 0.11166666448116302, 0.09966666996479034, 0.11766666918992996, 0.23800000548362732, 0.3190000057220459, 0.09833333641290665, 0.09700000286102295, 0.09733333438634872, 0.09700000286102295, 0.0976666659116745]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 4, 6, 9, 4, 5, 2, 0, 4, 9, 5, 1, 9, 1, 3, 3, 8, 0, 8, 5, 2, 0, 2, 8, 8], [2, 0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 65, 59, 52, 8, 79, 86, 52, 44], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [71, 25, 50, 71, 34]], "fitness": -0.399142861366272, "mapping_values": [1, 29, 29, 20, 9, 5, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 28, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))), tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32))), tf.math.pow(grad, grad)), tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.square(tf.math.add(alpha, tf.math.subtract(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(alpha, grad), tf.math.add(alpha, grad)))))))), tf.math.add(alpha, tf.math.multiply(tf.math.multiply(grad, tf.math.add(alpha, tf.math.sqrt(grad))), tf.math.negative(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32)))))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(9.87174790e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [3.815365868410839, 2.308294244178487, 2.3043484786057187, 2.3041708552527185, 2.302910997095739, 2.297356285171549, 2.1983049259902527, 3.4474383344613737, 2.3060216875029687, 2.303732456075769, 2.3031748316433167, 2.3029566988291883], "accuracy": [0.15559370815753937, 0.09192973375320435, 0.10394927859306335, 0.09576013684272766, 0.09509972482919693, 0.13630960881710052, 0.20882314443588257, 0.12059172987937927, 0.09668471664190292, 0.09747721254825592, 0.0948355570435524, 0.09536388516426086], "val_loss": [1.9804373468671526, 1.9751110076904297, 1.9738024984087263, 1.9734205518450056, 1.9723055022103446, 1.9463807514735632, 1.8496447971888952, 1.9801880972726005, 1.9752683639526367, 1.9742698669433594, 1.973952089037214, 1.9738606725420271], "val_accuracy": [0.09966666996479034, 0.09833333641290665, 0.09733333438634872, 0.09966666996479034, 0.13099999725818634, 0.2316666692495346, 0.26733332872390747, 0.10000000149011612, 0.10000000149011612, 0.09700000286102295, 0.10000000149011612, 0.09700000286102295]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [5, 6, 9, 2, 9, 4, 5, 2, 0, 4, 9, 5, 1, 9, 1, 3, 3, 8, 0, 8, 5, 2, 0, 2, 8, 8], [2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 65, 73, 52, 8, 17, 86, 52, 44], [1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [4, 4, 3, 2, 6, 3, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [78, 25, 50, 71, 34]], "fitness": -0.21457143127918243, "mapping_values": [1, 4, 4, 3, 1, 1, 13, 13, 8, 5, 5, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad)))), lambda shape,  alpha, beta, grad: tf.math.pow(tf.math.pow(tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.multiply(tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32), tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)))), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32))), tf.constant(9.99771521e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(9.96851186e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [3.017286880440511, 2.3017117410933636, 2.186643686749286, 2.3060035998432973, 2.288582710179954, 2.2945876882974074, 2.3037167997439587, 2.303419937342386, 2.3031289698724593, 2.3030280980609112], "accuracy": [0.15955619513988495, 0.11966715008020401, 0.23273015022277832, 0.10196803510189056, 0.12151630967855453, 0.11649715900421143, 0.09906221181154251, 0.09853387624025345, 0.10117553919553757, 0.09945846349000931], "val_loss": [1.9785022735595703, 1.8900786127362932, 1.9799355098179408, 1.9725403104509627, 1.894087450844901, 1.9740028381347656, 1.9737050192696708, 1.9736302920750208, 1.9736460958208357, 1.9736035210745675], "val_accuracy": [0.09833333641290665, 0.25866666436195374, 0.10233332961797714, 0.10233332961797714, 0.2619999945163727, 0.10400000214576721, 0.10000000149011612, 0.10233332961797714, 0.10400000214576721, 0.10400000214576721]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 5, 6, 9, 4, 5, 2, 8, 4, 9, 5, 1, 9, 1, 3, 3, 0, 1, 8, 5, 2, 0, 2, 8, 8], [2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 65, 59, 52, 8, 3, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [1, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1], [0, 3, 2, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 32, 32, 22, 10, 5, 4, 4, 2, 2, 0, 1, 0, 0, 0, 0, 4, 2, 2, 0], "tree_depth": 31, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, grad))))), tf.math.pow(tf.math.square(tf.math.add(grad, tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)))))), tf.math.pow(tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.math.square(grad))))), tf.math.add(alpha, tf.math.subtract(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, alpha), tf.math.add(alpha, grad))), tf.math.multiply(tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.sqrt(tf.math.square(tf.math.add(alpha, tf.math.add(grad, grad)))), tf.math.add(alpha, tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))))), alpha))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.pow(grad, tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: sigma, lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, beta))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 6, 8, 6, 1, 1, 2, 0, 8, 4, 5, 2, 9, 8, 9, 2, 9, 8, 0, 5, 0, 2, 0, 2, 8, 8], [2, 2, 2, 2, 0, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 65, 73, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 5, 4, 2, 3, 6, 3, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 0, 3, 2, 1, 3, 0, 0], [18, 33, 57, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [3, 0, 2, 9, 2, 9], [3, 3, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [80, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 0, 13, 13, 7, 6, 3, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.sqrt(tf.math.divide_no_nan(grad, tf.math.add(alpha, grad))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.square(tf.math.pow(tf.math.add(beta, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.multiply(tf.math.add(beta, grad), tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32)), tf.constant(8.19823407e-01, shape=shape, dtype=tf.float32))))), tf.math.multiply(grad, beta))))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.multiply(tf.math.negative(sigma), tf.math.add(sigma, tf.constant(9.97895596e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.15770703554153442, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 0, 5, 2, 5, 4, 5, 2, 0, 5, 9, 5, 1, 9, 1, 3, 3, 8, 0, 8, 5, 2, 0, 1, 9, 8], [2, 2, 0, 2, 2, 2, 1, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 65, 59, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [7, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [0, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 3, 3, 1, 2, 0, 1, 1, 0, 1, 0, 4, 4, 0, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.add(grad, grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.7832117445984412, 7.798813780458486, 19.799565805372954, 39.09940131200917, 66.62323157970916, 105.42618990379034], "accuracy": [0.09457138925790787, 0.10011887550354004, 0.09642054885625839, 0.1014397069811821, 0.10381719470024109, 0.09932637959718704], "val_loss": [3.215962682451521, 8.67691775730678, 18.570594787597656, 33.63251059395926, 54.746892656598774, 82.93691580636161], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 0, 5, 2, 5, 4, 5, 2, 0, 5, 9, 5, 1, 9, 1, 3, 3, 8, 0, 8, 5, 2, 0, 1, 9, 8], [2, 2, 0, 2, 2, 2, 1, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 65, 59, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [0, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [30, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 3, 1, 2], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3456709733523904, 2.8323646670618485, 4.258300672857879, 6.623159679833058, 9.842681108700711, 14.184124290195234, 19.251661634212155], "accuracy": [0.09298639744520187, 0.09893012791872025, 0.09655263274908066, 0.1002509593963623, 0.10513802617788315, 0.09932637959718704, 0.09787346422672272], "val_loss": [2.0618251391819546, 2.5522830145699635, 3.677126884460449, 5.444365910121372, 7.808786119733538, 10.78079468863351, 14.397671290806361], "val_accuracy": [0.0989999994635582, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 0, 2, 2, 4, 5, 2, 0, 4, 9, 5, 1, 9, 1, 3, 1, 8, 0, 8, 8, 2, 0, 2, 8, 8], [2, 2, 0, 2, 0, 2, 2, 2, 0, 1, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 65, 59, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [0, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [43, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 36, 36, 24, 12, 6, 2, 2, 1, 1, 0, 3, 1, 1, 0, 0, 4, 3, 1, 2], "tree_depth": 50, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(tf.math.add(alpha, grad), tf.math.pow(tf.math.square(tf.math.add(grad, tf.math.negative(tf.math.add(alpha, tf.math.pow(tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32), tf.math.add(alpha, tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, tf.math.square(tf.math.subtract(tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.subtract(tf.math.multiply(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.sqrt(tf.math.add(alpha, tf.math.negative(tf.math.sqrt(grad))))), tf.math.add(alpha, tf.math.sqrt(tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.add(tf.math.add(alpha, tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32)), grad))), tf.math.add(alpha, grad)))))), grad), tf.constant(2.28478855e-04, shape=shape, dtype=tf.float32))))))), tf.math.add(alpha, alpha))))), grad), tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(tf.constant(2.11963334e-01, shape=shape, dtype=tf.float32), tf.constant(7.03711536e-03, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [15.095033923002864, 136.0840664310478, 492.4071305556745, 1219.54478793786, 2466.9946897882337, 4422.991848134535], "accuracy": [0.0948355570435524, 0.1014397069811821, 0.09694888442754745, 0.10117553919553757, 0.10368511080741882, 0.09985470771789551], "val_loss": [36.934600830078125, 183.95448085239954, 525.9750453404018, 1161.712646484375, 2185.693917410714, 3691.500418526786], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 1, 4, 8, 4, 1, 9, 2, 0, 4, 9, 2, 9, 3, 9, 6, 9, 9, 0, 8, 8, 2, 0, 2, 8, 8], [2, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 65, 59, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 2, 2, 6, 6, 1, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [0, 3, 0, 0, 0, 2, 1, 3, 0, 0], [18, 33, 57, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 4, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 14, 14, 9, 5, 2, 6, 6, 3, 3, 2, 1, 1, 0, 1, 0, 6, 4, 2, 1], "tree_depth": 23, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, tf.math.negative(tf.math.add(alpha, tf.math.subtract(tf.math.add(alpha, tf.math.pow(tf.math.add(alpha, grad), grad)), tf.math.sqrt(tf.math.pow(tf.math.subtract(tf.math.add(alpha, grad), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.add(grad, tf.math.negative(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)))))))))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.add(tf.math.add(beta, tf.constant(1.72012560e-03, shape=shape, dtype=tf.float32)), tf.math.add(beta, grad)), tf.math.add(beta, tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32))))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.math.pow(beta, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32))))", "other_info": {"loss": [NaN, NaN, NaN, NaN, NaN, NaN], "accuracy": [0.1010434553027153, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777, 0.09998679161071777], "val_loss": [NaN, NaN, NaN, NaN, NaN, NaN], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 0, 5, 2, 5, 4, 5, 2, 0, 5, 9, 5, 1, 9, 1, 3, 3, 8, 0, 8, 5, 2, 0, 1, 9, 8], [2, 2, 0, 2, 2, 2, 1, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 65, 59, 52, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 7, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 8, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(alpha, grad), lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.add(sigma, tf.constant(5.07243606e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [391.8076046465442, 2.3210702597457247, 2.307558798031044, 2.3041126633269866, 2.303214256364467, 2.3026895849003437], "accuracy": [0.09628847241401672, 0.09694888442754745, 0.09457138925790787, 0.0956280529499054, 0.09391097724437714, 0.09681680053472519], "val_loss": [2.000396864754813, 1.9813058035714286, 1.9757254464285714, 1.9743061746869768, 1.9738148280552454, 41060.786830357145], "val_accuracy": [0.10400000214576721, 0.10400000214576721, 0.09733333438634872, 0.10400000214576721, 0.09966666996479034, 0.10300000011920929]}}, {"genotype": [[0], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 6, 3, 6, 9, 4, 5, 6, 0, 3, 9, 3, 1, 9, 1, 3, 3, 8, 0, 8, 5, 2, 0, 2, 8, 8], [2, 2, 0, 2, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 65, 59, 52, 4, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 9, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [20, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 34, 34, 23, 11, 6, 4, 4, 2, 2, 0, 1, 1, 0, 1, 0, 2, 2, 0, 1], "tree_depth": 43, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.divide_no_nan(tf.math.add(alpha, tf.math.multiply(tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, grad), tf.math.add(alpha, grad))), tf.constant(5.25231076e-01, shape=shape, dtype=tf.float32))), tf.math.pow(tf.math.square(tf.constant(9.58166060e-01, shape=shape, dtype=tf.float32)), tf.math.add(alpha, tf.math.divide_no_nan(tf.math.add(alpha, tf.math.negative(tf.math.multiply(tf.math.add(alpha, tf.constant(8.72048295e-01, shape=shape, dtype=tf.float32)), tf.math.multiply(grad, tf.math.subtract(tf.constant(6.23645483e-01, shape=shape, dtype=tf.float32), tf.math.subtract(tf.math.add(alpha, tf.math.multiply(tf.math.multiply(tf.math.add(alpha, tf.math.sqrt(tf.math.negative(grad))), tf.math.add(alpha, tf.math.sqrt(grad))), tf.math.square(tf.math.add(tf.math.add(alpha, grad), grad)))), tf.math.add(alpha, tf.constant(1.01848815e-04, shape=shape, dtype=tf.float32)))))))), tf.math.add(alpha, tf.constant(9.97425690e-01, shape=shape, dtype=tf.float32)))))), tf.math.negative(tf.math.add(alpha, grad))), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.pow(grad, tf.math.add(beta, grad)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.constant(2.57431039e-03, shape=shape, dtype=tf.float32))", "other_info": {"loss": [45.66447482010188, 528.4429338460491, 2174.6528687603704, 5718.142391093482, 11903.691380581537, 21686.046864423046], "accuracy": [0.09496764093637466, 0.10170386731624603, 0.09655263274908066, 0.1010434553027153, 0.10368511080741882, 0.09985470771789551], "val_loss": [128.20268903459822, 770.7821568080357, 2415.0963309151784, 5546.330915178572, 10651.378348214286, 18212.44754464286], "val_accuracy": [0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034, 0.09966666996479034]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [2, 0, 5, 2, 5, 4, 5, 2, 0, 5, 9, 5, 1, 9, 1, 3, 3, 8, 0, 8, 5, 2, 0, 1, 9, 8], [2, 2, 0, 2, 0, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 65, 73, 93, 8, 79, 86, 52, 44], [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 3, 2, 6, 6, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 36, 91, 78], [0, 1, 1, 1, 0, 1], [1, 1, 1, 0], [3, 3, 0], [5, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 1, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [72, 25, 50, 71, 34]], "fitness": -0.10000000149011612, "mapping_values": [1, 7, 7, 4, 3, 1, 2, 2, 1, 1, 0, 1, 1, 0, 1, 0, 4, 3, 1, 1], "tree_depth": 16, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.math.add(tf.math.negative(tf.math.add(alpha, tf.math.square(tf.math.add(alpha, tf.math.add(grad, tf.math.add(alpha, grad)))))), tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32)), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(grad)), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.subtract(sigma, tf.constant(9.89496155e-01, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3027933939746217, 2.3030038208710186, 2.30297558815598, 2.303018842847545, 2.302938524348751, 2.302938103912025, 2.3029521011074916], "accuracy": [0.08875974267721176, 0.09615638852119446, 0.09549596905708313, 0.09549596905708313, 0.08849557489156723, 0.09787346422672272, 0.09893012791872025], "val_loss": [1.97369384765625, 1.9735772950308663, 1.9736488206045968, 1.9736265454973494, 1.9736215727669852, 1.9736975261143275, 1.9735868317740304], "val_accuracy": [0.09966666996479034, 0.10400000214576721, 0.09733333438634872, 0.10400000214576721, 0.09966666996479034, 0.09833333641290665, 0.10233332961797714]}}, {"genotype": [[0], [1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [0, 6, 8, 0, 1, 1, 2, 0, 8, 4, 5, 2, 9, 8, 9, 2, 9, 8, 0, 5, 0, 2, 0, 2, 8, 8], [2, 1, 2, 2, 0, 2, 2, 2, 0, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [50, 65, 59, 52, 8, 79, 86, 52, 44], [0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 5, 4, 2, 6, 6, 9, 4, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [10, 33, 18, 82, 91, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [5, 3], [], [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 3, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [35, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 3, 1, 1, 0, 0, 1, 0, 1, 0], "tree_depth": 5, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: grad, lambda shape,  alpha, beta, grad: tf.math.add(beta, grad), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: sigma", "other_info": {"loss": [2.3022183293695417, 2.3019331181132796, 2.3014334905826184, 2.302669848149967, 2.30104672803288, 2.302986858354316], "accuracy": [0.09047681838274002, 0.09259014576673508, 0.09311848133802414, 0.09113723784685135, 0.09840179979801178, 0.08955223858356476], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}, {"genotype": [[0], [1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1], [9, 6, 9, 8, 2, 1, 5, 9, 8, 3, 9, 5, 9, 3, 4, 6, 3, 5, 0, 8, 3, 2, 0, 2, 8, 8], [2, 2, 2, 2, 2, 1, 2, 2, 2, 0, 2, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 2, 0, 0, 2, 3], [90, 65, 73, 52, 8, 17, 86, 52, 44], [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 4, 1, 2, 6, 1, 9, 9, 2, 1, 4, 9, 8, 1, 1, 8, 9, 0], [3, 3, 0, 0, 0, 2, 1, 3, 0, 0], [32, 33, 83, 82, 91, 78], [0, 1, 1, 1, 0, 1], [0, 1, 1, 0], [3, 3, 0], [4, 3], [], [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1], [0, 3, 9, 9, 2, 9], [3, 2, 2, 0, 1, 2, 2, 3, 0, 3, 2, 2, 3, 3, 2, 3, 3, 2], [30, 25, 50, 71, 34]], "fitness": -0.03999999910593033, "mapping_values": [1, 1, 1, 1, 0, 1, 12, 12, 8, 4, 4, 3, 1, 1, 0, 0, 4, 3, 1, 1], "tree_depth": 20, "phenotype": "alpha_func, beta_func, sigma_func, grad_func = lambda shape,  alpha, grad: tf.constant(9.99720385e-01, shape=shape, dtype=tf.float32), lambda shape,  alpha, beta, grad: tf.math.add(beta, tf.math.negative(tf.math.pow(tf.math.add(beta, tf.math.subtract(tf.math.add(beta, grad), tf.math.add(beta, tf.math.add(tf.math.add(beta, tf.math.divide_no_nan(tf.math.add(beta, grad), tf.math.add(beta, tf.constant(2.83228820e-02, shape=shape, dtype=tf.float32)))), tf.math.add(beta, tf.math.subtract(tf.constant(3.44451957e-02, shape=shape, dtype=tf.float32), tf.constant(9.98850958e-01, shape=shape, dtype=tf.float32))))))), tf.constant(9.98594080e-01, shape=shape, dtype=tf.float32)))), lambda shape,  alpha, beta, sigma, grad: tf.math.add(sigma, tf.math.multiply(sigma, sigma)), lambda shape,  alpha, beta, sigma, grad: tf.math.negative(tf.math.multiply(sigma, tf.constant(1.90885420e-02, shape=shape, dtype=tf.float32)))", "other_info": {"loss": [2.3022183293695417, 2.3019331181132796, 2.3014334905826184, 2.302669848149967, 2.30104672803288, 2.302986858354316], "accuracy": [0.09047681838274002, 0.09259014576673508, 0.09311848133802414, 0.09113723784685135, 0.09840179979801178, 0.08955223858356476], "val_loss": [1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998, 1.9705901827130998], "val_accuracy": [0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848, 0.03933333232998848]}}]